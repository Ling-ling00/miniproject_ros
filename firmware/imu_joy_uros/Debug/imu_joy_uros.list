
imu_joy_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d5e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ff8  0801d7c0  0801d7c0  0001e7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f7b8  0801f7b8  00021c00  2**0
                  CONTENTS
  4 .ARM          00000008  0801f7b8  0801f7b8  000207b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f7c0  0801f7c0  00021c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0801f7c0  0801f7c0  000207c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f7dc  0801f7dc  000207dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c00  20000000  0801f7e0  00021000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bb84  20000c00  080203e0  00021c00  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c784  080203e0  00022784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021c00  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260a1  00000000  00000000  00021c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea2  00000000  00000000  00047cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e38  00000000  00000000  0004cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001777  00000000  00000000  0004e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9ef  00000000  00000000  00050127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026219  00000000  00000000  0007cb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116f70  00000000  00000000  000a2d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b9c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009398  00000000  00000000  001b9d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001c30b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000c00 	.word	0x20000c00
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801d7a8 	.word	0x0801d7a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000c04 	.word	0x20000c04
 800021c:	0801d7a8 	.word	0x0801d7a8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <init_matrix>:
 */

#include "KalmanSensorFusion.h"
#include <math.h>

void init_matrix(matrix_instance* mat, int rows, int cols, float* values) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
    mat->numRows = rows;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	641a      	str	r2, [r3, #64]	@ 0x40
    mat->numCols = cols;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rows; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e01e      	b.n	8001056 <init_matrix+0x5e>
        for (int j = 0; j < cols; j++) {
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e014      	b.n	8001048 <init_matrix+0x50>
            mat->data[i][j] = values[i * cols + j];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fb03 f202 	mul.w	r2, r3, r2
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	0098      	lsls	r0, r3, #2
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4403      	add	r3, r0
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < cols; j++) {
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbe6      	blt.n	800101e <init_matrix+0x26>
    for (int i = 0; i < rows; i++) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	429a      	cmp	r2, r3
 800105c:	dbdc      	blt.n	8001018 <init_matrix+0x20>
        }
    }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <matrix_add>:

void matrix_add(matrix_instance* a, matrix_instance* b, matrix_instance* result) {
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < a->numRows; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e02a      	b.n	80010d4 <matrix_add+0x68>
        for (int j = 0; j < a->numCols; j++) {
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	e01f      	b.n	80010c4 <matrix_add+0x58>
            result->data[i][j] = a->data[i][j] + b->data[i][j];
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	0099      	lsls	r1, r3, #2
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	440b      	add	r3, r1
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	0099      	lsls	r1, r3, #2
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	440b      	add	r3, r1
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	0099      	lsls	r1, r3, #2
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	440b      	add	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < a->numCols; j++) {
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	3301      	adds	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbda      	blt.n	8001084 <matrix_add+0x18>
    for (int i = 0; i < a->numRows; i++) {
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbcf      	blt.n	800107e <matrix_add+0x12>
        }
    }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <matrix_subtract>:

void matrix_subtract(matrix_instance* a, matrix_instance* b, matrix_instance* result) {
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < a->numRows; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e02a      	b.n	8001154 <matrix_subtract+0x68>
        for (int j = 0; j < a->numCols; j++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	e01f      	b.n	8001144 <matrix_subtract+0x58>
            result->data[i][j] = a->data[i][j] - b->data[i][j];
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	0099      	lsls	r1, r3, #2
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	440b      	add	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	ed93 7a00 	vldr	s14, [r3]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	0099      	lsls	r1, r3, #2
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	440b      	add	r3, r1
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	0099      	lsls	r1, r3, #2
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	440b      	add	r3, r1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < a->numCols; j++) {
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	429a      	cmp	r2, r3
 800114c:	dbda      	blt.n	8001104 <matrix_subtract+0x18>
    for (int i = 0; i < a->numRows; i++) {
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	429a      	cmp	r2, r3
 800115c:	dbcf      	blt.n	80010fe <matrix_subtract+0x12>
        }
    }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <matrix_multiply>:

void matrix_multiply(matrix_instance* a, matrix_instance* b, matrix_instance* result) {
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < a->numRows; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e04a      	b.n	8001214 <matrix_multiply+0xa8>
        for (int j = 0; j < b->numCols; j++) {
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	e03f      	b.n	8001204 <matrix_multiply+0x98>
            result->data[i][j] = 0; // Initialize to zero
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	0099      	lsls	r1, r3, #2
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	440b      	add	r3, r1
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < a->numCols; k++) {
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e02a      	b.n	80011f4 <matrix_multiply+0x88>
                result->data[i][j] += a->data[i][k] * b->data[k][j];
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	0099      	lsls	r1, r3, #2
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	440b      	add	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	ed93 7a00 	vldr	s14, [r3]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	0099      	lsls	r1, r3, #2
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	440b      	add	r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	edd3 6a00 	vldr	s13, [r3]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	0099      	lsls	r1, r3, #2
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	440b      	add	r3, r1
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	0099      	lsls	r1, r3, #2
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	440b      	add	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < a->numCols; k++) {
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbcf      	blt.n	800119e <matrix_multiply+0x32>
        for (int j = 0; j < b->numCols; j++) {
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3301      	adds	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	429a      	cmp	r2, r3
 800120c:	dbba      	blt.n	8001184 <matrix_multiply+0x18>
    for (int i = 0; i < a->numRows; i++) {
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbaf      	blt.n	800117e <matrix_multiply+0x12>
            }
        }
    }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3724      	adds	r7, #36	@ 0x24
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <matrix_transpose>:

void matrix_transpose(matrix_instance* mat, matrix_instance* result) {
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < mat->numRows; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e01d      	b.n	8001278 <matrix_transpose+0x4c>
        for (int j = 0; j < mat->numCols; j++) {
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	e012      	b.n	8001268 <matrix_transpose+0x3c>
            result->data[j][i] = mat->data[i][j];
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	0099      	lsls	r1, r3, #2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	440b      	add	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	0098      	lsls	r0, r3, #2
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4403      	add	r3, r0
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < mat->numCols; j++) {
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3301      	adds	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbe7      	blt.n	8001242 <matrix_transpose+0x16>
    for (int i = 0; i < mat->numRows; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbdc      	blt.n	800123c <matrix_transpose+0x10>
        }
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <matrix_inverse_2x2>:

void matrix_inverse_2x2(matrix_instance* mat, matrix_instance* inv) {
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    float det = mat->data[0][0] * mat->data[1][1] - mat->data[0][1] * mat->data[1][0];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	edc7 7a03 	vstr	s15, [r7, #12]
    if (det != 0) {
 80012c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d02b      	beq.n	8001328 <matrix_inverse_2x2+0x98>
        inv->data[0][0] = mat->data[1][1] / det;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 6a05 	vldr	s13, [r3, #20]
 80012d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]
        inv->data[0][1] = -mat->data[0][1] / det;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ea:	eef1 6a67 	vneg.f32	s13, s15
 80012ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	edc3 7a01 	vstr	s15, [r3, #4]
        inv->data[1][0] = -mat->data[1][0] / det;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001302:	eef1 6a67 	vneg.f32	s13, s15
 8001306:	ed97 7a03 	vldr	s14, [r7, #12]
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	edc3 7a04 	vstr	s15, [r3, #16]
        inv->data[1][1] = mat->data[0][0] / det;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edd3 6a00 	vldr	s13, [r3]
 800131a:	ed97 7a03 	vldr	s14, [r7, #12]
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	edc3 7a05 	vstr	s15, [r3, #20]
    }
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	0000      	movs	r0, r0
	...

08001338 <InitSensorFusion>:

void InitSensorFusion(SensorFusion* SF, double q[9], double r[9], float dt) {
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b0c8      	sub	sp, #288	@ 0x120
 800133c:	af00      	add	r7, sp, #0
 800133e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001342:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001346:	6018      	str	r0, [r3, #0]
 8001348:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800134c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001350:	6019      	str	r1, [r3, #0]
 8001352:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001356:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001360:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001364:	ed83 0a00 	vstr	s0, [r3]
    SF->Yp.numRows = 2;
 8001368:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800136c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2202      	movs	r2, #2
 8001374:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    SF->Yp.numCols = 1;
 8001378:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800137c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c

    SF->Xp.numRows = 4;
 8001388:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800138c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2204      	movs	r2, #4
 8001394:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
    SF->Xp.numCols = 1;
 8001398:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800139c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c

    SF->Xc.numRows = 4;
 80013a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2204      	movs	r2, #4
 80013b4:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
    SF->Xc.numCols = 1;
 80013b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

    SF->Pp.numRows = 4;
 80013c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2204      	movs	r2, #4
 80013d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
    SF->Pp.numCols = 4;
 80013d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2204      	movs	r2, #4
 80013e4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

    SF->Pc.numRows = 4;
 80013e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2204      	movs	r2, #4
 80013f4:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
    SF->Pc.numCols = 4;
 80013f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2204      	movs	r2, #4
 8001404:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

    SF->K.numRows = 4;
 8001408:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800140c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2204      	movs	r2, #4
 8001414:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
    SF->K.numCols = 2;
 8001418:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800141c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2202      	movs	r2, #2
 8001424:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4

    SF->e.numRows = 2;
 8001428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800142c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2202      	movs	r2, #2
 8001434:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
    SF->e.numCols = 1;
 8001438:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800143c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4

    float A[16] = {
 8001448:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800144c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        1, 0, -dt, 0,
 8001458:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800145c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	eef1 7a67 	vneg.f32	s15, s15
    float A[16] = {
 8001468:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800147c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001480:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        0, 1, 0, -dt,
 800148c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001490:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eef1 7a67 	vneg.f32	s15, s15
    float A[16] = {
 800149c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014b0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80014d8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        0, 0, 1, 0,
        0, 0, 0, 1
    };

    float B[8] = {
 80014e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80014fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001502:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        0, dt,
        0, 0,
        0, 0
    };

    float C[8] = {
 800152c:	4bdc      	ldr	r3, [pc, #880]	@ (80018a0 <InitSensorFusion+0x568>)
 800152e:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8001532:	461d      	mov	r5, r3
 8001534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001538:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800153c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        1, 0, 0, 0,
        0, 1, 0, 0
    };

    float I[16] = {
 8001540:	4bd8      	ldr	r3, [pc, #864]	@ (80018a4 <InitSensorFusion+0x56c>)
 8001542:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001546:	461d      	mov	r5, r3
 8001548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    };

    float Q[16] = {
 800155c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001560:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001564:	4ad0      	ldr	r2, [pc, #832]	@ (80018a8 <InitSensorFusion+0x570>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800156c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800157a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001588:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001596:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015a8:	4abf      	ldr	r2, [pc, #764]	@ (80018a8 <InitSensorFusion+0x570>)
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
 80015ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
 80015d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
        0.01, 0, 0, 0,
        0, 0.01, 0, 0,
        0, 0, q[0], q[1],
 80015e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fae7 	bl	8000bc8 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
    float Q[16] = {
 80015fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001600:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001604:	629a      	str	r2, [r3, #40]	@ 0x28
        0, 0, q[0], q[1],
 8001606:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800160a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3308      	adds	r3, #8
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fad5 	bl	8000bc8 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
    float Q[16] = {
 8001620:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001624:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001628:	62da      	str	r2, [r3, #44]	@ 0x2c
 800162a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800162e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
 8001638:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800163c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
        0, 0, q[3], q[4]
 8001646:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800164a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3318      	adds	r3, #24
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fab5 	bl	8000bc8 <__aeabi_d2f>
 800165e:	4602      	mov	r2, r0
    float Q[16] = {
 8001660:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001664:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38
        0, 0, q[3], q[4]
 800166a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800166e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3320      	adds	r3, #32
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff faa3 	bl	8000bc8 <__aeabi_d2f>
 8001682:	4602      	mov	r2, r0
    float Q[16] = {
 8001684:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001688:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800168c:	63da      	str	r2, [r3, #60]	@ 0x3c
    };

    float R[4] = {
        (pow(r[4], 2) + pow(r[8], 2)) / 2, 0,
 800168e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001692:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3320      	adds	r3, #32
 800169a:	ed93 7b00 	vldr	d7, [r3]
 800169e:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 8001898 <InitSensorFusion+0x560>
 80016a2:	eeb0 0a47 	vmov.f32	s0, s14
 80016a6:	eef0 0a67 	vmov.f32	s1, s15
 80016aa:	f01a fe8f 	bl	801c3cc <pow>
 80016ae:	ec55 4b10 	vmov	r4, r5, d0
 80016b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3340      	adds	r3, #64	@ 0x40
 80016be:	ed93 7b00 	vldr	d7, [r3]
 80016c2:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001898 <InitSensorFusion+0x560>
 80016c6:	eeb0 0a47 	vmov.f32	s0, s14
 80016ca:	eef0 0a67 	vmov.f32	s1, s15
 80016ce:	f01a fe7d 	bl	801c3cc <pow>
 80016d2:	ec53 2b10 	vmov	r2, r3, d0
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7fe fe0f 	bl	80002fc <__adddf3>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016ee:	f7ff f8e5 	bl	80008bc <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa65 	bl	8000bc8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
    float R[4] = {
 8001700:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001704:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800170e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800171c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
        0, (pow(r[0], 2) + pow(r[4], 2) + pow(r[8], 2)) / 3
 8001726:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800172a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	ed93 7b00 	vldr	d7, [r3]
 8001734:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8001898 <InitSensorFusion+0x560>
 8001738:	eeb0 0a47 	vmov.f32	s0, s14
 800173c:	eef0 0a67 	vmov.f32	s1, s15
 8001740:	f01a fe44 	bl	801c3cc <pow>
 8001744:	ec55 4b10 	vmov	r4, r5, d0
 8001748:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800174c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3320      	adds	r3, #32
 8001754:	ed93 7b00 	vldr	d7, [r3]
 8001758:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001898 <InitSensorFusion+0x560>
 800175c:	eeb0 0a47 	vmov.f32	s0, s14
 8001760:	eef0 0a67 	vmov.f32	s1, s15
 8001764:	f01a fe32 	bl	801c3cc <pow>
 8001768:	ec53 2b10 	vmov	r2, r3, d0
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7fe fdc4 	bl	80002fc <__adddf3>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4614      	mov	r4, r2
 800177a:	461d      	mov	r5, r3
 800177c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001780:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3340      	adds	r3, #64	@ 0x40
 8001788:	ed93 7b00 	vldr	d7, [r3]
 800178c:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8001898 <InitSensorFusion+0x560>
 8001790:	eeb0 0a47 	vmov.f32	s0, s14
 8001794:	eef0 0a67 	vmov.f32	s1, s15
 8001798:	f01a fe18 	bl	801c3cc <pow>
 800179c:	ec53 2b10 	vmov	r2, r3, d0
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fdaa 	bl	80002fc <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <InitSensorFusion+0x574>)
 80017b6:	f7ff f881 	bl	80008bc <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff fa01 	bl	8000bc8 <__aeabi_d2f>
 80017c6:	4602      	mov	r2, r0
    float R[4] = {
 80017c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017d0:	60da      	str	r2, [r3, #12]
    };

    init_matrix(&SF->A, 4, 4, A);
 80017d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80017e0:	2204      	movs	r2, #4
 80017e2:	2104      	movs	r1, #4
 80017e4:	f7ff fc08 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->B, 4, 2, B);
 80017e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80017f6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80017fa:	2202      	movs	r2, #2
 80017fc:	2104      	movs	r1, #4
 80017fe:	f7ff fbfb 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->C, 2, 4, C);
 8001802:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001806:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8001810:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001814:	2204      	movs	r2, #4
 8001816:	2102      	movs	r1, #2
 8001818:	f7ff fbee 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->I, 4, 4, I);
 800181c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001820:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 800182a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800182e:	2204      	movs	r2, #4
 8001830:	2104      	movs	r1, #4
 8001832:	f7ff fbe1 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->Q, 4, 4, Q);
 8001836:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800183a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	2204      	movs	r2, #4
 800184a:	2104      	movs	r1, #4
 800184c:	f7ff fbd4 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->R, 2, 2, R);
 8001850:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001854:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2202      	movs	r2, #2
 8001864:	2102      	movs	r1, #2
 8001866:	f7ff fbc7 	bl	8000ff8 <init_matrix>

	SF->temp4x1A.numRows = 4;
 800186a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800186e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2204      	movs	r2, #4
 8001876:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
	SF->temp4x1A.numCols = 1;
 800187a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800187e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	SF->temp4x1B.numRows = 4;
 800188a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800188e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2204      	movs	r2, #4
 8001896:	e00b      	b.n	80018b0 <InitSensorFusion+0x578>
 8001898:	00000000 	.word	0x00000000
 800189c:	40000000 	.word	0x40000000
 80018a0:	0801d7c0 	.word	0x0801d7c0
 80018a4:	0801d7e0 	.word	0x0801d7e0
 80018a8:	3c23d70a 	.word	0x3c23d70a
 80018ac:	40080000 	.word	0x40080000
 80018b0:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
	SF->temp4x1B.numCols = 1;
 80018b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

	SF->temp2x4.numRows = 2;
 80018c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478
	SF->temp2x4.numCols = 4;
 80018d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2204      	movs	r2, #4
 80018e0:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c

	SF->temp4x2A.numRows = 4;
 80018e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2204      	movs	r2, #4
 80018f0:	f8c3 24c0 	str.w	r2, [r3, #1216]	@ 0x4c0
	SF->temp4x2A.numCols = 2;
 80018f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
	SF->temp4x2B.numRows = 4;
 8001904:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001908:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2204      	movs	r2, #4
 8001910:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
	SF->temp4x2B.numCols = 2;
 8001914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001918:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2202      	movs	r2, #2
 8001920:	f8c3 250c 	str.w	r2, [r3, #1292]	@ 0x50c

	SF->temp2x2A.numRows = 2;
 8001924:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001928:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2202      	movs	r2, #2
 8001930:	f8c3 2550 	str.w	r2, [r3, #1360]	@ 0x550
	SF->temp2x2A.numCols = 2;
 8001934:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001938:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2202      	movs	r2, #2
 8001940:	f8c3 2554 	str.w	r2, [r3, #1364]	@ 0x554
	SF->temp2x2B.numRows = 2;
 8001944:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001948:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2202      	movs	r2, #2
 8001950:	f8c3 2598 	str.w	r2, [r3, #1432]	@ 0x598
	SF->temp2x2B.numCols = 2;
 8001954:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001958:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	f8c3 259c 	str.w	r2, [r3, #1436]	@ 0x59c
	SF->temp2x2C.numRows = 2;
 8001964:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001968:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2202      	movs	r2, #2
 8001970:	f8c3 25e0 	str.w	r2, [r3, #1504]	@ 0x5e0
	SF->temp2x2C.numCols = 2;
 8001974:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001978:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2202      	movs	r2, #2
 8001980:	f8c3 25e4 	str.w	r2, [r3, #1508]	@ 0x5e4

	SF->temp4x4A.numRows = 4;
 8001984:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001988:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2204      	movs	r2, #4
 8001990:	f8c3 2628 	str.w	r2, [r3, #1576]	@ 0x628
	SF->temp4x4A.numCols = 4;
 8001994:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001998:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	f8c3 262c 	str.w	r2, [r3, #1580]	@ 0x62c
	SF->temp4x4B.numRows = 4;
 80019a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	f8c3 2670 	str.w	r2, [r3, #1648]	@ 0x670
	SF->temp4x4B.numCols = 4;
 80019b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	f8c3 2674 	str.w	r2, [r3, #1652]	@ 0x674
	SF->temp4x4C.numRows = 4;
 80019c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2204      	movs	r2, #4
 80019d0:	f8c3 26b8 	str.w	r2, [r3, #1720]	@ 0x6b8
	SF->temp4x4C.numCols = 4;
 80019d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2204      	movs	r2, #4
 80019e0:	f8c3 26bc 	str.w	r2, [r3, #1724]	@ 0x6bc
}
 80019e4:	bf00      	nop
 80019e6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop

080019f0 <sensor_fusion>:

void sensor_fusion(SensorFusion* SF, matrix_instance* u, matrix_instance* y) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]

    // Calculate Kalman gain
    matrix_transpose(&SF->C, &SF->temp4x2A);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f7ff fc0e 	bl	800122c <matrix_transpose>
    matrix_multiply(&SF->C, &SF->Pp, &SF->temp2x4);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f503 7122 	add.w	r1, r3, #648	@ 0x288
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 8001a22:	461a      	mov	r2, r3
 8001a24:	f7ff fba2 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->temp2x4, &SF->temp4x2A, &SF->temp2x2A);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f503 6087 	add.w	r0, r3, #1080	@ 0x438
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7ff fb96 	bl	800116c <matrix_multiply>
    matrix_add(&SF->temp2x2A, &SF->R, &SF->temp2x2B);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8001a52:	461a      	mov	r2, r3
 8001a54:	f7ff fb0a 	bl	800106c <matrix_add>
    matrix_inverse_2x2(&SF->temp2x2B, &SF->temp2x2C);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f503 62ab 	add.w	r2, r3, #1368	@ 0x558
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7ff fc12 	bl	8001290 <matrix_inverse_2x2>
    matrix_multiply(&SF->Pp, &SF->temp4x2A, &SF->temp4x2B);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f503 7022 	add.w	r0, r3, #648	@ 0x288
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f7ff fb74 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->temp4x2B, &SF->temp2x2C, &SF->K);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f503 6099 	add.w	r0, r3, #1224	@ 0x4c8
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f503 61b4 	add.w	r1, r3, #1440	@ 0x5a0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fb68 	bl	800116c <matrix_multiply>

    // Predict the measurement
    matrix_multiply(&SF->C, &SF->Xp, &SF->Yp);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f503 71fc 	add.w	r1, r3, #504	@ 0x1f8
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f7ff fb5c 	bl	800116c <matrix_multiply>

    // Calculate error
    matrix_subtract(y, &SF->Yp, &SF->e);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f503 7146 	add.w	r1, r3, #792	@ 0x318
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fb12 	bl	80010ec <matrix_subtract>

    // Corrected state
    matrix_multiply(&SF->K, &SF->e, &SF->temp4x1A);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7ff fb46 	bl	800116c <matrix_multiply>
    matrix_add(&SF->Xp, &SF->temp4x1A, &SF->Xc);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f503 70fc 	add.w	r0, r3, #504	@ 0x1f8
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f503 716a 	add.w	r1, r3, #936	@ 0x3a8
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001af2:	461a      	mov	r2, r3
 8001af4:	f7ff faba 	bl	800106c <matrix_add>

    // Update covariance P
    matrix_multiply(&SF->K, &SF->C, &SF->temp4x4A);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f503 63bd 	add.w	r3, r3, #1512	@ 0x5e8
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f7ff fb2e 	bl	800116c <matrix_multiply>
    matrix_subtract(&SF->I, &SF->temp4x4A, &SF->temp4x4B);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f503 61bd 	add.w	r1, r3, #1512	@ 0x5e8
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8001b22:	461a      	mov	r2, r3
 8001b24:	f7ff fae2 	bl	80010ec <matrix_subtract>
    matrix_multiply(&SF->temp4x4B, &SF->Pp, &SF->Pc);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f503 60c6 	add.w	r0, r3, #1584	@ 0x630
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f503 7122 	add.w	r1, r3, #648	@ 0x288
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f7ff fb16 	bl	800116c <matrix_multiply>

    // Prediction step
    matrix_multiply(&SF->A, &SF->Xc, &SF->temp4x1A);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f503 7110 	add.w	r1, r3, #576	@ 0x240
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f7ff fb0c 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->B, u, &SF->temp4x1B);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8001b60:	461a      	mov	r2, r3
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	f7ff fb02 	bl	800116c <matrix_multiply>
    matrix_add(&SF->temp4x1A, &SF->temp4x1B, &SF->Xp);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f503 717c 	add.w	r1, r3, #1008	@ 0x3f0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff fa76 	bl	800106c <matrix_add>

    // Update covariance Pp
    matrix_transpose(&SF->A, &SF->temp4x4A);
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f503 63bd 	add.w	r3, r3, #1512	@ 0x5e8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f7ff fb4e 	bl	800122c <matrix_transpose>
    matrix_multiply(&SF->A, &SF->Pc, &SF->temp4x4B);
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f7ff fae4 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->temp4x4B, &SF->temp4x4A, &SF->temp4x4C);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f503 60c6 	add.w	r0, r3, #1584	@ 0x630
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f503 61bd 	add.w	r1, r3, #1512	@ 0x5e8
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff fad8 	bl	800116c <matrix_multiply>
    matrix_add(&SF->temp4x4C, &SF->Q, &SF->Pp);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f503 60cf 	add.w	r0, r3, #1656	@ 0x678
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff fa4c 	bl	800106c <matrix_add>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be0:	f001 fd4b 	bl	800367a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be4:	f000 f828 	bl	8001c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be8:	f000 f94e 	bl	8001e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bec:	f000 f91a 	bl	8001e24 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001bf0:	f000 f8ce 	bl	8001d90 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001bf4:	f000 f86e 	bl	8001cd4 <MX_I2C1_Init>
  MX_IWDG_Init();
 8001bf8:	f000 f8ac 	bl	8001d54 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001bfc:	bf00      	nop
 8001bfe:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <main+0x4c>)
 8001c00:	f006 fcb0 	bl	8008564 <MPU6050_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d0f9      	beq.n	8001bfe <main+0x22>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c0a:	f007 f88b 	bl	8008d24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c0e:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <main+0x50>)
 8001c10:	2100      	movs	r1, #0
 8001c12:	4807      	ldr	r0, [pc, #28]	@ (8001c30 <main+0x54>)
 8001c14:	f007 f8d0 	bl	8008db8 <osThreadNew>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <main+0x58>)
 8001c1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c1e:	f007 f8a5 	bl	8008d6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c22:	bf00      	nop
 8001c24:	e7fd      	b.n	8001c22 <main+0x46>
 8001c26:	bf00      	nop
 8001c28:	20000c1c 	.word	0x20000c1c
 8001c2c:	0801d940 	.word	0x0801d940
 8001c30:	08002481 	.word	0x08002481
 8001c34:	20000dd4 	.word	0x20000dd4

08001c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b094      	sub	sp, #80	@ 0x50
 8001c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	2238      	movs	r2, #56	@ 0x38
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f019 fcb4 	bl	801b5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f003 faf0 	bl	8005240 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c60:	230a      	movs	r3, #10
 8001c62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c6a:	2340      	movs	r3, #64	@ 0x40
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c72:	2302      	movs	r3, #2
 8001c74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c76:	2302      	movs	r3, #2
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c7e:	2355      	movs	r3, #85	@ 0x55
 8001c80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c86:	2302      	movs	r3, #2
 8001c88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8e:	f107 0318 	add.w	r3, r7, #24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fb88 	bl	80053a8 <HAL_RCC_OscConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c9e:	f000 fd65 	bl	800276c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fe86 	bl	80059cc <HAL_RCC_ClockConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001cc6:	f000 fd51 	bl	800276c <Error_Handler>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3750      	adds	r7, #80	@ 0x50
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cda:	4a1c      	ldr	r2, [pc, #112]	@ (8001d4c <MX_I2C1_Init+0x78>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d50 <MX_I2C1_Init+0x7c>)
 8001ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d0e:	480e      	ldr	r0, [pc, #56]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d10:	f002 fbd9 	bl	80044c6 <HAL_I2C_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d1a:	f000 fd27 	bl	800276c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d22:	f003 f997 	bl	8005054 <HAL_I2CEx_ConfigAnalogFilter>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d2c:	f000 fd1e 	bl	800276c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d30:	2100      	movs	r1, #0
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d34:	f003 f9d9 	bl	80050ea <HAL_I2CEx_ConfigDigitalFilter>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 fd15 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000c1c 	.word	0x20000c1c
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	40621236 	.word	0x40621236

08001d54 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <MX_IWDG_Init+0x38>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d66:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001d6a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d6e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001d72:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d76:	f003 fa04 	bl	8005182 <HAL_IWDG_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001d80:	f000 fcf4 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000c70 	.word	0x20000c70
 8001d8c:	40003000 	.word	0x40003000

08001d90 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001d96:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <MX_LPUART1_UART_Init+0x8c>)
 8001d98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <MX_LPUART1_UART_Init+0x90>)
 8001d9e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001db4:	220c      	movs	r2, #12
 8001db6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db8:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001dd0:	4811      	ldr	r0, [pc, #68]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dd2:	f004 fde3 	bl	800699c <HAL_UART_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001ddc:	f000 fcc6 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de0:	2100      	movs	r1, #0
 8001de2:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001de4:	f006 faf3 	bl	80083ce <HAL_UARTEx_SetTxFifoThreshold>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001dee:	f000 fcbd 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001df6:	f006 fb28 	bl	800844a <HAL_UARTEx_SetRxFifoThreshold>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001e00:	f000 fcb4 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001e06:	f006 faa9 	bl	800835c <HAL_UARTEx_DisableFifoMode>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001e10:	f000 fcac 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000c80 	.word	0x20000c80
 8001e1c:	40008000 	.word	0x40008000
 8001e20:	001e8480 	.word	0x001e8480

08001e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e2e:	4a15      	ldr	r2, [pc, #84]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e46:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2105      	movs	r1, #5
 8001e5e:	200b      	movs	r0, #11
 8001e60:	f001 fcfa 	bl	8003858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e64:	200b      	movs	r0, #11
 8001e66:	f001 fd11 	bl	800388c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	200c      	movs	r0, #12
 8001e70:	f001 fcf2 	bl	8003858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e74:	200c      	movs	r0, #12
 8001e76:	f001 fd09 	bl	800388c <HAL_NVIC_EnableIRQ>

}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000

08001e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	@ 0x28
 8001e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb6:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ebc:	f043 0320 	orr.w	r3, r3, #32
 8001ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec2:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	4a22      	ldr	r2, [pc, #136]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2120      	movs	r1, #32
 8001f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f06:	f002 fa89 	bl	800441c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480f      	ldr	r0, [pc, #60]	@ (8001f60 <MX_GPIO_Init+0xd8>)
 8001f22:	f001 ffff 	bl	8003f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f26:	2320      	movs	r3, #32
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f40:	f001 fff0 	bl	8003f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2105      	movs	r1, #5
 8001f48:	2028      	movs	r0, #40	@ 0x28
 8001f4a:	f001 fc85 	bl	8003858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f4e:	2028      	movs	r0, #40	@ 0x28
 8001f50:	f001 fc9c 	bl	800388c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f54:	bf00      	nop
 8001f56:	3728      	adds	r7, #40	@ 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000800 	.word	0x48000800
 8001f64:	00000000 	.word	0x00000000

08001f68 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f6c:	b088      	sub	sp, #32
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_IWDG_Refresh(&hiwdg);
 8001f76:	48ba      	ldr	r0, [pc, #744]	@ (8002260 <timer_callback+0x2f8>)
 8001f78:	f003 f952 	bl	8005220 <HAL_IWDG_Refresh>
	if (timer != NULL) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 81a7 	beq.w	80022d2 <timer_callback+0x36a>
		static float temp = 0;
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001f84:	49b7      	ldr	r1, [pc, #732]	@ (8002264 <timer_callback+0x2fc>)
 8001f86:	48b8      	ldr	r0, [pc, #736]	@ (8002268 <timer_callback+0x300>)
 8001f88:	f006 fb46 	bl	8008618 <MPU6050_Read_All>

		mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis()/1000;
 8001f8c:	f00e ffac 	bl	8010ee8 <rmw_uros_epoch_millis>
 8001f90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	f7fe fe66 	bl	8000c68 <__aeabi_ldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4bb2      	ldr	r3, [pc, #712]	@ (800226c <timer_callback+0x304>)
 8001fa2:	601a      	str	r2, [r3, #0]
		mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8001fa4:	f00e ffae 	bl	8010f04 <rmw_uros_epoch_nanos>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4baf      	ldr	r3, [pc, #700]	@ (800226c <timer_callback+0x304>)
 8001fae:	605a      	str	r2, [r3, #4]

		mpu6050_msg.linear_acceleration.x = (G2M_S2 * MPU6050.Ax) - accel_offset.x;
 8001fb0:	4bac      	ldr	r3, [pc, #688]	@ (8002264 <timer_callback+0x2fc>)
 8001fb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001fb6:	a3a4      	add	r3, pc, #656	@ (adr r3, 8002248 <timer_callback+0x2e0>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb54 	bl	8000668 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4ba9      	ldr	r3, [pc, #676]	@ (8002270 <timer_callback+0x308>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe f993 	bl	80002f8 <__aeabi_dsub>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	49a5      	ldr	r1, [pc, #660]	@ (800226c <timer_callback+0x304>)
 8001fd8:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
		mpu6050_msg.linear_acceleration.y = (G2M_S2 * MPU6050.Ay) - accel_offset.y;
 8001fdc:	4ba1      	ldr	r3, [pc, #644]	@ (8002264 <timer_callback+0x2fc>)
 8001fde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001fe2:	a399      	add	r3, pc, #612	@ (adr r3, 8002248 <timer_callback+0x2e0>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb3e 	bl	8000668 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b9e      	ldr	r3, [pc, #632]	@ (8002270 <timer_callback+0x308>)
 8001ff6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ffa:	f7fe f97d 	bl	80002f8 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	499a      	ldr	r1, [pc, #616]	@ (800226c <timer_callback+0x304>)
 8002004:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
		mpu6050_msg.linear_acceleration.z = (G2M_S2 * MPU6050.Az) - accel_offset.z;
 8002008:	4b96      	ldr	r3, [pc, #600]	@ (8002264 <timer_callback+0x2fc>)
 800200a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800200e:	a38e      	add	r3, pc, #568	@ (adr r3, 8002248 <timer_callback+0x2e0>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fb28 	bl	8000668 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	4b93      	ldr	r3, [pc, #588]	@ (8002270 <timer_callback+0x308>)
 8002022:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002026:	f7fe f967 	bl	80002f8 <__aeabi_dsub>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	498f      	ldr	r1, [pc, #572]	@ (800226c <timer_callback+0x304>)
 8002030:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
		mpu6050_msg.angular_velocity.x = (DEG2RAD * MPU6050.Gx) - gyro_offset.x;
 8002034:	4b8b      	ldr	r3, [pc, #556]	@ (8002264 <timer_callback+0x2fc>)
 8002036:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800203a:	a385      	add	r3, pc, #532	@ (adr r3, 8002250 <timer_callback+0x2e8>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fb12 	bl	8000668 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	4b89      	ldr	r3, [pc, #548]	@ (8002274 <timer_callback+0x30c>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe f951 	bl	80002f8 <__aeabi_dsub>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4984      	ldr	r1, [pc, #528]	@ (800226c <timer_callback+0x304>)
 800205c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		mpu6050_msg.angular_velocity.y = (DEG2RAD * MPU6050.Gy) - gyro_offset.y;
 8002060:	4b80      	ldr	r3, [pc, #512]	@ (8002264 <timer_callback+0x2fc>)
 8002062:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002066:	a37a      	add	r3, pc, #488	@ (adr r3, 8002250 <timer_callback+0x2e8>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fafc 	bl	8000668 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	4b7e      	ldr	r3, [pc, #504]	@ (8002274 <timer_callback+0x30c>)
 800207a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800207e:	f7fe f93b 	bl	80002f8 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4979      	ldr	r1, [pc, #484]	@ (800226c <timer_callback+0x304>)
 8002088:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		mpu6050_msg.angular_velocity.z = (DEG2RAD * MPU6050.Gz) - gyro_offset.z;
 800208c:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <timer_callback+0x2fc>)
 800208e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002092:	a36f      	add	r3, pc, #444	@ (adr r3, 8002250 <timer_callback+0x2e8>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe fae6 	bl	8000668 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	4b73      	ldr	r3, [pc, #460]	@ (8002274 <timer_callback+0x30c>)
 80020a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020aa:	f7fe f925 	bl	80002f8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	496e      	ldr	r1, [pc, #440]	@ (800226c <timer_callback+0x304>)
 80020b4:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

		RCSOFTCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 80020b8:	2200      	movs	r2, #0
 80020ba:	496c      	ldr	r1, [pc, #432]	@ (800226c <timer_callback+0x304>)
 80020bc:	486e      	ldr	r0, [pc, #440]	@ (8002278 <timer_callback+0x310>)
 80020be:	f00b ff0d 	bl	800dedc <rcl_publish>

		U[0] = mpu6050_msg.angular_velocity.x;
 80020c2:	4b6a      	ldr	r3, [pc, #424]	@ (800226c <timer_callback+0x304>)
 80020c4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fd7c 	bl	8000bc8 <__aeabi_d2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a6a      	ldr	r2, [pc, #424]	@ (800227c <timer_callback+0x314>)
 80020d4:	6013      	str	r3, [r2, #0]
		U[1] = mpu6050_msg.angular_velocity.y;
 80020d6:	4b65      	ldr	r3, [pc, #404]	@ (800226c <timer_callback+0x304>)
 80020d8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fd72 	bl	8000bc8 <__aeabi_d2f>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4a65      	ldr	r2, [pc, #404]	@ (800227c <timer_callback+0x314>)
 80020e8:	6053      	str	r3, [r2, #4]
		Y[0] = atan2(mpu6050_msg.linear_acceleration.y, mpu6050_msg.linear_acceleration.z);
 80020ea:	4b60      	ldr	r3, [pc, #384]	@ (800226c <timer_callback+0x304>)
 80020ec:	ed93 7b3a 	vldr	d7, [r3, #232]	@ 0xe8
 80020f0:	4b5e      	ldr	r3, [pc, #376]	@ (800226c <timer_callback+0x304>)
 80020f2:	ed93 6b3c 	vldr	d6, [r3, #240]	@ 0xf0
 80020f6:	eeb0 1a46 	vmov.f32	s2, s12
 80020fa:	eef0 1a66 	vmov.f32	s3, s13
 80020fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002102:	eef0 0a67 	vmov.f32	s1, s15
 8002106:	f01a f95f 	bl	801c3c8 <atan2>
 800210a:	ec53 2b10 	vmov	r2, r3, d0
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd59 	bl	8000bc8 <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
 8002118:	4a59      	ldr	r2, [pc, #356]	@ (8002280 <timer_callback+0x318>)
 800211a:	6013      	str	r3, [r2, #0]
		temp = sqrt(pow(mpu6050_msg.linear_acceleration.y, 2)+pow(mpu6050_msg.linear_acceleration.z, 2));
 800211c:	4b53      	ldr	r3, [pc, #332]	@ (800226c <timer_callback+0x304>)
 800211e:	ed93 7b3a 	vldr	d7, [r3, #232]	@ 0xe8
 8002122:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8002258 <timer_callback+0x2f0>
 8002126:	eeb0 0a47 	vmov.f32	s0, s14
 800212a:	eef0 0a67 	vmov.f32	s1, s15
 800212e:	f01a f94d 	bl	801c3cc <pow>
 8002132:	ec59 8b10 	vmov	r8, r9, d0
 8002136:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <timer_callback+0x304>)
 8002138:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800213c:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8002258 <timer_callback+0x2f0>
 8002140:	eeb0 0a47 	vmov.f32	s0, s14
 8002144:	eef0 0a67 	vmov.f32	s1, s15
 8002148:	f01a f940 	bl	801c3cc <pow>
 800214c:	ec53 2b10 	vmov	r2, r3, d0
 8002150:	4640      	mov	r0, r8
 8002152:	4649      	mov	r1, r9
 8002154:	f7fe f8d2 	bl	80002fc <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	ec43 2b17 	vmov	d7, r2, r3
 8002160:	eeb0 0a47 	vmov.f32	s0, s14
 8002164:	eef0 0a67 	vmov.f32	s1, s15
 8002168:	f01a f9a0 	bl	801c4ac <sqrt>
 800216c:	ec53 2b10 	vmov	r2, r3, d0
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fd28 	bl	8000bc8 <__aeabi_d2f>
 8002178:	4603      	mov	r3, r0
 800217a:	4a42      	ldr	r2, [pc, #264]	@ (8002284 <timer_callback+0x31c>)
 800217c:	6013      	str	r3, [r2, #0]
		Y[1] = atan2(-mpu6050_msg.linear_acceleration.x, temp);
 800217e:	4b3b      	ldr	r3, [pc, #236]	@ (800226c <timer_callback+0x304>)
 8002180:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002184:	4614      	mov	r4, r2
 8002186:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800218a:	4b3e      	ldr	r3, [pc, #248]	@ (8002284 <timer_callback+0x31c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fa12 	bl	80005b8 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	ec43 2b11 	vmov	d1, r2, r3
 800219c:	ec45 4b10 	vmov	d0, r4, r5
 80021a0:	f01a f912 	bl	801c3c8 <atan2>
 80021a4:	ec53 2b10 	vmov	r2, r3, d0
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fd0c 	bl	8000bc8 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a33      	ldr	r2, [pc, #204]	@ (8002280 <timer_callback+0x318>)
 80021b4:	6053      	str	r3, [r2, #4]
		init_matrix(&u, 2, 1, U);
 80021b6:	4b31      	ldr	r3, [pc, #196]	@ (800227c <timer_callback+0x314>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	2102      	movs	r1, #2
 80021bc:	4832      	ldr	r0, [pc, #200]	@ (8002288 <timer_callback+0x320>)
 80021be:	f7fe ff1b 	bl	8000ff8 <init_matrix>
		init_matrix(&y, 2, 1, Y);
 80021c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002280 <timer_callback+0x318>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	2102      	movs	r1, #2
 80021c8:	4830      	ldr	r0, [pc, #192]	@ (800228c <timer_callback+0x324>)
 80021ca:	f7fe ff15 	bl	8000ff8 <init_matrix>
		sensor_fusion(&imu, &u, &y);
 80021ce:	4a2f      	ldr	r2, [pc, #188]	@ (800228c <timer_callback+0x324>)
 80021d0:	492d      	ldr	r1, [pc, #180]	@ (8002288 <timer_callback+0x320>)
 80021d2:	482f      	ldr	r0, [pc, #188]	@ (8002290 <timer_callback+0x328>)
 80021d4:	f7ff fc0c 	bl	80019f0 <sensor_fusion>
		angle[0] = imu.Xc.data[0][0];
 80021d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <timer_callback+0x328>)
 80021da:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <timer_callback+0x32c>)
 80021e0:	6013      	str	r3, [r2, #0]
		angle[1] = imu.Xc.data[1][0];
 80021e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <timer_callback+0x328>)
 80021e4:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
 80021e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002294 <timer_callback+0x32c>)
 80021ea:	6053      	str	r3, [r2, #4]

		cmdvel_msg.linear.x = angle[1];
 80021ec:	4b29      	ldr	r3, [pc, #164]	@ (8002294 <timer_callback+0x32c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9e1 	bl	80005b8 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4927      	ldr	r1, [pc, #156]	@ (8002298 <timer_callback+0x330>)
 80021fc:	e9c1 2300 	strd	r2, r3, [r1]
		cmdvel_msg.angular.z = -angle[0];
 8002200:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <timer_callback+0x32c>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	eef1 7a67 	vneg.f32	s15, s15
 800220a:	ee17 3a90 	vmov	r3, s15
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f9d2 	bl	80005b8 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	491f      	ldr	r1, [pc, #124]	@ (8002298 <timer_callback+0x330>)
 800221a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

		RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &cmdvel_msg, NULL));
 800221e:	2200      	movs	r2, #0
 8002220:	491d      	ldr	r1, [pc, #116]	@ (8002298 <timer_callback+0x330>)
 8002222:	481e      	ldr	r0, [pc, #120]	@ (800229c <timer_callback+0x334>)
 8002224:	f00b fe5a 	bl	800dedc <rcl_publish>

		GPIO_PinState curr_button = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002228:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800222c:	481c      	ldr	r0, [pc, #112]	@ (80022a0 <timer_callback+0x338>)
 800222e:	f002 f8dd 	bl	80043ec <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	77fb      	strb	r3, [r7, #31]
		if((curr_button == GPIO_PIN_SET && prev_button == GPIO_PIN_RESET) || is_contact == true){
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d136      	bne.n	80022aa <timer_callback+0x342>
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <timer_callback+0x33c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	e031      	b.n	80022a8 <timer_callback+0x340>
 8002244:	f3af 8000 	nop.w
 8002248:	51eb851f 	.word	0x51eb851f
 800224c:	40239eb8 	.word	0x40239eb8
 8002250:	a2529d39 	.word	0xa2529d39
 8002254:	3f91df46 	.word	0x3f91df46
 8002258:	00000000 	.word	0x00000000
 800225c:	40000000 	.word	0x40000000
 8002260:	20000c70 	.word	0x20000c70
 8002264:	20003f78 	.word	0x20003f78
 8002268:	20000c1c 	.word	0x20000c1c
 800226c:	20003df8 	.word	0x20003df8
 8002270:	20004138 	.word	0x20004138
 8002274:	20004150 	.word	0x20004150
 8002278:	20003df4 	.word	0x20003df4
 800227c:	200048bc 	.word	0x200048bc
 8002280:	200048c4 	.word	0x200048c4
 8002284:	200048d8 	.word	0x200048d8
 8002288:	2000482c 	.word	0x2000482c
 800228c:	20004874 	.word	0x20004874
 8002290:	2000416c 	.word	0x2000416c
 8002294:	200048cc 	.word	0x200048cc
 8002298:	20003f40 	.word	0x20003f40
 800229c:	20003f38 	.word	0x20003f38
 80022a0:	48000800 	.word	0x48000800
 80022a4:	200048d4 	.word	0x200048d4
 80022a8:	d003      	beq.n	80022b2 <timer_callback+0x34a>
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <timer_callback+0x374>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <timer_callback+0x364>
			is_contact = false;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <timer_callback+0x374>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
			std_srvs__srv__Empty_Request__init(&reset_request);
 80022b8:	4809      	ldr	r0, [pc, #36]	@ (80022e0 <timer_callback+0x378>)
 80022ba:	f00f fd35 	bl	8011d28 <std_srvs__srv__Empty_Request__init>

			int64_t sequence_number;
			RCSOFTCHECK(rcl_send_request(&reset_client, &reset_request, &sequence_number));
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	461a      	mov	r2, r3
 80022c4:	4906      	ldr	r1, [pc, #24]	@ (80022e0 <timer_callback+0x378>)
 80022c6:	4807      	ldr	r0, [pc, #28]	@ (80022e4 <timer_callback+0x37c>)
 80022c8:	f00b f964 	bl	800d594 <rcl_send_request>
		}
		prev_button = curr_button;
 80022cc:	4a06      	ldr	r2, [pc, #24]	@ (80022e8 <timer_callback+0x380>)
 80022ce:	7ffb      	ldrb	r3, [r7, #31]
 80022d0:	7013      	strb	r3, [r2, #0]
	}
}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022dc:	20004169 	.word	0x20004169
 80022e0:	20004134 	.word	0x20004134
 80022e4:	20004130 	.word	0x20004130
 80022e8:	200048d4 	.word	0x200048d4

080022ec <service_callback>:

void service_callback(const void * request_msg, void * response_msg)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
	  imu_interfaces__srv__ImuCalibration_Request * req_in = (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	613b      	str	r3, [r7, #16]
	  imu_interfaces__srv__ImuCalibration_Response * res_in = (imu_interfaces__srv__ImuCalibration_Response *) response_msg;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	60fb      	str	r3, [r7, #12]

	  for(int i = 0; i < 9; i++){
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e01e      	b.n	8002342 <service_callback+0x56>
		  mpu6050_msg.linear_acceleration_covariance[i] = req_in->imu_calib.linear_acceleration_covariance[i];
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	331f      	adds	r3, #31
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	482c      	ldr	r0, [pc, #176]	@ (80023c4 <service_callback+0xd8>)
 8002314:	6979      	ldr	r1, [r7, #20]
 8002316:	311f      	adds	r1, #31
 8002318:	00c9      	lsls	r1, r1, #3
 800231a:	4401      	add	r1, r0
 800231c:	e9c1 2300 	strd	r2, r3, [r1]
		  mpu6050_msg.angular_velocity_covariance[i] = req_in->imu_calib.angular_velocity_covariance[i];
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3313      	adds	r3, #19
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	4825      	ldr	r0, [pc, #148]	@ (80023c4 <service_callback+0xd8>)
 8002330:	6979      	ldr	r1, [r7, #20]
 8002332:	3113      	adds	r1, #19
 8002334:	00c9      	lsls	r1, r1, #3
 8002336:	4401      	add	r1, r0
 8002338:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int i = 0; i < 9; i++){
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3301      	adds	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b08      	cmp	r3, #8
 8002346:	dddd      	ble.n	8002304 <service_callback+0x18>
	  }

	  accel_offset.x = req_in->imu_calib.linear_acceleration.x;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 800234e:	491e      	ldr	r1, [pc, #120]	@ (80023c8 <service_callback+0xdc>)
 8002350:	e9c1 2300 	strd	r2, r3, [r1]
	  accel_offset.y = req_in->imu_calib.linear_acceleration.y;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800235a:	491b      	ldr	r1, [pc, #108]	@ (80023c8 <service_callback+0xdc>)
 800235c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  accel_offset.z = req_in->imu_calib.linear_acceleration.z;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002366:	4918      	ldr	r1, [pc, #96]	@ (80023c8 <service_callback+0xdc>)
 8002368:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002372:	4916      	ldr	r1, [pc, #88]	@ (80023cc <service_callback+0xe0>)
 8002374:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800237e:	4913      	ldr	r1, [pc, #76]	@ (80023cc <service_callback+0xe0>)
 8002380:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800238a:	4910      	ldr	r1, [pc, #64]	@ (80023cc <service_callback+0xe0>)
 800238c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  is_calib = true;
 8002390:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <service_callback+0xe4>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
	  InitSensorFusion(&imu, mpu6050_msg.angular_velocity_covariance, mpu6050_msg.linear_acceleration_covariance, dt);
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <service_callback+0xe8>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eeb0 0a67 	vmov.f32	s0, s15
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <service_callback+0xec>)
 80023a2:	490e      	ldr	r1, [pc, #56]	@ (80023dc <service_callback+0xf0>)
 80023a4:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <service_callback+0xf4>)
 80023a6:	f7fe ffc7 	bl	8001338 <InitSensorFusion>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80023aa:	2120      	movs	r1, #32
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b0:	f002 f84c 	bl	800444c <HAL_GPIO_TogglePin>
	  res_in->success = true;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20003df8 	.word	0x20003df8
 80023c8:	20004138 	.word	0x20004138
 80023cc:	20004150 	.word	0x20004150
 80023d0:	20004168 	.word	0x20004168
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20003ef0 	.word	0x20003ef0
 80023dc:	20003e90 	.word	0x20003e90
 80023e0:	2000416c 	.word	0x2000416c

080023e4 <imu_service_callback>:

void imu_service_callback(const void * request_msg, void * response_msg)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	  std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
	  std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	60bb      	str	r3, [r7, #8]

	  if (req_in->data){
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01c      	beq.n	8002438 <imu_service_callback+0x54>
		  if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_NONE){
 80023fe:	4813      	ldr	r0, [pc, #76]	@ (800244c <imu_service_callback+0x68>)
 8002400:	f002 fb5a 	bl	8004ab8 <HAL_I2C_GetError>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <imu_service_callback+0x34>
			  res_in->success = true;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
			  res_in->message.data = "Imu is connected";
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4a0f      	ldr	r2, [pc, #60]	@ (8002450 <imu_service_callback+0x6c>)
 8002414:	605a      	str	r2, [r3, #4]
	  }
	  else {
		  res_in->success = false;
		  res_in->message.data = "Request is False";
	  }
}
 8002416:	e015      	b.n	8002444 <imu_service_callback+0x60>
			  res_in->success = false;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
			  res_in->message.data = "Imu is not connect";
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4a0c      	ldr	r2, [pc, #48]	@ (8002454 <imu_service_callback+0x70>)
 8002422:	605a      	str	r2, [r3, #4]
			  HAL_I2C_DeInit(&hi2c1);
 8002424:	4809      	ldr	r0, [pc, #36]	@ (800244c <imu_service_callback+0x68>)
 8002426:	f002 f8e9 	bl	80045fc <HAL_I2C_DeInit>
			  HAL_I2C_Init(&hi2c1);
 800242a:	4808      	ldr	r0, [pc, #32]	@ (800244c <imu_service_callback+0x68>)
 800242c:	f002 f84b 	bl	80044c6 <HAL_I2C_Init>
			  MPU6050_Init(&hi2c1);
 8002430:	4806      	ldr	r0, [pc, #24]	@ (800244c <imu_service_callback+0x68>)
 8002432:	f006 f897 	bl	8008564 <MPU6050_Init>
}
 8002436:	e005      	b.n	8002444 <imu_service_callback+0x60>
		  res_in->success = false;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
		  res_in->message.data = "Request is False";
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <imu_service_callback+0x74>)
 8002442:	605a      	str	r2, [r3, #4]
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000c1c 	.word	0x20000c1c
 8002450:	0801d82c 	.word	0x0801d82c
 8002454:	0801d840 	.word	0x0801d840
 8002458:	0801d854 	.word	0x0801d854

0800245c <subscription_callback>:

void subscription_callback(const void * msgin)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Bool * contact_msg = (const std_msgs__msg__Bool *)msgin;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60fb      	str	r3, [r7, #12]
  is_contact = contact_msg->data;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	781a      	ldrb	r2, [r3, #0]
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <subscription_callback+0x20>)
 800246e:	701a      	strb	r2, [r3, #0]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	20004169 	.word	0x20004169

08002480 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b0b2      	sub	sp, #200	@ 0xc8
 8002484:	af02      	add	r7, sp, #8
 8002486:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

	// micro-ROS configuration

	  rmw_uros_set_custom_transport(
 800248a:	4b7f      	ldr	r3, [pc, #508]	@ (8002688 <StartDefaultTask+0x208>)
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	4b7f      	ldr	r3, [pc, #508]	@ (800268c <StartDefaultTask+0x20c>)
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	4b7f      	ldr	r3, [pc, #508]	@ (8002690 <StartDefaultTask+0x210>)
 8002494:	4a7f      	ldr	r2, [pc, #508]	@ (8002694 <StartDefaultTask+0x214>)
 8002496:	4980      	ldr	r1, [pc, #512]	@ (8002698 <StartDefaultTask+0x218>)
 8002498:	2001      	movs	r0, #1
 800249a:	f00d fac9 	bl	800fa30 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800249e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80024a2:	4618      	mov	r0, r3
 80024a4:	f00c fd60 	bl	800ef68 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80024a8:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <StartDefaultTask+0x21c>)
 80024aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80024ae:	4b7c      	ldr	r3, [pc, #496]	@ (80026a0 <StartDefaultTask+0x220>)
 80024b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80024b4:	4b7b      	ldr	r3, [pc, #492]	@ (80026a4 <StartDefaultTask+0x224>)
 80024b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80024ba:	4b7b      	ldr	r3, [pc, #492]	@ (80026a8 <StartDefaultTask+0x228>)
 80024bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80024c0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00c fd5d 	bl	800ef84 <rcutils_set_default_allocator>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <StartDefaultTask+0x60>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80024d6:	f240 2163 	movw	r1, #611	@ 0x263
 80024da:	4874      	ldr	r0, [pc, #464]	@ (80026ac <StartDefaultTask+0x22c>)
 80024dc:	f018 feea 	bl	801b2b4 <iprintf>
	  }

	  GPIO_PinState button = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80024e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024e4:	4872      	ldr	r0, [pc, #456]	@ (80026b0 <StartDefaultTask+0x230>)
 80024e6:	f001 ff81 	bl	80043ec <HAL_GPIO_ReadPin>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
	  uint8_t executor_num = 3;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

	  // micro-ROS app

	  // Initialize micro-ROS allocator
	  allocator = rcl_get_default_allocator();
 80024f6:	4c6f      	ldr	r4, [pc, #444]	@ (80026b4 <StartDefaultTask+0x234>)
 80024f8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80024fc:	4618      	mov	r0, r3
 80024fe:	f00c fd5f 	bl	800efc0 <rcutils_get_default_allocator>
 8002502:	4625      	mov	r5, r4
 8002504:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8002508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	602b      	str	r3, [r5, #0]

	  //create init_options
	  // Initialize and modify options (Set DOMAIN ID to 1)
	  init_options = rcl_get_zero_initialized_init_options();
 8002510:	f00b f8c8 	bl	800d6a4 <rcl_get_zero_initialized_init_options>
 8002514:	4603      	mov	r3, r0
 8002516:	4a68      	ldr	r2, [pc, #416]	@ (80026b8 <StartDefaultTask+0x238>)
 8002518:	6013      	str	r3, [r2, #0]
	  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800251a:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <StartDefaultTask+0x234>)
 800251c:	466c      	mov	r4, sp
 800251e:	f103 020c 	add.w	r2, r3, #12
 8002522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002526:	e884 0003 	stmia.w	r4, {r0, r1}
 800252a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252c:	4862      	ldr	r0, [pc, #392]	@ (80026b8 <StartDefaultTask+0x238>)
 800252e:	f00b f8bb 	bl	800d6a8 <rcl_init_options_init>
	  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 28));
 8002532:	211c      	movs	r1, #28
 8002534:	4860      	ldr	r0, [pc, #384]	@ (80026b8 <StartDefaultTask+0x238>)
 8002536:	f00b f9b3 	bl	800d8a0 <rcl_init_options_set_domain_id>
	  // Initialize rclc support object with custom options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800253a:	4b5e      	ldr	r3, [pc, #376]	@ (80026b4 <StartDefaultTask+0x234>)
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4b5e      	ldr	r3, [pc, #376]	@ (80026b8 <StartDefaultTask+0x238>)
 8002540:	2200      	movs	r2, #0
 8002542:	2100      	movs	r1, #0
 8002544:	485d      	ldr	r0, [pc, #372]	@ (80026bc <StartDefaultTask+0x23c>)
 8002546:	f00c fbcb 	bl	800ece0 <rclc_support_init_with_options>

	  // create node
	  rclc_node_init_default(&node, "imu_node", "", &support);
 800254a:	4b5c      	ldr	r3, [pc, #368]	@ (80026bc <StartDefaultTask+0x23c>)
 800254c:	4a5c      	ldr	r2, [pc, #368]	@ (80026c0 <StartDefaultTask+0x240>)
 800254e:	495d      	ldr	r1, [pc, #372]	@ (80026c4 <StartDefaultTask+0x244>)
 8002550:	485d      	ldr	r0, [pc, #372]	@ (80026c8 <StartDefaultTask+0x248>)
 8002552:	f00c fbf9 	bl	800ed48 <rclc_node_init_default>

	  //time sync
	  rmw_uros_sync_session(1000);
 8002556:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800255a:	f00e fce1 	bl	8010f20 <rmw_uros_sync_session>

	  //create timer
	  rclc_timer_init_default(&mpu6050_timer, &support, RCL_MS_TO_NS(10), timer_callback);
 800255e:	4b5b      	ldr	r3, [pc, #364]	@ (80026cc <StartDefaultTask+0x24c>)
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4a5b      	ldr	r2, [pc, #364]	@ (80026d0 <StartDefaultTask+0x250>)
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	4954      	ldr	r1, [pc, #336]	@ (80026bc <StartDefaultTask+0x23c>)
 800256a:	485a      	ldr	r0, [pc, #360]	@ (80026d4 <StartDefaultTask+0x254>)
 800256c:	f00c fcc4 	bl	800eef8 <rclc_timer_init_default>

	  //create publisher
	  rclc_publisher_init_default(
 8002570:	f00f f95c 	bl	801182c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8002574:	4602      	mov	r2, r0
 8002576:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <StartDefaultTask+0x258>)
 8002578:	4953      	ldr	r1, [pc, #332]	@ (80026c8 <StartDefaultTask+0x248>)
 800257a:	4858      	ldr	r0, [pc, #352]	@ (80026dc <StartDefaultTask+0x25c>)
 800257c:	f00c fc20 	bl	800edc0 <rclc_publisher_init_default>
			  &mpu6050_publisher,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "mpu6050_publisher"
	  );
	  rclc_publisher_init_default(
 8002580:	f009 f97a 	bl	800b878 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002584:	4602      	mov	r2, r0
 8002586:	4b56      	ldr	r3, [pc, #344]	@ (80026e0 <StartDefaultTask+0x260>)
 8002588:	494f      	ldr	r1, [pc, #316]	@ (80026c8 <StartDefaultTask+0x248>)
 800258a:	4856      	ldr	r0, [pc, #344]	@ (80026e4 <StartDefaultTask+0x264>)
 800258c:	f00c fc18 	bl	800edc0 <rclc_publisher_init_default>
			  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			  "robot5/cmd_vel"
	  );

	  //create subscription
	  rclc_subscription_init_default(
 8002590:	f00f fac4 	bl	8011b1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>
 8002594:	4602      	mov	r2, r0
 8002596:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <StartDefaultTask+0x268>)
 8002598:	494b      	ldr	r1, [pc, #300]	@ (80026c8 <StartDefaultTask+0x248>)
 800259a:	4854      	ldr	r0, [pc, #336]	@ (80026ec <StartDefaultTask+0x26c>)
 800259c:	f00c fc78 	bl	800ee90 <rclc_subscription_init_default>
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool),
			  "contact"
	  );

	  //create service
	  if(button == GPIO_PIN_RESET){
 80025a0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <StartDefaultTask+0x144>
		  rclc_service_init_default(
 80025a8:	f009 faa2 	bl	800baf0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <StartDefaultTask+0x270>)
 80025b0:	4945      	ldr	r1, [pc, #276]	@ (80026c8 <StartDefaultTask+0x248>)
 80025b2:	4850      	ldr	r0, [pc, #320]	@ (80026f4 <StartDefaultTask+0x274>)
 80025b4:	f00c fc38 	bl	800ee28 <rclc_service_init_default>
				  &mpu6050_service,
				  &node,
				  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration),
				  "mpu6050_calibration"
		  );
		  executor_num++;
 80025b8:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80025bc:	3301      	adds	r3, #1
 80025be:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 80025c2:	e00c      	b.n	80025de <StartDefaultTask+0x15e>
	  }
	  else {
		  is_calib = true;
 80025c4:	4b4c      	ldr	r3, [pc, #304]	@ (80026f8 <StartDefaultTask+0x278>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
		  InitSensorFusion(&imu, mpu6050_msg.angular_velocity_covariance, mpu6050_msg.linear_acceleration_covariance, dt);
 80025ca:	4b4c      	ldr	r3, [pc, #304]	@ (80026fc <StartDefaultTask+0x27c>)
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	eeb0 0a67 	vmov.f32	s0, s15
 80025d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <StartDefaultTask+0x280>)
 80025d6:	494b      	ldr	r1, [pc, #300]	@ (8002704 <StartDefaultTask+0x284>)
 80025d8:	484b      	ldr	r0, [pc, #300]	@ (8002708 <StartDefaultTask+0x288>)
 80025da:	f7fe fead 	bl	8001338 <InitSensorFusion>
	  }

	  rclc_service_init_default(
 80025de:	f00f fbcf 	bl	8011d80 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b49      	ldr	r3, [pc, #292]	@ (800270c <StartDefaultTask+0x28c>)
 80025e6:	4938      	ldr	r1, [pc, #224]	@ (80026c8 <StartDefaultTask+0x248>)
 80025e8:	4849      	ldr	r0, [pc, #292]	@ (8002710 <StartDefaultTask+0x290>)
 80025ea:	f00c fc1d 	bl	800ee28 <rclc_service_init_default>
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool),
			  "imu/status"
	  );

	  //create client
	  rclc_client_init_default(
 80025ee:	f00f fba7 	bl	8011d40 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <StartDefaultTask+0x294>)
 80025f6:	4934      	ldr	r1, [pc, #208]	@ (80026c8 <StartDefaultTask+0x248>)
 80025f8:	4847      	ldr	r0, [pc, #284]	@ (8002718 <StartDefaultTask+0x298>)
 80025fa:	f00b fcb5 	bl	800df68 <rclc_client_init_default>
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, Empty),
			  "/reset_world"
	  );

	  //create executer
	  executor = rclc_executor_get_zero_initialized_executor();
 80025fe:	4c47      	ldr	r4, [pc, #284]	@ (800271c <StartDefaultTask+0x29c>)
 8002600:	463b      	mov	r3, r7
 8002602:	4618      	mov	r0, r3
 8002604:	f00c f82c 	bl	800e660 <rclc_executor_get_zero_initialized_executor>
 8002608:	4620      	mov	r0, r4
 800260a:	463b      	mov	r3, r7
 800260c:	2288      	movs	r2, #136	@ 0x88
 800260e:	4619      	mov	r1, r3
 8002610:	f019 f899 	bl	801b746 <memcpy>
	  rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8002614:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8002618:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <StartDefaultTask+0x234>)
 800261a:	4928      	ldr	r1, [pc, #160]	@ (80026bc <StartDefaultTask+0x23c>)
 800261c:	483f      	ldr	r0, [pc, #252]	@ (800271c <StartDefaultTask+0x29c>)
 800261e:	f00c f82b 	bl	800e678 <rclc_executor_init>
	  rclc_executor_add_timer(&executor, &mpu6050_timer);
 8002622:	492c      	ldr	r1, [pc, #176]	@ (80026d4 <StartDefaultTask+0x254>)
 8002624:	483d      	ldr	r0, [pc, #244]	@ (800271c <StartDefaultTask+0x29c>)
 8002626:	f00c f8cb 	bl	800e7c0 <rclc_executor_add_timer>
	  if(button == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &mpu6050_service, &mpu6050_request, &mpu6050_response, service_callback);
 800262a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 800262e:	2b00      	cmp	r3, #0
 8002630:	d107      	bne.n	8002642 <StartDefaultTask+0x1c2>
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <StartDefaultTask+0x2a0>)
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4b3b      	ldr	r3, [pc, #236]	@ (8002724 <StartDefaultTask+0x2a4>)
 8002638:	4a3b      	ldr	r2, [pc, #236]	@ (8002728 <StartDefaultTask+0x2a8>)
 800263a:	492e      	ldr	r1, [pc, #184]	@ (80026f4 <StartDefaultTask+0x274>)
 800263c:	4837      	ldr	r0, [pc, #220]	@ (800271c <StartDefaultTask+0x29c>)
 800263e:	f00c f8e9 	bl	800e814 <rclc_executor_add_service>
	  rclc_executor_add_service(&executor, &imustatus_service, &imustatus_request, &imustatus_response, imu_service_callback);
 8002642:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <StartDefaultTask+0x2ac>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <StartDefaultTask+0x2b0>)
 8002648:	4a3a      	ldr	r2, [pc, #232]	@ (8002734 <StartDefaultTask+0x2b4>)
 800264a:	4931      	ldr	r1, [pc, #196]	@ (8002710 <StartDefaultTask+0x290>)
 800264c:	4833      	ldr	r0, [pc, #204]	@ (800271c <StartDefaultTask+0x29c>)
 800264e:	f00c f8e1 	bl	800e814 <rclc_executor_add_service>
	  rclc_executor_add_subscription(&executor, &contact_sub, &contact_msg, &subscription_callback, ON_NEW_DATA);
 8002652:	2300      	movs	r3, #0
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4b38      	ldr	r3, [pc, #224]	@ (8002738 <StartDefaultTask+0x2b8>)
 8002658:	4a38      	ldr	r2, [pc, #224]	@ (800273c <StartDefaultTask+0x2bc>)
 800265a:	4924      	ldr	r1, [pc, #144]	@ (80026ec <StartDefaultTask+0x26c>)
 800265c:	482f      	ldr	r0, [pc, #188]	@ (800271c <StartDefaultTask+0x29c>)
 800265e:	f00c f87b 	bl	800e758 <rclc_executor_add_subscription>
	  rclc_executor_spin(&executor);
 8002662:	482e      	ldr	r0, [pc, #184]	@ (800271c <StartDefaultTask+0x29c>)
 8002664:	f00c fafc 	bl	800ec60 <rclc_executor_spin>

	  //create message
	  mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8002668:	4c35      	ldr	r4, [pc, #212]	@ (8002740 <StartDefaultTask+0x2c0>)
 800266a:	463b      	mov	r3, r7
 800266c:	4935      	ldr	r1, [pc, #212]	@ (8002744 <StartDefaultTask+0x2c4>)
 800266e:	4618      	mov	r0, r3
 8002670:	f009 fb2e 	bl	800bcd0 <micro_ros_string_utilities_init>
 8002674:	f104 0308 	add.w	r3, r4, #8
 8002678:	463a      	mov	r2, r7
 800267a:	ca07      	ldmia	r2, {r0, r1, r2}
 800267c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	  for(;;)
	  {
		osDelay(10);
 8002680:	200a      	movs	r0, #10
 8002682:	f006 fc2b 	bl	8008edc <osDelay>
 8002686:	e7fb      	b.n	8002680 <StartDefaultTask+0x200>
 8002688:	08003581 	.word	0x08003581
 800268c:	0800351d 	.word	0x0800351d
 8002690:	080034fd 	.word	0x080034fd
 8002694:	080034d1 	.word	0x080034d1
 8002698:	20000c80 	.word	0x20000c80
 800269c:	08003205 	.word	0x08003205
 80026a0:	08003249 	.word	0x08003249
 80026a4:	08003281 	.word	0x08003281
 80026a8:	080032ed 	.word	0x080032ed
 80026ac:	0801d868 	.word	0x0801d868
 80026b0:	48000800 	.word	0x48000800
 80026b4:	20003d48 	.word	0x20003d48
 80026b8:	20003d64 	.word	0x20003d64
 80026bc:	20003d14 	.word	0x20003d14
 80026c0:	0801d890 	.word	0x0801d890
 80026c4:	0801d894 	.word	0x0801d894
 80026c8:	20003d5c 	.word	0x20003d5c
 80026cc:	08001f69 	.word	0x08001f69
 80026d0:	00989680 	.word	0x00989680
 80026d4:	20003df0 	.word	0x20003df0
 80026d8:	0801d8a0 	.word	0x0801d8a0
 80026dc:	20003df4 	.word	0x20003df4
 80026e0:	0801d8b4 	.word	0x0801d8b4
 80026e4:	20003f38 	.word	0x20003f38
 80026e8:	0801d8c4 	.word	0x0801d8c4
 80026ec:	20003f70 	.word	0x20003f70
 80026f0:	0801d8cc 	.word	0x0801d8cc
 80026f4:	20003fd0 	.word	0x20003fd0
 80026f8:	20004168 	.word	0x20004168
 80026fc:	20000000 	.word	0x20000000
 8002700:	20003ef0 	.word	0x20003ef0
 8002704:	20003e90 	.word	0x20003e90
 8002708:	2000416c 	.word	0x2000416c
 800270c:	0801d8e0 	.word	0x0801d8e0
 8002710:	20004118 	.word	0x20004118
 8002714:	0801d8ec 	.word	0x0801d8ec
 8002718:	20004130 	.word	0x20004130
 800271c:	20003d68 	.word	0x20003d68
 8002720:	080022ed 	.word	0x080022ed
 8002724:	20003fd4 	.word	0x20003fd4
 8002728:	20003fd8 	.word	0x20003fd8
 800272c:	080023e5 	.word	0x080023e5
 8002730:	2000411c 	.word	0x2000411c
 8002734:	20004120 	.word	0x20004120
 8002738:	0800245d 	.word	0x0800245d
 800273c:	20003f74 	.word	0x20003f74
 8002740:	20003df8 	.word	0x20003df8
 8002744:	0801d8fc 	.word	0x0801d8fc

08002748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a04      	ldr	r2, [pc, #16]	@ (8002768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800275a:	f000 ffa7 	bl	80036ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <Error_Handler+0x8>

08002778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_MspInit+0x50>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002782:	4a11      	ldr	r2, [pc, #68]	@ (80027c8 <HAL_MspInit+0x50>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6613      	str	r3, [r2, #96]	@ 0x60
 800278a:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <HAL_MspInit+0x50>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <HAL_MspInit+0x50>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	4a0b      	ldr	r2, [pc, #44]	@ (80027c8 <HAL_MspInit+0x50>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_MspInit+0x50>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	210f      	movs	r1, #15
 80027b2:	f06f 0001 	mvn.w	r0, #1
 80027b6:	f001 f84f 	bl	8003858 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027ba:	f002 fde5 	bl	8005388 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b09e      	sub	sp, #120	@ 0x78
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	2254      	movs	r2, #84	@ 0x54
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f018 fee1 	bl	801b5b4 <memset>
  if(hi2c->Instance==I2C1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_I2C_MspInit+0xa8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d136      	bne.n	800286a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027fc:	2340      	movs	r3, #64	@ 0x40
 80027fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fb2d 	bl	8005e68 <HAL_RCCEx_PeriphCLKConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002814:	f7ff ffaa 	bl	800276c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <HAL_I2C_MspInit+0xac>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281c:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_I2C_MspInit+0xac>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_I2C_MspInit+0xac>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002830:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002834:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002836:	2312      	movs	r3, #18
 8002838:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002842:	2304      	movs	r3, #4
 8002844:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800284a:	4619      	mov	r1, r3
 800284c:	480b      	ldr	r0, [pc, #44]	@ (800287c <HAL_I2C_MspInit+0xb0>)
 800284e:	f001 fb69 	bl	8003f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_I2C_MspInit+0xac>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	4a08      	ldr	r2, [pc, #32]	@ (8002878 <HAL_I2C_MspInit+0xac>)
 8002858:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800285c:	6593      	str	r3, [r2, #88]	@ 0x58
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <HAL_I2C_MspInit+0xac>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800286a:	bf00      	nop
 800286c:	3778      	adds	r7, #120	@ 0x78
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40005400 	.word	0x40005400
 8002878:	40021000 	.word	0x40021000
 800287c:	48000400 	.word	0x48000400

08002880 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_I2C_MspDeInit+0x3c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10f      	bne.n	80028b2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_I2C_MspDeInit+0x40>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <HAL_I2C_MspDeInit+0x40>)
 8002898:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800289c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800289e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028a2:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <HAL_I2C_MspDeInit+0x44>)
 80028a4:	f001 fcc0 	bl	8004228 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80028a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028ac:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <HAL_I2C_MspDeInit+0x44>)
 80028ae:	f001 fcbb 	bl	8004228 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40005400 	.word	0x40005400
 80028c0:	40021000 	.word	0x40021000
 80028c4:	48000400 	.word	0x48000400

080028c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b09e      	sub	sp, #120	@ 0x78
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e0:	f107 0310 	add.w	r3, r7, #16
 80028e4:	2254      	movs	r2, #84	@ 0x54
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f018 fe63 	bl	801b5b4 <memset>
  if(huart->Instance==LPUART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a4e      	ldr	r2, [pc, #312]	@ (8002a2c <HAL_UART_MspInit+0x164>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	f040 8094 	bne.w	8002a22 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80028fa:	2320      	movs	r3, #32
 80028fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80028fe:	2300      	movs	r3, #0
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	4618      	mov	r0, r3
 8002908:	f003 faae 	bl	8005e68 <HAL_RCCEx_PeriphCLKConfig>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002912:	f7ff ff2b 	bl	800276c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002916:	4b46      	ldr	r3, [pc, #280]	@ (8002a30 <HAL_UART_MspInit+0x168>)
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	4a45      	ldr	r2, [pc, #276]	@ (8002a30 <HAL_UART_MspInit+0x168>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002922:	4b43      	ldr	r3, [pc, #268]	@ (8002a30 <HAL_UART_MspInit+0x168>)
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	4b40      	ldr	r3, [pc, #256]	@ (8002a30 <HAL_UART_MspInit+0x168>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	4a3f      	ldr	r2, [pc, #252]	@ (8002a30 <HAL_UART_MspInit+0x168>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800293a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a30 <HAL_UART_MspInit+0x168>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002946:	230c      	movs	r3, #12
 8002948:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002956:	230c      	movs	r3, #12
 8002958:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002964:	f001 fade 	bl	8003f24 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002968:	4b32      	ldr	r3, [pc, #200]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 800296a:	4a33      	ldr	r2, [pc, #204]	@ (8002a38 <HAL_UART_MspInit+0x170>)
 800296c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800296e:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 8002970:	2222      	movs	r2, #34	@ 0x22
 8002972:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002974:	4b2f      	ldr	r3, [pc, #188]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002980:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 8002982:	2280      	movs	r2, #128	@ 0x80
 8002984:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002986:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298c:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002992:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 8002994:	2220      	movs	r2, #32
 8002996:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002998:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 800299a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800299e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80029a0:	4824      	ldr	r0, [pc, #144]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 80029a2:	f000 ff81 	bl	80038a8 <HAL_DMA_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80029ac:	f7ff fede 	bl	800276c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a20      	ldr	r2, [pc, #128]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 80029b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80029b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <HAL_UART_MspInit+0x16c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80029be:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <HAL_UART_MspInit+0x178>)
 80029c2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029c6:	2223      	movs	r2, #35	@ 0x23
 80029c8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029cc:	2210      	movs	r2, #16
 80029ce:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d6:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029dc:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029f0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80029f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80029f6:	4811      	ldr	r0, [pc, #68]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 80029f8:	f000 ff56 	bl	80038a8 <HAL_DMA_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8002a02:	f7ff feb3 	bl	800276c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a0c      	ldr	r2, [pc, #48]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 8002a0a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a3c <HAL_UART_MspInit+0x174>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2105      	movs	r1, #5
 8002a16:	205b      	movs	r0, #91	@ 0x5b
 8002a18:	f000 ff1e 	bl	8003858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002a1c:	205b      	movs	r0, #91	@ 0x5b
 8002a1e:	f000 ff35 	bl	800388c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002a22:	bf00      	nop
 8002a24:	3778      	adds	r7, #120	@ 0x78
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40008000 	.word	0x40008000
 8002a30:	40021000 	.word	0x40021000
 8002a34:	20000d14 	.word	0x20000d14
 8002a38:	40020008 	.word	0x40020008
 8002a3c:	20000d74 	.word	0x20000d74
 8002a40:	4002001c 	.word	0x4002001c

08002a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08c      	sub	sp, #48	@ 0x30
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a54:	4b2c      	ldr	r3, [pc, #176]	@ (8002b08 <HAL_InitTick+0xc4>)
 8002a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a58:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <HAL_InitTick+0xc4>)
 8002a5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <HAL_InitTick+0xc4>)
 8002a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a6c:	f107 020c 	add.w	r2, r7, #12
 8002a70:	f107 0310 	add.w	r3, r7, #16
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 f97e 	bl	8005d78 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a7c:	f003 f966 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8002a80:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a84:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <HAL_InitTick+0xc8>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a90:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <HAL_InitTick+0xcc>)
 8002a92:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <HAL_InitTick+0xd0>)
 8002a94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	@ (8002b10 <HAL_InitTick+0xcc>)
 8002a98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <HAL_InitTick+0xcc>)
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_InitTick+0xcc>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_InitTick+0xcc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002ab0:	4817      	ldr	r0, [pc, #92]	@ (8002b10 <HAL_InitTick+0xcc>)
 8002ab2:	f003 fc27 	bl	8006304 <HAL_TIM_Base_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002abc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d11b      	bne.n	8002afc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002ac4:	4812      	ldr	r0, [pc, #72]	@ (8002b10 <HAL_InitTick+0xcc>)
 8002ac6:	f003 fc7f 	bl	80063c8 <HAL_TIM_Base_Start_IT>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d111      	bne.n	8002afc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ad8:	2019      	movs	r0, #25
 8002ada:	f000 fed7 	bl	800388c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d808      	bhi.n	8002af6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	2019      	movs	r0, #25
 8002aea:	f000 feb5 	bl	8003858 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <HAL_InitTick+0xd4>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e002      	b.n	8002afc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002afc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3730      	adds	r7, #48	@ 0x30
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	200048dc 	.word	0x200048dc
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <NMI_Handler+0x4>

08002b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <MemManage_Handler+0x4>

08002b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002b58:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <DMA1_Channel1_IRQHandler+0x10>)
 8002b5a:	f001 f888 	bl	8003c6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000d14 	.word	0x20000d14

08002b68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002b6c:	4802      	ldr	r0, [pc, #8]	@ (8002b78 <DMA1_Channel2_IRQHandler+0x10>)
 8002b6e:	f001 f87e 	bl	8003c6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000d74 	.word	0x20000d74

08002b7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b80:	4802      	ldr	r0, [pc, #8]	@ (8002b8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002b82:	f003 fc99 	bl	80064b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200048dc 	.word	0x200048dc

08002b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b98:	f001 fc72 	bl	8004480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ba4:	4802      	ldr	r0, [pc, #8]	@ (8002bb0 <LPUART1_IRQHandler+0x10>)
 8002ba6:	f004 f8ab 	bl	8006d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000c80 	.word	0x20000c80

08002bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return 1;
 8002bb8:	2301      	movs	r3, #1
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_kill>:

int _kill(int pid, int sig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bce:	f018 fd85 	bl	801b6dc <__errno>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2216      	movs	r2, #22
 8002bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_exit>:

void _exit (int status)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ffe7 	bl	8002bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bf6:	bf00      	nop
 8002bf8:	e7fd      	b.n	8002bf6 <_exit+0x12>

08002bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e00a      	b.n	8002c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c0c:	f3af 8000 	nop.w
 8002c10:	4601      	mov	r1, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	60ba      	str	r2, [r7, #8]
 8002c18:	b2ca      	uxtb	r2, r1
 8002c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dbf0      	blt.n	8002c0c <_read+0x12>
  }

  return len;
 8002c2a:	687b      	ldr	r3, [r7, #4]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e009      	b.n	8002c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	60ba      	str	r2, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	dbf1      	blt.n	8002c46 <_write+0x12>
  }
  return len;
 8002c62:	687b      	ldr	r3, [r7, #4]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_close>:

int _close(int file)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c94:	605a      	str	r2, [r3, #4]
  return 0;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_isatty>:

int _isatty(int file)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cac:	2301      	movs	r3, #1
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cdc:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <_sbrk+0x5c>)
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <_sbrk+0x60>)
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <_sbrk+0x64>)
 8002cf2:	4a12      	ldr	r2, [pc, #72]	@ (8002d3c <_sbrk+0x68>)
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d207      	bcs.n	8002d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d04:	f018 fcea 	bl	801b6dc <__errno>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d12:	e009      	b.n	8002d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d14:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <_sbrk+0x64>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1a:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <_sbrk+0x64>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <_sbrk+0x64>)
 8002d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20020000 	.word	0x20020000
 8002d34:	00000400 	.word	0x00000400
 8002d38:	2000492c 	.word	0x2000492c
 8002d3c:	2000c788 	.word	0x2000c788

08002d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <SystemInit+0x20>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <SystemInit+0x20>)
 8002d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d70:	f007 f8f6 	bl	8009f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d74:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee0 <pvPortMallocMicroROS+0x17c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002d7c:	f000 f986 	bl	800308c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d80:	4b58      	ldr	r3, [pc, #352]	@ (8002ee4 <pvPortMallocMicroROS+0x180>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 8090 	bne.w	8002eae <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01e      	beq.n	8002dd2 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002d94:	2208      	movs	r2, #8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f023 0307 	bic.w	r3, r3, #7
 8002dac:	3308      	adds	r3, #8
 8002dae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	e7fd      	b.n	8002dce <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d06a      	beq.n	8002eae <pvPortMallocMicroROS+0x14a>
 8002dd8:	4b43      	ldr	r3, [pc, #268]	@ (8002ee8 <pvPortMallocMicroROS+0x184>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d865      	bhi.n	8002eae <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002de2:	4b42      	ldr	r3, [pc, #264]	@ (8002eec <pvPortMallocMicroROS+0x188>)
 8002de4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002de6:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <pvPortMallocMicroROS+0x188>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dec:	e004      	b.n	8002df8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d903      	bls.n	8002e0a <pvPortMallocMicroROS+0xa6>
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f1      	bne.n	8002dee <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e0a:	4b35      	ldr	r3, [pc, #212]	@ (8002ee0 <pvPortMallocMicroROS+0x17c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d04c      	beq.n	8002eae <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	4413      	add	r3, r2
 8002e1c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	2308      	movs	r3, #8
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d920      	bls.n	8002e78 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	613b      	str	r3, [r7, #16]
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1ad2      	subs	r2, r2, r3
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e72:	69b8      	ldr	r0, [r7, #24]
 8002e74:	f000 f96c 	bl	8003150 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <pvPortMallocMicroROS+0x184>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	4a19      	ldr	r2, [pc, #100]	@ (8002ee8 <pvPortMallocMicroROS+0x184>)
 8002e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e86:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <pvPortMallocMicroROS+0x184>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <pvPortMallocMicroROS+0x18c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d203      	bcs.n	8002e9a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <pvPortMallocMicroROS+0x184>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a16      	ldr	r2, [pc, #88]	@ (8002ef0 <pvPortMallocMicroROS+0x18c>)
 8002e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <pvPortMallocMicroROS+0x180>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002eae:	f007 f865 	bl	8009f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	60fb      	str	r3, [r7, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3728      	adds	r7, #40	@ 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20005538 	.word	0x20005538
 8002ee4:	20005544 	.word	0x20005544
 8002ee8:	2000553c 	.word	0x2000553c
 8002eec:	20005530 	.word	0x20005530
 8002ef0:	20005540 	.word	0x20005540

08002ef4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04a      	beq.n	8002f9c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f06:	2308      	movs	r3, #8
 8002f08:	425b      	negs	r3, r3
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <vPortFreeMicroROS+0xb0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <vPortFreeMicroROS+0x46>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	60fb      	str	r3, [r7, #12]
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <vPortFreeMicroROS+0x66>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60bb      	str	r3, [r7, #8]
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <vPortFreeMicroROS+0xb0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d019      	beq.n	8002f9c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d115      	bne.n	8002f9c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <vPortFreeMicroROS+0xb0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f80:	f006 ffee 	bl	8009f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <vPortFreeMicroROS+0xb4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a06      	ldr	r2, [pc, #24]	@ (8002fa8 <vPortFreeMicroROS+0xb4>)
 8002f90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f92:	6938      	ldr	r0, [r7, #16]
 8002f94:	f000 f8dc 	bl	8003150 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002f98:	f006 fff0 	bl	8009f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002f9c:	bf00      	nop
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20005544 	.word	0x20005544
 8002fa8:	2000553c 	.word	0x2000553c

08002fac <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002fb8:	2308      	movs	r3, #8
 8002fba:	425b      	negs	r3, r3
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <getBlockSize+0x38>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

	return count;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20005544 	.word	0x20005544

08002fe8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002ff2:	f006 ffb5 	bl	8009f60 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	f7ff feb4 	bl	8002d64 <pvPortMallocMicroROS>
 8002ffc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d017      	beq.n	8003034 <pvPortReallocMicroROS+0x4c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d014      	beq.n	8003034 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ffce 	bl	8002fac <getBlockSize>
 8003010:	4603      	mov	r3, r0
 8003012:	2208      	movs	r2, #8
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d201      	bcs.n	8003024 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	68b8      	ldr	r0, [r7, #8]
 800302a:	f018 fb8c 	bl	801b746 <memcpy>

		vPortFreeMicroROS(pv);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff60 	bl	8002ef4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8003034:	f006 ffa2 	bl	8009f7c <xTaskResumeAll>

	return newmem;
 8003038:	68bb      	ldr	r3, [r7, #8]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800304c:	f006 ff88 	bl	8009f60 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800305a:	6978      	ldr	r0, [r7, #20]
 800305c:	f7ff fe82 	bl	8002d64 <pvPortMallocMicroROS>
 8003060:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	613b      	str	r3, [r7, #16]

  	while(count--)
 8003066:	e004      	b.n	8003072 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	613a      	str	r2, [r7, #16]
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1e5a      	subs	r2, r3, #1
 8003076:	617a      	str	r2, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f5      	bne.n	8003068 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800307c:	f006 ff7e 	bl	8009f7c <xTaskResumeAll>
  	return mem;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003092:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003096:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003098:	4b27      	ldr	r3, [pc, #156]	@ (8003138 <prvHeapInit+0xac>)
 800309a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3307      	adds	r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003138 <prvHeapInit+0xac>)
 80030bc:	4413      	add	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030c4:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <prvHeapInit+0xb0>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030ca:	4b1c      	ldr	r3, [pc, #112]	@ (800313c <prvHeapInit+0xb0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80030d8:	2208      	movs	r2, #8
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0307 	bic.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <prvHeapInit+0xb4>)
 80030ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80030ee:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <prvHeapInit+0xb4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <prvHeapInit+0xb4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <prvHeapInit+0xb4>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a0a      	ldr	r2, [pc, #40]	@ (8003144 <prvHeapInit+0xb8>)
 800311a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a09      	ldr	r2, [pc, #36]	@ (8003148 <prvHeapInit+0xbc>)
 8003122:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003124:	4b09      	ldr	r3, [pc, #36]	@ (800314c <prvHeapInit+0xc0>)
 8003126:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800312a:	601a      	str	r2, [r3, #0]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	20004930 	.word	0x20004930
 800313c:	20005530 	.word	0x20005530
 8003140:	20005538 	.word	0x20005538
 8003144:	20005540 	.word	0x20005540
 8003148:	2000553c 	.word	0x2000553c
 800314c:	20005544 	.word	0x20005544

08003150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003158:	4b28      	ldr	r3, [pc, #160]	@ (80031fc <prvInsertBlockIntoFreeList+0xac>)
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e002      	b.n	8003164 <prvInsertBlockIntoFreeList+0x14>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	d8f7      	bhi.n	800315e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4413      	add	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	d108      	bne.n	8003192 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d118      	bne.n	80031d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <prvInsertBlockIntoFreeList+0xb0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d00d      	beq.n	80031ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e008      	b.n	80031e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <prvInsertBlockIntoFreeList+0xb0>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e003      	b.n	80031e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d002      	beq.n	80031ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20005530 	.word	0x20005530
 8003200:	20005538 	.word	0x20005538

08003204 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800320e:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <microros_allocate+0x3c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	461a      	mov	r2, r3
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <microros_allocate+0x3c>)
 800321c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800321e:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <microros_allocate+0x40>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <microros_allocate+0x40>)
 800322c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fd98 	bl	8002d64 <pvPortMallocMicroROS>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20005548 	.word	0x20005548
 8003244:	2000554c 	.word	0x2000554c

08003248 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fea7 	bl	8002fac <getBlockSize>
 800325e:	4603      	mov	r3, r0
 8003260:	4a06      	ldr	r2, [pc, #24]	@ (800327c <microros_deallocate+0x34>)
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	461a      	mov	r2, r3
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <microros_deallocate+0x34>)
 800326a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff fe41 	bl	8002ef4 <vPortFreeMicroROS>
  }
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000554c 	.word	0x2000554c

08003280 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800328c:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <microros_reallocate+0x64>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4413      	add	r3, r2
 8003296:	461a      	mov	r2, r3
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <microros_reallocate+0x64>)
 800329a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800329c:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <microros_reallocate+0x68>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <microros_reallocate+0x68>)
 80032aa:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80032b2:	68b8      	ldr	r0, [r7, #8]
 80032b4:	f7ff fd56 	bl	8002d64 <pvPortMallocMicroROS>
 80032b8:	4603      	mov	r3, r0
 80032ba:	e00e      	b.n	80032da <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fe75 	bl	8002fac <getBlockSize>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4a08      	ldr	r2, [pc, #32]	@ (80032e8 <microros_reallocate+0x68>)
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <microros_reallocate+0x68>)
 80032ce:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff fe88 	bl	8002fe8 <pvPortReallocMicroROS>
 80032d8:	4603      	mov	r3, r0
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20005548 	.word	0x20005548
 80032e8:	2000554c 	.word	0x2000554c

080032ec <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	4a0c      	ldr	r2, [pc, #48]	@ (8003334 <microros_zero_allocate+0x48>)
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4413      	add	r3, r2
 8003306:	461a      	mov	r2, r3
 8003308:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <microros_zero_allocate+0x48>)
 800330a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	4a08      	ldr	r2, [pc, #32]	@ (8003338 <microros_zero_allocate+0x4c>)
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	4413      	add	r3, r2
 800331a:	461a      	mov	r2, r3
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <microros_zero_allocate+0x4c>)
 800331e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fe8d 	bl	8003042 <pvPortCallocMicroROS>
 8003328:	4603      	mov	r3, r0
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20005548 	.word	0x20005548
 8003338:	2000554c 	.word	0x2000554c
 800333c:	00000000 	.word	0x00000000

08003340 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003356:	a320      	add	r3, pc, #128	@ (adr r3, 80033d8 <UTILS_NanosecondsToTimespec+0x98>)
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	f7fd fc84 	bl	8000c68 <__aeabi_ldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800336a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800336e:	a31a      	add	r3, pc, #104	@ (adr r3, 80033d8 <UTILS_NanosecondsToTimespec+0x98>)
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f7fd fc78 	bl	8000c68 <__aeabi_ldivmod>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	da20      	bge.n	80033c6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a11      	ldr	r2, [pc, #68]	@ (80033d0 <UTILS_NanosecondsToTimespec+0x90>)
 800338a:	fb82 1203 	smull	r1, r2, r2, r3
 800338e:	1712      	asrs	r2, r2, #28
 8003390:	17db      	asrs	r3, r3, #31
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	3301      	adds	r3, #1
 8003396:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	17c8      	asrs	r0, r1, #31
 80033a2:	460c      	mov	r4, r1
 80033a4:	4605      	mov	r5, r0
 80033a6:	ebb2 0804 	subs.w	r8, r2, r4
 80033aa:	eb63 0905 	sbc.w	r9, r3, r5
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4906      	ldr	r1, [pc, #24]	@ (80033d4 <UTILS_NanosecondsToTimespec+0x94>)
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	609a      	str	r2, [r3, #8]
    }
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033d0:	44b82fa1 	.word	0x44b82fa1
 80033d4:	3b9aca00 	.word	0x3b9aca00
 80033d8:	3b9aca00 	.word	0x3b9aca00
 80033dc:	00000000 	.word	0x00000000

080033e0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b08e      	sub	sp, #56	@ 0x38
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80033ea:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80033ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80033f0:	2300      	movs	r3, #0
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003406:	4618      	mov	r0, r3
 8003408:	f007 f834 	bl	800a474 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800340c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340e:	17da      	asrs	r2, r3, #31
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	61fa      	str	r2, [r7, #28]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	000b      	movs	r3, r1
 8003420:	2200      	movs	r2, #0
 8003422:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003428:	2200      	movs	r2, #0
 800342a:	461c      	mov	r4, r3
 800342c:	4615      	mov	r5, r2
 800342e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003432:	1911      	adds	r1, r2, r4
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	416b      	adcs	r3, r5
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800343e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003442:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	f04f 0400 	mov.w	r4, #0
 800344e:	f04f 0500 	mov.w	r5, #0
 8003452:	015d      	lsls	r5, r3, #5
 8003454:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003458:	0154      	lsls	r4, r2, #5
 800345a:	4622      	mov	r2, r4
 800345c:	462b      	mov	r3, r5
 800345e:	ebb2 0800 	subs.w	r8, r2, r0
 8003462:	eb63 0901 	sbc.w	r9, r3, r1
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003472:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003476:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	eb18 0a00 	adds.w	sl, r8, r0
 8003482:	eb49 0b01 	adc.w	fp, r9, r1
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003492:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003496:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800349a:	ebb2 040a 	subs.w	r4, r2, sl
 800349e:	603c      	str	r4, [r7, #0]
 80034a0:	eb63 030b 	sbc.w	r3, r3, fp
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034aa:	4623      	mov	r3, r4
 80034ac:	181b      	adds	r3, r3, r0
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	462b      	mov	r3, r5
 80034b2:	eb41 0303 	adc.w	r3, r1, r3
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034be:	f7ff ff3f 	bl	8003340 <UTILS_NanosecondsToTimespec>

    return 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	3738      	adds	r7, #56	@ 0x38
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080034d0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80034de:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80034e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034e4:	4904      	ldr	r1, [pc, #16]	@ (80034f8 <cubemx_transport_open+0x28>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f003 fb28 	bl	8006b3c <HAL_UART_Receive_DMA>
    return true;
 80034ec:	2301      	movs	r3, #1
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20005550 	.word	0x20005550

080034fc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800350a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f003 fb61 	bl	8006bd4 <HAL_UART_DMAStop>
    return true;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003530:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	2b20      	cmp	r3, #32
 800353a:	d11b      	bne.n	8003574 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	f003 fa79 	bl	8006a3c <HAL_UART_Transmit_DMA>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800354e:	e002      	b.n	8003556 <cubemx_transport_write+0x3a>
            osDelay(1);
 8003550:	2001      	movs	r0, #1
 8003552:	f005 fcc3 	bl	8008edc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <cubemx_transport_write+0x4a>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003562:	2b20      	cmp	r3, #32
 8003564:	d1f4      	bne.n	8003550 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <cubemx_transport_write+0x54>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	e002      	b.n	8003576 <cubemx_transport_write+0x5a>
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8003574:	2300      	movs	r3, #0
    }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003594:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800359a:	b672      	cpsid	i
}
 800359c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80035ac:	4a1b      	ldr	r2, [pc, #108]	@ (800361c <cubemx_transport_read+0x9c>)
 80035ae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035b0:	b662      	cpsie	i
}
 80035b2:	bf00      	nop
        __enable_irq();
        ms_used++;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	3301      	adds	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f005 fc8e 	bl	8008edc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80035c0:	4b17      	ldr	r3, [pc, #92]	@ (8003620 <cubemx_transport_read+0xa0>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b15      	ldr	r3, [pc, #84]	@ (800361c <cubemx_transport_read+0x9c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d103      	bne.n	80035d4 <cubemx_transport_read+0x54>
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	dbe2      	blt.n	800359a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80035d8:	e011      	b.n	80035fe <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80035da:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <cubemx_transport_read+0xa0>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	440b      	add	r3, r1
 80035e4:	490f      	ldr	r1, [pc, #60]	@ (8003624 <cubemx_transport_read+0xa4>)
 80035e6:	5c8a      	ldrb	r2, [r1, r2]
 80035e8:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80035ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <cubemx_transport_read+0xa0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <cubemx_transport_read+0xa0>)
 80035f6:	6013      	str	r3, [r2, #0]
        wrote++;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80035fe:	4b08      	ldr	r3, [pc, #32]	@ (8003620 <cubemx_transport_read+0xa0>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b06      	ldr	r3, [pc, #24]	@ (800361c <cubemx_transport_read+0x9c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d003      	beq.n	8003612 <cubemx_transport_read+0x92>
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	429a      	cmp	r2, r3
 8003610:	d3e3      	bcc.n	80035da <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8003612:	69bb      	ldr	r3, [r7, #24]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20005d54 	.word	0x20005d54
 8003620:	20005d50 	.word	0x20005d50
 8003624:	20005550 	.word	0x20005550

08003628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003628:	480d      	ldr	r0, [pc, #52]	@ (8003660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800362a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800362c:	f7ff fb88 	bl	8002d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003630:	480c      	ldr	r0, [pc, #48]	@ (8003664 <LoopForever+0x6>)
  ldr r1, =_edata
 8003632:	490d      	ldr	r1, [pc, #52]	@ (8003668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003634:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <LoopForever+0xe>)
  movs r3, #0
 8003636:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003638:	e002      	b.n	8003640 <LoopCopyDataInit>

0800363a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800363a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800363c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800363e:	3304      	adds	r3, #4

08003640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003644:	d3f9      	bcc.n	800363a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003646:	4a0a      	ldr	r2, [pc, #40]	@ (8003670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003648:	4c0a      	ldr	r4, [pc, #40]	@ (8003674 <LoopForever+0x16>)
  movs r3, #0
 800364a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800364c:	e001      	b.n	8003652 <LoopFillZerobss>

0800364e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800364e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003650:	3204      	adds	r2, #4

08003652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003654:	d3fb      	bcc.n	800364e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003656:	f018 f847 	bl	801b6e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800365a:	f7fe fabf 	bl	8001bdc <main>

0800365e <LoopForever>:

LoopForever:
    b LoopForever
 800365e:	e7fe      	b.n	800365e <LoopForever>
  ldr   r0, =_estack
 8003660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003668:	20000c00 	.word	0x20000c00
  ldr r2, =_sidata
 800366c:	0801f7e0 	.word	0x0801f7e0
  ldr r2, =_sbss
 8003670:	20000c00 	.word	0x20000c00
  ldr r4, =_ebss
 8003674:	2000c784 	.word	0x2000c784

08003678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003678:	e7fe      	b.n	8003678 <ADC1_2_IRQHandler>

0800367a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003684:	2003      	movs	r0, #3
 8003686:	f000 f8dc 	bl	8003842 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800368a:	200f      	movs	r0, #15
 800368c:	f7ff f9da 	bl	8002a44 <HAL_InitTick>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	71fb      	strb	r3, [r7, #7]
 800369a:	e001      	b.n	80036a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800369c:	f7ff f86c 	bl	8002778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036a0:	79fb      	ldrb	r3, [r7, #7]

}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_IncTick+0x1c>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_IncTick+0x20>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	4a03      	ldr	r2, [pc, #12]	@ (80036c8 <HAL_IncTick+0x1c>)
 80036bc:	6013      	str	r3, [r2, #0]
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	20005d58 	.word	0x20005d58
 80036cc:	20000010 	.word	0x20000010

080036d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return uwTick;
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <HAL_GetTick+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20005d58 	.word	0x20005d58

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	@ (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	@ (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	@ (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	@ 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	@ 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ff4c 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003866:	f7ff ff63 	bl	8003730 <__NVIC_GetPriorityGrouping>
 800386a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	6978      	ldr	r0, [r7, #20]
 8003872:	f7ff ffb3 	bl	80037dc <NVIC_EncodePriority>
 8003876:	4602      	mov	r2, r0
 8003878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ff82 	bl	8003788 <__NVIC_SetPriority>
}
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ff56 	bl	800374c <__NVIC_EnableIRQ>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08d      	b.n	80039d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_DMA_Init+0x138>)
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d80f      	bhi.n	80038e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b45      	ldr	r3, [pc, #276]	@ (80039e4 <HAL_DMA_Init+0x13c>)
 80038ce:	4413      	add	r3, r2
 80038d0:	4a45      	ldr	r2, [pc, #276]	@ (80039e8 <HAL_DMA_Init+0x140>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a42      	ldr	r2, [pc, #264]	@ (80039ec <HAL_DMA_Init+0x144>)
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80038e4:	e00e      	b.n	8003904 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b40      	ldr	r3, [pc, #256]	@ (80039f0 <HAL_DMA_Init+0x148>)
 80038ee:	4413      	add	r3, r2
 80038f0:	4a3d      	ldr	r2, [pc, #244]	@ (80039e8 <HAL_DMA_Init+0x140>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	009a      	lsls	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a3c      	ldr	r2, [pc, #240]	@ (80039f4 <HAL_DMA_Init+0x14c>)
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa82 	bl	8003e60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003964:	d102      	bne.n	800396c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003980:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d010      	beq.n	80039ac <HAL_DMA_Init+0x104>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d80c      	bhi.n	80039ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 faa2 	bl	8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	e008      	b.n	80039be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40020407 	.word	0x40020407
 80039e4:	bffdfff8 	.word	0xbffdfff8
 80039e8:	cccccccd 	.word	0xcccccccd
 80039ec:	40020000 	.word	0x40020000
 80039f0:	bffdfbf8 	.word	0xbffdfbf8
 80039f4:	40020400 	.word	0x40020400

080039f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_DMA_Start_IT+0x20>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e066      	b.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d155      	bne.n	8003ad8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f9c7 	bl	8003de4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 020e 	orr.w	r2, r2, #14
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e00f      	b.n	8003a90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 020a 	orr.w	r2, r2, #10
 8003a8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e005      	b.n	8003ae4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d005      	beq.n	8003b12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e037      	b.n	8003b82 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 020e 	bic.w	r2, r2, #14
 8003b20:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b30:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f003 021f 	and.w	r2, r3, #31
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b5e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b76:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b80:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2204      	movs	r2, #4
 8003bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	e047      	b.n	8003c64 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 020e 	bic.w	r2, r2, #14
 8003be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f202 	lsl.w	r2, r1, r2
 8003c16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
    }
  }
  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2204      	movs	r2, #4
 8003c90:	409a      	lsls	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d026      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x7a>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d021      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d107      	bne.n	8003cc2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0204 	bic.w	r2, r2, #4
 8003cc0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	f003 021f 	and.w	r2, r3, #31
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2104      	movs	r1, #4
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d071      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ce6:	e06c      	b.n	8003dc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d02e      	beq.n	8003d5a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d029      	beq.n	8003d5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 020a 	bic.w	r2, r2, #10
 8003d22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	f003 021f 	and.w	r2, r3, #31
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	2102      	movs	r1, #2
 8003d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d038      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d58:	e033      	b.n	8003dc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2208      	movs	r2, #8
 8003d64:	409a      	lsls	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d02a      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d025      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 020e 	bic.w	r2, r2, #14
 8003d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8c:	f003 021f 	and.w	r2, r3, #31
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	2101      	movs	r1, #1
 8003d96:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
}
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dfa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f003 021f 	and.w	r2, r3, #31
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d108      	bne.n	8003e44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e42:	e007      	b.n	8003e54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b16      	ldr	r3, [pc, #88]	@ (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d802      	bhi.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e74:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e001      	b.n	8003e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e7c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	3b08      	subs	r3, #8
 8003e8a:	4a12      	ldr	r2, [pc, #72]	@ (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40020407 	.word	0x40020407
 8003ecc:	40020800 	.word	0x40020800
 8003ed0:	40020820 	.word	0x40020820
 8003ed4:	cccccccd 	.word	0xcccccccd
 8003ed8:	40020880 	.word	0x40020880

08003edc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a08      	ldr	r2, [pc, #32]	@ (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003efe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	1000823f 	.word	0x1000823f
 8003f20:	40020940 	.word	0x40020940

08003f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f32:	e15a      	b.n	80041ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	4013      	ands	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 814c 	beq.w	80041e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d005      	beq.n	8003f64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d130      	bne.n	8003fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f003 0201 	and.w	r2, r3, #1
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d017      	beq.n	8004002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	2203      	movs	r2, #3
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d123      	bne.n	8004056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	08da      	lsrs	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3208      	adds	r2, #8
 8004016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	220f      	movs	r2, #15
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	6939      	ldr	r1, [r7, #16]
 8004052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2203      	movs	r2, #3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0203 	and.w	r2, r3, #3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80a6 	beq.w	80041e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004098:	4b5b      	ldr	r3, [pc, #364]	@ (8004208 <HAL_GPIO_Init+0x2e4>)
 800409a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409c:	4a5a      	ldr	r2, [pc, #360]	@ (8004208 <HAL_GPIO_Init+0x2e4>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80040a4:	4b58      	ldr	r3, [pc, #352]	@ (8004208 <HAL_GPIO_Init+0x2e4>)
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b0:	4a56      	ldr	r2, [pc, #344]	@ (800420c <HAL_GPIO_Init+0x2e8>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040da:	d01f      	beq.n	800411c <HAL_GPIO_Init+0x1f8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a4c      	ldr	r2, [pc, #304]	@ (8004210 <HAL_GPIO_Init+0x2ec>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d019      	beq.n	8004118 <HAL_GPIO_Init+0x1f4>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004214 <HAL_GPIO_Init+0x2f0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_GPIO_Init+0x1f0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004218 <HAL_GPIO_Init+0x2f4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00d      	beq.n	8004110 <HAL_GPIO_Init+0x1ec>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a49      	ldr	r2, [pc, #292]	@ (800421c <HAL_GPIO_Init+0x2f8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <HAL_GPIO_Init+0x1e8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a48      	ldr	r2, [pc, #288]	@ (8004220 <HAL_GPIO_Init+0x2fc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_GPIO_Init+0x1e4>
 8004104:	2305      	movs	r3, #5
 8004106:	e00a      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004108:	2306      	movs	r3, #6
 800410a:	e008      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 800410c:	2304      	movs	r3, #4
 800410e:	e006      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004110:	2303      	movs	r3, #3
 8004112:	e004      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004114:	2302      	movs	r3, #2
 8004116:	e002      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 800411c:	2300      	movs	r3, #0
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800412e:	4937      	ldr	r1, [pc, #220]	@ (800420c <HAL_GPIO_Init+0x2e8>)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800413c:	4b39      	ldr	r3, [pc, #228]	@ (8004224 <HAL_GPIO_Init+0x300>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004160:	4a30      	ldr	r2, [pc, #192]	@ (8004224 <HAL_GPIO_Init+0x300>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004166:	4b2f      	ldr	r3, [pc, #188]	@ (8004224 <HAL_GPIO_Init+0x300>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800418a:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <HAL_GPIO_Init+0x300>)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004190:	4b24      	ldr	r3, [pc, #144]	@ (8004224 <HAL_GPIO_Init+0x300>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <HAL_GPIO_Init+0x300>)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <HAL_GPIO_Init+0x300>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041de:	4a11      	ldr	r2, [pc, #68]	@ (8004224 <HAL_GPIO_Init+0x300>)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f47f ae9d 	bne.w	8003f34 <HAL_GPIO_Init+0x10>
  }
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40021000 	.word	0x40021000
 800420c:	40010000 	.word	0x40010000
 8004210:	48000400 	.word	0x48000400
 8004214:	48000800 	.word	0x48000800
 8004218:	48000c00 	.word	0x48000c00
 800421c:	48001000 	.word	0x48001000
 8004220:	48001400 	.word	0x48001400
 8004224:	40010400 	.word	0x40010400

08004228 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004236:	e0bd      	b.n	80043b4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004238:	2201      	movs	r2, #1
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80b0 	beq.w	80043ae <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800424e:	4a60      	ldr	r2, [pc, #384]	@ (80043d0 <HAL_GPIO_DeInit+0x1a8>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	3302      	adds	r3, #2
 8004256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	220f      	movs	r2, #15
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004276:	d01f      	beq.n	80042b8 <HAL_GPIO_DeInit+0x90>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a56      	ldr	r2, [pc, #344]	@ (80043d4 <HAL_GPIO_DeInit+0x1ac>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d019      	beq.n	80042b4 <HAL_GPIO_DeInit+0x8c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a55      	ldr	r2, [pc, #340]	@ (80043d8 <HAL_GPIO_DeInit+0x1b0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <HAL_GPIO_DeInit+0x88>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a54      	ldr	r2, [pc, #336]	@ (80043dc <HAL_GPIO_DeInit+0x1b4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00d      	beq.n	80042ac <HAL_GPIO_DeInit+0x84>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a53      	ldr	r2, [pc, #332]	@ (80043e0 <HAL_GPIO_DeInit+0x1b8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <HAL_GPIO_DeInit+0x80>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a52      	ldr	r2, [pc, #328]	@ (80043e4 <HAL_GPIO_DeInit+0x1bc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_GPIO_DeInit+0x7c>
 80042a0:	2305      	movs	r3, #5
 80042a2:	e00a      	b.n	80042ba <HAL_GPIO_DeInit+0x92>
 80042a4:	2306      	movs	r3, #6
 80042a6:	e008      	b.n	80042ba <HAL_GPIO_DeInit+0x92>
 80042a8:	2304      	movs	r3, #4
 80042aa:	e006      	b.n	80042ba <HAL_GPIO_DeInit+0x92>
 80042ac:	2303      	movs	r3, #3
 80042ae:	e004      	b.n	80042ba <HAL_GPIO_DeInit+0x92>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e002      	b.n	80042ba <HAL_GPIO_DeInit+0x92>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <HAL_GPIO_DeInit+0x92>
 80042b8:	2300      	movs	r3, #0
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	f002 0203 	and.w	r2, r2, #3
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	4093      	lsls	r3, r2
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d132      	bne.n	8004330 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80042ca:	4b47      	ldr	r3, [pc, #284]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	4945      	ldr	r1, [pc, #276]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80042d8:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	43db      	mvns	r3, r3
 80042e0:	4941      	ldr	r1, [pc, #260]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80042e6:	4b40      	ldr	r3, [pc, #256]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	493e      	ldr	r1, [pc, #248]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80042f4:	4b3c      	ldr	r3, [pc, #240]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	493a      	ldr	r1, [pc, #232]	@ (80043e8 <HAL_GPIO_DeInit+0x1c0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	220f      	movs	r2, #15
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004312:	4a2f      	ldr	r2, [pc, #188]	@ (80043d0 <HAL_GPIO_DeInit+0x1a8>)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	3302      	adds	r3, #2
 800431a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43da      	mvns	r2, r3
 8004322:	482b      	ldr	r0, [pc, #172]	@ (80043d0 <HAL_GPIO_DeInit+0x1a8>)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	400a      	ands	r2, r1
 800432a:	3302      	adds	r3, #2
 800432c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2103      	movs	r1, #3
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3208      	adds	r2, #8
 800434c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	220f      	movs	r2, #15
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	08d2      	lsrs	r2, r2, #3
 8004364:	4019      	ands	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3208      	adds	r2, #8
 800436a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2103      	movs	r1, #3
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	2101      	movs	r1, #1
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	401a      	ands	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	2103      	movs	r1, #3
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	401a      	ands	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
    }

    position++;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f af3b 	bne.w	8004238 <HAL_GPIO_DeInit+0x10>
  }
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40010000 	.word	0x40010000
 80043d4:	48000400 	.word	0x48000400
 80043d8:	48000800 	.word	0x48000800
 80043dc:	48000c00 	.word	0x48000c00
 80043e0:	48001000 	.word	0x48001000
 80043e4:	48001400 	.word	0x48001400
 80043e8:	40010400 	.word	0x40010400

080043ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	887b      	ldrh	r3, [r7, #2]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e001      	b.n	800440e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
 8004428:	4613      	mov	r3, r2
 800442a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800442c:	787b      	ldrb	r3, [r7, #1]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004432:	887a      	ldrh	r2, [r7, #2]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004438:	e002      	b.n	8004440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4013      	ands	r3, r2
 8004464:	041a      	lsls	r2, r3, #16
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	43d9      	mvns	r1, r3
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	400b      	ands	r3, r1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f806 	bl	80044b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40010400 	.word	0x40010400

080044b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e08d      	b.n	80045f4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d106      	bne.n	80044f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fe f96d 	bl	80027cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2224      	movs	r2, #36	@ 0x24
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004516:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004526:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d107      	bne.n	8004540 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	e006      	b.n	800454e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800454c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d108      	bne.n	8004568 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	e007      	b.n	8004578 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004576:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800458a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800459a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69d9      	ldr	r1, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e021      	b.n	8004652 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2224      	movs	r2, #36	@ 0x24
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fe f92a 	bl	8002880 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4603      	mov	r3, r0
 800466c:	817b      	strh	r3, [r7, #10]
 800466e:	460b      	mov	r3, r1
 8004670:	813b      	strh	r3, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b20      	cmp	r3, #32
 8004680:	f040 80f9 	bne.w	8004876 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_I2C_Mem_Write+0x34>
 800468a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004696:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0ed      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_I2C_Mem_Write+0x4e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e0e6      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046b2:	f7ff f80d 	bl	80036d0 <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2319      	movs	r3, #25
 80046be:	2201      	movs	r2, #1
 80046c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 facf 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0d1      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2221      	movs	r2, #33	@ 0x21
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2240      	movs	r2, #64	@ 0x40
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a3a      	ldr	r2, [r7, #32]
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046fc:	88f8      	ldrh	r0, [r7, #6]
 80046fe:	893a      	ldrh	r2, [r7, #8]
 8004700:	8979      	ldrh	r1, [r7, #10]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	4603      	mov	r3, r0
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f9df 	bl	8004ad0 <I2C_RequestMemoryWrite>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0a9      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2bff      	cmp	r3, #255	@ 0xff
 800472c:	d90e      	bls.n	800474c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22ff      	movs	r2, #255	@ 0xff
 8004732:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004738:	b2da      	uxtb	r2, r3
 800473a:	8979      	ldrh	r1, [r7, #10]
 800473c:	2300      	movs	r3, #0
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fc53 	bl	8004ff0 <I2C_TransferConfig>
 800474a:	e00f      	b.n	800476c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475a:	b2da      	uxtb	r2, r3
 800475c:	8979      	ldrh	r1, [r7, #10]
 800475e:	2300      	movs	r3, #0
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fc42 	bl	8004ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fad2 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e07b      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d034      	beq.n	8004824 <HAL_I2C_Mem_Write+0x1c8>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d130      	bne.n	8004824 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	@ 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fa4b 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04d      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2bff      	cmp	r3, #255	@ 0xff
 80047e4:	d90e      	bls.n	8004804 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	22ff      	movs	r2, #255	@ 0xff
 80047ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8979      	ldrh	r1, [r7, #10]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fbf7 	bl	8004ff0 <I2C_TransferConfig>
 8004802:	e00f      	b.n	8004824 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	b2da      	uxtb	r2, r3
 8004814:	8979      	ldrh	r1, [r7, #10]
 8004816:	2300      	movs	r3, #0
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fbe6 	bl	8004ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d19e      	bne.n	800476c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fab8 	bl	8004da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e01a      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2220      	movs	r2, #32
 8004848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <HAL_I2C_Mem_Write+0x224>)
 8004856:	400b      	ands	r3, r1
 8004858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	fe00e800 	.word	0xfe00e800

08004884 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	461a      	mov	r2, r3
 8004892:	4603      	mov	r3, r0
 8004894:	817b      	strh	r3, [r7, #10]
 8004896:	460b      	mov	r3, r1
 8004898:	813b      	strh	r3, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	f040 80fd 	bne.w	8004aa6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_I2C_Mem_Read+0x34>
 80048b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0f1      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_I2C_Mem_Read+0x4e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e0ea      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048da:	f7fe fef9 	bl	80036d0 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2319      	movs	r3, #25
 80048e6:	2201      	movs	r2, #1
 80048e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f9bb 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0d5      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2222      	movs	r2, #34	@ 0x22
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2240      	movs	r2, #64	@ 0x40
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800491c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004924:	88f8      	ldrh	r0, [r7, #6]
 8004926:	893a      	ldrh	r2, [r7, #8]
 8004928:	8979      	ldrh	r1, [r7, #10]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4603      	mov	r3, r0
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f91f 	bl	8004b78 <I2C_RequestMemoryRead>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0ad      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2bff      	cmp	r3, #255	@ 0xff
 8004954:	d90e      	bls.n	8004974 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	22ff      	movs	r2, #255	@ 0xff
 800495a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004960:	b2da      	uxtb	r2, r3
 8004962:	8979      	ldrh	r1, [r7, #10]
 8004964:	4b52      	ldr	r3, [pc, #328]	@ (8004ab0 <HAL_I2C_Mem_Read+0x22c>)
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fb3f 	bl	8004ff0 <I2C_TransferConfig>
 8004972:	e00f      	b.n	8004994 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004982:	b2da      	uxtb	r2, r3
 8004984:	8979      	ldrh	r1, [r7, #10]
 8004986:	4b4a      	ldr	r3, [pc, #296]	@ (8004ab0 <HAL_I2C_Mem_Read+0x22c>)
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fb2e 	bl	8004ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	2200      	movs	r2, #0
 800499c:	2104      	movs	r1, #4
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f962 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07c      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d034      	beq.n	8004a54 <HAL_I2C_Mem_Read+0x1d0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d130      	bne.n	8004a54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	2200      	movs	r2, #0
 80049fa:	2180      	movs	r1, #128	@ 0x80
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f933 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e04d      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2bff      	cmp	r3, #255	@ 0xff
 8004a14:	d90e      	bls.n	8004a34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	22ff      	movs	r2, #255	@ 0xff
 8004a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	8979      	ldrh	r1, [r7, #10]
 8004a24:	2300      	movs	r3, #0
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fadf 	bl	8004ff0 <I2C_TransferConfig>
 8004a32:	e00f      	b.n	8004a54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	8979      	ldrh	r1, [r7, #10]
 8004a46:	2300      	movs	r3, #0
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 face 	bl	8004ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d19a      	bne.n	8004994 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f9a0 	bl	8004da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e01a      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2220      	movs	r2, #32
 8004a78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <HAL_I2C_Mem_Read+0x230>)
 8004a86:	400b      	ands	r3, r1
 8004a88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	80002400 	.word	0x80002400
 8004ab4:	fe00e800 	.word	0xfe00e800

08004ab8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <I2C_RequestMemoryWrite+0xa4>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa79 	bl	8004ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	69b9      	ldr	r1, [r7, #24]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f909 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e02c      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b22:	e015      	b.n	8004b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	69b9      	ldr	r1, [r7, #24]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8ef 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e012      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b46:	893b      	ldrh	r3, [r7, #8]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	@ 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f884 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	80002000 	.word	0x80002000

08004b78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	8979      	ldrh	r1, [r7, #10]
 8004b98:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <I2C_RequestMemoryRead+0xa4>)
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fa26 	bl	8004ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f8b6 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e02c      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bbe:	893b      	ldrh	r3, [r7, #8]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bc8:	e015      	b.n	8004bf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f89c 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e012      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2140      	movs	r1, #64	@ 0x40
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f831 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	80002000 	.word	0x80002000

08004c20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d103      	bne.n	8004c3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d007      	beq.n	8004c5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	619a      	str	r2, [r3, #24]
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c78:	e03b      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f8d6 	bl	8004e30 <I2C_IsErrorOccurred>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e041      	b.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c94:	d02d      	beq.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fe fd1b 	bl	80036d0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d122      	bne.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d113      	bne.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e00f      	b.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d0b4      	beq.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d26:	e033      	b.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f87f 	bl	8004e30 <I2C_IsErrorOccurred>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e031      	b.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d42:	d025      	beq.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7fe fcc4 	bl	80036d0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11a      	bne.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d013      	beq.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e007      	b.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d1c4      	bne.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db4:	e02f      	b.n	8004e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f838 	bl	8004e30 <I2C_IsErrorOccurred>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e02d      	b.n	8004e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dca:	f7fe fc81 	bl	80036d0 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11a      	bne.n	8004e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d013      	beq.n	8004e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e007      	b.n	8004e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d1c8      	bne.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	@ 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d068      	beq.n	8004f2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e64:	e049      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e6c:	d045      	beq.n	8004efa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fe fc2f 	bl	80036d0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_IsErrorOccurred+0x54>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13a      	bne.n	8004efa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea6:	d121      	bne.n	8004eec <I2C_IsErrorOccurred+0xbc>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eae:	d01d      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d01a      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ec6:	f7fe fc03 	bl	80036d0 <HAL_GetTick>
 8004eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ecc:	e00e      	b.n	8004eec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ece:	f7fe fbff 	bl	80036d0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b19      	cmp	r3, #25
 8004eda:	d907      	bls.n	8004eec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f043 0320 	orr.w	r3, r3, #32
 8004ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004eea:	e006      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d1e9      	bne.n	8004ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d003      	beq.n	8004f10 <I2C_IsErrorOccurred+0xe0>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0aa      	beq.n	8004e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01c      	beq.n	8004fde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fe3b 	bl	8004c20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004fec <I2C_IsErrorOccurred+0x1bc>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3728      	adds	r7, #40	@ 0x28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	4613      	mov	r3, r2
 8005000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005008:	7a7b      	ldrb	r3, [r7, #9]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4313      	orrs	r3, r2
 800501a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800501e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	0d5b      	lsrs	r3, r3, #21
 800502a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800502e:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <I2C_TransferConfig+0x60>)
 8005030:	430b      	orrs	r3, r1
 8005032:	43db      	mvns	r3, r3
 8005034:	ea02 0103 	and.w	r1, r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	03ff63ff 	.word	0x03ff63ff

08005054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b20      	cmp	r3, #32
 8005068:	d138      	bne.n	80050dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005074:	2302      	movs	r3, #2
 8005076:	e032      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	@ 0x24
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d139      	bne.n	8005174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800510a:	2302      	movs	r3, #2
 800510c:	e033      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	@ 0x24
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800513c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e041      	b.n	8005218 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800519c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f245 5255 	movw	r2, #21845	@ 0x5555
 80051a6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6852      	ldr	r2, [r2, #4]
 80051b0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80051bc:	f7fe fa88 	bl	80036d0 <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80051c2:	e00f      	b.n	80051e4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80051c4:	f7fe fa84 	bl	80036d0 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b31      	cmp	r3, #49	@ 0x31
 80051d0:	d908      	bls.n	80051e4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e019      	b.n	8005218 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e8      	bne.n	80051c4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d005      	beq.n	800520c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68d2      	ldr	r2, [r2, #12]
 8005208:	611a      	str	r2, [r3, #16]
 800520a:	e004      	b.n	8005216 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005230:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d141      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800524e:	4b4b      	ldr	r3, [pc, #300]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525a:	d131      	bne.n	80052c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800525c:	4b47      	ldr	r3, [pc, #284]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005262:	4a46      	ldr	r2, [pc, #280]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800526c:	4b43      	ldr	r3, [pc, #268]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005274:	4a41      	ldr	r2, [pc, #260]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800527a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800527c:	4b40      	ldr	r3, [pc, #256]	@ (8005380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2232      	movs	r2, #50	@ 0x32
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	4a3f      	ldr	r2, [pc, #252]	@ (8005384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	0c9b      	lsrs	r3, r3, #18
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005292:	e002      	b.n	800529a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3b01      	subs	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800529a:	4b38      	ldr	r3, [pc, #224]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a6:	d102      	bne.n	80052ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f2      	bne.n	8005294 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ae:	4b33      	ldr	r3, [pc, #204]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ba:	d158      	bne.n	800536e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e057      	b.n	8005370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052c0:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c6:	4a2d      	ldr	r2, [pc, #180]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052d0:	e04d      	b.n	800536e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d8:	d141      	bne.n	800535e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052da:	4b28      	ldr	r3, [pc, #160]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e6:	d131      	bne.n	800534c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e8:	4b24      	ldr	r3, [pc, #144]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ee:	4a23      	ldr	r2, [pc, #140]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f8:	4b20      	ldr	r3, [pc, #128]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005300:	4a1e      	ldr	r2, [pc, #120]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005308:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2232      	movs	r2, #50	@ 0x32
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	0c9b      	lsrs	r3, r3, #18
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531e:	e002      	b.n	8005326 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b01      	subs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005326:	4b15      	ldr	r3, [pc, #84]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005332:	d102      	bne.n	800533a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f2      	bne.n	8005320 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800533a:	4b10      	ldr	r3, [pc, #64]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005346:	d112      	bne.n	800536e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e011      	b.n	8005370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800534c:	4b0b      	ldr	r3, [pc, #44]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005352:	4a0a      	ldr	r2, [pc, #40]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800535c:	e007      	b.n	800536e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800535e:	4b07      	ldr	r3, [pc, #28]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005366:	4a05      	ldr	r2, [pc, #20]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800536c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	40007000 	.word	0x40007000
 8005380:	20000008 	.word	0x20000008
 8005384:	431bde83 	.word	0x431bde83

08005388 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800538c:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a04      	ldr	r2, [pc, #16]	@ (80053a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005396:	6093      	str	r3, [r2, #8]
}
 8005398:	bf00      	nop
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40007000 	.word	0x40007000

080053a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e2fe      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d075      	beq.n	80054b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c6:	4b97      	ldr	r3, [pc, #604]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d0:	4b94      	ldr	r3, [pc, #592]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b0c      	cmp	r3, #12
 80053de:	d102      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3e>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d002      	beq.n	80053ec <HAL_RCC_OscConfig+0x44>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d10b      	bne.n	8005404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	4b8d      	ldr	r3, [pc, #564]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05b      	beq.n	80054b0 <HAL_RCC_OscConfig+0x108>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d157      	bne.n	80054b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e2d9      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540c:	d106      	bne.n	800541c <HAL_RCC_OscConfig+0x74>
 800540e:	4b85      	ldr	r3, [pc, #532]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a84      	ldr	r2, [pc, #528]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e01d      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x98>
 8005426:	4b7f      	ldr	r3, [pc, #508]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7e      	ldr	r2, [pc, #504]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800542c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b7c      	ldr	r3, [pc, #496]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7b      	ldr	r2, [pc, #492]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e00b      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 8005440:	4b78      	ldr	r3, [pc, #480]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a77      	ldr	r2, [pc, #476]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	4b75      	ldr	r3, [pc, #468]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a74      	ldr	r2, [pc, #464]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d013      	beq.n	8005488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fe f936 	bl	80036d0 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005468:	f7fe f932 	bl	80036d0 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	@ 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e29e      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547a:	4b6a      	ldr	r3, [pc, #424]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0xc0>
 8005486:	e014      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005488:	f7fe f922 	bl	80036d0 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005490:	f7fe f91e 	bl	80036d0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b64      	cmp	r3, #100	@ 0x64
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e28a      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a2:	4b60      	ldr	r3, [pc, #384]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0xe8>
 80054ae:	e000      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d075      	beq.n	80055aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054be:	4b59      	ldr	r3, [pc, #356]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c8:	4b56      	ldr	r3, [pc, #344]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d102      	bne.n	80054de <HAL_RCC_OscConfig+0x136>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d002      	beq.n	80054e4 <HAL_RCC_OscConfig+0x13c>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d11f      	bne.n	8005524 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_OscConfig+0x154>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e25d      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b49      	ldr	r3, [pc, #292]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	4946      	ldr	r1, [pc, #280]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005510:	4b45      	ldr	r3, [pc, #276]	@ (8005628 <HAL_RCC_OscConfig+0x280>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fd fa95 	bl	8002a44 <HAL_InitTick>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d043      	beq.n	80055a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e249      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d023      	beq.n	8005574 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800552c:	4b3d      	ldr	r3, [pc, #244]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a3c      	ldr	r2, [pc, #240]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fe f8ca 	bl	80036d0 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005540:	f7fe f8c6 	bl	80036d0 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e232      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555e:	4b31      	ldr	r3, [pc, #196]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	492d      	ldr	r1, [pc, #180]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	604b      	str	r3, [r1, #4]
 8005572:	e01a      	b.n	80055aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005574:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800557a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800557e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fe f8a6 	bl	80036d0 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005588:	f7fe f8a2 	bl	80036d0 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e20e      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800559a:	4b22      	ldr	r3, [pc, #136]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x1e0>
 80055a6:	e000      	b.n	80055aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d041      	beq.n	800563a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01c      	beq.n	80055f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055be:	4b19      	ldr	r3, [pc, #100]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80055c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c4:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ce:	f7fe f87f 	bl	80036d0 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d6:	f7fe f87b 	bl	80036d0 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e1e7      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0ef      	beq.n	80055d6 <HAL_RCC_OscConfig+0x22e>
 80055f6:	e020      	b.n	800563a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 80055fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055fe:	4a09      	ldr	r2, [pc, #36]	@ (8005624 <HAL_RCC_OscConfig+0x27c>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fe f862 	bl	80036d0 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800560e:	e00d      	b.n	800562c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005610:	f7fe f85e 	bl	80036d0 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d906      	bls.n	800562c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e1ca      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800562c:	4b8c      	ldr	r3, [pc, #560]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 800562e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ea      	bne.n	8005610 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80a6 	beq.w	8005794 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005648:	2300      	movs	r3, #0
 800564a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800564c:	4b84      	ldr	r3, [pc, #528]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_OscConfig+0x2b4>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_RCC_OscConfig+0x2b6>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005662:	4b7f      	ldr	r3, [pc, #508]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005666:	4a7e      	ldr	r2, [pc, #504]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800566c:	6593      	str	r3, [r2, #88]	@ 0x58
 800566e:	4b7c      	ldr	r3, [pc, #496]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800567a:	2301      	movs	r3, #1
 800567c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567e:	4b79      	ldr	r3, [pc, #484]	@ (8005864 <HAL_RCC_OscConfig+0x4bc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d118      	bne.n	80056bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800568a:	4b76      	ldr	r3, [pc, #472]	@ (8005864 <HAL_RCC_OscConfig+0x4bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a75      	ldr	r2, [pc, #468]	@ (8005864 <HAL_RCC_OscConfig+0x4bc>)
 8005690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005696:	f7fe f81b 	bl	80036d0 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569e:	f7fe f817 	bl	80036d0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e183      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005864 <HAL_RCC_OscConfig+0x4bc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d108      	bne.n	80056d6 <HAL_RCC_OscConfig+0x32e>
 80056c4:	4b66      	ldr	r3, [pc, #408]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ca:	4a65      	ldr	r2, [pc, #404]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056d4:	e024      	b.n	8005720 <HAL_RCC_OscConfig+0x378>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b05      	cmp	r3, #5
 80056dc:	d110      	bne.n	8005700 <HAL_RCC_OscConfig+0x358>
 80056de:	4b60      	ldr	r3, [pc, #384]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e4:	4a5e      	ldr	r2, [pc, #376]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056fe:	e00f      	b.n	8005720 <HAL_RCC_OscConfig+0x378>
 8005700:	4b57      	ldr	r3, [pc, #348]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005706:	4a56      	ldr	r2, [pc, #344]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005710:	4b53      	ldr	r3, [pc, #332]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005716:	4a52      	ldr	r2, [pc, #328]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d016      	beq.n	8005756 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fd ffd2 	bl	80036d0 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572e:	e00a      	b.n	8005746 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005730:	f7fd ffce 	bl	80036d0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e138      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005746:	4b46      	ldr	r3, [pc, #280]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0ed      	beq.n	8005730 <HAL_RCC_OscConfig+0x388>
 8005754:	e015      	b.n	8005782 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005756:	f7fd ffbb 	bl	80036d0 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800575c:	e00a      	b.n	8005774 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575e:	f7fd ffb7 	bl	80036d0 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800576c:	4293      	cmp	r3, r2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e121      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005774:	4b3a      	ldr	r3, [pc, #232]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1ed      	bne.n	800575e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d105      	bne.n	8005794 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005788:	4b35      	ldr	r3, [pc, #212]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 800578a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578c:	4a34      	ldr	r2, [pc, #208]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 800578e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d03c      	beq.n	800581a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01c      	beq.n	80057e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80057aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fd ff8a 	bl	80036d0 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057c0:	f7fd ff86 	bl	80036d0 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e0f2      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057d2:	4b23      	ldr	r3, [pc, #140]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80057d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ef      	beq.n	80057c0 <HAL_RCC_OscConfig+0x418>
 80057e0:	e01b      	b.n	800581a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80057e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fd ff6d 	bl	80036d0 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057fa:	f7fd ff69 	bl	80036d0 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e0d5      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800580c:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 800580e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1ef      	bne.n	80057fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80c9 	beq.w	80059b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005824:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	2b0c      	cmp	r3, #12
 800582e:	f000 8083 	beq.w	8005938 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d15e      	bne.n	80058f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583a:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a08      	ldr	r2, [pc, #32]	@ (8005860 <HAL_RCC_OscConfig+0x4b8>)
 8005840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fd ff43 	bl	80036d0 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584c:	e00c      	b.n	8005868 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584e:	f7fd ff3f 	bl	80036d0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d905      	bls.n	8005868 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e0ab      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
 8005860:	40021000 	.word	0x40021000
 8005864:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005868:	4b55      	ldr	r3, [pc, #340]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ec      	bne.n	800584e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005874:	4b52      	ldr	r3, [pc, #328]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	4b52      	ldr	r3, [pc, #328]	@ (80059c4 <HAL_RCC_OscConfig+0x61c>)
 800587a:	4013      	ands	r3, r2
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6a11      	ldr	r1, [r2, #32]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005884:	3a01      	subs	r2, #1
 8005886:	0112      	lsls	r2, r2, #4
 8005888:	4311      	orrs	r1, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800588e:	0212      	lsls	r2, r2, #8
 8005890:	4311      	orrs	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	3a01      	subs	r2, #1
 800589a:	0552      	lsls	r2, r2, #21
 800589c:	4311      	orrs	r1, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058a2:	0852      	lsrs	r2, r2, #1
 80058a4:	3a01      	subs	r2, #1
 80058a6:	0652      	lsls	r2, r2, #25
 80058a8:	4311      	orrs	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058ae:	06d2      	lsls	r2, r2, #27
 80058b0:	430a      	orrs	r2, r1
 80058b2:	4943      	ldr	r1, [pc, #268]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b8:	4b41      	ldr	r3, [pc, #260]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a40      	ldr	r2, [pc, #256]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058c4:	4b3e      	ldr	r3, [pc, #248]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a3d      	ldr	r2, [pc, #244]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fd fefe 	bl	80036d0 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fd fefa 	bl	80036d0 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e066      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ea:	4b35      	ldr	r3, [pc, #212]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCC_OscConfig+0x530>
 80058f6:	e05e      	b.n	80059b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f8:	4b31      	ldr	r3, [pc, #196]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a30      	ldr	r2, [pc, #192]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 80058fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fd fee4 	bl	80036d0 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590c:	f7fd fee0 	bl	80036d0 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e04c      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800591e:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800592a:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	4924      	ldr	r1, [pc, #144]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 8005930:	4b25      	ldr	r3, [pc, #148]	@ (80059c8 <HAL_RCC_OscConfig+0x620>)
 8005932:	4013      	ands	r3, r2
 8005934:	60cb      	str	r3, [r1, #12]
 8005936:	e03e      	b.n	80059b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e039      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005944:	4b1e      	ldr	r3, [pc, #120]	@ (80059c0 <HAL_RCC_OscConfig+0x618>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0203 	and.w	r2, r3, #3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	429a      	cmp	r2, r3
 8005956:	d12c      	bne.n	80059b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	3b01      	subs	r3, #1
 8005964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d123      	bne.n	80059b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d11b      	bne.n	80059b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d113      	bne.n	80059b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	3b01      	subs	r3, #1
 8005998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	3b01      	subs	r3, #1
 80059ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d001      	beq.n	80059b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	019f800c 	.word	0x019f800c
 80059c8:	feeefffc 	.word	0xfeeefffc

080059cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e11e      	b.n	8005c22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059e4:	4b91      	ldr	r3, [pc, #580]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d910      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f2:	4b8e      	ldr	r3, [pc, #568]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 020f 	bic.w	r2, r3, #15
 80059fa:	498c      	ldr	r1, [pc, #560]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b8a      	ldr	r3, [pc, #552]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e106      	b.n	8005c22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d073      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d129      	bne.n	8005a7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a28:	4b81      	ldr	r3, [pc, #516]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0f4      	b.n	8005c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a38:	f000 f9d0 	bl	8005ddc <RCC_GetSysClockFreqFromPLLSource>
 8005a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4a7c      	ldr	r2, [pc, #496]	@ (8005c34 <HAL_RCC_ClockConfig+0x268>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d93f      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a46:	4b7a      	ldr	r3, [pc, #488]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d033      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d12f      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a66:	4b72      	ldr	r3, [pc, #456]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a6e:	4a70      	ldr	r2, [pc, #448]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a76:	2380      	movs	r3, #128	@ 0x80
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e024      	b.n	8005ac6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d107      	bne.n	8005a94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a84:	4b6a      	ldr	r3, [pc, #424]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0c6      	b.n	8005c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a94:	4b66      	ldr	r3, [pc, #408]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0be      	b.n	8005c22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005aa4:	f000 f8ce 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 8005aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4a61      	ldr	r2, [pc, #388]	@ (8005c34 <HAL_RCC_ClockConfig+0x268>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d909      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aba:	4a5d      	ldr	r2, [pc, #372]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ac2:	2380      	movs	r3, #128	@ 0x80
 8005ac4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f023 0203 	bic.w	r2, r3, #3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	4957      	ldr	r1, [pc, #348]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad8:	f7fd fdfa 	bl	80036d0 <HAL_GetTick>
 8005adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae0:	f7fd fdf6 	bl	80036d0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e095      	b.n	8005c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af6:	4b4e      	ldr	r3, [pc, #312]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 020c 	and.w	r2, r3, #12
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d1eb      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d023      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b20:	4b43      	ldr	r3, [pc, #268]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	4a42      	ldr	r2, [pc, #264]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b38:	4b3d      	ldr	r3, [pc, #244]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b40:	4a3b      	ldr	r2, [pc, #236]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b48:	4b39      	ldr	r3, [pc, #228]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4936      	ldr	r1, [pc, #216]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b80      	cmp	r3, #128	@ 0x80
 8005b60:	d105      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b62:	4b33      	ldr	r3, [pc, #204]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	4a32      	ldr	r2, [pc, #200]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005b68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d21d      	bcs.n	8005bb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f023 020f 	bic.w	r2, r3, #15
 8005b84:	4929      	ldr	r1, [pc, #164]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b8c:	f7fd fda0 	bl	80036d0 <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b94:	f7fd fd9c 	bl	80036d0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e03b      	b.n	8005c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005baa:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <HAL_RCC_ClockConfig+0x260>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1ed      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4917      	ldr	r1, [pc, #92]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005be2:	4b13      	ldr	r3, [pc, #76]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	490f      	ldr	r1, [pc, #60]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bf6:	f000 f825 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <HAL_RCC_ClockConfig+0x264>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	091b      	lsrs	r3, r3, #4
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	490c      	ldr	r1, [pc, #48]	@ (8005c38 <HAL_RCC_ClockConfig+0x26c>)
 8005c08:	5ccb      	ldrb	r3, [r1, r3]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c12:	4a0a      	ldr	r2, [pc, #40]	@ (8005c3c <HAL_RCC_ClockConfig+0x270>)
 8005c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c16:	4b0a      	ldr	r3, [pc, #40]	@ (8005c40 <HAL_RCC_ClockConfig+0x274>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fc ff12 	bl	8002a44 <HAL_InitTick>
 8005c20:	4603      	mov	r3, r0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40022000 	.word	0x40022000
 8005c30:	40021000 	.word	0x40021000
 8005c34:	04c4b400 	.word	0x04c4b400
 8005c38:	0801d964 	.word	0x0801d964
 8005c3c:	20000008 	.word	0x20000008
 8005c40:	2000000c 	.word	0x2000000c

08005c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d102      	bne.n	8005c5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c56:	4b2a      	ldr	r3, [pc, #168]	@ (8005d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	e047      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c5c:	4b27      	ldr	r3, [pc, #156]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 030c 	and.w	r3, r3, #12
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d102      	bne.n	8005c6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c68:	4b26      	ldr	r3, [pc, #152]	@ (8005d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	e03e      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c6e:	4b23      	ldr	r3, [pc, #140]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	d136      	bne.n	8005ce8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c7a:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c84:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d10c      	bne.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c98:	4a1a      	ldr	r2, [pc, #104]	@ (8005d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	4a16      	ldr	r2, [pc, #88]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca2:	68d2      	ldr	r2, [r2, #12]
 8005ca4:	0a12      	lsrs	r2, r2, #8
 8005ca6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	617b      	str	r3, [r7, #20]
      break;
 8005cb0:	e00c      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cb2:	4a13      	ldr	r2, [pc, #76]	@ (8005d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	4a10      	ldr	r2, [pc, #64]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cbc:	68d2      	ldr	r2, [r2, #12]
 8005cbe:	0a12      	lsrs	r2, r2, #8
 8005cc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cc4:	fb02 f303 	mul.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
      break;
 8005cca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0e5b      	lsrs	r3, r3, #25
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	e001      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cec:	693b      	ldr	r3, [r7, #16]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	00f42400 	.word	0x00f42400
 8005d04:	016e3600 	.word	0x016e3600

08005d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d0c:	4b03      	ldr	r3, [pc, #12]	@ (8005d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000008 	.word	0x20000008

08005d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d24:	f7ff fff0 	bl	8005d08 <HAL_RCC_GetHCLKFreq>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	4904      	ldr	r1, [pc, #16]	@ (8005d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d36:	5ccb      	ldrb	r3, [r1, r3]
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	0801d974 	.word	0x0801d974

08005d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d50:	f7ff ffda 	bl	8005d08 <HAL_RCC_GetHCLKFreq>
 8005d54:	4602      	mov	r2, r0
 8005d56:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	0adb      	lsrs	r3, r3, #11
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	4904      	ldr	r1, [pc, #16]	@ (8005d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d62:	5ccb      	ldrb	r3, [r1, r3]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40021000 	.word	0x40021000
 8005d74:	0801d974 	.word	0x0801d974

08005d78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	220f      	movs	r2, #15
 8005d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005d88:	4b12      	ldr	r3, [pc, #72]	@ (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0203 	and.w	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005d94:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005da0:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005dac:	4b09      	ldr	r3, [pc, #36]	@ (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005dba:	4b07      	ldr	r3, [pc, #28]	@ (8005dd8 <HAL_RCC_GetClockConfig+0x60>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 020f 	and.w	r2, r3, #15
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	40022000 	.word	0x40022000

08005ddc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005de2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dec:	4b1b      	ldr	r3, [pc, #108]	@ (8005e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d10c      	bne.n	8005e1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e00:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	4a14      	ldr	r2, [pc, #80]	@ (8005e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e0a:	68d2      	ldr	r2, [r2, #12]
 8005e0c:	0a12      	lsrs	r2, r2, #8
 8005e0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	617b      	str	r3, [r7, #20]
    break;
 8005e18:	e00c      	b.n	8005e34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e1a:	4a12      	ldr	r2, [pc, #72]	@ (8005e64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e22:	4a0e      	ldr	r2, [pc, #56]	@ (8005e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e24:	68d2      	ldr	r2, [r2, #12]
 8005e26:	0a12      	lsrs	r2, r2, #8
 8005e28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e2c:	fb02 f303 	mul.w	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]
    break;
 8005e32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e34:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	0e5b      	lsrs	r3, r3, #25
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	3301      	adds	r3, #1
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e4e:	687b      	ldr	r3, [r7, #4]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	016e3600 	.word	0x016e3600
 8005e64:	00f42400 	.word	0x00f42400

08005e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e70:	2300      	movs	r3, #0
 8005e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e74:	2300      	movs	r3, #0
 8005e76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8098 	beq.w	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e86:	2300      	movs	r3, #0
 8005e88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8a:	4b43      	ldr	r3, [pc, #268]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10d      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e96:	4b40      	ldr	r3, [pc, #256]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a39      	ldr	r2, [pc, #228]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ebc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ebe:	f7fd fc07 	bl	80036d0 <HAL_GetTick>
 8005ec2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ec4:	e009      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7fd fc03 	bl	80036d0 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d902      	bls.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	74fb      	strb	r3, [r7, #19]
        break;
 8005ed8:	e005      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eda:	4b30      	ldr	r3, [pc, #192]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0ef      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d159      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eec:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01e      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d019      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f08:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f14:	4b20      	ldr	r3, [pc, #128]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f24:	4b1c      	ldr	r3, [pc, #112]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f34:	4a18      	ldr	r2, [pc, #96]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fd fbc3 	bl	80036d0 <HAL_GetTick>
 8005f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f4c:	e00b      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4e:	f7fd fbbf 	bl	80036d0 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d902      	bls.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	74fb      	strb	r3, [r7, #19]
            break;
 8005f64:	e006      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f66:	4b0c      	ldr	r3, [pc, #48]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0ec      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10b      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f7a:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f88:	4903      	ldr	r1, [pc, #12]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f90:	e008      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	74bb      	strb	r3, [r7, #18]
 8005f96:	e005      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	7cfb      	ldrb	r3, [r7, #19]
 8005fa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa4:	7c7b      	ldrb	r3, [r7, #17]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d105      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005faa:	4ba7      	ldr	r3, [pc, #668]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fae:	4aa6      	ldr	r2, [pc, #664]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fb4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fc2:	4ba1      	ldr	r3, [pc, #644]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	f023 0203 	bic.w	r2, r3, #3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	499d      	ldr	r1, [pc, #628]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fe4:	4b98      	ldr	r3, [pc, #608]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fea:	f023 020c 	bic.w	r2, r3, #12
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4995      	ldr	r1, [pc, #596]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006006:	4b90      	ldr	r3, [pc, #576]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	498c      	ldr	r1, [pc, #560]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006028:	4b87      	ldr	r3, [pc, #540]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	4984      	ldr	r1, [pc, #528]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800604a:	4b7f      	ldr	r3, [pc, #508]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006050:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	497b      	ldr	r1, [pc, #492]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800606c:	4b76      	ldr	r3, [pc, #472]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006072:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	4973      	ldr	r1, [pc, #460]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800608e:	4b6e      	ldr	r3, [pc, #440]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	496a      	ldr	r1, [pc, #424]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060b0:	4b65      	ldr	r3, [pc, #404]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4962      	ldr	r1, [pc, #392]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	4959      	ldr	r1, [pc, #356]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060f4:	4b54      	ldr	r3, [pc, #336]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060fa:	f023 0203 	bic.w	r2, r3, #3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	4951      	ldr	r1, [pc, #324]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006116:	4b4c      	ldr	r3, [pc, #304]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	4948      	ldr	r1, [pc, #288]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006138:	4b43      	ldr	r3, [pc, #268]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	4940      	ldr	r1, [pc, #256]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006156:	d105      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006158:	4b3b      	ldr	r3, [pc, #236]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a3a      	ldr	r2, [pc, #232]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006162:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800616c:	2b00      	cmp	r3, #0
 800616e:	d015      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006170:	4b35      	ldr	r3, [pc, #212]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006176:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617e:	4932      	ldr	r1, [pc, #200]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800618e:	d105      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006190:	4b2d      	ldr	r3, [pc, #180]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4a2c      	ldr	r2, [pc, #176]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800619a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061a8:	4b27      	ldr	r3, [pc, #156]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b6:	4924      	ldr	r1, [pc, #144]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061c6:	d105      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d015      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061e0:	4b19      	ldr	r3, [pc, #100]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	4916      	ldr	r1, [pc, #88]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061fe:	d105      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006200:	4b11      	ldr	r3, [pc, #68]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4a10      	ldr	r2, [pc, #64]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800620a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d019      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006218:	4b0b      	ldr	r3, [pc, #44]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006226:	4908      	ldr	r1, [pc, #32]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006236:	d109      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a02      	ldr	r2, [pc, #8]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006242:	60d3      	str	r3, [r2, #12]
 8006244:	e002      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d015      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006258:	4b29      	ldr	r3, [pc, #164]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	4926      	ldr	r1, [pc, #152]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006276:	d105      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006278:	4b21      	ldr	r3, [pc, #132]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4a20      	ldr	r2, [pc, #128]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800627e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006282:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d015      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006290:	4b1b      	ldr	r3, [pc, #108]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006296:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800629e:	4918      	ldr	r1, [pc, #96]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ae:	d105      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062b0:	4b13      	ldr	r3, [pc, #76]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4a12      	ldr	r2, [pc, #72]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d015      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d6:	490a      	ldr	r1, [pc, #40]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062e6:	d105      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e8:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a04      	ldr	r2, [pc, #16]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80062f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	40021000 	.word	0x40021000

08006304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e049      	b.n	80063aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f841 	bl	80063b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f000 fa30 	bl	80067a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d001      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e054      	b.n	800648a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a26      	ldr	r2, [pc, #152]	@ (8006498 <HAL_TIM_Base_Start_IT+0xd0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640a:	d01d      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a22      	ldr	r2, [pc, #136]	@ (800649c <HAL_TIM_Base_Start_IT+0xd4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <HAL_TIM_Base_Start_IT+0xe4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	@ (80064b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d115      	bne.n	8006474 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	4b19      	ldr	r3, [pc, #100]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xec>)
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b06      	cmp	r3, #6
 8006458:	d015      	beq.n	8006486 <HAL_TIM_Base_Start_IT+0xbe>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006460:	d011      	beq.n	8006486 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	e008      	b.n	8006486 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e000      	b.n	8006488 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40015000 	.word	0x40015000
 80064b4:	00010007 	.word	0x00010007

080064b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d020      	beq.n	800651c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01b      	beq.n	800651c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0202 	mvn.w	r2, #2
 80064ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f931 	bl	800676a <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f923 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f934 	bl	800677e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d020      	beq.n	8006568 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0204 	mvn.w	r2, #4
 8006538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f90b 	bl	800676a <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8fd 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f90e 	bl	800677e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d020      	beq.n	80065b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0208 	mvn.w	r2, #8
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f8e5 	bl	800676a <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8d7 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f8e8 	bl	800677e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d020      	beq.n	8006600 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01b      	beq.n	8006600 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0210 	mvn.w	r2, #16
 80065d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2208      	movs	r2, #8
 80065d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8bf 	bl	800676a <HAL_TIM_IC_CaptureCallback>
 80065ec:	e005      	b.n	80065fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f8b1 	bl	8006756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f8c2 	bl	800677e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0201 	mvn.w	r2, #1
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fc f892 	bl	8002748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800664a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f969 	bl	8006924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00c      	beq.n	8006676 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800666e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f961 	bl	8006938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00c      	beq.n	800669a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f87c 	bl	8006792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f06f 0220 	mvn.w	r2, #32
 80066b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f929 	bl	8006910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00c      	beq.n	80066e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80066da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f935 	bl	800694c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00c      	beq.n	8006706 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80066fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f92d 	bl	8006960 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00c      	beq.n	800672a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f925 	bl	8006974 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00c      	beq.n	800674e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f91d 	bl	8006988 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a4c      	ldr	r2, [pc, #304]	@ (80068ec <TIM_Base_SetConfig+0x144>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d017      	beq.n	80067f0 <TIM_Base_SetConfig+0x48>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c6:	d013      	beq.n	80067f0 <TIM_Base_SetConfig+0x48>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a49      	ldr	r2, [pc, #292]	@ (80068f0 <TIM_Base_SetConfig+0x148>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x48>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a48      	ldr	r2, [pc, #288]	@ (80068f4 <TIM_Base_SetConfig+0x14c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x48>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a47      	ldr	r2, [pc, #284]	@ (80068f8 <TIM_Base_SetConfig+0x150>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x48>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a46      	ldr	r2, [pc, #280]	@ (80068fc <TIM_Base_SetConfig+0x154>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x48>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a45      	ldr	r2, [pc, #276]	@ (8006900 <TIM_Base_SetConfig+0x158>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d108      	bne.n	8006802 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a39      	ldr	r2, [pc, #228]	@ (80068ec <TIM_Base_SetConfig+0x144>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d023      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006810:	d01f      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a36      	ldr	r2, [pc, #216]	@ (80068f0 <TIM_Base_SetConfig+0x148>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01b      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a35      	ldr	r2, [pc, #212]	@ (80068f4 <TIM_Base_SetConfig+0x14c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d017      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a34      	ldr	r2, [pc, #208]	@ (80068f8 <TIM_Base_SetConfig+0x150>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a33      	ldr	r2, [pc, #204]	@ (80068fc <TIM_Base_SetConfig+0x154>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a33      	ldr	r2, [pc, #204]	@ (8006904 <TIM_Base_SetConfig+0x15c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a32      	ldr	r2, [pc, #200]	@ (8006908 <TIM_Base_SetConfig+0x160>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a31      	ldr	r2, [pc, #196]	@ (800690c <TIM_Base_SetConfig+0x164>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0xaa>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2c      	ldr	r2, [pc, #176]	@ (8006900 <TIM_Base_SetConfig+0x158>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <TIM_Base_SetConfig+0x144>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <TIM_Base_SetConfig+0x110>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1a      	ldr	r2, [pc, #104]	@ (80068fc <TIM_Base_SetConfig+0x154>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_Base_SetConfig+0x110>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1a      	ldr	r2, [pc, #104]	@ (8006904 <TIM_Base_SetConfig+0x15c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_Base_SetConfig+0x110>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a19      	ldr	r2, [pc, #100]	@ (8006908 <TIM_Base_SetConfig+0x160>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_Base_SetConfig+0x110>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a18      	ldr	r2, [pc, #96]	@ (800690c <TIM_Base_SetConfig+0x164>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0x110>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a13      	ldr	r2, [pc, #76]	@ (8006900 <TIM_Base_SetConfig+0x158>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d103      	bne.n	80068c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d105      	bne.n	80068de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f023 0201 	bic.w	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	611a      	str	r2, [r3, #16]
  }
}
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40012c00 	.word	0x40012c00
 80068f0:	40000400 	.word	0x40000400
 80068f4:	40000800 	.word	0x40000800
 80068f8:	40000c00 	.word	0x40000c00
 80068fc:	40013400 	.word	0x40013400
 8006900:	40015000 	.word	0x40015000
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e042      	b.n	8006a34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d106      	bne.n	80069c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fb ff81 	bl	80028c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2224      	movs	r2, #36	@ 0x24
 80069ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f806 	bl	80079f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fd07 	bl	8007400 <UART_SetConfig>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e01b      	b.n	8006a34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f885 	bl	8007b3c <UART_CheckIdleState>
 8006a32:	4603      	mov	r3, r0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	@ 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d167      	bne.n	8006b24 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_UART_Transmit_DMA+0x24>
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e060      	b.n	8006b26 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2221      	movs	r2, #33	@ 0x21
 8006a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d028      	beq.n	8006ae4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a96:	4a26      	ldr	r2, [pc, #152]	@ (8006b30 <HAL_UART_Transmit_DMA+0xf4>)
 8006a98:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a9e:	4a25      	ldr	r2, [pc, #148]	@ (8006b34 <HAL_UART_Transmit_DMA+0xf8>)
 8006aa0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa6:	4a24      	ldr	r2, [pc, #144]	@ (8006b38 <HAL_UART_Transmit_DMA+0xfc>)
 8006aa8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aae:	2200      	movs	r2, #0
 8006ab0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aba:	4619      	mov	r1, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3328      	adds	r3, #40	@ 0x28
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	f7fc ff97 	bl	80039f8 <HAL_DMA_Start_IT>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d009      	beq.n	8006ae4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e020      	b.n	8006b26 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2240      	movs	r2, #64	@ 0x40
 8006aea:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	613b      	str	r3, [r7, #16]
   return(result);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0c:	623a      	str	r2, [r7, #32]
 8006b0e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	69f9      	ldr	r1, [r7, #28]
 8006b12:	6a3a      	ldr	r2, [r7, #32]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	e000      	b.n	8006b26 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006b24:	2302      	movs	r3, #2
  }
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3728      	adds	r7, #40	@ 0x28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	08008007 	.word	0x08008007
 8006b34:	080080a1 	.word	0x080080a1
 8006b38:	08008227 	.word	0x08008227

08006b3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	@ 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d137      	bne.n	8006bc4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_UART_Receive_DMA+0x24>
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e030      	b.n	8006bc6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a18      	ldr	r2, [pc, #96]	@ (8006bd0 <HAL_UART_Receive_DMA+0x94>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01f      	beq.n	8006bb4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	623b      	str	r3, [r7, #32]
 8006ba2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	69f9      	ldr	r1, [r7, #28]
 8006ba6:	6a3a      	ldr	r2, [r7, #32]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f001 f8d6 	bl	8007d6c <UART_Start_Receive_DMA>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3728      	adds	r7, #40	@ 0x28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40008000 	.word	0x40008000

08006bd4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b090      	sub	sp, #64	@ 0x40
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf6:	2b80      	cmp	r3, #128	@ 0x80
 8006bf8:	d139      	bne.n	8006c6e <HAL_UART_DMAStop+0x9a>
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bfc:	2b21      	cmp	r3, #33	@ 0x21
 8006bfe:	d136      	bne.n	8006c6e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e5      	bne.n	8006c00 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d015      	beq.n	8006c68 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fc ff54 	bl	8003aee <HAL_DMA_Abort>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fd f8bb 	bl	8003dcc <HAL_DMA_GetError>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d105      	bne.n	8006c68 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2210      	movs	r2, #16
 8006c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e047      	b.n	8006cf8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f925 	bl	8007eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c78:	2b40      	cmp	r3, #64	@ 0x40
 8006c7a:	d13c      	bne.n	8006cf6 <HAL_UART_DMAStop+0x122>
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	2b22      	cmp	r3, #34	@ 0x22
 8006c80:	d139      	bne.n	8006cf6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3308      	adds	r3, #8
 8006c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca2:	61ba      	str	r2, [r7, #24]
 8006ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e5      	bne.n	8006c82 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fc ff11 	bl	8003aee <HAL_DMA_Abort>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fd f877 	bl	8003dcc <HAL_DMA_GetError>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d105      	bne.n	8006cf0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2210      	movs	r2, #16
 8006ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e003      	b.n	8006cf8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f922 	bl	8007f3a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3740      	adds	r7, #64	@ 0x40
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b0ba      	sub	sp, #232	@ 0xe8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006d2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006d2e:	4013      	ands	r3, r2
 8006d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d11b      	bne.n	8006d74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d015      	beq.n	8006d74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d105      	bne.n	8006d60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8300 	beq.w	800736a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
      }
      return;
 8006d72:	e2fa      	b.n	800736a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8123 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d82:	4b8d      	ldr	r3, [pc, #564]	@ (8006fb8 <HAL_UART_IRQHandler+0x2b8>)
 8006d84:	4013      	ands	r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d8e:	4b8b      	ldr	r3, [pc, #556]	@ (8006fbc <HAL_UART_IRQHandler+0x2bc>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 8116 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <HAL_UART_IRQHandler+0xc8>
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2201      	movs	r2, #1
 8006db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbe:	f043 0201 	orr.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d011      	beq.n	8006df8 <HAL_UART_IRQHandler+0xf8>
 8006dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2202      	movs	r2, #2
 8006de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d011      	beq.n	8006e28 <HAL_UART_IRQHandler+0x128>
 8006e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2204      	movs	r2, #4
 8006e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1e:	f043 0202 	orr.w	r2, r3, #2
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d017      	beq.n	8006e64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e44:	4b5c      	ldr	r3, [pc, #368]	@ (8006fb8 <HAL_UART_IRQHandler+0x2b8>)
 8006e46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5a:	f043 0208 	orr.w	r2, r3, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d012      	beq.n	8006e96 <HAL_UART_IRQHandler+0x196>
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00c      	beq.n	8006e96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e8c:	f043 0220 	orr.w	r2, r3, #32
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8266 	beq.w	800736e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d013      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006edc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d005      	beq.n	8006efa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ef2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d054      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f81d 	bl	8007f3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f0a:	2b40      	cmp	r3, #64	@ 0x40
 8006f0c:	d146      	bne.n	8006f9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1d9      	bne.n	8006f0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d017      	beq.n	8006f94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f6a:	4a15      	ldr	r2, [pc, #84]	@ (8006fc0 <HAL_UART_IRQHandler+0x2c0>)
 8006f6c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fc fe13 	bl	8003ba0 <HAL_DMA_Abort_IT>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d019      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006f8e:	4610      	mov	r0, r2
 8006f90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f92:	e00f      	b.n	8006fb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa1d 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9a:	e00b      	b.n	8006fb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa19 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa2:	e007      	b.n	8006fb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa15 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006fb2:	e1dc      	b.n	800736e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	bf00      	nop
    return;
 8006fb6:	e1da      	b.n	800736e <HAL_UART_IRQHandler+0x66e>
 8006fb8:	10000001 	.word	0x10000001
 8006fbc:	04000120 	.word	0x04000120
 8006fc0:	080082a7 	.word	0x080082a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	f040 8170 	bne.w	80072ae <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8169 	beq.w	80072ae <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8162 	beq.w	80072ae <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2210      	movs	r2, #16
 8006ff0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	f040 80d8 	bne.w	80071b2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80af 	beq.w	8007178 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007020:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007024:	429a      	cmp	r2, r3
 8007026:	f080 80a7 	bcs.w	8007178 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007030:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	f040 8087 	bne.w	8007156 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800705c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007072:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007076:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800707e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800708a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1da      	bne.n	8007048 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e1      	bne.n	8007092 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3308      	adds	r3, #8
 80070ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e3      	bne.n	80070ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007124:	f023 0310 	bic.w	r3, r3, #16
 8007128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007136:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007138:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800713c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e4      	bne.n	8007114 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007150:	4618      	mov	r0, r3
 8007152:	f7fc fccc 	bl	8003aee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007168:	b29b      	uxth	r3, r3
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	b29b      	uxth	r3, r3
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f939 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007176:	e0fc      	b.n	8007372 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800717e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007182:	429a      	cmp	r2, r3
 8007184:	f040 80f5 	bne.w	8007372 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b20      	cmp	r3, #32
 8007198:	f040 80eb 	bne.w	8007372 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f91c 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
      return;
 80071b0:	e0df      	b.n	8007372 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071be:	b29b      	uxth	r3, r3
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 80d1 	beq.w	8007376 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80071d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80cc 	beq.w	8007376 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007200:	647b      	str	r3, [r7, #68]	@ 0x44
 8007202:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800720e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e4      	bne.n	80071de <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	623b      	str	r3, [r7, #32]
   return(result);
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800722a:	f023 0301 	bic.w	r3, r3, #1
 800722e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800723c:	633a      	str	r2, [r7, #48]	@ 0x30
 800723e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e1      	bne.n	8007214 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	60fb      	str	r3, [r7, #12]
   return(result);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f023 0310 	bic.w	r3, r3, #16
 8007278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	69b9      	ldr	r1, [r7, #24]
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	617b      	str	r3, [r7, #20]
   return(result);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e4      	bne.n	8007264 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f89e 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072ac:	e063      	b.n	8007376 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00e      	beq.n	80072d8 <HAL_UART_IRQHandler+0x5d8>
 80072ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80072ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f825 	bl	8008320 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072d6:	e051      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d014      	beq.n	800730e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d105      	bne.n	80072fc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007300:	2b00      	cmp	r3, #0
 8007302:	d03a      	beq.n	800737a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4798      	blx	r3
    }
    return;
 800730c:	e035      	b.n	800737a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_UART_IRQHandler+0x62e>
 800731a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800731e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ffcf 	bl	80082ca <UART_EndTransmit_IT>
    return;
 800732c:	e026      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800732e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <HAL_UART_IRQHandler+0x64e>
 800733a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800733e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fffe 	bl	8008348 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800734c:	e016      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d010      	beq.n	800737c <HAL_UART_IRQHandler+0x67c>
 800735a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735e:	2b00      	cmp	r3, #0
 8007360:	da0c      	bge.n	800737c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 ffe6 	bl	8008334 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007368:	e008      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
      return;
 800736a:	bf00      	nop
 800736c:	e006      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
    return;
 800736e:	bf00      	nop
 8007370:	e004      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
      return;
 8007372:	bf00      	nop
 8007374:	e002      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
      return;
 8007376:	bf00      	nop
 8007378:	e000      	b.n	800737c <HAL_UART_IRQHandler+0x67c>
    return;
 800737a:	bf00      	nop
  }
}
 800737c:	37e8      	adds	r7, #232	@ 0xe8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop

08007384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007404:	b08c      	sub	sp, #48	@ 0x30
 8007406:	af00      	add	r7, sp, #0
 8007408:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	431a      	orrs	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	431a      	orrs	r2, r3
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4313      	orrs	r3, r2
 8007426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4baa      	ldr	r3, [pc, #680]	@ (80076d8 <UART_SetConfig+0x2d8>)
 8007430:	4013      	ands	r3, r2
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007438:	430b      	orrs	r3, r1
 800743a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a9f      	ldr	r2, [pc, #636]	@ (80076dc <UART_SetConfig+0x2dc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007468:	4313      	orrs	r3, r2
 800746a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007476:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007480:	430b      	orrs	r3, r1
 8007482:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	f023 010f 	bic.w	r1, r3, #15
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a90      	ldr	r2, [pc, #576]	@ (80076e0 <UART_SetConfig+0x2e0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d125      	bne.n	80074f0 <UART_SetConfig+0xf0>
 80074a4:	4b8f      	ldr	r3, [pc, #572]	@ (80076e4 <UART_SetConfig+0x2e4>)
 80074a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d81a      	bhi.n	80074e8 <UART_SetConfig+0xe8>
 80074b2:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <UART_SetConfig+0xb8>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	080074c9 	.word	0x080074c9
 80074bc:	080074d9 	.word	0x080074d9
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074e1 	.word	0x080074e1
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ce:	e116      	b.n	80076fe <UART_SetConfig+0x2fe>
 80074d0:	2302      	movs	r3, #2
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d6:	e112      	b.n	80076fe <UART_SetConfig+0x2fe>
 80074d8:	2304      	movs	r3, #4
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074de:	e10e      	b.n	80076fe <UART_SetConfig+0x2fe>
 80074e0:	2308      	movs	r3, #8
 80074e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e6:	e10a      	b.n	80076fe <UART_SetConfig+0x2fe>
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ee:	e106      	b.n	80076fe <UART_SetConfig+0x2fe>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a7c      	ldr	r2, [pc, #496]	@ (80076e8 <UART_SetConfig+0x2e8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d138      	bne.n	800756c <UART_SetConfig+0x16c>
 80074fa:	4b7a      	ldr	r3, [pc, #488]	@ (80076e4 <UART_SetConfig+0x2e4>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	f003 030c 	and.w	r3, r3, #12
 8007504:	2b0c      	cmp	r3, #12
 8007506:	d82d      	bhi.n	8007564 <UART_SetConfig+0x164>
 8007508:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <UART_SetConfig+0x110>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007545 	.word	0x08007545
 8007514:	08007565 	.word	0x08007565
 8007518:	08007565 	.word	0x08007565
 800751c:	08007565 	.word	0x08007565
 8007520:	08007555 	.word	0x08007555
 8007524:	08007565 	.word	0x08007565
 8007528:	08007565 	.word	0x08007565
 800752c:	08007565 	.word	0x08007565
 8007530:	0800754d 	.word	0x0800754d
 8007534:	08007565 	.word	0x08007565
 8007538:	08007565 	.word	0x08007565
 800753c:	08007565 	.word	0x08007565
 8007540:	0800755d 	.word	0x0800755d
 8007544:	2300      	movs	r3, #0
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754a:	e0d8      	b.n	80076fe <UART_SetConfig+0x2fe>
 800754c:	2302      	movs	r3, #2
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007552:	e0d4      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800755a:	e0d0      	b.n	80076fe <UART_SetConfig+0x2fe>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007562:	e0cc      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800756a:	e0c8      	b.n	80076fe <UART_SetConfig+0x2fe>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a5e      	ldr	r2, [pc, #376]	@ (80076ec <UART_SetConfig+0x2ec>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d125      	bne.n	80075c2 <UART_SetConfig+0x1c2>
 8007576:	4b5b      	ldr	r3, [pc, #364]	@ (80076e4 <UART_SetConfig+0x2e4>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007580:	2b30      	cmp	r3, #48	@ 0x30
 8007582:	d016      	beq.n	80075b2 <UART_SetConfig+0x1b2>
 8007584:	2b30      	cmp	r3, #48	@ 0x30
 8007586:	d818      	bhi.n	80075ba <UART_SetConfig+0x1ba>
 8007588:	2b20      	cmp	r3, #32
 800758a:	d00a      	beq.n	80075a2 <UART_SetConfig+0x1a2>
 800758c:	2b20      	cmp	r3, #32
 800758e:	d814      	bhi.n	80075ba <UART_SetConfig+0x1ba>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <UART_SetConfig+0x19a>
 8007594:	2b10      	cmp	r3, #16
 8007596:	d008      	beq.n	80075aa <UART_SetConfig+0x1aa>
 8007598:	e00f      	b.n	80075ba <UART_SetConfig+0x1ba>
 800759a:	2300      	movs	r3, #0
 800759c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a0:	e0ad      	b.n	80076fe <UART_SetConfig+0x2fe>
 80075a2:	2302      	movs	r3, #2
 80075a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a8:	e0a9      	b.n	80076fe <UART_SetConfig+0x2fe>
 80075aa:	2304      	movs	r3, #4
 80075ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075b0:	e0a5      	b.n	80076fe <UART_SetConfig+0x2fe>
 80075b2:	2308      	movs	r3, #8
 80075b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075b8:	e0a1      	b.n	80076fe <UART_SetConfig+0x2fe>
 80075ba:	2310      	movs	r3, #16
 80075bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c0:	e09d      	b.n	80076fe <UART_SetConfig+0x2fe>
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a4a      	ldr	r2, [pc, #296]	@ (80076f0 <UART_SetConfig+0x2f0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d125      	bne.n	8007618 <UART_SetConfig+0x218>
 80075cc:	4b45      	ldr	r3, [pc, #276]	@ (80076e4 <UART_SetConfig+0x2e4>)
 80075ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80075d8:	d016      	beq.n	8007608 <UART_SetConfig+0x208>
 80075da:	2bc0      	cmp	r3, #192	@ 0xc0
 80075dc:	d818      	bhi.n	8007610 <UART_SetConfig+0x210>
 80075de:	2b80      	cmp	r3, #128	@ 0x80
 80075e0:	d00a      	beq.n	80075f8 <UART_SetConfig+0x1f8>
 80075e2:	2b80      	cmp	r3, #128	@ 0x80
 80075e4:	d814      	bhi.n	8007610 <UART_SetConfig+0x210>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <UART_SetConfig+0x1f0>
 80075ea:	2b40      	cmp	r3, #64	@ 0x40
 80075ec:	d008      	beq.n	8007600 <UART_SetConfig+0x200>
 80075ee:	e00f      	b.n	8007610 <UART_SetConfig+0x210>
 80075f0:	2300      	movs	r3, #0
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f6:	e082      	b.n	80076fe <UART_SetConfig+0x2fe>
 80075f8:	2302      	movs	r3, #2
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fe:	e07e      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007600:	2304      	movs	r3, #4
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007606:	e07a      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007608:	2308      	movs	r3, #8
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800760e:	e076      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007610:	2310      	movs	r3, #16
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007616:	e072      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a35      	ldr	r2, [pc, #212]	@ (80076f4 <UART_SetConfig+0x2f4>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d12a      	bne.n	8007678 <UART_SetConfig+0x278>
 8007622:	4b30      	ldr	r3, [pc, #192]	@ (80076e4 <UART_SetConfig+0x2e4>)
 8007624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007630:	d01a      	beq.n	8007668 <UART_SetConfig+0x268>
 8007632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007636:	d81b      	bhi.n	8007670 <UART_SetConfig+0x270>
 8007638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800763c:	d00c      	beq.n	8007658 <UART_SetConfig+0x258>
 800763e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007642:	d815      	bhi.n	8007670 <UART_SetConfig+0x270>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <UART_SetConfig+0x250>
 8007648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800764c:	d008      	beq.n	8007660 <UART_SetConfig+0x260>
 800764e:	e00f      	b.n	8007670 <UART_SetConfig+0x270>
 8007650:	2300      	movs	r3, #0
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007656:	e052      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007658:	2302      	movs	r3, #2
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765e:	e04e      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007660:	2304      	movs	r3, #4
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007666:	e04a      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007668:	2308      	movs	r3, #8
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766e:	e046      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007670:	2310      	movs	r3, #16
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007676:	e042      	b.n	80076fe <UART_SetConfig+0x2fe>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a17      	ldr	r2, [pc, #92]	@ (80076dc <UART_SetConfig+0x2dc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d13a      	bne.n	80076f8 <UART_SetConfig+0x2f8>
 8007682:	4b18      	ldr	r3, [pc, #96]	@ (80076e4 <UART_SetConfig+0x2e4>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800768c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007690:	d01a      	beq.n	80076c8 <UART_SetConfig+0x2c8>
 8007692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007696:	d81b      	bhi.n	80076d0 <UART_SetConfig+0x2d0>
 8007698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800769c:	d00c      	beq.n	80076b8 <UART_SetConfig+0x2b8>
 800769e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a2:	d815      	bhi.n	80076d0 <UART_SetConfig+0x2d0>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <UART_SetConfig+0x2b0>
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ac:	d008      	beq.n	80076c0 <UART_SetConfig+0x2c0>
 80076ae:	e00f      	b.n	80076d0 <UART_SetConfig+0x2d0>
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b6:	e022      	b.n	80076fe <UART_SetConfig+0x2fe>
 80076b8:	2302      	movs	r3, #2
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076be:	e01e      	b.n	80076fe <UART_SetConfig+0x2fe>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c6:	e01a      	b.n	80076fe <UART_SetConfig+0x2fe>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ce:	e016      	b.n	80076fe <UART_SetConfig+0x2fe>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e012      	b.n	80076fe <UART_SetConfig+0x2fe>
 80076d8:	cfff69f3 	.word	0xcfff69f3
 80076dc:	40008000 	.word	0x40008000
 80076e0:	40013800 	.word	0x40013800
 80076e4:	40021000 	.word	0x40021000
 80076e8:	40004400 	.word	0x40004400
 80076ec:	40004800 	.word	0x40004800
 80076f0:	40004c00 	.word	0x40004c00
 80076f4:	40005000 	.word	0x40005000
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4aae      	ldr	r2, [pc, #696]	@ (80079bc <UART_SetConfig+0x5bc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	f040 8097 	bne.w	8007838 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800770a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800770e:	2b08      	cmp	r3, #8
 8007710:	d823      	bhi.n	800775a <UART_SetConfig+0x35a>
 8007712:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <UART_SetConfig+0x318>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800773d 	.word	0x0800773d
 800771c:	0800775b 	.word	0x0800775b
 8007720:	08007745 	.word	0x08007745
 8007724:	0800775b 	.word	0x0800775b
 8007728:	0800774b 	.word	0x0800774b
 800772c:	0800775b 	.word	0x0800775b
 8007730:	0800775b 	.word	0x0800775b
 8007734:	0800775b 	.word	0x0800775b
 8007738:	08007753 	.word	0x08007753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800773c:	f7fe faf0 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007742:	e010      	b.n	8007766 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007744:	4b9e      	ldr	r3, [pc, #632]	@ (80079c0 <UART_SetConfig+0x5c0>)
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007748:	e00d      	b.n	8007766 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800774a:	f7fe fa7b 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 800774e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007750:	e009      	b.n	8007766 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007758:	e005      	b.n	8007766 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007764:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8130 	beq.w	80079ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	4a94      	ldr	r2, [pc, #592]	@ (80079c4 <UART_SetConfig+0x5c4>)
 8007774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007778:	461a      	mov	r2, r3
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007780:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	4413      	add	r3, r2
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	429a      	cmp	r2, r3
 8007790:	d305      	bcc.n	800779e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	429a      	cmp	r2, r3
 800779c:	d903      	bls.n	80077a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077a4:	e113      	b.n	80079ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	2200      	movs	r2, #0
 80077aa:	60bb      	str	r3, [r7, #8]
 80077ac:	60fa      	str	r2, [r7, #12]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b2:	4a84      	ldr	r2, [pc, #528]	@ (80079c4 <UART_SetConfig+0x5c4>)
 80077b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2200      	movs	r2, #0
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077c8:	f7f9 fa9e 	bl	8000d08 <__aeabi_uldivmod>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	020b      	lsls	r3, r1, #8
 80077de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077e2:	0202      	lsls	r2, r0, #8
 80077e4:	6979      	ldr	r1, [r7, #20]
 80077e6:	6849      	ldr	r1, [r1, #4]
 80077e8:	0849      	lsrs	r1, r1, #1
 80077ea:	2000      	movs	r0, #0
 80077ec:	460c      	mov	r4, r1
 80077ee:	4605      	mov	r5, r0
 80077f0:	eb12 0804 	adds.w	r8, r2, r4
 80077f4:	eb43 0905 	adc.w	r9, r3, r5
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	469a      	mov	sl, r3
 8007800:	4693      	mov	fp, r2
 8007802:	4652      	mov	r2, sl
 8007804:	465b      	mov	r3, fp
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	f7f9 fa7d 	bl	8000d08 <__aeabi_uldivmod>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4613      	mov	r3, r2
 8007814:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800781c:	d308      	bcc.n	8007830 <UART_SetConfig+0x430>
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007824:	d204      	bcs.n	8007830 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6a3a      	ldr	r2, [r7, #32]
 800782c:	60da      	str	r2, [r3, #12]
 800782e:	e0ce      	b.n	80079ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007836:	e0ca      	b.n	80079ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007840:	d166      	bne.n	8007910 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007842:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007846:	2b08      	cmp	r3, #8
 8007848:	d827      	bhi.n	800789a <UART_SetConfig+0x49a>
 800784a:	a201      	add	r2, pc, #4	@ (adr r2, 8007850 <UART_SetConfig+0x450>)
 800784c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007850:	08007875 	.word	0x08007875
 8007854:	0800787d 	.word	0x0800787d
 8007858:	08007885 	.word	0x08007885
 800785c:	0800789b 	.word	0x0800789b
 8007860:	0800788b 	.word	0x0800788b
 8007864:	0800789b 	.word	0x0800789b
 8007868:	0800789b 	.word	0x0800789b
 800786c:	0800789b 	.word	0x0800789b
 8007870:	08007893 	.word	0x08007893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007874:	f7fe fa54 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800787a:	e014      	b.n	80078a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800787c:	f7fe fa66 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8007880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007882:	e010      	b.n	80078a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007884:	4b4e      	ldr	r3, [pc, #312]	@ (80079c0 <UART_SetConfig+0x5c0>)
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007888:	e00d      	b.n	80078a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800788a:	f7fe f9db 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 800788e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007890:	e009      	b.n	80078a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007898:	e005      	b.n	80078a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8090 	beq.w	80079ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b2:	4a44      	ldr	r2, [pc, #272]	@ (80079c4 <UART_SetConfig+0x5c4>)
 80078b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c0:	005a      	lsls	r2, r3, #1
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	441a      	add	r2, r3
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	2b0f      	cmp	r3, #15
 80078d8:	d916      	bls.n	8007908 <UART_SetConfig+0x508>
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e0:	d212      	bcs.n	8007908 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f023 030f 	bic.w	r3, r3, #15
 80078ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	8bfb      	ldrh	r3, [r7, #30]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	8bfa      	ldrh	r2, [r7, #30]
 8007904:	60da      	str	r2, [r3, #12]
 8007906:	e062      	b.n	80079ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800790e:	e05e      	b.n	80079ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007910:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007914:	2b08      	cmp	r3, #8
 8007916:	d828      	bhi.n	800796a <UART_SetConfig+0x56a>
 8007918:	a201      	add	r2, pc, #4	@ (adr r2, 8007920 <UART_SetConfig+0x520>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007945 	.word	0x08007945
 8007924:	0800794d 	.word	0x0800794d
 8007928:	08007955 	.word	0x08007955
 800792c:	0800796b 	.word	0x0800796b
 8007930:	0800795b 	.word	0x0800795b
 8007934:	0800796b 	.word	0x0800796b
 8007938:	0800796b 	.word	0x0800796b
 800793c:	0800796b 	.word	0x0800796b
 8007940:	08007963 	.word	0x08007963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007944:	f7fe f9ec 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800794a:	e014      	b.n	8007976 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800794c:	f7fe f9fe 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8007950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007952:	e010      	b.n	8007976 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007954:	4b1a      	ldr	r3, [pc, #104]	@ (80079c0 <UART_SetConfig+0x5c0>)
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007958:	e00d      	b.n	8007976 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800795a:	f7fe f973 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 800795e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007960:	e009      	b.n	8007976 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007968:	e005      	b.n	8007976 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007974:	bf00      	nop
    }

    if (pclk != 0U)
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	d028      	beq.n	80079ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007980:	4a10      	ldr	r2, [pc, #64]	@ (80079c4 <UART_SetConfig+0x5c4>)
 8007982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007986:	461a      	mov	r2, r3
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	fbb3 f2f2 	udiv	r2, r3, r2
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	441a      	add	r2, r3
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	fbb2 f3f3 	udiv	r3, r2, r3
 800799e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	2b0f      	cmp	r3, #15
 80079a4:	d910      	bls.n	80079c8 <UART_SetConfig+0x5c8>
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ac:	d20c      	bcs.n	80079c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60da      	str	r2, [r3, #12]
 80079b8:	e009      	b.n	80079ce <UART_SetConfig+0x5ce>
 80079ba:	bf00      	nop
 80079bc:	40008000 	.word	0x40008000
 80079c0:	00f42400 	.word	0x00f42400
 80079c4:	0801d97c 	.word	0x0801d97c
      }
      else
      {
        ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2201      	movs	r2, #1
 80079da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2200      	movs	r2, #0
 80079e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2200      	movs	r2, #0
 80079e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3730      	adds	r7, #48	@ 0x30
 80079f2:	46bd      	mov	sp, r7
 80079f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080079f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af6:	d10a      	bne.n	8007b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b098      	sub	sp, #96	@ 0x60
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b4c:	f7fb fdc0 	bl	80036d0 <HAL_GetTick>
 8007b50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d12f      	bne.n	8007bc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f88e 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d022      	beq.n	8007bc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e6      	bne.n	8007b7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e063      	b.n	8007c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d149      	bne.n	8007c62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f857 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d03c      	beq.n	8007c62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c06:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e6      	bne.n	8007be8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c3a:	61fa      	str	r2, [r7, #28]
 8007c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	69b9      	ldr	r1, [r7, #24]
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	617b      	str	r3, [r7, #20]
   return(result);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e5      	bne.n	8007c1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e012      	b.n	8007c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3758      	adds	r7, #88	@ 0x58
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca0:	e04f      	b.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ca8:	d04b      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007caa:	f7fb fd11 	bl	80036d0 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d302      	bcc.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e04e      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d037      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b80      	cmp	r3, #128	@ 0x80
 8007cd6:	d034      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b40      	cmp	r3, #64	@ 0x40
 8007cdc:	d031      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d110      	bne.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f920 	bl	8007f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e029      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d1c:	d111      	bne.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f906 	bl	8007f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e00f      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69da      	ldr	r2, [r3, #28]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	bf0c      	ite	eq
 8007d52:	2301      	moveq	r3, #1
 8007d54:	2300      	movne	r3, #0
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d0a0      	beq.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b096      	sub	sp, #88	@ 0x58
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2222      	movs	r2, #34	@ 0x22
 8007d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02d      	beq.n	8007dfe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da8:	4a40      	ldr	r2, [pc, #256]	@ (8007eac <UART_Start_Receive_DMA+0x140>)
 8007daa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db2:	4a3f      	ldr	r2, [pc, #252]	@ (8007eb0 <UART_Start_Receive_DMA+0x144>)
 8007db4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8007eb4 <UART_Start_Receive_DMA+0x148>)
 8007dbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3324      	adds	r3, #36	@ 0x24
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ddc:	461a      	mov	r2, r3
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	f7fb fe0a 	bl	80039f8 <HAL_DMA_Start_IT>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2210      	movs	r2, #16
 8007dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e051      	b.n	8007ea2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d018      	beq.n	8007e38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e26:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	f043 0301 	orr.w	r3, r3, #1
 8007e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e58:	637a      	str	r2, [r7, #52]	@ 0x34
 8007e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e5      	bne.n	8007e38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3308      	adds	r3, #8
 8007e8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e8c:	623a      	str	r2, [r7, #32]
 8007e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	69f9      	ldr	r1, [r7, #28]
 8007e92:	6a3a      	ldr	r2, [r7, #32]
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e5      	bne.n	8007e6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3758      	adds	r7, #88	@ 0x58
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	080080bd 	.word	0x080080bd
 8007eb0:	080081e9 	.word	0x080081e9
 8007eb4:	08008227 	.word	0x08008227

08007eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b08f      	sub	sp, #60	@ 0x3c
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ee0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e6      	bne.n	8007ec0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f12:	61ba      	str	r2, [r7, #24]
 8007f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6979      	ldr	r1, [r7, #20]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e5      	bne.n	8007ef2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007f2e:	bf00      	nop
 8007f30:	373c      	adds	r7, #60	@ 0x3c
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b095      	sub	sp, #84	@ 0x54
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e6      	bne.n	8007f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f8a:	f023 0301 	bic.w	r3, r3, #1
 8007f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3308      	adds	r3, #8
 8007f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e3      	bne.n	8007f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d118      	bne.n	8007fe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f023 0310 	bic.w	r3, r3, #16
 8007fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6979      	ldr	r1, [r7, #20]
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e6      	bne.n	8007fb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ffa:	bf00      	nop
 8007ffc:	3754      	adds	r7, #84	@ 0x54
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b090      	sub	sp, #64	@ 0x40
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008012:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d137      	bne.n	8008092 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008024:	2200      	movs	r2, #0
 8008026:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800802a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	623b      	str	r3, [r7, #32]
   return(result);
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008040:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800804a:	633a      	str	r2, [r7, #48]	@ 0x30
 800804c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e5      	bne.n	800802a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800805e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	60fb      	str	r3, [r7, #12]
   return(result);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
 8008074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	69b9      	ldr	r1, [r7, #24]
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	617b      	str	r3, [r7, #20]
   return(result);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008090:	e002      	b.n	8008098 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008092:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008094:	f7ff f976 	bl	8007384 <HAL_UART_TxCpltCallback>
}
 8008098:	bf00      	nop
 800809a:	3740      	adds	r7, #64	@ 0x40
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff f972 	bl	8007398 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b09c      	sub	sp, #112	@ 0x70
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d171      	bne.n	80081bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80080d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080da:	2200      	movs	r2, #0
 80080dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008100:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800810c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e6      	bne.n	80080e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	667b      	str	r3, [r7, #100]	@ 0x64
 800812a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3308      	adds	r3, #8
 8008130:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008132:	647a      	str	r2, [r7, #68]	@ 0x44
 8008134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e5      	bne.n	8008112 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	623b      	str	r3, [r7, #32]
   return(result);
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800815c:	663b      	str	r3, [r7, #96]	@ 0x60
 800815e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008166:	633a      	str	r2, [r7, #48]	@ 0x30
 8008168:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800816c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800817a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008186:	2b01      	cmp	r3, #1
 8008188:	d118      	bne.n	80081bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	60fb      	str	r3, [r7, #12]
   return(result);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0310 	bic.w	r3, r3, #16
 800819e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081a8:	61fb      	str	r3, [r7, #28]
 80081aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	69b9      	ldr	r1, [r7, #24]
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	617b      	str	r3, [r7, #20]
   return(result);
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e6      	bne.n	800818a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081be:	2200      	movs	r2, #0
 80081c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d107      	bne.n	80081da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081d0:	4619      	mov	r1, r3
 80081d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80081d4:	f7ff f908 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081d8:	e002      	b.n	80081e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80081da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80081dc:	f7ff f8e6 	bl	80073ac <HAL_UART_RxCpltCallback>
}
 80081e0:	bf00      	nop
 80081e2:	3770      	adds	r7, #112	@ 0x70
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008200:	2b01      	cmp	r3, #1
 8008202:	d109      	bne.n	8008218 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800820a:	085b      	lsrs	r3, r3, #1
 800820c:	b29b      	uxth	r3, r3
 800820e:	4619      	mov	r1, r3
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff f8e9 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008216:	e002      	b.n	800821e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff f8d1 	bl	80073c0 <HAL_UART_RxHalfCpltCallback>
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b086      	sub	sp, #24
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008232:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008242:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824e:	2b80      	cmp	r3, #128	@ 0x80
 8008250:	d109      	bne.n	8008266 <UART_DMAError+0x40>
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b21      	cmp	r3, #33	@ 0x21
 8008256:	d106      	bne.n	8008266 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2200      	movs	r2, #0
 800825c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008260:	6978      	ldr	r0, [r7, #20]
 8008262:	f7ff fe29 	bl	8007eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008270:	2b40      	cmp	r3, #64	@ 0x40
 8008272:	d109      	bne.n	8008288 <UART_DMAError+0x62>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b22      	cmp	r3, #34	@ 0x22
 8008278:	d106      	bne.n	8008288 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2200      	movs	r2, #0
 800827e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008282:	6978      	ldr	r0, [r7, #20]
 8008284:	f7ff fe59 	bl	8007f3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800828e:	f043 0210 	orr.w	r2, r3, #16
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008298:	6978      	ldr	r0, [r7, #20]
 800829a:	f7ff f89b 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800829e:	bf00      	nop
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f7ff f889 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b088      	sub	sp, #32
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	60bb      	str	r3, [r7, #8]
   return(result);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6979      	ldr	r1, [r7, #20]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	613b      	str	r3, [r7, #16]
   return(result);
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e6      	bne.n	80082d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2220      	movs	r2, #32
 8008308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff f836 	bl	8007384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008318:	bf00      	nop
 800831a:	3720      	adds	r7, #32
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_UARTEx_DisableFifoMode+0x16>
 800836e:	2302      	movs	r3, #2
 8008370:	e027      	b.n	80083c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2224      	movs	r2, #36	@ 0x24
 800837e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e02d      	b.n	8008442 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2224      	movs	r2, #36	@ 0x24
 80083f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 0201 	bic.w	r2, r2, #1
 800840c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f850 	bl	80084c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800845e:	2302      	movs	r3, #2
 8008460:	e02d      	b.n	80084be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2224      	movs	r2, #36	@ 0x24
 800846e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0201 	bic.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f812 	bl	80084c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d108      	bne.n	80084ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084e8:	e031      	b.n	800854e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084ea:	2308      	movs	r3, #8
 80084ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084ee:	2308      	movs	r3, #8
 80084f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	0e5b      	lsrs	r3, r3, #25
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	0f5b      	lsrs	r3, r3, #29
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	7b3a      	ldrb	r2, [r7, #12]
 8008516:	4911      	ldr	r1, [pc, #68]	@ (800855c <UARTEx_SetNbDataToProcess+0x94>)
 8008518:	5c8a      	ldrb	r2, [r1, r2]
 800851a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800851e:	7b3a      	ldrb	r2, [r7, #12]
 8008520:	490f      	ldr	r1, [pc, #60]	@ (8008560 <UARTEx_SetNbDataToProcess+0x98>)
 8008522:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008524:	fb93 f3f2 	sdiv	r3, r3, r2
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	7b7a      	ldrb	r2, [r7, #13]
 8008534:	4909      	ldr	r1, [pc, #36]	@ (800855c <UARTEx_SetNbDataToProcess+0x94>)
 8008536:	5c8a      	ldrb	r2, [r1, r2]
 8008538:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800853c:	7b7a      	ldrb	r2, [r7, #13]
 800853e:	4908      	ldr	r1, [pc, #32]	@ (8008560 <UARTEx_SetNbDataToProcess+0x98>)
 8008540:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008542:	fb93 f3f2 	sdiv	r3, r3, r2
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	0801d994 	.word	0x0801d994
 8008560:	0801d99c 	.word	0x0801d99c

08008564 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af04      	add	r7, sp, #16
 800856a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800856c:	2364      	movs	r3, #100	@ 0x64
 800856e:	9302      	str	r3, [sp, #8]
 8008570:	2301      	movs	r3, #1
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	f107 030f 	add.w	r3, r7, #15
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2301      	movs	r3, #1
 800857c:	2275      	movs	r2, #117	@ 0x75
 800857e:	21d0      	movs	r1, #208	@ 0xd0
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7fc f97f 	bl	8004884 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b68      	cmp	r3, #104	@ 0x68
 800858a:	d13d      	bne.n	8008608 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8008590:	2364      	movs	r3, #100	@ 0x64
 8008592:	9302      	str	r3, [sp, #8]
 8008594:	2301      	movs	r3, #1
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	f107 030e 	add.w	r3, r7, #14
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	2301      	movs	r3, #1
 80085a0:	226b      	movs	r2, #107	@ 0x6b
 80085a2:	21d0      	movs	r1, #208	@ 0xd0
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fc f859 	bl	800465c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80085aa:	2307      	movs	r3, #7
 80085ac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80085ae:	2364      	movs	r3, #100	@ 0x64
 80085b0:	9302      	str	r3, [sp, #8]
 80085b2:	2301      	movs	r3, #1
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	f107 030e 	add.w	r3, r7, #14
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	2301      	movs	r3, #1
 80085be:	2219      	movs	r2, #25
 80085c0:	21d0      	movs	r1, #208	@ 0xd0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7fc f84a 	bl	800465c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80085cc:	2364      	movs	r3, #100	@ 0x64
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	2301      	movs	r3, #1
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	f107 030e 	add.w	r3, r7, #14
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2301      	movs	r3, #1
 80085dc:	221c      	movs	r2, #28
 80085de:	21d0      	movs	r1, #208	@ 0xd0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fc f83b 	bl	800465c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80085ea:	2364      	movs	r3, #100	@ 0x64
 80085ec:	9302      	str	r3, [sp, #8]
 80085ee:	2301      	movs	r3, #1
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	f107 030e 	add.w	r3, r7, #14
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	2301      	movs	r3, #1
 80085fa:	221b      	movs	r2, #27
 80085fc:	21d0      	movs	r1, #208	@ 0xd0
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fc f82c 	bl	800465c <HAL_I2C_Mem_Write>
        return 0;
 8008604:	2300      	movs	r3, #0
 8008606:	e000      	b.n	800860a <MPU6050_Init+0xa6>
    }
    return 1;
 8008608:	2301      	movs	r3, #1
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	0000      	movs	r0, r0
 8008614:	0000      	movs	r0, r0
	...

08008618 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8008618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800861c:	b094      	sub	sp, #80	@ 0x50
 800861e:	af04      	add	r7, sp, #16
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8008624:	2364      	movs	r3, #100	@ 0x64
 8008626:	9302      	str	r3, [sp, #8]
 8008628:	230e      	movs	r3, #14
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	f107 0308 	add.w	r3, r7, #8
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	2301      	movs	r3, #1
 8008634:	223b      	movs	r2, #59	@ 0x3b
 8008636:	21d0      	movs	r1, #208	@ 0xd0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7fc f923 	bl	8004884 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800863e:	7a3b      	ldrb	r3, [r7, #8]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	b21a      	sxth	r2, r3
 8008644:	7a7b      	ldrb	r3, [r7, #9]
 8008646:	b21b      	sxth	r3, r3
 8008648:	4313      	orrs	r3, r2
 800864a:	b21a      	sxth	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8008650:	7abb      	ldrb	r3, [r7, #10]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	b21a      	sxth	r2, r3
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	b21b      	sxth	r3, r3
 800865a:	4313      	orrs	r3, r2
 800865c:	b21a      	sxth	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8008662:	7b3b      	ldrb	r3, [r7, #12]
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	b21a      	sxth	r2, r3
 8008668:	7b7b      	ldrb	r3, [r7, #13]
 800866a:	b21b      	sxth	r3, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	b21a      	sxth	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	b21a      	sxth	r2, r3
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	b21b      	sxth	r3, r3
 800867e:	4313      	orrs	r3, r2
 8008680:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8008682:	7c3b      	ldrb	r3, [r7, #16]
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	b21a      	sxth	r2, r3
 8008688:	7c7b      	ldrb	r3, [r7, #17]
 800868a:	b21b      	sxth	r3, r3
 800868c:	4313      	orrs	r3, r2
 800868e:	b21a      	sxth	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8008694:	7cbb      	ldrb	r3, [r7, #18]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	b21a      	sxth	r2, r3
 800869a:	7cfb      	ldrb	r3, [r7, #19]
 800869c:	b21b      	sxth	r3, r3
 800869e:	4313      	orrs	r3, r2
 80086a0:	b21a      	sxth	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80086a6:	7d3b      	ldrb	r3, [r7, #20]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	b21a      	sxth	r2, r3
 80086ac:	7d7b      	ldrb	r3, [r7, #21]
 80086ae:	b21b      	sxth	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b21a      	sxth	r2, r3
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f7 ff68 	bl	8000594 <__aeabi_i2d>
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	4bbd      	ldr	r3, [pc, #756]	@ (80089c0 <MPU6050_Read_All+0x3a8>)
 80086ca:	f7f8 f8f7 	bl	80008bc <__aeabi_ddiv>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7f7 ff58 	bl	8000594 <__aeabi_i2d>
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	4bb5      	ldr	r3, [pc, #724]	@ (80089c0 <MPU6050_Read_All+0x3a8>)
 80086ea:	f7f8 f8e7 	bl	80008bc <__aeabi_ddiv>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f7 ff48 	bl	8000594 <__aeabi_i2d>
 8008704:	a3a8      	add	r3, pc, #672	@ (adr r3, 80089a8 <MPU6050_Read_All+0x390>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f8 f8d7 	bl	80008bc <__aeabi_ddiv>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8008718:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008724:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80089c4 <MPU6050_Read_All+0x3ac>
 8008728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800872c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80089c8 <MPU6050_Read_All+0x3b0>
 8008730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008740:	4618      	mov	r0, r3
 8008742:	f7f7 ff27 	bl	8000594 <__aeabi_i2d>
 8008746:	a39a      	add	r3, pc, #616	@ (adr r3, 80089b0 <MPU6050_Read_All+0x398>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f8 f8b6 	bl	80008bc <__aeabi_ddiv>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8008760:	4618      	mov	r0, r3
 8008762:	f7f7 ff17 	bl	8000594 <__aeabi_i2d>
 8008766:	a392      	add	r3, pc, #584	@ (adr r3, 80089b0 <MPU6050_Read_All+0x398>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f8 f8a6 	bl	80008bc <__aeabi_ddiv>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8008780:	4618      	mov	r0, r3
 8008782:	f7f7 ff07 	bl	8000594 <__aeabi_i2d>
 8008786:	a38a      	add	r3, pc, #552	@ (adr r3, 80089b0 <MPU6050_Read_All+0x398>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f8 f896 	bl	80008bc <__aeabi_ddiv>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800879a:	f7fa ff99 	bl	80036d0 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b8a      	ldr	r3, [pc, #552]	@ (80089cc <MPU6050_Read_All+0x3b4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f7 fee4 	bl	8000574 <__aeabi_ui2d>
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	4b87      	ldr	r3, [pc, #540]	@ (80089d0 <MPU6050_Read_All+0x3b8>)
 80087b2:	f7f8 f883 	bl	80008bc <__aeabi_ddiv>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80087be:	f7fa ff87 	bl	80036d0 <HAL_GetTick>
 80087c2:	4603      	mov	r3, r0
 80087c4:	4a81      	ldr	r2, [pc, #516]	@ (80089cc <MPU6050_Read_All+0x3b4>)
 80087c6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087ce:	461a      	mov	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087d6:	fb03 f202 	mul.w	r2, r3, r2
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087e0:	4619      	mov	r1, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
 80087ec:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 fed0 	bl	8000594 <__aeabi_i2d>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	ec43 2b10 	vmov	d0, r2, r3
 80087fc:	f013 fe56 	bl	801c4ac <sqrt>
 8008800:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008810:	f7f8 f992 	bl	8000b38 <__aeabi_dcmpeq>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d11f      	bne.n	800885a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008820:	4618      	mov	r0, r3
 8008822:	f7f7 feb7 	bl	8000594 <__aeabi_i2d>
 8008826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800882a:	f7f8 f847 	bl	80008bc <__aeabi_ddiv>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	ec43 2b17 	vmov	d7, r2, r3
 8008836:	eeb0 0a47 	vmov.f32	s0, s14
 800883a:	eef0 0a67 	vmov.f32	s1, s15
 800883e:	f013 fe63 	bl	801c508 <atan>
 8008842:	ec51 0b10 	vmov	r0, r1, d0
 8008846:	a35c      	add	r3, pc, #368	@ (adr r3, 80089b8 <MPU6050_Read_All+0x3a0>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f7 ff0c 	bl	8000668 <__aeabi_dmul>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8008858:	e005      	b.n	8008866 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	f04f 0300 	mov.w	r3, #0
 8008862:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800886c:	425b      	negs	r3, r3
 800886e:	4618      	mov	r0, r3
 8008870:	f7f7 fe90 	bl	8000594 <__aeabi_i2d>
 8008874:	4682      	mov	sl, r0
 8008876:	468b      	mov	fp, r1
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	f7f7 fe88 	bl	8000594 <__aeabi_i2d>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	ec43 2b11 	vmov	d1, r2, r3
 800888c:	ec4b ab10 	vmov	d0, sl, fp
 8008890:	f013 fd9a 	bl	801c3c8 <atan2>
 8008894:	ec51 0b10 	vmov	r0, r1, d0
 8008898:	a347      	add	r3, pc, #284	@ (adr r3, 80089b8 <MPU6050_Read_All+0x3a0>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 fee3 	bl	8000668 <__aeabi_dmul>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80088aa:	f04f 0200 	mov.w	r2, #0
 80088ae:	4b49      	ldr	r3, [pc, #292]	@ (80089d4 <MPU6050_Read_All+0x3bc>)
 80088b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80088b4:	f7f8 f94a 	bl	8000b4c <__aeabi_dcmplt>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <MPU6050_Read_All+0x2bc>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	4b43      	ldr	r3, [pc, #268]	@ (80089d8 <MPU6050_Read_All+0x3c0>)
 80088ca:	f7f8 f95d 	bl	8000b88 <__aeabi_dcmpgt>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d114      	bne.n	80088fe <MPU6050_Read_All+0x2e6>
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	4b3f      	ldr	r3, [pc, #252]	@ (80089d8 <MPU6050_Read_All+0x3c0>)
 80088da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80088de:	f7f8 f953 	bl	8000b88 <__aeabi_dcmpgt>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d015      	beq.n	8008914 <MPU6050_Read_All+0x2fc>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	4b38      	ldr	r3, [pc, #224]	@ (80089d4 <MPU6050_Read_All+0x3bc>)
 80088f4:	f7f8 f92a 	bl	8000b4c <__aeabi_dcmplt>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80088fe:	4937      	ldr	r1, [pc, #220]	@ (80089dc <MPU6050_Read_All+0x3c4>)
 8008900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008904:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800890e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8008912:	e014      	b.n	800893e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800891a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800891e:	eeb0 1a47 	vmov.f32	s2, s14
 8008922:	eef0 1a67 	vmov.f32	s3, s15
 8008926:	ed97 0b06 	vldr	d0, [r7, #24]
 800892a:	482c      	ldr	r0, [pc, #176]	@ (80089dc <MPU6050_Read_All+0x3c4>)
 800892c:	f000 f85a 	bl	80089e4 <Kalman_getAngle>
 8008930:	eeb0 7a40 	vmov.f32	s14, s0
 8008934:	eef0 7a60 	vmov.f32	s15, s1
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008944:	4690      	mov	r8, r2
 8008946:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	4b22      	ldr	r3, [pc, #136]	@ (80089d8 <MPU6050_Read_All+0x3c0>)
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	f7f8 f918 	bl	8000b88 <__aeabi_dcmpgt>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008964:	4614      	mov	r4, r2
 8008966:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8008976:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800897a:	eeb0 1a47 	vmov.f32	s2, s14
 800897e:	eef0 1a67 	vmov.f32	s3, s15
 8008982:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8008986:	4816      	ldr	r0, [pc, #88]	@ (80089e0 <MPU6050_Read_All+0x3c8>)
 8008988:	f000 f82c 	bl	80089e4 <Kalman_getAngle>
 800898c:	eeb0 7a40 	vmov.f32	s14, s0
 8008990:	eef0 7a60 	vmov.f32	s15, s1
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800899a:	bf00      	nop
 800899c:	3740      	adds	r7, #64	@ 0x40
 800899e:	46bd      	mov	sp, r7
 80089a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089a4:	f3af 8000 	nop.w
 80089a8:	00000000 	.word	0x00000000
 80089ac:	40cc2900 	.word	0x40cc2900
 80089b0:	00000000 	.word	0x00000000
 80089b4:	40606000 	.word	0x40606000
 80089b8:	1a63c1f8 	.word	0x1a63c1f8
 80089bc:	404ca5dc 	.word	0x404ca5dc
 80089c0:	40d00000 	.word	0x40d00000
 80089c4:	43aa0000 	.word	0x43aa0000
 80089c8:	42121eb8 	.word	0x42121eb8
 80089cc:	20005d5c 	.word	0x20005d5c
 80089d0:	408f4000 	.word	0x408f4000
 80089d4:	c0568000 	.word	0xc0568000
 80089d8:	40568000 	.word	0x40568000
 80089dc:	20000060 	.word	0x20000060
 80089e0:	20000018 	.word	0x20000018

080089e4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80089e4:	b5b0      	push	{r4, r5, r7, lr}
 80089e6:	b096      	sub	sp, #88	@ 0x58
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	61f8      	str	r0, [r7, #28]
 80089ec:	ed87 0b04 	vstr	d0, [r7, #16]
 80089f0:	ed87 1b02 	vstr	d1, [r7, #8]
 80089f4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a02:	f7f7 fc79 	bl	80002f8 <__aeabi_dsub>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a1c:	f7f7 fe24 	bl	8000668 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7f7 fc68 	bl	80002fc <__adddf3>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	69f9      	ldr	r1, [r7, #28]
 8008a32:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a46:	f7f7 fe0f 	bl	8000668 <__aeabi_dmul>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008a58:	f7f7 fc4e 	bl	80002f8 <__aeabi_dsub>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4610      	mov	r0, r2
 8008a62:	4619      	mov	r1, r3
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008a6a:	f7f7 fc45 	bl	80002f8 <__aeabi_dsub>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4610      	mov	r0, r2
 8008a74:	4619      	mov	r1, r3
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f7f7 fc3e 	bl	80002fc <__adddf3>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4610      	mov	r0, r2
 8008a86:	4619      	mov	r1, r3
 8008a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8c:	f7f7 fdec 	bl	8000668 <__aeabi_dmul>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4620      	mov	r0, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	f7f7 fc30 	bl	80002fc <__adddf3>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	69f9      	ldr	r1, [r7, #28]
 8008aa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab6:	f7f7 fdd7 	bl	8000668 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f7 fc19 	bl	80002f8 <__aeabi_dsub>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	69f9      	ldr	r1, [r7, #28]
 8008acc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae0:	f7f7 fdc2 	bl	8000668 <__aeabi_dmul>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	f7f7 fc04 	bl	80002f8 <__aeabi_dsub>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	69f9      	ldr	r1, [r7, #28]
 8008af6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b0a:	f7f7 fdad 	bl	8000668 <__aeabi_dmul>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4620      	mov	r0, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	f7f7 fbf1 	bl	80002fc <__adddf3>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	69f9      	ldr	r1, [r7, #28]
 8008b20:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008b30:	f7f7 fbe4 	bl	80002fc <__adddf3>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008b42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b46:	f7f7 feb9 	bl	80008bc <__aeabi_ddiv>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b5c:	f7f7 feae 	bl	80008bc <__aeabi_ddiv>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008b6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b72:	f7f7 fbc1 	bl	80002f8 <__aeabi_dsub>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008b84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008b8c:	f7f7 fd6c 	bl	8000668 <__aeabi_dmul>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 fbb0 	bl	80002fc <__adddf3>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	69f9      	ldr	r1, [r7, #28]
 8008ba2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8008bac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008bb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008bb4:	f7f7 fd58 	bl	8000668 <__aeabi_dmul>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7f7 fb9c 	bl	80002fc <__adddf3>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	69f9      	ldr	r1, [r7, #28]
 8008bca:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008bd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008bde:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008bf0:	f7f7 fd3a 	bl	8000668 <__aeabi_dmul>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 fb7c 	bl	80002f8 <__aeabi_dsub>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	69f9      	ldr	r1, [r7, #28]
 8008c06:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008c18:	f7f7 fd26 	bl	8000668 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4620      	mov	r0, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7f7 fb68 	bl	80002f8 <__aeabi_dsub>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	69f9      	ldr	r1, [r7, #28]
 8008c2e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008c38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c40:	f7f7 fd12 	bl	8000668 <__aeabi_dmul>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 fb54 	bl	80002f8 <__aeabi_dsub>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	69f9      	ldr	r1, [r7, #28]
 8008c56:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008c60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008c64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008c68:	f7f7 fcfe 	bl	8000668 <__aeabi_dmul>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4620      	mov	r0, r4
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7f7 fb40 	bl	80002f8 <__aeabi_dsub>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	69f9      	ldr	r1, [r7, #28]
 8008c7e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008c88:	ec43 2b17 	vmov	d7, r2, r3
};
 8008c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8008c90:	eef0 0a67 	vmov.f32	s1, s15
 8008c94:	3758      	adds	r7, #88	@ 0x58
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c9c <__NVIC_SetPriority>:
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6039      	str	r1, [r7, #0]
 8008ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	db0a      	blt.n	8008cc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	490c      	ldr	r1, [pc, #48]	@ (8008ce8 <__NVIC_SetPriority+0x4c>)
 8008cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cba:	0112      	lsls	r2, r2, #4
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008cc4:	e00a      	b.n	8008cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	4908      	ldr	r1, [pc, #32]	@ (8008cec <__NVIC_SetPriority+0x50>)
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	0112      	lsls	r2, r2, #4
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	440b      	add	r3, r1
 8008cda:	761a      	strb	r2, [r3, #24]
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	e000e100 	.word	0xe000e100
 8008cec:	e000ed00 	.word	0xe000ed00

08008cf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <SysTick_Handler+0x1c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008cf8:	f001 fd40 	bl	800a77c <xTaskGetSchedulerState>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d001      	beq.n	8008d06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008d02:	f002 fb39 	bl	800b378 <xPortSysTickHandler>
  }
}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	e000e010 	.word	0xe000e010

08008d10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d14:	2100      	movs	r1, #0
 8008d16:	f06f 0004 	mvn.w	r0, #4
 8008d1a:	f7ff ffbf 	bl	8008c9c <__NVIC_SetPriority>
#endif
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d2a:	f3ef 8305 	mrs	r3, IPSR
 8008d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008d36:	f06f 0305 	mvn.w	r3, #5
 8008d3a:	607b      	str	r3, [r7, #4]
 8008d3c:	e00c      	b.n	8008d58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <osKernelInitialize+0x44>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d105      	bne.n	8008d52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d46:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <osKernelInitialize+0x44>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	e002      	b.n	8008d58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d58:	687b      	ldr	r3, [r7, #4]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	20005d60 	.word	0x20005d60

08008d6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d72:	f3ef 8305 	mrs	r3, IPSR
 8008d76:	603b      	str	r3, [r7, #0]
  return(result);
 8008d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d7e:	f06f 0305 	mvn.w	r3, #5
 8008d82:	607b      	str	r3, [r7, #4]
 8008d84:	e010      	b.n	8008da8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d86:	4b0b      	ldr	r3, [pc, #44]	@ (8008db4 <osKernelStart+0x48>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d109      	bne.n	8008da2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d8e:	f7ff ffbf 	bl	8008d10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d92:	4b08      	ldr	r3, [pc, #32]	@ (8008db4 <osKernelStart+0x48>)
 8008d94:	2202      	movs	r2, #2
 8008d96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d98:	f001 f87a 	bl	8009e90 <vTaskStartScheduler>
      stat = osOK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	e002      	b.n	8008da8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008da6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008da8:	687b      	ldr	r3, [r7, #4]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20005d60 	.word	0x20005d60

08008db8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08e      	sub	sp, #56	@ 0x38
 8008dbc:	af04      	add	r7, sp, #16
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc8:	f3ef 8305 	mrs	r3, IPSR
 8008dcc:	617b      	str	r3, [r7, #20]
  return(result);
 8008dce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d17e      	bne.n	8008ed2 <osThreadNew+0x11a>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d07b      	beq.n	8008ed2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008dde:	2318      	movs	r3, #24
 8008de0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d045      	beq.n	8008e7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <osThreadNew+0x48>
        name = attr->name;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d008      	beq.n	8008e26 <osThreadNew+0x6e>
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	2b38      	cmp	r3, #56	@ 0x38
 8008e18:	d805      	bhi.n	8008e26 <osThreadNew+0x6e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <osThreadNew+0x72>
        return (NULL);
 8008e26:	2300      	movs	r3, #0
 8008e28:	e054      	b.n	8008ed4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	089b      	lsrs	r3, r3, #2
 8008e38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <osThreadNew+0xa8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	2b5b      	cmp	r3, #91	@ 0x5b
 8008e48:	d90a      	bls.n	8008e60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d006      	beq.n	8008e60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <osThreadNew+0xa8>
        mem = 1;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	61bb      	str	r3, [r7, #24]
 8008e5e:	e010      	b.n	8008e82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10c      	bne.n	8008e82 <osThreadNew+0xca>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d108      	bne.n	8008e82 <osThreadNew+0xca>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <osThreadNew+0xca>
          mem = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	e001      	b.n	8008e82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d110      	bne.n	8008eaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e90:	9202      	str	r2, [sp, #8]
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6a3a      	ldr	r2, [r7, #32]
 8008e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 fe1a 	bl	8009ad8 <xTaskCreateStatic>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	e013      	b.n	8008ed2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d110      	bne.n	8008ed2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	f107 0310 	add.w	r3, r7, #16
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 fe68 	bl	8009b98 <xTaskCreate>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d001      	beq.n	8008ed2 <osThreadNew+0x11a>
            hTask = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ed2:	693b      	ldr	r3, [r7, #16]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3728      	adds	r7, #40	@ 0x28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ee4:	f3ef 8305 	mrs	r3, IPSR
 8008ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <osDelay+0x1c>
    stat = osErrorISR;
 8008ef0:	f06f 0305 	mvn.w	r3, #5
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e007      	b.n	8008f08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 ff8e 	bl	8009e24 <vTaskDelay>
    }
  }

  return (stat);
 8008f08:	68fb      	ldr	r3, [r7, #12]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a07      	ldr	r2, [pc, #28]	@ (8008f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4a06      	ldr	r2, [pc, #24]	@ (8008f44 <vApplicationGetIdleTaskMemory+0x30>)
 8008f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2280      	movs	r2, #128	@ 0x80
 8008f30:	601a      	str	r2, [r3, #0]
}
 8008f32:	bf00      	nop
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20005d64 	.word	0x20005d64
 8008f44:	20005dc0 	.word	0x20005dc0

08008f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4a07      	ldr	r2, [pc, #28]	@ (8008f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4a06      	ldr	r2, [pc, #24]	@ (8008f78 <vApplicationGetTimerTaskMemory+0x30>)
 8008f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f66:	601a      	str	r2, [r3, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	20005fc0 	.word	0x20005fc0
 8008f78:	2000601c 	.word	0x2000601c

08008f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f103 0208 	add.w	r2, r3, #8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f103 0208 	add.w	r2, r3, #8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f103 0208 	add.w	r2, r3, #8
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009034:	d103      	bne.n	800903e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	e00c      	b.n	8009058 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3308      	adds	r3, #8
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	e002      	b.n	800904c <vListInsert+0x2e>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	429a      	cmp	r2, r3
 8009056:	d2f6      	bcs.n	8009046 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	601a      	str	r2, [r3, #0]
}
 8009084:	bf00      	nop
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	6892      	ldr	r2, [r2, #8]
 80090a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	6852      	ldr	r2, [r2, #4]
 80090b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d103      	bne.n	80090c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	1e5a      	subs	r2, r3, #1
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <xQueueGenericReset+0x2c>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	60bb      	str	r3, [r7, #8]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009110:	f002 f8a2 	bl	800b258 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800911c:	68f9      	ldr	r1, [r7, #12]
 800911e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009120:	fb01 f303 	mul.w	r3, r1, r3
 8009124:	441a      	add	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009140:	3b01      	subs	r3, #1
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009146:	fb01 f303 	mul.w	r3, r1, r3
 800914a:	441a      	add	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	22ff      	movs	r2, #255	@ 0xff
 8009154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	22ff      	movs	r2, #255	@ 0xff
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d114      	bne.n	8009190 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01a      	beq.n	80091a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3310      	adds	r3, #16
 8009172:	4618      	mov	r0, r3
 8009174:	f001 f91a 	bl	800a3ac <xTaskRemoveFromEventList>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d012      	beq.n	80091a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800917e:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <xQueueGenericReset+0xd0>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	e009      	b.n	80091a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3310      	adds	r3, #16
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff fef1 	bl	8008f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3324      	adds	r3, #36	@ 0x24
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff feec 	bl	8008f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091a4:	f002 f88a 	bl	800b2bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091a8:	2301      	movs	r3, #1
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08e      	sub	sp, #56	@ 0x38
 80091bc:	af02      	add	r7, sp, #8
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <xQueueGenericCreateStatic+0x56>
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <xQueueGenericCreateStatic+0x5a>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueGenericCreateStatic+0x5c>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10b      	bne.n	8009230 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	623b      	str	r3, [r7, #32]
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	e7fd      	b.n	800922c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d102      	bne.n	800923c <xQueueGenericCreateStatic+0x84>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <xQueueGenericCreateStatic+0x88>
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <xQueueGenericCreateStatic+0x8a>
 8009240:	2300      	movs	r3, #0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	61fb      	str	r3, [r7, #28]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800925e:	2350      	movs	r3, #80	@ 0x50
 8009260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b50      	cmp	r3, #80	@ 0x50
 8009266:	d00b      	beq.n	8009280 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	61bb      	str	r3, [r7, #24]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009280:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00d      	beq.n	80092a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800928c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009294:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 f805 	bl	80092b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3730      	adds	r7, #48	@ 0x30
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
 80092be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d103      	bne.n	80092ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	e002      	b.n	80092d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092e0:	2101      	movs	r1, #1
 80092e2:	69b8      	ldr	r0, [r7, #24]
 80092e4:	f7ff fefe 	bl	80090e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08e      	sub	sp, #56	@ 0x38
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009306:	2300      	movs	r3, #0
 8009308:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <xQueueGenericSend+0x34>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d103      	bne.n	800933a <xQueueGenericSend+0x42>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <xQueueGenericSend+0x46>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <xQueueGenericSend+0x48>
 800933e:	2300      	movs	r3, #0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <xQueueGenericSend+0x64>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	e7fd      	b.n	8009358 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d103      	bne.n	800936a <xQueueGenericSend+0x72>
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009366:	2b01      	cmp	r3, #1
 8009368:	d101      	bne.n	800936e <xQueueGenericSend+0x76>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <xQueueGenericSend+0x78>
 800936e:	2300      	movs	r3, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10b      	bne.n	800938c <xQueueGenericSend+0x94>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	623b      	str	r3, [r7, #32]
}
 8009386:	bf00      	nop
 8009388:	bf00      	nop
 800938a:	e7fd      	b.n	8009388 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800938c:	f001 f9f6 	bl	800a77c <xTaskGetSchedulerState>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d102      	bne.n	800939c <xQueueGenericSend+0xa4>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <xQueueGenericSend+0xa8>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <xQueueGenericSend+0xaa>
 80093a0:	2300      	movs	r3, #0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10b      	bne.n	80093be <xQueueGenericSend+0xc6>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	61fb      	str	r3, [r7, #28]
}
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
 80093bc:	e7fd      	b.n	80093ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093be:	f001 ff4b 	bl	800b258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d302      	bcc.n	80093d4 <xQueueGenericSend+0xdc>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d129      	bne.n	8009428 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093da:	f000 fa0f 	bl	80097fc <prvCopyDataToQueue>
 80093de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d010      	beq.n	800940a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	3324      	adds	r3, #36	@ 0x24
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 ffdd 	bl	800a3ac <xTaskRemoveFromEventList>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d013      	beq.n	8009420 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093f8:	4b3f      	ldr	r3, [pc, #252]	@ (80094f8 <xQueueGenericSend+0x200>)
 80093fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	e00a      	b.n	8009420 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800940a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d007      	beq.n	8009420 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009410:	4b39      	ldr	r3, [pc, #228]	@ (80094f8 <xQueueGenericSend+0x200>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009420:	f001 ff4c 	bl	800b2bc <vPortExitCritical>
				return pdPASS;
 8009424:	2301      	movs	r3, #1
 8009426:	e063      	b.n	80094f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d103      	bne.n	8009436 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800942e:	f001 ff45 	bl	800b2bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009432:	2300      	movs	r3, #0
 8009434:	e05c      	b.n	80094f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800943c:	f107 0314 	add.w	r3, r7, #20
 8009440:	4618      	mov	r0, r3
 8009442:	f001 f83f 	bl	800a4c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009446:	2301      	movs	r3, #1
 8009448:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800944a:	f001 ff37 	bl	800b2bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800944e:	f000 fd87 	bl	8009f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009452:	f001 ff01 	bl	800b258 <vPortEnterCritical>
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800945c:	b25b      	sxtb	r3, r3
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009462:	d103      	bne.n	800946c <xQueueGenericSend+0x174>
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009472:	b25b      	sxtb	r3, r3
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009478:	d103      	bne.n	8009482 <xQueueGenericSend+0x18a>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009482:	f001 ff1b 	bl	800b2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009486:	1d3a      	adds	r2, r7, #4
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f001 f82e 	bl	800a4f0 <xTaskCheckForTimeOut>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d124      	bne.n	80094e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800949a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800949c:	f000 faa6 	bl	80099ec <prvIsQueueFull>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d018      	beq.n	80094d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	3310      	adds	r3, #16
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4611      	mov	r1, r2
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 ff2a 	bl	800a308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094b6:	f000 fa31 	bl	800991c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094ba:	f000 fd5f 	bl	8009f7c <xTaskResumeAll>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f47f af7c 	bne.w	80093be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80094c6:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <xQueueGenericSend+0x200>)
 80094c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	e772      	b.n	80093be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80094d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094da:	f000 fa1f 	bl	800991c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094de:	f000 fd4d 	bl	8009f7c <xTaskResumeAll>
 80094e2:	e76c      	b.n	80093be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80094e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094e6:	f000 fa19 	bl	800991c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094ea:	f000 fd47 	bl	8009f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3738      	adds	r7, #56	@ 0x38
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b090      	sub	sp, #64	@ 0x40
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10b      	bne.n	800952c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <xQueueGenericSendFromISR+0x3e>
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <xQueueGenericSendFromISR+0x42>
 800953a:	2301      	movs	r3, #1
 800953c:	e000      	b.n	8009540 <xQueueGenericSendFromISR+0x44>
 800953e:	2300      	movs	r3, #0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10b      	bne.n	800955c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	e7fd      	b.n	8009558 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d103      	bne.n	800956a <xQueueGenericSendFromISR+0x6e>
 8009562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <xQueueGenericSendFromISR+0x72>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGenericSendFromISR+0x74>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10b      	bne.n	800958c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	623b      	str	r3, [r7, #32]
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	e7fd      	b.n	8009588 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800958c:	f001 ff44 	bl	800b418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009590:	f3ef 8211 	mrs	r2, BASEPRI
 8009594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	61fa      	str	r2, [r7, #28]
 80095a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d302      	bcc.n	80095be <xQueueGenericSendFromISR+0xc2>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d12f      	bne.n	800961e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	68b9      	ldr	r1, [r7, #8]
 80095d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095d4:	f000 f912 	bl	80097fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80095d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095e0:	d112      	bne.n	8009608 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d016      	beq.n	8009618 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	3324      	adds	r3, #36	@ 0x24
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fedc 	bl	800a3ac <xTaskRemoveFromEventList>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00e      	beq.n	8009618 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e007      	b.n	8009618 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009608:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800960c:	3301      	adds	r3, #1
 800960e:	b2db      	uxtb	r3, r3
 8009610:	b25a      	sxtb	r2, r3
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009618:	2301      	movs	r3, #1
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800961c:	e001      	b.n	8009622 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009624:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800962c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800962e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009630:	4618      	mov	r0, r3
 8009632:	3740      	adds	r7, #64	@ 0x40
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08c      	sub	sp, #48	@ 0x30
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009644:	2300      	movs	r3, #0
 8009646:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <xQueueReceive+0x32>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	623b      	str	r3, [r7, #32]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <xQueueReceive+0x40>
 8009670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <xQueueReceive+0x44>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <xQueueReceive+0x46>
 800967c:	2300      	movs	r3, #0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <xQueueReceive+0x62>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	61fb      	str	r3, [r7, #28]
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	e7fd      	b.n	8009696 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800969a:	f001 f86f 	bl	800a77c <xTaskGetSchedulerState>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <xQueueReceive+0x72>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <xQueueReceive+0x76>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <xQueueReceive+0x78>
 80096ae:	2300      	movs	r3, #0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <xQueueReceive+0x94>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	61bb      	str	r3, [r7, #24]
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	e7fd      	b.n	80096c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096cc:	f001 fdc4 	bl	800b258 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01f      	beq.n	800971c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096e0:	f000 f8f6 	bl	80098d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	1e5a      	subs	r2, r3, #1
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00f      	beq.n	8009714 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f6:	3310      	adds	r3, #16
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fe57 	bl	800a3ac <xTaskRemoveFromEventList>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d007      	beq.n	8009714 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009704:	4b3c      	ldr	r3, [pc, #240]	@ (80097f8 <xQueueReceive+0x1c0>)
 8009706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009714:	f001 fdd2 	bl	800b2bc <vPortExitCritical>
				return pdPASS;
 8009718:	2301      	movs	r3, #1
 800971a:	e069      	b.n	80097f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d103      	bne.n	800972a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009722:	f001 fdcb 	bl	800b2bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009726:	2300      	movs	r3, #0
 8009728:	e062      	b.n	80097f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800972a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009730:	f107 0310 	add.w	r3, r7, #16
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fec5 	bl	800a4c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800973a:	2301      	movs	r3, #1
 800973c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800973e:	f001 fdbd 	bl	800b2bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009742:	f000 fc0d 	bl	8009f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009746:	f001 fd87 	bl	800b258 <vPortEnterCritical>
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009750:	b25b      	sxtb	r3, r3
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009756:	d103      	bne.n	8009760 <xQueueReceive+0x128>
 8009758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009766:	b25b      	sxtb	r3, r3
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800976c:	d103      	bne.n	8009776 <xQueueReceive+0x13e>
 800976e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009776:	f001 fda1 	bl	800b2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800977a:	1d3a      	adds	r2, r7, #4
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f000 feb4 	bl	800a4f0 <xTaskCheckForTimeOut>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d123      	bne.n	80097d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800978e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009790:	f000 f916 	bl	80099c0 <prvIsQueueEmpty>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800979a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979c:	3324      	adds	r3, #36	@ 0x24
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	4611      	mov	r1, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fdb0 	bl	800a308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097aa:	f000 f8b7 	bl	800991c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097ae:	f000 fbe5 	bl	8009f7c <xTaskResumeAll>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d189      	bne.n	80096cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80097b8:	4b0f      	ldr	r3, [pc, #60]	@ (80097f8 <xQueueReceive+0x1c0>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	e780      	b.n	80096cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097cc:	f000 f8a6 	bl	800991c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097d0:	f000 fbd4 	bl	8009f7c <xTaskResumeAll>
 80097d4:	e77a      	b.n	80096cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097d8:	f000 f8a0 	bl	800991c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097dc:	f000 fbce 	bl	8009f7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097e2:	f000 f8ed 	bl	80099c0 <prvIsQueueEmpty>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f43f af6f 	beq.w	80096cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3730      	adds	r7, #48	@ 0x30
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10d      	bne.n	8009836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d14d      	bne.n	80098be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	4618      	mov	r0, r3
 8009828:	f000 ffc6 	bl	800a7b8 <xTaskPriorityDisinherit>
 800982c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	609a      	str	r2, [r3, #8]
 8009834:	e043      	b.n	80098be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d119      	bne.n	8009870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6858      	ldr	r0, [r3, #4]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009844:	461a      	mov	r2, r3
 8009846:	68b9      	ldr	r1, [r7, #8]
 8009848:	f011 ff7d 	bl	801b746 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009854:	441a      	add	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	429a      	cmp	r2, r3
 8009864:	d32b      	bcc.n	80098be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	605a      	str	r2, [r3, #4]
 800986e:	e026      	b.n	80098be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68d8      	ldr	r0, [r3, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009878:	461a      	mov	r2, r3
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	f011 ff63 	bl	801b746 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009888:	425b      	negs	r3, r3
 800988a:	441a      	add	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	68da      	ldr	r2, [r3, #12]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	429a      	cmp	r2, r3
 800989a:	d207      	bcs.n	80098ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a4:	425b      	negs	r3, r3
 80098a6:	441a      	add	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d105      	bne.n	80098be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80098c6:	697b      	ldr	r3, [r7, #20]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d018      	beq.n	8009914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ea:	441a      	add	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d303      	bcc.n	8009904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68d9      	ldr	r1, [r3, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800990c:	461a      	mov	r2, r3
 800990e:	6838      	ldr	r0, [r7, #0]
 8009910:	f011 ff19 	bl	801b746 <memcpy>
	}
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009924:	f001 fc98 	bl	800b258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800992e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009930:	e011      	b.n	8009956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009936:	2b00      	cmp	r3, #0
 8009938:	d012      	beq.n	8009960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3324      	adds	r3, #36	@ 0x24
 800993e:	4618      	mov	r0, r3
 8009940:	f000 fd34 	bl	800a3ac <xTaskRemoveFromEventList>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800994a:	f000 fe35 	bl	800a5b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	3b01      	subs	r3, #1
 8009952:	b2db      	uxtb	r3, r3
 8009954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995a:	2b00      	cmp	r3, #0
 800995c:	dce9      	bgt.n	8009932 <prvUnlockQueue+0x16>
 800995e:	e000      	b.n	8009962 <prvUnlockQueue+0x46>
					break;
 8009960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	22ff      	movs	r2, #255	@ 0xff
 8009966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800996a:	f001 fca7 	bl	800b2bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800996e:	f001 fc73 	bl	800b258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800997a:	e011      	b.n	80099a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d012      	beq.n	80099aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3310      	adds	r3, #16
 8009988:	4618      	mov	r0, r3
 800998a:	f000 fd0f 	bl	800a3ac <xTaskRemoveFromEventList>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009994:	f000 fe10 	bl	800a5b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	3b01      	subs	r3, #1
 800999c:	b2db      	uxtb	r3, r3
 800999e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dce9      	bgt.n	800997c <prvUnlockQueue+0x60>
 80099a8:	e000      	b.n	80099ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	22ff      	movs	r2, #255	@ 0xff
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80099b4:	f001 fc82 	bl	800b2bc <vPortExitCritical>
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099c8:	f001 fc46 	bl	800b258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80099d4:	2301      	movs	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	e001      	b.n	80099de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099de:	f001 fc6d 	bl	800b2bc <vPortExitCritical>

	return xReturn;
 80099e2:	68fb      	ldr	r3, [r7, #12]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099f4:	f001 fc30 	bl	800b258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d102      	bne.n	8009a0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a04:	2301      	movs	r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	e001      	b.n	8009a0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a0e:	f001 fc55 	bl	800b2bc <vPortExitCritical>

	return xReturn;
 8009a12:	68fb      	ldr	r3, [r7, #12]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e014      	b.n	8009a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8009a6c <vQueueAddToRegistry+0x50>)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10b      	bne.n	8009a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a38:	490c      	ldr	r1, [pc, #48]	@ (8009a6c <vQueueAddToRegistry+0x50>)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a42:	4a0a      	ldr	r2, [pc, #40]	@ (8009a6c <vQueueAddToRegistry+0x50>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	4413      	add	r3, r2
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a4e:	e006      	b.n	8009a5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b07      	cmp	r3, #7
 8009a5a:	d9e7      	bls.n	8009a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	2000641c 	.word	0x2000641c

08009a70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a80:	f001 fbea 	bl	800b258 <vPortEnterCritical>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a8a:	b25b      	sxtb	r3, r3
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a90:	d103      	bne.n	8009a9a <vQueueWaitForMessageRestricted+0x2a>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aa6:	d103      	bne.n	8009ab0 <vQueueWaitForMessageRestricted+0x40>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ab0:	f001 fc04 	bl	800b2bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3324      	adds	r3, #36	@ 0x24
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fc45 	bl	800a354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009aca:	6978      	ldr	r0, [r7, #20]
 8009acc:	f7ff ff26 	bl	800991c <prvUnlockQueue>
	}
 8009ad0:	bf00      	nop
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08e      	sub	sp, #56	@ 0x38
 8009adc:	af04      	add	r7, sp, #16
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10b      	bne.n	8009b04 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	623b      	str	r3, [r7, #32]
}
 8009afe:	bf00      	nop
 8009b00:	bf00      	nop
 8009b02:	e7fd      	b.n	8009b00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10b      	bne.n	8009b22 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	61fb      	str	r3, [r7, #28]
}
 8009b1c:	bf00      	nop
 8009b1e:	bf00      	nop
 8009b20:	e7fd      	b.n	8009b1e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b22:	235c      	movs	r3, #92	@ 0x5c
 8009b24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b2a:	d00b      	beq.n	8009b44 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	61bb      	str	r3, [r7, #24]
}
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
 8009b42:	e7fd      	b.n	8009b40 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01e      	beq.n	8009b8a <xTaskCreateStatic+0xb2>
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01b      	beq.n	8009b8a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b5a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	2202      	movs	r2, #2
 8009b60:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b64:	2300      	movs	r3, #0
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	9302      	str	r3, [sp, #8]
 8009b6c:	f107 0314 	add.w	r3, r7, #20
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 f850 	bl	8009c22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b84:	f000 f8de 	bl	8009d44 <prvAddNewTaskToReadyList>
 8009b88:	e001      	b.n	8009b8e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b8e:	697b      	ldr	r3, [r7, #20]
	}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3728      	adds	r7, #40	@ 0x28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08c      	sub	sp, #48	@ 0x30
 8009b9c:	af04      	add	r7, sp, #16
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ba8:	88fb      	ldrh	r3, [r7, #6]
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 fc75 	bl	800b49c <pvPortMalloc>
 8009bb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00e      	beq.n	8009bd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bba:	205c      	movs	r0, #92	@ 0x5c
 8009bbc:	f001 fc6e 	bl	800b49c <pvPortMalloc>
 8009bc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8009bce:	e005      	b.n	8009bdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009bd0:	6978      	ldr	r0, [r7, #20]
 8009bd2:	f001 fd31 	bl	800b638 <vPortFree>
 8009bd6:	e001      	b.n	8009bdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d017      	beq.n	8009c12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bea:	88fa      	ldrh	r2, [r7, #6]
 8009bec:	2300      	movs	r3, #0
 8009bee:	9303      	str	r3, [sp, #12]
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	9302      	str	r3, [sp, #8]
 8009bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f80e 	bl	8009c22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c06:	69f8      	ldr	r0, [r7, #28]
 8009c08:	f000 f89c 	bl	8009d44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	e002      	b.n	8009c18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c18:	69bb      	ldr	r3, [r7, #24]
	}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3720      	adds	r7, #32
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b088      	sub	sp, #32
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	21a5      	movs	r1, #165	@ 0xa5
 8009c3c:	f011 fcba 	bl	801b5b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	f023 0307 	bic.w	r3, r3, #7
 8009c58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00b      	beq.n	8009c7c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	617b      	str	r3, [r7, #20]
}
 8009c76:	bf00      	nop
 8009c78:	bf00      	nop
 8009c7a:	e7fd      	b.n	8009c78 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d01f      	beq.n	8009cc2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c82:	2300      	movs	r3, #0
 8009c84:	61fb      	str	r3, [r7, #28]
 8009c86:	e012      	b.n	8009cae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	7819      	ldrb	r1, [r3, #0]
 8009c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	3334      	adds	r3, #52	@ 0x34
 8009c98:	460a      	mov	r2, r1
 8009c9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d006      	beq.n	8009cb6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	2b0f      	cmp	r3, #15
 8009cb2:	d9e9      	bls.n	8009c88 <prvInitialiseNewTask+0x66>
 8009cb4:	e000      	b.n	8009cb8 <prvInitialiseNewTask+0x96>
			{
				break;
 8009cb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009cc0:	e003      	b.n	8009cca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ccc:	2b37      	cmp	r3, #55	@ 0x37
 8009cce:	d901      	bls.n	8009cd4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009cd0:	2337      	movs	r3, #55	@ 0x37
 8009cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cde:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff f966 	bl	8008fbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	3318      	adds	r3, #24
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff f961 	bl	8008fbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d0e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d12:	2200      	movs	r2, #0
 8009d14:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	68f9      	ldr	r1, [r7, #12]
 8009d22:	69b8      	ldr	r0, [r7, #24]
 8009d24:	f001 f966 	bl	800aff4 <pxPortInitialiseStack>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d3a:	bf00      	nop
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d4c:	f001 fa84 	bl	800b258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d50:	4b2d      	ldr	r3, [pc, #180]	@ (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	4a2c      	ldr	r2, [pc, #176]	@ (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d62:	4a2a      	ldr	r2, [pc, #168]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d68:	4b27      	ldr	r3, [pc, #156]	@ (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d110      	bne.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d70:	f000 fc46 	bl	800a600 <prvInitialiseTaskLists>
 8009d74:	e00d      	b.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d76:	4b26      	ldr	r3, [pc, #152]	@ (8009e10 <prvAddNewTaskToReadyList+0xcc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d7e:	4b23      	ldr	r3, [pc, #140]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d802      	bhi.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d92:	4b20      	ldr	r3, [pc, #128]	@ (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a1e      	ldr	r2, [pc, #120]	@ (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e18 <prvAddNewTaskToReadyList+0xd4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d903      	bls.n	8009db8 <prvAddNewTaskToReadyList+0x74>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db4:	4a18      	ldr	r2, [pc, #96]	@ (8009e18 <prvAddNewTaskToReadyList+0xd4>)
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4a15      	ldr	r2, [pc, #84]	@ (8009e1c <prvAddNewTaskToReadyList+0xd8>)
 8009dc6:	441a      	add	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7ff f901 	bl	8008fd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009dd4:	f001 fa72 	bl	800b2bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8009e10 <prvAddNewTaskToReadyList+0xcc>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00e      	beq.n	8009dfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009de0:	4b0a      	ldr	r3, [pc, #40]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d207      	bcs.n	8009dfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009dee:	4b0c      	ldr	r3, [pc, #48]	@ (8009e20 <prvAddNewTaskToReadyList+0xdc>)
 8009df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20006930 	.word	0x20006930
 8009e0c:	2000645c 	.word	0x2000645c
 8009e10:	2000693c 	.word	0x2000693c
 8009e14:	2000694c 	.word	0x2000694c
 8009e18:	20006938 	.word	0x20006938
 8009e1c:	20006460 	.word	0x20006460
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d018      	beq.n	8009e68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e36:	4b14      	ldr	r3, [pc, #80]	@ (8009e88 <vTaskDelay+0x64>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <vTaskDelay+0x32>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60bb      	str	r3, [r7, #8]
}
 8009e50:	bf00      	nop
 8009e52:	bf00      	nop
 8009e54:	e7fd      	b.n	8009e52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e56:	f000 f883 	bl	8009f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fd1b 	bl	800a898 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e62:	f000 f88b 	bl	8009f7c <xTaskResumeAll>
 8009e66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d107      	bne.n	8009e7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009e6e:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <vTaskDelay+0x68>)
 8009e70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20006958 	.word	0x20006958
 8009e8c:	e000ed04 	.word	0xe000ed04

08009e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	@ 0x28
 8009e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	1d39      	adds	r1, r7, #4
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff f834 	bl	8008f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	9202      	str	r2, [sp, #8]
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	460a      	mov	r2, r1
 8009ebe:	4922      	ldr	r1, [pc, #136]	@ (8009f48 <vTaskStartScheduler+0xb8>)
 8009ec0:	4822      	ldr	r0, [pc, #136]	@ (8009f4c <vTaskStartScheduler+0xbc>)
 8009ec2:	f7ff fe09 	bl	8009ad8 <xTaskCreateStatic>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a21      	ldr	r2, [pc, #132]	@ (8009f50 <vTaskStartScheduler+0xc0>)
 8009eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ecc:	4b20      	ldr	r3, [pc, #128]	@ (8009f50 <vTaskStartScheduler+0xc0>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	e001      	b.n	8009ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d102      	bne.n	8009eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ee4:	f000 fd2c 	bl	800a940 <xTimerCreateTimerTask>
 8009ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d116      	bne.n	8009f1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f04:	4b13      	ldr	r3, [pc, #76]	@ (8009f54 <vTaskStartScheduler+0xc4>)
 8009f06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f0c:	4b12      	ldr	r3, [pc, #72]	@ (8009f58 <vTaskStartScheduler+0xc8>)
 8009f0e:	2201      	movs	r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f12:	4b12      	ldr	r3, [pc, #72]	@ (8009f5c <vTaskStartScheduler+0xcc>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f18:	f001 f8fa 	bl	800b110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f1c:	e00f      	b.n	8009f3e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f24:	d10b      	bne.n	8009f3e <vTaskStartScheduler+0xae>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60fb      	str	r3, [r7, #12]
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <vTaskStartScheduler+0xaa>
}
 8009f3e:	bf00      	nop
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	0801d908 	.word	0x0801d908
 8009f4c:	0800a5d1 	.word	0x0800a5d1
 8009f50:	20006954 	.word	0x20006954
 8009f54:	20006950 	.word	0x20006950
 8009f58:	2000693c 	.word	0x2000693c
 8009f5c:	20006934 	.word	0x20006934

08009f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f64:	4b04      	ldr	r3, [pc, #16]	@ (8009f78 <vTaskSuspendAll+0x18>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	4a03      	ldr	r2, [pc, #12]	@ (8009f78 <vTaskSuspendAll+0x18>)
 8009f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f6e:	bf00      	nop
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20006958 	.word	0x20006958

08009f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f8a:	4b42      	ldr	r3, [pc, #264]	@ (800a094 <xTaskResumeAll+0x118>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <xTaskResumeAll+0x2e>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	603b      	str	r3, [r7, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009faa:	f001 f955 	bl	800b258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fae:	4b39      	ldr	r3, [pc, #228]	@ (800a094 <xTaskResumeAll+0x118>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	4a37      	ldr	r2, [pc, #220]	@ (800a094 <xTaskResumeAll+0x118>)
 8009fb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb8:	4b36      	ldr	r3, [pc, #216]	@ (800a094 <xTaskResumeAll+0x118>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d162      	bne.n	800a086 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fc0:	4b35      	ldr	r3, [pc, #212]	@ (800a098 <xTaskResumeAll+0x11c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d05e      	beq.n	800a086 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fc8:	e02f      	b.n	800a02a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fca:	4b34      	ldr	r3, [pc, #208]	@ (800a09c <xTaskResumeAll+0x120>)
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3318      	adds	r3, #24
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff f85a 	bl	8009090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff f855 	bl	8009090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fea:	4b2d      	ldr	r3, [pc, #180]	@ (800a0a0 <xTaskResumeAll+0x124>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d903      	bls.n	8009ffa <xTaskResumeAll+0x7e>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff6:	4a2a      	ldr	r2, [pc, #168]	@ (800a0a0 <xTaskResumeAll+0x124>)
 8009ff8:	6013      	str	r3, [r2, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4a27      	ldr	r2, [pc, #156]	@ (800a0a4 <xTaskResumeAll+0x128>)
 800a008:	441a      	add	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3304      	adds	r3, #4
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7fe ffe0 	bl	8008fd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01a:	4b23      	ldr	r3, [pc, #140]	@ (800a0a8 <xTaskResumeAll+0x12c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	429a      	cmp	r2, r3
 800a022:	d302      	bcc.n	800a02a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a024:	4b21      	ldr	r3, [pc, #132]	@ (800a0ac <xTaskResumeAll+0x130>)
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a02a:	4b1c      	ldr	r3, [pc, #112]	@ (800a09c <xTaskResumeAll+0x120>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1cb      	bne.n	8009fca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a038:	f000 fb80 	bl	800a73c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a03c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0b0 <xTaskResumeAll+0x134>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d010      	beq.n	800a06a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a048:	f000 f846 	bl	800a0d8 <xTaskIncrementTick>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a052:	4b16      	ldr	r3, [pc, #88]	@ (800a0ac <xTaskResumeAll+0x130>)
 800a054:	2201      	movs	r2, #1
 800a056:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f1      	bne.n	800a048 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a064:	4b12      	ldr	r3, [pc, #72]	@ (800a0b0 <xTaskResumeAll+0x134>)
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a06a:	4b10      	ldr	r3, [pc, #64]	@ (800a0ac <xTaskResumeAll+0x130>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a072:	2301      	movs	r3, #1
 800a074:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a076:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b4 <xTaskResumeAll+0x138>)
 800a078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a086:	f001 f919 	bl	800b2bc <vPortExitCritical>

	return xAlreadyYielded;
 800a08a:	68bb      	ldr	r3, [r7, #8]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	20006958 	.word	0x20006958
 800a098:	20006930 	.word	0x20006930
 800a09c:	200068f0 	.word	0x200068f0
 800a0a0:	20006938 	.word	0x20006938
 800a0a4:	20006460 	.word	0x20006460
 800a0a8:	2000645c 	.word	0x2000645c
 800a0ac:	20006944 	.word	0x20006944
 800a0b0:	20006940 	.word	0x20006940
 800a0b4:	e000ed04 	.word	0xe000ed04

0800a0b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a0be:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <xTaskGetTickCount+0x1c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0c4:	687b      	ldr	r3, [r7, #4]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20006934 	.word	0x20006934

0800a0d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0e2:	4b4f      	ldr	r3, [pc, #316]	@ (800a220 <xTaskIncrementTick+0x148>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f040 8090 	bne.w	800a20c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0ec:	4b4d      	ldr	r3, [pc, #308]	@ (800a224 <xTaskIncrementTick+0x14c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0f4:	4a4b      	ldr	r2, [pc, #300]	@ (800a224 <xTaskIncrementTick+0x14c>)
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d121      	bne.n	800a144 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a100:	4b49      	ldr	r3, [pc, #292]	@ (800a228 <xTaskIncrementTick+0x150>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00b      	beq.n	800a122 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	603b      	str	r3, [r7, #0]
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	e7fd      	b.n	800a11e <xTaskIncrementTick+0x46>
 800a122:	4b41      	ldr	r3, [pc, #260]	@ (800a228 <xTaskIncrementTick+0x150>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	4b40      	ldr	r3, [pc, #256]	@ (800a22c <xTaskIncrementTick+0x154>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a3e      	ldr	r2, [pc, #248]	@ (800a228 <xTaskIncrementTick+0x150>)
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	4a3e      	ldr	r2, [pc, #248]	@ (800a22c <xTaskIncrementTick+0x154>)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	4b3e      	ldr	r3, [pc, #248]	@ (800a230 <xTaskIncrementTick+0x158>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	4a3c      	ldr	r2, [pc, #240]	@ (800a230 <xTaskIncrementTick+0x158>)
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	f000 fafc 	bl	800a73c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a144:	4b3b      	ldr	r3, [pc, #236]	@ (800a234 <xTaskIncrementTick+0x15c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d349      	bcc.n	800a1e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a14e:	4b36      	ldr	r3, [pc, #216]	@ (800a228 <xTaskIncrementTick+0x150>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a158:	4b36      	ldr	r3, [pc, #216]	@ (800a234 <xTaskIncrementTick+0x15c>)
 800a15a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a15e:	601a      	str	r2, [r3, #0]
					break;
 800a160:	e03f      	b.n	800a1e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a162:	4b31      	ldr	r3, [pc, #196]	@ (800a228 <xTaskIncrementTick+0x150>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	429a      	cmp	r2, r3
 800a178:	d203      	bcs.n	800a182 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a17a:	4a2e      	ldr	r2, [pc, #184]	@ (800a234 <xTaskIncrementTick+0x15c>)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a180:	e02f      	b.n	800a1e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	3304      	adds	r3, #4
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe ff82 	bl	8009090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	3318      	adds	r3, #24
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe ff79 	bl	8009090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a2:	4b25      	ldr	r3, [pc, #148]	@ (800a238 <xTaskIncrementTick+0x160>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d903      	bls.n	800a1b2 <xTaskIncrementTick+0xda>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ae:	4a22      	ldr	r2, [pc, #136]	@ (800a238 <xTaskIncrementTick+0x160>)
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4a1f      	ldr	r2, [pc, #124]	@ (800a23c <xTaskIncrementTick+0x164>)
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	f7fe ff04 	bl	8008fd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a240 <xTaskIncrementTick+0x168>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d3b8      	bcc.n	800a14e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e0:	e7b5      	b.n	800a14e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1e2:	4b17      	ldr	r3, [pc, #92]	@ (800a240 <xTaskIncrementTick+0x168>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e8:	4914      	ldr	r1, [pc, #80]	@ (800a23c <xTaskIncrementTick+0x164>)
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d901      	bls.n	800a1fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1fe:	4b11      	ldr	r3, [pc, #68]	@ (800a244 <xTaskIncrementTick+0x16c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a206:	2301      	movs	r3, #1
 800a208:	617b      	str	r3, [r7, #20]
 800a20a:	e004      	b.n	800a216 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a20c:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <xTaskIncrementTick+0x170>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	4a0d      	ldr	r2, [pc, #52]	@ (800a248 <xTaskIncrementTick+0x170>)
 800a214:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a216:	697b      	ldr	r3, [r7, #20]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20006958 	.word	0x20006958
 800a224:	20006934 	.word	0x20006934
 800a228:	200068e8 	.word	0x200068e8
 800a22c:	200068ec 	.word	0x200068ec
 800a230:	20006948 	.word	0x20006948
 800a234:	20006950 	.word	0x20006950
 800a238:	20006938 	.word	0x20006938
 800a23c:	20006460 	.word	0x20006460
 800a240:	2000645c 	.word	0x2000645c
 800a244:	20006944 	.word	0x20006944
 800a248:	20006940 	.word	0x20006940

0800a24c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a252:	4b28      	ldr	r3, [pc, #160]	@ (800a2f4 <vTaskSwitchContext+0xa8>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a25a:	4b27      	ldr	r3, [pc, #156]	@ (800a2f8 <vTaskSwitchContext+0xac>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a260:	e042      	b.n	800a2e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a262:	4b25      	ldr	r3, [pc, #148]	@ (800a2f8 <vTaskSwitchContext+0xac>)
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a268:	4b24      	ldr	r3, [pc, #144]	@ (800a2fc <vTaskSwitchContext+0xb0>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	e011      	b.n	800a294 <vTaskSwitchContext+0x48>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <vTaskSwitchContext+0x42>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	607b      	str	r3, [r7, #4]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <vTaskSwitchContext+0x3e>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3b01      	subs	r3, #1
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	491a      	ldr	r1, [pc, #104]	@ (800a300 <vTaskSwitchContext+0xb4>)
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	440b      	add	r3, r1
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d0e3      	beq.n	800a270 <vTaskSwitchContext+0x24>
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4a13      	ldr	r2, [pc, #76]	@ (800a300 <vTaskSwitchContext+0xb4>)
 800a2b4:	4413      	add	r3, r2
 800a2b6:	60bb      	str	r3, [r7, #8]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	605a      	str	r2, [r3, #4]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d104      	bne.n	800a2d8 <vTaskSwitchContext+0x8c>
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	605a      	str	r2, [r3, #4]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	4a09      	ldr	r2, [pc, #36]	@ (800a304 <vTaskSwitchContext+0xb8>)
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	4a06      	ldr	r2, [pc, #24]	@ (800a2fc <vTaskSwitchContext+0xb0>)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6013      	str	r3, [r2, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20006958 	.word	0x20006958
 800a2f8:	20006944 	.word	0x20006944
 800a2fc:	20006938 	.word	0x20006938
 800a300:	20006460 	.word	0x20006460
 800a304:	2000645c 	.word	0x2000645c

0800a308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10b      	bne.n	800a330 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	60fb      	str	r3, [r7, #12]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a330:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <vTaskPlaceOnEventList+0x48>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3318      	adds	r3, #24
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7fe fe70 	bl	800901e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a33e:	2101      	movs	r1, #1
 800a340:	6838      	ldr	r0, [r7, #0]
 800a342:	f000 faa9 	bl	800a898 <prvAddCurrentTaskToDelayedList>
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	2000645c 	.word	0x2000645c

0800a354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	617b      	str	r3, [r7, #20]
}
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
 800a37c:	e7fd      	b.n	800a37a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a37e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3318      	adds	r3, #24
 800a384:	4619      	mov	r1, r3
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7fe fe25 	bl	8008fd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a396:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	68b8      	ldr	r0, [r7, #8]
 800a39c:	f000 fa7c 	bl	800a898 <prvAddCurrentTaskToDelayedList>
	}
 800a3a0:	bf00      	nop
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	2000645c 	.word	0x2000645c

0800a3ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	60fb      	str	r3, [r7, #12]
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	e7fd      	b.n	800a3d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	3318      	adds	r3, #24
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fe56 	bl	8009090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a45c <xTaskRemoveFromEventList+0xb0>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d11d      	bne.n	800a428 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe fe4d 	bl	8009090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fa:	4b19      	ldr	r3, [pc, #100]	@ (800a460 <xTaskRemoveFromEventList+0xb4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d903      	bls.n	800a40a <xTaskRemoveFromEventList+0x5e>
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a406:	4a16      	ldr	r2, [pc, #88]	@ (800a460 <xTaskRemoveFromEventList+0xb4>)
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a40e:	4613      	mov	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4a13      	ldr	r2, [pc, #76]	@ (800a464 <xTaskRemoveFromEventList+0xb8>)
 800a418:	441a      	add	r2, r3
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	3304      	adds	r3, #4
 800a41e:	4619      	mov	r1, r3
 800a420:	4610      	mov	r0, r2
 800a422:	f7fe fdd8 	bl	8008fd6 <vListInsertEnd>
 800a426:	e005      	b.n	800a434 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	3318      	adds	r3, #24
 800a42c:	4619      	mov	r1, r3
 800a42e:	480e      	ldr	r0, [pc, #56]	@ (800a468 <xTaskRemoveFromEventList+0xbc>)
 800a430:	f7fe fdd1 	bl	8008fd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a438:	4b0c      	ldr	r3, [pc, #48]	@ (800a46c <xTaskRemoveFromEventList+0xc0>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43e:	429a      	cmp	r2, r3
 800a440:	d905      	bls.n	800a44e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a442:	2301      	movs	r3, #1
 800a444:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a446:	4b0a      	ldr	r3, [pc, #40]	@ (800a470 <xTaskRemoveFromEventList+0xc4>)
 800a448:	2201      	movs	r2, #1
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	e001      	b.n	800a452 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a44e:	2300      	movs	r3, #0
 800a450:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a452:	697b      	ldr	r3, [r7, #20]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20006958 	.word	0x20006958
 800a460:	20006938 	.word	0x20006938
 800a464:	20006460 	.word	0x20006460
 800a468:	200068f0 	.word	0x200068f0
 800a46c:	2000645c 	.word	0x2000645c
 800a470:	20006944 	.word	0x20006944

0800a474 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10b      	bne.n	800a49a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60fb      	str	r3, [r7, #12]
}
 800a494:	bf00      	nop
 800a496:	bf00      	nop
 800a498:	e7fd      	b.n	800a496 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a49a:	f000 fedd 	bl	800b258 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a49e:	4b07      	ldr	r3, [pc, #28]	@ (800a4bc <vTaskSetTimeOutState+0x48>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a4a6:	4b06      	ldr	r3, [pc, #24]	@ (800a4c0 <vTaskSetTimeOutState+0x4c>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a4ae:	f000 ff05 	bl	800b2bc <vPortExitCritical>
}
 800a4b2:	bf00      	nop
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20006948 	.word	0x20006948
 800a4c0:	20006934 	.word	0x20006934

0800a4c4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4cc:	4b06      	ldr	r3, [pc, #24]	@ (800a4e8 <vTaskInternalSetTimeOutState+0x24>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4d4:	4b05      	ldr	r3, [pc, #20]	@ (800a4ec <vTaskInternalSetTimeOutState+0x28>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	605a      	str	r2, [r3, #4]
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	20006948 	.word	0x20006948
 800a4ec:	20006934 	.word	0x20006934

0800a4f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10b      	bne.n	800a518 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	613b      	str	r3, [r7, #16]
}
 800a512:	bf00      	nop
 800a514:	bf00      	nop
 800a516:	e7fd      	b.n	800a514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10b      	bne.n	800a536 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60fb      	str	r3, [r7, #12]
}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	e7fd      	b.n	800a532 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a536:	f000 fe8f 	bl	800b258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a53a:	4b1d      	ldr	r3, [pc, #116]	@ (800a5b0 <xTaskCheckForTimeOut+0xc0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a552:	d102      	bne.n	800a55a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	e023      	b.n	800a5a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4b15      	ldr	r3, [pc, #84]	@ (800a5b4 <xTaskCheckForTimeOut+0xc4>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d007      	beq.n	800a576 <xTaskCheckForTimeOut+0x86>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d302      	bcc.n	800a576 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a570:	2301      	movs	r3, #1
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	e015      	b.n	800a5a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d20b      	bcs.n	800a598 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff ff99 	bl	800a4c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a592:	2300      	movs	r3, #0
 800a594:	61fb      	str	r3, [r7, #28]
 800a596:	e004      	b.n	800a5a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5a2:	f000 fe8b 	bl	800b2bc <vPortExitCritical>

	return xReturn;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3720      	adds	r7, #32
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20006934 	.word	0x20006934
 800a5b4:	20006948 	.word	0x20006948

0800a5b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5bc:	4b03      	ldr	r3, [pc, #12]	@ (800a5cc <vTaskMissedYield+0x14>)
 800a5be:	2201      	movs	r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
}
 800a5c2:	bf00      	nop
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	20006944 	.word	0x20006944

0800a5d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5d8:	f000 f852 	bl	800a680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5dc:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <prvIdleTask+0x28>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d9f9      	bls.n	800a5d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5e4:	4b05      	ldr	r3, [pc, #20]	@ (800a5fc <prvIdleTask+0x2c>)
 800a5e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5f4:	e7f0      	b.n	800a5d8 <prvIdleTask+0x8>
 800a5f6:	bf00      	nop
 800a5f8:	20006460 	.word	0x20006460
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a606:	2300      	movs	r3, #0
 800a608:	607b      	str	r3, [r7, #4]
 800a60a:	e00c      	b.n	800a626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	4613      	mov	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4a12      	ldr	r2, [pc, #72]	@ (800a660 <prvInitialiseTaskLists+0x60>)
 800a618:	4413      	add	r3, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fcae 	bl	8008f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3301      	adds	r3, #1
 800a624:	607b      	str	r3, [r7, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b37      	cmp	r3, #55	@ 0x37
 800a62a:	d9ef      	bls.n	800a60c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a62c:	480d      	ldr	r0, [pc, #52]	@ (800a664 <prvInitialiseTaskLists+0x64>)
 800a62e:	f7fe fca5 	bl	8008f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a632:	480d      	ldr	r0, [pc, #52]	@ (800a668 <prvInitialiseTaskLists+0x68>)
 800a634:	f7fe fca2 	bl	8008f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a638:	480c      	ldr	r0, [pc, #48]	@ (800a66c <prvInitialiseTaskLists+0x6c>)
 800a63a:	f7fe fc9f 	bl	8008f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a63e:	480c      	ldr	r0, [pc, #48]	@ (800a670 <prvInitialiseTaskLists+0x70>)
 800a640:	f7fe fc9c 	bl	8008f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a644:	480b      	ldr	r0, [pc, #44]	@ (800a674 <prvInitialiseTaskLists+0x74>)
 800a646:	f7fe fc99 	bl	8008f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a64a:	4b0b      	ldr	r3, [pc, #44]	@ (800a678 <prvInitialiseTaskLists+0x78>)
 800a64c:	4a05      	ldr	r2, [pc, #20]	@ (800a664 <prvInitialiseTaskLists+0x64>)
 800a64e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a650:	4b0a      	ldr	r3, [pc, #40]	@ (800a67c <prvInitialiseTaskLists+0x7c>)
 800a652:	4a05      	ldr	r2, [pc, #20]	@ (800a668 <prvInitialiseTaskLists+0x68>)
 800a654:	601a      	str	r2, [r3, #0]
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20006460 	.word	0x20006460
 800a664:	200068c0 	.word	0x200068c0
 800a668:	200068d4 	.word	0x200068d4
 800a66c:	200068f0 	.word	0x200068f0
 800a670:	20006904 	.word	0x20006904
 800a674:	2000691c 	.word	0x2000691c
 800a678:	200068e8 	.word	0x200068e8
 800a67c:	200068ec 	.word	0x200068ec

0800a680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a686:	e019      	b.n	800a6bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a688:	f000 fde6 	bl	800b258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68c:	4b10      	ldr	r3, [pc, #64]	@ (800a6d0 <prvCheckTasksWaitingTermination+0x50>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe fcf9 	bl	8009090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a69e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d4 <prvCheckTasksWaitingTermination+0x54>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	4a0b      	ldr	r2, [pc, #44]	@ (800a6d4 <prvCheckTasksWaitingTermination+0x54>)
 800a6a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d8 <prvCheckTasksWaitingTermination+0x58>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a6d8 <prvCheckTasksWaitingTermination+0x58>)
 800a6b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6b2:	f000 fe03 	bl	800b2bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f810 	bl	800a6dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6bc:	4b06      	ldr	r3, [pc, #24]	@ (800a6d8 <prvCheckTasksWaitingTermination+0x58>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e1      	bne.n	800a688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20006904 	.word	0x20006904
 800a6d4:	20006930 	.word	0x20006930
 800a6d8:	20006918 	.word	0x20006918

0800a6dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d108      	bne.n	800a700 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 ffa0 	bl	800b638 <vPortFree>
				vPortFree( pxTCB );
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 ff9d 	bl	800b638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6fe:	e019      	b.n	800a734 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a706:	2b01      	cmp	r3, #1
 800a708:	d103      	bne.n	800a712 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 ff94 	bl	800b638 <vPortFree>
	}
 800a710:	e010      	b.n	800a734 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d00b      	beq.n	800a734 <prvDeleteTCB+0x58>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	60fb      	str	r3, [r7, #12]
}
 800a72e:	bf00      	nop
 800a730:	bf00      	nop
 800a732:	e7fd      	b.n	800a730 <prvDeleteTCB+0x54>
	}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a742:	4b0c      	ldr	r3, [pc, #48]	@ (800a774 <prvResetNextTaskUnblockTime+0x38>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d104      	bne.n	800a756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a74c:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <prvResetNextTaskUnblockTime+0x3c>)
 800a74e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a754:	e008      	b.n	800a768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a756:	4b07      	ldr	r3, [pc, #28]	@ (800a774 <prvResetNextTaskUnblockTime+0x38>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	4a04      	ldr	r2, [pc, #16]	@ (800a778 <prvResetNextTaskUnblockTime+0x3c>)
 800a766:	6013      	str	r3, [r2, #0]
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	200068e8 	.word	0x200068e8
 800a778:	20006950 	.word	0x20006950

0800a77c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a782:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b0 <xTaskGetSchedulerState+0x34>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d102      	bne.n	800a790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a78a:	2301      	movs	r3, #1
 800a78c:	607b      	str	r3, [r7, #4]
 800a78e:	e008      	b.n	800a7a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a790:	4b08      	ldr	r3, [pc, #32]	@ (800a7b4 <xTaskGetSchedulerState+0x38>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a798:	2302      	movs	r3, #2
 800a79a:	607b      	str	r3, [r7, #4]
 800a79c:	e001      	b.n	800a7a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7a2:	687b      	ldr	r3, [r7, #4]
	}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	2000693c 	.word	0x2000693c
 800a7b4:	20006958 	.word	0x20006958

0800a7b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d058      	beq.n	800a880 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a88c <xTaskPriorityDisinherit+0xd4>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d00b      	beq.n	800a7f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	60fb      	str	r3, [r7, #12]
}
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	e7fd      	b.n	800a7ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	60bb      	str	r3, [r7, #8]
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a814:	1e5a      	subs	r2, r3, #1
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a822:	429a      	cmp	r2, r3
 800a824:	d02c      	beq.n	800a880 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d128      	bne.n	800a880 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	3304      	adds	r3, #4
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fc2c 	bl	8009090 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a844:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a850:	4b0f      	ldr	r3, [pc, #60]	@ (800a890 <xTaskPriorityDisinherit+0xd8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	429a      	cmp	r2, r3
 800a856:	d903      	bls.n	800a860 <xTaskPriorityDisinherit+0xa8>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85c:	4a0c      	ldr	r2, [pc, #48]	@ (800a890 <xTaskPriorityDisinherit+0xd8>)
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a864:	4613      	mov	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4a09      	ldr	r2, [pc, #36]	@ (800a894 <xTaskPriorityDisinherit+0xdc>)
 800a86e:	441a      	add	r2, r3
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	3304      	adds	r3, #4
 800a874:	4619      	mov	r1, r3
 800a876:	4610      	mov	r0, r2
 800a878:	f7fe fbad 	bl	8008fd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a87c:	2301      	movs	r3, #1
 800a87e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a880:	697b      	ldr	r3, [r7, #20]
	}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000645c 	.word	0x2000645c
 800a890:	20006938 	.word	0x20006938
 800a894:	20006460 	.word	0x20006460

0800a898 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8a2:	4b21      	ldr	r3, [pc, #132]	@ (800a928 <prvAddCurrentTaskToDelayedList+0x90>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8a8:	4b20      	ldr	r3, [pc, #128]	@ (800a92c <prvAddCurrentTaskToDelayedList+0x94>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fbee 	bl	8009090 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8ba:	d10a      	bne.n	800a8d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d007      	beq.n	800a8d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8c2:	4b1a      	ldr	r3, [pc, #104]	@ (800a92c <prvAddCurrentTaskToDelayedList+0x94>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4819      	ldr	r0, [pc, #100]	@ (800a930 <prvAddCurrentTaskToDelayedList+0x98>)
 800a8cc:	f7fe fb83 	bl	8008fd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8d0:	e026      	b.n	800a920 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8da:	4b14      	ldr	r3, [pc, #80]	@ (800a92c <prvAddCurrentTaskToDelayedList+0x94>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d209      	bcs.n	800a8fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8ea:	4b12      	ldr	r3, [pc, #72]	@ (800a934 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a92c <prvAddCurrentTaskToDelayedList+0x94>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	f7fe fb91 	bl	800901e <vListInsert>
}
 800a8fc:	e010      	b.n	800a920 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a938 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	4b0a      	ldr	r3, [pc, #40]	@ (800a92c <prvAddCurrentTaskToDelayedList+0x94>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3304      	adds	r3, #4
 800a908:	4619      	mov	r1, r3
 800a90a:	4610      	mov	r0, r2
 800a90c:	f7fe fb87 	bl	800901e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a910:	4b0a      	ldr	r3, [pc, #40]	@ (800a93c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	429a      	cmp	r2, r3
 800a918:	d202      	bcs.n	800a920 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a91a:	4a08      	ldr	r2, [pc, #32]	@ (800a93c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	6013      	str	r3, [r2, #0]
}
 800a920:	bf00      	nop
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	20006934 	.word	0x20006934
 800a92c:	2000645c 	.word	0x2000645c
 800a930:	2000691c 	.word	0x2000691c
 800a934:	200068ec 	.word	0x200068ec
 800a938:	200068e8 	.word	0x200068e8
 800a93c:	20006950 	.word	0x20006950

0800a940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08a      	sub	sp, #40	@ 0x28
 800a944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a946:	2300      	movs	r3, #0
 800a948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a94a:	f000 fb13 	bl	800af74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a94e:	4b1d      	ldr	r3, [pc, #116]	@ (800a9c4 <xTimerCreateTimerTask+0x84>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d021      	beq.n	800a99a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a95e:	1d3a      	adds	r2, r7, #4
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	f107 030c 	add.w	r3, r7, #12
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fe faed 	bl	8008f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	9202      	str	r2, [sp, #8]
 800a976:	9301      	str	r3, [sp, #4]
 800a978:	2302      	movs	r3, #2
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	2300      	movs	r3, #0
 800a97e:	460a      	mov	r2, r1
 800a980:	4911      	ldr	r1, [pc, #68]	@ (800a9c8 <xTimerCreateTimerTask+0x88>)
 800a982:	4812      	ldr	r0, [pc, #72]	@ (800a9cc <xTimerCreateTimerTask+0x8c>)
 800a984:	f7ff f8a8 	bl	8009ad8 <xTaskCreateStatic>
 800a988:	4603      	mov	r3, r0
 800a98a:	4a11      	ldr	r2, [pc, #68]	@ (800a9d0 <xTimerCreateTimerTask+0x90>)
 800a98c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a98e:	4b10      	ldr	r3, [pc, #64]	@ (800a9d0 <xTimerCreateTimerTask+0x90>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a996:	2301      	movs	r3, #1
 800a998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10b      	bne.n	800a9b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	613b      	str	r3, [r7, #16]
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	e7fd      	b.n	800a9b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a9b8:	697b      	ldr	r3, [r7, #20]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3718      	adds	r7, #24
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	2000698c 	.word	0x2000698c
 800a9c8:	0801d910 	.word	0x0801d910
 800a9cc:	0800ab0d 	.word	0x0800ab0d
 800a9d0:	20006990 	.word	0x20006990

0800a9d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08a      	sub	sp, #40	@ 0x28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10b      	bne.n	800aa04 <xTimerGenericCommand+0x30>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	623b      	str	r3, [r7, #32]
}
 800a9fe:	bf00      	nop
 800aa00:	bf00      	nop
 800aa02:	e7fd      	b.n	800aa00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa04:	4b19      	ldr	r3, [pc, #100]	@ (800aa6c <xTimerGenericCommand+0x98>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d02a      	beq.n	800aa62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	dc18      	bgt.n	800aa50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa1e:	f7ff fead 	bl	800a77c <xTaskGetSchedulerState>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d109      	bne.n	800aa3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa28:	4b10      	ldr	r3, [pc, #64]	@ (800aa6c <xTimerGenericCommand+0x98>)
 800aa2a:	6818      	ldr	r0, [r3, #0]
 800aa2c:	f107 0110 	add.w	r1, r7, #16
 800aa30:	2300      	movs	r3, #0
 800aa32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa34:	f7fe fc60 	bl	80092f8 <xQueueGenericSend>
 800aa38:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa3a:	e012      	b.n	800aa62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa3c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa6c <xTimerGenericCommand+0x98>)
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	f107 0110 	add.w	r1, r7, #16
 800aa44:	2300      	movs	r3, #0
 800aa46:	2200      	movs	r2, #0
 800aa48:	f7fe fc56 	bl	80092f8 <xQueueGenericSend>
 800aa4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa4e:	e008      	b.n	800aa62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa50:	4b06      	ldr	r3, [pc, #24]	@ (800aa6c <xTimerGenericCommand+0x98>)
 800aa52:	6818      	ldr	r0, [r3, #0]
 800aa54:	f107 0110 	add.w	r1, r7, #16
 800aa58:	2300      	movs	r3, #0
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	f7fe fd4e 	bl	80094fc <xQueueGenericSendFromISR>
 800aa60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3728      	adds	r7, #40	@ 0x28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	2000698c 	.word	0x2000698c

0800aa70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa7a:	4b23      	ldr	r3, [pc, #140]	@ (800ab08 <prvProcessExpiredTimer+0x98>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	3304      	adds	r3, #4
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fb01 	bl	8009090 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa94:	f003 0304 	and.w	r3, r3, #4
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d023      	beq.n	800aae4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	699a      	ldr	r2, [r3, #24]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	18d1      	adds	r1, r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	6978      	ldr	r0, [r7, #20]
 800aaaa:	f000 f8d5 	bl	800ac58 <prvInsertTimerInActiveList>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d020      	beq.n	800aaf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aab4:	2300      	movs	r3, #0
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	2300      	movs	r3, #0
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	2100      	movs	r1, #0
 800aabe:	6978      	ldr	r0, [r7, #20]
 800aac0:	f7ff ff88 	bl	800a9d4 <xTimerGenericCommand>
 800aac4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d114      	bne.n	800aaf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	60fb      	str	r3, [r7, #12]
}
 800aade:	bf00      	nop
 800aae0:	bf00      	nop
 800aae2:	e7fd      	b.n	800aae0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaea:	f023 0301 	bic.w	r3, r3, #1
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	6978      	ldr	r0, [r7, #20]
 800aafc:	4798      	blx	r3
}
 800aafe:	bf00      	nop
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20006984 	.word	0x20006984

0800ab0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab14:	f107 0308 	add.w	r3, r7, #8
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 f859 	bl	800abd0 <prvGetNextExpireTime>
 800ab1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	4619      	mov	r1, r3
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f000 f805 	bl	800ab34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab2a:	f000 f8d7 	bl	800acdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab2e:	bf00      	nop
 800ab30:	e7f0      	b.n	800ab14 <prvTimerTask+0x8>
	...

0800ab34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab3e:	f7ff fa0f 	bl	8009f60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab42:	f107 0308 	add.w	r3, r7, #8
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 f866 	bl	800ac18 <prvSampleTimeNow>
 800ab4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d130      	bne.n	800abb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10a      	bne.n	800ab70 <prvProcessTimerOrBlockTask+0x3c>
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d806      	bhi.n	800ab70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab62:	f7ff fa0b 	bl	8009f7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff ff81 	bl	800aa70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab6e:	e024      	b.n	800abba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d008      	beq.n	800ab88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab76:	4b13      	ldr	r3, [pc, #76]	@ (800abc4 <prvProcessTimerOrBlockTask+0x90>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <prvProcessTimerOrBlockTask+0x50>
 800ab80:	2301      	movs	r3, #1
 800ab82:	e000      	b.n	800ab86 <prvProcessTimerOrBlockTask+0x52>
 800ab84:	2300      	movs	r3, #0
 800ab86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab88:	4b0f      	ldr	r3, [pc, #60]	@ (800abc8 <prvProcessTimerOrBlockTask+0x94>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	4619      	mov	r1, r3
 800ab96:	f7fe ff6b 	bl	8009a70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab9a:	f7ff f9ef 	bl	8009f7c <xTaskResumeAll>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aba4:	4b09      	ldr	r3, [pc, #36]	@ (800abcc <prvProcessTimerOrBlockTask+0x98>)
 800aba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	f3bf 8f6f 	isb	sy
}
 800abb4:	e001      	b.n	800abba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abb6:	f7ff f9e1 	bl	8009f7c <xTaskResumeAll>
}
 800abba:	bf00      	nop
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20006988 	.word	0x20006988
 800abc8:	2000698c 	.word	0x2000698c
 800abcc:	e000ed04 	.word	0xe000ed04

0800abd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac14 <prvGetNextExpireTime+0x44>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <prvGetNextExpireTime+0x16>
 800abe2:	2201      	movs	r2, #1
 800abe4:	e000      	b.n	800abe8 <prvGetNextExpireTime+0x18>
 800abe6:	2200      	movs	r2, #0
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d105      	bne.n	800ac00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abf4:	4b07      	ldr	r3, [pc, #28]	@ (800ac14 <prvGetNextExpireTime+0x44>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	e001      	b.n	800ac04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac04:	68fb      	ldr	r3, [r7, #12]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20006984 	.word	0x20006984

0800ac18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac20:	f7ff fa4a 	bl	800a0b8 <xTaskGetTickCount>
 800ac24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac26:	4b0b      	ldr	r3, [pc, #44]	@ (800ac54 <prvSampleTimeNow+0x3c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d205      	bcs.n	800ac3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac30:	f000 f93a 	bl	800aea8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	e002      	b.n	800ac42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac42:	4a04      	ldr	r2, [pc, #16]	@ (800ac54 <prvSampleTimeNow+0x3c>)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac48:	68fb      	ldr	r3, [r7, #12]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20006994 	.word	0x20006994

0800ac58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac66:	2300      	movs	r3, #0
 800ac68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d812      	bhi.n	800aca4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	1ad2      	subs	r2, r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d302      	bcc.n	800ac92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]
 800ac90:	e01b      	b.n	800acca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac92:	4b10      	ldr	r3, [pc, #64]	@ (800acd4 <prvInsertTimerInActiveList+0x7c>)
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	f7fe f9be 	bl	800901e <vListInsert>
 800aca2:	e012      	b.n	800acca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d206      	bcs.n	800acba <prvInsertTimerInActiveList+0x62>
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d302      	bcc.n	800acba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800acb4:	2301      	movs	r3, #1
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	e007      	b.n	800acca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acba:	4b07      	ldr	r3, [pc, #28]	@ (800acd8 <prvInsertTimerInActiveList+0x80>)
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3304      	adds	r3, #4
 800acc2:	4619      	mov	r1, r3
 800acc4:	4610      	mov	r0, r2
 800acc6:	f7fe f9aa 	bl	800901e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800acca:	697b      	ldr	r3, [r7, #20]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20006988 	.word	0x20006988
 800acd8:	20006984 	.word	0x20006984

0800acdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08e      	sub	sp, #56	@ 0x38
 800ace0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ace2:	e0ce      	b.n	800ae82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da19      	bge.n	800ad1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acea:	1d3b      	adds	r3, r7, #4
 800acec:	3304      	adds	r3, #4
 800acee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10b      	bne.n	800ad0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	61fb      	str	r3, [r7, #28]
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	e7fd      	b.n	800ad0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad14:	6850      	ldr	r0, [r2, #4]
 800ad16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad18:	6892      	ldr	r2, [r2, #8]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f2c0 80ae 	blt.w	800ae82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d004      	beq.n	800ad3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad34:	3304      	adds	r3, #4
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe f9aa 	bl	8009090 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff ff6a 	bl	800ac18 <prvSampleTimeNow>
 800ad44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b09      	cmp	r3, #9
 800ad4a:	f200 8097 	bhi.w	800ae7c <prvProcessReceivedCommands+0x1a0>
 800ad4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad54 <prvProcessReceivedCommands+0x78>)
 800ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ad7d 	.word	0x0800ad7d
 800ad60:	0800adf3 	.word	0x0800adf3
 800ad64:	0800ae07 	.word	0x0800ae07
 800ad68:	0800ae53 	.word	0x0800ae53
 800ad6c:	0800ad7d 	.word	0x0800ad7d
 800ad70:	0800ad7d 	.word	0x0800ad7d
 800ad74:	0800adf3 	.word	0x0800adf3
 800ad78:	0800ae07 	.word	0x0800ae07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad82:	f043 0301 	orr.w	r3, r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	18d1      	adds	r1, r2, r3
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad9c:	f7ff ff5c 	bl	800ac58 <prvInsertTimerInActiveList>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d06c      	beq.n	800ae80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d061      	beq.n	800ae80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	441a      	add	r2, r3
 800adc4:	2300      	movs	r3, #0
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	2300      	movs	r3, #0
 800adca:	2100      	movs	r1, #0
 800adcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adce:	f7ff fe01 	bl	800a9d4 <xTimerGenericCommand>
 800add2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d152      	bne.n	800ae80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	61bb      	str	r3, [r7, #24]
}
 800adec:	bf00      	nop
 800adee:	bf00      	nop
 800adf0:	e7fd      	b.n	800adee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adf8:	f023 0301 	bic.w	r3, r3, #1
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae04:	e03d      	b.n	800ae82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10b      	bne.n	800ae3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	617b      	str	r3, [r7, #20]
}
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	e7fd      	b.n	800ae3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae40:	699a      	ldr	r2, [r3, #24]
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	18d1      	adds	r1, r2, r3
 800ae46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae4c:	f7ff ff04 	bl	800ac58 <prvInsertTimerInActiveList>
					break;
 800ae50:	e017      	b.n	800ae82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ae60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae62:	f000 fbe9 	bl	800b638 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae66:	e00c      	b.n	800ae82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae6e:	f023 0301 	bic.w	r3, r3, #1
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae7a:	e002      	b.n	800ae82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ae7c:	bf00      	nop
 800ae7e:	e000      	b.n	800ae82 <prvProcessReceivedCommands+0x1a6>
					break;
 800ae80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae82:	4b08      	ldr	r3, [pc, #32]	@ (800aea4 <prvProcessReceivedCommands+0x1c8>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	1d39      	adds	r1, r7, #4
 800ae88:	2200      	movs	r2, #0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe fbd4 	bl	8009638 <xQueueReceive>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f47f af26 	bne.w	800ace4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	3730      	adds	r7, #48	@ 0x30
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	2000698c 	.word	0x2000698c

0800aea8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aeae:	e049      	b.n	800af44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aeb0:	4b2e      	ldr	r3, [pc, #184]	@ (800af6c <prvSwitchTimerLists+0xc4>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeba:	4b2c      	ldr	r3, [pc, #176]	@ (800af6c <prvSwitchTimerLists+0xc4>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3304      	adds	r3, #4
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe f8e1 	bl	8009090 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d02f      	beq.n	800af44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	4413      	add	r3, r2
 800aeec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d90e      	bls.n	800af14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af02:	4b1a      	ldr	r3, [pc, #104]	@ (800af6c <prvSwitchTimerLists+0xc4>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3304      	adds	r3, #4
 800af0a:	4619      	mov	r1, r3
 800af0c:	4610      	mov	r0, r2
 800af0e:	f7fe f886 	bl	800901e <vListInsert>
 800af12:	e017      	b.n	800af44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af14:	2300      	movs	r3, #0
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	2300      	movs	r3, #0
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	2100      	movs	r1, #0
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f7ff fd58 	bl	800a9d4 <xTimerGenericCommand>
 800af24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10b      	bne.n	800af44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	603b      	str	r3, [r7, #0]
}
 800af3e:	bf00      	nop
 800af40:	bf00      	nop
 800af42:	e7fd      	b.n	800af40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af44:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <prvSwitchTimerLists+0xc4>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1b0      	bne.n	800aeb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af4e:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <prvSwitchTimerLists+0xc4>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af54:	4b06      	ldr	r3, [pc, #24]	@ (800af70 <prvSwitchTimerLists+0xc8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a04      	ldr	r2, [pc, #16]	@ (800af6c <prvSwitchTimerLists+0xc4>)
 800af5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af5c:	4a04      	ldr	r2, [pc, #16]	@ (800af70 <prvSwitchTimerLists+0xc8>)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	6013      	str	r3, [r2, #0]
}
 800af62:	bf00      	nop
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20006984 	.word	0x20006984
 800af70:	20006988 	.word	0x20006988

0800af74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af7a:	f000 f96d 	bl	800b258 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af7e:	4b15      	ldr	r3, [pc, #84]	@ (800afd4 <prvCheckForValidListAndQueue+0x60>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d120      	bne.n	800afc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af86:	4814      	ldr	r0, [pc, #80]	@ (800afd8 <prvCheckForValidListAndQueue+0x64>)
 800af88:	f7fd fff8 	bl	8008f7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af8c:	4813      	ldr	r0, [pc, #76]	@ (800afdc <prvCheckForValidListAndQueue+0x68>)
 800af8e:	f7fd fff5 	bl	8008f7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af92:	4b13      	ldr	r3, [pc, #76]	@ (800afe0 <prvCheckForValidListAndQueue+0x6c>)
 800af94:	4a10      	ldr	r2, [pc, #64]	@ (800afd8 <prvCheckForValidListAndQueue+0x64>)
 800af96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af98:	4b12      	ldr	r3, [pc, #72]	@ (800afe4 <prvCheckForValidListAndQueue+0x70>)
 800af9a:	4a10      	ldr	r2, [pc, #64]	@ (800afdc <prvCheckForValidListAndQueue+0x68>)
 800af9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af9e:	2300      	movs	r3, #0
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	4b11      	ldr	r3, [pc, #68]	@ (800afe8 <prvCheckForValidListAndQueue+0x74>)
 800afa4:	4a11      	ldr	r2, [pc, #68]	@ (800afec <prvCheckForValidListAndQueue+0x78>)
 800afa6:	2110      	movs	r1, #16
 800afa8:	200a      	movs	r0, #10
 800afaa:	f7fe f905 	bl	80091b8 <xQueueGenericCreateStatic>
 800afae:	4603      	mov	r3, r0
 800afb0:	4a08      	ldr	r2, [pc, #32]	@ (800afd4 <prvCheckForValidListAndQueue+0x60>)
 800afb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afb4:	4b07      	ldr	r3, [pc, #28]	@ (800afd4 <prvCheckForValidListAndQueue+0x60>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d005      	beq.n	800afc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800afbc:	4b05      	ldr	r3, [pc, #20]	@ (800afd4 <prvCheckForValidListAndQueue+0x60>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	490b      	ldr	r1, [pc, #44]	@ (800aff0 <prvCheckForValidListAndQueue+0x7c>)
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fe fd2a 	bl	8009a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afc8:	f000 f978 	bl	800b2bc <vPortExitCritical>
}
 800afcc:	bf00      	nop
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	2000698c 	.word	0x2000698c
 800afd8:	2000695c 	.word	0x2000695c
 800afdc:	20006970 	.word	0x20006970
 800afe0:	20006984 	.word	0x20006984
 800afe4:	20006988 	.word	0x20006988
 800afe8:	20006a38 	.word	0x20006a38
 800afec:	20006998 	.word	0x20006998
 800aff0:	0801d918 	.word	0x0801d918

0800aff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3b04      	subs	r3, #4
 800b004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3b04      	subs	r3, #4
 800b012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f023 0201 	bic.w	r2, r3, #1
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3b04      	subs	r3, #4
 800b022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b024:	4a0c      	ldr	r2, [pc, #48]	@ (800b058 <pxPortInitialiseStack+0x64>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3b14      	subs	r3, #20
 800b02e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3b04      	subs	r3, #4
 800b03a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f06f 0202 	mvn.w	r2, #2
 800b042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3b20      	subs	r3, #32
 800b048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b04a:	68fb      	ldr	r3, [r7, #12]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	0800b05d 	.word	0x0800b05d

0800b05c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b066:	4b13      	ldr	r3, [pc, #76]	@ (800b0b4 <prvTaskExitError+0x58>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b06e:	d00b      	beq.n	800b088 <prvTaskExitError+0x2c>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	60fb      	str	r3, [r7, #12]
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <prvTaskExitError+0x28>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	60bb      	str	r3, [r7, #8]
}
 800b09a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b09c:	bf00      	nop
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0fc      	beq.n	800b09e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	200000a8 	.word	0x200000a8
	...

0800b0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0c0:	4b07      	ldr	r3, [pc, #28]	@ (800b0e0 <pxCurrentTCBConst2>)
 800b0c2:	6819      	ldr	r1, [r3, #0]
 800b0c4:	6808      	ldr	r0, [r1, #0]
 800b0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ca:	f380 8809 	msr	PSP, r0
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f04f 0000 	mov.w	r0, #0
 800b0d6:	f380 8811 	msr	BASEPRI, r0
 800b0da:	4770      	bx	lr
 800b0dc:	f3af 8000 	nop.w

0800b0e0 <pxCurrentTCBConst2>:
 800b0e0:	2000645c 	.word	0x2000645c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop

0800b0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0e8:	4808      	ldr	r0, [pc, #32]	@ (800b10c <prvPortStartFirstTask+0x24>)
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	6800      	ldr	r0, [r0, #0]
 800b0ee:	f380 8808 	msr	MSP, r0
 800b0f2:	f04f 0000 	mov.w	r0, #0
 800b0f6:	f380 8814 	msr	CONTROL, r0
 800b0fa:	b662      	cpsie	i
 800b0fc:	b661      	cpsie	f
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	df00      	svc	0
 800b108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b10a:	bf00      	nop
 800b10c:	e000ed08 	.word	0xe000ed08

0800b110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b116:	4b47      	ldr	r3, [pc, #284]	@ (800b234 <xPortStartScheduler+0x124>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a47      	ldr	r2, [pc, #284]	@ (800b238 <xPortStartScheduler+0x128>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d10b      	bne.n	800b138 <xPortStartScheduler+0x28>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	613b      	str	r3, [r7, #16]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b138:	4b3e      	ldr	r3, [pc, #248]	@ (800b234 <xPortStartScheduler+0x124>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a3f      	ldr	r2, [pc, #252]	@ (800b23c <xPortStartScheduler+0x12c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d10b      	bne.n	800b15a <xPortStartScheduler+0x4a>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	60fb      	str	r3, [r7, #12]
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop
 800b158:	e7fd      	b.n	800b156 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b15a:	4b39      	ldr	r3, [pc, #228]	@ (800b240 <xPortStartScheduler+0x130>)
 800b15c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	22ff      	movs	r2, #255	@ 0xff
 800b16a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	b2db      	uxtb	r3, r3
 800b172:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b174:	78fb      	ldrb	r3, [r7, #3]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	4b31      	ldr	r3, [pc, #196]	@ (800b244 <xPortStartScheduler+0x134>)
 800b180:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b182:	4b31      	ldr	r3, [pc, #196]	@ (800b248 <xPortStartScheduler+0x138>)
 800b184:	2207      	movs	r2, #7
 800b186:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b188:	e009      	b.n	800b19e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b18a:	4b2f      	ldr	r3, [pc, #188]	@ (800b248 <xPortStartScheduler+0x138>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3b01      	subs	r3, #1
 800b190:	4a2d      	ldr	r2, [pc, #180]	@ (800b248 <xPortStartScheduler+0x138>)
 800b192:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1a6:	2b80      	cmp	r3, #128	@ 0x80
 800b1a8:	d0ef      	beq.n	800b18a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1aa:	4b27      	ldr	r3, [pc, #156]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f1c3 0307 	rsb	r3, r3, #7
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d00b      	beq.n	800b1ce <xPortStartScheduler+0xbe>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60bb      	str	r3, [r7, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	e7fd      	b.n	800b1ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	4a1c      	ldr	r2, [pc, #112]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1e0:	4a19      	ldr	r2, [pc, #100]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1ec:	4b17      	ldr	r3, [pc, #92]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a16      	ldr	r2, [pc, #88]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b1f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1f8:	4b14      	ldr	r3, [pc, #80]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a13      	ldr	r2, [pc, #76]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b204:	f000 f8da 	bl	800b3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b208:	4b11      	ldr	r3, [pc, #68]	@ (800b250 <xPortStartScheduler+0x140>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b20e:	f000 f8f9 	bl	800b404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b212:	4b10      	ldr	r3, [pc, #64]	@ (800b254 <xPortStartScheduler+0x144>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a0f      	ldr	r2, [pc, #60]	@ (800b254 <xPortStartScheduler+0x144>)
 800b218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b21c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b21e:	f7ff ff63 	bl	800b0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b222:	f7ff f813 	bl	800a24c <vTaskSwitchContext>
	prvTaskExitError();
 800b226:	f7ff ff19 	bl	800b05c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	e000ed00 	.word	0xe000ed00
 800b238:	410fc271 	.word	0x410fc271
 800b23c:	410fc270 	.word	0x410fc270
 800b240:	e000e400 	.word	0xe000e400
 800b244:	20006a88 	.word	0x20006a88
 800b248:	20006a8c 	.word	0x20006a8c
 800b24c:	e000ed20 	.word	0xe000ed20
 800b250:	200000a8 	.word	0x200000a8
 800b254:	e000ef34 	.word	0xe000ef34

0800b258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	607b      	str	r3, [r7, #4]
}
 800b270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b272:	4b10      	ldr	r3, [pc, #64]	@ (800b2b4 <vPortEnterCritical+0x5c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3301      	adds	r3, #1
 800b278:	4a0e      	ldr	r2, [pc, #56]	@ (800b2b4 <vPortEnterCritical+0x5c>)
 800b27a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b27c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b4 <vPortEnterCritical+0x5c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d110      	bne.n	800b2a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b284:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b8 <vPortEnterCritical+0x60>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00b      	beq.n	800b2a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	603b      	str	r3, [r7, #0]
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	e7fd      	b.n	800b2a2 <vPortEnterCritical+0x4a>
	}
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	200000a8 	.word	0x200000a8
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2c2:	4b12      	ldr	r3, [pc, #72]	@ (800b30c <vPortExitCritical+0x50>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10b      	bne.n	800b2e2 <vPortExitCritical+0x26>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	607b      	str	r3, [r7, #4]
}
 800b2dc:	bf00      	nop
 800b2de:	bf00      	nop
 800b2e0:	e7fd      	b.n	800b2de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b30c <vPortExitCritical+0x50>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	4a08      	ldr	r2, [pc, #32]	@ (800b30c <vPortExitCritical+0x50>)
 800b2ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2ec:	4b07      	ldr	r3, [pc, #28]	@ (800b30c <vPortExitCritical+0x50>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d105      	bne.n	800b300 <vPortExitCritical+0x44>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f383 8811 	msr	BASEPRI, r3
}
 800b2fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	200000a8 	.word	0x200000a8

0800b310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b310:	f3ef 8009 	mrs	r0, PSP
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	4b15      	ldr	r3, [pc, #84]	@ (800b370 <pxCurrentTCBConst>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	f01e 0f10 	tst.w	lr, #16
 800b320:	bf08      	it	eq
 800b322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	6010      	str	r0, [r2, #0]
 800b32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b334:	f380 8811 	msr	BASEPRI, r0
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f7fe ff84 	bl	800a24c <vTaskSwitchContext>
 800b344:	f04f 0000 	mov.w	r0, #0
 800b348:	f380 8811 	msr	BASEPRI, r0
 800b34c:	bc09      	pop	{r0, r3}
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	6808      	ldr	r0, [r1, #0]
 800b352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b356:	f01e 0f10 	tst.w	lr, #16
 800b35a:	bf08      	it	eq
 800b35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b360:	f380 8809 	msr	PSP, r0
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	f3af 8000 	nop.w

0800b370 <pxCurrentTCBConst>:
 800b370:	2000645c 	.word	0x2000645c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop

0800b378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	607b      	str	r3, [r7, #4]
}
 800b390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b392:	f7fe fea1 	bl	800a0d8 <xTaskIncrementTick>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b39c:	4b06      	ldr	r3, [pc, #24]	@ (800b3b8 <xPortSysTickHandler+0x40>)
 800b39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	f383 8811 	msr	BASEPRI, r3
}
 800b3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f4 <vPortSetupTimerInterrupt+0x38>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f8 <vPortSetupTimerInterrupt+0x3c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b3fc <vPortSetupTimerInterrupt+0x40>)
 800b3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d6:	099b      	lsrs	r3, r3, #6
 800b3d8:	4a09      	ldr	r2, [pc, #36]	@ (800b400 <vPortSetupTimerInterrupt+0x44>)
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3de:	4b04      	ldr	r3, [pc, #16]	@ (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	601a      	str	r2, [r3, #0]
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	e000e010 	.word	0xe000e010
 800b3f4:	e000e018 	.word	0xe000e018
 800b3f8:	20000008 	.word	0x20000008
 800b3fc:	10624dd3 	.word	0x10624dd3
 800b400:	e000e014 	.word	0xe000e014

0800b404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b414 <vPortEnableVFP+0x10>
 800b408:	6801      	ldr	r1, [r0, #0]
 800b40a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b40e:	6001      	str	r1, [r0, #0]
 800b410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b412:	bf00      	nop
 800b414:	e000ed88 	.word	0xe000ed88

0800b418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b41e:	f3ef 8305 	mrs	r3, IPSR
 800b422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	d915      	bls.n	800b456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b42a:	4a18      	ldr	r2, [pc, #96]	@ (800b48c <vPortValidateInterruptPriority+0x74>)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b434:	4b16      	ldr	r3, [pc, #88]	@ (800b490 <vPortValidateInterruptPriority+0x78>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	7afa      	ldrb	r2, [r7, #11]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d20b      	bcs.n	800b456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	e7fd      	b.n	800b452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b456:	4b0f      	ldr	r3, [pc, #60]	@ (800b494 <vPortValidateInterruptPriority+0x7c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b45e:	4b0e      	ldr	r3, [pc, #56]	@ (800b498 <vPortValidateInterruptPriority+0x80>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	429a      	cmp	r2, r3
 800b464:	d90b      	bls.n	800b47e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	603b      	str	r3, [r7, #0]
}
 800b478:	bf00      	nop
 800b47a:	bf00      	nop
 800b47c:	e7fd      	b.n	800b47a <vPortValidateInterruptPriority+0x62>
	}
 800b47e:	bf00      	nop
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	e000e3f0 	.word	0xe000e3f0
 800b490:	20006a88 	.word	0x20006a88
 800b494:	e000ed0c 	.word	0xe000ed0c
 800b498:	20006a8c 	.word	0x20006a8c

0800b49c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	@ 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4a8:	f7fe fd5a 	bl	8009f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4ac:	4b5c      	ldr	r3, [pc, #368]	@ (800b620 <pvPortMalloc+0x184>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4b4:	f000 f924 	bl	800b700 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4b8:	4b5a      	ldr	r3, [pc, #360]	@ (800b624 <pvPortMalloc+0x188>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4013      	ands	r3, r2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f040 8095 	bne.w	800b5f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01e      	beq.n	800b50a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f003 0307 	and.w	r3, r3, #7
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d015      	beq.n	800b50a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f023 0307 	bic.w	r3, r3, #7
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f003 0307 	and.w	r3, r3, #7
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00b      	beq.n	800b50a <pvPortMalloc+0x6e>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	617b      	str	r3, [r7, #20]
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	e7fd      	b.n	800b506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d06f      	beq.n	800b5f0 <pvPortMalloc+0x154>
 800b510:	4b45      	ldr	r3, [pc, #276]	@ (800b628 <pvPortMalloc+0x18c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	429a      	cmp	r2, r3
 800b518:	d86a      	bhi.n	800b5f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b51a:	4b44      	ldr	r3, [pc, #272]	@ (800b62c <pvPortMalloc+0x190>)
 800b51c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b51e:	4b43      	ldr	r3, [pc, #268]	@ (800b62c <pvPortMalloc+0x190>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b524:	e004      	b.n	800b530 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	429a      	cmp	r2, r3
 800b538:	d903      	bls.n	800b542 <pvPortMalloc+0xa6>
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1f1      	bne.n	800b526 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b542:	4b37      	ldr	r3, [pc, #220]	@ (800b620 <pvPortMalloc+0x184>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b548:	429a      	cmp	r2, r3
 800b54a:	d051      	beq.n	800b5f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2208      	movs	r2, #8
 800b552:	4413      	add	r3, r2
 800b554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	1ad2      	subs	r2, r2, r3
 800b566:	2308      	movs	r3, #8
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d920      	bls.n	800b5b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b56e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4413      	add	r3, r2
 800b574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	f003 0307 	and.w	r3, r3, #7
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <pvPortMalloc+0xfc>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	613b      	str	r3, [r7, #16]
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	e7fd      	b.n	800b594 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5aa:	69b8      	ldr	r0, [r7, #24]
 800b5ac:	f000 f90a 	bl	800b7c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5b0:	4b1d      	ldr	r3, [pc, #116]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5be:	4b1a      	ldr	r3, [pc, #104]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b630 <pvPortMalloc+0x194>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d203      	bcs.n	800b5d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5ca:	4b17      	ldr	r3, [pc, #92]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a18      	ldr	r2, [pc, #96]	@ (800b630 <pvPortMalloc+0x194>)
 800b5d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	4b13      	ldr	r3, [pc, #76]	@ (800b624 <pvPortMalloc+0x188>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5e6:	4b13      	ldr	r3, [pc, #76]	@ (800b634 <pvPortMalloc+0x198>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	4a11      	ldr	r2, [pc, #68]	@ (800b634 <pvPortMalloc+0x198>)
 800b5ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5f0:	f7fe fcc4 	bl	8009f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00b      	beq.n	800b616 <pvPortMalloc+0x17a>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	60fb      	str	r3, [r7, #12]
}
 800b610:	bf00      	nop
 800b612:	bf00      	nop
 800b614:	e7fd      	b.n	800b612 <pvPortMalloc+0x176>
	return pvReturn;
 800b616:	69fb      	ldr	r3, [r7, #28]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3728      	adds	r7, #40	@ 0x28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20007698 	.word	0x20007698
 800b624:	200076ac 	.word	0x200076ac
 800b628:	2000769c 	.word	0x2000769c
 800b62c:	20007690 	.word	0x20007690
 800b630:	200076a0 	.word	0x200076a0
 800b634:	200076a4 	.word	0x200076a4

0800b638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d04f      	beq.n	800b6ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b64a:	2308      	movs	r3, #8
 800b64c:	425b      	negs	r3, r3
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	4413      	add	r3, r2
 800b652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	4b25      	ldr	r3, [pc, #148]	@ (800b6f4 <vPortFree+0xbc>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4013      	ands	r3, r2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10b      	bne.n	800b67e <vPortFree+0x46>
	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	60fb      	str	r3, [r7, #12]
}
 800b678:	bf00      	nop
 800b67a:	bf00      	nop
 800b67c:	e7fd      	b.n	800b67a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00b      	beq.n	800b69e <vPortFree+0x66>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60bb      	str	r3, [r7, #8]
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	e7fd      	b.n	800b69a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	4b14      	ldr	r3, [pc, #80]	@ (800b6f4 <vPortFree+0xbc>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d01e      	beq.n	800b6ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11a      	bne.n	800b6ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b6f4 <vPortFree+0xbc>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	43db      	mvns	r3, r3
 800b6be:	401a      	ands	r2, r3
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6c4:	f7fe fc4c 	bl	8009f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <vPortFree+0xc0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	4a09      	ldr	r2, [pc, #36]	@ (800b6f8 <vPortFree+0xc0>)
 800b6d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6d6:	6938      	ldr	r0, [r7, #16]
 800b6d8:	f000 f874 	bl	800b7c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6dc:	4b07      	ldr	r3, [pc, #28]	@ (800b6fc <vPortFree+0xc4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	4a06      	ldr	r2, [pc, #24]	@ (800b6fc <vPortFree+0xc4>)
 800b6e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6e6:	f7fe fc49 	bl	8009f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6ea:	bf00      	nop
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200076ac 	.word	0x200076ac
 800b6f8:	2000769c 	.word	0x2000769c
 800b6fc:	200076a8 	.word	0x200076a8

0800b700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b706:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b70a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b70c:	4b27      	ldr	r3, [pc, #156]	@ (800b7ac <prvHeapInit+0xac>)
 800b70e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f003 0307 	and.w	r3, r3, #7
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00c      	beq.n	800b734 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3307      	adds	r3, #7
 800b71e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f023 0307 	bic.w	r3, r3, #7
 800b726:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7ac <prvHeapInit+0xac>)
 800b730:	4413      	add	r3, r2
 800b732:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b738:	4a1d      	ldr	r2, [pc, #116]	@ (800b7b0 <prvHeapInit+0xb0>)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b73e:	4b1c      	ldr	r3, [pc, #112]	@ (800b7b0 <prvHeapInit+0xb0>)
 800b740:	2200      	movs	r2, #0
 800b742:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	4413      	add	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b74c:	2208      	movs	r2, #8
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	1a9b      	subs	r3, r3, r2
 800b752:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f023 0307 	bic.w	r3, r3, #7
 800b75a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4a15      	ldr	r2, [pc, #84]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b760:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b762:	4b14      	ldr	r3, [pc, #80]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2200      	movs	r2, #0
 800b768:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b76a:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2200      	movs	r2, #0
 800b770:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	1ad2      	subs	r2, r2, r3
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b780:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	4a0a      	ldr	r2, [pc, #40]	@ (800b7b8 <prvHeapInit+0xb8>)
 800b78e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	4a09      	ldr	r2, [pc, #36]	@ (800b7bc <prvHeapInit+0xbc>)
 800b796:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b798:	4b09      	ldr	r3, [pc, #36]	@ (800b7c0 <prvHeapInit+0xc0>)
 800b79a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b79e:	601a      	str	r2, [r3, #0]
}
 800b7a0:	bf00      	nop
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20006a90 	.word	0x20006a90
 800b7b0:	20007690 	.word	0x20007690
 800b7b4:	20007698 	.word	0x20007698
 800b7b8:	200076a0 	.word	0x200076a0
 800b7bc:	2000769c 	.word	0x2000769c
 800b7c0:	200076ac 	.word	0x200076ac

0800b7c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7cc:	4b28      	ldr	r3, [pc, #160]	@ (800b870 <prvInsertBlockIntoFreeList+0xac>)
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	e002      	b.n	800b7d8 <prvInsertBlockIntoFreeList+0x14>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d8f7      	bhi.n	800b7d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d108      	bne.n	800b806 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685a      	ldr	r2, [r3, #4]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	441a      	add	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	441a      	add	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d118      	bne.n	800b84c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	4b15      	ldr	r3, [pc, #84]	@ (800b874 <prvInsertBlockIntoFreeList+0xb0>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d00d      	beq.n	800b842 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	441a      	add	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	e008      	b.n	800b854 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b842:	4b0c      	ldr	r3, [pc, #48]	@ (800b874 <prvInsertBlockIntoFreeList+0xb0>)
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	e003      	b.n	800b854 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d002      	beq.n	800b862 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b862:	bf00      	nop
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20007690 	.word	0x20007690
 800b874:	20007698 	.word	0x20007698

0800b878 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b878:	4b04      	ldr	r3, [pc, #16]	@ (800b88c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	b10a      	cbz	r2, 800b882 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800b87e:	4803      	ldr	r0, [pc, #12]	@ (800b88c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b880:	4770      	bx	lr
 800b882:	4a03      	ldr	r2, [pc, #12]	@ (800b890 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800b884:	4801      	ldr	r0, [pc, #4]	@ (800b88c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b886:	6812      	ldr	r2, [r2, #0]
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	4770      	bx	lr
 800b88c:	200000b4 	.word	0x200000b4
 800b890:	200003bc 	.word	0x200003bc

0800b894 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b894:	4a02      	ldr	r2, [pc, #8]	@ (800b8a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800b896:	4b03      	ldr	r3, [pc, #12]	@ (800b8a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	200003bc 	.word	0x200003bc
 800b8a4:	200000b4 	.word	0x200000b4

0800b8a8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800b8a8:	f006 bcc0 	b.w	801222c <geometry_msgs__msg__Twist__init>

0800b8ac <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800b8ac:	f006 bce2 	b.w	8012274 <geometry_msgs__msg__Twist__fini>

0800b8b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	f000 f819 	bl	800b8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b8b6:	4c07      	ldr	r4, [pc, #28]	@ (800b8d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800b8b8:	60e0      	str	r0, [r4, #12]
 800b8ba:	f000 f815 	bl	800b8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b8be:	4b06      	ldr	r3, [pc, #24]	@ (800b8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800b8c0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	b10a      	cbz	r2, 800b8ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800b8c6:	4804      	ldr	r0, [pc, #16]	@ (800b8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800b8c8:	bd10      	pop	{r4, pc}
 800b8ca:	4a04      	ldr	r2, [pc, #16]	@ (800b8dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800b8cc:	4802      	ldr	r0, [pc, #8]	@ (800b8d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800b8ce:	6812      	ldr	r2, [r2, #0]
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	bd10      	pop	{r4, pc}
 800b8d4:	200000c0 	.word	0x200000c0
 800b8d8:	20000138 	.word	0x20000138
 800b8dc:	200003c0 	.word	0x200003c0

0800b8e0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800b8e0:	f006 bcd4 	b.w	801228c <geometry_msgs__msg__Vector3__init>

0800b8e4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800b8e4:	f006 bcd6 	b.w	8012294 <geometry_msgs__msg__Vector3__fini>

0800b8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800b8e8:	4b04      	ldr	r3, [pc, #16]	@ (800b8fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	b10a      	cbz	r2, 800b8f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800b8ee:	4803      	ldr	r0, [pc, #12]	@ (800b8fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800b8f0:	4770      	bx	lr
 800b8f2:	4a03      	ldr	r2, [pc, #12]	@ (800b900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800b8f4:	4801      	ldr	r0, [pc, #4]	@ (800b8fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800b8f6:	6812      	ldr	r2, [r2, #0]
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	4770      	bx	lr
 800b8fc:	200001f8 	.word	0x200001f8
 800b900:	200003c0 	.word	0x200003c0

0800b904 <get_serialized_size_geometry_msgs__msg__Twist>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4604      	mov	r4, r0
 800b908:	b148      	cbz	r0, 800b91e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800b90a:	460d      	mov	r5, r1
 800b90c:	f000 f860 	bl	800b9d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b910:	4606      	mov	r6, r0
 800b912:	1829      	adds	r1, r5, r0
 800b914:	f104 0018 	add.w	r0, r4, #24
 800b918:	f000 f85a 	bl	800b9d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b91c:	4430      	add	r0, r6
 800b91e:	bd70      	pop	{r4, r5, r6, pc}

0800b920 <_Twist__cdr_deserialize>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	460c      	mov	r4, r1
 800b924:	b189      	cbz	r1, 800b94a <_Twist__cdr_deserialize+0x2a>
 800b926:	4605      	mov	r5, r0
 800b928:	f000 f8de 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b92c:	6843      	ldr	r3, [r0, #4]
 800b92e:	4621      	mov	r1, r4
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	4628      	mov	r0, r5
 800b934:	4798      	blx	r3
 800b936:	f000 f8d7 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b93a:	6843      	ldr	r3, [r0, #4]
 800b93c:	f104 0118 	add.w	r1, r4, #24
 800b940:	4628      	mov	r0, r5
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b948:	4718      	bx	r3
 800b94a:	4608      	mov	r0, r1
 800b94c:	bd70      	pop	{r4, r5, r6, pc}
 800b94e:	bf00      	nop

0800b950 <_Twist__cdr_serialize>:
 800b950:	b510      	push	{r4, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	9101      	str	r1, [sp, #4]
 800b956:	b190      	cbz	r0, 800b97e <_Twist__cdr_serialize+0x2e>
 800b958:	4604      	mov	r4, r0
 800b95a:	f000 f8c5 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b95e:	6843      	ldr	r3, [r0, #4]
 800b960:	9901      	ldr	r1, [sp, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	4620      	mov	r0, r4
 800b966:	4798      	blx	r3
 800b968:	f000 f8be 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b96c:	6843      	ldr	r3, [r0, #4]
 800b96e:	9901      	ldr	r1, [sp, #4]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f104 0018 	add.w	r0, r4, #24
 800b976:	b002      	add	sp, #8
 800b978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b97c:	4718      	bx	r3
 800b97e:	b002      	add	sp, #8
 800b980:	bd10      	pop	{r4, pc}
 800b982:	bf00      	nop

0800b984 <_Twist__get_serialized_size>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4604      	mov	r4, r0
 800b988:	b148      	cbz	r0, 800b99e <_Twist__get_serialized_size+0x1a>
 800b98a:	2100      	movs	r1, #0
 800b98c:	f000 f820 	bl	800b9d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b990:	4605      	mov	r5, r0
 800b992:	4601      	mov	r1, r0
 800b994:	f104 0018 	add.w	r0, r4, #24
 800b998:	f000 f81a 	bl	800b9d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b99c:	4428      	add	r0, r5
 800b99e:	bd38      	pop	{r3, r4, r5, pc}

0800b9a0 <_Twist__max_serialized_size>:
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	f10d 0007 	add.w	r0, sp, #7
 800b9ac:	f88d 3007 	strb.w	r3, [sp, #7]
 800b9b0:	f000 f87e 	bl	800bab0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	f10d 0007 	add.w	r0, sp, #7
 800b9bc:	f000 f878 	bl	800bab0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b9c0:	4420      	add	r0, r4
 800b9c2:	b002      	add	sp, #8
 800b9c4:	bd10      	pop	{r4, pc}
 800b9c6:	bf00      	nop

0800b9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b9c8:	4800      	ldr	r0, [pc, #0]	@ (800b9cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800b9ca:	4770      	bx	lr
 800b9cc:	20000204 	.word	0x20000204

0800b9d0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800b9d0:	b1b8      	cbz	r0, 800ba02 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800b9d2:	b538      	push	{r3, r4, r5, lr}
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	2108      	movs	r1, #8
 800b9da:	f001 fcb1 	bl	800d340 <ucdr_alignment>
 800b9de:	f105 0308 	add.w	r3, r5, #8
 800b9e2:	181c      	adds	r4, r3, r0
 800b9e4:	2108      	movs	r1, #8
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f001 fcaa 	bl	800d340 <ucdr_alignment>
 800b9ec:	3008      	adds	r0, #8
 800b9ee:	4404      	add	r4, r0
 800b9f0:	2108      	movs	r1, #8
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f001 fca4 	bl	800d340 <ucdr_alignment>
 800b9f8:	f1c5 0508 	rsb	r5, r5, #8
 800b9fc:	4428      	add	r0, r5
 800b9fe:	4420      	add	r0, r4
 800ba00:	bd38      	pop	{r3, r4, r5, pc}
 800ba02:	4770      	bx	lr

0800ba04 <_Vector3__cdr_deserialize>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	460c      	mov	r4, r1
 800ba08:	b171      	cbz	r1, 800ba28 <_Vector3__cdr_deserialize+0x24>
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	f001 faac 	bl	800cf68 <ucdr_deserialize_double>
 800ba10:	f104 0108 	add.w	r1, r4, #8
 800ba14:	4628      	mov	r0, r5
 800ba16:	f001 faa7 	bl	800cf68 <ucdr_deserialize_double>
 800ba1a:	f104 0110 	add.w	r1, r4, #16
 800ba1e:	4628      	mov	r0, r5
 800ba20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba24:	f001 baa0 	b.w	800cf68 <ucdr_deserialize_double>
 800ba28:	4608      	mov	r0, r1
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}

0800ba2c <_Vector3__cdr_serialize>:
 800ba2c:	b198      	cbz	r0, 800ba56 <_Vector3__cdr_serialize+0x2a>
 800ba2e:	b538      	push	{r3, r4, r5, lr}
 800ba30:	ed90 0b00 	vldr	d0, [r0]
 800ba34:	460d      	mov	r5, r1
 800ba36:	4604      	mov	r4, r0
 800ba38:	4608      	mov	r0, r1
 800ba3a:	f001 f8f3 	bl	800cc24 <ucdr_serialize_double>
 800ba3e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ba42:	4628      	mov	r0, r5
 800ba44:	f001 f8ee 	bl	800cc24 <ucdr_serialize_double>
 800ba48:	ed94 0b04 	vldr	d0, [r4, #16]
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba52:	f001 b8e7 	b.w	800cc24 <ucdr_serialize_double>
 800ba56:	4770      	bx	lr

0800ba58 <_Vector3__get_serialized_size>:
 800ba58:	b198      	cbz	r0, 800ba82 <_Vector3__get_serialized_size+0x2a>
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	2108      	movs	r1, #8
 800ba5e:	2000      	movs	r0, #0
 800ba60:	f001 fc6e 	bl	800d340 <ucdr_alignment>
 800ba64:	f100 0408 	add.w	r4, r0, #8
 800ba68:	2108      	movs	r1, #8
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f001 fc68 	bl	800d340 <ucdr_alignment>
 800ba70:	3008      	adds	r0, #8
 800ba72:	4404      	add	r4, r0
 800ba74:	2108      	movs	r1, #8
 800ba76:	4620      	mov	r0, r4
 800ba78:	f001 fc62 	bl	800d340 <ucdr_alignment>
 800ba7c:	3008      	adds	r0, #8
 800ba7e:	4420      	add	r0, r4
 800ba80:	bd10      	pop	{r4, pc}
 800ba82:	4770      	bx	lr

0800ba84 <_Vector3__max_serialized_size>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	2108      	movs	r1, #8
 800ba88:	2000      	movs	r0, #0
 800ba8a:	f001 fc59 	bl	800d340 <ucdr_alignment>
 800ba8e:	f100 0508 	add.w	r5, r0, #8
 800ba92:	2108      	movs	r1, #8
 800ba94:	4628      	mov	r0, r5
 800ba96:	f001 fc53 	bl	800d340 <ucdr_alignment>
 800ba9a:	f100 0408 	add.w	r4, r0, #8
 800ba9e:	442c      	add	r4, r5
 800baa0:	2108      	movs	r1, #8
 800baa2:	4620      	mov	r0, r4
 800baa4:	f001 fc4c 	bl	800d340 <ucdr_alignment>
 800baa8:	3008      	adds	r0, #8
 800baaa:	4420      	add	r0, r4
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop

0800bab0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	2301      	movs	r3, #1
 800bab4:	460c      	mov	r4, r1
 800bab6:	7003      	strb	r3, [r0, #0]
 800bab8:	2108      	movs	r1, #8
 800baba:	4620      	mov	r0, r4
 800babc:	f001 fc40 	bl	800d340 <ucdr_alignment>
 800bac0:	f104 0508 	add.w	r5, r4, #8
 800bac4:	1946      	adds	r6, r0, r5
 800bac6:	2108      	movs	r1, #8
 800bac8:	4630      	mov	r0, r6
 800baca:	f001 fc39 	bl	800d340 <ucdr_alignment>
 800bace:	f100 0508 	add.w	r5, r0, #8
 800bad2:	4435      	add	r5, r6
 800bad4:	2108      	movs	r1, #8
 800bad6:	4628      	mov	r0, r5
 800bad8:	f001 fc32 	bl	800d340 <ucdr_alignment>
 800badc:	f1c4 0408 	rsb	r4, r4, #8
 800bae0:	4420      	add	r0, r4
 800bae2:	4428      	add	r0, r5
 800bae4:	bd70      	pop	{r4, r5, r6, pc}
 800bae6:	bf00      	nop

0800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bae8:	4800      	ldr	r0, [pc, #0]	@ (800baec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800baea:	4770      	bx	lr
 800baec:	2000022c 	.word	0x2000022c

0800baf0 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800baf0:	4b04      	ldr	r3, [pc, #16]	@ (800bb04 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	b10a      	cbz	r2, 800bafa <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800baf6:	4803      	ldr	r0, [pc, #12]	@ (800bb04 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800baf8:	4770      	bx	lr
 800bafa:	4a03      	ldr	r2, [pc, #12]	@ (800bb08 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800bafc:	4801      	ldr	r0, [pc, #4]	@ (800bb04 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800bafe:	6812      	ldr	r2, [r2, #0]
 800bb00:	601a      	str	r2, [r3, #0]
 800bb02:	4770      	bx	lr
 800bb04:	2000025c 	.word	0x2000025c
 800bb08:	200003bc 	.word	0x200003bc

0800bb0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800bb0c:	4b04      	ldr	r3, [pc, #16]	@ (800bb20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800bb0e:	4805      	ldr	r0, [pc, #20]	@ (800bb24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800bb10:	4905      	ldr	r1, [pc, #20]	@ (800bb28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800bb12:	4a06      	ldr	r2, [pc, #24]	@ (800bb2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6003      	str	r3, [r0, #0]
 800bb18:	600b      	str	r3, [r1, #0]
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	200003bc 	.word	0x200003bc
 800bb24:	20000278 	.word	0x20000278
 800bb28:	20000284 	.word	0x20000284
 800bb2c:	2000025c 	.word	0x2000025c

0800bb30 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800bb30:	f006 bc7c 	b.w	801242c <imu_interfaces__srv__ImuCalibration_Request__init>

0800bb34 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800bb34:	f006 bc8c 	b.w	8012450 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800bb38 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800bb38:	f006 bc8e 	b.w	8012458 <imu_interfaces__srv__ImuCalibration_Response__init>

0800bb3c <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800bb3c:	f006 bc90 	b.w	8012460 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800bb40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800bb40:	b508      	push	{r3, lr}
 800bb42:	f005 fedd 	bl	8011900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800bb46:	4b06      	ldr	r3, [pc, #24]	@ (800bb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800bb48:	4906      	ldr	r1, [pc, #24]	@ (800bb64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	60c8      	str	r0, [r1, #12]
 800bb4e:	b10a      	cbz	r2, 800bb54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800bb50:	4803      	ldr	r0, [pc, #12]	@ (800bb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800bb52:	bd08      	pop	{r3, pc}
 800bb54:	4a04      	ldr	r2, [pc, #16]	@ (800bb68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800bb56:	4802      	ldr	r0, [pc, #8]	@ (800bb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	bd08      	pop	{r3, pc}
 800bb5e:	bf00      	nop
 800bb60:	200002cc 	.word	0x200002cc
 800bb64:	20000290 	.word	0x20000290
 800bb68:	200003c0 	.word	0x200003c0

0800bb6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800bb6c:	4b04      	ldr	r3, [pc, #16]	@ (800bb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	b10a      	cbz	r2, 800bb76 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800bb72:	4803      	ldr	r0, [pc, #12]	@ (800bb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800bb74:	4770      	bx	lr
 800bb76:	4a03      	ldr	r2, [pc, #12]	@ (800bb84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800bb78:	4801      	ldr	r0, [pc, #4]	@ (800bb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800bb7a:	6812      	ldr	r2, [r2, #0]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	4770      	bx	lr
 800bb80:	20000314 	.word	0x20000314
 800bb84:	200003c0 	.word	0x200003c0

0800bb88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800bb88:	4b16      	ldr	r3, [pc, #88]	@ (800bbe4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	b132      	cbz	r2, 800bb9e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800bb90:	685c      	ldr	r4, [r3, #4]
 800bb92:	68a3      	ldr	r3, [r4, #8]
 800bb94:	b153      	cbz	r3, 800bbac <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800bb96:	68e3      	ldr	r3, [r4, #12]
 800bb98:	b1a3      	cbz	r3, 800bbc4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800bb9a:	4812      	ldr	r0, [pc, #72]	@ (800bbe4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	4a12      	ldr	r2, [pc, #72]	@ (800bbe8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800bba0:	685c      	ldr	r4, [r3, #4]
 800bba2:	6812      	ldr	r2, [r2, #0]
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	68a3      	ldr	r3, [r4, #8]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1f4      	bne.n	800bb96 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800bbac:	f005 fea8 	bl	8011900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800bbb0:	4b0e      	ldr	r3, [pc, #56]	@ (800bbec <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800bbb2:	490f      	ldr	r1, [pc, #60]	@ (800bbf0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	60c8      	str	r0, [r1, #12]
 800bbb8:	b17a      	cbz	r2, 800bbda <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	60a3      	str	r3, [r4, #8]
 800bbbe:	68e3      	ldr	r3, [r4, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1ea      	bne.n	800bb9a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800bbc4:	4b0b      	ldr	r3, [pc, #44]	@ (800bbf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	b11a      	cbz	r2, 800bbd2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	4805      	ldr	r0, [pc, #20]	@ (800bbe4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800bbce:	60e3      	str	r3, [r4, #12]
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	4a05      	ldr	r2, [pc, #20]	@ (800bbe8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800bbd4:	6812      	ldr	r2, [r2, #0]
 800bbd6:	601a      	str	r2, [r3, #0]
 800bbd8:	e7f7      	b.n	800bbca <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800bbda:	4a03      	ldr	r2, [pc, #12]	@ (800bbe8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800bbdc:	6812      	ldr	r2, [r2, #0]
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	e7eb      	b.n	800bbba <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800bbe2:	bf00      	nop
 800bbe4:	20000330 	.word	0x20000330
 800bbe8:	200003c0 	.word	0x200003c0
 800bbec:	200002cc 	.word	0x200002cc
 800bbf0:	20000290 	.word	0x20000290
 800bbf4:	20000314 	.word	0x20000314

0800bbf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800bbf8:	4800      	ldr	r0, [pc, #0]	@ (800bbfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800bbfa:	4770      	bx	lr
 800bbfc:	20000358 	.word	0x20000358

0800bc00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800bc00:	4800      	ldr	r0, [pc, #0]	@ (800bc04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800bc02:	4770      	bx	lr
 800bc04:	20000364 	.word	0x20000364

0800bc08 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800bc08:	b108      	cbz	r0, 800bc0e <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800bc0a:	f005 becb 	b.w	80119a4 <get_serialized_size_sensor_msgs__msg__Imu>
 800bc0e:	4770      	bx	lr

0800bc10 <_ImuCalibration_Request__max_serialized_size>:
 800bc10:	b500      	push	{lr}
 800bc12:	b083      	sub	sp, #12
 800bc14:	2301      	movs	r3, #1
 800bc16:	2100      	movs	r1, #0
 800bc18:	f10d 0007 	add.w	r0, sp, #7
 800bc1c:	f88d 3007 	strb.w	r3, [sp, #7]
 800bc20:	f005 ff3e 	bl	8011aa0 <max_serialized_size_sensor_msgs__msg__Imu>
 800bc24:	b003      	add	sp, #12
 800bc26:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc2a:	bf00      	nop

0800bc2c <_ImuCalibration_Response__max_serialized_size>:
 800bc2c:	b508      	push	{r3, lr}
 800bc2e:	2101      	movs	r1, #1
 800bc30:	2000      	movs	r0, #0
 800bc32:	f001 fb85 	bl	800d340 <ucdr_alignment>
 800bc36:	3001      	adds	r0, #1
 800bc38:	bd08      	pop	{r3, pc}
 800bc3a:	bf00      	nop

0800bc3c <_ImuCalibration_Response__cdr_deserialize>:
 800bc3c:	b109      	cbz	r1, 800bc42 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800bc3e:	f000 b881 	b.w	800bd44 <ucdr_deserialize_bool>
 800bc42:	4608      	mov	r0, r1
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop

0800bc48 <_ImuCalibration_Request__get_serialized_size>:
 800bc48:	b110      	cbz	r0, 800bc50 <_ImuCalibration_Request__get_serialized_size+0x8>
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	f005 beaa 	b.w	80119a4 <get_serialized_size_sensor_msgs__msg__Imu>
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop

0800bc54 <_ImuCalibration_Request__cdr_deserialize>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	460c      	mov	r4, r1
 800bc58:	b149      	cbz	r1, 800bc6e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	f005 ff5a 	bl	8011b14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800bc60:	6843      	ldr	r3, [r0, #4]
 800bc62:	4621      	mov	r1, r4
 800bc64:	4628      	mov	r0, r5
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc6c:	4718      	bx	r3
 800bc6e:	4608      	mov	r0, r1
 800bc70:	bd70      	pop	{r4, r5, r6, pc}
 800bc72:	bf00      	nop

0800bc74 <_ImuCalibration_Request__cdr_serialize>:
 800bc74:	b158      	cbz	r0, 800bc8e <_ImuCalibration_Request__cdr_serialize+0x1a>
 800bc76:	b570      	push	{r4, r5, r6, lr}
 800bc78:	460d      	mov	r5, r1
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	f005 ff4a 	bl	8011b14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800bc80:	6843      	ldr	r3, [r0, #4]
 800bc82:	4629      	mov	r1, r5
 800bc84:	4620      	mov	r0, r4
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc8c:	4718      	bx	r3
 800bc8e:	4770      	bx	lr

0800bc90 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800bc90:	b138      	cbz	r0, 800bca2 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800bc92:	b508      	push	{r3, lr}
 800bc94:	460b      	mov	r3, r1
 800bc96:	4618      	mov	r0, r3
 800bc98:	2101      	movs	r1, #1
 800bc9a:	f001 fb51 	bl	800d340 <ucdr_alignment>
 800bc9e:	3001      	adds	r0, #1
 800bca0:	bd08      	pop	{r3, pc}
 800bca2:	4770      	bx	lr

0800bca4 <_ImuCalibration_Response__cdr_serialize>:
 800bca4:	460a      	mov	r2, r1
 800bca6:	b118      	cbz	r0, 800bcb0 <_ImuCalibration_Response__cdr_serialize+0xc>
 800bca8:	7801      	ldrb	r1, [r0, #0]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	f000 b834 	b.w	800bd18 <ucdr_serialize_bool>
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop

0800bcb4 <_ImuCalibration_Response__get_serialized_size>:
 800bcb4:	b130      	cbz	r0, 800bcc4 <_ImuCalibration_Response__get_serialized_size+0x10>
 800bcb6:	b508      	push	{r3, lr}
 800bcb8:	2101      	movs	r1, #1
 800bcba:	2000      	movs	r0, #0
 800bcbc:	f001 fb40 	bl	800d340 <ucdr_alignment>
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	bd08      	pop	{r3, pc}
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop

0800bcc8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800bcc8:	4800      	ldr	r0, [pc, #0]	@ (800bccc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800bcca:	4770      	bx	lr
 800bccc:	2000034c 	.word	0x2000034c

0800bcd0 <micro_ros_string_utilities_init>:
 800bcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	460f      	mov	r7, r1
 800bcd8:	4604      	mov	r4, r0
 800bcda:	a801      	add	r0, sp, #4
 800bcdc:	f003 f970 	bl	800efc0 <rcutils_get_default_allocator>
 800bce0:	4638      	mov	r0, r7
 800bce2:	f7f4 faa7 	bl	8000234 <strlen>
 800bce6:	f100 0801 	add.w	r8, r0, #1
 800bcea:	9b01      	ldr	r3, [sp, #4]
 800bcec:	9905      	ldr	r1, [sp, #20]
 800bcee:	4605      	mov	r5, r0
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4798      	blx	r3
 800bcf4:	4642      	mov	r2, r8
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	f00f fc5b 	bl	801b5b4 <memset>
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4639      	mov	r1, r7
 800bd02:	4630      	mov	r0, r6
 800bd04:	f00f fd1f 	bl	801b746 <memcpy>
 800bd08:	4620      	mov	r0, r4
 800bd0a:	e9c4 6500 	strd	r6, r5, [r4]
 800bd0e:	f8c4 8008 	str.w	r8, [r4, #8]
 800bd12:	b006      	add	sp, #24
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd18 <ucdr_serialize_bool>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	4604      	mov	r4, r0
 800bd20:	f001 fac2 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800bd24:	b148      	cbz	r0, 800bd3a <ucdr_serialize_bool+0x22>
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	701d      	strb	r5, [r3, #0]
 800bd2a:	68a2      	ldr	r2, [r4, #8]
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	2101      	movs	r1, #1
 800bd30:	440a      	add	r2, r1
 800bd32:	440b      	add	r3, r1
 800bd34:	60a2      	str	r2, [r4, #8]
 800bd36:	6123      	str	r3, [r4, #16]
 800bd38:	7561      	strb	r1, [r4, #21]
 800bd3a:	7da0      	ldrb	r0, [r4, #22]
 800bd3c:	f080 0001 	eor.w	r0, r0, #1
 800bd40:	bd38      	pop	{r3, r4, r5, pc}
 800bd42:	bf00      	nop

0800bd44 <ucdr_deserialize_bool>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	460d      	mov	r5, r1
 800bd48:	2101      	movs	r1, #1
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	f001 faac 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800bd50:	b160      	cbz	r0, 800bd6c <ucdr_deserialize_bool+0x28>
 800bd52:	68a2      	ldr	r2, [r4, #8]
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bd5a:	3900      	subs	r1, #0
 800bd5c:	bf18      	it	ne
 800bd5e:	2101      	movne	r1, #1
 800bd60:	7029      	strb	r1, [r5, #0]
 800bd62:	3301      	adds	r3, #1
 800bd64:	2101      	movs	r1, #1
 800bd66:	60a2      	str	r2, [r4, #8]
 800bd68:	6123      	str	r3, [r4, #16]
 800bd6a:	7561      	strb	r1, [r4, #21]
 800bd6c:	7da0      	ldrb	r0, [r4, #22]
 800bd6e:	f080 0001 	eor.w	r0, r0, #1
 800bd72:	bd38      	pop	{r3, r4, r5, pc}

0800bd74 <ucdr_serialize_uint8_t>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	460d      	mov	r5, r1
 800bd78:	2101      	movs	r1, #1
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	f001 fa94 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800bd80:	b148      	cbz	r0, 800bd96 <ucdr_serialize_uint8_t+0x22>
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	701d      	strb	r5, [r3, #0]
 800bd86:	68a2      	ldr	r2, [r4, #8]
 800bd88:	6923      	ldr	r3, [r4, #16]
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	440a      	add	r2, r1
 800bd8e:	440b      	add	r3, r1
 800bd90:	60a2      	str	r2, [r4, #8]
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	7561      	strb	r1, [r4, #21]
 800bd96:	7da0      	ldrb	r0, [r4, #22]
 800bd98:	f080 0001 	eor.w	r0, r0, #1
 800bd9c:	bd38      	pop	{r3, r4, r5, pc}
 800bd9e:	bf00      	nop

0800bda0 <ucdr_deserialize_uint8_t>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	460d      	mov	r5, r1
 800bda4:	2101      	movs	r1, #1
 800bda6:	4604      	mov	r4, r0
 800bda8:	f001 fa7e 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800bdac:	b150      	cbz	r0, 800bdc4 <ucdr_deserialize_uint8_t+0x24>
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	702b      	strb	r3, [r5, #0]
 800bdb4:	68a2      	ldr	r2, [r4, #8]
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	2101      	movs	r1, #1
 800bdba:	440a      	add	r2, r1
 800bdbc:	440b      	add	r3, r1
 800bdbe:	60a2      	str	r2, [r4, #8]
 800bdc0:	6123      	str	r3, [r4, #16]
 800bdc2:	7561      	strb	r1, [r4, #21]
 800bdc4:	7da0      	ldrb	r0, [r4, #22]
 800bdc6:	f080 0001 	eor.w	r0, r0, #1
 800bdca:	bd38      	pop	{r3, r4, r5, pc}

0800bdcc <ucdr_serialize_uint16_t>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	2102      	movs	r1, #2
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bddc:	f001 fab8 	bl	800d350 <ucdr_buffer_alignment>
 800bde0:	4601      	mov	r1, r0
 800bde2:	4620      	mov	r0, r4
 800bde4:	7d67      	ldrb	r7, [r4, #21]
 800bde6:	f001 faf7 	bl	800d3d8 <ucdr_advance_buffer>
 800bdea:	2102      	movs	r1, #2
 800bdec:	4620      	mov	r0, r4
 800bdee:	f001 fa4f 	bl	800d290 <ucdr_check_buffer_available_for>
 800bdf2:	bb78      	cbnz	r0, 800be54 <ucdr_serialize_uint16_t+0x88>
 800bdf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bdf8:	42ab      	cmp	r3, r5
 800bdfa:	d926      	bls.n	800be4a <ucdr_serialize_uint16_t+0x7e>
 800bdfc:	1b5e      	subs	r6, r3, r5
 800bdfe:	60a3      	str	r3, [r4, #8]
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	f1c6 0802 	rsb	r8, r6, #2
 800be06:	4433      	add	r3, r6
 800be08:	6123      	str	r3, [r4, #16]
 800be0a:	4641      	mov	r1, r8
 800be0c:	4620      	mov	r0, r4
 800be0e:	f001 fa4b 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800be12:	2800      	cmp	r0, #0
 800be14:	d03b      	beq.n	800be8e <ucdr_serialize_uint16_t+0xc2>
 800be16:	7d23      	ldrb	r3, [r4, #20]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d04a      	beq.n	800beb2 <ucdr_serialize_uint16_t+0xe6>
 800be1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be20:	702b      	strb	r3, [r5, #0]
 800be22:	2e00      	cmp	r6, #0
 800be24:	d040      	beq.n	800bea8 <ucdr_serialize_uint16_t+0xdc>
 800be26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be2a:	706b      	strb	r3, [r5, #1]
 800be2c:	6923      	ldr	r3, [r4, #16]
 800be2e:	68a2      	ldr	r2, [r4, #8]
 800be30:	7da0      	ldrb	r0, [r4, #22]
 800be32:	3302      	adds	r3, #2
 800be34:	1b9e      	subs	r6, r3, r6
 800be36:	4442      	add	r2, r8
 800be38:	2302      	movs	r3, #2
 800be3a:	f080 0001 	eor.w	r0, r0, #1
 800be3e:	60a2      	str	r2, [r4, #8]
 800be40:	6126      	str	r6, [r4, #16]
 800be42:	7563      	strb	r3, [r4, #21]
 800be44:	b002      	add	sp, #8
 800be46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4a:	2102      	movs	r1, #2
 800be4c:	4620      	mov	r0, r4
 800be4e:	f001 fa2b 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800be52:	b190      	cbz	r0, 800be7a <ucdr_serialize_uint16_t+0xae>
 800be54:	7d23      	ldrb	r3, [r4, #20]
 800be56:	2b01      	cmp	r3, #1
 800be58:	68a3      	ldr	r3, [r4, #8]
 800be5a:	d014      	beq.n	800be86 <ucdr_serialize_uint16_t+0xba>
 800be5c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be60:	701a      	strb	r2, [r3, #0]
 800be62:	68a3      	ldr	r3, [r4, #8]
 800be64:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be68:	705a      	strb	r2, [r3, #1]
 800be6a:	68a2      	ldr	r2, [r4, #8]
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	3202      	adds	r2, #2
 800be70:	3302      	adds	r3, #2
 800be72:	2102      	movs	r1, #2
 800be74:	60a2      	str	r2, [r4, #8]
 800be76:	6123      	str	r3, [r4, #16]
 800be78:	7561      	strb	r1, [r4, #21]
 800be7a:	7da0      	ldrb	r0, [r4, #22]
 800be7c:	f080 0001 	eor.w	r0, r0, #1
 800be80:	b002      	add	sp, #8
 800be82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800be8a:	801a      	strh	r2, [r3, #0]
 800be8c:	e7ed      	b.n	800be6a <ucdr_serialize_uint16_t+0x9e>
 800be8e:	68a2      	ldr	r2, [r4, #8]
 800be90:	6923      	ldr	r3, [r4, #16]
 800be92:	7da0      	ldrb	r0, [r4, #22]
 800be94:	7567      	strb	r7, [r4, #21]
 800be96:	1b92      	subs	r2, r2, r6
 800be98:	1b9b      	subs	r3, r3, r6
 800be9a:	f080 0001 	eor.w	r0, r0, #1
 800be9e:	60a2      	str	r2, [r4, #8]
 800bea0:	6123      	str	r3, [r4, #16]
 800bea2:	b002      	add	sp, #8
 800bea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800beae:	701a      	strb	r2, [r3, #0]
 800beb0:	e7bc      	b.n	800be2c <ucdr_serialize_uint16_t+0x60>
 800beb2:	4628      	mov	r0, r5
 800beb4:	f10d 0506 	add.w	r5, sp, #6
 800beb8:	4629      	mov	r1, r5
 800beba:	4632      	mov	r2, r6
 800bebc:	f00f fc43 	bl	801b746 <memcpy>
 800bec0:	68a0      	ldr	r0, [r4, #8]
 800bec2:	4642      	mov	r2, r8
 800bec4:	19a9      	adds	r1, r5, r6
 800bec6:	f00f fc3e 	bl	801b746 <memcpy>
 800beca:	e7af      	b.n	800be2c <ucdr_serialize_uint16_t+0x60>

0800becc <ucdr_serialize_endian_uint16_t>:
 800becc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bed0:	b083      	sub	sp, #12
 800bed2:	460d      	mov	r5, r1
 800bed4:	2102      	movs	r1, #2
 800bed6:	4604      	mov	r4, r0
 800bed8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bedc:	f001 fa38 	bl	800d350 <ucdr_buffer_alignment>
 800bee0:	4601      	mov	r1, r0
 800bee2:	4620      	mov	r0, r4
 800bee4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bee8:	f001 fa76 	bl	800d3d8 <ucdr_advance_buffer>
 800beec:	2102      	movs	r1, #2
 800beee:	4620      	mov	r0, r4
 800bef0:	f001 f9ce 	bl	800d290 <ucdr_check_buffer_available_for>
 800bef4:	bb70      	cbnz	r0, 800bf54 <ucdr_serialize_endian_uint16_t+0x88>
 800bef6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800befa:	42be      	cmp	r6, r7
 800befc:	d925      	bls.n	800bf4a <ucdr_serialize_endian_uint16_t+0x7e>
 800befe:	6923      	ldr	r3, [r4, #16]
 800bf00:	60a6      	str	r6, [r4, #8]
 800bf02:	1bf6      	subs	r6, r6, r7
 800bf04:	4433      	add	r3, r6
 800bf06:	f1c6 0902 	rsb	r9, r6, #2
 800bf0a:	6123      	str	r3, [r4, #16]
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f001 f9ca 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d039      	beq.n	800bf8c <ucdr_serialize_endian_uint16_t+0xc0>
 800bf18:	2d01      	cmp	r5, #1
 800bf1a:	d04a      	beq.n	800bfb2 <ucdr_serialize_endian_uint16_t+0xe6>
 800bf1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf20:	703b      	strb	r3, [r7, #0]
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	d040      	beq.n	800bfa8 <ucdr_serialize_endian_uint16_t+0xdc>
 800bf26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf2a:	707b      	strb	r3, [r7, #1]
 800bf2c:	6923      	ldr	r3, [r4, #16]
 800bf2e:	68a2      	ldr	r2, [r4, #8]
 800bf30:	7da0      	ldrb	r0, [r4, #22]
 800bf32:	3302      	adds	r3, #2
 800bf34:	444a      	add	r2, r9
 800bf36:	1b9b      	subs	r3, r3, r6
 800bf38:	2102      	movs	r1, #2
 800bf3a:	f080 0001 	eor.w	r0, r0, #1
 800bf3e:	60a2      	str	r2, [r4, #8]
 800bf40:	6123      	str	r3, [r4, #16]
 800bf42:	7561      	strb	r1, [r4, #21]
 800bf44:	b003      	add	sp, #12
 800bf46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf4a:	2102      	movs	r1, #2
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f001 f9ab 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800bf52:	b188      	cbz	r0, 800bf78 <ucdr_serialize_endian_uint16_t+0xac>
 800bf54:	2d01      	cmp	r5, #1
 800bf56:	68a3      	ldr	r3, [r4, #8]
 800bf58:	d014      	beq.n	800bf84 <ucdr_serialize_endian_uint16_t+0xb8>
 800bf5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	68a3      	ldr	r3, [r4, #8]
 800bf62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf66:	705a      	strb	r2, [r3, #1]
 800bf68:	68a2      	ldr	r2, [r4, #8]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	3202      	adds	r2, #2
 800bf6e:	3302      	adds	r3, #2
 800bf70:	2102      	movs	r1, #2
 800bf72:	60a2      	str	r2, [r4, #8]
 800bf74:	6123      	str	r3, [r4, #16]
 800bf76:	7561      	strb	r1, [r4, #21]
 800bf78:	7da0      	ldrb	r0, [r4, #22]
 800bf7a:	f080 0001 	eor.w	r0, r0, #1
 800bf7e:	b003      	add	sp, #12
 800bf80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bf88:	801a      	strh	r2, [r3, #0]
 800bf8a:	e7ed      	b.n	800bf68 <ucdr_serialize_endian_uint16_t+0x9c>
 800bf8c:	68a2      	ldr	r2, [r4, #8]
 800bf8e:	6923      	ldr	r3, [r4, #16]
 800bf90:	7da0      	ldrb	r0, [r4, #22]
 800bf92:	f884 8015 	strb.w	r8, [r4, #21]
 800bf96:	1b92      	subs	r2, r2, r6
 800bf98:	1b9b      	subs	r3, r3, r6
 800bf9a:	f080 0001 	eor.w	r0, r0, #1
 800bf9e:	60a2      	str	r2, [r4, #8]
 800bfa0:	6123      	str	r3, [r4, #16]
 800bfa2:	b003      	add	sp, #12
 800bfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfa8:	68a3      	ldr	r3, [r4, #8]
 800bfaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfae:	701a      	strb	r2, [r3, #0]
 800bfb0:	e7bc      	b.n	800bf2c <ucdr_serialize_endian_uint16_t+0x60>
 800bfb2:	f10d 0506 	add.w	r5, sp, #6
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4632      	mov	r2, r6
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f00f fbc3 	bl	801b746 <memcpy>
 800bfc0:	68a0      	ldr	r0, [r4, #8]
 800bfc2:	464a      	mov	r2, r9
 800bfc4:	19a9      	adds	r1, r5, r6
 800bfc6:	f00f fbbe 	bl	801b746 <memcpy>
 800bfca:	e7af      	b.n	800bf2c <ucdr_serialize_endian_uint16_t+0x60>

0800bfcc <ucdr_deserialize_uint16_t>:
 800bfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	2102      	movs	r1, #2
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	f001 f9bb 	bl	800d350 <ucdr_buffer_alignment>
 800bfda:	4601      	mov	r1, r0
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bfe2:	f001 f9f9 	bl	800d3d8 <ucdr_advance_buffer>
 800bfe6:	2102      	movs	r1, #2
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f001 f951 	bl	800d290 <ucdr_check_buffer_available_for>
 800bfee:	bb60      	cbnz	r0, 800c04a <ucdr_deserialize_uint16_t+0x7e>
 800bff0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bff4:	42be      	cmp	r6, r7
 800bff6:	d923      	bls.n	800c040 <ucdr_deserialize_uint16_t+0x74>
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	60a6      	str	r6, [r4, #8]
 800bffc:	1bf6      	subs	r6, r6, r7
 800bffe:	4433      	add	r3, r6
 800c000:	f1c6 0902 	rsb	r9, r6, #2
 800c004:	6123      	str	r3, [r4, #16]
 800c006:	4649      	mov	r1, r9
 800c008:	4620      	mov	r0, r4
 800c00a:	f001 f94d 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d034      	beq.n	800c07c <ucdr_deserialize_uint16_t+0xb0>
 800c012:	7d23      	ldrb	r3, [r4, #20]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d042      	beq.n	800c09e <ucdr_deserialize_uint16_t+0xd2>
 800c018:	787b      	ldrb	r3, [r7, #1]
 800c01a:	702b      	strb	r3, [r5, #0]
 800c01c:	2e00      	cmp	r6, #0
 800c01e:	d03a      	beq.n	800c096 <ucdr_deserialize_uint16_t+0xca>
 800c020:	783b      	ldrb	r3, [r7, #0]
 800c022:	706b      	strb	r3, [r5, #1]
 800c024:	6923      	ldr	r3, [r4, #16]
 800c026:	68a2      	ldr	r2, [r4, #8]
 800c028:	7da0      	ldrb	r0, [r4, #22]
 800c02a:	2102      	movs	r1, #2
 800c02c:	3302      	adds	r3, #2
 800c02e:	444a      	add	r2, r9
 800c030:	1b9b      	subs	r3, r3, r6
 800c032:	7561      	strb	r1, [r4, #21]
 800c034:	60a2      	str	r2, [r4, #8]
 800c036:	6123      	str	r3, [r4, #16]
 800c038:	f080 0001 	eor.w	r0, r0, #1
 800c03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c040:	2102      	movs	r1, #2
 800c042:	4620      	mov	r0, r4
 800c044:	f001 f930 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c048:	b180      	cbz	r0, 800c06c <ucdr_deserialize_uint16_t+0xa0>
 800c04a:	7d23      	ldrb	r3, [r4, #20]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	68a3      	ldr	r3, [r4, #8]
 800c050:	d011      	beq.n	800c076 <ucdr_deserialize_uint16_t+0xaa>
 800c052:	785b      	ldrb	r3, [r3, #1]
 800c054:	702b      	strb	r3, [r5, #0]
 800c056:	68a3      	ldr	r3, [r4, #8]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	706b      	strb	r3, [r5, #1]
 800c05c:	68a2      	ldr	r2, [r4, #8]
 800c05e:	6923      	ldr	r3, [r4, #16]
 800c060:	3202      	adds	r2, #2
 800c062:	3302      	adds	r3, #2
 800c064:	2102      	movs	r1, #2
 800c066:	60a2      	str	r2, [r4, #8]
 800c068:	6123      	str	r3, [r4, #16]
 800c06a:	7561      	strb	r1, [r4, #21]
 800c06c:	7da0      	ldrb	r0, [r4, #22]
 800c06e:	f080 0001 	eor.w	r0, r0, #1
 800c072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	802b      	strh	r3, [r5, #0]
 800c07a:	e7ef      	b.n	800c05c <ucdr_deserialize_uint16_t+0x90>
 800c07c:	68a2      	ldr	r2, [r4, #8]
 800c07e:	6923      	ldr	r3, [r4, #16]
 800c080:	7da0      	ldrb	r0, [r4, #22]
 800c082:	f884 8015 	strb.w	r8, [r4, #21]
 800c086:	1b92      	subs	r2, r2, r6
 800c088:	1b9b      	subs	r3, r3, r6
 800c08a:	60a2      	str	r2, [r4, #8]
 800c08c:	6123      	str	r3, [r4, #16]
 800c08e:	f080 0001 	eor.w	r0, r0, #1
 800c092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	706b      	strb	r3, [r5, #1]
 800c09c:	e7c2      	b.n	800c024 <ucdr_deserialize_uint16_t+0x58>
 800c09e:	4639      	mov	r1, r7
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f00f fb4f 	bl	801b746 <memcpy>
 800c0a8:	68a1      	ldr	r1, [r4, #8]
 800c0aa:	464a      	mov	r2, r9
 800c0ac:	19a8      	adds	r0, r5, r6
 800c0ae:	f00f fb4a 	bl	801b746 <memcpy>
 800c0b2:	e7b7      	b.n	800c024 <ucdr_deserialize_uint16_t+0x58>

0800c0b4 <ucdr_deserialize_endian_uint16_t>:
 800c0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b8:	460e      	mov	r6, r1
 800c0ba:	2102      	movs	r1, #2
 800c0bc:	4604      	mov	r4, r0
 800c0be:	4615      	mov	r5, r2
 800c0c0:	f001 f946 	bl	800d350 <ucdr_buffer_alignment>
 800c0c4:	4601      	mov	r1, r0
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c0cc:	f001 f984 	bl	800d3d8 <ucdr_advance_buffer>
 800c0d0:	2102      	movs	r1, #2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f001 f8dc 	bl	800d290 <ucdr_check_buffer_available_for>
 800c0d8:	bb70      	cbnz	r0, 800c138 <ucdr_deserialize_endian_uint16_t+0x84>
 800c0da:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c0de:	4547      	cmp	r7, r8
 800c0e0:	d925      	bls.n	800c12e <ucdr_deserialize_endian_uint16_t+0x7a>
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	60a7      	str	r7, [r4, #8]
 800c0e6:	eba7 0708 	sub.w	r7, r7, r8
 800c0ea:	443b      	add	r3, r7
 800c0ec:	f1c7 0a02 	rsb	sl, r7, #2
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	4651      	mov	r1, sl
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f001 f8d7 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d034      	beq.n	800c168 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c0fe:	2e01      	cmp	r6, #1
 800c100:	d043      	beq.n	800c18a <ucdr_deserialize_endian_uint16_t+0xd6>
 800c102:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c106:	702b      	strb	r3, [r5, #0]
 800c108:	2f00      	cmp	r7, #0
 800c10a:	d03a      	beq.n	800c182 <ucdr_deserialize_endian_uint16_t+0xce>
 800c10c:	f898 3000 	ldrb.w	r3, [r8]
 800c110:	706b      	strb	r3, [r5, #1]
 800c112:	6923      	ldr	r3, [r4, #16]
 800c114:	68a2      	ldr	r2, [r4, #8]
 800c116:	7da0      	ldrb	r0, [r4, #22]
 800c118:	2102      	movs	r1, #2
 800c11a:	3302      	adds	r3, #2
 800c11c:	4452      	add	r2, sl
 800c11e:	1bdb      	subs	r3, r3, r7
 800c120:	7561      	strb	r1, [r4, #21]
 800c122:	60a2      	str	r2, [r4, #8]
 800c124:	6123      	str	r3, [r4, #16]
 800c126:	f080 0001 	eor.w	r0, r0, #1
 800c12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12e:	2102      	movs	r1, #2
 800c130:	4620      	mov	r0, r4
 800c132:	f001 f8b9 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c136:	b178      	cbz	r0, 800c158 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c138:	2e01      	cmp	r6, #1
 800c13a:	68a3      	ldr	r3, [r4, #8]
 800c13c:	d011      	beq.n	800c162 <ucdr_deserialize_endian_uint16_t+0xae>
 800c13e:	785b      	ldrb	r3, [r3, #1]
 800c140:	702b      	strb	r3, [r5, #0]
 800c142:	68a3      	ldr	r3, [r4, #8]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	706b      	strb	r3, [r5, #1]
 800c148:	68a2      	ldr	r2, [r4, #8]
 800c14a:	6923      	ldr	r3, [r4, #16]
 800c14c:	3202      	adds	r2, #2
 800c14e:	3302      	adds	r3, #2
 800c150:	2102      	movs	r1, #2
 800c152:	60a2      	str	r2, [r4, #8]
 800c154:	6123      	str	r3, [r4, #16]
 800c156:	7561      	strb	r1, [r4, #21]
 800c158:	7da0      	ldrb	r0, [r4, #22]
 800c15a:	f080 0001 	eor.w	r0, r0, #1
 800c15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c162:	881b      	ldrh	r3, [r3, #0]
 800c164:	802b      	strh	r3, [r5, #0]
 800c166:	e7ef      	b.n	800c148 <ucdr_deserialize_endian_uint16_t+0x94>
 800c168:	68a2      	ldr	r2, [r4, #8]
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	7da0      	ldrb	r0, [r4, #22]
 800c16e:	f884 9015 	strb.w	r9, [r4, #21]
 800c172:	1bd2      	subs	r2, r2, r7
 800c174:	1bdb      	subs	r3, r3, r7
 800c176:	60a2      	str	r2, [r4, #8]
 800c178:	6123      	str	r3, [r4, #16]
 800c17a:	f080 0001 	eor.w	r0, r0, #1
 800c17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	706b      	strb	r3, [r5, #1]
 800c188:	e7c3      	b.n	800c112 <ucdr_deserialize_endian_uint16_t+0x5e>
 800c18a:	4641      	mov	r1, r8
 800c18c:	463a      	mov	r2, r7
 800c18e:	4628      	mov	r0, r5
 800c190:	f00f fad9 	bl	801b746 <memcpy>
 800c194:	68a1      	ldr	r1, [r4, #8]
 800c196:	4652      	mov	r2, sl
 800c198:	19e8      	adds	r0, r5, r7
 800c19a:	f00f fad4 	bl	801b746 <memcpy>
 800c19e:	e7b8      	b.n	800c112 <ucdr_deserialize_endian_uint16_t+0x5e>

0800c1a0 <ucdr_serialize_uint32_t>:
 800c1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a4:	b082      	sub	sp, #8
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	9101      	str	r1, [sp, #4]
 800c1aa:	2104      	movs	r1, #4
 800c1ac:	f001 f8d0 	bl	800d350 <ucdr_buffer_alignment>
 800c1b0:	4601      	mov	r1, r0
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	7d67      	ldrb	r7, [r4, #21]
 800c1b6:	f001 f90f 	bl	800d3d8 <ucdr_advance_buffer>
 800c1ba:	2104      	movs	r1, #4
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f001 f867 	bl	800d290 <ucdr_check_buffer_available_for>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d139      	bne.n	800c23a <ucdr_serialize_uint32_t+0x9a>
 800c1c6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c1ca:	42ab      	cmp	r3, r5
 800c1cc:	d930      	bls.n	800c230 <ucdr_serialize_uint32_t+0x90>
 800c1ce:	1b5e      	subs	r6, r3, r5
 800c1d0:	60a3      	str	r3, [r4, #8]
 800c1d2:	6923      	ldr	r3, [r4, #16]
 800c1d4:	f1c6 0804 	rsb	r8, r6, #4
 800c1d8:	4433      	add	r3, r6
 800c1da:	6123      	str	r3, [r4, #16]
 800c1dc:	4641      	mov	r1, r8
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f001 f862 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d04c      	beq.n	800c282 <ucdr_serialize_uint32_t+0xe2>
 800c1e8:	7d23      	ldrb	r3, [r4, #20]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d063      	beq.n	800c2b6 <ucdr_serialize_uint32_t+0x116>
 800c1ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1f2:	702b      	strb	r3, [r5, #0]
 800c1f4:	2e00      	cmp	r6, #0
 800c1f6:	d051      	beq.n	800c29c <ucdr_serialize_uint32_t+0xfc>
 800c1f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1fc:	706b      	strb	r3, [r5, #1]
 800c1fe:	2e01      	cmp	r6, #1
 800c200:	d050      	beq.n	800c2a4 <ucdr_serialize_uint32_t+0x104>
 800c202:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c206:	70ab      	strb	r3, [r5, #2]
 800c208:	2e02      	cmp	r6, #2
 800c20a:	d04f      	beq.n	800c2ac <ucdr_serialize_uint32_t+0x10c>
 800c20c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c210:	70eb      	strb	r3, [r5, #3]
 800c212:	6923      	ldr	r3, [r4, #16]
 800c214:	68a2      	ldr	r2, [r4, #8]
 800c216:	7da0      	ldrb	r0, [r4, #22]
 800c218:	3304      	adds	r3, #4
 800c21a:	1b9e      	subs	r6, r3, r6
 800c21c:	4442      	add	r2, r8
 800c21e:	2304      	movs	r3, #4
 800c220:	f080 0001 	eor.w	r0, r0, #1
 800c224:	60a2      	str	r2, [r4, #8]
 800c226:	6126      	str	r6, [r4, #16]
 800c228:	7563      	strb	r3, [r4, #21]
 800c22a:	b002      	add	sp, #8
 800c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c230:	2104      	movs	r1, #4
 800c232:	4620      	mov	r0, r4
 800c234:	f001 f838 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c238:	b1d0      	cbz	r0, 800c270 <ucdr_serialize_uint32_t+0xd0>
 800c23a:	7d23      	ldrb	r3, [r4, #20]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	68a3      	ldr	r3, [r4, #8]
 800c240:	d01c      	beq.n	800c27c <ucdr_serialize_uint32_t+0xdc>
 800c242:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	68a3      	ldr	r3, [r4, #8]
 800c24a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c24e:	705a      	strb	r2, [r3, #1]
 800c250:	68a3      	ldr	r3, [r4, #8]
 800c252:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c256:	709a      	strb	r2, [r3, #2]
 800c258:	68a3      	ldr	r3, [r4, #8]
 800c25a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c25e:	70da      	strb	r2, [r3, #3]
 800c260:	68a2      	ldr	r2, [r4, #8]
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	3204      	adds	r2, #4
 800c266:	3304      	adds	r3, #4
 800c268:	2104      	movs	r1, #4
 800c26a:	60a2      	str	r2, [r4, #8]
 800c26c:	6123      	str	r3, [r4, #16]
 800c26e:	7561      	strb	r1, [r4, #21]
 800c270:	7da0      	ldrb	r0, [r4, #22]
 800c272:	f080 0001 	eor.w	r0, r0, #1
 800c276:	b002      	add	sp, #8
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27c:	9a01      	ldr	r2, [sp, #4]
 800c27e:	601a      	str	r2, [r3, #0]
 800c280:	e7ee      	b.n	800c260 <ucdr_serialize_uint32_t+0xc0>
 800c282:	68a2      	ldr	r2, [r4, #8]
 800c284:	6923      	ldr	r3, [r4, #16]
 800c286:	7da0      	ldrb	r0, [r4, #22]
 800c288:	7567      	strb	r7, [r4, #21]
 800c28a:	1b92      	subs	r2, r2, r6
 800c28c:	1b9b      	subs	r3, r3, r6
 800c28e:	f080 0001 	eor.w	r0, r0, #1
 800c292:	60a2      	str	r2, [r4, #8]
 800c294:	6123      	str	r3, [r4, #16]
 800c296:	b002      	add	sp, #8
 800c298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29c:	68a3      	ldr	r3, [r4, #8]
 800c29e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2a2:	701a      	strb	r2, [r3, #0]
 800c2a4:	68a3      	ldr	r3, [r4, #8]
 800c2a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2aa:	701a      	strb	r2, [r3, #0]
 800c2ac:	68a3      	ldr	r3, [r4, #8]
 800c2ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e7ad      	b.n	800c212 <ucdr_serialize_uint32_t+0x72>
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	ad01      	add	r5, sp, #4
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	4632      	mov	r2, r6
 800c2be:	f00f fa42 	bl	801b746 <memcpy>
 800c2c2:	68a0      	ldr	r0, [r4, #8]
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	19a9      	adds	r1, r5, r6
 800c2c8:	f00f fa3d 	bl	801b746 <memcpy>
 800c2cc:	e7a1      	b.n	800c212 <ucdr_serialize_uint32_t+0x72>
 800c2ce:	bf00      	nop

0800c2d0 <ucdr_serialize_endian_uint32_t>:
 800c2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	2104      	movs	r1, #4
 800c2da:	4604      	mov	r4, r0
 800c2dc:	9201      	str	r2, [sp, #4]
 800c2de:	f001 f837 	bl	800d350 <ucdr_buffer_alignment>
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c2ea:	f001 f875 	bl	800d3d8 <ucdr_advance_buffer>
 800c2ee:	2104      	movs	r1, #4
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f000 ffcd 	bl	800d290 <ucdr_check_buffer_available_for>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d138      	bne.n	800c36c <ucdr_serialize_endian_uint32_t+0x9c>
 800c2fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c2fe:	42b7      	cmp	r7, r6
 800c300:	d92f      	bls.n	800c362 <ucdr_serialize_endian_uint32_t+0x92>
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	60a7      	str	r7, [r4, #8]
 800c306:	1bbf      	subs	r7, r7, r6
 800c308:	443b      	add	r3, r7
 800c30a:	f1c7 0904 	rsb	r9, r7, #4
 800c30e:	6123      	str	r3, [r4, #16]
 800c310:	4649      	mov	r1, r9
 800c312:	4620      	mov	r0, r4
 800c314:	f000 ffc8 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d04a      	beq.n	800c3b2 <ucdr_serialize_endian_uint32_t+0xe2>
 800c31c:	2d01      	cmp	r5, #1
 800c31e:	d063      	beq.n	800c3e8 <ucdr_serialize_endian_uint32_t+0x118>
 800c320:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c324:	7033      	strb	r3, [r6, #0]
 800c326:	2f00      	cmp	r7, #0
 800c328:	d051      	beq.n	800c3ce <ucdr_serialize_endian_uint32_t+0xfe>
 800c32a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c32e:	7073      	strb	r3, [r6, #1]
 800c330:	2f01      	cmp	r7, #1
 800c332:	d050      	beq.n	800c3d6 <ucdr_serialize_endian_uint32_t+0x106>
 800c334:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c338:	70b3      	strb	r3, [r6, #2]
 800c33a:	2f02      	cmp	r7, #2
 800c33c:	d04f      	beq.n	800c3de <ucdr_serialize_endian_uint32_t+0x10e>
 800c33e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c342:	70f3      	strb	r3, [r6, #3]
 800c344:	6923      	ldr	r3, [r4, #16]
 800c346:	68a2      	ldr	r2, [r4, #8]
 800c348:	7da0      	ldrb	r0, [r4, #22]
 800c34a:	3304      	adds	r3, #4
 800c34c:	444a      	add	r2, r9
 800c34e:	1bdb      	subs	r3, r3, r7
 800c350:	2104      	movs	r1, #4
 800c352:	f080 0001 	eor.w	r0, r0, #1
 800c356:	60a2      	str	r2, [r4, #8]
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	7561      	strb	r1, [r4, #21]
 800c35c:	b003      	add	sp, #12
 800c35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c362:	2104      	movs	r1, #4
 800c364:	4620      	mov	r0, r4
 800c366:	f000 ff9f 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c36a:	b1c8      	cbz	r0, 800c3a0 <ucdr_serialize_endian_uint32_t+0xd0>
 800c36c:	2d01      	cmp	r5, #1
 800c36e:	68a3      	ldr	r3, [r4, #8]
 800c370:	d01c      	beq.n	800c3ac <ucdr_serialize_endian_uint32_t+0xdc>
 800c372:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c376:	701a      	strb	r2, [r3, #0]
 800c378:	68a3      	ldr	r3, [r4, #8]
 800c37a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c37e:	705a      	strb	r2, [r3, #1]
 800c380:	68a3      	ldr	r3, [r4, #8]
 800c382:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c386:	709a      	strb	r2, [r3, #2]
 800c388:	68a3      	ldr	r3, [r4, #8]
 800c38a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c38e:	70da      	strb	r2, [r3, #3]
 800c390:	68a2      	ldr	r2, [r4, #8]
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	3204      	adds	r2, #4
 800c396:	3304      	adds	r3, #4
 800c398:	2104      	movs	r1, #4
 800c39a:	60a2      	str	r2, [r4, #8]
 800c39c:	6123      	str	r3, [r4, #16]
 800c39e:	7561      	strb	r1, [r4, #21]
 800c3a0:	7da0      	ldrb	r0, [r4, #22]
 800c3a2:	f080 0001 	eor.w	r0, r0, #1
 800c3a6:	b003      	add	sp, #12
 800c3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3ac:	9a01      	ldr	r2, [sp, #4]
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	e7ee      	b.n	800c390 <ucdr_serialize_endian_uint32_t+0xc0>
 800c3b2:	68a2      	ldr	r2, [r4, #8]
 800c3b4:	6923      	ldr	r3, [r4, #16]
 800c3b6:	7da0      	ldrb	r0, [r4, #22]
 800c3b8:	f884 8015 	strb.w	r8, [r4, #21]
 800c3bc:	1bd2      	subs	r2, r2, r7
 800c3be:	1bdb      	subs	r3, r3, r7
 800c3c0:	f080 0001 	eor.w	r0, r0, #1
 800c3c4:	60a2      	str	r2, [r4, #8]
 800c3c6:	6123      	str	r3, [r4, #16]
 800c3c8:	b003      	add	sp, #12
 800c3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3ce:	68a3      	ldr	r3, [r4, #8]
 800c3d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	68a3      	ldr	r3, [r4, #8]
 800c3d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	68a3      	ldr	r3, [r4, #8]
 800c3e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	e7ad      	b.n	800c344 <ucdr_serialize_endian_uint32_t+0x74>
 800c3e8:	ad01      	add	r5, sp, #4
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	463a      	mov	r2, r7
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f00f f9a9 	bl	801b746 <memcpy>
 800c3f4:	68a0      	ldr	r0, [r4, #8]
 800c3f6:	464a      	mov	r2, r9
 800c3f8:	19e9      	adds	r1, r5, r7
 800c3fa:	f00f f9a4 	bl	801b746 <memcpy>
 800c3fe:	e7a1      	b.n	800c344 <ucdr_serialize_endian_uint32_t+0x74>

0800c400 <ucdr_deserialize_uint32_t>:
 800c400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c404:	460d      	mov	r5, r1
 800c406:	2104      	movs	r1, #4
 800c408:	4604      	mov	r4, r0
 800c40a:	f000 ffa1 	bl	800d350 <ucdr_buffer_alignment>
 800c40e:	4601      	mov	r1, r0
 800c410:	4620      	mov	r0, r4
 800c412:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c416:	f000 ffdf 	bl	800d3d8 <ucdr_advance_buffer>
 800c41a:	2104      	movs	r1, #4
 800c41c:	4620      	mov	r0, r4
 800c41e:	f000 ff37 	bl	800d290 <ucdr_check_buffer_available_for>
 800c422:	2800      	cmp	r0, #0
 800c424:	d138      	bne.n	800c498 <ucdr_deserialize_uint32_t+0x98>
 800c426:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c42a:	42b7      	cmp	r7, r6
 800c42c:	d92f      	bls.n	800c48e <ucdr_deserialize_uint32_t+0x8e>
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	60a7      	str	r7, [r4, #8]
 800c432:	1bbf      	subs	r7, r7, r6
 800c434:	443b      	add	r3, r7
 800c436:	f1c7 0904 	rsb	r9, r7, #4
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	4649      	mov	r1, r9
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 ff32 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c444:	2800      	cmp	r0, #0
 800c446:	d046      	beq.n	800c4d6 <ucdr_deserialize_uint32_t+0xd6>
 800c448:	7d23      	ldrb	r3, [r4, #20]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d05c      	beq.n	800c508 <ucdr_deserialize_uint32_t+0x108>
 800c44e:	78f3      	ldrb	r3, [r6, #3]
 800c450:	702b      	strb	r3, [r5, #0]
 800c452:	2f00      	cmp	r7, #0
 800c454:	d04c      	beq.n	800c4f0 <ucdr_deserialize_uint32_t+0xf0>
 800c456:	78b3      	ldrb	r3, [r6, #2]
 800c458:	706b      	strb	r3, [r5, #1]
 800c45a:	2f01      	cmp	r7, #1
 800c45c:	f105 0302 	add.w	r3, r5, #2
 800c460:	d04a      	beq.n	800c4f8 <ucdr_deserialize_uint32_t+0xf8>
 800c462:	7873      	ldrb	r3, [r6, #1]
 800c464:	70ab      	strb	r3, [r5, #2]
 800c466:	2f02      	cmp	r7, #2
 800c468:	f105 0303 	add.w	r3, r5, #3
 800c46c:	d048      	beq.n	800c500 <ucdr_deserialize_uint32_t+0x100>
 800c46e:	7833      	ldrb	r3, [r6, #0]
 800c470:	70eb      	strb	r3, [r5, #3]
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	68a2      	ldr	r2, [r4, #8]
 800c476:	7da0      	ldrb	r0, [r4, #22]
 800c478:	2104      	movs	r1, #4
 800c47a:	3304      	adds	r3, #4
 800c47c:	444a      	add	r2, r9
 800c47e:	1bdb      	subs	r3, r3, r7
 800c480:	7561      	strb	r1, [r4, #21]
 800c482:	60a2      	str	r2, [r4, #8]
 800c484:	6123      	str	r3, [r4, #16]
 800c486:	f080 0001 	eor.w	r0, r0, #1
 800c48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c48e:	2104      	movs	r1, #4
 800c490:	4620      	mov	r0, r4
 800c492:	f000 ff09 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c496:	b1b0      	cbz	r0, 800c4c6 <ucdr_deserialize_uint32_t+0xc6>
 800c498:	7d23      	ldrb	r3, [r4, #20]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	68a3      	ldr	r3, [r4, #8]
 800c49e:	d017      	beq.n	800c4d0 <ucdr_deserialize_uint32_t+0xd0>
 800c4a0:	78db      	ldrb	r3, [r3, #3]
 800c4a2:	702b      	strb	r3, [r5, #0]
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	789b      	ldrb	r3, [r3, #2]
 800c4a8:	706b      	strb	r3, [r5, #1]
 800c4aa:	68a3      	ldr	r3, [r4, #8]
 800c4ac:	785b      	ldrb	r3, [r3, #1]
 800c4ae:	70ab      	strb	r3, [r5, #2]
 800c4b0:	68a3      	ldr	r3, [r4, #8]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	70eb      	strb	r3, [r5, #3]
 800c4b6:	68a2      	ldr	r2, [r4, #8]
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	3204      	adds	r2, #4
 800c4bc:	3304      	adds	r3, #4
 800c4be:	2104      	movs	r1, #4
 800c4c0:	60a2      	str	r2, [r4, #8]
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	7561      	strb	r1, [r4, #21]
 800c4c6:	7da0      	ldrb	r0, [r4, #22]
 800c4c8:	f080 0001 	eor.w	r0, r0, #1
 800c4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	602b      	str	r3, [r5, #0]
 800c4d4:	e7ef      	b.n	800c4b6 <ucdr_deserialize_uint32_t+0xb6>
 800c4d6:	68a2      	ldr	r2, [r4, #8]
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	7da0      	ldrb	r0, [r4, #22]
 800c4dc:	f884 8015 	strb.w	r8, [r4, #21]
 800c4e0:	1bd2      	subs	r2, r2, r7
 800c4e2:	1bdb      	subs	r3, r3, r7
 800c4e4:	60a2      	str	r2, [r4, #8]
 800c4e6:	6123      	str	r3, [r4, #16]
 800c4e8:	f080 0001 	eor.w	r0, r0, #1
 800c4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f0:	68a3      	ldr	r3, [r4, #8]
 800c4f2:	789b      	ldrb	r3, [r3, #2]
 800c4f4:	706b      	strb	r3, [r5, #1]
 800c4f6:	1cab      	adds	r3, r5, #2
 800c4f8:	68a2      	ldr	r2, [r4, #8]
 800c4fa:	7852      	ldrb	r2, [r2, #1]
 800c4fc:	f803 2b01 	strb.w	r2, [r3], #1
 800c500:	68a2      	ldr	r2, [r4, #8]
 800c502:	7812      	ldrb	r2, [r2, #0]
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	e7b4      	b.n	800c472 <ucdr_deserialize_uint32_t+0x72>
 800c508:	4631      	mov	r1, r6
 800c50a:	463a      	mov	r2, r7
 800c50c:	4628      	mov	r0, r5
 800c50e:	f00f f91a 	bl	801b746 <memcpy>
 800c512:	68a1      	ldr	r1, [r4, #8]
 800c514:	464a      	mov	r2, r9
 800c516:	19e8      	adds	r0, r5, r7
 800c518:	f00f f915 	bl	801b746 <memcpy>
 800c51c:	e7a9      	b.n	800c472 <ucdr_deserialize_uint32_t+0x72>
 800c51e:	bf00      	nop

0800c520 <ucdr_deserialize_endian_uint32_t>:
 800c520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c524:	460e      	mov	r6, r1
 800c526:	2104      	movs	r1, #4
 800c528:	4604      	mov	r4, r0
 800c52a:	4615      	mov	r5, r2
 800c52c:	f000 ff10 	bl	800d350 <ucdr_buffer_alignment>
 800c530:	4601      	mov	r1, r0
 800c532:	4620      	mov	r0, r4
 800c534:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c538:	f000 ff4e 	bl	800d3d8 <ucdr_advance_buffer>
 800c53c:	2104      	movs	r1, #4
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 fea6 	bl	800d290 <ucdr_check_buffer_available_for>
 800c544:	2800      	cmp	r0, #0
 800c546:	d13c      	bne.n	800c5c2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800c548:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c54c:	42bb      	cmp	r3, r7
 800c54e:	d933      	bls.n	800c5b8 <ucdr_deserialize_endian_uint32_t+0x98>
 800c550:	eba3 0807 	sub.w	r8, r3, r7
 800c554:	60a3      	str	r3, [r4, #8]
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	f1c8 0a04 	rsb	sl, r8, #4
 800c55c:	4443      	add	r3, r8
 800c55e:	6123      	str	r3, [r4, #16]
 800c560:	4651      	mov	r1, sl
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fea0 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d048      	beq.n	800c5fe <ucdr_deserialize_endian_uint32_t+0xde>
 800c56c:	2e01      	cmp	r6, #1
 800c56e:	d061      	beq.n	800c634 <ucdr_deserialize_endian_uint32_t+0x114>
 800c570:	78fb      	ldrb	r3, [r7, #3]
 800c572:	702b      	strb	r3, [r5, #0]
 800c574:	f1b8 0f00 	cmp.w	r8, #0
 800c578:	d050      	beq.n	800c61c <ucdr_deserialize_endian_uint32_t+0xfc>
 800c57a:	78bb      	ldrb	r3, [r7, #2]
 800c57c:	706b      	strb	r3, [r5, #1]
 800c57e:	f1b8 0f01 	cmp.w	r8, #1
 800c582:	f105 0302 	add.w	r3, r5, #2
 800c586:	d04d      	beq.n	800c624 <ucdr_deserialize_endian_uint32_t+0x104>
 800c588:	787b      	ldrb	r3, [r7, #1]
 800c58a:	70ab      	strb	r3, [r5, #2]
 800c58c:	f1b8 0f02 	cmp.w	r8, #2
 800c590:	f105 0303 	add.w	r3, r5, #3
 800c594:	d04a      	beq.n	800c62c <ucdr_deserialize_endian_uint32_t+0x10c>
 800c596:	783b      	ldrb	r3, [r7, #0]
 800c598:	70eb      	strb	r3, [r5, #3]
 800c59a:	6923      	ldr	r3, [r4, #16]
 800c59c:	68a2      	ldr	r2, [r4, #8]
 800c59e:	7da0      	ldrb	r0, [r4, #22]
 800c5a0:	2104      	movs	r1, #4
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	4452      	add	r2, sl
 800c5a6:	eba3 0308 	sub.w	r3, r3, r8
 800c5aa:	7561      	strb	r1, [r4, #21]
 800c5ac:	60a2      	str	r2, [r4, #8]
 800c5ae:	6123      	str	r3, [r4, #16]
 800c5b0:	f080 0001 	eor.w	r0, r0, #1
 800c5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b8:	2104      	movs	r1, #4
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 fe74 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c5c0:	b1a8      	cbz	r0, 800c5ee <ucdr_deserialize_endian_uint32_t+0xce>
 800c5c2:	2e01      	cmp	r6, #1
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	d017      	beq.n	800c5f8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c5c8:	78db      	ldrb	r3, [r3, #3]
 800c5ca:	702b      	strb	r3, [r5, #0]
 800c5cc:	68a3      	ldr	r3, [r4, #8]
 800c5ce:	789b      	ldrb	r3, [r3, #2]
 800c5d0:	706b      	strb	r3, [r5, #1]
 800c5d2:	68a3      	ldr	r3, [r4, #8]
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	70ab      	strb	r3, [r5, #2]
 800c5d8:	68a3      	ldr	r3, [r4, #8]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	70eb      	strb	r3, [r5, #3]
 800c5de:	68a2      	ldr	r2, [r4, #8]
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	3204      	adds	r2, #4
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	2104      	movs	r1, #4
 800c5e8:	60a2      	str	r2, [r4, #8]
 800c5ea:	6123      	str	r3, [r4, #16]
 800c5ec:	7561      	strb	r1, [r4, #21]
 800c5ee:	7da0      	ldrb	r0, [r4, #22]
 800c5f0:	f080 0001 	eor.w	r0, r0, #1
 800c5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	602b      	str	r3, [r5, #0]
 800c5fc:	e7ef      	b.n	800c5de <ucdr_deserialize_endian_uint32_t+0xbe>
 800c5fe:	68a2      	ldr	r2, [r4, #8]
 800c600:	6923      	ldr	r3, [r4, #16]
 800c602:	7da0      	ldrb	r0, [r4, #22]
 800c604:	f884 9015 	strb.w	r9, [r4, #21]
 800c608:	eba2 0208 	sub.w	r2, r2, r8
 800c60c:	eba3 0308 	sub.w	r3, r3, r8
 800c610:	60a2      	str	r2, [r4, #8]
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	f080 0001 	eor.w	r0, r0, #1
 800c618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61c:	68a3      	ldr	r3, [r4, #8]
 800c61e:	789b      	ldrb	r3, [r3, #2]
 800c620:	706b      	strb	r3, [r5, #1]
 800c622:	1cab      	adds	r3, r5, #2
 800c624:	68a2      	ldr	r2, [r4, #8]
 800c626:	7852      	ldrb	r2, [r2, #1]
 800c628:	f803 2b01 	strb.w	r2, [r3], #1
 800c62c:	68a2      	ldr	r2, [r4, #8]
 800c62e:	7812      	ldrb	r2, [r2, #0]
 800c630:	701a      	strb	r2, [r3, #0]
 800c632:	e7b2      	b.n	800c59a <ucdr_deserialize_endian_uint32_t+0x7a>
 800c634:	4639      	mov	r1, r7
 800c636:	4642      	mov	r2, r8
 800c638:	4628      	mov	r0, r5
 800c63a:	f00f f884 	bl	801b746 <memcpy>
 800c63e:	68a1      	ldr	r1, [r4, #8]
 800c640:	4652      	mov	r2, sl
 800c642:	eb05 0008 	add.w	r0, r5, r8
 800c646:	f00f f87e 	bl	801b746 <memcpy>
 800c64a:	e7a6      	b.n	800c59a <ucdr_deserialize_endian_uint32_t+0x7a>

0800c64c <ucdr_serialize_uint64_t>:
 800c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	2108      	movs	r1, #8
 800c652:	b082      	sub	sp, #8
 800c654:	4604      	mov	r4, r0
 800c656:	e9cd 2300 	strd	r2, r3, [sp]
 800c65a:	f000 fe79 	bl	800d350 <ucdr_buffer_alignment>
 800c65e:	4601      	mov	r1, r0
 800c660:	4620      	mov	r0, r4
 800c662:	7d67      	ldrb	r7, [r4, #21]
 800c664:	f000 feb8 	bl	800d3d8 <ucdr_advance_buffer>
 800c668:	2108      	movs	r1, #8
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 fe10 	bl	800d290 <ucdr_check_buffer_available_for>
 800c670:	2800      	cmp	r0, #0
 800c672:	d14e      	bne.n	800c712 <ucdr_serialize_uint64_t+0xc6>
 800c674:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c678:	42ab      	cmp	r3, r5
 800c67a:	d945      	bls.n	800c708 <ucdr_serialize_uint64_t+0xbc>
 800c67c:	1b5e      	subs	r6, r3, r5
 800c67e:	60a3      	str	r3, [r4, #8]
 800c680:	6923      	ldr	r3, [r4, #16]
 800c682:	f1c6 0808 	rsb	r8, r6, #8
 800c686:	4433      	add	r3, r6
 800c688:	6123      	str	r3, [r4, #16]
 800c68a:	4641      	mov	r1, r8
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 fe0b 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c692:	2800      	cmp	r0, #0
 800c694:	d074      	beq.n	800c780 <ucdr_serialize_uint64_t+0x134>
 800c696:	7d23      	ldrb	r3, [r4, #20]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	f000 809b 	beq.w	800c7d4 <ucdr_serialize_uint64_t+0x188>
 800c69e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6a2:	702b      	strb	r3, [r5, #0]
 800c6a4:	2e00      	cmp	r6, #0
 800c6a6:	d078      	beq.n	800c79a <ucdr_serialize_uint64_t+0x14e>
 800c6a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c6ac:	706b      	strb	r3, [r5, #1]
 800c6ae:	2e01      	cmp	r6, #1
 800c6b0:	d077      	beq.n	800c7a2 <ucdr_serialize_uint64_t+0x156>
 800c6b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c6b6:	70ab      	strb	r3, [r5, #2]
 800c6b8:	2e02      	cmp	r6, #2
 800c6ba:	d076      	beq.n	800c7aa <ucdr_serialize_uint64_t+0x15e>
 800c6bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6c0:	70eb      	strb	r3, [r5, #3]
 800c6c2:	2e03      	cmp	r6, #3
 800c6c4:	d075      	beq.n	800c7b2 <ucdr_serialize_uint64_t+0x166>
 800c6c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c6ca:	712b      	strb	r3, [r5, #4]
 800c6cc:	2e04      	cmp	r6, #4
 800c6ce:	d074      	beq.n	800c7ba <ucdr_serialize_uint64_t+0x16e>
 800c6d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c6d4:	716b      	strb	r3, [r5, #5]
 800c6d6:	2e05      	cmp	r6, #5
 800c6d8:	d073      	beq.n	800c7c2 <ucdr_serialize_uint64_t+0x176>
 800c6da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c6de:	71ab      	strb	r3, [r5, #6]
 800c6e0:	2e06      	cmp	r6, #6
 800c6e2:	d072      	beq.n	800c7ca <ucdr_serialize_uint64_t+0x17e>
 800c6e4:	f89d 3000 	ldrb.w	r3, [sp]
 800c6e8:	71eb      	strb	r3, [r5, #7]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	68a2      	ldr	r2, [r4, #8]
 800c6ee:	7da0      	ldrb	r0, [r4, #22]
 800c6f0:	3308      	adds	r3, #8
 800c6f2:	1b9e      	subs	r6, r3, r6
 800c6f4:	4442      	add	r2, r8
 800c6f6:	2308      	movs	r3, #8
 800c6f8:	f080 0001 	eor.w	r0, r0, #1
 800c6fc:	60a2      	str	r2, [r4, #8]
 800c6fe:	6126      	str	r6, [r4, #16]
 800c700:	7563      	strb	r3, [r4, #21]
 800c702:	b002      	add	sp, #8
 800c704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c708:	2108      	movs	r1, #8
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fdcc 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c710:	b350      	cbz	r0, 800c768 <ucdr_serialize_uint64_t+0x11c>
 800c712:	7d23      	ldrb	r3, [r4, #20]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d02d      	beq.n	800c774 <ucdr_serialize_uint64_t+0x128>
 800c718:	68a3      	ldr	r3, [r4, #8]
 800c71a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c71e:	701a      	strb	r2, [r3, #0]
 800c720:	68a3      	ldr	r3, [r4, #8]
 800c722:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c726:	705a      	strb	r2, [r3, #1]
 800c728:	68a3      	ldr	r3, [r4, #8]
 800c72a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c72e:	709a      	strb	r2, [r3, #2]
 800c730:	68a3      	ldr	r3, [r4, #8]
 800c732:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c736:	70da      	strb	r2, [r3, #3]
 800c738:	68a3      	ldr	r3, [r4, #8]
 800c73a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c73e:	711a      	strb	r2, [r3, #4]
 800c740:	68a3      	ldr	r3, [r4, #8]
 800c742:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c746:	715a      	strb	r2, [r3, #5]
 800c748:	68a3      	ldr	r3, [r4, #8]
 800c74a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c74e:	719a      	strb	r2, [r3, #6]
 800c750:	68a3      	ldr	r3, [r4, #8]
 800c752:	f89d 2000 	ldrb.w	r2, [sp]
 800c756:	71da      	strb	r2, [r3, #7]
 800c758:	68a2      	ldr	r2, [r4, #8]
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	3208      	adds	r2, #8
 800c75e:	3308      	adds	r3, #8
 800c760:	2108      	movs	r1, #8
 800c762:	60a2      	str	r2, [r4, #8]
 800c764:	6123      	str	r3, [r4, #16]
 800c766:	7561      	strb	r1, [r4, #21]
 800c768:	7da0      	ldrb	r0, [r4, #22]
 800c76a:	f080 0001 	eor.w	r0, r0, #1
 800c76e:	b002      	add	sp, #8
 800c770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c774:	466b      	mov	r3, sp
 800c776:	cb03      	ldmia	r3!, {r0, r1}
 800c778:	68a3      	ldr	r3, [r4, #8]
 800c77a:	6018      	str	r0, [r3, #0]
 800c77c:	6059      	str	r1, [r3, #4]
 800c77e:	e7eb      	b.n	800c758 <ucdr_serialize_uint64_t+0x10c>
 800c780:	68a2      	ldr	r2, [r4, #8]
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	7da0      	ldrb	r0, [r4, #22]
 800c786:	7567      	strb	r7, [r4, #21]
 800c788:	1b92      	subs	r2, r2, r6
 800c78a:	1b9b      	subs	r3, r3, r6
 800c78c:	f080 0001 	eor.w	r0, r0, #1
 800c790:	60a2      	str	r2, [r4, #8]
 800c792:	6123      	str	r3, [r4, #16]
 800c794:	b002      	add	sp, #8
 800c796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7a0:	701a      	strb	r2, [r3, #0]
 800c7a2:	68a3      	ldr	r3, [r4, #8]
 800c7a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c7a8:	701a      	strb	r2, [r3, #0]
 800c7aa:	68a3      	ldr	r3, [r4, #8]
 800c7ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c7b0:	701a      	strb	r2, [r3, #0]
 800c7b2:	68a3      	ldr	r3, [r4, #8]
 800c7b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	68a3      	ldr	r3, [r4, #8]
 800c7bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c7c0:	701a      	strb	r2, [r3, #0]
 800c7c2:	68a3      	ldr	r3, [r4, #8]
 800c7c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c7c8:	701a      	strb	r2, [r3, #0]
 800c7ca:	68a3      	ldr	r3, [r4, #8]
 800c7cc:	f89d 2000 	ldrb.w	r2, [sp]
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	e78a      	b.n	800c6ea <ucdr_serialize_uint64_t+0x9e>
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	466d      	mov	r5, sp
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4632      	mov	r2, r6
 800c7dc:	f00e ffb3 	bl	801b746 <memcpy>
 800c7e0:	68a0      	ldr	r0, [r4, #8]
 800c7e2:	4642      	mov	r2, r8
 800c7e4:	19a9      	adds	r1, r5, r6
 800c7e6:	f00e ffae 	bl	801b746 <memcpy>
 800c7ea:	e77e      	b.n	800c6ea <ucdr_serialize_uint64_t+0x9e>

0800c7ec <ucdr_serialize_int16_t>:
 800c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	2102      	movs	r1, #2
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c7fc:	f000 fda8 	bl	800d350 <ucdr_buffer_alignment>
 800c800:	4601      	mov	r1, r0
 800c802:	4620      	mov	r0, r4
 800c804:	7d67      	ldrb	r7, [r4, #21]
 800c806:	f000 fde7 	bl	800d3d8 <ucdr_advance_buffer>
 800c80a:	2102      	movs	r1, #2
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 fd3f 	bl	800d290 <ucdr_check_buffer_available_for>
 800c812:	bb78      	cbnz	r0, 800c874 <ucdr_serialize_int16_t+0x88>
 800c814:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c818:	42ab      	cmp	r3, r5
 800c81a:	d926      	bls.n	800c86a <ucdr_serialize_int16_t+0x7e>
 800c81c:	1b5e      	subs	r6, r3, r5
 800c81e:	60a3      	str	r3, [r4, #8]
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	f1c6 0802 	rsb	r8, r6, #2
 800c826:	4433      	add	r3, r6
 800c828:	6123      	str	r3, [r4, #16]
 800c82a:	4641      	mov	r1, r8
 800c82c:	4620      	mov	r0, r4
 800c82e:	f000 fd3b 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c832:	2800      	cmp	r0, #0
 800c834:	d03b      	beq.n	800c8ae <ucdr_serialize_int16_t+0xc2>
 800c836:	7d23      	ldrb	r3, [r4, #20]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d04a      	beq.n	800c8d2 <ucdr_serialize_int16_t+0xe6>
 800c83c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c840:	702b      	strb	r3, [r5, #0]
 800c842:	2e00      	cmp	r6, #0
 800c844:	d040      	beq.n	800c8c8 <ucdr_serialize_int16_t+0xdc>
 800c846:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c84a:	706b      	strb	r3, [r5, #1]
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	68a2      	ldr	r2, [r4, #8]
 800c850:	7da0      	ldrb	r0, [r4, #22]
 800c852:	3302      	adds	r3, #2
 800c854:	1b9e      	subs	r6, r3, r6
 800c856:	4442      	add	r2, r8
 800c858:	2302      	movs	r3, #2
 800c85a:	f080 0001 	eor.w	r0, r0, #1
 800c85e:	60a2      	str	r2, [r4, #8]
 800c860:	6126      	str	r6, [r4, #16]
 800c862:	7563      	strb	r3, [r4, #21]
 800c864:	b002      	add	sp, #8
 800c866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c86a:	2102      	movs	r1, #2
 800c86c:	4620      	mov	r0, r4
 800c86e:	f000 fd1b 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c872:	b190      	cbz	r0, 800c89a <ucdr_serialize_int16_t+0xae>
 800c874:	7d23      	ldrb	r3, [r4, #20]
 800c876:	2b01      	cmp	r3, #1
 800c878:	68a3      	ldr	r3, [r4, #8]
 800c87a:	d014      	beq.n	800c8a6 <ucdr_serialize_int16_t+0xba>
 800c87c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c880:	701a      	strb	r2, [r3, #0]
 800c882:	68a3      	ldr	r3, [r4, #8]
 800c884:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c888:	705a      	strb	r2, [r3, #1]
 800c88a:	68a2      	ldr	r2, [r4, #8]
 800c88c:	6923      	ldr	r3, [r4, #16]
 800c88e:	3202      	adds	r2, #2
 800c890:	3302      	adds	r3, #2
 800c892:	2102      	movs	r1, #2
 800c894:	60a2      	str	r2, [r4, #8]
 800c896:	6123      	str	r3, [r4, #16]
 800c898:	7561      	strb	r1, [r4, #21]
 800c89a:	7da0      	ldrb	r0, [r4, #22]
 800c89c:	f080 0001 	eor.w	r0, r0, #1
 800c8a0:	b002      	add	sp, #8
 800c8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c8aa:	801a      	strh	r2, [r3, #0]
 800c8ac:	e7ed      	b.n	800c88a <ucdr_serialize_int16_t+0x9e>
 800c8ae:	68a2      	ldr	r2, [r4, #8]
 800c8b0:	6923      	ldr	r3, [r4, #16]
 800c8b2:	7da0      	ldrb	r0, [r4, #22]
 800c8b4:	7567      	strb	r7, [r4, #21]
 800c8b6:	1b92      	subs	r2, r2, r6
 800c8b8:	1b9b      	subs	r3, r3, r6
 800c8ba:	f080 0001 	eor.w	r0, r0, #1
 800c8be:	60a2      	str	r2, [r4, #8]
 800c8c0:	6123      	str	r3, [r4, #16]
 800c8c2:	b002      	add	sp, #8
 800c8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c8:	68a3      	ldr	r3, [r4, #8]
 800c8ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	e7bc      	b.n	800c84c <ucdr_serialize_int16_t+0x60>
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f10d 0506 	add.w	r5, sp, #6
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4632      	mov	r2, r6
 800c8dc:	f00e ff33 	bl	801b746 <memcpy>
 800c8e0:	68a0      	ldr	r0, [r4, #8]
 800c8e2:	4642      	mov	r2, r8
 800c8e4:	19a9      	adds	r1, r5, r6
 800c8e6:	f00e ff2e 	bl	801b746 <memcpy>
 800c8ea:	e7af      	b.n	800c84c <ucdr_serialize_int16_t+0x60>

0800c8ec <ucdr_deserialize_int16_t>:
 800c8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f0:	460d      	mov	r5, r1
 800c8f2:	2102      	movs	r1, #2
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	f000 fd2b 	bl	800d350 <ucdr_buffer_alignment>
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c902:	f000 fd69 	bl	800d3d8 <ucdr_advance_buffer>
 800c906:	2102      	movs	r1, #2
 800c908:	4620      	mov	r0, r4
 800c90a:	f000 fcc1 	bl	800d290 <ucdr_check_buffer_available_for>
 800c90e:	bb60      	cbnz	r0, 800c96a <ucdr_deserialize_int16_t+0x7e>
 800c910:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c914:	42be      	cmp	r6, r7
 800c916:	d923      	bls.n	800c960 <ucdr_deserialize_int16_t+0x74>
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	60a6      	str	r6, [r4, #8]
 800c91c:	1bf6      	subs	r6, r6, r7
 800c91e:	4433      	add	r3, r6
 800c920:	f1c6 0902 	rsb	r9, r6, #2
 800c924:	6123      	str	r3, [r4, #16]
 800c926:	4649      	mov	r1, r9
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 fcbd 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d034      	beq.n	800c99c <ucdr_deserialize_int16_t+0xb0>
 800c932:	7d23      	ldrb	r3, [r4, #20]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d042      	beq.n	800c9be <ucdr_deserialize_int16_t+0xd2>
 800c938:	787b      	ldrb	r3, [r7, #1]
 800c93a:	702b      	strb	r3, [r5, #0]
 800c93c:	2e00      	cmp	r6, #0
 800c93e:	d03a      	beq.n	800c9b6 <ucdr_deserialize_int16_t+0xca>
 800c940:	783b      	ldrb	r3, [r7, #0]
 800c942:	706b      	strb	r3, [r5, #1]
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	68a2      	ldr	r2, [r4, #8]
 800c948:	7da0      	ldrb	r0, [r4, #22]
 800c94a:	2102      	movs	r1, #2
 800c94c:	3302      	adds	r3, #2
 800c94e:	444a      	add	r2, r9
 800c950:	1b9b      	subs	r3, r3, r6
 800c952:	7561      	strb	r1, [r4, #21]
 800c954:	60a2      	str	r2, [r4, #8]
 800c956:	6123      	str	r3, [r4, #16]
 800c958:	f080 0001 	eor.w	r0, r0, #1
 800c95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c960:	2102      	movs	r1, #2
 800c962:	4620      	mov	r0, r4
 800c964:	f000 fca0 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800c968:	b180      	cbz	r0, 800c98c <ucdr_deserialize_int16_t+0xa0>
 800c96a:	7d23      	ldrb	r3, [r4, #20]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	d011      	beq.n	800c996 <ucdr_deserialize_int16_t+0xaa>
 800c972:	785b      	ldrb	r3, [r3, #1]
 800c974:	702b      	strb	r3, [r5, #0]
 800c976:	68a3      	ldr	r3, [r4, #8]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	706b      	strb	r3, [r5, #1]
 800c97c:	68a2      	ldr	r2, [r4, #8]
 800c97e:	6923      	ldr	r3, [r4, #16]
 800c980:	3202      	adds	r2, #2
 800c982:	3302      	adds	r3, #2
 800c984:	2102      	movs	r1, #2
 800c986:	60a2      	str	r2, [r4, #8]
 800c988:	6123      	str	r3, [r4, #16]
 800c98a:	7561      	strb	r1, [r4, #21]
 800c98c:	7da0      	ldrb	r0, [r4, #22]
 800c98e:	f080 0001 	eor.w	r0, r0, #1
 800c992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	802b      	strh	r3, [r5, #0]
 800c99a:	e7ef      	b.n	800c97c <ucdr_deserialize_int16_t+0x90>
 800c99c:	68a2      	ldr	r2, [r4, #8]
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	7da0      	ldrb	r0, [r4, #22]
 800c9a2:	f884 8015 	strb.w	r8, [r4, #21]
 800c9a6:	1b92      	subs	r2, r2, r6
 800c9a8:	1b9b      	subs	r3, r3, r6
 800c9aa:	60a2      	str	r2, [r4, #8]
 800c9ac:	6123      	str	r3, [r4, #16]
 800c9ae:	f080 0001 	eor.w	r0, r0, #1
 800c9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	706b      	strb	r3, [r5, #1]
 800c9bc:	e7c2      	b.n	800c944 <ucdr_deserialize_int16_t+0x58>
 800c9be:	4639      	mov	r1, r7
 800c9c0:	4632      	mov	r2, r6
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f00e febf 	bl	801b746 <memcpy>
 800c9c8:	68a1      	ldr	r1, [r4, #8]
 800c9ca:	464a      	mov	r2, r9
 800c9cc:	19a8      	adds	r0, r5, r6
 800c9ce:	f00e feba 	bl	801b746 <memcpy>
 800c9d2:	e7b7      	b.n	800c944 <ucdr_deserialize_int16_t+0x58>

0800c9d4 <ucdr_serialize_int32_t>:
 800c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	4604      	mov	r4, r0
 800c9dc:	9101      	str	r1, [sp, #4]
 800c9de:	2104      	movs	r1, #4
 800c9e0:	f000 fcb6 	bl	800d350 <ucdr_buffer_alignment>
 800c9e4:	4601      	mov	r1, r0
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	7d67      	ldrb	r7, [r4, #21]
 800c9ea:	f000 fcf5 	bl	800d3d8 <ucdr_advance_buffer>
 800c9ee:	2104      	movs	r1, #4
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f000 fc4d 	bl	800d290 <ucdr_check_buffer_available_for>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d139      	bne.n	800ca6e <ucdr_serialize_int32_t+0x9a>
 800c9fa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c9fe:	42ab      	cmp	r3, r5
 800ca00:	d930      	bls.n	800ca64 <ucdr_serialize_int32_t+0x90>
 800ca02:	1b5e      	subs	r6, r3, r5
 800ca04:	60a3      	str	r3, [r4, #8]
 800ca06:	6923      	ldr	r3, [r4, #16]
 800ca08:	f1c6 0804 	rsb	r8, r6, #4
 800ca0c:	4433      	add	r3, r6
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	4641      	mov	r1, r8
 800ca12:	4620      	mov	r0, r4
 800ca14:	f000 fc48 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d04c      	beq.n	800cab6 <ucdr_serialize_int32_t+0xe2>
 800ca1c:	7d23      	ldrb	r3, [r4, #20]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d063      	beq.n	800caea <ucdr_serialize_int32_t+0x116>
 800ca22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca26:	702b      	strb	r3, [r5, #0]
 800ca28:	2e00      	cmp	r6, #0
 800ca2a:	d051      	beq.n	800cad0 <ucdr_serialize_int32_t+0xfc>
 800ca2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca30:	706b      	strb	r3, [r5, #1]
 800ca32:	2e01      	cmp	r6, #1
 800ca34:	d050      	beq.n	800cad8 <ucdr_serialize_int32_t+0x104>
 800ca36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca3a:	70ab      	strb	r3, [r5, #2]
 800ca3c:	2e02      	cmp	r6, #2
 800ca3e:	d04f      	beq.n	800cae0 <ucdr_serialize_int32_t+0x10c>
 800ca40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca44:	70eb      	strb	r3, [r5, #3]
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	68a2      	ldr	r2, [r4, #8]
 800ca4a:	7da0      	ldrb	r0, [r4, #22]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	1b9e      	subs	r6, r3, r6
 800ca50:	4442      	add	r2, r8
 800ca52:	2304      	movs	r3, #4
 800ca54:	f080 0001 	eor.w	r0, r0, #1
 800ca58:	60a2      	str	r2, [r4, #8]
 800ca5a:	6126      	str	r6, [r4, #16]
 800ca5c:	7563      	strb	r3, [r4, #21]
 800ca5e:	b002      	add	sp, #8
 800ca60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca64:	2104      	movs	r1, #4
 800ca66:	4620      	mov	r0, r4
 800ca68:	f000 fc1e 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800ca6c:	b1d0      	cbz	r0, 800caa4 <ucdr_serialize_int32_t+0xd0>
 800ca6e:	7d23      	ldrb	r3, [r4, #20]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	68a3      	ldr	r3, [r4, #8]
 800ca74:	d01c      	beq.n	800cab0 <ucdr_serialize_int32_t+0xdc>
 800ca76:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca7a:	701a      	strb	r2, [r3, #0]
 800ca7c:	68a3      	ldr	r3, [r4, #8]
 800ca7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca82:	705a      	strb	r2, [r3, #1]
 800ca84:	68a3      	ldr	r3, [r4, #8]
 800ca86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ca8a:	709a      	strb	r2, [r3, #2]
 800ca8c:	68a3      	ldr	r3, [r4, #8]
 800ca8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ca92:	70da      	strb	r2, [r3, #3]
 800ca94:	68a2      	ldr	r2, [r4, #8]
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	3204      	adds	r2, #4
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	2104      	movs	r1, #4
 800ca9e:	60a2      	str	r2, [r4, #8]
 800caa0:	6123      	str	r3, [r4, #16]
 800caa2:	7561      	strb	r1, [r4, #21]
 800caa4:	7da0      	ldrb	r0, [r4, #22]
 800caa6:	f080 0001 	eor.w	r0, r0, #1
 800caaa:	b002      	add	sp, #8
 800caac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab0:	9a01      	ldr	r2, [sp, #4]
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	e7ee      	b.n	800ca94 <ucdr_serialize_int32_t+0xc0>
 800cab6:	68a2      	ldr	r2, [r4, #8]
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	7da0      	ldrb	r0, [r4, #22]
 800cabc:	7567      	strb	r7, [r4, #21]
 800cabe:	1b92      	subs	r2, r2, r6
 800cac0:	1b9b      	subs	r3, r3, r6
 800cac2:	f080 0001 	eor.w	r0, r0, #1
 800cac6:	60a2      	str	r2, [r4, #8]
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	b002      	add	sp, #8
 800cacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad0:	68a3      	ldr	r3, [r4, #8]
 800cad2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cad6:	701a      	strb	r2, [r3, #0]
 800cad8:	68a3      	ldr	r3, [r4, #8]
 800cada:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cae6:	701a      	strb	r2, [r3, #0]
 800cae8:	e7ad      	b.n	800ca46 <ucdr_serialize_int32_t+0x72>
 800caea:	4628      	mov	r0, r5
 800caec:	ad01      	add	r5, sp, #4
 800caee:	4629      	mov	r1, r5
 800caf0:	4632      	mov	r2, r6
 800caf2:	f00e fe28 	bl	801b746 <memcpy>
 800caf6:	68a0      	ldr	r0, [r4, #8]
 800caf8:	4642      	mov	r2, r8
 800cafa:	19a9      	adds	r1, r5, r6
 800cafc:	f00e fe23 	bl	801b746 <memcpy>
 800cb00:	e7a1      	b.n	800ca46 <ucdr_serialize_int32_t+0x72>
 800cb02:	bf00      	nop

0800cb04 <ucdr_deserialize_int32_t>:
 800cb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb08:	460d      	mov	r5, r1
 800cb0a:	2104      	movs	r1, #4
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	f000 fc1f 	bl	800d350 <ucdr_buffer_alignment>
 800cb12:	4601      	mov	r1, r0
 800cb14:	4620      	mov	r0, r4
 800cb16:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb1a:	f000 fc5d 	bl	800d3d8 <ucdr_advance_buffer>
 800cb1e:	2104      	movs	r1, #4
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 fbb5 	bl	800d290 <ucdr_check_buffer_available_for>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d138      	bne.n	800cb9c <ucdr_deserialize_int32_t+0x98>
 800cb2a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cb2e:	42b7      	cmp	r7, r6
 800cb30:	d92f      	bls.n	800cb92 <ucdr_deserialize_int32_t+0x8e>
 800cb32:	6923      	ldr	r3, [r4, #16]
 800cb34:	60a7      	str	r7, [r4, #8]
 800cb36:	1bbf      	subs	r7, r7, r6
 800cb38:	443b      	add	r3, r7
 800cb3a:	f1c7 0904 	rsb	r9, r7, #4
 800cb3e:	6123      	str	r3, [r4, #16]
 800cb40:	4649      	mov	r1, r9
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 fbb0 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d046      	beq.n	800cbda <ucdr_deserialize_int32_t+0xd6>
 800cb4c:	7d23      	ldrb	r3, [r4, #20]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d05c      	beq.n	800cc0c <ucdr_deserialize_int32_t+0x108>
 800cb52:	78f3      	ldrb	r3, [r6, #3]
 800cb54:	702b      	strb	r3, [r5, #0]
 800cb56:	2f00      	cmp	r7, #0
 800cb58:	d04c      	beq.n	800cbf4 <ucdr_deserialize_int32_t+0xf0>
 800cb5a:	78b3      	ldrb	r3, [r6, #2]
 800cb5c:	706b      	strb	r3, [r5, #1]
 800cb5e:	2f01      	cmp	r7, #1
 800cb60:	f105 0302 	add.w	r3, r5, #2
 800cb64:	d04a      	beq.n	800cbfc <ucdr_deserialize_int32_t+0xf8>
 800cb66:	7873      	ldrb	r3, [r6, #1]
 800cb68:	70ab      	strb	r3, [r5, #2]
 800cb6a:	2f02      	cmp	r7, #2
 800cb6c:	f105 0303 	add.w	r3, r5, #3
 800cb70:	d048      	beq.n	800cc04 <ucdr_deserialize_int32_t+0x100>
 800cb72:	7833      	ldrb	r3, [r6, #0]
 800cb74:	70eb      	strb	r3, [r5, #3]
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	68a2      	ldr	r2, [r4, #8]
 800cb7a:	7da0      	ldrb	r0, [r4, #22]
 800cb7c:	2104      	movs	r1, #4
 800cb7e:	3304      	adds	r3, #4
 800cb80:	444a      	add	r2, r9
 800cb82:	1bdb      	subs	r3, r3, r7
 800cb84:	7561      	strb	r1, [r4, #21]
 800cb86:	60a2      	str	r2, [r4, #8]
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	f080 0001 	eor.w	r0, r0, #1
 800cb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb92:	2104      	movs	r1, #4
 800cb94:	4620      	mov	r0, r4
 800cb96:	f000 fb87 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800cb9a:	b1b0      	cbz	r0, 800cbca <ucdr_deserialize_int32_t+0xc6>
 800cb9c:	7d23      	ldrb	r3, [r4, #20]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	68a3      	ldr	r3, [r4, #8]
 800cba2:	d017      	beq.n	800cbd4 <ucdr_deserialize_int32_t+0xd0>
 800cba4:	78db      	ldrb	r3, [r3, #3]
 800cba6:	702b      	strb	r3, [r5, #0]
 800cba8:	68a3      	ldr	r3, [r4, #8]
 800cbaa:	789b      	ldrb	r3, [r3, #2]
 800cbac:	706b      	strb	r3, [r5, #1]
 800cbae:	68a3      	ldr	r3, [r4, #8]
 800cbb0:	785b      	ldrb	r3, [r3, #1]
 800cbb2:	70ab      	strb	r3, [r5, #2]
 800cbb4:	68a3      	ldr	r3, [r4, #8]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	70eb      	strb	r3, [r5, #3]
 800cbba:	68a2      	ldr	r2, [r4, #8]
 800cbbc:	6923      	ldr	r3, [r4, #16]
 800cbbe:	3204      	adds	r2, #4
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	2104      	movs	r1, #4
 800cbc4:	60a2      	str	r2, [r4, #8]
 800cbc6:	6123      	str	r3, [r4, #16]
 800cbc8:	7561      	strb	r1, [r4, #21]
 800cbca:	7da0      	ldrb	r0, [r4, #22]
 800cbcc:	f080 0001 	eor.w	r0, r0, #1
 800cbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	602b      	str	r3, [r5, #0]
 800cbd8:	e7ef      	b.n	800cbba <ucdr_deserialize_int32_t+0xb6>
 800cbda:	68a2      	ldr	r2, [r4, #8]
 800cbdc:	6923      	ldr	r3, [r4, #16]
 800cbde:	7da0      	ldrb	r0, [r4, #22]
 800cbe0:	f884 8015 	strb.w	r8, [r4, #21]
 800cbe4:	1bd2      	subs	r2, r2, r7
 800cbe6:	1bdb      	subs	r3, r3, r7
 800cbe8:	60a2      	str	r2, [r4, #8]
 800cbea:	6123      	str	r3, [r4, #16]
 800cbec:	f080 0001 	eor.w	r0, r0, #1
 800cbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf4:	68a3      	ldr	r3, [r4, #8]
 800cbf6:	789b      	ldrb	r3, [r3, #2]
 800cbf8:	706b      	strb	r3, [r5, #1]
 800cbfa:	1cab      	adds	r3, r5, #2
 800cbfc:	68a2      	ldr	r2, [r4, #8]
 800cbfe:	7852      	ldrb	r2, [r2, #1]
 800cc00:	f803 2b01 	strb.w	r2, [r3], #1
 800cc04:	68a2      	ldr	r2, [r4, #8]
 800cc06:	7812      	ldrb	r2, [r2, #0]
 800cc08:	701a      	strb	r2, [r3, #0]
 800cc0a:	e7b4      	b.n	800cb76 <ucdr_deserialize_int32_t+0x72>
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	463a      	mov	r2, r7
 800cc10:	4628      	mov	r0, r5
 800cc12:	f00e fd98 	bl	801b746 <memcpy>
 800cc16:	68a1      	ldr	r1, [r4, #8]
 800cc18:	464a      	mov	r2, r9
 800cc1a:	19e8      	adds	r0, r5, r7
 800cc1c:	f00e fd93 	bl	801b746 <memcpy>
 800cc20:	e7a9      	b.n	800cb76 <ucdr_deserialize_int32_t+0x72>
 800cc22:	bf00      	nop

0800cc24 <ucdr_serialize_double>:
 800cc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc28:	2108      	movs	r1, #8
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	ed8d 0b00 	vstr	d0, [sp]
 800cc32:	f000 fb8d 	bl	800d350 <ucdr_buffer_alignment>
 800cc36:	4601      	mov	r1, r0
 800cc38:	4620      	mov	r0, r4
 800cc3a:	7d67      	ldrb	r7, [r4, #21]
 800cc3c:	f000 fbcc 	bl	800d3d8 <ucdr_advance_buffer>
 800cc40:	2108      	movs	r1, #8
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fb24 	bl	800d290 <ucdr_check_buffer_available_for>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d14e      	bne.n	800ccea <ucdr_serialize_double+0xc6>
 800cc4c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cc50:	42ab      	cmp	r3, r5
 800cc52:	d945      	bls.n	800cce0 <ucdr_serialize_double+0xbc>
 800cc54:	1b5e      	subs	r6, r3, r5
 800cc56:	60a3      	str	r3, [r4, #8]
 800cc58:	6923      	ldr	r3, [r4, #16]
 800cc5a:	f1c6 0808 	rsb	r8, r6, #8
 800cc5e:	4433      	add	r3, r6
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	4641      	mov	r1, r8
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fb1f 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d074      	beq.n	800cd58 <ucdr_serialize_double+0x134>
 800cc6e:	7d23      	ldrb	r3, [r4, #20]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	f000 809b 	beq.w	800cdac <ucdr_serialize_double+0x188>
 800cc76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc7a:	702b      	strb	r3, [r5, #0]
 800cc7c:	2e00      	cmp	r6, #0
 800cc7e:	d078      	beq.n	800cd72 <ucdr_serialize_double+0x14e>
 800cc80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc84:	706b      	strb	r3, [r5, #1]
 800cc86:	2e01      	cmp	r6, #1
 800cc88:	d077      	beq.n	800cd7a <ucdr_serialize_double+0x156>
 800cc8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc8e:	70ab      	strb	r3, [r5, #2]
 800cc90:	2e02      	cmp	r6, #2
 800cc92:	d076      	beq.n	800cd82 <ucdr_serialize_double+0x15e>
 800cc94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc98:	70eb      	strb	r3, [r5, #3]
 800cc9a:	2e03      	cmp	r6, #3
 800cc9c:	d075      	beq.n	800cd8a <ucdr_serialize_double+0x166>
 800cc9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cca2:	712b      	strb	r3, [r5, #4]
 800cca4:	2e04      	cmp	r6, #4
 800cca6:	d074      	beq.n	800cd92 <ucdr_serialize_double+0x16e>
 800cca8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ccac:	716b      	strb	r3, [r5, #5]
 800ccae:	2e05      	cmp	r6, #5
 800ccb0:	d073      	beq.n	800cd9a <ucdr_serialize_double+0x176>
 800ccb2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ccb6:	71ab      	strb	r3, [r5, #6]
 800ccb8:	2e06      	cmp	r6, #6
 800ccba:	d072      	beq.n	800cda2 <ucdr_serialize_double+0x17e>
 800ccbc:	f89d 3000 	ldrb.w	r3, [sp]
 800ccc0:	71eb      	strb	r3, [r5, #7]
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	68a2      	ldr	r2, [r4, #8]
 800ccc6:	7da0      	ldrb	r0, [r4, #22]
 800ccc8:	3308      	adds	r3, #8
 800ccca:	1b9e      	subs	r6, r3, r6
 800cccc:	4442      	add	r2, r8
 800ccce:	2308      	movs	r3, #8
 800ccd0:	f080 0001 	eor.w	r0, r0, #1
 800ccd4:	60a2      	str	r2, [r4, #8]
 800ccd6:	6126      	str	r6, [r4, #16]
 800ccd8:	7563      	strb	r3, [r4, #21]
 800ccda:	b002      	add	sp, #8
 800ccdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce0:	2108      	movs	r1, #8
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 fae0 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800cce8:	b350      	cbz	r0, 800cd40 <ucdr_serialize_double+0x11c>
 800ccea:	7d23      	ldrb	r3, [r4, #20]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d02d      	beq.n	800cd4c <ucdr_serialize_double+0x128>
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ccf6:	701a      	strb	r2, [r3, #0]
 800ccf8:	68a3      	ldr	r3, [r4, #8]
 800ccfa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ccfe:	705a      	strb	r2, [r3, #1]
 800cd00:	68a3      	ldr	r3, [r4, #8]
 800cd02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd06:	709a      	strb	r2, [r3, #2]
 800cd08:	68a3      	ldr	r3, [r4, #8]
 800cd0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd0e:	70da      	strb	r2, [r3, #3]
 800cd10:	68a3      	ldr	r3, [r4, #8]
 800cd12:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cd16:	711a      	strb	r2, [r3, #4]
 800cd18:	68a3      	ldr	r3, [r4, #8]
 800cd1a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cd1e:	715a      	strb	r2, [r3, #5]
 800cd20:	68a3      	ldr	r3, [r4, #8]
 800cd22:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cd26:	719a      	strb	r2, [r3, #6]
 800cd28:	68a3      	ldr	r3, [r4, #8]
 800cd2a:	f89d 2000 	ldrb.w	r2, [sp]
 800cd2e:	71da      	strb	r2, [r3, #7]
 800cd30:	68a2      	ldr	r2, [r4, #8]
 800cd32:	6923      	ldr	r3, [r4, #16]
 800cd34:	3208      	adds	r2, #8
 800cd36:	3308      	adds	r3, #8
 800cd38:	2108      	movs	r1, #8
 800cd3a:	60a2      	str	r2, [r4, #8]
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	7561      	strb	r1, [r4, #21]
 800cd40:	7da0      	ldrb	r0, [r4, #22]
 800cd42:	f080 0001 	eor.w	r0, r0, #1
 800cd46:	b002      	add	sp, #8
 800cd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd4c:	466b      	mov	r3, sp
 800cd4e:	cb03      	ldmia	r3!, {r0, r1}
 800cd50:	68a3      	ldr	r3, [r4, #8]
 800cd52:	6018      	str	r0, [r3, #0]
 800cd54:	6059      	str	r1, [r3, #4]
 800cd56:	e7eb      	b.n	800cd30 <ucdr_serialize_double+0x10c>
 800cd58:	68a2      	ldr	r2, [r4, #8]
 800cd5a:	6923      	ldr	r3, [r4, #16]
 800cd5c:	7da0      	ldrb	r0, [r4, #22]
 800cd5e:	7567      	strb	r7, [r4, #21]
 800cd60:	1b92      	subs	r2, r2, r6
 800cd62:	1b9b      	subs	r3, r3, r6
 800cd64:	f080 0001 	eor.w	r0, r0, #1
 800cd68:	60a2      	str	r2, [r4, #8]
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	b002      	add	sp, #8
 800cd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd72:	68a3      	ldr	r3, [r4, #8]
 800cd74:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	68a3      	ldr	r3, [r4, #8]
 800cd84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd88:	701a      	strb	r2, [r3, #0]
 800cd8a:	68a3      	ldr	r3, [r4, #8]
 800cd8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cd90:	701a      	strb	r2, [r3, #0]
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cd98:	701a      	strb	r2, [r3, #0]
 800cd9a:	68a3      	ldr	r3, [r4, #8]
 800cd9c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cda0:	701a      	strb	r2, [r3, #0]
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	f89d 2000 	ldrb.w	r2, [sp]
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	e78a      	b.n	800ccc2 <ucdr_serialize_double+0x9e>
 800cdac:	4628      	mov	r0, r5
 800cdae:	466d      	mov	r5, sp
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4632      	mov	r2, r6
 800cdb4:	f00e fcc7 	bl	801b746 <memcpy>
 800cdb8:	68a0      	ldr	r0, [r4, #8]
 800cdba:	4642      	mov	r2, r8
 800cdbc:	19a9      	adds	r1, r5, r6
 800cdbe:	f00e fcc2 	bl	801b746 <memcpy>
 800cdc2:	e77e      	b.n	800ccc2 <ucdr_serialize_double+0x9e>

0800cdc4 <ucdr_serialize_endian_double>:
 800cdc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdc8:	460e      	mov	r6, r1
 800cdca:	b083      	sub	sp, #12
 800cdcc:	2108      	movs	r1, #8
 800cdce:	4604      	mov	r4, r0
 800cdd0:	ed8d 0b00 	vstr	d0, [sp]
 800cdd4:	f000 fabc 	bl	800d350 <ucdr_buffer_alignment>
 800cdd8:	4601      	mov	r1, r0
 800cdda:	4620      	mov	r0, r4
 800cddc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cde0:	f000 fafa 	bl	800d3d8 <ucdr_advance_buffer>
 800cde4:	2108      	movs	r1, #8
 800cde6:	4620      	mov	r0, r4
 800cde8:	f000 fa52 	bl	800d290 <ucdr_check_buffer_available_for>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d14d      	bne.n	800ce8c <ucdr_serialize_endian_double+0xc8>
 800cdf0:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800cdf4:	42bd      	cmp	r5, r7
 800cdf6:	d944      	bls.n	800ce82 <ucdr_serialize_endian_double+0xbe>
 800cdf8:	6923      	ldr	r3, [r4, #16]
 800cdfa:	60a5      	str	r5, [r4, #8]
 800cdfc:	1bed      	subs	r5, r5, r7
 800cdfe:	442b      	add	r3, r5
 800ce00:	f1c5 0908 	rsb	r9, r5, #8
 800ce04:	6123      	str	r3, [r4, #16]
 800ce06:	4649      	mov	r1, r9
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f000 fa4d 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d072      	beq.n	800cef8 <ucdr_serialize_endian_double+0x134>
 800ce12:	2e01      	cmp	r6, #1
 800ce14:	f000 809b 	beq.w	800cf4e <ucdr_serialize_endian_double+0x18a>
 800ce18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce1c:	703b      	strb	r3, [r7, #0]
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	d078      	beq.n	800cf14 <ucdr_serialize_endian_double+0x150>
 800ce22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce26:	707b      	strb	r3, [r7, #1]
 800ce28:	2d01      	cmp	r5, #1
 800ce2a:	d077      	beq.n	800cf1c <ucdr_serialize_endian_double+0x158>
 800ce2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce30:	70bb      	strb	r3, [r7, #2]
 800ce32:	2d02      	cmp	r5, #2
 800ce34:	d076      	beq.n	800cf24 <ucdr_serialize_endian_double+0x160>
 800ce36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce3a:	70fb      	strb	r3, [r7, #3]
 800ce3c:	2d03      	cmp	r5, #3
 800ce3e:	d075      	beq.n	800cf2c <ucdr_serialize_endian_double+0x168>
 800ce40:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ce44:	713b      	strb	r3, [r7, #4]
 800ce46:	2d04      	cmp	r5, #4
 800ce48:	d074      	beq.n	800cf34 <ucdr_serialize_endian_double+0x170>
 800ce4a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ce4e:	717b      	strb	r3, [r7, #5]
 800ce50:	2d05      	cmp	r5, #5
 800ce52:	d073      	beq.n	800cf3c <ucdr_serialize_endian_double+0x178>
 800ce54:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ce58:	71bb      	strb	r3, [r7, #6]
 800ce5a:	2d06      	cmp	r5, #6
 800ce5c:	d072      	beq.n	800cf44 <ucdr_serialize_endian_double+0x180>
 800ce5e:	f89d 3000 	ldrb.w	r3, [sp]
 800ce62:	71fb      	strb	r3, [r7, #7]
 800ce64:	6923      	ldr	r3, [r4, #16]
 800ce66:	68a2      	ldr	r2, [r4, #8]
 800ce68:	7da0      	ldrb	r0, [r4, #22]
 800ce6a:	3308      	adds	r3, #8
 800ce6c:	1b5d      	subs	r5, r3, r5
 800ce6e:	444a      	add	r2, r9
 800ce70:	2308      	movs	r3, #8
 800ce72:	f080 0001 	eor.w	r0, r0, #1
 800ce76:	60a2      	str	r2, [r4, #8]
 800ce78:	6125      	str	r5, [r4, #16]
 800ce7a:	7563      	strb	r3, [r4, #21]
 800ce7c:	b003      	add	sp, #12
 800ce7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce82:	2108      	movs	r1, #8
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 fa0f 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800ce8a:	b348      	cbz	r0, 800cee0 <ucdr_serialize_endian_double+0x11c>
 800ce8c:	2e01      	cmp	r6, #1
 800ce8e:	d02d      	beq.n	800ceec <ucdr_serialize_endian_double+0x128>
 800ce90:	68a3      	ldr	r3, [r4, #8]
 800ce92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	68a3      	ldr	r3, [r4, #8]
 800ce9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce9e:	705a      	strb	r2, [r3, #1]
 800cea0:	68a3      	ldr	r3, [r4, #8]
 800cea2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cea6:	709a      	strb	r2, [r3, #2]
 800cea8:	68a3      	ldr	r3, [r4, #8]
 800ceaa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ceae:	70da      	strb	r2, [r3, #3]
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ceb6:	711a      	strb	r2, [r3, #4]
 800ceb8:	68a3      	ldr	r3, [r4, #8]
 800ceba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cebe:	715a      	strb	r2, [r3, #5]
 800cec0:	68a3      	ldr	r3, [r4, #8]
 800cec2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cec6:	719a      	strb	r2, [r3, #6]
 800cec8:	68a3      	ldr	r3, [r4, #8]
 800ceca:	f89d 2000 	ldrb.w	r2, [sp]
 800cece:	71da      	strb	r2, [r3, #7]
 800ced0:	68a2      	ldr	r2, [r4, #8]
 800ced2:	6923      	ldr	r3, [r4, #16]
 800ced4:	3208      	adds	r2, #8
 800ced6:	3308      	adds	r3, #8
 800ced8:	2108      	movs	r1, #8
 800ceda:	60a2      	str	r2, [r4, #8]
 800cedc:	6123      	str	r3, [r4, #16]
 800cede:	7561      	strb	r1, [r4, #21]
 800cee0:	7da0      	ldrb	r0, [r4, #22]
 800cee2:	f080 0001 	eor.w	r0, r0, #1
 800cee6:	b003      	add	sp, #12
 800cee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceec:	466b      	mov	r3, sp
 800ceee:	cb03      	ldmia	r3!, {r0, r1}
 800cef0:	68a3      	ldr	r3, [r4, #8]
 800cef2:	6018      	str	r0, [r3, #0]
 800cef4:	6059      	str	r1, [r3, #4]
 800cef6:	e7eb      	b.n	800ced0 <ucdr_serialize_endian_double+0x10c>
 800cef8:	68a2      	ldr	r2, [r4, #8]
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	7da0      	ldrb	r0, [r4, #22]
 800cefe:	f884 8015 	strb.w	r8, [r4, #21]
 800cf02:	1b52      	subs	r2, r2, r5
 800cf04:	1b5b      	subs	r3, r3, r5
 800cf06:	f080 0001 	eor.w	r0, r0, #1
 800cf0a:	60a2      	str	r2, [r4, #8]
 800cf0c:	6123      	str	r3, [r4, #16]
 800cf0e:	b003      	add	sp, #12
 800cf10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf14:	68a3      	ldr	r3, [r4, #8]
 800cf16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf1a:	701a      	strb	r2, [r3, #0]
 800cf1c:	68a3      	ldr	r3, [r4, #8]
 800cf1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf22:	701a      	strb	r2, [r3, #0]
 800cf24:	68a3      	ldr	r3, [r4, #8]
 800cf26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf2a:	701a      	strb	r2, [r3, #0]
 800cf2c:	68a3      	ldr	r3, [r4, #8]
 800cf2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cf32:	701a      	strb	r2, [r3, #0]
 800cf34:	68a3      	ldr	r3, [r4, #8]
 800cf36:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cf3a:	701a      	strb	r2, [r3, #0]
 800cf3c:	68a3      	ldr	r3, [r4, #8]
 800cf3e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cf42:	701a      	strb	r2, [r3, #0]
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	f89d 2000 	ldrb.w	r2, [sp]
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	e78a      	b.n	800ce64 <ucdr_serialize_endian_double+0xa0>
 800cf4e:	466e      	mov	r6, sp
 800cf50:	4631      	mov	r1, r6
 800cf52:	462a      	mov	r2, r5
 800cf54:	4638      	mov	r0, r7
 800cf56:	f00e fbf6 	bl	801b746 <memcpy>
 800cf5a:	68a0      	ldr	r0, [r4, #8]
 800cf5c:	464a      	mov	r2, r9
 800cf5e:	1971      	adds	r1, r6, r5
 800cf60:	f00e fbf1 	bl	801b746 <memcpy>
 800cf64:	e77e      	b.n	800ce64 <ucdr_serialize_endian_double+0xa0>
 800cf66:	bf00      	nop

0800cf68 <ucdr_deserialize_double>:
 800cf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf6c:	460d      	mov	r5, r1
 800cf6e:	2108      	movs	r1, #8
 800cf70:	4604      	mov	r4, r0
 800cf72:	f000 f9ed 	bl	800d350 <ucdr_buffer_alignment>
 800cf76:	4601      	mov	r1, r0
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cf7e:	f000 fa2b 	bl	800d3d8 <ucdr_advance_buffer>
 800cf82:	2108      	movs	r1, #8
 800cf84:	4620      	mov	r0, r4
 800cf86:	f000 f983 	bl	800d290 <ucdr_check_buffer_available_for>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d151      	bne.n	800d032 <ucdr_deserialize_double+0xca>
 800cf8e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cf92:	42be      	cmp	r6, r7
 800cf94:	d948      	bls.n	800d028 <ucdr_deserialize_double+0xc0>
 800cf96:	6923      	ldr	r3, [r4, #16]
 800cf98:	60a6      	str	r6, [r4, #8]
 800cf9a:	1bf6      	subs	r6, r6, r7
 800cf9c:	4433      	add	r3, r6
 800cf9e:	f1c6 0808 	rsb	r8, r6, #8
 800cfa2:	6123      	str	r3, [r4, #16]
 800cfa4:	4641      	mov	r1, r8
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 f97e 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d06d      	beq.n	800d08c <ucdr_deserialize_double+0x124>
 800cfb0:	7d23      	ldrb	r3, [r4, #20]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	f000 8093 	beq.w	800d0de <ucdr_deserialize_double+0x176>
 800cfb8:	79fb      	ldrb	r3, [r7, #7]
 800cfba:	702b      	strb	r3, [r5, #0]
 800cfbc:	2e00      	cmp	r6, #0
 800cfbe:	d072      	beq.n	800d0a6 <ucdr_deserialize_double+0x13e>
 800cfc0:	79bb      	ldrb	r3, [r7, #6]
 800cfc2:	706b      	strb	r3, [r5, #1]
 800cfc4:	2e01      	cmp	r6, #1
 800cfc6:	f105 0302 	add.w	r3, r5, #2
 800cfca:	d070      	beq.n	800d0ae <ucdr_deserialize_double+0x146>
 800cfcc:	797b      	ldrb	r3, [r7, #5]
 800cfce:	70ab      	strb	r3, [r5, #2]
 800cfd0:	2e02      	cmp	r6, #2
 800cfd2:	f105 0303 	add.w	r3, r5, #3
 800cfd6:	d06e      	beq.n	800d0b6 <ucdr_deserialize_double+0x14e>
 800cfd8:	793b      	ldrb	r3, [r7, #4]
 800cfda:	70eb      	strb	r3, [r5, #3]
 800cfdc:	2e03      	cmp	r6, #3
 800cfde:	f105 0304 	add.w	r3, r5, #4
 800cfe2:	d06c      	beq.n	800d0be <ucdr_deserialize_double+0x156>
 800cfe4:	78fb      	ldrb	r3, [r7, #3]
 800cfe6:	712b      	strb	r3, [r5, #4]
 800cfe8:	2e04      	cmp	r6, #4
 800cfea:	f105 0305 	add.w	r3, r5, #5
 800cfee:	d06a      	beq.n	800d0c6 <ucdr_deserialize_double+0x15e>
 800cff0:	78bb      	ldrb	r3, [r7, #2]
 800cff2:	716b      	strb	r3, [r5, #5]
 800cff4:	2e05      	cmp	r6, #5
 800cff6:	f105 0306 	add.w	r3, r5, #6
 800cffa:	d068      	beq.n	800d0ce <ucdr_deserialize_double+0x166>
 800cffc:	787b      	ldrb	r3, [r7, #1]
 800cffe:	71ab      	strb	r3, [r5, #6]
 800d000:	2e06      	cmp	r6, #6
 800d002:	f105 0307 	add.w	r3, r5, #7
 800d006:	d066      	beq.n	800d0d6 <ucdr_deserialize_double+0x16e>
 800d008:	783b      	ldrb	r3, [r7, #0]
 800d00a:	71eb      	strb	r3, [r5, #7]
 800d00c:	6923      	ldr	r3, [r4, #16]
 800d00e:	68a2      	ldr	r2, [r4, #8]
 800d010:	7da0      	ldrb	r0, [r4, #22]
 800d012:	3308      	adds	r3, #8
 800d014:	1b9e      	subs	r6, r3, r6
 800d016:	2308      	movs	r3, #8
 800d018:	4442      	add	r2, r8
 800d01a:	7563      	strb	r3, [r4, #21]
 800d01c:	60a2      	str	r2, [r4, #8]
 800d01e:	6126      	str	r6, [r4, #16]
 800d020:	f080 0001 	eor.w	r0, r0, #1
 800d024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d028:	2108      	movs	r1, #8
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 f93c 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800d030:	b310      	cbz	r0, 800d078 <ucdr_deserialize_double+0x110>
 800d032:	7d23      	ldrb	r3, [r4, #20]
 800d034:	2b01      	cmp	r3, #1
 800d036:	68a3      	ldr	r3, [r4, #8]
 800d038:	d023      	beq.n	800d082 <ucdr_deserialize_double+0x11a>
 800d03a:	79db      	ldrb	r3, [r3, #7]
 800d03c:	702b      	strb	r3, [r5, #0]
 800d03e:	68a3      	ldr	r3, [r4, #8]
 800d040:	799b      	ldrb	r3, [r3, #6]
 800d042:	706b      	strb	r3, [r5, #1]
 800d044:	68a3      	ldr	r3, [r4, #8]
 800d046:	795b      	ldrb	r3, [r3, #5]
 800d048:	70ab      	strb	r3, [r5, #2]
 800d04a:	68a3      	ldr	r3, [r4, #8]
 800d04c:	791b      	ldrb	r3, [r3, #4]
 800d04e:	70eb      	strb	r3, [r5, #3]
 800d050:	68a3      	ldr	r3, [r4, #8]
 800d052:	78db      	ldrb	r3, [r3, #3]
 800d054:	712b      	strb	r3, [r5, #4]
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	789b      	ldrb	r3, [r3, #2]
 800d05a:	716b      	strb	r3, [r5, #5]
 800d05c:	68a3      	ldr	r3, [r4, #8]
 800d05e:	785b      	ldrb	r3, [r3, #1]
 800d060:	71ab      	strb	r3, [r5, #6]
 800d062:	68a3      	ldr	r3, [r4, #8]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	71eb      	strb	r3, [r5, #7]
 800d068:	68a2      	ldr	r2, [r4, #8]
 800d06a:	6923      	ldr	r3, [r4, #16]
 800d06c:	3208      	adds	r2, #8
 800d06e:	3308      	adds	r3, #8
 800d070:	2108      	movs	r1, #8
 800d072:	60a2      	str	r2, [r4, #8]
 800d074:	6123      	str	r3, [r4, #16]
 800d076:	7561      	strb	r1, [r4, #21]
 800d078:	7da0      	ldrb	r0, [r4, #22]
 800d07a:	f080 0001 	eor.w	r0, r0, #1
 800d07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	606b      	str	r3, [r5, #4]
 800d088:	602a      	str	r2, [r5, #0]
 800d08a:	e7ed      	b.n	800d068 <ucdr_deserialize_double+0x100>
 800d08c:	68a2      	ldr	r2, [r4, #8]
 800d08e:	6923      	ldr	r3, [r4, #16]
 800d090:	7da0      	ldrb	r0, [r4, #22]
 800d092:	f884 9015 	strb.w	r9, [r4, #21]
 800d096:	1b92      	subs	r2, r2, r6
 800d098:	1b9b      	subs	r3, r3, r6
 800d09a:	60a2      	str	r2, [r4, #8]
 800d09c:	6123      	str	r3, [r4, #16]
 800d09e:	f080 0001 	eor.w	r0, r0, #1
 800d0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a6:	68a3      	ldr	r3, [r4, #8]
 800d0a8:	799b      	ldrb	r3, [r3, #6]
 800d0aa:	706b      	strb	r3, [r5, #1]
 800d0ac:	1cab      	adds	r3, r5, #2
 800d0ae:	68a2      	ldr	r2, [r4, #8]
 800d0b0:	7952      	ldrb	r2, [r2, #5]
 800d0b2:	f803 2b01 	strb.w	r2, [r3], #1
 800d0b6:	68a2      	ldr	r2, [r4, #8]
 800d0b8:	7912      	ldrb	r2, [r2, #4]
 800d0ba:	f803 2b01 	strb.w	r2, [r3], #1
 800d0be:	68a2      	ldr	r2, [r4, #8]
 800d0c0:	78d2      	ldrb	r2, [r2, #3]
 800d0c2:	f803 2b01 	strb.w	r2, [r3], #1
 800d0c6:	68a2      	ldr	r2, [r4, #8]
 800d0c8:	7892      	ldrb	r2, [r2, #2]
 800d0ca:	f803 2b01 	strb.w	r2, [r3], #1
 800d0ce:	68a2      	ldr	r2, [r4, #8]
 800d0d0:	7852      	ldrb	r2, [r2, #1]
 800d0d2:	f803 2b01 	strb.w	r2, [r3], #1
 800d0d6:	68a2      	ldr	r2, [r4, #8]
 800d0d8:	7812      	ldrb	r2, [r2, #0]
 800d0da:	701a      	strb	r2, [r3, #0]
 800d0dc:	e796      	b.n	800d00c <ucdr_deserialize_double+0xa4>
 800d0de:	4639      	mov	r1, r7
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f00e fb2f 	bl	801b746 <memcpy>
 800d0e8:	68a1      	ldr	r1, [r4, #8]
 800d0ea:	4642      	mov	r2, r8
 800d0ec:	19a8      	adds	r0, r5, r6
 800d0ee:	f00e fb2a 	bl	801b746 <memcpy>
 800d0f2:	e78b      	b.n	800d00c <ucdr_deserialize_double+0xa4>

0800d0f4 <ucdr_deserialize_endian_double>:
 800d0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	2108      	movs	r1, #8
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	4615      	mov	r5, r2
 800d100:	f000 f926 	bl	800d350 <ucdr_buffer_alignment>
 800d104:	4601      	mov	r1, r0
 800d106:	4620      	mov	r0, r4
 800d108:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d10c:	f000 f964 	bl	800d3d8 <ucdr_advance_buffer>
 800d110:	2108      	movs	r1, #8
 800d112:	4620      	mov	r0, r4
 800d114:	f000 f8bc 	bl	800d290 <ucdr_check_buffer_available_for>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d159      	bne.n	800d1d0 <ucdr_deserialize_endian_double+0xdc>
 800d11c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800d120:	4546      	cmp	r6, r8
 800d122:	d950      	bls.n	800d1c6 <ucdr_deserialize_endian_double+0xd2>
 800d124:	6923      	ldr	r3, [r4, #16]
 800d126:	60a6      	str	r6, [r4, #8]
 800d128:	eba6 0608 	sub.w	r6, r6, r8
 800d12c:	4433      	add	r3, r6
 800d12e:	f1c6 0a08 	rsb	sl, r6, #8
 800d132:	6123      	str	r3, [r4, #16]
 800d134:	4651      	mov	r1, sl
 800d136:	4620      	mov	r0, r4
 800d138:	f000 f8b6 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d073      	beq.n	800d228 <ucdr_deserialize_endian_double+0x134>
 800d140:	2f01      	cmp	r7, #1
 800d142:	f000 809a 	beq.w	800d27a <ucdr_deserialize_endian_double+0x186>
 800d146:	f898 3007 	ldrb.w	r3, [r8, #7]
 800d14a:	702b      	strb	r3, [r5, #0]
 800d14c:	2e00      	cmp	r6, #0
 800d14e:	d078      	beq.n	800d242 <ucdr_deserialize_endian_double+0x14e>
 800d150:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d154:	706b      	strb	r3, [r5, #1]
 800d156:	2e01      	cmp	r6, #1
 800d158:	f105 0302 	add.w	r3, r5, #2
 800d15c:	d075      	beq.n	800d24a <ucdr_deserialize_endian_double+0x156>
 800d15e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800d162:	70ab      	strb	r3, [r5, #2]
 800d164:	2e02      	cmp	r6, #2
 800d166:	f105 0303 	add.w	r3, r5, #3
 800d16a:	d072      	beq.n	800d252 <ucdr_deserialize_endian_double+0x15e>
 800d16c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d170:	70eb      	strb	r3, [r5, #3]
 800d172:	2e03      	cmp	r6, #3
 800d174:	f105 0304 	add.w	r3, r5, #4
 800d178:	d06f      	beq.n	800d25a <ucdr_deserialize_endian_double+0x166>
 800d17a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800d17e:	712b      	strb	r3, [r5, #4]
 800d180:	2e04      	cmp	r6, #4
 800d182:	f105 0305 	add.w	r3, r5, #5
 800d186:	d06c      	beq.n	800d262 <ucdr_deserialize_endian_double+0x16e>
 800d188:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d18c:	716b      	strb	r3, [r5, #5]
 800d18e:	2e05      	cmp	r6, #5
 800d190:	f105 0306 	add.w	r3, r5, #6
 800d194:	d069      	beq.n	800d26a <ucdr_deserialize_endian_double+0x176>
 800d196:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d19a:	71ab      	strb	r3, [r5, #6]
 800d19c:	2e06      	cmp	r6, #6
 800d19e:	f105 0307 	add.w	r3, r5, #7
 800d1a2:	d066      	beq.n	800d272 <ucdr_deserialize_endian_double+0x17e>
 800d1a4:	f898 3000 	ldrb.w	r3, [r8]
 800d1a8:	71eb      	strb	r3, [r5, #7]
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	68a2      	ldr	r2, [r4, #8]
 800d1ae:	7da0      	ldrb	r0, [r4, #22]
 800d1b0:	3308      	adds	r3, #8
 800d1b2:	1b9e      	subs	r6, r3, r6
 800d1b4:	2308      	movs	r3, #8
 800d1b6:	4452      	add	r2, sl
 800d1b8:	7563      	strb	r3, [r4, #21]
 800d1ba:	60a2      	str	r2, [r4, #8]
 800d1bc:	6126      	str	r6, [r4, #16]
 800d1be:	f080 0001 	eor.w	r0, r0, #1
 800d1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c6:	2108      	movs	r1, #8
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f000 f86d 	bl	800d2a8 <ucdr_check_final_buffer_behavior>
 800d1ce:	b308      	cbz	r0, 800d214 <ucdr_deserialize_endian_double+0x120>
 800d1d0:	2f01      	cmp	r7, #1
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	d023      	beq.n	800d21e <ucdr_deserialize_endian_double+0x12a>
 800d1d6:	79db      	ldrb	r3, [r3, #7]
 800d1d8:	702b      	strb	r3, [r5, #0]
 800d1da:	68a3      	ldr	r3, [r4, #8]
 800d1dc:	799b      	ldrb	r3, [r3, #6]
 800d1de:	706b      	strb	r3, [r5, #1]
 800d1e0:	68a3      	ldr	r3, [r4, #8]
 800d1e2:	795b      	ldrb	r3, [r3, #5]
 800d1e4:	70ab      	strb	r3, [r5, #2]
 800d1e6:	68a3      	ldr	r3, [r4, #8]
 800d1e8:	791b      	ldrb	r3, [r3, #4]
 800d1ea:	70eb      	strb	r3, [r5, #3]
 800d1ec:	68a3      	ldr	r3, [r4, #8]
 800d1ee:	78db      	ldrb	r3, [r3, #3]
 800d1f0:	712b      	strb	r3, [r5, #4]
 800d1f2:	68a3      	ldr	r3, [r4, #8]
 800d1f4:	789b      	ldrb	r3, [r3, #2]
 800d1f6:	716b      	strb	r3, [r5, #5]
 800d1f8:	68a3      	ldr	r3, [r4, #8]
 800d1fa:	785b      	ldrb	r3, [r3, #1]
 800d1fc:	71ab      	strb	r3, [r5, #6]
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	71eb      	strb	r3, [r5, #7]
 800d204:	68a2      	ldr	r2, [r4, #8]
 800d206:	6923      	ldr	r3, [r4, #16]
 800d208:	3208      	adds	r2, #8
 800d20a:	3308      	adds	r3, #8
 800d20c:	2108      	movs	r1, #8
 800d20e:	60a2      	str	r2, [r4, #8]
 800d210:	6123      	str	r3, [r4, #16]
 800d212:	7561      	strb	r1, [r4, #21]
 800d214:	7da0      	ldrb	r0, [r4, #22]
 800d216:	f080 0001 	eor.w	r0, r0, #1
 800d21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	606b      	str	r3, [r5, #4]
 800d224:	602a      	str	r2, [r5, #0]
 800d226:	e7ed      	b.n	800d204 <ucdr_deserialize_endian_double+0x110>
 800d228:	68a2      	ldr	r2, [r4, #8]
 800d22a:	6923      	ldr	r3, [r4, #16]
 800d22c:	7da0      	ldrb	r0, [r4, #22]
 800d22e:	f884 9015 	strb.w	r9, [r4, #21]
 800d232:	1b92      	subs	r2, r2, r6
 800d234:	1b9b      	subs	r3, r3, r6
 800d236:	60a2      	str	r2, [r4, #8]
 800d238:	6123      	str	r3, [r4, #16]
 800d23a:	f080 0001 	eor.w	r0, r0, #1
 800d23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d242:	68a3      	ldr	r3, [r4, #8]
 800d244:	799b      	ldrb	r3, [r3, #6]
 800d246:	706b      	strb	r3, [r5, #1]
 800d248:	1cab      	adds	r3, r5, #2
 800d24a:	68a2      	ldr	r2, [r4, #8]
 800d24c:	7952      	ldrb	r2, [r2, #5]
 800d24e:	f803 2b01 	strb.w	r2, [r3], #1
 800d252:	68a2      	ldr	r2, [r4, #8]
 800d254:	7912      	ldrb	r2, [r2, #4]
 800d256:	f803 2b01 	strb.w	r2, [r3], #1
 800d25a:	68a2      	ldr	r2, [r4, #8]
 800d25c:	78d2      	ldrb	r2, [r2, #3]
 800d25e:	f803 2b01 	strb.w	r2, [r3], #1
 800d262:	68a2      	ldr	r2, [r4, #8]
 800d264:	7892      	ldrb	r2, [r2, #2]
 800d266:	f803 2b01 	strb.w	r2, [r3], #1
 800d26a:	68a2      	ldr	r2, [r4, #8]
 800d26c:	7852      	ldrb	r2, [r2, #1]
 800d26e:	f803 2b01 	strb.w	r2, [r3], #1
 800d272:	68a2      	ldr	r2, [r4, #8]
 800d274:	7812      	ldrb	r2, [r2, #0]
 800d276:	701a      	strb	r2, [r3, #0]
 800d278:	e797      	b.n	800d1aa <ucdr_deserialize_endian_double+0xb6>
 800d27a:	4641      	mov	r1, r8
 800d27c:	4632      	mov	r2, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	f00e fa61 	bl	801b746 <memcpy>
 800d284:	68a1      	ldr	r1, [r4, #8]
 800d286:	4652      	mov	r2, sl
 800d288:	19a8      	adds	r0, r5, r6
 800d28a:	f00e fa5c 	bl	801b746 <memcpy>
 800d28e:	e78c      	b.n	800d1aa <ucdr_deserialize_endian_double+0xb6>

0800d290 <ucdr_check_buffer_available_for>:
 800d290:	7d83      	ldrb	r3, [r0, #22]
 800d292:	b93b      	cbnz	r3, 800d2a4 <ucdr_check_buffer_available_for+0x14>
 800d294:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d298:	4419      	add	r1, r3
 800d29a:	4288      	cmp	r0, r1
 800d29c:	bf34      	ite	cc
 800d29e:	2000      	movcc	r0, #0
 800d2a0:	2001      	movcs	r0, #1
 800d2a2:	4770      	bx	lr
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	4770      	bx	lr

0800d2a8 <ucdr_check_final_buffer_behavior>:
 800d2a8:	7d83      	ldrb	r3, [r0, #22]
 800d2aa:	b943      	cbnz	r3, 800d2be <ucdr_check_final_buffer_behavior+0x16>
 800d2ac:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d2b0:	4291      	cmp	r1, r2
 800d2b2:	b510      	push	{r4, lr}
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	d205      	bcs.n	800d2c4 <ucdr_check_final_buffer_behavior+0x1c>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	2300      	movs	r3, #0
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	4770      	bx	lr
 800d2c4:	6982      	ldr	r2, [r0, #24]
 800d2c6:	b13a      	cbz	r2, 800d2d8 <ucdr_check_final_buffer_behavior+0x30>
 800d2c8:	69c1      	ldr	r1, [r0, #28]
 800d2ca:	4790      	blx	r2
 800d2cc:	f080 0301 	eor.w	r3, r0, #1
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	75a0      	strb	r0, [r4, #22]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	bd10      	pop	{r4, pc}
 800d2d8:	2001      	movs	r0, #1
 800d2da:	75a0      	strb	r0, [r4, #22]
 800d2dc:	e7fa      	b.n	800d2d4 <ucdr_check_final_buffer_behavior+0x2c>
 800d2de:	bf00      	nop

0800d2e0 <ucdr_set_on_full_buffer_callback>:
 800d2e0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop

0800d2e8 <ucdr_init_buffer_origin_offset_endian>:
 800d2e8:	b410      	push	{r4}
 800d2ea:	9c01      	ldr	r4, [sp, #4]
 800d2ec:	6001      	str	r1, [r0, #0]
 800d2ee:	440a      	add	r2, r1
 800d2f0:	6042      	str	r2, [r0, #4]
 800d2f2:	190a      	adds	r2, r1, r4
 800d2f4:	441c      	add	r4, r3
 800d2f6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d2fa:	6082      	str	r2, [r0, #8]
 800d2fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d300:	7503      	strb	r3, [r0, #20]
 800d302:	2200      	movs	r2, #0
 800d304:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d30c:	7542      	strb	r2, [r0, #21]
 800d30e:	7582      	strb	r2, [r0, #22]
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop

0800d314 <ucdr_init_buffer_origin_offset>:
 800d314:	b510      	push	{r4, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	9c04      	ldr	r4, [sp, #16]
 800d31a:	9400      	str	r4, [sp, #0]
 800d31c:	2401      	movs	r4, #1
 800d31e:	9401      	str	r4, [sp, #4]
 800d320:	f7ff ffe2 	bl	800d2e8 <ucdr_init_buffer_origin_offset_endian>
 800d324:	b002      	add	sp, #8
 800d326:	bd10      	pop	{r4, pc}

0800d328 <ucdr_init_buffer_origin>:
 800d328:	b510      	push	{r4, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	2400      	movs	r4, #0
 800d32e:	9400      	str	r4, [sp, #0]
 800d330:	f7ff fff0 	bl	800d314 <ucdr_init_buffer_origin_offset>
 800d334:	b002      	add	sp, #8
 800d336:	bd10      	pop	{r4, pc}

0800d338 <ucdr_init_buffer>:
 800d338:	2300      	movs	r3, #0
 800d33a:	f7ff bff5 	b.w	800d328 <ucdr_init_buffer_origin>
 800d33e:	bf00      	nop

0800d340 <ucdr_alignment>:
 800d340:	fbb0 f3f1 	udiv	r3, r0, r1
 800d344:	fb03 0011 	mls	r0, r3, r1, r0
 800d348:	1a08      	subs	r0, r1, r0
 800d34a:	3901      	subs	r1, #1
 800d34c:	4008      	ands	r0, r1
 800d34e:	4770      	bx	lr

0800d350 <ucdr_buffer_alignment>:
 800d350:	7d43      	ldrb	r3, [r0, #21]
 800d352:	428b      	cmp	r3, r1
 800d354:	d208      	bcs.n	800d368 <ucdr_buffer_alignment+0x18>
 800d356:	6900      	ldr	r0, [r0, #16]
 800d358:	fbb0 f3f1 	udiv	r3, r0, r1
 800d35c:	fb01 0013 	mls	r0, r1, r3, r0
 800d360:	1a08      	subs	r0, r1, r0
 800d362:	3901      	subs	r1, #1
 800d364:	4008      	ands	r0, r1
 800d366:	4770      	bx	lr
 800d368:	2000      	movs	r0, #0
 800d36a:	4770      	bx	lr

0800d36c <ucdr_align_to>:
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4604      	mov	r4, r0
 800d370:	460d      	mov	r5, r1
 800d372:	f7ff ffed 	bl	800d350 <ucdr_buffer_alignment>
 800d376:	68a3      	ldr	r3, [r4, #8]
 800d378:	6921      	ldr	r1, [r4, #16]
 800d37a:	7565      	strb	r5, [r4, #21]
 800d37c:	181a      	adds	r2, r3, r0
 800d37e:	6863      	ldr	r3, [r4, #4]
 800d380:	4293      	cmp	r3, r2
 800d382:	4408      	add	r0, r1
 800d384:	bf28      	it	cs
 800d386:	4613      	movcs	r3, r2
 800d388:	6120      	str	r0, [r4, #16]
 800d38a:	60a3      	str	r3, [r4, #8]
 800d38c:	bd38      	pop	{r3, r4, r5, pc}
 800d38e:	bf00      	nop

0800d390 <ucdr_buffer_length>:
 800d390:	6882      	ldr	r2, [r0, #8]
 800d392:	6800      	ldr	r0, [r0, #0]
 800d394:	1a10      	subs	r0, r2, r0
 800d396:	4770      	bx	lr

0800d398 <ucdr_buffer_remaining>:
 800d398:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d39c:	1a10      	subs	r0, r2, r0
 800d39e:	4770      	bx	lr

0800d3a0 <ucdr_check_final_buffer_behavior_array>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	7d83      	ldrb	r3, [r0, #22]
 800d3a4:	b963      	cbnz	r3, 800d3c0 <ucdr_check_final_buffer_behavior_array+0x20>
 800d3a6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	460d      	mov	r5, r1
 800d3b0:	d308      	bcc.n	800d3c4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d3b2:	b139      	cbz	r1, 800d3c4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d3b4:	6983      	ldr	r3, [r0, #24]
 800d3b6:	b163      	cbz	r3, 800d3d2 <ucdr_check_final_buffer_behavior_array+0x32>
 800d3b8:	69c1      	ldr	r1, [r0, #28]
 800d3ba:	4798      	blx	r3
 800d3bc:	75a0      	strb	r0, [r4, #22]
 800d3be:	b108      	cbz	r0, 800d3c4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f7ff ffe7 	bl	800d398 <ucdr_buffer_remaining>
 800d3ca:	42a8      	cmp	r0, r5
 800d3cc:	bf28      	it	cs
 800d3ce:	4628      	movcs	r0, r5
 800d3d0:	bd38      	pop	{r3, r4, r5, pc}
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	7583      	strb	r3, [r0, #22]
 800d3d6:	e7f3      	b.n	800d3c0 <ucdr_check_final_buffer_behavior_array+0x20>

0800d3d8 <ucdr_advance_buffer>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4604      	mov	r4, r0
 800d3dc:	460d      	mov	r5, r1
 800d3de:	f7ff ff57 	bl	800d290 <ucdr_check_buffer_available_for>
 800d3e2:	b178      	cbz	r0, 800d404 <ucdr_advance_buffer+0x2c>
 800d3e4:	6923      	ldr	r3, [r4, #16]
 800d3e6:	68a2      	ldr	r2, [r4, #8]
 800d3e8:	442b      	add	r3, r5
 800d3ea:	6123      	str	r3, [r4, #16]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	442a      	add	r2, r5
 800d3f0:	7563      	strb	r3, [r4, #21]
 800d3f2:	60a2      	str	r2, [r4, #8]
 800d3f4:	bd38      	pop	{r3, r4, r5, pc}
 800d3f6:	68a2      	ldr	r2, [r4, #8]
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	4402      	add	r2, r0
 800d3fc:	4403      	add	r3, r0
 800d3fe:	1a2d      	subs	r5, r5, r0
 800d400:	60a2      	str	r2, [r4, #8]
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	4629      	mov	r1, r5
 800d406:	2201      	movs	r2, #1
 800d408:	4620      	mov	r0, r4
 800d40a:	f7ff ffc9 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 800d40e:	2800      	cmp	r0, #0
 800d410:	d1f1      	bne.n	800d3f6 <ucdr_advance_buffer+0x1e>
 800d412:	2301      	movs	r3, #1
 800d414:	7563      	strb	r3, [r4, #21]
 800d416:	bd38      	pop	{r3, r4, r5, pc}

0800d418 <rcl_get_zero_initialized_client>:
 800d418:	4b01      	ldr	r3, [pc, #4]	@ (800d420 <rcl_get_zero_initialized_client+0x8>)
 800d41a:	6818      	ldr	r0, [r3, #0]
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	0801df30 	.word	0x0801df30

0800d424 <rcl_client_init>:
 800d424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d428:	b089      	sub	sp, #36	@ 0x24
 800d42a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d42c:	b1c5      	cbz	r5, 800d460 <rcl_client_init+0x3c>
 800d42e:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800d432:	4604      	mov	r4, r0
 800d434:	4648      	mov	r0, r9
 800d436:	4688      	mov	r8, r1
 800d438:	4617      	mov	r7, r2
 800d43a:	461e      	mov	r6, r3
 800d43c:	f001 fdce 	bl	800efdc <rcutils_allocator_is_valid>
 800d440:	b170      	cbz	r0, 800d460 <rcl_client_init+0x3c>
 800d442:	b16c      	cbz	r4, 800d460 <rcl_client_init+0x3c>
 800d444:	4640      	mov	r0, r8
 800d446:	f000 fb83 	bl	800db50 <rcl_node_is_valid>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d05e      	beq.n	800d50c <rcl_client_init+0xe8>
 800d44e:	b13f      	cbz	r7, 800d460 <rcl_client_init+0x3c>
 800d450:	b136      	cbz	r6, 800d460 <rcl_client_init+0x3c>
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	b14b      	cbz	r3, 800d46a <rcl_client_init+0x46>
 800d456:	2664      	movs	r6, #100	@ 0x64
 800d458:	4630      	mov	r0, r6
 800d45a:	b009      	add	sp, #36	@ 0x24
 800d45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d460:	260b      	movs	r6, #11
 800d462:	4630      	mov	r0, r6
 800d464:	b009      	add	sp, #36	@ 0x24
 800d466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d46a:	aa07      	add	r2, sp, #28
 800d46c:	9205      	str	r2, [sp, #20]
 800d46e:	2201      	movs	r2, #1
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	9203      	str	r2, [sp, #12]
 800d474:	9307      	str	r3, [sp, #28]
 800d476:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800d47a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d47e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d482:	4631      	mov	r1, r6
 800d484:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d488:	4640      	mov	r0, r8
 800d48a:	f000 fbb5 	bl	800dbf8 <rcl_node_resolve_name>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d14b      	bne.n	800d52a <rcl_client_init+0x106>
 800d492:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800d494:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d496:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800d49a:	4798      	blx	r3
 800d49c:	6020      	str	r0, [r4, #0]
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d049      	beq.n	800d536 <rcl_client_init+0x112>
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	f000 fb76 	bl	800db94 <rcl_node_get_rmw_handle>
 800d4a8:	462b      	mov	r3, r5
 800d4aa:	9a07      	ldr	r2, [sp, #28]
 800d4ac:	6826      	ldr	r6, [r4, #0]
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	f002 fad4 	bl	800fa5c <rmw_create_client>
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 800d4ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d4be:	b360      	cbz	r0, 800d51a <rcl_client_init+0xf6>
 800d4c0:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800d4c4:	f002 fbe0 	bl	800fc88 <rmw_client_request_publisher_get_actual_qos>
 800d4c8:	bb28      	cbnz	r0, 800d516 <rcl_client_init+0xf2>
 800d4ca:	6821      	ldr	r1, [r4, #0]
 800d4cc:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 800d4d0:	31b8      	adds	r1, #184	@ 0xb8
 800d4d2:	f002 fbe9 	bl	800fca8 <rmw_client_response_subscription_get_actual_qos>
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	b9e8      	cbnz	r0, 800d516 <rcl_client_init+0xf2>
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800d4e0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800d4e4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	2268      	movs	r2, #104	@ 0x68
 800d4ee:	f00e f92a 	bl	801b746 <memcpy>
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
 800d4fc:	9807      	ldr	r0, [sp, #28]
 800d4fe:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d500:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d502:	4798      	blx	r3
 800d504:	4630      	mov	r0, r6
 800d506:	b009      	add	sp, #36	@ 0x24
 800d508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d50c:	26c8      	movs	r6, #200	@ 0xc8
 800d50e:	4630      	mov	r0, r6
 800d510:	b009      	add	sp, #36	@ 0x24
 800d512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	b12b      	cbz	r3, 800d526 <rcl_client_init+0x102>
 800d51a:	4618      	mov	r0, r3
 800d51c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800d51e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d520:	4790      	blx	r2
 800d522:	2300      	movs	r3, #0
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	2601      	movs	r6, #1
 800d528:	e7e8      	b.n	800d4fc <rcl_client_init+0xd8>
 800d52a:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d903      	bls.n	800d53a <rcl_client_init+0x116>
 800d532:	280a      	cmp	r0, #10
 800d534:	d1f7      	bne.n	800d526 <rcl_client_init+0x102>
 800d536:	260a      	movs	r6, #10
 800d538:	e7e0      	b.n	800d4fc <rcl_client_init+0xd8>
 800d53a:	2668      	movs	r6, #104	@ 0x68
 800d53c:	e7de      	b.n	800d4fc <rcl_client_init+0xd8>
 800d53e:	bf00      	nop

0800d540 <rcl_client_get_default_options>:
 800d540:	b530      	push	{r4, r5, lr}
 800d542:	4d0f      	ldr	r5, [pc, #60]	@ (800d580 <rcl_client_get_default_options+0x40>)
 800d544:	490f      	ldr	r1, [pc, #60]	@ (800d584 <rcl_client_get_default_options+0x44>)
 800d546:	b087      	sub	sp, #28
 800d548:	4604      	mov	r4, r0
 800d54a:	2250      	movs	r2, #80	@ 0x50
 800d54c:	4628      	mov	r0, r5
 800d54e:	f00e f8fa 	bl	801b746 <memcpy>
 800d552:	4668      	mov	r0, sp
 800d554:	f001 fd34 	bl	800efc0 <rcutils_get_default_allocator>
 800d558:	46ec      	mov	ip, sp
 800d55a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d55e:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800d562:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d566:	2268      	movs	r2, #104	@ 0x68
 800d568:	f8dc 3000 	ldr.w	r3, [ip]
 800d56c:	f8ce 3000 	str.w	r3, [lr]
 800d570:	4629      	mov	r1, r5
 800d572:	4620      	mov	r0, r4
 800d574:	f00e f8e7 	bl	801b746 <memcpy>
 800d578:	4620      	mov	r0, r4
 800d57a:	b007      	add	sp, #28
 800d57c:	bd30      	pop	{r4, r5, pc}
 800d57e:	bf00      	nop
 800d580:	200076b0 	.word	0x200076b0
 800d584:	0801df38 	.word	0x0801df38

0800d588 <rcl_client_get_rmw_handle>:
 800d588:	b118      	cbz	r0, 800d592 <rcl_client_get_rmw_handle+0xa>
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	b108      	cbz	r0, 800d592 <rcl_client_get_rmw_handle+0xa>
 800d58e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d592:	4770      	bx	lr

0800d594 <rcl_send_request>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	b1e8      	cbz	r0, 800d5d6 <rcl_send_request+0x42>
 800d59a:	4604      	mov	r4, r0
 800d59c:	6800      	ldr	r0, [r0, #0]
 800d59e:	b1d0      	cbz	r0, 800d5d6 <rcl_send_request+0x42>
 800d5a0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800d5a4:	b1bb      	cbz	r3, 800d5d6 <rcl_send_request+0x42>
 800d5a6:	460e      	mov	r6, r1
 800d5a8:	b1d1      	cbz	r1, 800d5e0 <rcl_send_request+0x4c>
 800d5aa:	4615      	mov	r5, r2
 800d5ac:	b1c2      	cbz	r2, 800d5e0 <rcl_send_request+0x4c>
 800d5ae:	2105      	movs	r1, #5
 800d5b0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800d5b4:	f001 fd20 	bl	800eff8 <__atomic_load_8>
 800d5b8:	6823      	ldr	r3, [r4, #0]
 800d5ba:	e9c5 0100 	strd	r0, r1, [r5]
 800d5be:	462a      	mov	r2, r5
 800d5c0:	4631      	mov	r1, r6
 800d5c2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d5c6:	f003 f89d 	bl	8010704 <rmw_send_request>
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	b160      	cbz	r0, 800d5e8 <rcl_send_request+0x54>
 800d5ce:	2601      	movs	r6, #1
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	b002      	add	sp, #8
 800d5d4:	bd70      	pop	{r4, r5, r6, pc}
 800d5d6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800d5da:	4630      	mov	r0, r6
 800d5dc:	b002      	add	sp, #8
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	260b      	movs	r6, #11
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	b002      	add	sp, #8
 800d5e6:	bd70      	pop	{r4, r5, r6, pc}
 800d5e8:	6820      	ldr	r0, [r4, #0]
 800d5ea:	2105      	movs	r1, #5
 800d5ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5f0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800d5f4:	9100      	str	r1, [sp, #0]
 800d5f6:	f001 fd6b 	bl	800f0d0 <__atomic_exchange_8>
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	b002      	add	sp, #8
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}

0800d600 <rcl_take_response>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	468e      	mov	lr, r1
 800d604:	460c      	mov	r4, r1
 800d606:	4616      	mov	r6, r2
 800d608:	4605      	mov	r5, r0
 800d60a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d60e:	b08c      	sub	sp, #48	@ 0x30
 800d610:	f10d 0c18 	add.w	ip, sp, #24
 800d614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d618:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d61c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d620:	b35d      	cbz	r5, 800d67a <rcl_take_response+0x7a>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	b34b      	cbz	r3, 800d67a <rcl_take_response+0x7a>
 800d626:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d62a:	b330      	cbz	r0, 800d67a <rcl_take_response+0x7a>
 800d62c:	b346      	cbz	r6, 800d680 <rcl_take_response+0x80>
 800d62e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d688 <rcl_take_response+0x88>
 800d632:	2300      	movs	r3, #0
 800d634:	f88d 3007 	strb.w	r3, [sp, #7]
 800d638:	4632      	mov	r2, r6
 800d63a:	f10d 0307 	add.w	r3, sp, #7
 800d63e:	a902      	add	r1, sp, #8
 800d640:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d644:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d648:	f003 f964 	bl	8010914 <rmw_take_response>
 800d64c:	4605      	mov	r5, r0
 800d64e:	b9c8      	cbnz	r0, 800d684 <rcl_take_response+0x84>
 800d650:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d654:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d658:	2a00      	cmp	r2, #0
 800d65a:	bf08      	it	eq
 800d65c:	461d      	moveq	r5, r3
 800d65e:	f10d 0e18 	add.w	lr, sp, #24
 800d662:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d666:	46a4      	mov	ip, r4
 800d668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d66c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d670:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d674:	4628      	mov	r0, r5
 800d676:	b00c      	add	sp, #48	@ 0x30
 800d678:	bd70      	pop	{r4, r5, r6, pc}
 800d67a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800d67e:	e7ee      	b.n	800d65e <rcl_take_response+0x5e>
 800d680:	250b      	movs	r5, #11
 800d682:	e7ec      	b.n	800d65e <rcl_take_response+0x5e>
 800d684:	2501      	movs	r5, #1
 800d686:	e7ea      	b.n	800d65e <rcl_take_response+0x5e>
	...

0800d690 <rcl_client_is_valid>:
 800d690:	b130      	cbz	r0, 800d6a0 <rcl_client_is_valid+0x10>
 800d692:	6800      	ldr	r0, [r0, #0]
 800d694:	b120      	cbz	r0, 800d6a0 <rcl_client_is_valid+0x10>
 800d696:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d69a:	3800      	subs	r0, #0
 800d69c:	bf18      	it	ne
 800d69e:	2001      	movne	r0, #1
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop

0800d6a4 <rcl_get_zero_initialized_init_options>:
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	4770      	bx	lr

0800d6a8 <rcl_init_options_init>:
 800d6a8:	b084      	sub	sp, #16
 800d6aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ac:	b097      	sub	sp, #92	@ 0x5c
 800d6ae:	ae1d      	add	r6, sp, #116	@ 0x74
 800d6b0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d058      	beq.n	800d76a <rcl_init_options_init+0xc2>
 800d6b8:	6803      	ldr	r3, [r0, #0]
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	b133      	cbz	r3, 800d6cc <rcl_init_options_init+0x24>
 800d6be:	2464      	movs	r4, #100	@ 0x64
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	b017      	add	sp, #92	@ 0x5c
 800d6c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d6c8:	b004      	add	sp, #16
 800d6ca:	4770      	bx	lr
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f001 fc85 	bl	800efdc <rcutils_allocator_is_valid>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d049      	beq.n	800d76a <rcl_init_options_init+0xc2>
 800d6d6:	46b4      	mov	ip, r6
 800d6d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d6dc:	ac11      	add	r4, sp, #68	@ 0x44
 800d6de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6e0:	f8dc 3000 	ldr.w	r3, [ip]
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800d6e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6ea:	2050      	movs	r0, #80	@ 0x50
 800d6ec:	4798      	blx	r3
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	6028      	str	r0, [r5, #0]
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d03b      	beq.n	800d76e <rcl_init_options_init+0xc6>
 800d6f6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800d6fa:	4686      	mov	lr, r0
 800d6fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d700:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d704:	f8dc 3000 	ldr.w	r3, [ip]
 800d708:	f8ce 3000 	str.w	r3, [lr]
 800d70c:	a802      	add	r0, sp, #8
 800d70e:	f002 f837 	bl	800f780 <rmw_get_zero_initialized_init_options>
 800d712:	f10d 0e08 	add.w	lr, sp, #8
 800d716:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d71a:	f104 0c18 	add.w	ip, r4, #24
 800d71e:	682f      	ldr	r7, [r5, #0]
 800d720:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d724:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d72c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d730:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d734:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d738:	ac20      	add	r4, sp, #128	@ 0x80
 800d73a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d73e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d742:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d746:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d74a:	f107 0018 	add.w	r0, r7, #24
 800d74e:	f002 fac1 	bl	800fcd4 <rmw_init_options_init>
 800d752:	4604      	mov	r4, r0
 800d754:	2800      	cmp	r0, #0
 800d756:	d0b3      	beq.n	800d6c0 <rcl_init_options_init+0x18>
 800d758:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800d75a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d75c:	6828      	ldr	r0, [r5, #0]
 800d75e:	4798      	blx	r3
 800d760:	4620      	mov	r0, r4
 800d762:	f008 ff09 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 800d766:	4604      	mov	r4, r0
 800d768:	e7aa      	b.n	800d6c0 <rcl_init_options_init+0x18>
 800d76a:	240b      	movs	r4, #11
 800d76c:	e7a8      	b.n	800d6c0 <rcl_init_options_init+0x18>
 800d76e:	240a      	movs	r4, #10
 800d770:	e7a6      	b.n	800d6c0 <rcl_init_options_init+0x18>
 800d772:	bf00      	nop

0800d774 <rcl_init_options_fini>:
 800d774:	b530      	push	{r4, r5, lr}
 800d776:	b087      	sub	sp, #28
 800d778:	b1f0      	cbz	r0, 800d7b8 <rcl_init_options_fini+0x44>
 800d77a:	6803      	ldr	r3, [r0, #0]
 800d77c:	4604      	mov	r4, r0
 800d77e:	b1db      	cbz	r3, 800d7b8 <rcl_init_options_fini+0x44>
 800d780:	469c      	mov	ip, r3
 800d782:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d786:	f10d 0e04 	add.w	lr, sp, #4
 800d78a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d78e:	f8dc 3000 	ldr.w	r3, [ip]
 800d792:	f8ce 3000 	str.w	r3, [lr]
 800d796:	a801      	add	r0, sp, #4
 800d798:	f001 fc20 	bl	800efdc <rcutils_allocator_is_valid>
 800d79c:	b160      	cbz	r0, 800d7b8 <rcl_init_options_fini+0x44>
 800d79e:	6820      	ldr	r0, [r4, #0]
 800d7a0:	3018      	adds	r0, #24
 800d7a2:	f002 fb47 	bl	800fe34 <rmw_init_options_fini>
 800d7a6:	4605      	mov	r5, r0
 800d7a8:	b950      	cbnz	r0, 800d7c0 <rcl_init_options_fini+0x4c>
 800d7aa:	6820      	ldr	r0, [r4, #0]
 800d7ac:	9b02      	ldr	r3, [sp, #8]
 800d7ae:	9905      	ldr	r1, [sp, #20]
 800d7b0:	4798      	blx	r3
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	b007      	add	sp, #28
 800d7b6:	bd30      	pop	{r4, r5, pc}
 800d7b8:	250b      	movs	r5, #11
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	b007      	add	sp, #28
 800d7be:	bd30      	pop	{r4, r5, pc}
 800d7c0:	f008 feda 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	e7f8      	b.n	800d7ba <rcl_init_options_fini+0x46>

0800d7c8 <rcl_init_options_copy>:
 800d7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	b094      	sub	sp, #80	@ 0x50
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d058      	beq.n	800d884 <rcl_init_options_copy+0xbc>
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	6800      	ldr	r0, [r0, #0]
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d054      	beq.n	800d884 <rcl_init_options_copy+0xbc>
 800d7da:	460e      	mov	r6, r1
 800d7dc:	f001 fbfe 	bl	800efdc <rcutils_allocator_is_valid>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d04f      	beq.n	800d884 <rcl_init_options_copy+0xbc>
 800d7e4:	2e00      	cmp	r6, #0
 800d7e6:	d04d      	beq.n	800d884 <rcl_init_options_copy+0xbc>
 800d7e8:	6833      	ldr	r3, [r6, #0]
 800d7ea:	b123      	cbz	r3, 800d7f6 <rcl_init_options_copy+0x2e>
 800d7ec:	2464      	movs	r4, #100	@ 0x64
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	b014      	add	sp, #80	@ 0x50
 800d7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f6:	6827      	ldr	r7, [r4, #0]
 800d7f8:	46bc      	mov	ip, r7
 800d7fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7fe:	ad0f      	add	r5, sp, #60	@ 0x3c
 800d800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d802:	f8dc 3000 	ldr.w	r3, [ip]
 800d806:	f8d7 8000 	ldr.w	r8, [r7]
 800d80a:	602b      	str	r3, [r5, #0]
 800d80c:	4619      	mov	r1, r3
 800d80e:	2050      	movs	r0, #80	@ 0x50
 800d810:	47c0      	blx	r8
 800d812:	4605      	mov	r5, r0
 800d814:	6030      	str	r0, [r6, #0]
 800d816:	b3d0      	cbz	r0, 800d88e <rcl_init_options_copy+0xc6>
 800d818:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800d81c:	4686      	mov	lr, r0
 800d81e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d822:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d826:	f8dc 3000 	ldr.w	r3, [ip]
 800d82a:	f8ce 3000 	str.w	r3, [lr]
 800d82e:	4668      	mov	r0, sp
 800d830:	f001 ffa6 	bl	800f780 <rmw_get_zero_initialized_init_options>
 800d834:	46ee      	mov	lr, sp
 800d836:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d83a:	f105 0c18 	add.w	ip, r5, #24
 800d83e:	6824      	ldr	r4, [r4, #0]
 800d840:	6835      	ldr	r5, [r6, #0]
 800d842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d846:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d84a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d84e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d852:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d856:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d85a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d85e:	f104 0018 	add.w	r0, r4, #24
 800d862:	f105 0118 	add.w	r1, r5, #24
 800d866:	f002 fa9d 	bl	800fda4 <rmw_init_options_copy>
 800d86a:	4604      	mov	r4, r0
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d0be      	beq.n	800d7ee <rcl_init_options_copy+0x26>
 800d870:	f001 fc7e 	bl	800f170 <rcutils_get_error_string>
 800d874:	f001 fc94 	bl	800f1a0 <rcutils_reset_error>
 800d878:	4630      	mov	r0, r6
 800d87a:	f7ff ff7b 	bl	800d774 <rcl_init_options_fini>
 800d87e:	b140      	cbz	r0, 800d892 <rcl_init_options_copy+0xca>
 800d880:	4604      	mov	r4, r0
 800d882:	e7b4      	b.n	800d7ee <rcl_init_options_copy+0x26>
 800d884:	240b      	movs	r4, #11
 800d886:	4620      	mov	r0, r4
 800d888:	b014      	add	sp, #80	@ 0x50
 800d88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d88e:	240a      	movs	r4, #10
 800d890:	e7ad      	b.n	800d7ee <rcl_init_options_copy+0x26>
 800d892:	4620      	mov	r0, r4
 800d894:	b014      	add	sp, #80	@ 0x50
 800d896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d89a:	f008 be6d 	b.w	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 800d89e:	bf00      	nop

0800d8a0 <rcl_init_options_set_domain_id>:
 800d8a0:	b120      	cbz	r0, 800d8ac <rcl_init_options_set_domain_id+0xc>
 800d8a2:	6803      	ldr	r3, [r0, #0]
 800d8a4:	b113      	cbz	r3, 800d8ac <rcl_init_options_set_domain_id+0xc>
 800d8a6:	6259      	str	r1, [r3, #36]	@ 0x24
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	4770      	bx	lr
 800d8ac:	200b      	movs	r0, #11
 800d8ae:	4770      	bx	lr

0800d8b0 <rcl_get_zero_initialized_node>:
 800d8b0:	4a03      	ldr	r2, [pc, #12]	@ (800d8c0 <rcl_get_zero_initialized_node+0x10>)
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d8b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	4770      	bx	lr
 800d8c0:	0801dfa4 	.word	0x0801dfa4

0800d8c4 <rcl_node_init>:
 800d8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c8:	b0a9      	sub	sp, #164	@ 0xa4
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800d8d0:	a823      	add	r0, sp, #140	@ 0x8c
 800d8d2:	460e      	mov	r6, r1
 800d8d4:	4615      	mov	r5, r2
 800d8d6:	461f      	mov	r7, r3
 800d8d8:	f009 f912 	bl	8016b00 <rcl_guard_condition_get_default_options>
 800d8dc:	f1b8 0f00 	cmp.w	r8, #0
 800d8e0:	f000 80e6 	beq.w	800dab0 <rcl_node_init+0x1ec>
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	f001 fb79 	bl	800efdc <rcutils_allocator_is_valid>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	f000 80e0 	beq.w	800dab0 <rcl_node_init+0x1ec>
 800d8f0:	2e00      	cmp	r6, #0
 800d8f2:	f000 80dd 	beq.w	800dab0 <rcl_node_init+0x1ec>
 800d8f6:	2d00      	cmp	r5, #0
 800d8f8:	f000 80da 	beq.w	800dab0 <rcl_node_init+0x1ec>
 800d8fc:	2c00      	cmp	r4, #0
 800d8fe:	f000 80d7 	beq.w	800dab0 <rcl_node_init+0x1ec>
 800d902:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d906:	f1b9 0f00 	cmp.w	r9, #0
 800d90a:	f040 80fd 	bne.w	800db08 <rcl_node_init+0x244>
 800d90e:	2f00      	cmp	r7, #0
 800d910:	f000 80ce 	beq.w	800dab0 <rcl_node_init+0x1ec>
 800d914:	4638      	mov	r0, r7
 800d916:	f008 fe4d 	bl	80165b4 <rcl_context_is_valid>
 800d91a:	4682      	mov	sl, r0
 800d91c:	2800      	cmp	r0, #0
 800d91e:	f000 80cd 	beq.w	800dabc <rcl_node_init+0x1f8>
 800d922:	464a      	mov	r2, r9
 800d924:	a922      	add	r1, sp, #136	@ 0x88
 800d926:	4630      	mov	r0, r6
 800d928:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800d92c:	f002 f822 	bl	800f974 <rmw_validate_node_name>
 800d930:	4681      	mov	r9, r0
 800d932:	2800      	cmp	r0, #0
 800d934:	f040 80be 	bne.w	800dab4 <rcl_node_init+0x1f0>
 800d938:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800d93a:	2800      	cmp	r0, #0
 800d93c:	f040 80f0 	bne.w	800db20 <rcl_node_init+0x25c>
 800d940:	4628      	mov	r0, r5
 800d942:	f7f2 fc77 	bl	8000234 <strlen>
 800d946:	2800      	cmp	r0, #0
 800d948:	f040 80bb 	bne.w	800dac2 <rcl_node_init+0x1fe>
 800d94c:	4d7c      	ldr	r5, [pc, #496]	@ (800db40 <rcl_node_init+0x27c>)
 800d94e:	a922      	add	r1, sp, #136	@ 0x88
 800d950:	2200      	movs	r2, #0
 800d952:	4628      	mov	r0, r5
 800d954:	f001 fff0 	bl	800f938 <rmw_validate_namespace>
 800d958:	4681      	mov	r9, r0
 800d95a:	2800      	cmp	r0, #0
 800d95c:	f040 80aa 	bne.w	800dab4 <rcl_node_init+0x1f0>
 800d960:	4682      	mov	sl, r0
 800d962:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800d964:	2800      	cmp	r0, #0
 800d966:	f040 80e0 	bne.w	800db2a <rcl_node_init+0x266>
 800d96a:	f8d8 3000 	ldr.w	r3, [r8]
 800d96e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d972:	2078      	movs	r0, #120	@ 0x78
 800d974:	4798      	blx	r3
 800d976:	4681      	mov	r9, r0
 800d978:	6060      	str	r0, [r4, #4]
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f000 80ca 	beq.w	800db14 <rcl_node_init+0x250>
 800d980:	2200      	movs	r2, #0
 800d982:	2300      	movs	r3, #0
 800d984:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800d988:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800d98c:	a808      	add	r0, sp, #32
 800d98e:	f000 f907 	bl	800dba0 <rcl_node_get_default_options>
 800d992:	a908      	add	r1, sp, #32
 800d994:	4648      	mov	r0, r9
 800d996:	2268      	movs	r2, #104	@ 0x68
 800d998:	f00d fed5 	bl	801b746 <memcpy>
 800d99c:	6861      	ldr	r1, [r4, #4]
 800d99e:	6027      	str	r7, [r4, #0]
 800d9a0:	4640      	mov	r0, r8
 800d9a2:	f000 f90b 	bl	800dbbc <rcl_node_options_copy>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d158      	bne.n	800da5c <rcl_node_init+0x198>
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	f7f2 fc42 	bl	8000234 <strlen>
 800d9b0:	4428      	add	r0, r5
 800d9b2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800d9b6:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800d9ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	bf0c      	ite	eq
 800d9c4:	4b5f      	ldreq	r3, [pc, #380]	@ (800db44 <rcl_node_init+0x280>)
 800d9c6:	4b60      	ldrne	r3, [pc, #384]	@ (800db48 <rcl_node_init+0x284>)
 800d9c8:	9302      	str	r3, [sp, #8]
 800d9ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d9d4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d9d8:	f001 fbfe 	bl	800f1d8 <rcutils_format_string_limit>
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800d9e2:	6818      	ldr	r0, [r3, #0]
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	3028      	adds	r0, #40	@ 0x28
 800d9e8:	462a      	mov	r2, r5
 800d9ea:	6866      	ldr	r6, [r4, #4]
 800d9ec:	f002 fc4c 	bl	8010288 <rmw_create_node>
 800d9f0:	6863      	ldr	r3, [r4, #4]
 800d9f2:	66b0      	str	r0, [r6, #104]	@ 0x68
 800d9f4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d032      	beq.n	800da60 <rcl_node_init+0x19c>
 800d9fa:	f002 fcd9 	bl	80103b0 <rmw_node_get_graph_guard_condition>
 800d9fe:	4681      	mov	r9, r0
 800da00:	b360      	cbz	r0, 800da5c <rcl_node_init+0x198>
 800da02:	f8d8 3000 	ldr.w	r3, [r8]
 800da06:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800da0a:	6866      	ldr	r6, [r4, #4]
 800da0c:	2008      	movs	r0, #8
 800da0e:	4798      	blx	r3
 800da10:	6863      	ldr	r3, [r4, #4]
 800da12:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800da14:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800da18:	f1bb 0f00 	cmp.w	fp, #0
 800da1c:	d020      	beq.n	800da60 <rcl_node_init+0x19c>
 800da1e:	a806      	add	r0, sp, #24
 800da20:	f008 ff92 	bl	8016948 <rcl_get_zero_initialized_guard_condition>
 800da24:	a806      	add	r0, sp, #24
 800da26:	c803      	ldmia	r0, {r0, r1}
 800da28:	6863      	ldr	r3, [r4, #4]
 800da2a:	46c4      	mov	ip, r8
 800da2c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800da30:	e88b 0003 	stmia.w	fp, {r0, r1}
 800da34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da38:	ae23      	add	r6, sp, #140	@ 0x8c
 800da3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da3c:	f8dc 3000 	ldr.w	r3, [ip]
 800da40:	6033      	str	r3, [r6, #0]
 800da42:	ab28      	add	r3, sp, #160	@ 0xa0
 800da44:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800da48:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800da4c:	4649      	mov	r1, r9
 800da4e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da50:	463a      	mov	r2, r7
 800da52:	4670      	mov	r0, lr
 800da54:	f008 ffce 	bl	80169f4 <rcl_guard_condition_init_from_rmw>
 800da58:	4681      	mov	r9, r0
 800da5a:	b328      	cbz	r0, 800daa8 <rcl_node_init+0x1e4>
 800da5c:	6863      	ldr	r3, [r4, #4]
 800da5e:	b1f3      	cbz	r3, 800da9e <rcl_node_init+0x1da>
 800da60:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800da62:	b128      	cbz	r0, 800da70 <rcl_node_init+0x1ac>
 800da64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da68:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800da6c:	4798      	blx	r3
 800da6e:	6863      	ldr	r3, [r4, #4]
 800da70:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800da72:	b110      	cbz	r0, 800da7a <rcl_node_init+0x1b6>
 800da74:	f002 fc20 	bl	80102b8 <rmw_destroy_node>
 800da78:	6863      	ldr	r3, [r4, #4]
 800da7a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800da7c:	b148      	cbz	r0, 800da92 <rcl_node_init+0x1ce>
 800da7e:	f009 f819 	bl	8016ab4 <rcl_guard_condition_fini>
 800da82:	6863      	ldr	r3, [r4, #4]
 800da84:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800da88:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800da8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da8e:	4798      	blx	r3
 800da90:	6863      	ldr	r3, [r4, #4]
 800da92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800da96:	4618      	mov	r0, r3
 800da98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da9c:	4798      	blx	r3
 800da9e:	2300      	movs	r3, #0
 800daa0:	e9c4 3300 	strd	r3, r3, [r4]
 800daa4:	f04f 0901 	mov.w	r9, #1
 800daa8:	f1ba 0f00 	cmp.w	sl, #0
 800daac:	d125      	bne.n	800dafa <rcl_node_init+0x236>
 800daae:	e001      	b.n	800dab4 <rcl_node_init+0x1f0>
 800dab0:	f04f 090b 	mov.w	r9, #11
 800dab4:	4648      	mov	r0, r9
 800dab6:	b029      	add	sp, #164	@ 0xa4
 800dab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabc:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800dac0:	e7f8      	b.n	800dab4 <rcl_node_init+0x1f0>
 800dac2:	782b      	ldrb	r3, [r5, #0]
 800dac4:	2b2f      	cmp	r3, #47	@ 0x2f
 800dac6:	f43f af42 	beq.w	800d94e <rcl_node_init+0x8a>
 800daca:	9503      	str	r5, [sp, #12]
 800dacc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	4b1e      	ldr	r3, [pc, #120]	@ (800db4c <rcl_node_init+0x288>)
 800dad4:	9302      	str	r3, [sp, #8]
 800dad6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dae0:	f001 fb7a 	bl	800f1d8 <rcutils_format_string_limit>
 800dae4:	4605      	mov	r5, r0
 800dae6:	b340      	cbz	r0, 800db3a <rcl_node_init+0x276>
 800dae8:	2200      	movs	r2, #0
 800daea:	a922      	add	r1, sp, #136	@ 0x88
 800daec:	9222      	str	r2, [sp, #136]	@ 0x88
 800daee:	f001 ff23 	bl	800f938 <rmw_validate_namespace>
 800daf2:	4681      	mov	r9, r0
 800daf4:	2800      	cmp	r0, #0
 800daf6:	f43f af34 	beq.w	800d962 <rcl_node_init+0x9e>
 800dafa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dafe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800db02:	4628      	mov	r0, r5
 800db04:	4798      	blx	r3
 800db06:	e7d5      	b.n	800dab4 <rcl_node_init+0x1f0>
 800db08:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800db0c:	4648      	mov	r0, r9
 800db0e:	b029      	add	sp, #164	@ 0xa4
 800db10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db14:	f04f 090a 	mov.w	r9, #10
 800db18:	f1ba 0f00 	cmp.w	sl, #0
 800db1c:	d1ed      	bne.n	800dafa <rcl_node_init+0x236>
 800db1e:	e7c9      	b.n	800dab4 <rcl_node_init+0x1f0>
 800db20:	f001 ff7a 	bl	800fa18 <rmw_node_name_validation_result_string>
 800db24:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800db28:	e7c4      	b.n	800dab4 <rcl_node_init+0x1f0>
 800db2a:	f001 ff17 	bl	800f95c <rmw_namespace_validation_result_string>
 800db2e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800db32:	f1ba 0f00 	cmp.w	sl, #0
 800db36:	d1e0      	bne.n	800dafa <rcl_node_init+0x236>
 800db38:	e7bc      	b.n	800dab4 <rcl_node_init+0x1f0>
 800db3a:	f04f 090a 	mov.w	r9, #10
 800db3e:	e7b9      	b.n	800dab4 <rcl_node_init+0x1f0>
 800db40:	0801df8c 	.word	0x0801df8c
 800db44:	0801df94 	.word	0x0801df94
 800db48:	0801df9c 	.word	0x0801df9c
 800db4c:	0801df90 	.word	0x0801df90

0800db50 <rcl_node_is_valid>:
 800db50:	b130      	cbz	r0, 800db60 <rcl_node_is_valid+0x10>
 800db52:	6843      	ldr	r3, [r0, #4]
 800db54:	b123      	cbz	r3, 800db60 <rcl_node_is_valid+0x10>
 800db56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800db58:	b113      	cbz	r3, 800db60 <rcl_node_is_valid+0x10>
 800db5a:	6800      	ldr	r0, [r0, #0]
 800db5c:	f008 bd2a 	b.w	80165b4 <rcl_context_is_valid>
 800db60:	2000      	movs	r0, #0
 800db62:	4770      	bx	lr

0800db64 <rcl_node_get_name>:
 800db64:	b120      	cbz	r0, 800db70 <rcl_node_get_name+0xc>
 800db66:	6840      	ldr	r0, [r0, #4]
 800db68:	b110      	cbz	r0, 800db70 <rcl_node_get_name+0xc>
 800db6a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800db6c:	b100      	cbz	r0, 800db70 <rcl_node_get_name+0xc>
 800db6e:	6880      	ldr	r0, [r0, #8]
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop

0800db74 <rcl_node_get_namespace>:
 800db74:	b120      	cbz	r0, 800db80 <rcl_node_get_namespace+0xc>
 800db76:	6840      	ldr	r0, [r0, #4]
 800db78:	b110      	cbz	r0, 800db80 <rcl_node_get_namespace+0xc>
 800db7a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800db7c:	b100      	cbz	r0, 800db80 <rcl_node_get_namespace+0xc>
 800db7e:	68c0      	ldr	r0, [r0, #12]
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop

0800db84 <rcl_node_get_options>:
 800db84:	b128      	cbz	r0, 800db92 <rcl_node_get_options+0xe>
 800db86:	6840      	ldr	r0, [r0, #4]
 800db88:	b118      	cbz	r0, 800db92 <rcl_node_get_options+0xe>
 800db8a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	bf08      	it	eq
 800db90:	2000      	moveq	r0, #0
 800db92:	4770      	bx	lr

0800db94 <rcl_node_get_rmw_handle>:
 800db94:	b110      	cbz	r0, 800db9c <rcl_node_get_rmw_handle+0x8>
 800db96:	6840      	ldr	r0, [r0, #4]
 800db98:	b100      	cbz	r0, 800db9c <rcl_node_get_rmw_handle+0x8>
 800db9a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop

0800dba0 <rcl_node_get_default_options>:
 800dba0:	b510      	push	{r4, lr}
 800dba2:	2268      	movs	r2, #104	@ 0x68
 800dba4:	4604      	mov	r4, r0
 800dba6:	2100      	movs	r1, #0
 800dba8:	f00d fd04 	bl	801b5b4 <memset>
 800dbac:	4620      	mov	r0, r4
 800dbae:	f001 fa07 	bl	800efc0 <rcutils_get_default_allocator>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	7523      	strb	r3, [r4, #20]
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	bd10      	pop	{r4, pc}
 800dbba:	bf00      	nop

0800dbbc <rcl_node_options_copy>:
 800dbbc:	b1d0      	cbz	r0, 800dbf4 <rcl_node_options_copy+0x38>
 800dbbe:	b570      	push	{r4, r5, r6, lr}
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	b1a9      	cbz	r1, 800dbf0 <rcl_node_options_copy+0x34>
 800dbc4:	4288      	cmp	r0, r1
 800dbc6:	4684      	mov	ip, r0
 800dbc8:	d012      	beq.n	800dbf0 <rcl_node_options_copy+0x34>
 800dbca:	4605      	mov	r5, r0
 800dbcc:	8a86      	ldrh	r6, [r0, #20]
 800dbce:	468e      	mov	lr, r1
 800dbd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dbd6:	682b      	ldr	r3, [r5, #0]
 800dbd8:	f8ce 3000 	str.w	r3, [lr]
 800dbdc:	f10c 0118 	add.w	r1, ip, #24
 800dbe0:	2250      	movs	r2, #80	@ 0x50
 800dbe2:	82a6      	strh	r6, [r4, #20]
 800dbe4:	f104 0018 	add.w	r0, r4, #24
 800dbe8:	f00d fdad 	bl	801b746 <memcpy>
 800dbec:	2000      	movs	r0, #0
 800dbee:	bd70      	pop	{r4, r5, r6, pc}
 800dbf0:	200b      	movs	r0, #11
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}
 800dbf4:	200b      	movs	r0, #11
 800dbf6:	4770      	bx	lr

0800dbf8 <rcl_node_resolve_name>:
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfe:	b091      	sub	sp, #68	@ 0x44
 800dc00:	ac1a      	add	r4, sp, #104	@ 0x68
 800dc02:	e884 000c 	stmia.w	r4, {r2, r3}
 800dc06:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d03b      	beq.n	800dc86 <rcl_node_resolve_name+0x8e>
 800dc0e:	460c      	mov	r4, r1
 800dc10:	4605      	mov	r5, r0
 800dc12:	f7ff ffb7 	bl	800db84 <rcl_node_get_options>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d037      	beq.n	800dc8a <rcl_node_resolve_name+0x92>
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f7ff ffa2 	bl	800db64 <rcl_node_get_name>
 800dc20:	4606      	mov	r6, r0
 800dc22:	4628      	mov	r0, r5
 800dc24:	f7ff ffa6 	bl	800db74 <rcl_node_get_namespace>
 800dc28:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800dc2c:	4681      	mov	r9, r0
 800dc2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc32:	ad0b      	add	r5, sp, #44	@ 0x2c
 800dc34:	46ac      	mov	ip, r5
 800dc36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc3a:	f8de 3000 	ldr.w	r3, [lr]
 800dc3e:	f8cc 3000 	str.w	r3, [ip]
 800dc42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc44:	b1fb      	cbz	r3, 800dc86 <rcl_node_resolve_name+0x8e>
 800dc46:	468a      	mov	sl, r1
 800dc48:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800dc4c:	f001 fc1c 	bl	800f488 <rcutils_get_zero_initialized_string_map>
 800dc50:	ab10      	add	r3, sp, #64	@ 0x40
 800dc52:	9008      	str	r0, [sp, #32]
 800dc54:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800dc58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	e895 000c 	ldmia.w	r5, {r2, r3}
 800dc62:	a808      	add	r0, sp, #32
 800dc64:	f001 fc88 	bl	800f578 <rcutils_string_map_init>
 800dc68:	4607      	mov	r7, r0
 800dc6a:	b180      	cbz	r0, 800dc8e <rcl_node_resolve_name+0x96>
 800dc6c:	f001 fa80 	bl	800f170 <rcutils_get_error_string>
 800dc70:	f001 fa96 	bl	800f1a0 <rcutils_reset_error>
 800dc74:	2f0a      	cmp	r7, #10
 800dc76:	bf18      	it	ne
 800dc78:	2701      	movne	r7, #1
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	b011      	add	sp, #68	@ 0x44
 800dc7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc82:	b002      	add	sp, #8
 800dc84:	4770      	bx	lr
 800dc86:	270b      	movs	r7, #11
 800dc88:	e7f7      	b.n	800dc7a <rcl_node_resolve_name+0x82>
 800dc8a:	2701      	movs	r7, #1
 800dc8c:	e7f5      	b.n	800dc7a <rcl_node_resolve_name+0x82>
 800dc8e:	9009      	str	r0, [sp, #36]	@ 0x24
 800dc90:	9007      	str	r0, [sp, #28]
 800dc92:	a808      	add	r0, sp, #32
 800dc94:	f008 fe52 	bl	801693c <rcl_get_default_topic_name_substitutions>
 800dc98:	4607      	mov	r7, r0
 800dc9a:	b1a8      	cbz	r0, 800dcc8 <rcl_node_resolve_name+0xd0>
 800dc9c:	280a      	cmp	r0, #10
 800dc9e:	9c07      	ldr	r4, [sp, #28]
 800dca0:	d000      	beq.n	800dca4 <rcl_node_resolve_name+0xac>
 800dca2:	2701      	movs	r7, #1
 800dca4:	a808      	add	r0, sp, #32
 800dca6:	f001 fca7 	bl	800f5f8 <rcutils_string_map_fini>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d13d      	bne.n	800dd2a <rcl_node_resolve_name+0x132>
 800dcae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcb0:	4659      	mov	r1, fp
 800dcb2:	47d0      	blx	sl
 800dcb4:	4659      	mov	r1, fp
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	47d0      	blx	sl
 800dcba:	f1b8 0f00 	cmp.w	r8, #0
 800dcbe:	d0dc      	beq.n	800dc7a <rcl_node_resolve_name+0x82>
 800dcc0:	2f67      	cmp	r7, #103	@ 0x67
 800dcc2:	bf08      	it	eq
 800dcc4:	2768      	moveq	r7, #104	@ 0x68
 800dcc6:	e7d8      	b.n	800dc7a <rcl_node_resolve_name+0x82>
 800dcc8:	ab09      	add	r3, sp, #36	@ 0x24
 800dcca:	9305      	str	r3, [sp, #20]
 800dccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcce:	46ec      	mov	ip, sp
 800dcd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	f8cc 3000 	str.w	r3, [ip]
 800dcda:	464a      	mov	r2, r9
 800dcdc:	4631      	mov	r1, r6
 800dcde:	4620      	mov	r0, r4
 800dce0:	ab08      	add	r3, sp, #32
 800dce2:	f008 fccd 	bl	8016680 <rcl_expand_topic_name>
 800dce6:	4607      	mov	r7, r0
 800dce8:	b9b8      	cbnz	r0, 800dd1a <rcl_node_resolve_name+0x122>
 800dcea:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800dcec:	9009      	str	r0, [sp, #36]	@ 0x24
 800dcee:	4602      	mov	r2, r0
 800dcf0:	a90a      	add	r1, sp, #40	@ 0x28
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f001 fd5c 	bl	800f7b0 <rmw_validate_full_topic_name>
 800dcf8:	b988      	cbnz	r0, 800dd1e <rcl_node_resolve_name+0x126>
 800dcfa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800dcfc:	b9d5      	cbnz	r5, 800dd34 <rcl_node_resolve_name+0x13c>
 800dcfe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd00:	a808      	add	r0, sp, #32
 800dd02:	601c      	str	r4, [r3, #0]
 800dd04:	f001 fc78 	bl	800f5f8 <rcutils_string_map_fini>
 800dd08:	4607      	mov	r7, r0
 800dd0a:	b1a8      	cbz	r0, 800dd38 <rcl_node_resolve_name+0x140>
 800dd0c:	f001 fa30 	bl	800f170 <rcutils_get_error_string>
 800dd10:	462c      	mov	r4, r5
 800dd12:	f001 fa45 	bl	800f1a0 <rcutils_reset_error>
 800dd16:	2701      	movs	r7, #1
 800dd18:	e7c9      	b.n	800dcae <rcl_node_resolve_name+0xb6>
 800dd1a:	9c07      	ldr	r4, [sp, #28]
 800dd1c:	e7c2      	b.n	800dca4 <rcl_node_resolve_name+0xac>
 800dd1e:	f001 fa27 	bl	800f170 <rcutils_get_error_string>
 800dd22:	2701      	movs	r7, #1
 800dd24:	f001 fa3c 	bl	800f1a0 <rcutils_reset_error>
 800dd28:	e7bc      	b.n	800dca4 <rcl_node_resolve_name+0xac>
 800dd2a:	f001 fa21 	bl	800f170 <rcutils_get_error_string>
 800dd2e:	f001 fa37 	bl	800f1a0 <rcutils_reset_error>
 800dd32:	e7bc      	b.n	800dcae <rcl_node_resolve_name+0xb6>
 800dd34:	2767      	movs	r7, #103	@ 0x67
 800dd36:	e7b5      	b.n	800dca4 <rcl_node_resolve_name+0xac>
 800dd38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd3a:	4659      	mov	r1, fp
 800dd3c:	47d0      	blx	sl
 800dd3e:	4659      	mov	r1, fp
 800dd40:	4638      	mov	r0, r7
 800dd42:	47d0      	blx	sl
 800dd44:	e799      	b.n	800dc7a <rcl_node_resolve_name+0x82>
 800dd46:	bf00      	nop

0800dd48 <rcl_get_zero_initialized_publisher>:
 800dd48:	4b01      	ldr	r3, [pc, #4]	@ (800dd50 <rcl_get_zero_initialized_publisher+0x8>)
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	0801dfac 	.word	0x0801dfac

0800dd54 <rcl_publisher_init>:
 800dd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd58:	b088      	sub	sp, #32
 800dd5a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800dd5c:	2d00      	cmp	r5, #0
 800dd5e:	d069      	beq.n	800de34 <rcl_publisher_init+0xe0>
 800dd60:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800dd64:	4604      	mov	r4, r0
 800dd66:	4648      	mov	r0, r9
 800dd68:	460e      	mov	r6, r1
 800dd6a:	4690      	mov	r8, r2
 800dd6c:	461f      	mov	r7, r3
 800dd6e:	f001 f935 	bl	800efdc <rcutils_allocator_is_valid>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d05e      	beq.n	800de34 <rcl_publisher_init+0xe0>
 800dd76:	2c00      	cmp	r4, #0
 800dd78:	d05c      	beq.n	800de34 <rcl_publisher_init+0xe0>
 800dd7a:	f8d4 a000 	ldr.w	sl, [r4]
 800dd7e:	f1ba 0f00 	cmp.w	sl, #0
 800dd82:	d004      	beq.n	800dd8e <rcl_publisher_init+0x3a>
 800dd84:	2764      	movs	r7, #100	@ 0x64
 800dd86:	4638      	mov	r0, r7
 800dd88:	b008      	add	sp, #32
 800dd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7ff fede 	bl	800db50 <rcl_node_is_valid>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d052      	beq.n	800de3e <rcl_publisher_init+0xea>
 800dd98:	f1b8 0f00 	cmp.w	r8, #0
 800dd9c:	d04a      	beq.n	800de34 <rcl_publisher_init+0xe0>
 800dd9e:	2f00      	cmp	r7, #0
 800dda0:	d048      	beq.n	800de34 <rcl_publisher_init+0xe0>
 800dda2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800dda6:	aa07      	add	r2, sp, #28
 800dda8:	9205      	str	r2, [sp, #20]
 800ddaa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ddae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ddb2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ddb6:	f8cd a01c 	str.w	sl, [sp, #28]
 800ddba:	4639      	mov	r1, r7
 800ddbc:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f7ff ff19 	bl	800dbf8 <rcl_node_resolve_name>
 800ddc6:	4607      	mov	r7, r0
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d14f      	bne.n	800de6c <rcl_publisher_init+0x118>
 800ddcc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ddce:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ddd0:	20c8      	movs	r0, #200	@ 0xc8
 800ddd2:	4798      	blx	r3
 800ddd4:	6020      	str	r0, [r4, #0]
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d04e      	beq.n	800de78 <rcl_publisher_init+0x124>
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7ff feda 	bl	800db94 <rcl_node_get_rmw_handle>
 800dde0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	9a07      	ldr	r2, [sp, #28]
 800dde8:	6827      	ldr	r7, [r4, #0]
 800ddea:	462b      	mov	r3, r5
 800ddec:	4641      	mov	r1, r8
 800ddee:	f002 fb49 	bl	8010484 <rmw_create_publisher>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ddf8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ddfc:	b370      	cbz	r0, 800de5c <rcl_publisher_init+0x108>
 800ddfe:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800de02:	f002 fc1d 	bl	8010640 <rmw_publisher_get_actual_qos>
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	4607      	mov	r7, r0
 800de0a:	b9d0      	cbnz	r0, 800de42 <rcl_publisher_init+0xee>
 800de0c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800de10:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800de14:	4629      	mov	r1, r5
 800de16:	2270      	movs	r2, #112	@ 0x70
 800de18:	4618      	mov	r0, r3
 800de1a:	f00d fc94 	bl	801b746 <memcpy>
 800de1e:	6832      	ldr	r2, [r6, #0]
 800de20:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800de24:	9807      	ldr	r0, [sp, #28]
 800de26:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800de28:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800de2a:	4798      	blx	r3
 800de2c:	4638      	mov	r0, r7
 800de2e:	b008      	add	sp, #32
 800de30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de34:	270b      	movs	r7, #11
 800de36:	4638      	mov	r0, r7
 800de38:	b008      	add	sp, #32
 800de3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de3e:	27c8      	movs	r7, #200	@ 0xc8
 800de40:	e7a1      	b.n	800dd86 <rcl_publisher_init+0x32>
 800de42:	b18b      	cbz	r3, 800de68 <rcl_publisher_init+0x114>
 800de44:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800de48:	b142      	cbz	r2, 800de5c <rcl_publisher_init+0x108>
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7ff fea2 	bl	800db94 <rcl_node_get_rmw_handle>
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800de56:	f002 fc03 	bl	8010660 <rmw_destroy_publisher>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800de5e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800de60:	4618      	mov	r0, r3
 800de62:	4790      	blx	r2
 800de64:	2300      	movs	r3, #0
 800de66:	6023      	str	r3, [r4, #0]
 800de68:	2701      	movs	r7, #1
 800de6a:	e7db      	b.n	800de24 <rcl_publisher_init+0xd0>
 800de6c:	2867      	cmp	r0, #103	@ 0x67
 800de6e:	d0d9      	beq.n	800de24 <rcl_publisher_init+0xd0>
 800de70:	2869      	cmp	r0, #105	@ 0x69
 800de72:	d003      	beq.n	800de7c <rcl_publisher_init+0x128>
 800de74:	280a      	cmp	r0, #10
 800de76:	d1f7      	bne.n	800de68 <rcl_publisher_init+0x114>
 800de78:	270a      	movs	r7, #10
 800de7a:	e7d3      	b.n	800de24 <rcl_publisher_init+0xd0>
 800de7c:	2767      	movs	r7, #103	@ 0x67
 800de7e:	e7d1      	b.n	800de24 <rcl_publisher_init+0xd0>

0800de80 <rcl_publisher_get_default_options>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	4d14      	ldr	r5, [pc, #80]	@ (800ded4 <rcl_publisher_get_default_options+0x54>)
 800de84:	4914      	ldr	r1, [pc, #80]	@ (800ded8 <rcl_publisher_get_default_options+0x58>)
 800de86:	b088      	sub	sp, #32
 800de88:	4604      	mov	r4, r0
 800de8a:	2250      	movs	r2, #80	@ 0x50
 800de8c:	4628      	mov	r0, r5
 800de8e:	f00d fc5a 	bl	801b746 <memcpy>
 800de92:	a802      	add	r0, sp, #8
 800de94:	f001 f894 	bl	800efc0 <rcutils_get_default_allocator>
 800de98:	f10d 0c08 	add.w	ip, sp, #8
 800de9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dea0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800dea4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dea8:	466e      	mov	r6, sp
 800deaa:	f8dc 3000 	ldr.w	r3, [ip]
 800deae:	f8ce 3000 	str.w	r3, [lr]
 800deb2:	4630      	mov	r0, r6
 800deb4:	f001 fc74 	bl	800f7a0 <rmw_get_default_publisher_options>
 800deb8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800debc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800dec0:	e883 0003 	stmia.w	r3, {r0, r1}
 800dec4:	2270      	movs	r2, #112	@ 0x70
 800dec6:	4629      	mov	r1, r5
 800dec8:	4620      	mov	r0, r4
 800deca:	f00d fc3c 	bl	801b746 <memcpy>
 800dece:	4620      	mov	r0, r4
 800ded0:	b008      	add	sp, #32
 800ded2:	bd70      	pop	{r4, r5, r6, pc}
 800ded4:	20007718 	.word	0x20007718
 800ded8:	0801dfb0 	.word	0x0801dfb0

0800dedc <rcl_publish>:
 800dedc:	b1f8      	cbz	r0, 800df1e <rcl_publish+0x42>
 800dede:	6803      	ldr	r3, [r0, #0]
 800dee0:	b570      	push	{r4, r5, r6, lr}
 800dee2:	4604      	mov	r4, r0
 800dee4:	b1b3      	cbz	r3, 800df14 <rcl_publish+0x38>
 800dee6:	4616      	mov	r6, r2
 800dee8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800deec:	b192      	cbz	r2, 800df14 <rcl_publish+0x38>
 800deee:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800def2:	460d      	mov	r5, r1
 800def4:	f008 fb5e 	bl	80165b4 <rcl_context_is_valid>
 800def8:	b160      	cbz	r0, 800df14 <rcl_publish+0x38>
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800df00:	b140      	cbz	r0, 800df14 <rcl_publish+0x38>
 800df02:	b155      	cbz	r5, 800df1a <rcl_publish+0x3e>
 800df04:	4632      	mov	r2, r6
 800df06:	4629      	mov	r1, r5
 800df08:	f002 fa5c 	bl	80103c4 <rmw_publish>
 800df0c:	3800      	subs	r0, #0
 800df0e:	bf18      	it	ne
 800df10:	2001      	movne	r0, #1
 800df12:	bd70      	pop	{r4, r5, r6, pc}
 800df14:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df18:	bd70      	pop	{r4, r5, r6, pc}
 800df1a:	200b      	movs	r0, #11
 800df1c:	bd70      	pop	{r4, r5, r6, pc}
 800df1e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df22:	4770      	bx	lr

0800df24 <rcl_publisher_is_valid>:
 800df24:	b1a0      	cbz	r0, 800df50 <rcl_publisher_is_valid+0x2c>
 800df26:	6803      	ldr	r3, [r0, #0]
 800df28:	b510      	push	{r4, lr}
 800df2a:	4604      	mov	r4, r0
 800df2c:	b173      	cbz	r3, 800df4c <rcl_publisher_is_valid+0x28>
 800df2e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800df32:	b15a      	cbz	r2, 800df4c <rcl_publisher_is_valid+0x28>
 800df34:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800df38:	f008 fb3c 	bl	80165b4 <rcl_context_is_valid>
 800df3c:	b130      	cbz	r0, 800df4c <rcl_publisher_is_valid+0x28>
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800df44:	3800      	subs	r0, #0
 800df46:	bf18      	it	ne
 800df48:	2001      	movne	r0, #1
 800df4a:	bd10      	pop	{r4, pc}
 800df4c:	2000      	movs	r0, #0
 800df4e:	bd10      	pop	{r4, pc}
 800df50:	2000      	movs	r0, #0
 800df52:	4770      	bx	lr

0800df54 <rcl_publisher_is_valid_except_context>:
 800df54:	b130      	cbz	r0, 800df64 <rcl_publisher_is_valid_except_context+0x10>
 800df56:	6800      	ldr	r0, [r0, #0]
 800df58:	b120      	cbz	r0, 800df64 <rcl_publisher_is_valid_except_context+0x10>
 800df5a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800df5e:	3800      	subs	r0, #0
 800df60:	bf18      	it	ne
 800df62:	2001      	movne	r0, #1
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop

0800df68 <rclc_client_init_default>:
 800df68:	b368      	cbz	r0, 800dfc6 <rclc_client_init_default+0x5e>
 800df6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6e:	460d      	mov	r5, r1
 800df70:	b09e      	sub	sp, #120	@ 0x78
 800df72:	b321      	cbz	r1, 800dfbe <rclc_client_init_default+0x56>
 800df74:	4616      	mov	r6, r2
 800df76:	b312      	cbz	r2, 800dfbe <rclc_client_init_default+0x56>
 800df78:	461f      	mov	r7, r3
 800df7a:	b303      	cbz	r3, 800dfbe <rclc_client_init_default+0x56>
 800df7c:	4604      	mov	r4, r0
 800df7e:	f7ff fa4b 	bl	800d418 <rcl_get_zero_initialized_client>
 800df82:	f10d 0810 	add.w	r8, sp, #16
 800df86:	6020      	str	r0, [r4, #0]
 800df88:	4640      	mov	r0, r8
 800df8a:	f7ff fad9 	bl	800d540 <rcl_client_get_default_options>
 800df8e:	490f      	ldr	r1, [pc, #60]	@ (800dfcc <rclc_client_init_default+0x64>)
 800df90:	2250      	movs	r2, #80	@ 0x50
 800df92:	4640      	mov	r0, r8
 800df94:	f00d fbd7 	bl	801b746 <memcpy>
 800df98:	f8cd 8000 	str.w	r8, [sp]
 800df9c:	463b      	mov	r3, r7
 800df9e:	4632      	mov	r2, r6
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7ff fa3e 	bl	800d424 <rcl_client_init>
 800dfa8:	b910      	cbnz	r0, 800dfb0 <rclc_client_init_default+0x48>
 800dfaa:	b01e      	add	sp, #120	@ 0x78
 800dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb0:	9003      	str	r0, [sp, #12]
 800dfb2:	f001 f8f5 	bl	800f1a0 <rcutils_reset_error>
 800dfb6:	9803      	ldr	r0, [sp, #12]
 800dfb8:	b01e      	add	sp, #120	@ 0x78
 800dfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbe:	200b      	movs	r0, #11
 800dfc0:	b01e      	add	sp, #120	@ 0x78
 800dfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc6:	200b      	movs	r0, #11
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	0801e000 	.word	0x0801e000

0800dfd0 <_rclc_check_for_new_data>:
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d046      	beq.n	800e062 <_rclc_check_for_new_data+0x92>
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	7802      	ldrb	r2, [r0, #0]
 800dfd8:	b084      	sub	sp, #16
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2a0a      	cmp	r2, #10
 800dfde:	d842      	bhi.n	800e066 <_rclc_check_for_new_data+0x96>
 800dfe0:	e8df f002 	tbb	[pc, r2]
 800dfe4:	14181212 	.word	0x14181212
 800dfe8:	06060614 	.word	0x06060614
 800dfec:	2e1a      	.short	0x2e1a
 800dfee:	16          	.byte	0x16
 800dfef:	00          	.byte	0x00
 800dff0:	6a0a      	ldr	r2, [r1, #32]
 800dff2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800dff4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dff8:	2000      	movs	r0, #0
 800dffa:	1a12      	subs	r2, r2, r0
 800dffc:	bf18      	it	ne
 800dffe:	2201      	movne	r2, #1
 800e000:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e004:	b004      	add	sp, #16
 800e006:	bd10      	pop	{r4, pc}
 800e008:	680a      	ldr	r2, [r1, #0]
 800e00a:	e7f2      	b.n	800dff2 <_rclc_check_for_new_data+0x22>
 800e00c:	698a      	ldr	r2, [r1, #24]
 800e00e:	e7f0      	b.n	800dff2 <_rclc_check_for_new_data+0x22>
 800e010:	688a      	ldr	r2, [r1, #8]
 800e012:	e7ee      	b.n	800dff2 <_rclc_check_for_new_data+0x22>
 800e014:	690a      	ldr	r2, [r1, #16]
 800e016:	e7ec      	b.n	800dff2 <_rclc_check_for_new_data+0x22>
 800e018:	685c      	ldr	r4, [r3, #4]
 800e01a:	4608      	mov	r0, r1
 800e01c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800e020:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800e024:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800e028:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e032:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e036:	f104 0110 	add.w	r1, r4, #16
 800e03a:	f00a fe6d 	bl	8018d18 <rcl_action_client_wait_set_get_entities_ready>
 800e03e:	e7e1      	b.n	800e004 <_rclc_check_for_new_data+0x34>
 800e040:	685c      	ldr	r4, [r3, #4]
 800e042:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800e046:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800e04a:	e9cd 3200 	strd	r3, r2, [sp]
 800e04e:	4608      	mov	r0, r1
 800e050:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e054:	f104 0220 	add.w	r2, r4, #32
 800e058:	f104 0110 	add.w	r1, r4, #16
 800e05c:	f00b f874 	bl	8019148 <rcl_action_server_wait_set_get_entities_ready>
 800e060:	e7d0      	b.n	800e004 <_rclc_check_for_new_data+0x34>
 800e062:	200b      	movs	r0, #11
 800e064:	4770      	bx	lr
 800e066:	2001      	movs	r0, #1
 800e068:	e7cc      	b.n	800e004 <_rclc_check_for_new_data+0x34>
 800e06a:	bf00      	nop

0800e06c <_rclc_take_new_data>:
 800e06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e06e:	b09b      	sub	sp, #108	@ 0x6c
 800e070:	2800      	cmp	r0, #0
 800e072:	f000 8088 	beq.w	800e186 <_rclc_take_new_data+0x11a>
 800e076:	7803      	ldrb	r3, [r0, #0]
 800e078:	4604      	mov	r4, r0
 800e07a:	2b0a      	cmp	r3, #10
 800e07c:	f200 8167 	bhi.w	800e34e <_rclc_take_new_data+0x2e2>
 800e080:	e8df f003 	tbb	[pc, r3]
 800e084:	44152d2d 	.word	0x44152d2d
 800e088:	19191944 	.word	0x19191944
 800e08c:	065a      	.short	0x065a
 800e08e:	15          	.byte	0x15
 800e08f:	00          	.byte	0x00
 800e090:	6840      	ldr	r0, [r0, #4]
 800e092:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f040 80b2 	bne.w	800e200 <_rclc_take_new_data+0x194>
 800e09c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f040 80e4 	bne.w	800e26e <_rclc_take_new_data+0x202>
 800e0a6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d16f      	bne.n	800e18e <_rclc_take_new_data+0x122>
 800e0ae:	2500      	movs	r5, #0
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	b01b      	add	sp, #108	@ 0x6c
 800e0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e0b8:	6a0b      	ldr	r3, [r1, #32]
 800e0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0f5      	beq.n	800e0ae <_rclc_take_new_data+0x42>
 800e0c2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e0c6:	f104 0110 	add.w	r1, r4, #16
 800e0ca:	f009 f825 	bl	8017118 <rcl_take_request>
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0ec      	beq.n	800e0ae <_rclc_take_new_data+0x42>
 800e0d4:	f240 2359 	movw	r3, #601	@ 0x259
 800e0d8:	4298      	cmp	r0, r3
 800e0da:	d013      	beq.n	800e104 <_rclc_take_new_data+0x98>
 800e0dc:	e029      	b.n	800e132 <_rclc_take_new_data+0xc6>
 800e0de:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e0e0:	680b      	ldr	r3, [r1, #0]
 800e0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0e1      	beq.n	800e0ae <_rclc_take_new_data+0x42>
 800e0ea:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	aa0a      	add	r2, sp, #40	@ 0x28
 800e0f2:	f009 f94f 	bl	8017394 <rcl_take>
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d0d9      	beq.n	800e0b0 <_rclc_take_new_data+0x44>
 800e0fc:	f240 1391 	movw	r3, #401	@ 0x191
 800e100:	4298      	cmp	r0, r3
 800e102:	d116      	bne.n	800e132 <_rclc_take_new_data+0xc6>
 800e104:	2300      	movs	r3, #0
 800e106:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e10a:	e7d1      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e10c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e10e:	698b      	ldr	r3, [r1, #24]
 800e110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d0ca      	beq.n	800e0ae <_rclc_take_new_data+0x42>
 800e118:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e11c:	f104 0110 	add.w	r1, r4, #16
 800e120:	f7ff fa6e 	bl	800d600 <rcl_take_response>
 800e124:	4605      	mov	r5, r0
 800e126:	2800      	cmp	r0, #0
 800e128:	d0c1      	beq.n	800e0ae <_rclc_take_new_data+0x42>
 800e12a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e12e:	4298      	cmp	r0, r3
 800e130:	d0be      	beq.n	800e0b0 <_rclc_take_new_data+0x44>
 800e132:	f001 f835 	bl	800f1a0 <rcutils_reset_error>
 800e136:	e7bb      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e138:	6840      	ldr	r0, [r0, #4]
 800e13a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d17d      	bne.n	800e23e <_rclc_take_new_data+0x1d2>
 800e142:	69c3      	ldr	r3, [r0, #28]
 800e144:	b11b      	cbz	r3, 800e14e <_rclc_take_new_data+0xe2>
 800e146:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d144      	bne.n	800e1d8 <_rclc_take_new_data+0x16c>
 800e14e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e152:	2b00      	cmp	r3, #0
 800e154:	f040 80ac 	bne.w	800e2b0 <_rclc_take_new_data+0x244>
 800e158:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d0a6      	beq.n	800e0ae <_rclc_take_new_data+0x42>
 800e160:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e162:	a90a      	add	r1, sp, #40	@ 0x28
 800e164:	3010      	adds	r0, #16
 800e166:	f00a fcaf 	bl	8018ac8 <rcl_action_take_result_response>
 800e16a:	4605      	mov	r5, r0
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d1e0      	bne.n	800e132 <_rclc_take_new_data+0xc6>
 800e170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e174:	6860      	ldr	r0, [r4, #4]
 800e176:	f00b f90b 	bl	8019390 <rclc_action_find_handle_by_result_request_sequence_number>
 800e17a:	2800      	cmp	r0, #0
 800e17c:	d098      	beq.n	800e0b0 <_rclc_take_new_data+0x44>
 800e17e:	2301      	movs	r3, #1
 800e180:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e184:	e794      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e186:	250b      	movs	r5, #11
 800e188:	4628      	mov	r0, r5
 800e18a:	b01b      	add	sp, #108	@ 0x6c
 800e18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e18e:	ae04      	add	r6, sp, #16
 800e190:	aa0a      	add	r2, sp, #40	@ 0x28
 800e192:	3010      	adds	r0, #16
 800e194:	4631      	mov	r1, r6
 800e196:	f00a ff0b 	bl	8018fb0 <rcl_action_take_cancel_request>
 800e19a:	4605      	mov	r5, r0
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d1c8      	bne.n	800e132 <_rclc_take_new_data+0xc6>
 800e1a0:	6860      	ldr	r0, [r4, #4]
 800e1a2:	a90a      	add	r1, sp, #40	@ 0x28
 800e1a4:	f00b f8b2 	bl	801930c <rclc_action_find_goal_handle_by_uuid>
 800e1a8:	4607      	mov	r7, r0
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	f000 80bb 	beq.w	800e326 <_rclc_take_new_data+0x2ba>
 800e1b0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	f00b f833 	bl	8019220 <rcl_action_transition_goal_state>
 800e1ba:	2803      	cmp	r0, #3
 800e1bc:	4684      	mov	ip, r0
 800e1be:	f040 80a7 	bne.w	800e310 <_rclc_take_new_data+0x2a4>
 800e1c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e1c4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800e1c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1ca:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e1ce:	e884 0003 	stmia.w	r4, {r0, r1}
 800e1d2:	f887 c008 	strb.w	ip, [r7, #8]
 800e1d6:	e76b      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e1d8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e1da:	3010      	adds	r0, #16
 800e1dc:	f00a fcf4 	bl	8018bc8 <rcl_action_take_feedback>
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d1a5      	bne.n	800e132 <_rclc_take_new_data+0xc6>
 800e1e6:	6860      	ldr	r0, [r4, #4]
 800e1e8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e1ea:	f00b f88f 	bl	801930c <rclc_action_find_goal_handle_by_uuid>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	f000 80a3 	beq.w	800e33c <_rclc_take_new_data+0x2d0>
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	6860      	ldr	r0, [r4, #4]
 800e1fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e1fe:	e7a6      	b.n	800e14e <_rclc_take_new_data+0xe2>
 800e200:	f00b f85e 	bl	80192c0 <rclc_action_take_goal_handle>
 800e204:	4606      	mov	r6, r0
 800e206:	6860      	ldr	r0, [r4, #4]
 800e208:	2e00      	cmp	r6, #0
 800e20a:	f43f af47 	beq.w	800e09c <_rclc_take_new_data+0x30>
 800e20e:	6070      	str	r0, [r6, #4]
 800e210:	69f2      	ldr	r2, [r6, #28]
 800e212:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e216:	3010      	adds	r0, #16
 800e218:	f00a fe12 	bl	8018e40 <rcl_action_take_goal_request>
 800e21c:	4605      	mov	r5, r0
 800e21e:	2800      	cmp	r0, #0
 800e220:	f040 808e 	bne.w	800e340 <_rclc_take_new_data+0x2d4>
 800e224:	69f7      	ldr	r7, [r6, #28]
 800e226:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e228:	7235      	strb	r5, [r6, #8]
 800e22a:	f8c6 0009 	str.w	r0, [r6, #9]
 800e22e:	f8c6 100d 	str.w	r1, [r6, #13]
 800e232:	6860      	ldr	r0, [r4, #4]
 800e234:	f8c6 2011 	str.w	r2, [r6, #17]
 800e238:	f8c6 3015 	str.w	r3, [r6, #21]
 800e23c:	e72e      	b.n	800e09c <_rclc_take_new_data+0x30>
 800e23e:	aa04      	add	r2, sp, #16
 800e240:	a90a      	add	r1, sp, #40	@ 0x28
 800e242:	3010      	adds	r0, #16
 800e244:	f00a fbc8 	bl	80189d8 <rcl_action_take_goal_response>
 800e248:	4605      	mov	r5, r0
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f47f af71 	bne.w	800e132 <_rclc_take_new_data+0xc6>
 800e250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e254:	6860      	ldr	r0, [r4, #4]
 800e256:	f00b f889 	bl	801936c <rclc_action_find_handle_by_goal_request_sequence_number>
 800e25a:	b130      	cbz	r0, 800e26a <_rclc_take_new_data+0x1fe>
 800e25c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e260:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e264:	2201      	movs	r2, #1
 800e266:	f880 2020 	strb.w	r2, [r0, #32]
 800e26a:	6860      	ldr	r0, [r4, #4]
 800e26c:	e769      	b.n	800e142 <_rclc_take_new_data+0xd6>
 800e26e:	aa04      	add	r2, sp, #16
 800e270:	3010      	adds	r0, #16
 800e272:	a90a      	add	r1, sp, #40	@ 0x28
 800e274:	f00a fe5c 	bl	8018f30 <rcl_action_take_result_request>
 800e278:	4605      	mov	r5, r0
 800e27a:	2800      	cmp	r0, #0
 800e27c:	f47f af59 	bne.w	800e132 <_rclc_take_new_data+0xc6>
 800e280:	6860      	ldr	r0, [r4, #4]
 800e282:	a904      	add	r1, sp, #16
 800e284:	f00b f842 	bl	801930c <rclc_action_find_goal_handle_by_uuid>
 800e288:	4607      	mov	r7, r0
 800e28a:	b160      	cbz	r0, 800e2a6 <_rclc_take_new_data+0x23a>
 800e28c:	ad0a      	add	r5, sp, #40	@ 0x28
 800e28e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e294:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e296:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e29a:	f04f 0c02 	mov.w	ip, #2
 800e29e:	e886 0003 	stmia.w	r6, {r0, r1}
 800e2a2:	f887 c008 	strb.w	ip, [r7, #8]
 800e2a6:	6860      	ldr	r0, [r4, #4]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e2ae:	e6fa      	b.n	800e0a6 <_rclc_take_new_data+0x3a>
 800e2b0:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e2b4:	a90a      	add	r1, sp, #40	@ 0x28
 800e2b6:	3010      	adds	r0, #16
 800e2b8:	f00a fc46 	bl	8018b48 <rcl_action_take_cancel_response>
 800e2bc:	4605      	mov	r5, r0
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	f47f af37 	bne.w	800e132 <_rclc_take_new_data+0xc6>
 800e2c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e2c8:	6860      	ldr	r0, [r4, #4]
 800e2ca:	f00b f873 	bl	80193b4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	6860      	ldr	r0, [r4, #4]
 800e2d2:	2e00      	cmp	r6, #0
 800e2d4:	f43f af40 	beq.w	800e158 <_rclc_take_new_data+0xec>
 800e2d8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e2da:	2701      	movs	r7, #1
 800e2dc:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f43f af3a 	beq.w	800e158 <_rclc_take_new_data+0xec>
 800e2e4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e2e6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e2ea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e2ee:	f00b f80d 	bl	801930c <rclc_action_find_goal_handle_by_uuid>
 800e2f2:	b138      	cbz	r0, 800e304 <_rclc_take_new_data+0x298>
 800e2f4:	6860      	ldr	r0, [r4, #4]
 800e2f6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e2f8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e2fc:	3501      	adds	r5, #1
 800e2fe:	42ab      	cmp	r3, r5
 800e300:	d8f0      	bhi.n	800e2e4 <_rclc_take_new_data+0x278>
 800e302:	e729      	b.n	800e158 <_rclc_take_new_data+0xec>
 800e304:	6860      	ldr	r0, [r4, #4]
 800e306:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e308:	3501      	adds	r5, #1
 800e30a:	42ab      	cmp	r3, r5
 800e30c:	d8ea      	bhi.n	800e2e4 <_rclc_take_new_data+0x278>
 800e30e:	e723      	b.n	800e158 <_rclc_take_new_data+0xec>
 800e310:	ab06      	add	r3, sp, #24
 800e312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e314:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e318:	2103      	movs	r1, #3
 800e31a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e31e:	6860      	ldr	r0, [r4, #4]
 800e320:	f00b f8be 	bl	80194a0 <rclc_action_server_goal_cancel_reject>
 800e324:	e6c4      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e326:	ab06      	add	r3, sp, #24
 800e328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e32a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e32e:	2102      	movs	r1, #2
 800e330:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e334:	6860      	ldr	r0, [r4, #4]
 800e336:	f00b f8b3 	bl	80194a0 <rclc_action_server_goal_cancel_reject>
 800e33a:	e6b9      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e33c:	6860      	ldr	r0, [r4, #4]
 800e33e:	e706      	b.n	800e14e <_rclc_take_new_data+0xe2>
 800e340:	6860      	ldr	r0, [r4, #4]
 800e342:	4631      	mov	r1, r6
 800e344:	f00a ffcc 	bl	80192e0 <rclc_action_remove_used_goal_handle>
 800e348:	f000 ff2a 	bl	800f1a0 <rcutils_reset_error>
 800e34c:	e6b0      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e34e:	2501      	movs	r5, #1
 800e350:	e6ae      	b.n	800e0b0 <_rclc_take_new_data+0x44>
 800e352:	bf00      	nop

0800e354 <_rclc_execute.part.0>:
 800e354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e356:	7803      	ldrb	r3, [r0, #0]
 800e358:	b087      	sub	sp, #28
 800e35a:	4604      	mov	r4, r0
 800e35c:	2b0a      	cmp	r3, #10
 800e35e:	f200 8136 	bhi.w	800e5ce <_rclc_execute.part.0+0x27a>
 800e362:	e8df f003 	tbb	[pc, r3]
 800e366:	435e      	.short	0x435e
 800e368:	06a1664f 	.word	0x06a1664f
 800e36c:	6c1e0606 	.word	0x6c1e0606
 800e370:	59          	.byte	0x59
 800e371:	00          	.byte	0x00
 800e372:	2b06      	cmp	r3, #6
 800e374:	f000 8122 	beq.w	800e5bc <_rclc_execute.part.0+0x268>
 800e378:	2b07      	cmp	r3, #7
 800e37a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e37c:	f040 8118 	bne.w	800e5b0 <_rclc_execute.part.0+0x25c>
 800e380:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800e384:	6880      	ldr	r0, [r0, #8]
 800e386:	4798      	blx	r3
 800e388:	f104 0110 	add.w	r1, r4, #16
 800e38c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e38e:	6860      	ldr	r0, [r4, #4]
 800e390:	f008 ff02 	bl	8017198 <rcl_send_response>
 800e394:	2800      	cmp	r0, #0
 800e396:	d033      	beq.n	800e400 <_rclc_execute.part.0+0xac>
 800e398:	9005      	str	r0, [sp, #20]
 800e39a:	f000 ff01 	bl	800f1a0 <rcutils_reset_error>
 800e39e:	9805      	ldr	r0, [sp, #20]
 800e3a0:	e02e      	b.n	800e400 <_rclc_execute.part.0+0xac>
 800e3a2:	6840      	ldr	r0, [r0, #4]
 800e3a4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 8086 	beq.w	800e4ba <_rclc_execute.part.0+0x166>
 800e3ae:	2600      	movs	r6, #0
 800e3b0:	2701      	movs	r7, #1
 800e3b2:	e004      	b.n	800e3be <_rclc_execute.part.0+0x6a>
 800e3b4:	f00a ff5e 	bl	8019274 <rclc_action_send_result_request>
 800e3b8:	b998      	cbnz	r0, 800e3e2 <_rclc_execute.part.0+0x8e>
 800e3ba:	722f      	strb	r7, [r5, #8]
 800e3bc:	6860      	ldr	r0, [r4, #4]
 800e3be:	f00b f80b 	bl	80193d8 <rclc_action_find_first_handle_with_goal_response>
 800e3c2:	4605      	mov	r5, r0
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d077      	beq.n	800e4b8 <_rclc_execute.part.0+0x164>
 800e3c8:	6863      	ldr	r3, [r4, #4]
 800e3ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800e3d2:	f885 6020 	strb.w	r6, [r5, #32]
 800e3d6:	4798      	blx	r3
 800e3d8:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800e3dc:	4628      	mov	r0, r5
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1e8      	bne.n	800e3b4 <_rclc_execute.part.0+0x60>
 800e3e2:	6860      	ldr	r0, [r4, #4]
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	f00a ff7b 	bl	80192e0 <rclc_action_remove_used_goal_handle>
 800e3ea:	e7e7      	b.n	800e3bc <_rclc_execute.part.0+0x68>
 800e3ec:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e3f0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800e3f4:	2d00      	cmp	r5, #0
 800e3f6:	f000 80c9 	beq.w	800e58c <_rclc_execute.part.0+0x238>
 800e3fa:	6880      	ldr	r0, [r0, #8]
 800e3fc:	4798      	blx	r3
 800e3fe:	2000      	movs	r0, #0
 800e400:	b007      	add	sp, #28
 800e402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e404:	6840      	ldr	r0, [r0, #4]
 800e406:	f009 fad5 	bl	80179b4 <rcl_timer_call>
 800e40a:	f240 3321 	movw	r3, #801	@ 0x321
 800e40e:	4298      	cmp	r0, r3
 800e410:	d004      	beq.n	800e41c <_rclc_execute.part.0+0xc8>
 800e412:	2800      	cmp	r0, #0
 800e414:	d0f4      	beq.n	800e400 <_rclc_execute.part.0+0xac>
 800e416:	e7bf      	b.n	800e398 <_rclc_execute.part.0+0x44>
 800e418:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e41a:	4798      	blx	r3
 800e41c:	2000      	movs	r0, #0
 800e41e:	b007      	add	sp, #28
 800e420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e422:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e426:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e428:	b925      	cbnz	r5, 800e434 <_rclc_execute.part.0+0xe0>
 800e42a:	4628      	mov	r0, r5
 800e42c:	4798      	blx	r3
 800e42e:	4628      	mov	r0, r5
 800e430:	e7e6      	b.n	800e400 <_rclc_execute.part.0+0xac>
 800e432:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e434:	68a0      	ldr	r0, [r4, #8]
 800e436:	4798      	blx	r3
 800e438:	2000      	movs	r0, #0
 800e43a:	b007      	add	sp, #28
 800e43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e43e:	6840      	ldr	r0, [r0, #4]
 800e440:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e444:	bb3b      	cbnz	r3, 800e496 <_rclc_execute.part.0+0x142>
 800e446:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d07b      	beq.n	800e546 <_rclc_execute.part.0+0x1f2>
 800e44e:	f640 0634 	movw	r6, #2100	@ 0x834
 800e452:	2701      	movs	r7, #1
 800e454:	e007      	b.n	800e466 <_rclc_execute.part.0+0x112>
 800e456:	4628      	mov	r0, r5
 800e458:	f00a ffd6 	bl	8019408 <rclc_action_server_response_goal_request>
 800e45c:	6860      	ldr	r0, [r4, #4]
 800e45e:	4629      	mov	r1, r5
 800e460:	f00a ff3e 	bl	80192e0 <rclc_action_remove_used_goal_handle>
 800e464:	6860      	ldr	r0, [r4, #4]
 800e466:	2100      	movs	r1, #0
 800e468:	f00a ff68 	bl	801933c <rclc_action_find_first_handle_by_status>
 800e46c:	4605      	mov	r5, r0
 800e46e:	2800      	cmp	r0, #0
 800e470:	d066      	beq.n	800e540 <_rclc_execute.part.0+0x1ec>
 800e472:	6863      	ldr	r3, [r4, #4]
 800e474:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	4798      	blx	r3
 800e47a:	42b0      	cmp	r0, r6
 800e47c:	f04f 0100 	mov.w	r1, #0
 800e480:	d1e9      	bne.n	800e456 <_rclc_execute.part.0+0x102>
 800e482:	2101      	movs	r1, #1
 800e484:	4628      	mov	r0, r5
 800e486:	f00a ffbf 	bl	8019408 <rclc_action_server_response_goal_request>
 800e48a:	722f      	strb	r7, [r5, #8]
 800e48c:	e7ea      	b.n	800e464 <_rclc_execute.part.0+0x110>
 800e48e:	6848      	ldr	r0, [r1, #4]
 800e490:	f00a ff26 	bl	80192e0 <rclc_action_remove_used_goal_handle>
 800e494:	6860      	ldr	r0, [r4, #4]
 800e496:	f00a ff5d 	bl	8019354 <rclc_action_find_first_terminated_handle>
 800e49a:	4601      	mov	r1, r0
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d1f6      	bne.n	800e48e <_rclc_execute.part.0+0x13a>
 800e4a0:	6860      	ldr	r0, [r4, #4]
 800e4a2:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800e4a6:	e7ce      	b.n	800e446 <_rclc_execute.part.0+0xf2>
 800e4a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e4aa:	6880      	ldr	r0, [r0, #8]
 800e4ac:	f104 0110 	add.w	r1, r4, #16
 800e4b0:	4798      	blx	r3
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	b007      	add	sp, #28
 800e4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4b8:	6860      	ldr	r0, [r4, #4]
 800e4ba:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e4be:	b18b      	cbz	r3, 800e4e4 <_rclc_execute.part.0+0x190>
 800e4c0:	68c5      	ldr	r5, [r0, #12]
 800e4c2:	b32d      	cbz	r5, 800e510 <_rclc_execute.part.0+0x1bc>
 800e4c4:	2600      	movs	r6, #0
 800e4c6:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800e4ca:	b143      	cbz	r3, 800e4de <_rclc_execute.part.0+0x18a>
 800e4cc:	69c3      	ldr	r3, [r0, #28]
 800e4ce:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800e4d2:	b123      	cbz	r3, 800e4de <_rclc_execute.part.0+0x18a>
 800e4d4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e4d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e4d8:	4628      	mov	r0, r5
 800e4da:	4798      	blx	r3
 800e4dc:	6860      	ldr	r0, [r4, #4]
 800e4de:	682d      	ldr	r5, [r5, #0]
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	d1f0      	bne.n	800e4c6 <_rclc_execute.part.0+0x172>
 800e4e4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e4e8:	b193      	cbz	r3, 800e510 <_rclc_execute.part.0+0x1bc>
 800e4ea:	68c5      	ldr	r5, [r0, #12]
 800e4ec:	b185      	cbz	r5, 800e510 <_rclc_execute.part.0+0x1bc>
 800e4ee:	2600      	movs	r6, #0
 800e4f0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800e4f4:	b14b      	cbz	r3, 800e50a <_rclc_execute.part.0+0x1b6>
 800e4f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e4f8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800e4fc:	b12b      	cbz	r3, 800e50a <_rclc_execute.part.0+0x1b6>
 800e4fe:	4628      	mov	r0, r5
 800e500:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800e504:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e506:	4798      	blx	r3
 800e508:	6860      	ldr	r0, [r4, #4]
 800e50a:	682d      	ldr	r5, [r5, #0]
 800e50c:	2d00      	cmp	r5, #0
 800e50e:	d1ef      	bne.n	800e4f0 <_rclc_execute.part.0+0x19c>
 800e510:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e514:	2b00      	cmp	r3, #0
 800e516:	d081      	beq.n	800e41c <_rclc_execute.part.0+0xc8>
 800e518:	2700      	movs	r7, #0
 800e51a:	e00b      	b.n	800e534 <_rclc_execute.part.0+0x1e0>
 800e51c:	6863      	ldr	r3, [r4, #4]
 800e51e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e520:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e522:	6a1e      	ldr	r6, [r3, #32]
 800e524:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800e528:	47b0      	blx	r6
 800e52a:	6860      	ldr	r0, [r4, #4]
 800e52c:	4629      	mov	r1, r5
 800e52e:	f00a fed7 	bl	80192e0 <rclc_action_remove_used_goal_handle>
 800e532:	6860      	ldr	r0, [r4, #4]
 800e534:	f00a ff5c 	bl	80193f0 <rclc_action_find_first_handle_with_result_response>
 800e538:	4605      	mov	r5, r0
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d1ee      	bne.n	800e51c <_rclc_execute.part.0+0x1c8>
 800e53e:	e76d      	b.n	800e41c <_rclc_execute.part.0+0xc8>
 800e540:	6860      	ldr	r0, [r4, #4]
 800e542:	f880 5020 	strb.w	r5, [r0, #32]
 800e546:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	f43f af66 	beq.w	800e41c <_rclc_execute.part.0+0xc8>
 800e550:	68c5      	ldr	r5, [r0, #12]
 800e552:	b1b5      	cbz	r5, 800e582 <_rclc_execute.part.0+0x22e>
 800e554:	2602      	movs	r6, #2
 800e556:	e001      	b.n	800e55c <_rclc_execute.part.0+0x208>
 800e558:	682d      	ldr	r5, [r5, #0]
 800e55a:	b195      	cbz	r5, 800e582 <_rclc_execute.part.0+0x22e>
 800e55c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e560:	2b03      	cmp	r3, #3
 800e562:	d1f9      	bne.n	800e558 <_rclc_execute.part.0+0x204>
 800e564:	69c3      	ldr	r3, [r0, #28]
 800e566:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e568:	4628      	mov	r0, r5
 800e56a:	4798      	blx	r3
 800e56c:	4603      	mov	r3, r0
 800e56e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800e572:	4628      	mov	r0, r5
 800e574:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e578:	b163      	cbz	r3, 800e594 <_rclc_execute.part.0+0x240>
 800e57a:	f00a ff65 	bl	8019448 <rclc_action_server_goal_cancel_accept>
 800e57e:	6860      	ldr	r0, [r4, #4]
 800e580:	e7ea      	b.n	800e558 <_rclc_execute.part.0+0x204>
 800e582:	2300      	movs	r3, #0
 800e584:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e588:	4618      	mov	r0, r3
 800e58a:	e739      	b.n	800e400 <_rclc_execute.part.0+0xac>
 800e58c:	4628      	mov	r0, r5
 800e58e:	4798      	blx	r3
 800e590:	4628      	mov	r0, r5
 800e592:	e735      	b.n	800e400 <_rclc_execute.part.0+0xac>
 800e594:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e596:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e59a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800e59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5a2:	6860      	ldr	r0, [r4, #4]
 800e5a4:	2101      	movs	r1, #1
 800e5a6:	f00a ff7b 	bl	80194a0 <rclc_action_server_goal_cancel_reject>
 800e5aa:	722e      	strb	r6, [r5, #8]
 800e5ac:	6860      	ldr	r0, [r4, #4]
 800e5ae:	e7d3      	b.n	800e558 <_rclc_execute.part.0+0x204>
 800e5b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e5b2:	6880      	ldr	r0, [r0, #8]
 800e5b4:	4798      	blx	r3
 800e5b6:	f104 0110 	add.w	r1, r4, #16
 800e5ba:	e6e7      	b.n	800e38c <_rclc_execute.part.0+0x38>
 800e5bc:	f100 0110 	add.w	r1, r0, #16
 800e5c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e5c2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800e5c4:	6880      	ldr	r0, [r0, #8]
 800e5c6:	9105      	str	r1, [sp, #20]
 800e5c8:	4798      	blx	r3
 800e5ca:	9905      	ldr	r1, [sp, #20]
 800e5cc:	e6de      	b.n	800e38c <_rclc_execute.part.0+0x38>
 800e5ce:	2001      	movs	r0, #1
 800e5d0:	e716      	b.n	800e400 <_rclc_execute.part.0+0xac>
 800e5d2:	bf00      	nop

0800e5d4 <rclc_executor_trigger_any>:
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d03f      	beq.n	800e658 <rclc_executor_trigger_any+0x84>
 800e5d8:	2900      	cmp	r1, #0
 800e5da:	d03e      	beq.n	800e65a <rclc_executor_trigger_any+0x86>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d037      	beq.n	800e658 <rclc_executor_trigger_any+0x84>
 800e5e8:	b430      	push	{r4, r5}
 800e5ea:	f893 c000 	ldrb.w	ip, [r3]
 800e5ee:	f1bc 0f08 	cmp.w	ip, #8
 800e5f2:	d11e      	bne.n	800e632 <rclc_executor_trigger_any+0x5e>
 800e5f4:	685c      	ldr	r4, [r3, #4]
 800e5f6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800e5f8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e5fc:	d105      	bne.n	800e60a <rclc_executor_trigger_any+0x36>
 800e5fe:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800e602:	b910      	cbnz	r0, 800e60a <rclc_executor_trigger_any+0x36>
 800e604:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800e608:	b128      	cbz	r0, 800e616 <rclc_executor_trigger_any+0x42>
 800e60a:	bc30      	pop	{r4, r5}
 800e60c:	4770      	bx	lr
 800e60e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e612:	2800      	cmp	r0, #0
 800e614:	d1f9      	bne.n	800e60a <rclc_executor_trigger_any+0x36>
 800e616:	3201      	adds	r2, #1
 800e618:	4291      	cmp	r1, r2
 800e61a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e61e:	d018      	beq.n	800e652 <rclc_executor_trigger_any+0x7e>
 800e620:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e624:	2800      	cmp	r0, #0
 800e626:	d0f0      	beq.n	800e60a <rclc_executor_trigger_any+0x36>
 800e628:	f893 c000 	ldrb.w	ip, [r3]
 800e62c:	f1bc 0f08 	cmp.w	ip, #8
 800e630:	d0e0      	beq.n	800e5f4 <rclc_executor_trigger_any+0x20>
 800e632:	f1bc 0f09 	cmp.w	ip, #9
 800e636:	d1ea      	bne.n	800e60e <rclc_executor_trigger_any+0x3a>
 800e638:	685c      	ldr	r4, [r3, #4]
 800e63a:	6a25      	ldr	r5, [r4, #32]
 800e63c:	2d00      	cmp	r5, #0
 800e63e:	d1e4      	bne.n	800e60a <rclc_executor_trigger_any+0x36>
 800e640:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800e644:	2800      	cmp	r0, #0
 800e646:	d1e0      	bne.n	800e60a <rclc_executor_trigger_any+0x36>
 800e648:	3201      	adds	r2, #1
 800e64a:	4291      	cmp	r1, r2
 800e64c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e650:	d1e6      	bne.n	800e620 <rclc_executor_trigger_any+0x4c>
 800e652:	2000      	movs	r0, #0
 800e654:	bc30      	pop	{r4, r5}
 800e656:	4770      	bx	lr
 800e658:	4770      	bx	lr
 800e65a:	4608      	mov	r0, r1
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop

0800e660 <rclc_executor_get_zero_initialized_executor>:
 800e660:	b510      	push	{r4, lr}
 800e662:	4903      	ldr	r1, [pc, #12]	@ (800e670 <rclc_executor_get_zero_initialized_executor+0x10>)
 800e664:	4604      	mov	r4, r0
 800e666:	2288      	movs	r2, #136	@ 0x88
 800e668:	f00d f86d 	bl	801b746 <memcpy>
 800e66c:	4620      	mov	r0, r4
 800e66e:	bd10      	pop	{r4, pc}
 800e670:	0801e050 	.word	0x0801e050
 800e674:	00000000 	.word	0x00000000

0800e678 <rclc_executor_init>:
 800e678:	2800      	cmp	r0, #0
 800e67a:	d05f      	beq.n	800e73c <rclc_executor_init+0xc4>
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e680:	460c      	mov	r4, r1
 800e682:	b0b0      	sub	sp, #192	@ 0xc0
 800e684:	2900      	cmp	r1, #0
 800e686:	d051      	beq.n	800e72c <rclc_executor_init+0xb4>
 800e688:	4605      	mov	r5, r0
 800e68a:	4618      	mov	r0, r3
 800e68c:	4616      	mov	r6, r2
 800e68e:	461f      	mov	r7, r3
 800e690:	f000 fca4 	bl	800efdc <rcutils_allocator_is_valid>
 800e694:	2800      	cmp	r0, #0
 800e696:	d049      	beq.n	800e72c <rclc_executor_init+0xb4>
 800e698:	2e00      	cmp	r6, #0
 800e69a:	d047      	beq.n	800e72c <rclc_executor_init+0xb4>
 800e69c:	492c      	ldr	r1, [pc, #176]	@ (800e750 <rclc_executor_init+0xd8>)
 800e69e:	2288      	movs	r2, #136	@ 0x88
 800e6a0:	a80e      	add	r0, sp, #56	@ 0x38
 800e6a2:	f00d f850 	bl	801b746 <memcpy>
 800e6a6:	a90e      	add	r1, sp, #56	@ 0x38
 800e6a8:	2288      	movs	r2, #136	@ 0x88
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	f00d f84b 	bl	801b746 <memcpy>
 800e6b0:	602c      	str	r4, [r5, #0]
 800e6b2:	4668      	mov	r0, sp
 800e6b4:	60ae      	str	r6, [r5, #8]
 800e6b6:	466c      	mov	r4, sp
 800e6b8:	f009 fbc0 	bl	8017e3c <rcl_get_zero_initialized_wait_set>
 800e6bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6be:	f105 0c14 	add.w	ip, r5, #20
 800e6c2:	f8d7 8000 	ldr.w	r8, [r7]
 800e6c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6d6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e748 <rclc_executor_init+0xd0>
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	f8cc 3000 	str.w	r3, [ip]
 800e6e0:	6939      	ldr	r1, [r7, #16]
 800e6e2:	612f      	str	r7, [r5, #16]
 800e6e4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800e6e8:	01b0      	lsls	r0, r6, #6
 800e6ea:	47c0      	blx	r8
 800e6ec:	6068      	str	r0, [r5, #4]
 800e6ee:	b338      	cbz	r0, 800e740 <rclc_executor_init+0xc8>
 800e6f0:	2400      	movs	r4, #0
 800e6f2:	e000      	b.n	800e6f6 <rclc_executor_init+0x7e>
 800e6f4:	6868      	ldr	r0, [r5, #4]
 800e6f6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	3401      	adds	r4, #1
 800e6fe:	f000 fad7 	bl	800ecb0 <rclc_executor_handle_init>
 800e702:	42a6      	cmp	r6, r4
 800e704:	d1f6      	bne.n	800e6f4 <rclc_executor_init+0x7c>
 800e706:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800e70a:	f000 fac7 	bl	800ec9c <rclc_executor_handle_counters_zero_init>
 800e70e:	4a11      	ldr	r2, [pc, #68]	@ (800e754 <rclc_executor_init+0xdc>)
 800e710:	686b      	ldr	r3, [r5, #4]
 800e712:	2000      	movs	r0, #0
 800e714:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800e718:	b163      	cbz	r3, 800e734 <rclc_executor_init+0xbc>
 800e71a:	692b      	ldr	r3, [r5, #16]
 800e71c:	b153      	cbz	r3, 800e734 <rclc_executor_init+0xbc>
 800e71e:	68ab      	ldr	r3, [r5, #8]
 800e720:	b143      	cbz	r3, 800e734 <rclc_executor_init+0xbc>
 800e722:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800e726:	b030      	add	sp, #192	@ 0xc0
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	200b      	movs	r0, #11
 800e72e:	b030      	add	sp, #192	@ 0xc0
 800e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e734:	4618      	mov	r0, r3
 800e736:	b030      	add	sp, #192	@ 0xc0
 800e738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e73c:	200b      	movs	r0, #11
 800e73e:	4770      	bx	lr
 800e740:	200a      	movs	r0, #10
 800e742:	e7f4      	b.n	800e72e <rclc_executor_init+0xb6>
 800e744:	f3af 8000 	nop.w
 800e748:	3b9aca00 	.word	0x3b9aca00
 800e74c:	00000000 	.word	0x00000000
 800e750:	0801e050 	.word	0x0801e050
 800e754:	0800e5d5 	.word	0x0800e5d5

0800e758 <rclc_executor_add_subscription>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800e75e:	b338      	cbz	r0, 800e7b0 <rclc_executor_add_subscription+0x58>
 800e760:	b331      	cbz	r1, 800e7b0 <rclc_executor_add_subscription+0x58>
 800e762:	b32a      	cbz	r2, 800e7b0 <rclc_executor_add_subscription+0x58>
 800e764:	b323      	cbz	r3, 800e7b0 <rclc_executor_add_subscription+0x58>
 800e766:	4604      	mov	r4, r0
 800e768:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800e76c:	42a8      	cmp	r0, r5
 800e76e:	d301      	bcc.n	800e774 <rclc_executor_add_subscription+0x1c>
 800e770:	2001      	movs	r0, #1
 800e772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e774:	6866      	ldr	r6, [r4, #4]
 800e776:	0187      	lsls	r7, r0, #6
 800e778:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800e77c:	2500      	movs	r5, #0
 800e77e:	55f5      	strb	r5, [r6, r7]
 800e780:	3001      	adds	r0, #1
 800e782:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800e786:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800e78a:	2301      	movs	r3, #1
 800e78c:	f104 0514 	add.w	r5, r4, #20
 800e790:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800e794:	f88c e001 	strb.w	lr, [ip, #1]
 800e798:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800e79c:	60e0      	str	r0, [r4, #12]
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f009 fb60 	bl	8017e64 <rcl_wait_set_is_valid>
 800e7a4:	b930      	cbnz	r0, 800e7b4 <rclc_executor_add_subscription+0x5c>
 800e7a6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	64a3      	str	r3, [r4, #72]	@ 0x48
 800e7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b0:	200b      	movs	r0, #11
 800e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	f009 fb5b 	bl	8017e70 <rcl_wait_set_fini>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	d0f3      	beq.n	800e7a6 <rclc_executor_add_subscription+0x4e>
 800e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7c0 <rclc_executor_add_timer>:
 800e7c0:	b300      	cbz	r0, 800e804 <rclc_executor_add_timer+0x44>
 800e7c2:	b1f9      	cbz	r1, 800e804 <rclc_executor_add_timer+0x44>
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	d301      	bcc.n	800e7d4 <rclc_executor_add_timer+0x14>
 800e7d0:	2001      	movs	r0, #1
 800e7d2:	bd38      	pop	{r3, r4, r5, pc}
 800e7d4:	6840      	ldr	r0, [r0, #4]
 800e7d6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800e7da:	019d      	lsls	r5, r3, #6
 800e7dc:	6051      	str	r1, [r2, #4]
 800e7de:	2102      	movs	r1, #2
 800e7e0:	5341      	strh	r1, [r0, r5]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	2101      	movs	r1, #1
 800e7e8:	f104 0514 	add.w	r5, r4, #20
 800e7ec:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800e7ee:	8711      	strh	r1, [r2, #56]	@ 0x38
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	60e3      	str	r3, [r4, #12]
 800e7f4:	f009 fb36 	bl	8017e64 <rcl_wait_set_is_valid>
 800e7f8:	b930      	cbnz	r0, 800e808 <rclc_executor_add_timer+0x48>
 800e7fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	2000      	movs	r0, #0
 800e800:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800e802:	bd38      	pop	{r3, r4, r5, pc}
 800e804:	200b      	movs	r0, #11
 800e806:	4770      	bx	lr
 800e808:	4628      	mov	r0, r5
 800e80a:	f009 fb31 	bl	8017e70 <rcl_wait_set_fini>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d0f3      	beq.n	800e7fa <rclc_executor_add_timer+0x3a>
 800e812:	bd38      	pop	{r3, r4, r5, pc}

0800e814 <rclc_executor_add_service>:
 800e814:	b370      	cbz	r0, 800e874 <rclc_executor_add_service+0x60>
 800e816:	b369      	cbz	r1, 800e874 <rclc_executor_add_service+0x60>
 800e818:	b362      	cbz	r2, 800e874 <rclc_executor_add_service+0x60>
 800e81a:	b35b      	cbz	r3, 800e874 <rclc_executor_add_service+0x60>
 800e81c:	b538      	push	{r3, r4, r5, lr}
 800e81e:	4604      	mov	r4, r0
 800e820:	9804      	ldr	r0, [sp, #16]
 800e822:	b378      	cbz	r0, 800e884 <rclc_executor_add_service+0x70>
 800e824:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800e828:	42a8      	cmp	r0, r5
 800e82a:	d301      	bcc.n	800e830 <rclc_executor_add_service+0x1c>
 800e82c:	2001      	movs	r0, #1
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	6865      	ldr	r5, [r4, #4]
 800e832:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800e836:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800e83a:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800e83e:	9b04      	ldr	r3, [sp, #16]
 800e840:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800e844:	2305      	movs	r3, #5
 800e846:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800e84a:	3001      	adds	r0, #1
 800e84c:	f825 300e 	strh.w	r3, [r5, lr]
 800e850:	2201      	movs	r2, #1
 800e852:	2300      	movs	r3, #0
 800e854:	f104 0514 	add.w	r5, r4, #20
 800e858:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800e85c:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800e860:	60e0      	str	r0, [r4, #12]
 800e862:	4628      	mov	r0, r5
 800e864:	f009 fafe 	bl	8017e64 <rcl_wait_set_is_valid>
 800e868:	b930      	cbnz	r0, 800e878 <rclc_executor_add_service+0x64>
 800e86a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e86c:	3301      	adds	r3, #1
 800e86e:	2000      	movs	r0, #0
 800e870:	6563      	str	r3, [r4, #84]	@ 0x54
 800e872:	bd38      	pop	{r3, r4, r5, pc}
 800e874:	200b      	movs	r0, #11
 800e876:	4770      	bx	lr
 800e878:	4628      	mov	r0, r5
 800e87a:	f009 faf9 	bl	8017e70 <rcl_wait_set_fini>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d0f3      	beq.n	800e86a <rclc_executor_add_service+0x56>
 800e882:	e7d4      	b.n	800e82e <rclc_executor_add_service+0x1a>
 800e884:	200b      	movs	r0, #11
 800e886:	bd38      	pop	{r3, r4, r5, pc}

0800e888 <rclc_executor_prepare>:
 800e888:	2800      	cmp	r0, #0
 800e88a:	d044      	beq.n	800e916 <rclc_executor_prepare+0x8e>
 800e88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e88e:	f100 0514 	add.w	r5, r0, #20
 800e892:	b09b      	sub	sp, #108	@ 0x6c
 800e894:	4604      	mov	r4, r0
 800e896:	4628      	mov	r0, r5
 800e898:	f009 fae4 	bl	8017e64 <rcl_wait_set_is_valid>
 800e89c:	b110      	cbz	r0, 800e8a4 <rclc_executor_prepare+0x1c>
 800e89e:	2000      	movs	r0, #0
 800e8a0:	b01b      	add	sp, #108	@ 0x6c
 800e8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	f009 fae3 	bl	8017e70 <rcl_wait_set_fini>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d130      	bne.n	800e910 <rclc_executor_prepare+0x88>
 800e8ae:	a80c      	add	r0, sp, #48	@ 0x30
 800e8b0:	f009 fac4 	bl	8017e3c <rcl_get_zero_initialized_wait_set>
 800e8b4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e8b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8bc:	46ae      	mov	lr, r5
 800e8be:	6927      	ldr	r7, [r4, #16]
 800e8c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8d4:	f8dc 3000 	ldr.w	r3, [ip]
 800e8d8:	f8ce 3000 	str.w	r3, [lr]
 800e8dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e8de:	ae04      	add	r6, sp, #16
 800e8e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	6822      	ldr	r2, [r4, #0]
 800e8e6:	6033      	str	r3, [r6, #0]
 800e8e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8ea:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800e8ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e8f0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800e8f4:	e9cd 2100 	strd	r2, r1, [sp]
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800e8fc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e8fe:	f009 fdb5 	bl	801846c <rcl_wait_set_init>
 800e902:	2800      	cmp	r0, #0
 800e904:	d0cc      	beq.n	800e8a0 <rclc_executor_prepare+0x18>
 800e906:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e908:	f000 fc4a 	bl	800f1a0 <rcutils_reset_error>
 800e90c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e90e:	e7c7      	b.n	800e8a0 <rclc_executor_prepare+0x18>
 800e910:	f000 fc46 	bl	800f1a0 <rcutils_reset_error>
 800e914:	e7cb      	b.n	800e8ae <rclc_executor_prepare+0x26>
 800e916:	200b      	movs	r0, #11
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop

0800e91c <rclc_executor_spin_some.part.0>:
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	f100 0614 	add.w	r6, r0, #20
 800e924:	b083      	sub	sp, #12
 800e926:	4691      	mov	r9, r2
 800e928:	4698      	mov	r8, r3
 800e92a:	4605      	mov	r5, r0
 800e92c:	f7ff ffac 	bl	800e888 <rclc_executor_prepare>
 800e930:	4630      	mov	r0, r6
 800e932:	f009 fb69 	bl	8018008 <rcl_wait_set_clear>
 800e936:	4607      	mov	r7, r0
 800e938:	2800      	cmp	r0, #0
 800e93a:	f040 80ed 	bne.w	800eb18 <rclc_executor_spin_some.part.0+0x1fc>
 800e93e:	68ab      	ldr	r3, [r5, #8]
 800e940:	4604      	mov	r4, r0
 800e942:	b303      	cbz	r3, 800e986 <rclc_executor_spin_some.part.0+0x6a>
 800e944:	6869      	ldr	r1, [r5, #4]
 800e946:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e94a:	01a2      	lsls	r2, r4, #6
 800e94c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800e950:	b1cb      	cbz	r3, 800e986 <rclc_executor_spin_some.part.0+0x6a>
 800e952:	5c8b      	ldrb	r3, [r1, r2]
 800e954:	2b0a      	cmp	r3, #10
 800e956:	f200 80d8 	bhi.w	800eb0a <rclc_executor_spin_some.part.0+0x1ee>
 800e95a:	e8df f003 	tbb	[pc, r3]
 800e95e:	9c9c      	.short	0x9c9c
 800e960:	068c8ca7 	.word	0x068c8ca7
 800e964:	bdc90606 	.word	0xbdc90606
 800e968:	b2          	.byte	0xb2
 800e969:	00          	.byte	0x00
 800e96a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e96e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e972:	4630      	mov	r0, r6
 800e974:	f009 fe90 	bl	8018698 <rcl_wait_set_add_service>
 800e978:	2800      	cmp	r0, #0
 800e97a:	f040 8086 	bne.w	800ea8a <rclc_executor_spin_some.part.0+0x16e>
 800e97e:	68ab      	ldr	r3, [r5, #8]
 800e980:	3401      	adds	r4, #1
 800e982:	429c      	cmp	r4, r3
 800e984:	d3de      	bcc.n	800e944 <rclc_executor_spin_some.part.0+0x28>
 800e986:	4643      	mov	r3, r8
 800e988:	464a      	mov	r2, r9
 800e98a:	4630      	mov	r0, r6
 800e98c:	f009 feb0 	bl	80186f0 <rcl_wait>
 800e990:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800e994:	2b00      	cmp	r3, #0
 800e996:	f000 80c7 	beq.w	800eb28 <rclc_executor_spin_some.part.0+0x20c>
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	f040 80b5 	bne.w	800eb0a <rclc_executor_spin_some.part.0+0x1ee>
 800e9a0:	68ab      	ldr	r3, [r5, #8]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f000 8159 	beq.w	800ec5a <rclc_executor_spin_some.part.0+0x33e>
 800e9a8:	2400      	movs	r4, #0
 800e9aa:	46a0      	mov	r8, r4
 800e9ac:	f240 1991 	movw	r9, #401	@ 0x191
 800e9b0:	e00a      	b.n	800e9c8 <rclc_executor_spin_some.part.0+0xac>
 800e9b2:	f7ff fb0d 	bl	800dfd0 <_rclc_check_for_new_data>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	b110      	cbz	r0, 800e9c0 <rclc_executor_spin_some.part.0+0xa4>
 800e9ba:	4548      	cmp	r0, r9
 800e9bc:	f040 80b2 	bne.w	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800e9c0:	68ab      	ldr	r3, [r5, #8]
 800e9c2:	4598      	cmp	r8, r3
 800e9c4:	f080 8126 	bcs.w	800ec14 <rclc_executor_spin_some.part.0+0x2f8>
 800e9c8:	686a      	ldr	r2, [r5, #4]
 800e9ca:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e9ce:	4631      	mov	r1, r6
 800e9d0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e9d4:	f108 0801 	add.w	r8, r8, #1
 800e9d8:	f1bc 0f00 	cmp.w	ip, #0
 800e9dc:	d1e9      	bne.n	800e9b2 <rclc_executor_spin_some.part.0+0x96>
 800e9de:	4619      	mov	r1, r3
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800e9e6:	4798      	blx	r3
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	f000 809b 	beq.w	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800e9ee:	68ab      	ldr	r3, [r5, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 8097 	beq.w	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800e9f6:	f04f 0800 	mov.w	r8, #0
 800e9fa:	f240 1991 	movw	r9, #401	@ 0x191
 800e9fe:	e009      	b.n	800ea14 <rclc_executor_spin_some.part.0+0xf8>
 800ea00:	f7ff fb34 	bl	800e06c <_rclc_take_new_data>
 800ea04:	4604      	mov	r4, r0
 800ea06:	b110      	cbz	r0, 800ea0e <rclc_executor_spin_some.part.0+0xf2>
 800ea08:	4548      	cmp	r0, r9
 800ea0a:	f040 808b 	bne.w	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800ea0e:	68ab      	ldr	r3, [r5, #8]
 800ea10:	4598      	cmp	r8, r3
 800ea12:	d209      	bcs.n	800ea28 <rclc_executor_spin_some.part.0+0x10c>
 800ea14:	6868      	ldr	r0, [r5, #4]
 800ea16:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ea1a:	4631      	mov	r1, r6
 800ea1c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ea20:	f108 0801 	add.w	r8, r8, #1
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	d1eb      	bne.n	800ea00 <rclc_executor_spin_some.part.0+0xe4>
 800ea28:	2600      	movs	r6, #0
 800ea2a:	b97b      	cbnz	r3, 800ea4c <rclc_executor_spin_some.part.0+0x130>
 800ea2c:	e07a      	b.n	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800ea2e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ea32:	2a08      	cmp	r2, #8
 800ea34:	f000 80fd 	beq.w	800ec32 <rclc_executor_spin_some.part.0+0x316>
 800ea38:	2a09      	cmp	r2, #9
 800ea3a:	f000 80ef 	beq.w	800ec1c <rclc_executor_spin_some.part.0+0x300>
 800ea3e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800ea42:	b98a      	cbnz	r2, 800ea68 <rclc_executor_spin_some.part.0+0x14c>
 800ea44:	3601      	adds	r6, #1
 800ea46:	429e      	cmp	r6, r3
 800ea48:	d262      	bcs.n	800eb10 <rclc_executor_spin_some.part.0+0x1f4>
 800ea4a:	2400      	movs	r4, #0
 800ea4c:	686a      	ldr	r2, [r5, #4]
 800ea4e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ea52:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ea56:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800ea5a:	2900      	cmp	r1, #0
 800ea5c:	d062      	beq.n	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800ea5e:	7841      	ldrb	r1, [r0, #1]
 800ea60:	2900      	cmp	r1, #0
 800ea62:	d0e4      	beq.n	800ea2e <rclc_executor_spin_some.part.0+0x112>
 800ea64:	2901      	cmp	r1, #1
 800ea66:	d1ed      	bne.n	800ea44 <rclc_executor_spin_some.part.0+0x128>
 800ea68:	f7ff fc74 	bl	800e354 <_rclc_execute.part.0>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	f040 80b6 	bne.w	800ebde <rclc_executor_spin_some.part.0+0x2c2>
 800ea72:	68ab      	ldr	r3, [r5, #8]
 800ea74:	e7e6      	b.n	800ea44 <rclc_executor_spin_some.part.0+0x128>
 800ea76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ea7a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f009 fdde 	bl	8018640 <rcl_wait_set_add_client>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	f43f af7a 	beq.w	800e97e <rclc_executor_spin_some.part.0+0x62>
 800ea8a:	9001      	str	r0, [sp, #4]
 800ea8c:	f000 fb88 	bl	800f1a0 <rcutils_reset_error>
 800ea90:	9801      	ldr	r0, [sp, #4]
 800ea92:	4607      	mov	r7, r0
 800ea94:	e03c      	b.n	800eb10 <rclc_executor_spin_some.part.0+0x1f4>
 800ea96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ea9a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f009 fa86 	bl	8017fb0 <rcl_wait_set_add_subscription>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	f43f af6a 	beq.w	800e97e <rclc_executor_spin_some.part.0+0x62>
 800eaaa:	e7ee      	b.n	800ea8a <rclc_executor_spin_some.part.0+0x16e>
 800eaac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eab0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eab4:	4630      	mov	r0, r6
 800eab6:	f009 fd93 	bl	80185e0 <rcl_wait_set_add_timer>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f43f af5f 	beq.w	800e97e <rclc_executor_spin_some.part.0+0x62>
 800eac0:	e7e3      	b.n	800ea8a <rclc_executor_spin_some.part.0+0x16e>
 800eac2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eac6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eaca:	4630      	mov	r0, r6
 800eacc:	f009 fd5c 	bl	8018588 <rcl_wait_set_add_guard_condition>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	f43f af54 	beq.w	800e97e <rclc_executor_spin_some.part.0+0x62>
 800ead6:	e7d8      	b.n	800ea8a <rclc_executor_spin_some.part.0+0x16e>
 800ead8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eadc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eae0:	3110      	adds	r1, #16
 800eae2:	4630      	mov	r0, r6
 800eae4:	f00a fadc 	bl	80190a0 <rcl_action_wait_set_add_action_server>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	f43f af48 	beq.w	800e97e <rclc_executor_spin_some.part.0+0x62>
 800eaee:	e7cc      	b.n	800ea8a <rclc_executor_spin_some.part.0+0x16e>
 800eaf0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eaf4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eaf8:	3110      	adds	r1, #16
 800eafa:	2300      	movs	r3, #0
 800eafc:	4630      	mov	r0, r6
 800eafe:	f00a f8a7 	bl	8018c50 <rcl_action_wait_set_add_action_client>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	f43f af3b 	beq.w	800e97e <rclc_executor_spin_some.part.0+0x62>
 800eb08:	e7bf      	b.n	800ea8a <rclc_executor_spin_some.part.0+0x16e>
 800eb0a:	f000 fb49 	bl	800f1a0 <rcutils_reset_error>
 800eb0e:	2701      	movs	r7, #1
 800eb10:	4638      	mov	r0, r7
 800eb12:	b003      	add	sp, #12
 800eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb18:	f000 fb42 	bl	800f1a0 <rcutils_reset_error>
 800eb1c:	4638      	mov	r0, r7
 800eb1e:	b003      	add	sp, #12
 800eb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb24:	4627      	mov	r7, r4
 800eb26:	e7f3      	b.n	800eb10 <rclc_executor_spin_some.part.0+0x1f4>
 800eb28:	68ab      	ldr	r3, [r5, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	f000 8092 	beq.w	800ec54 <rclc_executor_spin_some.part.0+0x338>
 800eb30:	2400      	movs	r4, #0
 800eb32:	46a0      	mov	r8, r4
 800eb34:	f240 1991 	movw	r9, #401	@ 0x191
 800eb38:	e008      	b.n	800eb4c <rclc_executor_spin_some.part.0+0x230>
 800eb3a:	f7ff fa49 	bl	800dfd0 <_rclc_check_for_new_data>
 800eb3e:	4604      	mov	r4, r0
 800eb40:	b108      	cbz	r0, 800eb46 <rclc_executor_spin_some.part.0+0x22a>
 800eb42:	4548      	cmp	r0, r9
 800eb44:	d1ee      	bne.n	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800eb46:	68ab      	ldr	r3, [r5, #8]
 800eb48:	4598      	cmp	r8, r3
 800eb4a:	d265      	bcs.n	800ec18 <rclc_executor_spin_some.part.0+0x2fc>
 800eb4c:	686a      	ldr	r2, [r5, #4]
 800eb4e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800eb52:	4631      	mov	r1, r6
 800eb54:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800eb58:	f108 0801 	add.w	r8, r8, #1
 800eb5c:	f1bc 0f00 	cmp.w	ip, #0
 800eb60:	d1eb      	bne.n	800eb3a <rclc_executor_spin_some.part.0+0x21e>
 800eb62:	4619      	mov	r1, r3
 800eb64:	4610      	mov	r0, r2
 800eb66:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800eb6a:	4798      	blx	r3
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d0d9      	beq.n	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800eb70:	68ab      	ldr	r3, [r5, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d0d6      	beq.n	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800eb76:	f04f 0800 	mov.w	r8, #0
 800eb7a:	f240 1991 	movw	r9, #401	@ 0x191
 800eb7e:	f240 2a59 	movw	sl, #601	@ 0x259
 800eb82:	e00e      	b.n	800eba2 <rclc_executor_spin_some.part.0+0x286>
 800eb84:	f813 300b 	ldrb.w	r3, [r3, fp]
 800eb88:	2b08      	cmp	r3, #8
 800eb8a:	d033      	beq.n	800ebf4 <rclc_executor_spin_some.part.0+0x2d8>
 800eb8c:	2b09      	cmp	r3, #9
 800eb8e:	d028      	beq.n	800ebe2 <rclc_executor_spin_some.part.0+0x2c6>
 800eb90:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800eb94:	b9fb      	cbnz	r3, 800ebd6 <rclc_executor_spin_some.part.0+0x2ba>
 800eb96:	68ab      	ldr	r3, [r5, #8]
 800eb98:	f108 0801 	add.w	r8, r8, #1
 800eb9c:	4598      	cmp	r8, r3
 800eb9e:	d2b7      	bcs.n	800eb10 <rclc_executor_spin_some.part.0+0x1f4>
 800eba0:	2400      	movs	r4, #0
 800eba2:	6868      	ldr	r0, [r5, #4]
 800eba4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800eba8:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800ebac:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d0b7      	beq.n	800eb24 <rclc_executor_spin_some.part.0+0x208>
 800ebb4:	4631      	mov	r1, r6
 800ebb6:	f7ff fa59 	bl	800e06c <_rclc_take_new_data>
 800ebba:	b118      	cbz	r0, 800ebc4 <rclc_executor_spin_some.part.0+0x2a8>
 800ebbc:	4548      	cmp	r0, r9
 800ebbe:	d001      	beq.n	800ebc4 <rclc_executor_spin_some.part.0+0x2a8>
 800ebc0:	4550      	cmp	r0, sl
 800ebc2:	d10c      	bne.n	800ebde <rclc_executor_spin_some.part.0+0x2c2>
 800ebc4:	686b      	ldr	r3, [r5, #4]
 800ebc6:	eb13 000b 	adds.w	r0, r3, fp
 800ebca:	d021      	beq.n	800ec10 <rclc_executor_spin_some.part.0+0x2f4>
 800ebcc:	7842      	ldrb	r2, [r0, #1]
 800ebce:	2a00      	cmp	r2, #0
 800ebd0:	d0d8      	beq.n	800eb84 <rclc_executor_spin_some.part.0+0x268>
 800ebd2:	2a01      	cmp	r2, #1
 800ebd4:	d1df      	bne.n	800eb96 <rclc_executor_spin_some.part.0+0x27a>
 800ebd6:	f7ff fbbd 	bl	800e354 <_rclc_execute.part.0>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d0db      	beq.n	800eb96 <rclc_executor_spin_some.part.0+0x27a>
 800ebde:	4607      	mov	r7, r0
 800ebe0:	e796      	b.n	800eb10 <rclc_executor_spin_some.part.0+0x1f4>
 800ebe2:	6843      	ldr	r3, [r0, #4]
 800ebe4:	6a1a      	ldr	r2, [r3, #32]
 800ebe6:	2a00      	cmp	r2, #0
 800ebe8:	d1f5      	bne.n	800ebd6 <rclc_executor_spin_some.part.0+0x2ba>
 800ebea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d0d1      	beq.n	800eb96 <rclc_executor_spin_some.part.0+0x27a>
 800ebf2:	e7f0      	b.n	800ebd6 <rclc_executor_spin_some.part.0+0x2ba>
 800ebf4:	6843      	ldr	r3, [r0, #4]
 800ebf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ebf8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800ebfc:	d1eb      	bne.n	800ebd6 <rclc_executor_spin_some.part.0+0x2ba>
 800ebfe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ec02:	2a00      	cmp	r2, #0
 800ec04:	d1e7      	bne.n	800ebd6 <rclc_executor_spin_some.part.0+0x2ba>
 800ec06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0c3      	beq.n	800eb96 <rclc_executor_spin_some.part.0+0x27a>
 800ec0e:	e7e2      	b.n	800ebd6 <rclc_executor_spin_some.part.0+0x2ba>
 800ec10:	270b      	movs	r7, #11
 800ec12:	e77d      	b.n	800eb10 <rclc_executor_spin_some.part.0+0x1f4>
 800ec14:	686a      	ldr	r2, [r5, #4]
 800ec16:	e6e2      	b.n	800e9de <rclc_executor_spin_some.part.0+0xc2>
 800ec18:	686a      	ldr	r2, [r5, #4]
 800ec1a:	e7a2      	b.n	800eb62 <rclc_executor_spin_some.part.0+0x246>
 800ec1c:	6842      	ldr	r2, [r0, #4]
 800ec1e:	6a11      	ldr	r1, [r2, #32]
 800ec20:	2900      	cmp	r1, #0
 800ec22:	f47f af21 	bne.w	800ea68 <rclc_executor_spin_some.part.0+0x14c>
 800ec26:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ec2a:	2a00      	cmp	r2, #0
 800ec2c:	f43f af0a 	beq.w	800ea44 <rclc_executor_spin_some.part.0+0x128>
 800ec30:	e71a      	b.n	800ea68 <rclc_executor_spin_some.part.0+0x14c>
 800ec32:	6842      	ldr	r2, [r0, #4]
 800ec34:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ec36:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ec3a:	f47f af15 	bne.w	800ea68 <rclc_executor_spin_some.part.0+0x14c>
 800ec3e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ec42:	2900      	cmp	r1, #0
 800ec44:	f47f af10 	bne.w	800ea68 <rclc_executor_spin_some.part.0+0x14c>
 800ec48:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ec4c:	2a00      	cmp	r2, #0
 800ec4e:	f43f aef9 	beq.w	800ea44 <rclc_executor_spin_some.part.0+0x128>
 800ec52:	e709      	b.n	800ea68 <rclc_executor_spin_some.part.0+0x14c>
 800ec54:	686a      	ldr	r2, [r5, #4]
 800ec56:	461c      	mov	r4, r3
 800ec58:	e783      	b.n	800eb62 <rclc_executor_spin_some.part.0+0x246>
 800ec5a:	686a      	ldr	r2, [r5, #4]
 800ec5c:	461c      	mov	r4, r3
 800ec5e:	e6be      	b.n	800e9de <rclc_executor_spin_some.part.0+0xc2>

0800ec60 <rclc_executor_spin>:
 800ec60:	b1d0      	cbz	r0, 800ec98 <rclc_executor_spin+0x38>
 800ec62:	b510      	push	{r4, lr}
 800ec64:	4604      	mov	r4, r0
 800ec66:	b082      	sub	sp, #8
 800ec68:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800ec6c:	6820      	ldr	r0, [r4, #0]
 800ec6e:	e9cd 2300 	strd	r2, r3, [sp]
 800ec72:	f007 fc9f 	bl	80165b4 <rcl_context_is_valid>
 800ec76:	4601      	mov	r1, r0
 800ec78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	b131      	cbz	r1, 800ec8e <rclc_executor_spin+0x2e>
 800ec80:	f7ff fe4c 	bl	800e91c <rclc_executor_spin_some.part.0>
 800ec84:	f030 0302 	bics.w	r3, r0, #2
 800ec88:	d0ee      	beq.n	800ec68 <rclc_executor_spin+0x8>
 800ec8a:	b002      	add	sp, #8
 800ec8c:	bd10      	pop	{r4, pc}
 800ec8e:	f000 fa87 	bl	800f1a0 <rcutils_reset_error>
 800ec92:	2001      	movs	r0, #1
 800ec94:	b002      	add	sp, #8
 800ec96:	bd10      	pop	{r4, pc}
 800ec98:	200b      	movs	r0, #11
 800ec9a:	4770      	bx	lr

0800ec9c <rclc_executor_handle_counters_zero_init>:
 800ec9c:	b130      	cbz	r0, 800ecac <rclc_executor_handle_counters_zero_init+0x10>
 800ec9e:	b508      	push	{r3, lr}
 800eca0:	2220      	movs	r2, #32
 800eca2:	2100      	movs	r1, #0
 800eca4:	f00c fc86 	bl	801b5b4 <memset>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	bd08      	pop	{r3, pc}
 800ecac:	200b      	movs	r0, #11
 800ecae:	4770      	bx	lr

0800ecb0 <rclc_executor_handle_init>:
 800ecb0:	b168      	cbz	r0, 800ecce <rclc_executor_handle_init+0x1e>
 800ecb2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800ecd8 <rclc_executor_handle_init+0x28>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	220b      	movs	r2, #11
 800ecba:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800ecbe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ecc2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ecc6:	8002      	strh	r2, [r0, #0]
 800ecc8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ecca:	4618      	mov	r0, r3
 800eccc:	4770      	bx	lr
 800ecce:	200b      	movs	r0, #11
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	f3af 8000 	nop.w
	...

0800ece0 <rclc_support_init_with_options>:
 800ece0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ece4:	b083      	sub	sp, #12
 800ece6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ece8:	b340      	cbz	r0, 800ed3c <rclc_support_init_with_options+0x5c>
 800ecea:	461d      	mov	r5, r3
 800ecec:	b333      	cbz	r3, 800ed3c <rclc_support_init_with_options+0x5c>
 800ecee:	b32e      	cbz	r6, 800ed3c <rclc_support_init_with_options+0x5c>
 800ecf0:	46e9      	mov	r9, sp
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	4648      	mov	r0, r9
 800ecf6:	460f      	mov	r7, r1
 800ecf8:	4690      	mov	r8, r2
 800ecfa:	f007 fc51 	bl	80165a0 <rcl_get_zero_initialized_context>
 800ecfe:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ed02:	462a      	mov	r2, r5
 800ed04:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed08:	4623      	mov	r3, r4
 800ed0a:	4641      	mov	r1, r8
 800ed0c:	4638      	mov	r0, r7
 800ed0e:	f007 ff29 	bl	8016b64 <rcl_init>
 800ed12:	4605      	mov	r5, r0
 800ed14:	b960      	cbnz	r0, 800ed30 <rclc_support_init_with_options+0x50>
 800ed16:	60a6      	str	r6, [r4, #8]
 800ed18:	4632      	mov	r2, r6
 800ed1a:	f104 010c 	add.w	r1, r4, #12
 800ed1e:	2003      	movs	r0, #3
 800ed20:	f008 fbb8 	bl	8017494 <rcl_clock_init>
 800ed24:	4605      	mov	r5, r0
 800ed26:	b918      	cbnz	r0, 800ed30 <rclc_support_init_with_options+0x50>
 800ed28:	4628      	mov	r0, r5
 800ed2a:	b003      	add	sp, #12
 800ed2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed30:	f000 fa36 	bl	800f1a0 <rcutils_reset_error>
 800ed34:	4628      	mov	r0, r5
 800ed36:	b003      	add	sp, #12
 800ed38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed3c:	250b      	movs	r5, #11
 800ed3e:	4628      	mov	r0, r5
 800ed40:	b003      	add	sp, #12
 800ed42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed46:	bf00      	nop

0800ed48 <rclc_node_init_default>:
 800ed48:	b3b8      	cbz	r0, 800edba <rclc_node_init_default+0x72>
 800ed4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed4e:	460d      	mov	r5, r1
 800ed50:	b0a1      	sub	sp, #132	@ 0x84
 800ed52:	b329      	cbz	r1, 800eda0 <rclc_node_init_default+0x58>
 800ed54:	4616      	mov	r6, r2
 800ed56:	b31a      	cbz	r2, 800eda0 <rclc_node_init_default+0x58>
 800ed58:	461f      	mov	r7, r3
 800ed5a:	b30b      	cbz	r3, 800eda0 <rclc_node_init_default+0x58>
 800ed5c:	f10d 0810 	add.w	r8, sp, #16
 800ed60:	4604      	mov	r4, r0
 800ed62:	4640      	mov	r0, r8
 800ed64:	f7fe fda4 	bl	800d8b0 <rcl_get_zero_initialized_node>
 800ed68:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ed6c:	f10d 0918 	add.w	r9, sp, #24
 800ed70:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed74:	4648      	mov	r0, r9
 800ed76:	f7fe ff13 	bl	800dba0 <rcl_node_get_default_options>
 800ed7a:	4640      	mov	r0, r8
 800ed7c:	f7fe fd98 	bl	800d8b0 <rcl_get_zero_initialized_node>
 800ed80:	f8cd 9000 	str.w	r9, [sp]
 800ed84:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ed88:	463b      	mov	r3, r7
 800ed8a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed8e:	4632      	mov	r2, r6
 800ed90:	4629      	mov	r1, r5
 800ed92:	4620      	mov	r0, r4
 800ed94:	f7fe fd96 	bl	800d8c4 <rcl_node_init>
 800ed98:	b930      	cbnz	r0, 800eda8 <rclc_node_init_default+0x60>
 800ed9a:	b021      	add	sp, #132	@ 0x84
 800ed9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda0:	200b      	movs	r0, #11
 800eda2:	b021      	add	sp, #132	@ 0x84
 800eda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda8:	9003      	str	r0, [sp, #12]
 800edaa:	f000 f9f9 	bl	800f1a0 <rcutils_reset_error>
 800edae:	f000 f9f7 	bl	800f1a0 <rcutils_reset_error>
 800edb2:	9803      	ldr	r0, [sp, #12]
 800edb4:	b021      	add	sp, #132	@ 0x84
 800edb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edba:	200b      	movs	r0, #11
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop

0800edc0 <rclc_publisher_init_default>:
 800edc0:	b368      	cbz	r0, 800ee1e <rclc_publisher_init_default+0x5e>
 800edc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc6:	460d      	mov	r5, r1
 800edc8:	b0a0      	sub	sp, #128	@ 0x80
 800edca:	b321      	cbz	r1, 800ee16 <rclc_publisher_init_default+0x56>
 800edcc:	4616      	mov	r6, r2
 800edce:	b312      	cbz	r2, 800ee16 <rclc_publisher_init_default+0x56>
 800edd0:	461f      	mov	r7, r3
 800edd2:	b303      	cbz	r3, 800ee16 <rclc_publisher_init_default+0x56>
 800edd4:	4604      	mov	r4, r0
 800edd6:	f7fe ffb7 	bl	800dd48 <rcl_get_zero_initialized_publisher>
 800edda:	f10d 0810 	add.w	r8, sp, #16
 800edde:	6020      	str	r0, [r4, #0]
 800ede0:	4640      	mov	r0, r8
 800ede2:	f7ff f84d 	bl	800de80 <rcl_publisher_get_default_options>
 800ede6:	490f      	ldr	r1, [pc, #60]	@ (800ee24 <rclc_publisher_init_default+0x64>)
 800ede8:	2250      	movs	r2, #80	@ 0x50
 800edea:	4640      	mov	r0, r8
 800edec:	f00c fcab 	bl	801b746 <memcpy>
 800edf0:	f8cd 8000 	str.w	r8, [sp]
 800edf4:	463b      	mov	r3, r7
 800edf6:	4632      	mov	r2, r6
 800edf8:	4629      	mov	r1, r5
 800edfa:	4620      	mov	r0, r4
 800edfc:	f7fe ffaa 	bl	800dd54 <rcl_publisher_init>
 800ee00:	b910      	cbnz	r0, 800ee08 <rclc_publisher_init_default+0x48>
 800ee02:	b020      	add	sp, #128	@ 0x80
 800ee04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee08:	9003      	str	r0, [sp, #12]
 800ee0a:	f000 f9c9 	bl	800f1a0 <rcutils_reset_error>
 800ee0e:	9803      	ldr	r0, [sp, #12]
 800ee10:	b020      	add	sp, #128	@ 0x80
 800ee12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee16:	200b      	movs	r0, #11
 800ee18:	b020      	add	sp, #128	@ 0x80
 800ee1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee1e:	200b      	movs	r0, #11
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	0801e0d8 	.word	0x0801e0d8

0800ee28 <rclc_service_init_default>:
 800ee28:	b368      	cbz	r0, 800ee86 <rclc_service_init_default+0x5e>
 800ee2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2e:	460d      	mov	r5, r1
 800ee30:	b09e      	sub	sp, #120	@ 0x78
 800ee32:	b321      	cbz	r1, 800ee7e <rclc_service_init_default+0x56>
 800ee34:	4616      	mov	r6, r2
 800ee36:	b312      	cbz	r2, 800ee7e <rclc_service_init_default+0x56>
 800ee38:	461f      	mov	r7, r3
 800ee3a:	b303      	cbz	r3, 800ee7e <rclc_service_init_default+0x56>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	f008 f8b3 	bl	8016fa8 <rcl_get_zero_initialized_service>
 800ee42:	f10d 0810 	add.w	r8, sp, #16
 800ee46:	6020      	str	r0, [r4, #0]
 800ee48:	4640      	mov	r0, r8
 800ee4a:	f008 f93b 	bl	80170c4 <rcl_service_get_default_options>
 800ee4e:	490f      	ldr	r1, [pc, #60]	@ (800ee8c <rclc_service_init_default+0x64>)
 800ee50:	2250      	movs	r2, #80	@ 0x50
 800ee52:	4640      	mov	r0, r8
 800ee54:	f00c fc77 	bl	801b746 <memcpy>
 800ee58:	f8cd 8000 	str.w	r8, [sp]
 800ee5c:	463b      	mov	r3, r7
 800ee5e:	4632      	mov	r2, r6
 800ee60:	4629      	mov	r1, r5
 800ee62:	4620      	mov	r0, r4
 800ee64:	f008 f8a6 	bl	8016fb4 <rcl_service_init>
 800ee68:	b910      	cbnz	r0, 800ee70 <rclc_service_init_default+0x48>
 800ee6a:	b01e      	add	sp, #120	@ 0x78
 800ee6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee70:	9003      	str	r0, [sp, #12]
 800ee72:	f000 f995 	bl	800f1a0 <rcutils_reset_error>
 800ee76:	9803      	ldr	r0, [sp, #12]
 800ee78:	b01e      	add	sp, #120	@ 0x78
 800ee7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee7e:	200b      	movs	r0, #11
 800ee80:	b01e      	add	sp, #120	@ 0x78
 800ee82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee86:	200b      	movs	r0, #11
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	0801e128 	.word	0x0801e128

0800ee90 <rclc_subscription_init_default>:
 800ee90:	b368      	cbz	r0, 800eeee <rclc_subscription_init_default+0x5e>
 800ee92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee96:	460d      	mov	r5, r1
 800ee98:	b0a0      	sub	sp, #128	@ 0x80
 800ee9a:	b321      	cbz	r1, 800eee6 <rclc_subscription_init_default+0x56>
 800ee9c:	4616      	mov	r6, r2
 800ee9e:	b312      	cbz	r2, 800eee6 <rclc_subscription_init_default+0x56>
 800eea0:	461f      	mov	r7, r3
 800eea2:	b303      	cbz	r3, 800eee6 <rclc_subscription_init_default+0x56>
 800eea4:	4604      	mov	r4, r0
 800eea6:	f008 f999 	bl	80171dc <rcl_get_zero_initialized_subscription>
 800eeaa:	f10d 0810 	add.w	r8, sp, #16
 800eeae:	6020      	str	r0, [r4, #0]
 800eeb0:	4640      	mov	r0, r8
 800eeb2:	f008 fa41 	bl	8017338 <rcl_subscription_get_default_options>
 800eeb6:	490f      	ldr	r1, [pc, #60]	@ (800eef4 <rclc_subscription_init_default+0x64>)
 800eeb8:	2250      	movs	r2, #80	@ 0x50
 800eeba:	4640      	mov	r0, r8
 800eebc:	f00c fc43 	bl	801b746 <memcpy>
 800eec0:	f8cd 8000 	str.w	r8, [sp]
 800eec4:	463b      	mov	r3, r7
 800eec6:	4632      	mov	r2, r6
 800eec8:	4629      	mov	r1, r5
 800eeca:	4620      	mov	r0, r4
 800eecc:	f008 f98c 	bl	80171e8 <rcl_subscription_init>
 800eed0:	b910      	cbnz	r0, 800eed8 <rclc_subscription_init_default+0x48>
 800eed2:	b020      	add	sp, #128	@ 0x80
 800eed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed8:	9003      	str	r0, [sp, #12]
 800eeda:	f000 f961 	bl	800f1a0 <rcutils_reset_error>
 800eede:	9803      	ldr	r0, [sp, #12]
 800eee0:	b020      	add	sp, #128	@ 0x80
 800eee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee6:	200b      	movs	r0, #11
 800eee8:	b020      	add	sp, #128	@ 0x80
 800eeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeee:	200b      	movs	r0, #11
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	0801e178 	.word	0x0801e178

0800eef8 <rclc_timer_init_default>:
 800eef8:	b360      	cbz	r0, 800ef54 <rclc_timer_init_default+0x5c>
 800eefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eefe:	460e      	mov	r6, r1
 800ef00:	b08a      	sub	sp, #40	@ 0x28
 800ef02:	b319      	cbz	r1, 800ef4c <rclc_timer_init_default+0x54>
 800ef04:	4690      	mov	r8, r2
 800ef06:	461f      	mov	r7, r3
 800ef08:	4605      	mov	r5, r0
 800ef0a:	f008 fca1 	bl	8017850 <rcl_get_zero_initialized_timer>
 800ef0e:	68b4      	ldr	r4, [r6, #8]
 800ef10:	6028      	str	r0, [r5, #0]
 800ef12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef14:	f10d 0c0c 	add.w	ip, sp, #12
 800ef18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	f8cc 3000 	str.w	r3, [ip]
 800ef22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef24:	9302      	str	r3, [sp, #8]
 800ef26:	e9cd 8700 	strd	r8, r7, [sp]
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	4632      	mov	r2, r6
 800ef2e:	f106 010c 	add.w	r1, r6, #12
 800ef32:	f008 fc95 	bl	8017860 <rcl_timer_init>
 800ef36:	b910      	cbnz	r0, 800ef3e <rclc_timer_init_default+0x46>
 800ef38:	b00a      	add	sp, #40	@ 0x28
 800ef3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3e:	9009      	str	r0, [sp, #36]	@ 0x24
 800ef40:	f000 f92e 	bl	800f1a0 <rcutils_reset_error>
 800ef44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef46:	b00a      	add	sp, #40	@ 0x28
 800ef48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef4c:	200b      	movs	r0, #11
 800ef4e:	b00a      	add	sp, #40	@ 0x28
 800ef50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef54:	200b      	movs	r0, #11
 800ef56:	4770      	bx	lr

0800ef58 <__default_zero_allocate>:
 800ef58:	f00b be42 	b.w	801abe0 <calloc>

0800ef5c <__default_reallocate>:
 800ef5c:	f00b bfe0 	b.w	801af20 <realloc>

0800ef60 <__default_deallocate>:
 800ef60:	f00b bebc 	b.w	801acdc <free>

0800ef64 <__default_allocate>:
 800ef64:	f00b beb2 	b.w	801accc <malloc>

0800ef68 <rcutils_get_zero_initialized_allocator>:
 800ef68:	b510      	push	{r4, lr}
 800ef6a:	4c05      	ldr	r4, [pc, #20]	@ (800ef80 <rcutils_get_zero_initialized_allocator+0x18>)
 800ef6c:	4686      	mov	lr, r0
 800ef6e:	4684      	mov	ip, r0
 800ef70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	f8cc 3000 	str.w	r3, [ip]
 800ef7c:	4670      	mov	r0, lr
 800ef7e:	bd10      	pop	{r4, pc}
 800ef80:	0801e1c8 	.word	0x0801e1c8

0800ef84 <rcutils_set_default_allocator>:
 800ef84:	b1a8      	cbz	r0, 800efb2 <rcutils_set_default_allocator+0x2e>
 800ef86:	6802      	ldr	r2, [r0, #0]
 800ef88:	b1a2      	cbz	r2, 800efb4 <rcutils_set_default_allocator+0x30>
 800ef8a:	6841      	ldr	r1, [r0, #4]
 800ef8c:	b1a1      	cbz	r1, 800efb8 <rcutils_set_default_allocator+0x34>
 800ef8e:	b410      	push	{r4}
 800ef90:	68c4      	ldr	r4, [r0, #12]
 800ef92:	b164      	cbz	r4, 800efae <rcutils_set_default_allocator+0x2a>
 800ef94:	6880      	ldr	r0, [r0, #8]
 800ef96:	b138      	cbz	r0, 800efa8 <rcutils_set_default_allocator+0x24>
 800ef98:	4b08      	ldr	r3, [pc, #32]	@ (800efbc <rcutils_set_default_allocator+0x38>)
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800efa2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800efa6:	2001      	movs	r0, #1
 800efa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efac:	4770      	bx	lr
 800efae:	4620      	mov	r0, r4
 800efb0:	e7fa      	b.n	800efa8 <rcutils_set_default_allocator+0x24>
 800efb2:	4770      	bx	lr
 800efb4:	4610      	mov	r0, r2
 800efb6:	4770      	bx	lr
 800efb8:	4608      	mov	r0, r1
 800efba:	4770      	bx	lr
 800efbc:	200003a8 	.word	0x200003a8

0800efc0 <rcutils_get_default_allocator>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	4c05      	ldr	r4, [pc, #20]	@ (800efd8 <rcutils_get_default_allocator+0x18>)
 800efc4:	4686      	mov	lr, r0
 800efc6:	4684      	mov	ip, r0
 800efc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	f8cc 3000 	str.w	r3, [ip]
 800efd4:	4670      	mov	r0, lr
 800efd6:	bd10      	pop	{r4, pc}
 800efd8:	200003a8 	.word	0x200003a8

0800efdc <rcutils_allocator_is_valid>:
 800efdc:	b158      	cbz	r0, 800eff6 <rcutils_allocator_is_valid+0x1a>
 800efde:	6803      	ldr	r3, [r0, #0]
 800efe0:	b143      	cbz	r3, 800eff4 <rcutils_allocator_is_valid+0x18>
 800efe2:	6843      	ldr	r3, [r0, #4]
 800efe4:	b133      	cbz	r3, 800eff4 <rcutils_allocator_is_valid+0x18>
 800efe6:	68c3      	ldr	r3, [r0, #12]
 800efe8:	b123      	cbz	r3, 800eff4 <rcutils_allocator_is_valid+0x18>
 800efea:	6880      	ldr	r0, [r0, #8]
 800efec:	3800      	subs	r0, #0
 800efee:	bf18      	it	ne
 800eff0:	2001      	movne	r0, #1
 800eff2:	4770      	bx	lr
 800eff4:	4618      	mov	r0, r3
 800eff6:	4770      	bx	lr

0800eff8 <__atomic_load_8>:
 800eff8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800effc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800f000:	4a15      	ldr	r2, [pc, #84]	@ (800f058 <__atomic_load_8+0x60>)
 800f002:	4b16      	ldr	r3, [pc, #88]	@ (800f05c <__atomic_load_8+0x64>)
 800f004:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f008:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800f00c:	fb02 f101 	mul.w	r1, r2, r1
 800f010:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800f014:	fba3 2301 	umull	r2, r3, r3, r1
 800f018:	091b      	lsrs	r3, r3, #4
 800f01a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f01e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800f022:	b4d0      	push	{r4, r6, r7}
 800f024:	4c0e      	ldr	r4, [pc, #56]	@ (800f060 <__atomic_load_8+0x68>)
 800f026:	1ac9      	subs	r1, r1, r3
 800f028:	1862      	adds	r2, r4, r1
 800f02a:	f04f 0c01 	mov.w	ip, #1
 800f02e:	e8d2 3f4f 	ldrexb	r3, [r2]
 800f032:	e8c2 cf46 	strexb	r6, ip, [r2]
 800f036:	2e00      	cmp	r6, #0
 800f038:	d1f9      	bne.n	800f02e <__atomic_load_8+0x36>
 800f03a:	f3bf 8f5b 	dmb	ish
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	2b00      	cmp	r3, #0
 800f042:	d1f4      	bne.n	800f02e <__atomic_load_8+0x36>
 800f044:	e9d0 6700 	ldrd	r6, r7, [r0]
 800f048:	f3bf 8f5b 	dmb	ish
 800f04c:	5463      	strb	r3, [r4, r1]
 800f04e:	4630      	mov	r0, r6
 800f050:	4639      	mov	r1, r7
 800f052:	bcd0      	pop	{r4, r6, r7}
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	27d4eb2d 	.word	0x27d4eb2d
 800f05c:	b21642c9 	.word	0xb21642c9
 800f060:	20007788 	.word	0x20007788

0800f064 <__atomic_store_8>:
 800f064:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800f068:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800f06c:	b570      	push	{r4, r5, r6, lr}
 800f06e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f072:	4c14      	ldr	r4, [pc, #80]	@ (800f0c4 <__atomic_store_8+0x60>)
 800f074:	4d14      	ldr	r5, [pc, #80]	@ (800f0c8 <__atomic_store_8+0x64>)
 800f076:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800f07a:	fb04 f101 	mul.w	r1, r4, r1
 800f07e:	4c13      	ldr	r4, [pc, #76]	@ (800f0cc <__atomic_store_8+0x68>)
 800f080:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800f084:	fba4 4e01 	umull	r4, lr, r4, r1
 800f088:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800f08c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800f090:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800f094:	eba1 0e0e 	sub.w	lr, r1, lr
 800f098:	eb05 0c0e 	add.w	ip, r5, lr
 800f09c:	f04f 0401 	mov.w	r4, #1
 800f0a0:	e8dc 1f4f 	ldrexb	r1, [ip]
 800f0a4:	e8cc 4f46 	strexb	r6, r4, [ip]
 800f0a8:	2e00      	cmp	r6, #0
 800f0aa:	d1f9      	bne.n	800f0a0 <__atomic_store_8+0x3c>
 800f0ac:	f3bf 8f5b 	dmb	ish
 800f0b0:	b2c9      	uxtb	r1, r1
 800f0b2:	2900      	cmp	r1, #0
 800f0b4:	d1f4      	bne.n	800f0a0 <__atomic_store_8+0x3c>
 800f0b6:	e9c0 2300 	strd	r2, r3, [r0]
 800f0ba:	f3bf 8f5b 	dmb	ish
 800f0be:	f805 100e 	strb.w	r1, [r5, lr]
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}
 800f0c4:	27d4eb2d 	.word	0x27d4eb2d
 800f0c8:	20007788 	.word	0x20007788
 800f0cc:	b21642c9 	.word	0xb21642c9

0800f0d0 <__atomic_exchange_8>:
 800f0d0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800f0d4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800f0d8:	4916      	ldr	r1, [pc, #88]	@ (800f134 <__atomic_exchange_8+0x64>)
 800f0da:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800f0de:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800f0e2:	fb01 fc0c 	mul.w	ip, r1, ip
 800f0e6:	4914      	ldr	r1, [pc, #80]	@ (800f138 <__atomic_exchange_8+0x68>)
 800f0e8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	fba1 010c 	umull	r0, r1, r1, ip
 800f0f4:	0909      	lsrs	r1, r1, #4
 800f0f6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800f0fa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800f0fe:	4e0f      	ldr	r6, [pc, #60]	@ (800f13c <__atomic_exchange_8+0x6c>)
 800f100:	ebac 0c01 	sub.w	ip, ip, r1
 800f104:	eb06 010c 	add.w	r1, r6, ip
 800f108:	f04f 0e01 	mov.w	lr, #1
 800f10c:	e8d1 4f4f 	ldrexb	r4, [r1]
 800f110:	e8c1 ef40 	strexb	r0, lr, [r1]
 800f114:	2800      	cmp	r0, #0
 800f116:	d1f9      	bne.n	800f10c <__atomic_exchange_8+0x3c>
 800f118:	f3bf 8f5b 	dmb	ish
 800f11c:	b2e4      	uxtb	r4, r4
 800f11e:	2c00      	cmp	r4, #0
 800f120:	d1f4      	bne.n	800f10c <__atomic_exchange_8+0x3c>
 800f122:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f126:	e9c5 2300 	strd	r2, r3, [r5]
 800f12a:	f3bf 8f5b 	dmb	ish
 800f12e:	f806 400c 	strb.w	r4, [r6, ip]
 800f132:	bd70      	pop	{r4, r5, r6, pc}
 800f134:	27d4eb2d 	.word	0x27d4eb2d
 800f138:	b21642c9 	.word	0xb21642c9
 800f13c:	20007788 	.word	0x20007788

0800f140 <rcutils_get_env>:
 800f140:	b168      	cbz	r0, 800f15e <rcutils_get_env+0x1e>
 800f142:	b510      	push	{r4, lr}
 800f144:	460c      	mov	r4, r1
 800f146:	b129      	cbz	r1, 800f154 <rcutils_get_env+0x14>
 800f148:	f00b fd78 	bl	801ac3c <getenv>
 800f14c:	b120      	cbz	r0, 800f158 <rcutils_get_env+0x18>
 800f14e:	6020      	str	r0, [r4, #0]
 800f150:	2000      	movs	r0, #0
 800f152:	bd10      	pop	{r4, pc}
 800f154:	4803      	ldr	r0, [pc, #12]	@ (800f164 <rcutils_get_env+0x24>)
 800f156:	bd10      	pop	{r4, pc}
 800f158:	4b03      	ldr	r3, [pc, #12]	@ (800f168 <rcutils_get_env+0x28>)
 800f15a:	6023      	str	r3, [r4, #0]
 800f15c:	bd10      	pop	{r4, pc}
 800f15e:	4803      	ldr	r0, [pc, #12]	@ (800f16c <rcutils_get_env+0x2c>)
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	0801e1f8 	.word	0x0801e1f8
 800f168:	0801f490 	.word	0x0801f490
 800f16c:	0801e1dc 	.word	0x0801e1dc

0800f170 <rcutils_get_error_string>:
 800f170:	4b06      	ldr	r3, [pc, #24]	@ (800f18c <rcutils_get_error_string+0x1c>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	b13b      	cbz	r3, 800f186 <rcutils_get_error_string+0x16>
 800f176:	4b06      	ldr	r3, [pc, #24]	@ (800f190 <rcutils_get_error_string+0x20>)
 800f178:	781a      	ldrb	r2, [r3, #0]
 800f17a:	b90a      	cbnz	r2, 800f180 <rcutils_get_error_string+0x10>
 800f17c:	2201      	movs	r2, #1
 800f17e:	701a      	strb	r2, [r3, #0]
 800f180:	4b04      	ldr	r3, [pc, #16]	@ (800f194 <rcutils_get_error_string+0x24>)
 800f182:	7818      	ldrb	r0, [r3, #0]
 800f184:	4770      	bx	lr
 800f186:	4b04      	ldr	r3, [pc, #16]	@ (800f198 <rcutils_get_error_string+0x28>)
 800f188:	7818      	ldrb	r0, [r3, #0]
 800f18a:	4770      	bx	lr
 800f18c:	2000779f 	.word	0x2000779f
 800f190:	200077b1 	.word	0x200077b1
 800f194:	200077b0 	.word	0x200077b0
 800f198:	0801dcb4 	.word	0x0801dcb4
 800f19c:	00000000 	.word	0x00000000

0800f1a0 <rcutils_reset_error>:
 800f1a0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f1c0 <rcutils_reset_error+0x20>
 800f1a4:	4a08      	ldr	r2, [pc, #32]	@ (800f1c8 <rcutils_reset_error+0x28>)
 800f1a6:	4809      	ldr	r0, [pc, #36]	@ (800f1cc <rcutils_reset_error+0x2c>)
 800f1a8:	4909      	ldr	r1, [pc, #36]	@ (800f1d0 <rcutils_reset_error+0x30>)
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	8013      	strh	r3, [r2, #0]
 800f1ae:	ed82 7b02 	vstr	d7, [r2, #8]
 800f1b2:	4a08      	ldr	r2, [pc, #32]	@ (800f1d4 <rcutils_reset_error+0x34>)
 800f1b4:	7003      	strb	r3, [r0, #0]
 800f1b6:	700b      	strb	r3, [r1, #0]
 800f1b8:	7013      	strb	r3, [r2, #0]
 800f1ba:	4770      	bx	lr
 800f1bc:	f3af 8000 	nop.w
	...
 800f1c8:	200077a0 	.word	0x200077a0
 800f1cc:	200077b1 	.word	0x200077b1
 800f1d0:	200077b0 	.word	0x200077b0
 800f1d4:	2000779f 	.word	0x2000779f

0800f1d8 <rcutils_format_string_limit>:
 800f1d8:	b40f      	push	{r0, r1, r2, r3}
 800f1da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1dc:	b083      	sub	sp, #12
 800f1de:	ac08      	add	r4, sp, #32
 800f1e0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800f1e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f1e6:	b34e      	cbz	r6, 800f23c <rcutils_format_string_limit+0x64>
 800f1e8:	a808      	add	r0, sp, #32
 800f1ea:	f7ff fef7 	bl	800efdc <rcutils_allocator_is_valid>
 800f1ee:	b328      	cbz	r0, 800f23c <rcutils_format_string_limit+0x64>
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800f1f4:	4632      	mov	r2, r6
 800f1f6:	4608      	mov	r0, r1
 800f1f8:	e9cd 3300 	strd	r3, r3, [sp]
 800f1fc:	f000 f8f4 	bl	800f3e8 <rcutils_vsnprintf>
 800f200:	1c43      	adds	r3, r0, #1
 800f202:	4605      	mov	r5, r0
 800f204:	d01a      	beq.n	800f23c <rcutils_format_string_limit+0x64>
 800f206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f20a:	1c47      	adds	r7, r0, #1
 800f20c:	429f      	cmp	r7, r3
 800f20e:	bf84      	itt	hi
 800f210:	461f      	movhi	r7, r3
 800f212:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800f216:	4638      	mov	r0, r7
 800f218:	9b08      	ldr	r3, [sp, #32]
 800f21a:	4798      	blx	r3
 800f21c:	4604      	mov	r4, r0
 800f21e:	b168      	cbz	r0, 800f23c <rcutils_format_string_limit+0x64>
 800f220:	9b01      	ldr	r3, [sp, #4]
 800f222:	4632      	mov	r2, r6
 800f224:	4639      	mov	r1, r7
 800f226:	f000 f8df 	bl	800f3e8 <rcutils_vsnprintf>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	db02      	blt.n	800f234 <rcutils_format_string_limit+0x5c>
 800f22e:	2300      	movs	r3, #0
 800f230:	5563      	strb	r3, [r4, r5]
 800f232:	e004      	b.n	800f23e <rcutils_format_string_limit+0x66>
 800f234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f236:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f238:	4620      	mov	r0, r4
 800f23a:	4798      	blx	r3
 800f23c:	2400      	movs	r4, #0
 800f23e:	4620      	mov	r0, r4
 800f240:	b003      	add	sp, #12
 800f242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f246:	b004      	add	sp, #16
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop

0800f24c <rcutils_repl_str>:
 800f24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f250:	ed2d 8b02 	vpush	{d8}
 800f254:	b087      	sub	sp, #28
 800f256:	4680      	mov	r8, r0
 800f258:	4608      	mov	r0, r1
 800f25a:	f8cd 8004 	str.w	r8, [sp, #4]
 800f25e:	ee08 2a10 	vmov	s16, r2
 800f262:	468a      	mov	sl, r1
 800f264:	4699      	mov	r9, r3
 800f266:	f7f0 ffe5 	bl	8000234 <strlen>
 800f26a:	2600      	movs	r6, #0
 800f26c:	4647      	mov	r7, r8
 800f26e:	9002      	str	r0, [sp, #8]
 800f270:	46b3      	mov	fp, r6
 800f272:	2510      	movs	r5, #16
 800f274:	46b0      	mov	r8, r6
 800f276:	e01d      	b.n	800f2b4 <rcutils_repl_str+0x68>
 800f278:	f10b 0b01 	add.w	fp, fp, #1
 800f27c:	455e      	cmp	r6, fp
 800f27e:	d211      	bcs.n	800f2a4 <rcutils_repl_str+0x58>
 800f280:	442e      	add	r6, r5
 800f282:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f286:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f28a:	00b1      	lsls	r1, r6, #2
 800f28c:	4798      	blx	r3
 800f28e:	2800      	cmp	r0, #0
 800f290:	f000 8088 	beq.w	800f3a4 <rcutils_repl_str+0x158>
 800f294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f298:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800f29c:	4680      	mov	r8, r0
 800f29e:	bf28      	it	cs
 800f2a0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800f2a4:	9a01      	ldr	r2, [sp, #4]
 800f2a6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800f2aa:	1aa2      	subs	r2, r4, r2
 800f2ac:	f843 2c04 	str.w	r2, [r3, #-4]
 800f2b0:	9b02      	ldr	r3, [sp, #8]
 800f2b2:	18e7      	adds	r7, r4, r3
 800f2b4:	4651      	mov	r1, sl
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	f00c f9a3 	bl	801b602 <strstr>
 800f2bc:	4604      	mov	r4, r0
 800f2be:	4640      	mov	r0, r8
 800f2c0:	2c00      	cmp	r4, #0
 800f2c2:	d1d9      	bne.n	800f278 <rcutils_repl_str+0x2c>
 800f2c4:	46b8      	mov	r8, r7
 800f2c6:	4607      	mov	r7, r0
 800f2c8:	4640      	mov	r0, r8
 800f2ca:	f7f0 ffb3 	bl	8000234 <strlen>
 800f2ce:	9b01      	ldr	r3, [sp, #4]
 800f2d0:	eba8 0303 	sub.w	r3, r8, r3
 800f2d4:	181c      	adds	r4, r3, r0
 800f2d6:	9404      	str	r4, [sp, #16]
 800f2d8:	f1bb 0f00 	cmp.w	fp, #0
 800f2dc:	d04a      	beq.n	800f374 <rcutils_repl_str+0x128>
 800f2de:	ee18 0a10 	vmov	r0, s16
 800f2e2:	f7f0 ffa7 	bl	8000234 <strlen>
 800f2e6:	9b02      	ldr	r3, [sp, #8]
 800f2e8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f2ec:	1ac3      	subs	r3, r0, r3
 800f2ee:	fb0b 4303 	mla	r3, fp, r3, r4
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	9305      	str	r3, [sp, #20]
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	f8d9 3000 	ldr.w	r3, [r9]
 800f2fc:	1c50      	adds	r0, r2, #1
 800f2fe:	4798      	blx	r3
 800f300:	9003      	str	r0, [sp, #12]
 800f302:	2800      	cmp	r0, #0
 800f304:	d04f      	beq.n	800f3a6 <rcutils_repl_str+0x15a>
 800f306:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f30a:	683a      	ldr	r2, [r7, #0]
 800f30c:	4641      	mov	r1, r8
 800f30e:	f00c fa1a 	bl	801b746 <memcpy>
 800f312:	683d      	ldr	r5, [r7, #0]
 800f314:	9b03      	ldr	r3, [sp, #12]
 800f316:	9701      	str	r7, [sp, #4]
 800f318:	46ba      	mov	sl, r7
 800f31a:	441d      	add	r5, r3
 800f31c:	9f02      	ldr	r7, [sp, #8]
 800f31e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f322:	2401      	movs	r4, #1
 800f324:	46d1      	mov	r9, sl
 800f326:	ee18 aa10 	vmov	sl, s16
 800f32a:	e00a      	b.n	800f342 <rcutils_repl_str+0xf6>
 800f32c:	f8d9 5000 	ldr.w	r5, [r9]
 800f330:	1aaa      	subs	r2, r5, r2
 800f332:	1885      	adds	r5, r0, r2
 800f334:	f00c fa07 	bl	801b746 <memcpy>
 800f338:	45a3      	cmp	fp, r4
 800f33a:	f104 0201 	add.w	r2, r4, #1
 800f33e:	d935      	bls.n	800f3ac <rcutils_repl_str+0x160>
 800f340:	4614      	mov	r4, r2
 800f342:	4632      	mov	r2, r6
 800f344:	4651      	mov	r1, sl
 800f346:	4628      	mov	r0, r5
 800f348:	f00c f9fd 	bl	801b746 <memcpy>
 800f34c:	f859 2b04 	ldr.w	r2, [r9], #4
 800f350:	45a3      	cmp	fp, r4
 800f352:	443a      	add	r2, r7
 800f354:	eb05 0006 	add.w	r0, r5, r6
 800f358:	eb08 0102 	add.w	r1, r8, r2
 800f35c:	d1e6      	bne.n	800f32c <rcutils_repl_str+0xe0>
 800f35e:	9b04      	ldr	r3, [sp, #16]
 800f360:	1a9a      	subs	r2, r3, r2
 800f362:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f366:	f00c f9ee 	bl	801b746 <memcpy>
 800f36a:	9a03      	ldr	r2, [sp, #12]
 800f36c:	9905      	ldr	r1, [sp, #20]
 800f36e:	2300      	movs	r3, #0
 800f370:	5453      	strb	r3, [r2, r1]
 800f372:	e00b      	b.n	800f38c <rcutils_repl_str+0x140>
 800f374:	4620      	mov	r0, r4
 800f376:	f8d9 3000 	ldr.w	r3, [r9]
 800f37a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f37e:	3001      	adds	r0, #1
 800f380:	4798      	blx	r3
 800f382:	9003      	str	r0, [sp, #12]
 800f384:	b110      	cbz	r0, 800f38c <rcutils_repl_str+0x140>
 800f386:	9901      	ldr	r1, [sp, #4]
 800f388:	f00c f9d5 	bl	801b736 <strcpy>
 800f38c:	4638      	mov	r0, r7
 800f38e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f392:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f396:	4798      	blx	r3
 800f398:	9803      	ldr	r0, [sp, #12]
 800f39a:	b007      	add	sp, #28
 800f39c:	ecbd 8b02 	vpop	{d8}
 800f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a4:	4647      	mov	r7, r8
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	9303      	str	r3, [sp, #12]
 800f3aa:	e7ef      	b.n	800f38c <rcutils_repl_str+0x140>
 800f3ac:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f3b0:	e7db      	b.n	800f36a <rcutils_repl_str+0x11e>
 800f3b2:	bf00      	nop

0800f3b4 <rcutils_snprintf>:
 800f3b4:	b40c      	push	{r2, r3}
 800f3b6:	b530      	push	{r4, r5, lr}
 800f3b8:	b083      	sub	sp, #12
 800f3ba:	ab06      	add	r3, sp, #24
 800f3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c0:	9301      	str	r3, [sp, #4]
 800f3c2:	b152      	cbz	r2, 800f3da <rcutils_snprintf+0x26>
 800f3c4:	b138      	cbz	r0, 800f3d6 <rcutils_snprintf+0x22>
 800f3c6:	b141      	cbz	r1, 800f3da <rcutils_snprintf+0x26>
 800f3c8:	f00c f828 	bl	801b41c <vsniprintf>
 800f3cc:	b003      	add	sp, #12
 800f3ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3d2:	b002      	add	sp, #8
 800f3d4:	4770      	bx	lr
 800f3d6:	2900      	cmp	r1, #0
 800f3d8:	d0f6      	beq.n	800f3c8 <rcutils_snprintf+0x14>
 800f3da:	f00c f97f 	bl	801b6dc <__errno>
 800f3de:	2316      	movs	r3, #22
 800f3e0:	6003      	str	r3, [r0, #0]
 800f3e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3e6:	e7f1      	b.n	800f3cc <rcutils_snprintf+0x18>

0800f3e8 <rcutils_vsnprintf>:
 800f3e8:	b570      	push	{r4, r5, r6, lr}
 800f3ea:	b13a      	cbz	r2, 800f3fc <rcutils_vsnprintf+0x14>
 800f3ec:	b120      	cbz	r0, 800f3f8 <rcutils_vsnprintf+0x10>
 800f3ee:	b129      	cbz	r1, 800f3fc <rcutils_vsnprintf+0x14>
 800f3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3f4:	f00c b812 	b.w	801b41c <vsniprintf>
 800f3f8:	2900      	cmp	r1, #0
 800f3fa:	d0f9      	beq.n	800f3f0 <rcutils_vsnprintf+0x8>
 800f3fc:	f00c f96e 	bl	801b6dc <__errno>
 800f400:	2316      	movs	r3, #22
 800f402:	6003      	str	r3, [r0, #0]
 800f404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f408:	bd70      	pop	{r4, r5, r6, pc}
 800f40a:	bf00      	nop

0800f40c <rcutils_strdup>:
 800f40c:	b084      	sub	sp, #16
 800f40e:	b570      	push	{r4, r5, r6, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	ac07      	add	r4, sp, #28
 800f414:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f418:	4605      	mov	r5, r0
 800f41a:	b1b0      	cbz	r0, 800f44a <rcutils_strdup+0x3e>
 800f41c:	f7f0 ff0a 	bl	8000234 <strlen>
 800f420:	1c42      	adds	r2, r0, #1
 800f422:	9b07      	ldr	r3, [sp, #28]
 800f424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f426:	9201      	str	r2, [sp, #4]
 800f428:	4606      	mov	r6, r0
 800f42a:	4610      	mov	r0, r2
 800f42c:	4798      	blx	r3
 800f42e:	4604      	mov	r4, r0
 800f430:	b128      	cbz	r0, 800f43e <rcutils_strdup+0x32>
 800f432:	9a01      	ldr	r2, [sp, #4]
 800f434:	4629      	mov	r1, r5
 800f436:	f00c f986 	bl	801b746 <memcpy>
 800f43a:	2300      	movs	r3, #0
 800f43c:	55a3      	strb	r3, [r4, r6]
 800f43e:	4620      	mov	r0, r4
 800f440:	b002      	add	sp, #8
 800f442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f446:	b004      	add	sp, #16
 800f448:	4770      	bx	lr
 800f44a:	4604      	mov	r4, r0
 800f44c:	e7f7      	b.n	800f43e <rcutils_strdup+0x32>
 800f44e:	bf00      	nop

0800f450 <rcutils_strndup>:
 800f450:	b082      	sub	sp, #8
 800f452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f454:	ac06      	add	r4, sp, #24
 800f456:	e884 000c 	stmia.w	r4, {r2, r3}
 800f45a:	4605      	mov	r5, r0
 800f45c:	b188      	cbz	r0, 800f482 <rcutils_strndup+0x32>
 800f45e:	1c4f      	adds	r7, r1, #1
 800f460:	460e      	mov	r6, r1
 800f462:	4638      	mov	r0, r7
 800f464:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f466:	4790      	blx	r2
 800f468:	4604      	mov	r4, r0
 800f46a:	b128      	cbz	r0, 800f478 <rcutils_strndup+0x28>
 800f46c:	463a      	mov	r2, r7
 800f46e:	4629      	mov	r1, r5
 800f470:	f00c f969 	bl	801b746 <memcpy>
 800f474:	2300      	movs	r3, #0
 800f476:	55a3      	strb	r3, [r4, r6]
 800f478:	4620      	mov	r0, r4
 800f47a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f47e:	b002      	add	sp, #8
 800f480:	4770      	bx	lr
 800f482:	4604      	mov	r4, r0
 800f484:	e7f8      	b.n	800f478 <rcutils_strndup+0x28>
 800f486:	bf00      	nop

0800f488 <rcutils_get_zero_initialized_string_map>:
 800f488:	4b01      	ldr	r3, [pc, #4]	@ (800f490 <rcutils_get_zero_initialized_string_map+0x8>)
 800f48a:	2000      	movs	r0, #0
 800f48c:	6018      	str	r0, [r3, #0]
 800f48e:	4770      	bx	lr
 800f490:	200077b4 	.word	0x200077b4

0800f494 <rcutils_string_map_reserve>:
 800f494:	2800      	cmp	r0, #0
 800f496:	d05f      	beq.n	800f558 <rcutils_string_map_reserve+0xc4>
 800f498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f49c:	460c      	mov	r4, r1
 800f49e:	6801      	ldr	r1, [r0, #0]
 800f4a0:	b082      	sub	sp, #8
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	b129      	cbz	r1, 800f4b2 <rcutils_string_map_reserve+0x1e>
 800f4a6:	68cb      	ldr	r3, [r1, #12]
 800f4a8:	42a3      	cmp	r3, r4
 800f4aa:	d906      	bls.n	800f4ba <rcutils_string_map_reserve+0x26>
 800f4ac:	461c      	mov	r4, r3
 800f4ae:	2900      	cmp	r1, #0
 800f4b0:	d1f9      	bne.n	800f4a6 <rcutils_string_map_reserve+0x12>
 800f4b2:	201f      	movs	r0, #31
 800f4b4:	b002      	add	sp, #8
 800f4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ba:	688b      	ldr	r3, [r1, #8]
 800f4bc:	42a3      	cmp	r3, r4
 800f4be:	d047      	beq.n	800f550 <rcutils_string_map_reserve+0xbc>
 800f4c0:	6a0e      	ldr	r6, [r1, #32]
 800f4c2:	2c00      	cmp	r4, #0
 800f4c4:	d034      	beq.n	800f530 <rcutils_string_map_reserve+0x9c>
 800f4c6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f4ca:	d243      	bcs.n	800f554 <rcutils_string_map_reserve+0xc0>
 800f4cc:	00a7      	lsls	r7, r4, #2
 800f4ce:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800f4d2:	6808      	ldr	r0, [r1, #0]
 800f4d4:	4632      	mov	r2, r6
 800f4d6:	4639      	mov	r1, r7
 800f4d8:	47c0      	blx	r8
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d03a      	beq.n	800f554 <rcutils_string_map_reserve+0xc0>
 800f4de:	682b      	ldr	r3, [r5, #0]
 800f4e0:	4632      	mov	r2, r6
 800f4e2:	6018      	str	r0, [r3, #0]
 800f4e4:	4639      	mov	r1, r7
 800f4e6:	6858      	ldr	r0, [r3, #4]
 800f4e8:	47c0      	blx	r8
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d032      	beq.n	800f554 <rcutils_string_map_reserve+0xc0>
 800f4ee:	682d      	ldr	r5, [r5, #0]
 800f4f0:	68ab      	ldr	r3, [r5, #8]
 800f4f2:	6068      	str	r0, [r5, #4]
 800f4f4:	42a3      	cmp	r3, r4
 800f4f6:	d226      	bcs.n	800f546 <rcutils_string_map_reserve+0xb2>
 800f4f8:	682a      	ldr	r2, [r5, #0]
 800f4fa:	eb00 0c07 	add.w	ip, r0, r7
 800f4fe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800f502:	45e6      	cmp	lr, ip
 800f504:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800f508:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f50c:	d203      	bcs.n	800f516 <rcutils_string_map_reserve+0x82>
 800f50e:	eb02 0c07 	add.w	ip, r2, r7
 800f512:	4566      	cmp	r6, ip
 800f514:	d322      	bcc.n	800f55c <rcutils_string_map_reserve+0xc8>
 800f516:	1ae3      	subs	r3, r4, r3
 800f518:	009a      	lsls	r2, r3, #2
 800f51a:	4670      	mov	r0, lr
 800f51c:	2100      	movs	r1, #0
 800f51e:	9201      	str	r2, [sp, #4]
 800f520:	f00c f848 	bl	801b5b4 <memset>
 800f524:	9a01      	ldr	r2, [sp, #4]
 800f526:	2100      	movs	r1, #0
 800f528:	4630      	mov	r0, r6
 800f52a:	f00c f843 	bl	801b5b4 <memset>
 800f52e:	e00a      	b.n	800f546 <rcutils_string_map_reserve+0xb2>
 800f530:	694f      	ldr	r7, [r1, #20]
 800f532:	6808      	ldr	r0, [r1, #0]
 800f534:	4631      	mov	r1, r6
 800f536:	47b8      	blx	r7
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	4631      	mov	r1, r6
 800f53c:	6858      	ldr	r0, [r3, #4]
 800f53e:	601c      	str	r4, [r3, #0]
 800f540:	47b8      	blx	r7
 800f542:	682d      	ldr	r5, [r5, #0]
 800f544:	606c      	str	r4, [r5, #4]
 800f546:	2000      	movs	r0, #0
 800f548:	60ac      	str	r4, [r5, #8]
 800f54a:	b002      	add	sp, #8
 800f54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f550:	2000      	movs	r0, #0
 800f552:	e7af      	b.n	800f4b4 <rcutils_string_map_reserve+0x20>
 800f554:	200a      	movs	r0, #10
 800f556:	e7ad      	b.n	800f4b4 <rcutils_string_map_reserve+0x20>
 800f558:	200b      	movs	r0, #11
 800f55a:	4770      	bx	lr
 800f55c:	1f0b      	subs	r3, r1, #4
 800f55e:	4418      	add	r0, r3
 800f560:	4413      	add	r3, r2
 800f562:	3a04      	subs	r2, #4
 800f564:	4417      	add	r7, r2
 800f566:	2200      	movs	r2, #0
 800f568:	f843 2f04 	str.w	r2, [r3, #4]!
 800f56c:	42bb      	cmp	r3, r7
 800f56e:	f840 2f04 	str.w	r2, [r0, #4]!
 800f572:	d1f9      	bne.n	800f568 <rcutils_string_map_reserve+0xd4>
 800f574:	e7e7      	b.n	800f546 <rcutils_string_map_reserve+0xb2>
 800f576:	bf00      	nop

0800f578 <rcutils_string_map_init>:
 800f578:	b082      	sub	sp, #8
 800f57a:	b570      	push	{r4, r5, r6, lr}
 800f57c:	ac04      	add	r4, sp, #16
 800f57e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f582:	b380      	cbz	r0, 800f5e6 <rcutils_string_map_init+0x6e>
 800f584:	6806      	ldr	r6, [r0, #0]
 800f586:	4604      	mov	r4, r0
 800f588:	b12e      	cbz	r6, 800f596 <rcutils_string_map_init+0x1e>
 800f58a:	251e      	movs	r5, #30
 800f58c:	4628      	mov	r0, r5
 800f58e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f592:	b002      	add	sp, #8
 800f594:	4770      	bx	lr
 800f596:	a804      	add	r0, sp, #16
 800f598:	460d      	mov	r5, r1
 800f59a:	f7ff fd1f 	bl	800efdc <rcutils_allocator_is_valid>
 800f59e:	b310      	cbz	r0, 800f5e6 <rcutils_string_map_init+0x6e>
 800f5a0:	9b04      	ldr	r3, [sp, #16]
 800f5a2:	9908      	ldr	r1, [sp, #32]
 800f5a4:	2024      	movs	r0, #36	@ 0x24
 800f5a6:	4798      	blx	r3
 800f5a8:	6020      	str	r0, [r4, #0]
 800f5aa:	b310      	cbz	r0, 800f5f2 <rcutils_string_map_init+0x7a>
 800f5ac:	f10d 0e10 	add.w	lr, sp, #16
 800f5b0:	e9c0 6600 	strd	r6, r6, [r0]
 800f5b4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800f5b8:	f100 0c10 	add.w	ip, r0, #16
 800f5bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5c4:	f8de 3000 	ldr.w	r3, [lr]
 800f5c8:	f8cc 3000 	str.w	r3, [ip]
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f7ff ff60 	bl	800f494 <rcutils_string_map_reserve>
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d0d8      	beq.n	800f58c <rcutils_string_map_init+0x14>
 800f5da:	9b05      	ldr	r3, [sp, #20]
 800f5dc:	9908      	ldr	r1, [sp, #32]
 800f5de:	6820      	ldr	r0, [r4, #0]
 800f5e0:	4798      	blx	r3
 800f5e2:	6026      	str	r6, [r4, #0]
 800f5e4:	e7d2      	b.n	800f58c <rcutils_string_map_init+0x14>
 800f5e6:	250b      	movs	r5, #11
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5ee:	b002      	add	sp, #8
 800f5f0:	4770      	bx	lr
 800f5f2:	250a      	movs	r5, #10
 800f5f4:	e7ca      	b.n	800f58c <rcutils_string_map_init+0x14>
 800f5f6:	bf00      	nop

0800f5f8 <rcutils_string_map_fini>:
 800f5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d03a      	beq.n	800f678 <rcutils_string_map_fini+0x80>
 800f602:	6804      	ldr	r4, [r0, #0]
 800f604:	4606      	mov	r6, r0
 800f606:	2c00      	cmp	r4, #0
 800f608:	d032      	beq.n	800f670 <rcutils_string_map_fini+0x78>
 800f60a:	68a3      	ldr	r3, [r4, #8]
 800f60c:	b32b      	cbz	r3, 800f65a <rcutils_string_map_fini+0x62>
 800f60e:	2500      	movs	r5, #0
 800f610:	6822      	ldr	r2, [r4, #0]
 800f612:	462f      	mov	r7, r5
 800f614:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f618:	b1e0      	cbz	r0, 800f654 <rcutils_string_map_fini+0x5c>
 800f61a:	6a21      	ldr	r1, [r4, #32]
 800f61c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800f620:	9101      	str	r1, [sp, #4]
 800f622:	47c0      	blx	r8
 800f624:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f628:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800f62c:	9901      	ldr	r1, [sp, #4]
 800f62e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f632:	47c0      	blx	r8
 800f634:	68e3      	ldr	r3, [r4, #12]
 800f636:	6862      	ldr	r2, [r4, #4]
 800f638:	3b01      	subs	r3, #1
 800f63a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800f63e:	60e3      	str	r3, [r4, #12]
 800f640:	6834      	ldr	r4, [r6, #0]
 800f642:	68a3      	ldr	r3, [r4, #8]
 800f644:	3501      	adds	r5, #1
 800f646:	429d      	cmp	r5, r3
 800f648:	d207      	bcs.n	800f65a <rcutils_string_map_fini+0x62>
 800f64a:	6822      	ldr	r2, [r4, #0]
 800f64c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f650:	2800      	cmp	r0, #0
 800f652:	d1e2      	bne.n	800f61a <rcutils_string_map_fini+0x22>
 800f654:	3501      	adds	r5, #1
 800f656:	429d      	cmp	r5, r3
 800f658:	d3dc      	bcc.n	800f614 <rcutils_string_map_fini+0x1c>
 800f65a:	2100      	movs	r1, #0
 800f65c:	4630      	mov	r0, r6
 800f65e:	f7ff ff19 	bl	800f494 <rcutils_string_map_reserve>
 800f662:	4604      	mov	r4, r0
 800f664:	b920      	cbnz	r0, 800f670 <rcutils_string_map_fini+0x78>
 800f666:	6830      	ldr	r0, [r6, #0]
 800f668:	6943      	ldr	r3, [r0, #20]
 800f66a:	6a01      	ldr	r1, [r0, #32]
 800f66c:	4798      	blx	r3
 800f66e:	6034      	str	r4, [r6, #0]
 800f670:	4620      	mov	r0, r4
 800f672:	b002      	add	sp, #8
 800f674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f678:	240b      	movs	r4, #11
 800f67a:	4620      	mov	r0, r4
 800f67c:	b002      	add	sp, #8
 800f67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f682:	bf00      	nop

0800f684 <rcutils_string_map_getn>:
 800f684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f688:	b300      	cbz	r0, 800f6cc <rcutils_string_map_getn+0x48>
 800f68a:	6807      	ldr	r7, [r0, #0]
 800f68c:	b1ff      	cbz	r7, 800f6ce <rcutils_string_map_getn+0x4a>
 800f68e:	4688      	mov	r8, r1
 800f690:	b1e1      	cbz	r1, 800f6cc <rcutils_string_map_getn+0x48>
 800f692:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800f696:	683e      	ldr	r6, [r7, #0]
 800f698:	f1ba 0f00 	cmp.w	sl, #0
 800f69c:	d016      	beq.n	800f6cc <rcutils_string_map_getn+0x48>
 800f69e:	4691      	mov	r9, r2
 800f6a0:	3e04      	subs	r6, #4
 800f6a2:	2400      	movs	r4, #0
 800f6a4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800f6a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	3401      	adds	r4, #1
 800f6b0:	b155      	cbz	r5, 800f6c8 <rcutils_string_map_getn+0x44>
 800f6b2:	f7f0 fdbf 	bl	8000234 <strlen>
 800f6b6:	4548      	cmp	r0, r9
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	bf38      	it	cc
 800f6be:	464a      	movcc	r2, r9
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	f00b ff8c 	bl	801b5de <strncmp>
 800f6c6:	b128      	cbz	r0, 800f6d4 <rcutils_string_map_getn+0x50>
 800f6c8:	45a2      	cmp	sl, r4
 800f6ca:	d1eb      	bne.n	800f6a4 <rcutils_string_map_getn+0x20>
 800f6cc:	2700      	movs	r7, #0
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f853 700b 	ldr.w	r7, [r3, fp]
 800f6da:	4638      	mov	r0, r7
 800f6dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6e0 <rcutils_system_time_now>:
 800f6e0:	b308      	cbz	r0, 800f726 <rcutils_system_time_now+0x46>
 800f6e2:	b570      	push	{r4, r5, r6, lr}
 800f6e4:	b084      	sub	sp, #16
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	4669      	mov	r1, sp
 800f6ea:	2001      	movs	r0, #1
 800f6ec:	f7f3 fe78 	bl	80033e0 <clock_gettime>
 800f6f0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f6f4:	2d00      	cmp	r5, #0
 800f6f6:	db13      	blt.n	800f720 <rcutils_system_time_now+0x40>
 800f6f8:	9902      	ldr	r1, [sp, #8]
 800f6fa:	2900      	cmp	r1, #0
 800f6fc:	db0d      	blt.n	800f71a <rcutils_system_time_now+0x3a>
 800f6fe:	4e0b      	ldr	r6, [pc, #44]	@ (800f72c <rcutils_system_time_now+0x4c>)
 800f700:	fba3 3206 	umull	r3, r2, r3, r6
 800f704:	185b      	adds	r3, r3, r1
 800f706:	fb06 2205 	mla	r2, r6, r5, r2
 800f70a:	f04f 0000 	mov.w	r0, #0
 800f70e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f712:	e9c4 3200 	strd	r3, r2, [r4]
 800f716:	b004      	add	sp, #16
 800f718:	bd70      	pop	{r4, r5, r6, pc}
 800f71a:	ea53 0205 	orrs.w	r2, r3, r5
 800f71e:	d1ee      	bne.n	800f6fe <rcutils_system_time_now+0x1e>
 800f720:	2002      	movs	r0, #2
 800f722:	b004      	add	sp, #16
 800f724:	bd70      	pop	{r4, r5, r6, pc}
 800f726:	200b      	movs	r0, #11
 800f728:	4770      	bx	lr
 800f72a:	bf00      	nop
 800f72c:	3b9aca00 	.word	0x3b9aca00

0800f730 <rcutils_steady_time_now>:
 800f730:	b308      	cbz	r0, 800f776 <rcutils_steady_time_now+0x46>
 800f732:	b570      	push	{r4, r5, r6, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	4604      	mov	r4, r0
 800f738:	4669      	mov	r1, sp
 800f73a:	2000      	movs	r0, #0
 800f73c:	f7f3 fe50 	bl	80033e0 <clock_gettime>
 800f740:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f744:	2d00      	cmp	r5, #0
 800f746:	db13      	blt.n	800f770 <rcutils_steady_time_now+0x40>
 800f748:	9902      	ldr	r1, [sp, #8]
 800f74a:	2900      	cmp	r1, #0
 800f74c:	db0d      	blt.n	800f76a <rcutils_steady_time_now+0x3a>
 800f74e:	4e0b      	ldr	r6, [pc, #44]	@ (800f77c <rcutils_steady_time_now+0x4c>)
 800f750:	fba3 3206 	umull	r3, r2, r3, r6
 800f754:	185b      	adds	r3, r3, r1
 800f756:	fb06 2205 	mla	r2, r6, r5, r2
 800f75a:	f04f 0000 	mov.w	r0, #0
 800f75e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f762:	e9c4 3200 	strd	r3, r2, [r4]
 800f766:	b004      	add	sp, #16
 800f768:	bd70      	pop	{r4, r5, r6, pc}
 800f76a:	ea53 0205 	orrs.w	r2, r3, r5
 800f76e:	d1ee      	bne.n	800f74e <rcutils_steady_time_now+0x1e>
 800f770:	2002      	movs	r0, #2
 800f772:	b004      	add	sp, #16
 800f774:	bd70      	pop	{r4, r5, r6, pc}
 800f776:	200b      	movs	r0, #11
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop
 800f77c:	3b9aca00 	.word	0x3b9aca00

0800f780 <rmw_get_zero_initialized_init_options>:
 800f780:	b510      	push	{r4, lr}
 800f782:	2238      	movs	r2, #56	@ 0x38
 800f784:	4604      	mov	r4, r0
 800f786:	2100      	movs	r1, #0
 800f788:	f00b ff14 	bl	801b5b4 <memset>
 800f78c:	f104 0010 	add.w	r0, r4, #16
 800f790:	f000 f80a 	bl	800f7a8 <rmw_get_default_security_options>
 800f794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f798:	60e3      	str	r3, [r4, #12]
 800f79a:	4620      	mov	r0, r4
 800f79c:	bd10      	pop	{r4, pc}
 800f79e:	bf00      	nop

0800f7a0 <rmw_get_default_publisher_options>:
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	6002      	str	r2, [r0, #0]
 800f7a4:	7102      	strb	r2, [r0, #4]
 800f7a6:	4770      	bx	lr

0800f7a8 <rmw_get_default_security_options>:
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	7002      	strb	r2, [r0, #0]
 800f7ac:	6042      	str	r2, [r0, #4]
 800f7ae:	4770      	bx	lr

0800f7b0 <rmw_validate_full_topic_name>:
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d057      	beq.n	800f864 <rmw_validate_full_topic_name+0xb4>
 800f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b8:	460d      	mov	r5, r1
 800f7ba:	2900      	cmp	r1, #0
 800f7bc:	d054      	beq.n	800f868 <rmw_validate_full_topic_name+0xb8>
 800f7be:	4616      	mov	r6, r2
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	f7f0 fd37 	bl	8000234 <strlen>
 800f7c6:	b148      	cbz	r0, 800f7dc <rmw_validate_full_topic_name+0x2c>
 800f7c8:	7823      	ldrb	r3, [r4, #0]
 800f7ca:	2b2f      	cmp	r3, #47	@ 0x2f
 800f7cc:	d00d      	beq.n	800f7ea <rmw_validate_full_topic_name+0x3a>
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	602b      	str	r3, [r5, #0]
 800f7d2:	b13e      	cbz	r6, 800f7e4 <rmw_validate_full_topic_name+0x34>
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	6030      	str	r0, [r6, #0]
 800f7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7dc:	2301      	movs	r3, #1
 800f7de:	602b      	str	r3, [r5, #0]
 800f7e0:	2e00      	cmp	r6, #0
 800f7e2:	d1f7      	bne.n	800f7d4 <rmw_validate_full_topic_name+0x24>
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ea:	1e43      	subs	r3, r0, #1
 800f7ec:	5ce2      	ldrb	r2, [r4, r3]
 800f7ee:	2a2f      	cmp	r2, #47	@ 0x2f
 800f7f0:	d03c      	beq.n	800f86c <rmw_validate_full_topic_name+0xbc>
 800f7f2:	1e63      	subs	r3, r4, #1
 800f7f4:	eb03 0800 	add.w	r8, r3, r0
 800f7f8:	f1c4 0e01 	rsb	lr, r4, #1
 800f7fc:	eb0e 0703 	add.w	r7, lr, r3
 800f800:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f804:	f021 0220 	bic.w	r2, r1, #32
 800f808:	3a41      	subs	r2, #65	@ 0x41
 800f80a:	2a19      	cmp	r2, #25
 800f80c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800f810:	d90b      	bls.n	800f82a <rmw_validate_full_topic_name+0x7a>
 800f812:	295f      	cmp	r1, #95	@ 0x5f
 800f814:	d009      	beq.n	800f82a <rmw_validate_full_topic_name+0x7a>
 800f816:	f1bc 0f0a 	cmp.w	ip, #10
 800f81a:	d906      	bls.n	800f82a <rmw_validate_full_topic_name+0x7a>
 800f81c:	2304      	movs	r3, #4
 800f81e:	602b      	str	r3, [r5, #0]
 800f820:	2e00      	cmp	r6, #0
 800f822:	d0df      	beq.n	800f7e4 <rmw_validate_full_topic_name+0x34>
 800f824:	6037      	str	r7, [r6, #0]
 800f826:	2000      	movs	r0, #0
 800f828:	e7d6      	b.n	800f7d8 <rmw_validate_full_topic_name+0x28>
 800f82a:	4543      	cmp	r3, r8
 800f82c:	d1e6      	bne.n	800f7fc <rmw_validate_full_topic_name+0x4c>
 800f82e:	4f1a      	ldr	r7, [pc, #104]	@ (800f898 <rmw_validate_full_topic_name+0xe8>)
 800f830:	2301      	movs	r3, #1
 800f832:	e004      	b.n	800f83e <rmw_validate_full_topic_name+0x8e>
 800f834:	4298      	cmp	r0, r3
 800f836:	f104 0401 	add.w	r4, r4, #1
 800f83a:	d91c      	bls.n	800f876 <rmw_validate_full_topic_name+0xc6>
 800f83c:	4613      	mov	r3, r2
 800f83e:	4298      	cmp	r0, r3
 800f840:	f103 0201 	add.w	r2, r3, #1
 800f844:	d0f6      	beq.n	800f834 <rmw_validate_full_topic_name+0x84>
 800f846:	7821      	ldrb	r1, [r4, #0]
 800f848:	292f      	cmp	r1, #47	@ 0x2f
 800f84a:	d1f3      	bne.n	800f834 <rmw_validate_full_topic_name+0x84>
 800f84c:	7861      	ldrb	r1, [r4, #1]
 800f84e:	292f      	cmp	r1, #47	@ 0x2f
 800f850:	d01c      	beq.n	800f88c <rmw_validate_full_topic_name+0xdc>
 800f852:	5dc9      	ldrb	r1, [r1, r7]
 800f854:	0749      	lsls	r1, r1, #29
 800f856:	d5ed      	bpl.n	800f834 <rmw_validate_full_topic_name+0x84>
 800f858:	2206      	movs	r2, #6
 800f85a:	602a      	str	r2, [r5, #0]
 800f85c:	2e00      	cmp	r6, #0
 800f85e:	d0c1      	beq.n	800f7e4 <rmw_validate_full_topic_name+0x34>
 800f860:	6033      	str	r3, [r6, #0]
 800f862:	e7bf      	b.n	800f7e4 <rmw_validate_full_topic_name+0x34>
 800f864:	200b      	movs	r0, #11
 800f866:	4770      	bx	lr
 800f868:	200b      	movs	r0, #11
 800f86a:	e7b5      	b.n	800f7d8 <rmw_validate_full_topic_name+0x28>
 800f86c:	2203      	movs	r2, #3
 800f86e:	602a      	str	r2, [r5, #0]
 800f870:	2e00      	cmp	r6, #0
 800f872:	d1f5      	bne.n	800f860 <rmw_validate_full_topic_name+0xb0>
 800f874:	e7b6      	b.n	800f7e4 <rmw_validate_full_topic_name+0x34>
 800f876:	28f7      	cmp	r0, #247	@ 0xf7
 800f878:	d802      	bhi.n	800f880 <rmw_validate_full_topic_name+0xd0>
 800f87a:	2000      	movs	r0, #0
 800f87c:	6028      	str	r0, [r5, #0]
 800f87e:	e7ab      	b.n	800f7d8 <rmw_validate_full_topic_name+0x28>
 800f880:	2307      	movs	r3, #7
 800f882:	602b      	str	r3, [r5, #0]
 800f884:	2e00      	cmp	r6, #0
 800f886:	d0ad      	beq.n	800f7e4 <rmw_validate_full_topic_name+0x34>
 800f888:	23f6      	movs	r3, #246	@ 0xf6
 800f88a:	e7e9      	b.n	800f860 <rmw_validate_full_topic_name+0xb0>
 800f88c:	2205      	movs	r2, #5
 800f88e:	602a      	str	r2, [r5, #0]
 800f890:	2e00      	cmp	r6, #0
 800f892:	d1e5      	bne.n	800f860 <rmw_validate_full_topic_name+0xb0>
 800f894:	e7a6      	b.n	800f7e4 <rmw_validate_full_topic_name+0x34>
 800f896:	bf00      	nop
 800f898:	0801f5a6 	.word	0x0801f5a6

0800f89c <rmw_validate_namespace_with_size>:
 800f89c:	b340      	cbz	r0, 800f8f0 <rmw_validate_namespace_with_size+0x54>
 800f89e:	b570      	push	{r4, r5, r6, lr}
 800f8a0:	4614      	mov	r4, r2
 800f8a2:	b0c2      	sub	sp, #264	@ 0x108
 800f8a4:	b332      	cbz	r2, 800f8f4 <rmw_validate_namespace_with_size+0x58>
 800f8a6:	2901      	cmp	r1, #1
 800f8a8:	460d      	mov	r5, r1
 800f8aa:	461e      	mov	r6, r3
 800f8ac:	d102      	bne.n	800f8b4 <rmw_validate_namespace_with_size+0x18>
 800f8ae:	7803      	ldrb	r3, [r0, #0]
 800f8b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f8b2:	d012      	beq.n	800f8da <rmw_validate_namespace_with_size+0x3e>
 800f8b4:	aa01      	add	r2, sp, #4
 800f8b6:	4669      	mov	r1, sp
 800f8b8:	f7ff ff7a 	bl	800f7b0 <rmw_validate_full_topic_name>
 800f8bc:	b978      	cbnz	r0, 800f8de <rmw_validate_namespace_with_size+0x42>
 800f8be:	9b00      	ldr	r3, [sp, #0]
 800f8c0:	b14b      	cbz	r3, 800f8d6 <rmw_validate_namespace_with_size+0x3a>
 800f8c2:	2b07      	cmp	r3, #7
 800f8c4:	d007      	beq.n	800f8d6 <rmw_validate_namespace_with_size+0x3a>
 800f8c6:	1e5a      	subs	r2, r3, #1
 800f8c8:	2a05      	cmp	r2, #5
 800f8ca:	d82b      	bhi.n	800f924 <rmw_validate_namespace_with_size+0x88>
 800f8cc:	e8df f002 	tbb	[pc, r2]
 800f8d0:	1e212427 	.word	0x1e212427
 800f8d4:	141b      	.short	0x141b
 800f8d6:	2df5      	cmp	r5, #245	@ 0xf5
 800f8d8:	d803      	bhi.n	800f8e2 <rmw_validate_namespace_with_size+0x46>
 800f8da:	2000      	movs	r0, #0
 800f8dc:	6020      	str	r0, [r4, #0]
 800f8de:	b042      	add	sp, #264	@ 0x108
 800f8e0:	bd70      	pop	{r4, r5, r6, pc}
 800f8e2:	2307      	movs	r3, #7
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	2e00      	cmp	r6, #0
 800f8e8:	d0f9      	beq.n	800f8de <rmw_validate_namespace_with_size+0x42>
 800f8ea:	23f4      	movs	r3, #244	@ 0xf4
 800f8ec:	6033      	str	r3, [r6, #0]
 800f8ee:	e7f6      	b.n	800f8de <rmw_validate_namespace_with_size+0x42>
 800f8f0:	200b      	movs	r0, #11
 800f8f2:	4770      	bx	lr
 800f8f4:	200b      	movs	r0, #11
 800f8f6:	e7f2      	b.n	800f8de <rmw_validate_namespace_with_size+0x42>
 800f8f8:	2306      	movs	r3, #6
 800f8fa:	6023      	str	r3, [r4, #0]
 800f8fc:	2e00      	cmp	r6, #0
 800f8fe:	d0ee      	beq.n	800f8de <rmw_validate_namespace_with_size+0x42>
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	6033      	str	r3, [r6, #0]
 800f904:	e7eb      	b.n	800f8de <rmw_validate_namespace_with_size+0x42>
 800f906:	2305      	movs	r3, #5
 800f908:	6023      	str	r3, [r4, #0]
 800f90a:	e7f7      	b.n	800f8fc <rmw_validate_namespace_with_size+0x60>
 800f90c:	2304      	movs	r3, #4
 800f90e:	6023      	str	r3, [r4, #0]
 800f910:	e7f4      	b.n	800f8fc <rmw_validate_namespace_with_size+0x60>
 800f912:	2303      	movs	r3, #3
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	e7f1      	b.n	800f8fc <rmw_validate_namespace_with_size+0x60>
 800f918:	2302      	movs	r3, #2
 800f91a:	6023      	str	r3, [r4, #0]
 800f91c:	e7ee      	b.n	800f8fc <rmw_validate_namespace_with_size+0x60>
 800f91e:	2301      	movs	r3, #1
 800f920:	6023      	str	r3, [r4, #0]
 800f922:	e7eb      	b.n	800f8fc <rmw_validate_namespace_with_size+0x60>
 800f924:	4a03      	ldr	r2, [pc, #12]	@ (800f934 <rmw_validate_namespace_with_size+0x98>)
 800f926:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f92a:	a802      	add	r0, sp, #8
 800f92c:	f7ff fd42 	bl	800f3b4 <rcutils_snprintf>
 800f930:	2001      	movs	r0, #1
 800f932:	e7d4      	b.n	800f8de <rmw_validate_namespace_with_size+0x42>
 800f934:	0801e214 	.word	0x0801e214

0800f938 <rmw_validate_namespace>:
 800f938:	b168      	cbz	r0, 800f956 <rmw_validate_namespace+0x1e>
 800f93a:	b570      	push	{r4, r5, r6, lr}
 800f93c:	460d      	mov	r5, r1
 800f93e:	4616      	mov	r6, r2
 800f940:	4604      	mov	r4, r0
 800f942:	f7f0 fc77 	bl	8000234 <strlen>
 800f946:	4633      	mov	r3, r6
 800f948:	4601      	mov	r1, r0
 800f94a:	462a      	mov	r2, r5
 800f94c:	4620      	mov	r0, r4
 800f94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f952:	f7ff bfa3 	b.w	800f89c <rmw_validate_namespace_with_size>
 800f956:	200b      	movs	r0, #11
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop

0800f95c <rmw_namespace_validation_result_string>:
 800f95c:	2807      	cmp	r0, #7
 800f95e:	bf9a      	itte	ls
 800f960:	4b02      	ldrls	r3, [pc, #8]	@ (800f96c <rmw_namespace_validation_result_string+0x10>)
 800f962:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f966:	4802      	ldrhi	r0, [pc, #8]	@ (800f970 <rmw_namespace_validation_result_string+0x14>)
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	0801e40c 	.word	0x0801e40c
 800f970:	0801e264 	.word	0x0801e264

0800f974 <rmw_validate_node_name>:
 800f974:	2800      	cmp	r0, #0
 800f976:	d03b      	beq.n	800f9f0 <rmw_validate_node_name+0x7c>
 800f978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97c:	460d      	mov	r5, r1
 800f97e:	2900      	cmp	r1, #0
 800f980:	d038      	beq.n	800f9f4 <rmw_validate_node_name+0x80>
 800f982:	4616      	mov	r6, r2
 800f984:	4604      	mov	r4, r0
 800f986:	f7f0 fc55 	bl	8000234 <strlen>
 800f98a:	b1e0      	cbz	r0, 800f9c6 <rmw_validate_node_name+0x52>
 800f98c:	1e63      	subs	r3, r4, #1
 800f98e:	eb03 0800 	add.w	r8, r3, r0
 800f992:	f1c4 0101 	rsb	r1, r4, #1
 800f996:	18cf      	adds	r7, r1, r3
 800f998:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800f99c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800f9a0:	f02e 0c20 	bic.w	ip, lr, #32
 800f9a4:	2a09      	cmp	r2, #9
 800f9a6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800f9aa:	d914      	bls.n	800f9d6 <rmw_validate_node_name+0x62>
 800f9ac:	f1bc 0f19 	cmp.w	ip, #25
 800f9b0:	d911      	bls.n	800f9d6 <rmw_validate_node_name+0x62>
 800f9b2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800f9b6:	d00e      	beq.n	800f9d6 <rmw_validate_node_name+0x62>
 800f9b8:	2302      	movs	r3, #2
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	b106      	cbz	r6, 800f9c0 <rmw_validate_node_name+0x4c>
 800f9be:	6037      	str	r7, [r6, #0]
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	602b      	str	r3, [r5, #0]
 800f9ca:	2e00      	cmp	r6, #0
 800f9cc:	d0f8      	beq.n	800f9c0 <rmw_validate_node_name+0x4c>
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	6030      	str	r0, [r6, #0]
 800f9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d6:	4543      	cmp	r3, r8
 800f9d8:	d1dd      	bne.n	800f996 <rmw_validate_node_name+0x22>
 800f9da:	7822      	ldrb	r2, [r4, #0]
 800f9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800fa14 <rmw_validate_node_name+0xa0>)
 800f9de:	5cd3      	ldrb	r3, [r2, r3]
 800f9e0:	f013 0304 	ands.w	r3, r3, #4
 800f9e4:	d110      	bne.n	800fa08 <rmw_validate_node_name+0x94>
 800f9e6:	28ff      	cmp	r0, #255	@ 0xff
 800f9e8:	d806      	bhi.n	800f9f8 <rmw_validate_node_name+0x84>
 800f9ea:	602b      	str	r3, [r5, #0]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	e7e8      	b.n	800f9c2 <rmw_validate_node_name+0x4e>
 800f9f0:	200b      	movs	r0, #11
 800f9f2:	4770      	bx	lr
 800f9f4:	200b      	movs	r0, #11
 800f9f6:	e7e4      	b.n	800f9c2 <rmw_validate_node_name+0x4e>
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	602a      	str	r2, [r5, #0]
 800f9fc:	2e00      	cmp	r6, #0
 800f9fe:	d0df      	beq.n	800f9c0 <rmw_validate_node_name+0x4c>
 800fa00:	22fe      	movs	r2, #254	@ 0xfe
 800fa02:	6032      	str	r2, [r6, #0]
 800fa04:	4618      	mov	r0, r3
 800fa06:	e7dc      	b.n	800f9c2 <rmw_validate_node_name+0x4e>
 800fa08:	2303      	movs	r3, #3
 800fa0a:	602b      	str	r3, [r5, #0]
 800fa0c:	2e00      	cmp	r6, #0
 800fa0e:	d1de      	bne.n	800f9ce <rmw_validate_node_name+0x5a>
 800fa10:	e7d6      	b.n	800f9c0 <rmw_validate_node_name+0x4c>
 800fa12:	bf00      	nop
 800fa14:	0801f5a6 	.word	0x0801f5a6

0800fa18 <rmw_node_name_validation_result_string>:
 800fa18:	2804      	cmp	r0, #4
 800fa1a:	bf9a      	itte	ls
 800fa1c:	4b02      	ldrls	r3, [pc, #8]	@ (800fa28 <rmw_node_name_validation_result_string+0x10>)
 800fa1e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800fa22:	4802      	ldrhi	r0, [pc, #8]	@ (800fa2c <rmw_node_name_validation_result_string+0x14>)
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	0801e518 	.word	0x0801e518
 800fa2c:	0801e42c 	.word	0x0801e42c

0800fa30 <rmw_uros_set_custom_transport>:
 800fa30:	b470      	push	{r4, r5, r6}
 800fa32:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fa36:	b162      	cbz	r2, 800fa52 <rmw_uros_set_custom_transport+0x22>
 800fa38:	b15b      	cbz	r3, 800fa52 <rmw_uros_set_custom_transport+0x22>
 800fa3a:	b155      	cbz	r5, 800fa52 <rmw_uros_set_custom_transport+0x22>
 800fa3c:	b14e      	cbz	r6, 800fa52 <rmw_uros_set_custom_transport+0x22>
 800fa3e:	4c06      	ldr	r4, [pc, #24]	@ (800fa58 <rmw_uros_set_custom_transport+0x28>)
 800fa40:	7020      	strb	r0, [r4, #0]
 800fa42:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fa46:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fa4a:	6166      	str	r6, [r4, #20]
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	bc70      	pop	{r4, r5, r6}
 800fa50:	4770      	bx	lr
 800fa52:	200b      	movs	r0, #11
 800fa54:	bc70      	pop	{r4, r5, r6}
 800fa56:	4770      	bx	lr
 800fa58:	200077b8 	.word	0x200077b8

0800fa5c <rmw_create_client>:
 800fa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa60:	b091      	sub	sp, #68	@ 0x44
 800fa62:	2800      	cmp	r0, #0
 800fa64:	f000 80ba 	beq.w	800fbdc <rmw_create_client+0x180>
 800fa68:	4689      	mov	r9, r1
 800fa6a:	2900      	cmp	r1, #0
 800fa6c:	f000 80b6 	beq.w	800fbdc <rmw_create_client+0x180>
 800fa70:	4606      	mov	r6, r0
 800fa72:	6800      	ldr	r0, [r0, #0]
 800fa74:	4614      	mov	r4, r2
 800fa76:	461d      	mov	r5, r3
 800fa78:	f001 fe56 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	f000 80ad 	beq.w	800fbdc <rmw_create_client+0x180>
 800fa82:	2c00      	cmp	r4, #0
 800fa84:	f000 80aa 	beq.w	800fbdc <rmw_create_client+0x180>
 800fa88:	7823      	ldrb	r3, [r4, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f000 80a6 	beq.w	800fbdc <rmw_create_client+0x180>
 800fa90:	2d00      	cmp	r5, #0
 800fa92:	f000 80a3 	beq.w	800fbdc <rmw_create_client+0x180>
 800fa96:	4854      	ldr	r0, [pc, #336]	@ (800fbe8 <rmw_create_client+0x18c>)
 800fa98:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800fa9c:	f009 fed4 	bl	8019848 <get_memory>
 800faa0:	4606      	mov	r6, r0
 800faa2:	2800      	cmp	r0, #0
 800faa4:	f000 809b 	beq.w	800fbde <rmw_create_client+0x182>
 800faa8:	6887      	ldr	r7, [r0, #8]
 800faaa:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800faae:	f000 f90b 	bl	800fcc8 <rmw_get_implementation_identifier>
 800fab2:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800fab6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800fab8:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800fabc:	4620      	mov	r0, r4
 800fabe:	f7f0 fbb9 	bl	8000234 <strlen>
 800fac2:	1c42      	adds	r2, r0, #1
 800fac4:	2a3c      	cmp	r2, #60	@ 0x3c
 800fac6:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800faca:	f200 8084 	bhi.w	800fbd6 <rmw_create_client+0x17a>
 800face:	4621      	mov	r1, r4
 800fad0:	4650      	mov	r0, sl
 800fad2:	f00b fe38 	bl	801b746 <memcpy>
 800fad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fada:	4629      	mov	r1, r5
 800fadc:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800fae0:	677b      	str	r3, [r7, #116]	@ 0x74
 800fae2:	2250      	movs	r2, #80	@ 0x50
 800fae4:	f107 0020 	add.w	r0, r7, #32
 800fae8:	f00b fe2d 	bl	801b746 <memcpy>
 800faec:	493f      	ldr	r1, [pc, #252]	@ (800fbec <rmw_create_client+0x190>)
 800faee:	4648      	mov	r0, r9
 800faf0:	f001 fe34 	bl	801175c <get_service_typesupport_handle>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d06e      	beq.n	800fbd6 <rmw_create_client+0x17a>
 800faf8:	6843      	ldr	r3, [r0, #4]
 800fafa:	617b      	str	r3, [r7, #20]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d06a      	beq.n	800fbd6 <rmw_create_client+0x17a>
 800fb00:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fb04:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800fbf4 <rmw_create_client+0x198>
 800fb08:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800fbf8 <rmw_create_client+0x19c>
 800fb0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb10:	2107      	movs	r1, #7
 800fb12:	f8b3 05a0 	ldrh.w	r0, [r3, #1440]	@ 0x5a0
 800fb16:	1c42      	adds	r2, r0, #1
 800fb18:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
 800fb1c:	f003 fa08 	bl	8012f30 <uxr_object_id>
 800fb20:	2364      	movs	r3, #100	@ 0x64
 800fb22:	6138      	str	r0, [r7, #16]
 800fb24:	4652      	mov	r2, sl
 800fb26:	6978      	ldr	r0, [r7, #20]
 800fb28:	4649      	mov	r1, r9
 800fb2a:	f001 fd4b 	bl	80115c4 <generate_service_types>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d051      	beq.n	800fbd6 <rmw_create_client+0x17a>
 800fb32:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800fbfc <rmw_create_client+0x1a0>
 800fb36:	4a2e      	ldr	r2, [pc, #184]	@ (800fbf0 <rmw_create_client+0x194>)
 800fb38:	233c      	movs	r3, #60	@ 0x3c
 800fb3a:	4659      	mov	r1, fp
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f001 fd0f 	bl	8011560 <generate_service_topics>
 800fb42:	2800      	cmp	r0, #0
 800fb44:	d047      	beq.n	800fbd6 <rmw_create_client+0x17a>
 800fb46:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fb4a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800fb4e:	a80c      	add	r0, sp, #48	@ 0x30
 800fb50:	4629      	mov	r1, r5
 800fb52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fb56:	f001 fce9 	bl	801152c <convert_qos_profile>
 800fb5a:	4a25      	ldr	r2, [pc, #148]	@ (800fbf0 <rmw_create_client+0x194>)
 800fb5c:	9400      	str	r4, [sp, #0]
 800fb5e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800fb62:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800fb66:	a80c      	add	r0, sp, #48	@ 0x30
 800fb68:	c803      	ldmia	r0, {r0, r1}
 800fb6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb6c:	9005      	str	r0, [sp, #20]
 800fb6e:	9a08      	ldr	r2, [sp, #32]
 800fb70:	f8ad 1018 	strh.w	r1, [sp, #24]
 800fb74:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fb78:	2306      	movs	r3, #6
 800fb7a:	9307      	str	r3, [sp, #28]
 800fb7c:	6811      	ldr	r1, [r2, #0]
 800fb7e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	f003 f89e 	bl	8012cc4 <uxr_buffer_create_requester_bin>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fb8e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fb92:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fb96:	f001 fcad 	bl	80114f4 <run_xrce_session>
 800fb9a:	b1e0      	cbz	r0, 800fbd6 <rmw_create_client+0x17a>
 800fb9c:	7a2b      	ldrb	r3, [r5, #8]
 800fb9e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fba2:	2200      	movs	r2, #0
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fbaa:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800fbae:	bf0c      	ite	eq
 800fbb0:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800fbb4:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800fbb8:	673a      	str	r2, [r7, #112]	@ 0x70
 800fbba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbbc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800fbc0:	ab0e      	add	r3, sp, #56	@ 0x38
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	6811      	ldr	r1, [r2, #0]
 800fbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbce:	f003 f9df 	bl	8012f90 <uxr_buffer_request_data>
 800fbd2:	8338      	strh	r0, [r7, #24]
 800fbd4:	e003      	b.n	800fbde <rmw_create_client+0x182>
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	f001 fb74 	bl	80112c4 <rmw_uxrce_fini_client_memory>
 800fbdc:	2600      	movs	r6, #0
 800fbde:	4630      	mov	r0, r6
 800fbe0:	b011      	add	sp, #68	@ 0x44
 800fbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe6:	bf00      	nop
 800fbe8:	20007a90 	.word	0x20007a90
 800fbec:	0801da98 	.word	0x0801da98
 800fbf0:	20007874 	.word	0x20007874
 800fbf4:	200078b0 	.word	0x200078b0
 800fbf8:	20007810 	.word	0x20007810
 800fbfc:	200077d4 	.word	0x200077d4

0800fc00 <rmw_destroy_client>:
 800fc00:	b570      	push	{r4, r5, r6, lr}
 800fc02:	b128      	cbz	r0, 800fc10 <rmw_destroy_client+0x10>
 800fc04:	4604      	mov	r4, r0
 800fc06:	6800      	ldr	r0, [r0, #0]
 800fc08:	460d      	mov	r5, r1
 800fc0a:	f001 fd8d 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 800fc0e:	b910      	cbnz	r0, 800fc16 <rmw_destroy_client+0x16>
 800fc10:	2401      	movs	r4, #1
 800fc12:	4620      	mov	r0, r4
 800fc14:	bd70      	pop	{r4, r5, r6, pc}
 800fc16:	6863      	ldr	r3, [r4, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d0f9      	beq.n	800fc10 <rmw_destroy_client+0x10>
 800fc1c:	2d00      	cmp	r5, #0
 800fc1e:	d0f7      	beq.n	800fc10 <rmw_destroy_client+0x10>
 800fc20:	6828      	ldr	r0, [r5, #0]
 800fc22:	f001 fd81 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 800fc26:	2800      	cmp	r0, #0
 800fc28:	d0f2      	beq.n	800fc10 <rmw_destroy_client+0x10>
 800fc2a:	686e      	ldr	r6, [r5, #4]
 800fc2c:	2e00      	cmp	r6, #0
 800fc2e:	d0ef      	beq.n	800fc10 <rmw_destroy_client+0x10>
 800fc30:	6864      	ldr	r4, [r4, #4]
 800fc32:	6932      	ldr	r2, [r6, #16]
 800fc34:	6920      	ldr	r0, [r4, #16]
 800fc36:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fc3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc3e:	6819      	ldr	r1, [r3, #0]
 800fc40:	f003 f9e0 	bl	8013004 <uxr_buffer_cancel_data>
 800fc44:	4602      	mov	r2, r0
 800fc46:	6920      	ldr	r0, [r4, #16]
 800fc48:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fc4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fc50:	f001 fc50 	bl	80114f4 <run_xrce_session>
 800fc54:	6920      	ldr	r0, [r4, #16]
 800fc56:	6932      	ldr	r2, [r6, #16]
 800fc58:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fc5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc60:	6819      	ldr	r1, [r3, #0]
 800fc62:	f002 fe2d 	bl	80128c0 <uxr_buffer_delete_entity>
 800fc66:	4602      	mov	r2, r0
 800fc68:	6920      	ldr	r0, [r4, #16]
 800fc6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fc6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fc72:	f001 fc3f 	bl	80114f4 <run_xrce_session>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	4628      	mov	r0, r5
 800fc7a:	bf14      	ite	ne
 800fc7c:	2400      	movne	r4, #0
 800fc7e:	2402      	moveq	r4, #2
 800fc80:	f001 fb20 	bl	80112c4 <rmw_uxrce_fini_client_memory>
 800fc84:	e7c5      	b.n	800fc12 <rmw_destroy_client+0x12>
 800fc86:	bf00      	nop

0800fc88 <rmw_client_request_publisher_get_actual_qos>:
 800fc88:	b150      	cbz	r0, 800fca0 <rmw_client_request_publisher_get_actual_qos+0x18>
 800fc8a:	b508      	push	{r3, lr}
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	b149      	cbz	r1, 800fca4 <rmw_client_request_publisher_get_actual_qos+0x1c>
 800fc90:	6841      	ldr	r1, [r0, #4]
 800fc92:	2250      	movs	r2, #80	@ 0x50
 800fc94:	3120      	adds	r1, #32
 800fc96:	4618      	mov	r0, r3
 800fc98:	f00b fd55 	bl	801b746 <memcpy>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	bd08      	pop	{r3, pc}
 800fca0:	200b      	movs	r0, #11
 800fca2:	4770      	bx	lr
 800fca4:	200b      	movs	r0, #11
 800fca6:	bd08      	pop	{r3, pc}

0800fca8 <rmw_client_response_subscription_get_actual_qos>:
 800fca8:	b150      	cbz	r0, 800fcc0 <rmw_client_response_subscription_get_actual_qos+0x18>
 800fcaa:	b508      	push	{r3, lr}
 800fcac:	460b      	mov	r3, r1
 800fcae:	b149      	cbz	r1, 800fcc4 <rmw_client_response_subscription_get_actual_qos+0x1c>
 800fcb0:	6841      	ldr	r1, [r0, #4]
 800fcb2:	2250      	movs	r2, #80	@ 0x50
 800fcb4:	3120      	adds	r1, #32
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f00b fd45 	bl	801b746 <memcpy>
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	bd08      	pop	{r3, pc}
 800fcc0:	200b      	movs	r0, #11
 800fcc2:	4770      	bx	lr
 800fcc4:	200b      	movs	r0, #11
 800fcc6:	bd08      	pop	{r3, pc}

0800fcc8 <rmw_get_implementation_identifier>:
 800fcc8:	4b01      	ldr	r3, [pc, #4]	@ (800fcd0 <rmw_get_implementation_identifier+0x8>)
 800fcca:	6818      	ldr	r0, [r3, #0]
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	0801f430 	.word	0x0801f430

0800fcd4 <rmw_init_options_init>:
 800fcd4:	b084      	sub	sp, #16
 800fcd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcd8:	b083      	sub	sp, #12
 800fcda:	ad09      	add	r5, sp, #36	@ 0x24
 800fcdc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800fce0:	b130      	cbz	r0, 800fcf0 <rmw_init_options_init+0x1c>
 800fce2:	4604      	mov	r4, r0
 800fce4:	4628      	mov	r0, r5
 800fce6:	f7ff f979 	bl	800efdc <rcutils_allocator_is_valid>
 800fcea:	b108      	cbz	r0, 800fcf0 <rmw_init_options_init+0x1c>
 800fcec:	68a6      	ldr	r6, [r4, #8]
 800fcee:	b12e      	cbz	r6, 800fcfc <rmw_init_options_init+0x28>
 800fcf0:	200b      	movs	r0, #11
 800fcf2:	b003      	add	sp, #12
 800fcf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fcf8:	b004      	add	sp, #16
 800fcfa:	4770      	bx	lr
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e9c4 2300 	strd	r2, r3, [r4]
 800fd04:	4b22      	ldr	r3, [pc, #136]	@ (800fd90 <rmw_init_options_init+0xbc>)
 800fd06:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800fda0 <rmw_init_options_init+0xcc>
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	60a3      	str	r3, [r4, #8]
 800fd0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd10:	f104 0c20 	add.w	ip, r4, #32
 800fd14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd18:	466f      	mov	r7, sp
 800fd1a:	682b      	ldr	r3, [r5, #0]
 800fd1c:	f8cc 3000 	str.w	r3, [ip]
 800fd20:	4638      	mov	r0, r7
 800fd22:	f8c4 e01c 	str.w	lr, [r4, #28]
 800fd26:	60e6      	str	r6, [r4, #12]
 800fd28:	f7ff fd3e 	bl	800f7a8 <rmw_get_default_security_options>
 800fd2c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fd30:	f104 0310 	add.w	r3, r4, #16
 800fd34:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd38:	2203      	movs	r2, #3
 800fd3a:	4816      	ldr	r0, [pc, #88]	@ (800fd94 <rmw_init_options_init+0xc0>)
 800fd3c:	4916      	ldr	r1, [pc, #88]	@ (800fd98 <rmw_init_options_init+0xc4>)
 800fd3e:	7626      	strb	r6, [r4, #24]
 800fd40:	f001 fa00 	bl	8011144 <rmw_uxrce_init_init_options_impl_memory>
 800fd44:	4813      	ldr	r0, [pc, #76]	@ (800fd94 <rmw_init_options_init+0xc0>)
 800fd46:	f009 fd7f 	bl	8019848 <get_memory>
 800fd4a:	b1f0      	cbz	r0, 800fd8a <rmw_init_options_init+0xb6>
 800fd4c:	4a13      	ldr	r2, [pc, #76]	@ (800fd9c <rmw_init_options_init+0xc8>)
 800fd4e:	6883      	ldr	r3, [r0, #8]
 800fd50:	6851      	ldr	r1, [r2, #4]
 800fd52:	7810      	ldrb	r0, [r2, #0]
 800fd54:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd56:	7418      	strb	r0, [r3, #16]
 800fd58:	6159      	str	r1, [r3, #20]
 800fd5a:	68d1      	ldr	r1, [r2, #12]
 800fd5c:	61d9      	str	r1, [r3, #28]
 800fd5e:	6911      	ldr	r1, [r2, #16]
 800fd60:	6219      	str	r1, [r3, #32]
 800fd62:	6951      	ldr	r1, [r2, #20]
 800fd64:	6892      	ldr	r2, [r2, #8]
 800fd66:	619a      	str	r2, [r3, #24]
 800fd68:	6259      	str	r1, [r3, #36]	@ 0x24
 800fd6a:	f005 f967 	bl	801503c <uxr_nanos>
 800fd6e:	f00b f86b 	bl	801ae48 <srand>
 800fd72:	f00b f897 	bl	801aea4 <rand>
 800fd76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd78:	6298      	str	r0, [r3, #40]	@ 0x28
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	d0f9      	beq.n	800fd72 <rmw_init_options_init+0x9e>
 800fd7e:	2000      	movs	r0, #0
 800fd80:	b003      	add	sp, #12
 800fd82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fd86:	b004      	add	sp, #16
 800fd88:	4770      	bx	lr
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	e7b1      	b.n	800fcf2 <rmw_init_options_init+0x1e>
 800fd8e:	bf00      	nop
 800fd90:	0801f430 	.word	0x0801f430
 800fd94:	2000c414 	.word	0x2000c414
 800fd98:	20007be8 	.word	0x20007be8
 800fd9c:	200077b8 	.word	0x200077b8
 800fda0:	0801df8c 	.word	0x0801df8c

0800fda4 <rmw_init_options_copy>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	b158      	cbz	r0, 800fdc0 <rmw_init_options_copy+0x1c>
 800fda8:	460d      	mov	r5, r1
 800fdaa:	b149      	cbz	r1, 800fdc0 <rmw_init_options_copy+0x1c>
 800fdac:	4604      	mov	r4, r0
 800fdae:	6880      	ldr	r0, [r0, #8]
 800fdb0:	b120      	cbz	r0, 800fdbc <rmw_init_options_copy+0x18>
 800fdb2:	4b1e      	ldr	r3, [pc, #120]	@ (800fe2c <rmw_init_options_copy+0x88>)
 800fdb4:	6819      	ldr	r1, [r3, #0]
 800fdb6:	f7f0 fa33 	bl	8000220 <strcmp>
 800fdba:	bb90      	cbnz	r0, 800fe22 <rmw_init_options_copy+0x7e>
 800fdbc:	68ab      	ldr	r3, [r5, #8]
 800fdbe:	b113      	cbz	r3, 800fdc6 <rmw_init_options_copy+0x22>
 800fdc0:	250b      	movs	r5, #11
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	bd70      	pop	{r4, r5, r6, pc}
 800fdc6:	4623      	mov	r3, r4
 800fdc8:	462a      	mov	r2, r5
 800fdca:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800fdce:	f8d3 c000 	ldr.w	ip, [r3]
 800fdd2:	6858      	ldr	r0, [r3, #4]
 800fdd4:	6899      	ldr	r1, [r3, #8]
 800fdd6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800fdda:	f8c2 e00c 	str.w	lr, [r2, #12]
 800fdde:	3310      	adds	r3, #16
 800fde0:	42b3      	cmp	r3, r6
 800fde2:	f8c2 c000 	str.w	ip, [r2]
 800fde6:	6050      	str	r0, [r2, #4]
 800fde8:	6091      	str	r1, [r2, #8]
 800fdea:	f102 0210 	add.w	r2, r2, #16
 800fdee:	d1ee      	bne.n	800fdce <rmw_init_options_copy+0x2a>
 800fdf0:	6819      	ldr	r1, [r3, #0]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	480e      	ldr	r0, [pc, #56]	@ (800fe30 <rmw_init_options_copy+0x8c>)
 800fdf6:	6053      	str	r3, [r2, #4]
 800fdf8:	6011      	str	r1, [r2, #0]
 800fdfa:	f009 fd25 	bl	8019848 <get_memory>
 800fdfe:	b198      	cbz	r0, 800fe28 <rmw_init_options_copy+0x84>
 800fe00:	6883      	ldr	r3, [r0, #8]
 800fe02:	636b      	str	r3, [r5, #52]	@ 0x34
 800fe04:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800fe06:	f102 0c10 	add.w	ip, r2, #16
 800fe0a:	f103 0410 	add.w	r4, r3, #16
 800fe0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe14:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800fe18:	2500      	movs	r5, #0
 800fe1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe1e:	4628      	mov	r0, r5
 800fe20:	bd70      	pop	{r4, r5, r6, pc}
 800fe22:	250c      	movs	r5, #12
 800fe24:	4628      	mov	r0, r5
 800fe26:	bd70      	pop	{r4, r5, r6, pc}
 800fe28:	2501      	movs	r5, #1
 800fe2a:	e7ca      	b.n	800fdc2 <rmw_init_options_copy+0x1e>
 800fe2c:	0801f430 	.word	0x0801f430
 800fe30:	2000c414 	.word	0x2000c414

0800fe34 <rmw_init_options_fini>:
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d03d      	beq.n	800feb4 <rmw_init_options_fini+0x80>
 800fe38:	b510      	push	{r4, lr}
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	b08e      	sub	sp, #56	@ 0x38
 800fe3e:	3020      	adds	r0, #32
 800fe40:	f7ff f8cc 	bl	800efdc <rcutils_allocator_is_valid>
 800fe44:	b360      	cbz	r0, 800fea0 <rmw_init_options_fini+0x6c>
 800fe46:	68a0      	ldr	r0, [r4, #8]
 800fe48:	b120      	cbz	r0, 800fe54 <rmw_init_options_fini+0x20>
 800fe4a:	4b1c      	ldr	r3, [pc, #112]	@ (800febc <rmw_init_options_fini+0x88>)
 800fe4c:	6819      	ldr	r1, [r3, #0]
 800fe4e:	f7f0 f9e7 	bl	8000220 <strcmp>
 800fe52:	bb68      	cbnz	r0, 800feb0 <rmw_init_options_fini+0x7c>
 800fe54:	4b1a      	ldr	r3, [pc, #104]	@ (800fec0 <rmw_init_options_fini+0x8c>)
 800fe56:	6819      	ldr	r1, [r3, #0]
 800fe58:	b331      	cbz	r1, 800fea8 <rmw_init_options_fini+0x74>
 800fe5a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800fe5c:	e001      	b.n	800fe62 <rmw_init_options_fini+0x2e>
 800fe5e:	6849      	ldr	r1, [r1, #4]
 800fe60:	b311      	cbz	r1, 800fea8 <rmw_init_options_fini+0x74>
 800fe62:	688b      	ldr	r3, [r1, #8]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d1fa      	bne.n	800fe5e <rmw_init_options_fini+0x2a>
 800fe68:	4815      	ldr	r0, [pc, #84]	@ (800fec0 <rmw_init_options_fini+0x8c>)
 800fe6a:	f009 fcfd 	bl	8019868 <put_memory>
 800fe6e:	4668      	mov	r0, sp
 800fe70:	f7ff fc86 	bl	800f780 <rmw_get_zero_initialized_init_options>
 800fe74:	46ee      	mov	lr, sp
 800fe76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe7a:	46a4      	mov	ip, r4
 800fe7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe90:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fe94:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fe98:	2300      	movs	r3, #0
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	b00e      	add	sp, #56	@ 0x38
 800fe9e:	bd10      	pop	{r4, pc}
 800fea0:	230b      	movs	r3, #11
 800fea2:	4618      	mov	r0, r3
 800fea4:	b00e      	add	sp, #56	@ 0x38
 800fea6:	bd10      	pop	{r4, pc}
 800fea8:	2301      	movs	r3, #1
 800feaa:	4618      	mov	r0, r3
 800feac:	b00e      	add	sp, #56	@ 0x38
 800feae:	bd10      	pop	{r4, pc}
 800feb0:	230c      	movs	r3, #12
 800feb2:	e7f2      	b.n	800fe9a <rmw_init_options_fini+0x66>
 800feb4:	230b      	movs	r3, #11
 800feb6:	4618      	mov	r0, r3
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	0801f430 	.word	0x0801f430
 800fec0:	2000c414 	.word	0x2000c414

0800fec4 <rmw_init>:
 800fec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fec8:	b083      	sub	sp, #12
 800feca:	2800      	cmp	r0, #0
 800fecc:	f000 80d3 	beq.w	8010076 <rmw_init+0x1b2>
 800fed0:	460e      	mov	r6, r1
 800fed2:	2900      	cmp	r1, #0
 800fed4:	f000 80cf 	beq.w	8010076 <rmw_init+0x1b2>
 800fed8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800feda:	4605      	mov	r5, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f000 80ca 	beq.w	8010076 <rmw_init+0x1b2>
 800fee2:	4b78      	ldr	r3, [pc, #480]	@ (80100c4 <rmw_init+0x200>)
 800fee4:	6880      	ldr	r0, [r0, #8]
 800fee6:	681f      	ldr	r7, [r3, #0]
 800fee8:	b128      	cbz	r0, 800fef6 <rmw_init+0x32>
 800feea:	4639      	mov	r1, r7
 800feec:	f7f0 f998 	bl	8000220 <strcmp>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	f040 80ca 	bne.w	801008a <rmw_init+0x1c6>
 800fef6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fefa:	4c73      	ldr	r4, [pc, #460]	@ (80100c8 <rmw_init+0x204>)
 800fefc:	4973      	ldr	r1, [pc, #460]	@ (80100cc <rmw_init+0x208>)
 800fefe:	4874      	ldr	r0, [pc, #464]	@ (80100d0 <rmw_init+0x20c>)
 800ff00:	60b7      	str	r7, [r6, #8]
 800ff02:	e9c6 2300 	strd	r2, r3, [r6]
 800ff06:	68eb      	ldr	r3, [r5, #12]
 800ff08:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f001 f8ba 	bl	8011084 <rmw_uxrce_init_session_memory>
 800ff10:	4620      	mov	r0, r4
 800ff12:	4970      	ldr	r1, [pc, #448]	@ (80100d4 <rmw_init+0x210>)
 800ff14:	2204      	movs	r2, #4
 800ff16:	f001 f8f5 	bl	8011104 <rmw_uxrce_init_static_input_buffer_memory>
 800ff1a:	f04f 0800 	mov.w	r8, #0
 800ff1e:	486c      	ldr	r0, [pc, #432]	@ (80100d0 <rmw_init+0x20c>)
 800ff20:	f884 800d 	strb.w	r8, [r4, #13]
 800ff24:	f009 fc90 	bl	8019848 <get_memory>
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	f000 80a9 	beq.w	8010080 <rmw_init+0x1bc>
 800ff2e:	6884      	ldr	r4, [r0, #8]
 800ff30:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ff32:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ff34:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ff38:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ff3c:	9101      	str	r1, [sp, #4]
 800ff3e:	6a00      	ldr	r0, [r0, #32]
 800ff40:	9000      	str	r0, [sp, #0]
 800ff42:	f104 0910 	add.w	r9, r4, #16
 800ff46:	4661      	mov	r1, ip
 800ff48:	4648      	mov	r0, r9
 800ff4a:	f002 ffab 	bl	8012ea4 <uxr_set_custom_transport_callbacks>
 800ff4e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800ff52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ff56:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ff5a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ff5e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ff62:	495d      	ldr	r1, [pc, #372]	@ (80100d8 <rmw_init+0x214>)
 800ff64:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ff68:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800ff6c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800ff70:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800ff74:	4859      	ldr	r0, [pc, #356]	@ (80100dc <rmw_init+0x218>)
 800ff76:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ff7e:	f001 f861 	bl	8011044 <rmw_uxrce_init_node_memory>
 800ff82:	4957      	ldr	r1, [pc, #348]	@ (80100e0 <rmw_init+0x21c>)
 800ff84:	4857      	ldr	r0, [pc, #348]	@ (80100e4 <rmw_init+0x220>)
 800ff86:	2205      	movs	r2, #5
 800ff88:	f001 f83c 	bl	8011004 <rmw_uxrce_init_subscription_memory>
 800ff8c:	4956      	ldr	r1, [pc, #344]	@ (80100e8 <rmw_init+0x224>)
 800ff8e:	4857      	ldr	r0, [pc, #348]	@ (80100ec <rmw_init+0x228>)
 800ff90:	220a      	movs	r2, #10
 800ff92:	f001 f817 	bl	8010fc4 <rmw_uxrce_init_publisher_memory>
 800ff96:	4956      	ldr	r1, [pc, #344]	@ (80100f0 <rmw_init+0x22c>)
 800ff98:	4856      	ldr	r0, [pc, #344]	@ (80100f4 <rmw_init+0x230>)
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	f000 ffd2 	bl	8010f44 <rmw_uxrce_init_service_memory>
 800ffa0:	4955      	ldr	r1, [pc, #340]	@ (80100f8 <rmw_init+0x234>)
 800ffa2:	4856      	ldr	r0, [pc, #344]	@ (80100fc <rmw_init+0x238>)
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	f000 ffed 	bl	8010f84 <rmw_uxrce_init_client_memory>
 800ffaa:	4955      	ldr	r1, [pc, #340]	@ (8010100 <rmw_init+0x23c>)
 800ffac:	4855      	ldr	r0, [pc, #340]	@ (8010104 <rmw_init+0x240>)
 800ffae:	220f      	movs	r2, #15
 800ffb0:	f001 f888 	bl	80110c4 <rmw_uxrce_init_topic_memory>
 800ffb4:	4954      	ldr	r1, [pc, #336]	@ (8010108 <rmw_init+0x244>)
 800ffb6:	4855      	ldr	r0, [pc, #340]	@ (801010c <rmw_init+0x248>)
 800ffb8:	2203      	movs	r2, #3
 800ffba:	f001 f8c3 	bl	8011144 <rmw_uxrce_init_init_options_impl_memory>
 800ffbe:	4954      	ldr	r1, [pc, #336]	@ (8010110 <rmw_init+0x24c>)
 800ffc0:	4854      	ldr	r0, [pc, #336]	@ (8010114 <rmw_init+0x250>)
 800ffc2:	2204      	movs	r2, #4
 800ffc4:	f001 f8de 	bl	8011184 <rmw_uxrce_init_wait_set_memory>
 800ffc8:	4953      	ldr	r1, [pc, #332]	@ (8010118 <rmw_init+0x254>)
 800ffca:	4854      	ldr	r0, [pc, #336]	@ (801011c <rmw_init+0x258>)
 800ffcc:	2204      	movs	r2, #4
 800ffce:	f001 f8f9 	bl	80111c4 <rmw_uxrce_init_guard_condition_memory>
 800ffd2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ffd4:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800ffd6:	4642      	mov	r2, r8
 800ffd8:	f000 ff6e 	bl	8010eb8 <rmw_uxrce_transport_init>
 800ffdc:	4607      	mov	r7, r0
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d158      	bne.n	8010094 <rmw_init+0x1d0>
 800ffe2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ffe4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ffe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ffea:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ffee:	4628      	mov	r0, r5
 800fff0:	f003 f98e 	bl	8013310 <uxr_init_session>
 800fff4:	494a      	ldr	r1, [pc, #296]	@ (8010120 <rmw_init+0x25c>)
 800fff6:	4622      	mov	r2, r4
 800fff8:	4628      	mov	r0, r5
 800fffa:	f003 f9ad 	bl	8013358 <uxr_set_topic_callback>
 800fffe:	4949      	ldr	r1, [pc, #292]	@ (8010124 <rmw_init+0x260>)
 8010000:	463a      	mov	r2, r7
 8010002:	4628      	mov	r0, r5
 8010004:	f003 f9a4 	bl	8013350 <uxr_set_status_callback>
 8010008:	4947      	ldr	r1, [pc, #284]	@ (8010128 <rmw_init+0x264>)
 801000a:	463a      	mov	r2, r7
 801000c:	4628      	mov	r0, r5
 801000e:	f003 f9a7 	bl	8013360 <uxr_set_request_callback>
 8010012:	4946      	ldr	r1, [pc, #280]	@ (801012c <rmw_init+0x268>)
 8010014:	463a      	mov	r2, r7
 8010016:	4628      	mov	r0, r5
 8010018:	f003 f9a6 	bl	8013368 <uxr_set_reply_callback>
 801001c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010020:	2304      	movs	r3, #4
 8010022:	0092      	lsls	r2, r2, #2
 8010024:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010028:	4628      	mov	r0, r5
 801002a:	f003 f9db 	bl	80133e4 <uxr_create_input_reliable_stream>
 801002e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010032:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010036:	0092      	lsls	r2, r2, #2
 8010038:	2304      	movs	r3, #4
 801003a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801003e:	4628      	mov	r0, r5
 8010040:	f003 f9a8 	bl	8013394 <uxr_create_output_reliable_stream>
 8010044:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010048:	4628      	mov	r0, r5
 801004a:	f003 f9c5 	bl	80133d8 <uxr_create_input_best_effort_stream>
 801004e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8010052:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8010056:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801005a:	3114      	adds	r1, #20
 801005c:	4628      	mov	r0, r5
 801005e:	f003 f987 	bl	8013370 <uxr_create_output_best_effort_stream>
 8010062:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010066:	4628      	mov	r0, r5
 8010068:	f003 ff7a 	bl	8013f60 <uxr_create_session>
 801006c:	b1f8      	cbz	r0, 80100ae <rmw_init+0x1ea>
 801006e:	4638      	mov	r0, r7
 8010070:	b003      	add	sp, #12
 8010072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010076:	270b      	movs	r7, #11
 8010078:	4638      	mov	r0, r7
 801007a:	b003      	add	sp, #12
 801007c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010080:	2701      	movs	r7, #1
 8010082:	4638      	mov	r0, r7
 8010084:	b003      	add	sp, #12
 8010086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801008a:	270c      	movs	r7, #12
 801008c:	4638      	mov	r0, r7
 801008e:	b003      	add	sp, #12
 8010090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010094:	4648      	mov	r0, r9
 8010096:	f002 ff47 	bl	8012f28 <uxr_close_custom_transport>
 801009a:	480d      	ldr	r0, [pc, #52]	@ (80100d0 <rmw_init+0x20c>)
 801009c:	4621      	mov	r1, r4
 801009e:	f009 fbe3 	bl	8019868 <put_memory>
 80100a2:	4638      	mov	r0, r7
 80100a4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80100a8:	b003      	add	sp, #12
 80100aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100ae:	4648      	mov	r0, r9
 80100b0:	f002 ff3a 	bl	8012f28 <uxr_close_custom_transport>
 80100b4:	4806      	ldr	r0, [pc, #24]	@ (80100d0 <rmw_init+0x20c>)
 80100b6:	4621      	mov	r1, r4
 80100b8:	f009 fbd6 	bl	8019868 <put_memory>
 80100bc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80100be:	2701      	movs	r7, #1
 80100c0:	e7d5      	b.n	801006e <rmw_init+0x1aa>
 80100c2:	bf00      	nop
 80100c4:	0801f430 	.word	0x0801f430
 80100c8:	2000c464 	.word	0x2000c464
 80100cc:	20008710 	.word	0x20008710
 80100d0:	2000c454 	.word	0x2000c454
 80100d4:	20009cb8 	.word	0x20009cb8
 80100d8:	20007c6c 	.word	0x20007c6c
 80100dc:	2000c424 	.word	0x2000c424
 80100e0:	2000bdb8 	.word	0x2000bdb8
 80100e4:	2000c474 	.word	0x2000c474
 80100e8:	20007d10 	.word	0x20007d10
 80100ec:	2000c434 	.word	0x2000c434
 80100f0:	20008580 	.word	0x20008580
 80100f4:	2000c444 	.word	0x2000c444
 80100f8:	20007aa0 	.word	0x20007aa0
 80100fc:	20007a90 	.word	0x20007a90
 8010100:	2000c1f0 	.word	0x2000c1f0
 8010104:	2000c484 	.word	0x2000c484
 8010108:	20007be8 	.word	0x20007be8
 801010c:	2000c414 	.word	0x2000c414
 8010110:	2000c394 	.word	0x2000c394
 8010114:	2000c494 	.word	0x2000c494
 8010118:	20007b68 	.word	0x20007b68
 801011c:	2000c404 	.word	0x2000c404
 8010120:	08019681 	.word	0x08019681
 8010124:	08019679 	.word	0x08019679
 8010128:	08019719 	.word	0x08019719
 801012c:	080197b5 	.word	0x080197b5

08010130 <rmw_context_fini>:
 8010130:	4b17      	ldr	r3, [pc, #92]	@ (8010190 <rmw_context_fini+0x60>)
 8010132:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	681c      	ldr	r4, [r3, #0]
 8010138:	4605      	mov	r5, r0
 801013a:	b334      	cbz	r4, 801018a <rmw_context_fini+0x5a>
 801013c:	2600      	movs	r6, #0
 801013e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010142:	6902      	ldr	r2, [r0, #16]
 8010144:	428a      	cmp	r2, r1
 8010146:	d018      	beq.n	801017a <rmw_context_fini+0x4a>
 8010148:	2c00      	cmp	r4, #0
 801014a:	d1f8      	bne.n	801013e <rmw_context_fini+0xe>
 801014c:	b189      	cbz	r1, 8010172 <rmw_context_fini+0x42>
 801014e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8010152:	789b      	ldrb	r3, [r3, #2]
 8010154:	2b01      	cmp	r3, #1
 8010156:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801015a:	bf14      	ite	ne
 801015c:	210a      	movne	r1, #10
 801015e:	2100      	moveq	r1, #0
 8010160:	f003 fed6 	bl	8013f10 <uxr_delete_session_retries>
 8010164:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8010166:	f001 f84d 	bl	8011204 <rmw_uxrce_fini_session_memory>
 801016a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801016c:	3010      	adds	r0, #16
 801016e:	f002 fedb 	bl	8012f28 <uxr_close_custom_transport>
 8010172:	2300      	movs	r3, #0
 8010174:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8010176:	4630      	mov	r0, r6
 8010178:	bd70      	pop	{r4, r5, r6, pc}
 801017a:	3018      	adds	r0, #24
 801017c:	f000 f89c 	bl	80102b8 <rmw_destroy_node>
 8010180:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8010182:	4606      	mov	r6, r0
 8010184:	2c00      	cmp	r4, #0
 8010186:	d1da      	bne.n	801013e <rmw_context_fini+0xe>
 8010188:	e7e0      	b.n	801014c <rmw_context_fini+0x1c>
 801018a:	4626      	mov	r6, r4
 801018c:	e7de      	b.n	801014c <rmw_context_fini+0x1c>
 801018e:	bf00      	nop
 8010190:	2000c424 	.word	0x2000c424

08010194 <create_node>:
 8010194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010198:	b083      	sub	sp, #12
 801019a:	2b00      	cmp	r3, #0
 801019c:	d05f      	beq.n	801025e <create_node+0xca>
 801019e:	4606      	mov	r6, r0
 80101a0:	4835      	ldr	r0, [pc, #212]	@ (8010278 <create_node+0xe4>)
 80101a2:	460f      	mov	r7, r1
 80101a4:	4690      	mov	r8, r2
 80101a6:	461d      	mov	r5, r3
 80101a8:	f009 fb4e 	bl	8019848 <get_memory>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d056      	beq.n	801025e <create_node+0xca>
 80101b0:	6884      	ldr	r4, [r0, #8]
 80101b2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80101b4:	6123      	str	r3, [r4, #16]
 80101b6:	f7ff fd87 	bl	800fcc8 <rmw_get_implementation_identifier>
 80101ba:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80101be:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80101c2:	f8c4 9020 	str.w	r9, [r4, #32]
 80101c6:	4630      	mov	r0, r6
 80101c8:	f7f0 f834 	bl	8000234 <strlen>
 80101cc:	1c42      	adds	r2, r0, #1
 80101ce:	2a3c      	cmp	r2, #60	@ 0x3c
 80101d0:	f104 0518 	add.w	r5, r4, #24
 80101d4:	d840      	bhi.n	8010258 <create_node+0xc4>
 80101d6:	4648      	mov	r0, r9
 80101d8:	4631      	mov	r1, r6
 80101da:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80101de:	f00b fab2 	bl	801b746 <memcpy>
 80101e2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80101e6:	4638      	mov	r0, r7
 80101e8:	f7f0 f824 	bl	8000234 <strlen>
 80101ec:	1c42      	adds	r2, r0, #1
 80101ee:	2a3c      	cmp	r2, #60	@ 0x3c
 80101f0:	d832      	bhi.n	8010258 <create_node+0xc4>
 80101f2:	4639      	mov	r1, r7
 80101f4:	4648      	mov	r0, r9
 80101f6:	f00b faa6 	bl	801b746 <memcpy>
 80101fa:	6923      	ldr	r3, [r4, #16]
 80101fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010200:	2101      	movs	r1, #1
 8010202:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8010206:	1842      	adds	r2, r0, r1
 8010208:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801020c:	f002 fe90 	bl	8012f30 <uxr_object_id>
 8010210:	6160      	str	r0, [r4, #20]
 8010212:	783b      	ldrb	r3, [r7, #0]
 8010214:	2b2f      	cmp	r3, #47	@ 0x2f
 8010216:	d127      	bne.n	8010268 <create_node+0xd4>
 8010218:	787b      	ldrb	r3, [r7, #1]
 801021a:	bb2b      	cbnz	r3, 8010268 <create_node+0xd4>
 801021c:	4a17      	ldr	r2, [pc, #92]	@ (801027c <create_node+0xe8>)
 801021e:	4818      	ldr	r0, [pc, #96]	@ (8010280 <create_node+0xec>)
 8010220:	4633      	mov	r3, r6
 8010222:	213c      	movs	r1, #60	@ 0x3c
 8010224:	f00b f858 	bl	801b2d8 <sniprintf>
 8010228:	6920      	ldr	r0, [r4, #16]
 801022a:	4915      	ldr	r1, [pc, #84]	@ (8010280 <create_node+0xec>)
 801022c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010230:	9100      	str	r1, [sp, #0]
 8010232:	2106      	movs	r1, #6
 8010234:	9101      	str	r1, [sp, #4]
 8010236:	6811      	ldr	r1, [r2, #0]
 8010238:	6962      	ldr	r2, [r4, #20]
 801023a:	fa1f f388 	uxth.w	r3, r8
 801023e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010242:	f002 fb89 	bl	8012958 <uxr_buffer_create_participant_bin>
 8010246:	4602      	mov	r2, r0
 8010248:	6920      	ldr	r0, [r4, #16]
 801024a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801024e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010252:	f001 f94f 	bl	80114f4 <run_xrce_session>
 8010256:	b918      	cbnz	r0, 8010260 <create_node+0xcc>
 8010258:	4628      	mov	r0, r5
 801025a:	f000 ffd9 	bl	8011210 <rmw_uxrce_fini_node_memory>
 801025e:	2500      	movs	r5, #0
 8010260:	4628      	mov	r0, r5
 8010262:	b003      	add	sp, #12
 8010264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010268:	4a06      	ldr	r2, [pc, #24]	@ (8010284 <create_node+0xf0>)
 801026a:	9600      	str	r6, [sp, #0]
 801026c:	463b      	mov	r3, r7
 801026e:	213c      	movs	r1, #60	@ 0x3c
 8010270:	4803      	ldr	r0, [pc, #12]	@ (8010280 <create_node+0xec>)
 8010272:	f00b f831 	bl	801b2d8 <sniprintf>
 8010276:	e7d7      	b.n	8010228 <create_node+0x94>
 8010278:	2000c424 	.word	0x2000c424
 801027c:	0801e53c 	.word	0x0801e53c
 8010280:	20007914 	.word	0x20007914
 8010284:	0801df9c 	.word	0x0801df9c

08010288 <rmw_create_node>:
 8010288:	b199      	cbz	r1, 80102b2 <rmw_create_node+0x2a>
 801028a:	780b      	ldrb	r3, [r1, #0]
 801028c:	468c      	mov	ip, r1
 801028e:	b183      	cbz	r3, 80102b2 <rmw_create_node+0x2a>
 8010290:	b410      	push	{r4}
 8010292:	4614      	mov	r4, r2
 8010294:	b14a      	cbz	r2, 80102aa <rmw_create_node+0x22>
 8010296:	7813      	ldrb	r3, [r2, #0]
 8010298:	b13b      	cbz	r3, 80102aa <rmw_create_node+0x22>
 801029a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801029c:	4603      	mov	r3, r0
 801029e:	4621      	mov	r1, r4
 80102a0:	4660      	mov	r0, ip
 80102a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102a6:	f7ff bf75 	b.w	8010194 <create_node>
 80102aa:	2000      	movs	r0, #0
 80102ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102b0:	4770      	bx	lr
 80102b2:	2000      	movs	r0, #0
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop

080102b8 <rmw_destroy_node>:
 80102b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ba:	b328      	cbz	r0, 8010308 <rmw_destroy_node+0x50>
 80102bc:	4607      	mov	r7, r0
 80102be:	6800      	ldr	r0, [r0, #0]
 80102c0:	b120      	cbz	r0, 80102cc <rmw_destroy_node+0x14>
 80102c2:	4b36      	ldr	r3, [pc, #216]	@ (801039c <rmw_destroy_node+0xe4>)
 80102c4:	6819      	ldr	r1, [r3, #0]
 80102c6:	f7ef ffab 	bl	8000220 <strcmp>
 80102ca:	b9e8      	cbnz	r0, 8010308 <rmw_destroy_node+0x50>
 80102cc:	687d      	ldr	r5, [r7, #4]
 80102ce:	b1dd      	cbz	r5, 8010308 <rmw_destroy_node+0x50>
 80102d0:	4b33      	ldr	r3, [pc, #204]	@ (80103a0 <rmw_destroy_node+0xe8>)
 80102d2:	681c      	ldr	r4, [r3, #0]
 80102d4:	2c00      	cmp	r4, #0
 80102d6:	d05f      	beq.n	8010398 <rmw_destroy_node+0xe0>
 80102d8:	2600      	movs	r6, #0
 80102da:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80102de:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80102e2:	429d      	cmp	r5, r3
 80102e4:	d013      	beq.n	801030e <rmw_destroy_node+0x56>
 80102e6:	2c00      	cmp	r4, #0
 80102e8:	d1f7      	bne.n	80102da <rmw_destroy_node+0x22>
 80102ea:	4b2e      	ldr	r3, [pc, #184]	@ (80103a4 <rmw_destroy_node+0xec>)
 80102ec:	681c      	ldr	r4, [r3, #0]
 80102ee:	b1c4      	cbz	r4, 8010322 <rmw_destroy_node+0x6a>
 80102f0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80102f4:	6a0b      	ldr	r3, [r1, #32]
 80102f6:	429d      	cmp	r5, r3
 80102f8:	d1f9      	bne.n	80102ee <rmw_destroy_node+0x36>
 80102fa:	317c      	adds	r1, #124	@ 0x7c
 80102fc:	4638      	mov	r0, r7
 80102fe:	f000 fd7b 	bl	8010df8 <rmw_destroy_subscription>
 8010302:	2801      	cmp	r0, #1
 8010304:	4606      	mov	r6, r0
 8010306:	d1f2      	bne.n	80102ee <rmw_destroy_node+0x36>
 8010308:	2601      	movs	r6, #1
 801030a:	4630      	mov	r0, r6
 801030c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030e:	3184      	adds	r1, #132	@ 0x84
 8010310:	4638      	mov	r0, r7
 8010312:	f000 f9a5 	bl	8010660 <rmw_destroy_publisher>
 8010316:	2801      	cmp	r0, #1
 8010318:	4606      	mov	r6, r0
 801031a:	d0f5      	beq.n	8010308 <rmw_destroy_node+0x50>
 801031c:	2c00      	cmp	r4, #0
 801031e:	d1dc      	bne.n	80102da <rmw_destroy_node+0x22>
 8010320:	e7e3      	b.n	80102ea <rmw_destroy_node+0x32>
 8010322:	4b21      	ldr	r3, [pc, #132]	@ (80103a8 <rmw_destroy_node+0xf0>)
 8010324:	681c      	ldr	r4, [r3, #0]
 8010326:	b16c      	cbz	r4, 8010344 <rmw_destroy_node+0x8c>
 8010328:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801032c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801032e:	429d      	cmp	r5, r3
 8010330:	d1f9      	bne.n	8010326 <rmw_destroy_node+0x6e>
 8010332:	317c      	adds	r1, #124	@ 0x7c
 8010334:	4638      	mov	r0, r7
 8010336:	f000 fc09 	bl	8010b4c <rmw_destroy_service>
 801033a:	2801      	cmp	r0, #1
 801033c:	4606      	mov	r6, r0
 801033e:	d0e3      	beq.n	8010308 <rmw_destroy_node+0x50>
 8010340:	2c00      	cmp	r4, #0
 8010342:	d1f1      	bne.n	8010328 <rmw_destroy_node+0x70>
 8010344:	4b19      	ldr	r3, [pc, #100]	@ (80103ac <rmw_destroy_node+0xf4>)
 8010346:	681c      	ldr	r4, [r3, #0]
 8010348:	b16c      	cbz	r4, 8010366 <rmw_destroy_node+0xae>
 801034a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801034e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010350:	429d      	cmp	r5, r3
 8010352:	d1f9      	bne.n	8010348 <rmw_destroy_node+0x90>
 8010354:	317c      	adds	r1, #124	@ 0x7c
 8010356:	4638      	mov	r0, r7
 8010358:	f7ff fc52 	bl	800fc00 <rmw_destroy_client>
 801035c:	2801      	cmp	r0, #1
 801035e:	4606      	mov	r6, r0
 8010360:	d0d2      	beq.n	8010308 <rmw_destroy_node+0x50>
 8010362:	2c00      	cmp	r4, #0
 8010364:	d1f1      	bne.n	801034a <rmw_destroy_node+0x92>
 8010366:	6928      	ldr	r0, [r5, #16]
 8010368:	696a      	ldr	r2, [r5, #20]
 801036a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801036e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010372:	6819      	ldr	r1, [r3, #0]
 8010374:	f002 faa4 	bl	80128c0 <uxr_buffer_delete_entity>
 8010378:	4602      	mov	r2, r0
 801037a:	6928      	ldr	r0, [r5, #16]
 801037c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010380:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010384:	f001 f8b6 	bl	80114f4 <run_xrce_session>
 8010388:	2800      	cmp	r0, #0
 801038a:	bf08      	it	eq
 801038c:	2602      	moveq	r6, #2
 801038e:	4638      	mov	r0, r7
 8010390:	f000 ff3e 	bl	8011210 <rmw_uxrce_fini_node_memory>
 8010394:	4630      	mov	r0, r6
 8010396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010398:	4626      	mov	r6, r4
 801039a:	e7a6      	b.n	80102ea <rmw_destroy_node+0x32>
 801039c:	0801f430 	.word	0x0801f430
 80103a0:	2000c434 	.word	0x2000c434
 80103a4:	2000c474 	.word	0x2000c474
 80103a8:	2000c444 	.word	0x2000c444
 80103ac:	20007a90 	.word	0x20007a90

080103b0 <rmw_node_get_graph_guard_condition>:
 80103b0:	6843      	ldr	r3, [r0, #4]
 80103b2:	6918      	ldr	r0, [r3, #16]
 80103b4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop

080103bc <flush_session>:
 80103bc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80103be:	f003 bc09 	b.w	8013bd4 <uxr_run_session_until_confirm_delivery>
 80103c2:	bf00      	nop

080103c4 <rmw_publish>:
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d053      	beq.n	8010470 <rmw_publish+0xac>
 80103c8:	b570      	push	{r4, r5, r6, lr}
 80103ca:	460d      	mov	r5, r1
 80103cc:	b08e      	sub	sp, #56	@ 0x38
 80103ce:	2900      	cmp	r1, #0
 80103d0:	d04b      	beq.n	801046a <rmw_publish+0xa6>
 80103d2:	4604      	mov	r4, r0
 80103d4:	6800      	ldr	r0, [r0, #0]
 80103d6:	f001 f9a7 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 80103da:	2800      	cmp	r0, #0
 80103dc:	d045      	beq.n	801046a <rmw_publish+0xa6>
 80103de:	6866      	ldr	r6, [r4, #4]
 80103e0:	2e00      	cmp	r6, #0
 80103e2:	d042      	beq.n	801046a <rmw_publish+0xa6>
 80103e4:	69b4      	ldr	r4, [r6, #24]
 80103e6:	4628      	mov	r0, r5
 80103e8:	6923      	ldr	r3, [r4, #16]
 80103ea:	4798      	blx	r3
 80103ec:	69f3      	ldr	r3, [r6, #28]
 80103ee:	9005      	str	r0, [sp, #20]
 80103f0:	b113      	cbz	r3, 80103f8 <rmw_publish+0x34>
 80103f2:	a805      	add	r0, sp, #20
 80103f4:	4798      	blx	r3
 80103f6:	9805      	ldr	r0, [sp, #20]
 80103f8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80103fc:	691b      	ldr	r3, [r3, #16]
 80103fe:	9000      	str	r0, [sp, #0]
 8010400:	6972      	ldr	r2, [r6, #20]
 8010402:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010404:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010408:	ab06      	add	r3, sp, #24
 801040a:	f004 feb7 	bl	801517c <uxr_prepare_output_stream>
 801040e:	b1d8      	cbz	r0, 8010448 <rmw_publish+0x84>
 8010410:	68a3      	ldr	r3, [r4, #8]
 8010412:	a906      	add	r1, sp, #24
 8010414:	4628      	mov	r0, r5
 8010416:	4798      	blx	r3
 8010418:	6a33      	ldr	r3, [r6, #32]
 801041a:	4604      	mov	r4, r0
 801041c:	b10b      	cbz	r3, 8010422 <rmw_publish+0x5e>
 801041e:	a806      	add	r0, sp, #24
 8010420:	4798      	blx	r3
 8010422:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8010426:	2b01      	cmp	r3, #1
 8010428:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801042c:	d022      	beq.n	8010474 <rmw_publish+0xb0>
 801042e:	6918      	ldr	r0, [r3, #16]
 8010430:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8010432:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010436:	f003 fbcd 	bl	8013bd4 <uxr_run_session_until_confirm_delivery>
 801043a:	4020      	ands	r0, r4
 801043c:	b2c4      	uxtb	r4, r0
 801043e:	f084 0001 	eor.w	r0, r4, #1
 8010442:	b2c0      	uxtb	r0, r0
 8010444:	b00e      	add	sp, #56	@ 0x38
 8010446:	bd70      	pop	{r4, r5, r6, pc}
 8010448:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801044c:	6918      	ldr	r0, [r3, #16]
 801044e:	9b05      	ldr	r3, [sp, #20]
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	4b0b      	ldr	r3, [pc, #44]	@ (8010480 <rmw_publish+0xbc>)
 8010454:	9301      	str	r3, [sp, #4]
 8010456:	9602      	str	r6, [sp, #8]
 8010458:	6972      	ldr	r2, [r6, #20]
 801045a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801045c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010460:	ab06      	add	r3, sp, #24
 8010462:	f004 febb 	bl	80151dc <uxr_prepare_output_stream_fragmented>
 8010466:	2800      	cmp	r0, #0
 8010468:	d1d2      	bne.n	8010410 <rmw_publish+0x4c>
 801046a:	2001      	movs	r0, #1
 801046c:	b00e      	add	sp, #56	@ 0x38
 801046e:	bd70      	pop	{r4, r5, r6, pc}
 8010470:	2001      	movs	r0, #1
 8010472:	4770      	bx	lr
 8010474:	6918      	ldr	r0, [r3, #16]
 8010476:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801047a:	f002 ffeb 	bl	8013454 <uxr_flash_output_streams>
 801047e:	e7de      	b.n	801043e <rmw_publish+0x7a>
 8010480:	080103bd 	.word	0x080103bd

08010484 <rmw_create_publisher>:
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010488:	b087      	sub	sp, #28
 801048a:	2800      	cmp	r0, #0
 801048c:	f000 80cc 	beq.w	8010628 <rmw_create_publisher+0x1a4>
 8010490:	460e      	mov	r6, r1
 8010492:	2900      	cmp	r1, #0
 8010494:	f000 80c8 	beq.w	8010628 <rmw_create_publisher+0x1a4>
 8010498:	4604      	mov	r4, r0
 801049a:	6800      	ldr	r0, [r0, #0]
 801049c:	4615      	mov	r5, r2
 801049e:	4698      	mov	r8, r3
 80104a0:	f001 f942 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	f000 80bf 	beq.w	8010628 <rmw_create_publisher+0x1a4>
 80104aa:	2d00      	cmp	r5, #0
 80104ac:	f000 80bc 	beq.w	8010628 <rmw_create_publisher+0x1a4>
 80104b0:	782b      	ldrb	r3, [r5, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f000 80b8 	beq.w	8010628 <rmw_create_publisher+0x1a4>
 80104b8:	f1b8 0f00 	cmp.w	r8, #0
 80104bc:	f000 80b4 	beq.w	8010628 <rmw_create_publisher+0x1a4>
 80104c0:	485c      	ldr	r0, [pc, #368]	@ (8010634 <rmw_create_publisher+0x1b0>)
 80104c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80104c6:	f009 f9bf 	bl	8019848 <get_memory>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	f000 80ac 	beq.w	8010628 <rmw_create_publisher+0x1a4>
 80104d0:	6884      	ldr	r4, [r0, #8]
 80104d2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80104d6:	f7ff fbf7 	bl	800fcc8 <rmw_get_implementation_identifier>
 80104da:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80104de:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80104e2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80104e6:	4628      	mov	r0, r5
 80104e8:	f7ef fea4 	bl	8000234 <strlen>
 80104ec:	3001      	adds	r0, #1
 80104ee:	283c      	cmp	r0, #60	@ 0x3c
 80104f0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80104f4:	f200 8091 	bhi.w	801061a <rmw_create_publisher+0x196>
 80104f8:	4a4f      	ldr	r2, [pc, #316]	@ (8010638 <rmw_create_publisher+0x1b4>)
 80104fa:	462b      	mov	r3, r5
 80104fc:	213c      	movs	r1, #60	@ 0x3c
 80104fe:	4650      	mov	r0, sl
 8010500:	f00a feea 	bl	801b2d8 <sniprintf>
 8010504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010508:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801050a:	4641      	mov	r1, r8
 801050c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8010510:	2250      	movs	r2, #80	@ 0x50
 8010512:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010516:	f00b f916 	bl	801b746 <memcpy>
 801051a:	f898 3008 	ldrb.w	r3, [r8, #8]
 801051e:	4947      	ldr	r1, [pc, #284]	@ (801063c <rmw_create_publisher+0x1b8>)
 8010520:	2b02      	cmp	r3, #2
 8010522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010526:	bf0c      	ite	eq
 8010528:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 801052c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8010530:	67a3      	str	r3, [r4, #120]	@ 0x78
 8010532:	2300      	movs	r3, #0
 8010534:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010538:	4630      	mov	r0, r6
 801053a:	f001 f903 	bl	8011744 <get_message_typesupport_handle>
 801053e:	2800      	cmp	r0, #0
 8010540:	d06b      	beq.n	801061a <rmw_create_publisher+0x196>
 8010542:	6842      	ldr	r2, [r0, #4]
 8010544:	61a2      	str	r2, [r4, #24]
 8010546:	2a00      	cmp	r2, #0
 8010548:	d067      	beq.n	801061a <rmw_create_publisher+0x196>
 801054a:	4629      	mov	r1, r5
 801054c:	4643      	mov	r3, r8
 801054e:	4648      	mov	r0, r9
 8010550:	f009 f9c6 	bl	80198e0 <create_topic>
 8010554:	6260      	str	r0, [r4, #36]	@ 0x24
 8010556:	2800      	cmp	r0, #0
 8010558:	d063      	beq.n	8010622 <rmw_create_publisher+0x19e>
 801055a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801055e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010562:	2103      	movs	r1, #3
 8010564:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8010568:	1c42      	adds	r2, r0, #1
 801056a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801056e:	f002 fcdf 	bl	8012f30 <uxr_object_id>
 8010572:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8010576:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801057a:	6120      	str	r0, [r4, #16]
 801057c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8010580:	6910      	ldr	r0, [r2, #16]
 8010582:	2506      	movs	r5, #6
 8010584:	9500      	str	r5, [sp, #0]
 8010586:	6819      	ldr	r1, [r3, #0]
 8010588:	6922      	ldr	r2, [r4, #16]
 801058a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801058e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010592:	f002 fa49 	bl	8012a28 <uxr_buffer_create_publisher_bin>
 8010596:	4602      	mov	r2, r0
 8010598:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801059c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80105a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80105a4:	f000 ffa6 	bl	80114f4 <run_xrce_session>
 80105a8:	b3b8      	cbz	r0, 801061a <rmw_create_publisher+0x196>
 80105aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80105ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80105b2:	2105      	movs	r1, #5
 80105b4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80105b8:	1c42      	adds	r2, r0, #1
 80105ba:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80105be:	f002 fcb7 	bl	8012f30 <uxr_object_id>
 80105c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80105c6:	6160      	str	r0, [r4, #20]
 80105c8:	691e      	ldr	r6, [r3, #16]
 80105ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80105ce:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80105d2:	f10d 0a10 	add.w	sl, sp, #16
 80105d6:	4641      	mov	r1, r8
 80105d8:	4650      	mov	r0, sl
 80105da:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 80105de:	f000 ffa5 	bl	801152c <convert_qos_profile>
 80105e2:	9503      	str	r5, [sp, #12]
 80105e4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80105e8:	9001      	str	r0, [sp, #4]
 80105ea:	f8ad 1008 	strh.w	r1, [sp, #8]
 80105ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80105f8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80105fc:	f8d8 1000 	ldr.w	r1, [r8]
 8010600:	4630      	mov	r0, r6
 8010602:	f002 fa71 	bl	8012ae8 <uxr_buffer_create_datawriter_bin>
 8010606:	4602      	mov	r2, r0
 8010608:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801060c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010610:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010614:	f000 ff6e 	bl	80114f4 <run_xrce_session>
 8010618:	b938      	cbnz	r0, 801062a <rmw_create_publisher+0x1a6>
 801061a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801061c:	b108      	cbz	r0, 8010622 <rmw_create_publisher+0x19e>
 801061e:	f000 fe67 	bl	80112f0 <rmw_uxrce_fini_topic_memory>
 8010622:	4638      	mov	r0, r7
 8010624:	f000 fe0c 	bl	8011240 <rmw_uxrce_fini_publisher_memory>
 8010628:	2700      	movs	r7, #0
 801062a:	4638      	mov	r0, r7
 801062c:	b007      	add	sp, #28
 801062e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010632:	bf00      	nop
 8010634:	2000c434 	.word	0x2000c434
 8010638:	0801e53c 	.word	0x0801e53c
 801063c:	0801da98 	.word	0x0801da98

08010640 <rmw_publisher_get_actual_qos>:
 8010640:	b150      	cbz	r0, 8010658 <rmw_publisher_get_actual_qos+0x18>
 8010642:	b508      	push	{r3, lr}
 8010644:	460b      	mov	r3, r1
 8010646:	b149      	cbz	r1, 801065c <rmw_publisher_get_actual_qos+0x1c>
 8010648:	6841      	ldr	r1, [r0, #4]
 801064a:	2250      	movs	r2, #80	@ 0x50
 801064c:	3128      	adds	r1, #40	@ 0x28
 801064e:	4618      	mov	r0, r3
 8010650:	f00b f879 	bl	801b746 <memcpy>
 8010654:	2000      	movs	r0, #0
 8010656:	bd08      	pop	{r3, pc}
 8010658:	200b      	movs	r0, #11
 801065a:	4770      	bx	lr
 801065c:	200b      	movs	r0, #11
 801065e:	bd08      	pop	{r3, pc}

08010660 <rmw_destroy_publisher>:
 8010660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010662:	b128      	cbz	r0, 8010670 <rmw_destroy_publisher+0x10>
 8010664:	4604      	mov	r4, r0
 8010666:	6800      	ldr	r0, [r0, #0]
 8010668:	460d      	mov	r5, r1
 801066a:	f001 f85d 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 801066e:	b910      	cbnz	r0, 8010676 <rmw_destroy_publisher+0x16>
 8010670:	2401      	movs	r4, #1
 8010672:	4620      	mov	r0, r4
 8010674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010676:	6863      	ldr	r3, [r4, #4]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d0f9      	beq.n	8010670 <rmw_destroy_publisher+0x10>
 801067c:	2d00      	cmp	r5, #0
 801067e:	d0f7      	beq.n	8010670 <rmw_destroy_publisher+0x10>
 8010680:	6828      	ldr	r0, [r5, #0]
 8010682:	f001 f851 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 8010686:	2800      	cmp	r0, #0
 8010688:	d0f2      	beq.n	8010670 <rmw_destroy_publisher+0x10>
 801068a:	686c      	ldr	r4, [r5, #4]
 801068c:	2c00      	cmp	r4, #0
 801068e:	d0ef      	beq.n	8010670 <rmw_destroy_publisher+0x10>
 8010690:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010692:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8010696:	f009 f973 	bl	8019980 <destroy_topic>
 801069a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801069e:	6962      	ldr	r2, [r4, #20]
 80106a0:	6918      	ldr	r0, [r3, #16]
 80106a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80106a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106aa:	6819      	ldr	r1, [r3, #0]
 80106ac:	f002 f908 	bl	80128c0 <uxr_buffer_delete_entity>
 80106b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80106b4:	6922      	ldr	r2, [r4, #16]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80106bc:	4604      	mov	r4, r0
 80106be:	6809      	ldr	r1, [r1, #0]
 80106c0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80106c4:	f002 f8fc 	bl	80128c0 <uxr_buffer_delete_entity>
 80106c8:	693e      	ldr	r6, [r7, #16]
 80106ca:	4622      	mov	r2, r4
 80106cc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80106d0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80106d4:	4604      	mov	r4, r0
 80106d6:	4630      	mov	r0, r6
 80106d8:	f000 ff0c 	bl	80114f4 <run_xrce_session>
 80106dc:	693e      	ldr	r6, [r7, #16]
 80106de:	4622      	mov	r2, r4
 80106e0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80106e4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80106e8:	4604      	mov	r4, r0
 80106ea:	4630      	mov	r0, r6
 80106ec:	f000 ff02 	bl	80114f4 <run_xrce_session>
 80106f0:	b12c      	cbz	r4, 80106fe <rmw_destroy_publisher+0x9e>
 80106f2:	b120      	cbz	r0, 80106fe <rmw_destroy_publisher+0x9e>
 80106f4:	2400      	movs	r4, #0
 80106f6:	4628      	mov	r0, r5
 80106f8:	f000 fda2 	bl	8011240 <rmw_uxrce_fini_publisher_memory>
 80106fc:	e7b9      	b.n	8010672 <rmw_destroy_publisher+0x12>
 80106fe:	2402      	movs	r4, #2
 8010700:	e7f9      	b.n	80106f6 <rmw_destroy_publisher+0x96>
 8010702:	bf00      	nop

08010704 <rmw_send_request>:
 8010704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010708:	4604      	mov	r4, r0
 801070a:	6800      	ldr	r0, [r0, #0]
 801070c:	b08b      	sub	sp, #44	@ 0x2c
 801070e:	460e      	mov	r6, r1
 8010710:	4615      	mov	r5, r2
 8010712:	b128      	cbz	r0, 8010720 <rmw_send_request+0x1c>
 8010714:	4b21      	ldr	r3, [pc, #132]	@ (801079c <rmw_send_request+0x98>)
 8010716:	6819      	ldr	r1, [r3, #0]
 8010718:	f7ef fd82 	bl	8000220 <strcmp>
 801071c:	2800      	cmp	r0, #0
 801071e:	d139      	bne.n	8010794 <rmw_send_request+0x90>
 8010720:	6864      	ldr	r4, [r4, #4]
 8010722:	6963      	ldr	r3, [r4, #20]
 8010724:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8010728:	689b      	ldr	r3, [r3, #8]
 801072a:	4798      	blx	r3
 801072c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010730:	4630      	mov	r0, r6
 8010732:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010736:	4798      	blx	r3
 8010738:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801073c:	9000      	str	r0, [sp, #0]
 801073e:	6922      	ldr	r2, [r4, #16]
 8010740:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8010742:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010746:	ab02      	add	r3, sp, #8
 8010748:	f004 fd18 	bl	801517c <uxr_prepare_output_stream>
 801074c:	2700      	movs	r7, #0
 801074e:	6028      	str	r0, [r5, #0]
 8010750:	606f      	str	r7, [r5, #4]
 8010752:	b198      	cbz	r0, 801077c <rmw_send_request+0x78>
 8010754:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010758:	a902      	add	r1, sp, #8
 801075a:	4630      	mov	r0, r6
 801075c:	4798      	blx	r3
 801075e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8010762:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d00c      	beq.n	8010784 <rmw_send_request+0x80>
 801076a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801076c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010770:	f003 fa30 	bl	8013bd4 <uxr_run_session_until_confirm_delivery>
 8010774:	4638      	mov	r0, r7
 8010776:	b00b      	add	sp, #44	@ 0x2c
 8010778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801077c:	2001      	movs	r0, #1
 801077e:	b00b      	add	sp, #44	@ 0x2c
 8010780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010784:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010788:	f002 fe64 	bl	8013454 <uxr_flash_output_streams>
 801078c:	4638      	mov	r0, r7
 801078e:	b00b      	add	sp, #44	@ 0x2c
 8010790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010794:	200c      	movs	r0, #12
 8010796:	b00b      	add	sp, #44	@ 0x2c
 8010798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801079c:	0801f430 	.word	0x0801f430

080107a0 <rmw_take_request>:
 80107a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107a4:	4605      	mov	r5, r0
 80107a6:	6800      	ldr	r0, [r0, #0]
 80107a8:	b089      	sub	sp, #36	@ 0x24
 80107aa:	460c      	mov	r4, r1
 80107ac:	4690      	mov	r8, r2
 80107ae:	461e      	mov	r6, r3
 80107b0:	b128      	cbz	r0, 80107be <rmw_take_request+0x1e>
 80107b2:	4b28      	ldr	r3, [pc, #160]	@ (8010854 <rmw_take_request+0xb4>)
 80107b4:	6819      	ldr	r1, [r3, #0]
 80107b6:	f7ef fd33 	bl	8000220 <strcmp>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d146      	bne.n	801084c <rmw_take_request+0xac>
 80107be:	b10e      	cbz	r6, 80107c4 <rmw_take_request+0x24>
 80107c0:	2300      	movs	r3, #0
 80107c2:	7033      	strb	r3, [r6, #0]
 80107c4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80107c8:	f000 fe16 	bl	80113f8 <rmw_uxrce_clean_expired_static_input_buffer>
 80107cc:	4648      	mov	r0, r9
 80107ce:	f000 fdeb 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80107d2:	4607      	mov	r7, r0
 80107d4:	b3b0      	cbz	r0, 8010844 <rmw_take_request+0xa4>
 80107d6:	6885      	ldr	r5, [r0, #8]
 80107d8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80107dc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80107e0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80107e4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80107e8:	7423      	strb	r3, [r4, #16]
 80107ea:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80107ee:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80107f2:	74e2      	strb	r2, [r4, #19]
 80107f4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80107f8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80107fc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8010800:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8010804:	61e1      	str	r1, [r4, #28]
 8010806:	6162      	str	r2, [r4, #20]
 8010808:	61a3      	str	r3, [r4, #24]
 801080a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	4798      	blx	r3
 8010812:	6844      	ldr	r4, [r0, #4]
 8010814:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8010818:	f105 0110 	add.w	r1, r5, #16
 801081c:	4668      	mov	r0, sp
 801081e:	f7fc fd8b 	bl	800d338 <ucdr_init_buffer>
 8010822:	68e3      	ldr	r3, [r4, #12]
 8010824:	4641      	mov	r1, r8
 8010826:	4668      	mov	r0, sp
 8010828:	4798      	blx	r3
 801082a:	4639      	mov	r1, r7
 801082c:	4604      	mov	r4, r0
 801082e:	480a      	ldr	r0, [pc, #40]	@ (8010858 <rmw_take_request+0xb8>)
 8010830:	f009 f81a 	bl	8019868 <put_memory>
 8010834:	b106      	cbz	r6, 8010838 <rmw_take_request+0x98>
 8010836:	7034      	strb	r4, [r6, #0]
 8010838:	f084 0001 	eor.w	r0, r4, #1
 801083c:	b2c0      	uxtb	r0, r0
 801083e:	b009      	add	sp, #36	@ 0x24
 8010840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010844:	2001      	movs	r0, #1
 8010846:	b009      	add	sp, #36	@ 0x24
 8010848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801084c:	200c      	movs	r0, #12
 801084e:	b009      	add	sp, #36	@ 0x24
 8010850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010854:	0801f430 	.word	0x0801f430
 8010858:	2000c464 	.word	0x2000c464

0801085c <rmw_send_response>:
 801085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801085e:	4605      	mov	r5, r0
 8010860:	6800      	ldr	r0, [r0, #0]
 8010862:	b091      	sub	sp, #68	@ 0x44
 8010864:	460c      	mov	r4, r1
 8010866:	4616      	mov	r6, r2
 8010868:	b128      	cbz	r0, 8010876 <rmw_send_response+0x1a>
 801086a:	4b29      	ldr	r3, [pc, #164]	@ (8010910 <rmw_send_response+0xb4>)
 801086c:	6819      	ldr	r1, [r3, #0]
 801086e:	f7ef fcd7 	bl	8000220 <strcmp>
 8010872:	2800      	cmp	r0, #0
 8010874:	d141      	bne.n	80108fa <rmw_send_response+0x9e>
 8010876:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801087a:	9306      	str	r3, [sp, #24]
 801087c:	4623      	mov	r3, r4
 801087e:	9207      	str	r2, [sp, #28]
 8010880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010884:	686d      	ldr	r5, [r5, #4]
 8010886:	789b      	ldrb	r3, [r3, #2]
 8010888:	68a1      	ldr	r1, [r4, #8]
 801088a:	f88d 2017 	strb.w	r2, [sp, #23]
 801088e:	f88d 3016 	strb.w	r3, [sp, #22]
 8010892:	68e2      	ldr	r2, [r4, #12]
 8010894:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8010898:	6860      	ldr	r0, [r4, #4]
 801089a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801089e:	ab02      	add	r3, sp, #8
 80108a0:	c307      	stmia	r3!, {r0, r1, r2}
 80108a2:	696b      	ldr	r3, [r5, #20]
 80108a4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	4798      	blx	r3
 80108aa:	6844      	ldr	r4, [r0, #4]
 80108ac:	4630      	mov	r0, r6
 80108ae:	6923      	ldr	r3, [r4, #16]
 80108b0:	4798      	blx	r3
 80108b2:	f100 0318 	add.w	r3, r0, #24
 80108b6:	6938      	ldr	r0, [r7, #16]
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	692a      	ldr	r2, [r5, #16]
 80108bc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80108be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108c2:	ab08      	add	r3, sp, #32
 80108c4:	f004 fc5a 	bl	801517c <uxr_prepare_output_stream>
 80108c8:	b910      	cbnz	r0, 80108d0 <rmw_send_response+0x74>
 80108ca:	2001      	movs	r0, #1
 80108cc:	b011      	add	sp, #68	@ 0x44
 80108ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108d0:	a902      	add	r1, sp, #8
 80108d2:	a808      	add	r0, sp, #32
 80108d4:	f005 fe00 	bl	80164d8 <uxr_serialize_SampleIdentity>
 80108d8:	68a3      	ldr	r3, [r4, #8]
 80108da:	a908      	add	r1, sp, #32
 80108dc:	4630      	mov	r0, r6
 80108de:	4798      	blx	r3
 80108e0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80108e4:	6938      	ldr	r0, [r7, #16]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d00a      	beq.n	8010900 <rmw_send_response+0xa4>
 80108ea:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80108ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108f0:	f003 f970 	bl	8013bd4 <uxr_run_session_until_confirm_delivery>
 80108f4:	2000      	movs	r0, #0
 80108f6:	b011      	add	sp, #68	@ 0x44
 80108f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108fa:	200c      	movs	r0, #12
 80108fc:	b011      	add	sp, #68	@ 0x44
 80108fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010900:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010904:	f002 fda6 	bl	8013454 <uxr_flash_output_streams>
 8010908:	2000      	movs	r0, #0
 801090a:	b011      	add	sp, #68	@ 0x44
 801090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801090e:	bf00      	nop
 8010910:	0801f430 	.word	0x0801f430

08010914 <rmw_take_response>:
 8010914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010918:	4604      	mov	r4, r0
 801091a:	6800      	ldr	r0, [r0, #0]
 801091c:	b088      	sub	sp, #32
 801091e:	4688      	mov	r8, r1
 8010920:	4617      	mov	r7, r2
 8010922:	461d      	mov	r5, r3
 8010924:	b120      	cbz	r0, 8010930 <rmw_take_response+0x1c>
 8010926:	4b1e      	ldr	r3, [pc, #120]	@ (80109a0 <rmw_take_response+0x8c>)
 8010928:	6819      	ldr	r1, [r3, #0]
 801092a:	f7ef fc79 	bl	8000220 <strcmp>
 801092e:	bb78      	cbnz	r0, 8010990 <rmw_take_response+0x7c>
 8010930:	b10d      	cbz	r5, 8010936 <rmw_take_response+0x22>
 8010932:	2300      	movs	r3, #0
 8010934:	702b      	strb	r3, [r5, #0]
 8010936:	6864      	ldr	r4, [r4, #4]
 8010938:	f000 fd5e 	bl	80113f8 <rmw_uxrce_clean_expired_static_input_buffer>
 801093c:	4620      	mov	r0, r4
 801093e:	f000 fd33 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010942:	4606      	mov	r6, r0
 8010944:	b340      	cbz	r0, 8010998 <rmw_take_response+0x84>
 8010946:	6963      	ldr	r3, [r4, #20]
 8010948:	6884      	ldr	r4, [r0, #8]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8010950:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8010954:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8010958:	4798      	blx	r3
 801095a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801095e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8010962:	f104 0110 	add.w	r1, r4, #16
 8010966:	4668      	mov	r0, sp
 8010968:	f7fc fce6 	bl	800d338 <ucdr_init_buffer>
 801096c:	4639      	mov	r1, r7
 801096e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010972:	4668      	mov	r0, sp
 8010974:	4798      	blx	r3
 8010976:	4631      	mov	r1, r6
 8010978:	4604      	mov	r4, r0
 801097a:	480a      	ldr	r0, [pc, #40]	@ (80109a4 <rmw_take_response+0x90>)
 801097c:	f008 ff74 	bl	8019868 <put_memory>
 8010980:	b105      	cbz	r5, 8010984 <rmw_take_response+0x70>
 8010982:	702c      	strb	r4, [r5, #0]
 8010984:	f084 0001 	eor.w	r0, r4, #1
 8010988:	b2c0      	uxtb	r0, r0
 801098a:	b008      	add	sp, #32
 801098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010990:	200c      	movs	r0, #12
 8010992:	b008      	add	sp, #32
 8010994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010998:	2001      	movs	r0, #1
 801099a:	b008      	add	sp, #32
 801099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a0:	0801f430 	.word	0x0801f430
 80109a4:	2000c464 	.word	0x2000c464

080109a8 <rmw_create_service>:
 80109a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ac:	b091      	sub	sp, #68	@ 0x44
 80109ae:	2800      	cmp	r0, #0
 80109b0:	f000 80ba 	beq.w	8010b28 <rmw_create_service+0x180>
 80109b4:	4689      	mov	r9, r1
 80109b6:	2900      	cmp	r1, #0
 80109b8:	f000 80b6 	beq.w	8010b28 <rmw_create_service+0x180>
 80109bc:	4606      	mov	r6, r0
 80109be:	6800      	ldr	r0, [r0, #0]
 80109c0:	4614      	mov	r4, r2
 80109c2:	461d      	mov	r5, r3
 80109c4:	f000 feb0 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 80109c8:	2800      	cmp	r0, #0
 80109ca:	f000 80ad 	beq.w	8010b28 <rmw_create_service+0x180>
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	f000 80aa 	beq.w	8010b28 <rmw_create_service+0x180>
 80109d4:	7823      	ldrb	r3, [r4, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	f000 80a6 	beq.w	8010b28 <rmw_create_service+0x180>
 80109dc:	2d00      	cmp	r5, #0
 80109de:	f000 80a3 	beq.w	8010b28 <rmw_create_service+0x180>
 80109e2:	4854      	ldr	r0, [pc, #336]	@ (8010b34 <rmw_create_service+0x18c>)
 80109e4:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80109e8:	f008 ff2e 	bl	8019848 <get_memory>
 80109ec:	4606      	mov	r6, r0
 80109ee:	2800      	cmp	r0, #0
 80109f0:	f000 809b 	beq.w	8010b2a <rmw_create_service+0x182>
 80109f4:	6887      	ldr	r7, [r0, #8]
 80109f6:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80109fa:	f7ff f965 	bl	800fcc8 <rmw_get_implementation_identifier>
 80109fe:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8010a02:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010a04:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f7ef fc13 	bl	8000234 <strlen>
 8010a0e:	1c42      	adds	r2, r0, #1
 8010a10:	2a3c      	cmp	r2, #60	@ 0x3c
 8010a12:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 8010a16:	f200 8084 	bhi.w	8010b22 <rmw_create_service+0x17a>
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	4650      	mov	r0, sl
 8010a1e:	f00a fe92 	bl	801b746 <memcpy>
 8010a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a26:	4629      	mov	r1, r5
 8010a28:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8010a2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8010a2e:	2250      	movs	r2, #80	@ 0x50
 8010a30:	f107 0020 	add.w	r0, r7, #32
 8010a34:	f00a fe87 	bl	801b746 <memcpy>
 8010a38:	493f      	ldr	r1, [pc, #252]	@ (8010b38 <rmw_create_service+0x190>)
 8010a3a:	4648      	mov	r0, r9
 8010a3c:	f000 fe8e 	bl	801175c <get_service_typesupport_handle>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d06e      	beq.n	8010b22 <rmw_create_service+0x17a>
 8010a44:	6843      	ldr	r3, [r0, #4]
 8010a46:	617b      	str	r3, [r7, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d06a      	beq.n	8010b22 <rmw_create_service+0x17a>
 8010a4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010a50:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8010b40 <rmw_create_service+0x198>
 8010a54:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8010b44 <rmw_create_service+0x19c>
 8010a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a5c:	2108      	movs	r1, #8
 8010a5e:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8010a62:	1c42      	adds	r2, r0, #1
 8010a64:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8010a68:	f002 fa62 	bl	8012f30 <uxr_object_id>
 8010a6c:	2364      	movs	r3, #100	@ 0x64
 8010a6e:	6138      	str	r0, [r7, #16]
 8010a70:	4652      	mov	r2, sl
 8010a72:	6978      	ldr	r0, [r7, #20]
 8010a74:	4649      	mov	r1, r9
 8010a76:	f000 fda5 	bl	80115c4 <generate_service_types>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d051      	beq.n	8010b22 <rmw_create_service+0x17a>
 8010a7e:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8010b48 <rmw_create_service+0x1a0>
 8010a82:	4a2e      	ldr	r2, [pc, #184]	@ (8010b3c <rmw_create_service+0x194>)
 8010a84:	233c      	movs	r3, #60	@ 0x3c
 8010a86:	4659      	mov	r1, fp
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f000 fd69 	bl	8011560 <generate_service_topics>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	d047      	beq.n	8010b22 <rmw_create_service+0x17a>
 8010a92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010a96:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8010a9a:	a80c      	add	r0, sp, #48	@ 0x30
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010aa2:	f000 fd43 	bl	801152c <convert_qos_profile>
 8010aa6:	4a25      	ldr	r2, [pc, #148]	@ (8010b3c <rmw_create_service+0x194>)
 8010aa8:	9400      	str	r4, [sp, #0]
 8010aaa:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010aae:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8010ab2:	a80c      	add	r0, sp, #48	@ 0x30
 8010ab4:	c803      	ldmia	r0, {r0, r1}
 8010ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab8:	9005      	str	r0, [sp, #20]
 8010aba:	9a08      	ldr	r2, [sp, #32]
 8010abc:	f8ad 1018 	strh.w	r1, [sp, #24]
 8010ac0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010ac4:	2306      	movs	r3, #6
 8010ac6:	9307      	str	r3, [sp, #28]
 8010ac8:	6811      	ldr	r1, [r2, #0]
 8010aca:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010ace:	693a      	ldr	r2, [r7, #16]
 8010ad0:	f002 f932 	bl	8012d38 <uxr_buffer_create_replier_bin>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010ada:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010ade:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010ae2:	f000 fd07 	bl	80114f4 <run_xrce_session>
 8010ae6:	b1e0      	cbz	r0, 8010b22 <rmw_create_service+0x17a>
 8010ae8:	7a2b      	ldrb	r3, [r5, #8]
 8010aea:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010aee:	2200      	movs	r2, #0
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010af6:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8010afa:	bf0c      	ite	eq
 8010afc:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8010b00:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8010b04:	673a      	str	r2, [r7, #112]	@ 0x70
 8010b06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b08:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010b0c:	ab0e      	add	r3, sp, #56	@ 0x38
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	6811      	ldr	r1, [r2, #0]
 8010b12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b14:	693a      	ldr	r2, [r7, #16]
 8010b16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b1a:	f002 fa39 	bl	8012f90 <uxr_buffer_request_data>
 8010b1e:	8338      	strh	r0, [r7, #24]
 8010b20:	e003      	b.n	8010b2a <rmw_create_service+0x182>
 8010b22:	4630      	mov	r0, r6
 8010b24:	f000 fbb8 	bl	8011298 <rmw_uxrce_fini_service_memory>
 8010b28:	2600      	movs	r6, #0
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	b011      	add	sp, #68	@ 0x44
 8010b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b32:	bf00      	nop
 8010b34:	2000c444 	.word	0x2000c444
 8010b38:	0801da98 	.word	0x0801da98
 8010b3c:	200079f0 	.word	0x200079f0
 8010b40:	20007a2c 	.word	0x20007a2c
 8010b44:	2000798c 	.word	0x2000798c
 8010b48:	20007950 	.word	0x20007950

08010b4c <rmw_destroy_service>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	b128      	cbz	r0, 8010b5c <rmw_destroy_service+0x10>
 8010b50:	4604      	mov	r4, r0
 8010b52:	6800      	ldr	r0, [r0, #0]
 8010b54:	460d      	mov	r5, r1
 8010b56:	f000 fde7 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 8010b5a:	b910      	cbnz	r0, 8010b62 <rmw_destroy_service+0x16>
 8010b5c:	2401      	movs	r4, #1
 8010b5e:	4620      	mov	r0, r4
 8010b60:	bd70      	pop	{r4, r5, r6, pc}
 8010b62:	6863      	ldr	r3, [r4, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d0f9      	beq.n	8010b5c <rmw_destroy_service+0x10>
 8010b68:	2d00      	cmp	r5, #0
 8010b6a:	d0f7      	beq.n	8010b5c <rmw_destroy_service+0x10>
 8010b6c:	6828      	ldr	r0, [r5, #0]
 8010b6e:	f000 fddb 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	d0f2      	beq.n	8010b5c <rmw_destroy_service+0x10>
 8010b76:	686e      	ldr	r6, [r5, #4]
 8010b78:	2e00      	cmp	r6, #0
 8010b7a:	d0ef      	beq.n	8010b5c <rmw_destroy_service+0x10>
 8010b7c:	6864      	ldr	r4, [r4, #4]
 8010b7e:	6932      	ldr	r2, [r6, #16]
 8010b80:	6920      	ldr	r0, [r4, #16]
 8010b82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010b86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b8a:	6819      	ldr	r1, [r3, #0]
 8010b8c:	f002 fa3a 	bl	8013004 <uxr_buffer_cancel_data>
 8010b90:	4602      	mov	r2, r0
 8010b92:	6920      	ldr	r0, [r4, #16]
 8010b94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010b98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010b9c:	f000 fcaa 	bl	80114f4 <run_xrce_session>
 8010ba0:	6920      	ldr	r0, [r4, #16]
 8010ba2:	6932      	ldr	r2, [r6, #16]
 8010ba4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010ba8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010bac:	6819      	ldr	r1, [r3, #0]
 8010bae:	f001 fe87 	bl	80128c0 <uxr_buffer_delete_entity>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	6920      	ldr	r0, [r4, #16]
 8010bb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010bba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010bbe:	f000 fc99 	bl	80114f4 <run_xrce_session>
 8010bc2:	2800      	cmp	r0, #0
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	bf14      	ite	ne
 8010bc8:	2400      	movne	r4, #0
 8010bca:	2402      	moveq	r4, #2
 8010bcc:	f000 fb64 	bl	8011298 <rmw_uxrce_fini_service_memory>
 8010bd0:	e7c5      	b.n	8010b5e <rmw_destroy_service+0x12>
 8010bd2:	bf00      	nop

08010bd4 <rmw_service_response_publisher_get_actual_qos>:
 8010bd4:	b150      	cbz	r0, 8010bec <rmw_service_response_publisher_get_actual_qos+0x18>
 8010bd6:	b508      	push	{r3, lr}
 8010bd8:	460b      	mov	r3, r1
 8010bda:	b149      	cbz	r1, 8010bf0 <rmw_service_response_publisher_get_actual_qos+0x1c>
 8010bdc:	6841      	ldr	r1, [r0, #4]
 8010bde:	2250      	movs	r2, #80	@ 0x50
 8010be0:	3120      	adds	r1, #32
 8010be2:	4618      	mov	r0, r3
 8010be4:	f00a fdaf 	bl	801b746 <memcpy>
 8010be8:	2000      	movs	r0, #0
 8010bea:	bd08      	pop	{r3, pc}
 8010bec:	200b      	movs	r0, #11
 8010bee:	4770      	bx	lr
 8010bf0:	200b      	movs	r0, #11
 8010bf2:	bd08      	pop	{r3, pc}

08010bf4 <rmw_service_request_subscription_get_actual_qos>:
 8010bf4:	b150      	cbz	r0, 8010c0c <rmw_service_request_subscription_get_actual_qos+0x18>
 8010bf6:	b508      	push	{r3, lr}
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	b149      	cbz	r1, 8010c10 <rmw_service_request_subscription_get_actual_qos+0x1c>
 8010bfc:	6841      	ldr	r1, [r0, #4]
 8010bfe:	2250      	movs	r2, #80	@ 0x50
 8010c00:	3120      	adds	r1, #32
 8010c02:	4618      	mov	r0, r3
 8010c04:	f00a fd9f 	bl	801b746 <memcpy>
 8010c08:	2000      	movs	r0, #0
 8010c0a:	bd08      	pop	{r3, pc}
 8010c0c:	200b      	movs	r0, #11
 8010c0e:	4770      	bx	lr
 8010c10:	200b      	movs	r0, #11
 8010c12:	bd08      	pop	{r3, pc}

08010c14 <rmw_create_subscription>:
 8010c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c18:	b08d      	sub	sp, #52	@ 0x34
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	f000 80d1 	beq.w	8010dc2 <rmw_create_subscription+0x1ae>
 8010c20:	460e      	mov	r6, r1
 8010c22:	2900      	cmp	r1, #0
 8010c24:	f000 80cd 	beq.w	8010dc2 <rmw_create_subscription+0x1ae>
 8010c28:	4604      	mov	r4, r0
 8010c2a:	6800      	ldr	r0, [r0, #0]
 8010c2c:	4615      	mov	r5, r2
 8010c2e:	4698      	mov	r8, r3
 8010c30:	f000 fd7a 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	f000 80c4 	beq.w	8010dc2 <rmw_create_subscription+0x1ae>
 8010c3a:	2d00      	cmp	r5, #0
 8010c3c:	f000 80c1 	beq.w	8010dc2 <rmw_create_subscription+0x1ae>
 8010c40:	782b      	ldrb	r3, [r5, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f000 80bd 	beq.w	8010dc2 <rmw_create_subscription+0x1ae>
 8010c48:	f1b8 0f00 	cmp.w	r8, #0
 8010c4c:	f000 80b9 	beq.w	8010dc2 <rmw_create_subscription+0x1ae>
 8010c50:	485e      	ldr	r0, [pc, #376]	@ (8010dcc <rmw_create_subscription+0x1b8>)
 8010c52:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010c56:	f008 fdf7 	bl	8019848 <get_memory>
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	f000 80b1 	beq.w	8010dc4 <rmw_create_subscription+0x1b0>
 8010c62:	6887      	ldr	r7, [r0, #8]
 8010c64:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8010c68:	f7ff f82e 	bl	800fcc8 <rmw_get_implementation_identifier>
 8010c6c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8010c70:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010c72:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8010c76:	4628      	mov	r0, r5
 8010c78:	f7ef fadc 	bl	8000234 <strlen>
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	283c      	cmp	r0, #60	@ 0x3c
 8010c80:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8010c84:	f200 8096 	bhi.w	8010db4 <rmw_create_subscription+0x1a0>
 8010c88:	4a51      	ldr	r2, [pc, #324]	@ (8010dd0 <rmw_create_subscription+0x1bc>)
 8010c8a:	462b      	mov	r3, r5
 8010c8c:	213c      	movs	r1, #60	@ 0x3c
 8010c8e:	4650      	mov	r0, sl
 8010c90:	f00a fb22 	bl	801b2d8 <sniprintf>
 8010c94:	4641      	mov	r1, r8
 8010c96:	f8c7 9020 	str.w	r9, [r7, #32]
 8010c9a:	2250      	movs	r2, #80	@ 0x50
 8010c9c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8010ca0:	f00a fd51 	bl	801b746 <memcpy>
 8010ca4:	494b      	ldr	r1, [pc, #300]	@ (8010dd4 <rmw_create_subscription+0x1c0>)
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f000 fd4c 	bl	8011744 <get_message_typesupport_handle>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	f000 8081 	beq.w	8010db4 <rmw_create_subscription+0x1a0>
 8010cb2:	6842      	ldr	r2, [r0, #4]
 8010cb4:	61ba      	str	r2, [r7, #24]
 8010cb6:	2a00      	cmp	r2, #0
 8010cb8:	d07c      	beq.n	8010db4 <rmw_create_subscription+0x1a0>
 8010cba:	4629      	mov	r1, r5
 8010cbc:	4643      	mov	r3, r8
 8010cbe:	4648      	mov	r0, r9
 8010cc0:	f008 fe0e 	bl	80198e0 <create_topic>
 8010cc4:	61f8      	str	r0, [r7, #28]
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d078      	beq.n	8010dbc <rmw_create_subscription+0x1a8>
 8010cca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010cd2:	2104      	movs	r1, #4
 8010cd4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8010cd8:	1c42      	adds	r2, r0, #1
 8010cda:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8010cde:	f002 f927 	bl	8012f30 <uxr_object_id>
 8010ce2:	6138      	str	r0, [r7, #16]
 8010ce4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010ce8:	2506      	movs	r5, #6
 8010cea:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8010cee:	9500      	str	r5, [sp, #0]
 8010cf0:	6819      	ldr	r1, [r3, #0]
 8010cf2:	693a      	ldr	r2, [r7, #16]
 8010cf4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010cf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010cfc:	f001 fec4 	bl	8012a88 <uxr_buffer_create_subscriber_bin>
 8010d00:	4602      	mov	r2, r0
 8010d02:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010d06:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010d0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010d0e:	f000 fbf1 	bl	80114f4 <run_xrce_session>
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d04e      	beq.n	8010db4 <rmw_create_subscription+0x1a0>
 8010d16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010d1e:	4629      	mov	r1, r5
 8010d20:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8010d24:	1c42      	adds	r2, r0, #1
 8010d26:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8010d2a:	f002 f901 	bl	8012f30 <uxr_object_id>
 8010d2e:	ae08      	add	r6, sp, #32
 8010d30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	6178      	str	r0, [r7, #20]
 8010d38:	4641      	mov	r1, r8
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8010d40:	9305      	str	r3, [sp, #20]
 8010d42:	f000 fbf3 	bl	801152c <convert_qos_profile>
 8010d46:	9503      	str	r5, [sp, #12]
 8010d48:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010d4c:	9b05      	ldr	r3, [sp, #20]
 8010d4e:	9001      	str	r0, [sp, #4]
 8010d50:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010d5c:	f8db 1000 	ldr.w	r1, [fp]
 8010d60:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8010d64:	f001 ff36 	bl	8012bd4 <uxr_buffer_create_datareader_bin>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010d6e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010d72:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010d76:	f000 fbbd 	bl	80114f4 <run_xrce_session>
 8010d7a:	b1d8      	cbz	r0, 8010db4 <rmw_create_subscription+0x1a0>
 8010d7c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010d80:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010d84:	2b02      	cmp	r3, #2
 8010d86:	bf0c      	ite	eq
 8010d88:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8010d8c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8010d90:	9307      	str	r3, [sp, #28]
 8010d92:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010d96:	2200      	movs	r2, #0
 8010d98:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8010d9c:	ab0a      	add	r3, sp, #40	@ 0x28
 8010d9e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	697a      	ldr	r2, [r7, #20]
 8010da6:	9b07      	ldr	r3, [sp, #28]
 8010da8:	6809      	ldr	r1, [r1, #0]
 8010daa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010dae:	f002 f8ef 	bl	8012f90 <uxr_buffer_request_data>
 8010db2:	e007      	b.n	8010dc4 <rmw_create_subscription+0x1b0>
 8010db4:	69f8      	ldr	r0, [r7, #28]
 8010db6:	b108      	cbz	r0, 8010dbc <rmw_create_subscription+0x1a8>
 8010db8:	f000 fa9a 	bl	80112f0 <rmw_uxrce_fini_topic_memory>
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f000 fa55 	bl	801126c <rmw_uxrce_fini_subscription_memory>
 8010dc2:	2400      	movs	r4, #0
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	b00d      	add	sp, #52	@ 0x34
 8010dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dcc:	2000c474 	.word	0x2000c474
 8010dd0:	0801e53c 	.word	0x0801e53c
 8010dd4:	0801da98 	.word	0x0801da98

08010dd8 <rmw_subscription_get_actual_qos>:
 8010dd8:	b150      	cbz	r0, 8010df0 <rmw_subscription_get_actual_qos+0x18>
 8010dda:	b508      	push	{r3, lr}
 8010ddc:	460b      	mov	r3, r1
 8010dde:	b149      	cbz	r1, 8010df4 <rmw_subscription_get_actual_qos+0x1c>
 8010de0:	6841      	ldr	r1, [r0, #4]
 8010de2:	2250      	movs	r2, #80	@ 0x50
 8010de4:	3128      	adds	r1, #40	@ 0x28
 8010de6:	4618      	mov	r0, r3
 8010de8:	f00a fcad 	bl	801b746 <memcpy>
 8010dec:	2000      	movs	r0, #0
 8010dee:	bd08      	pop	{r3, pc}
 8010df0:	200b      	movs	r0, #11
 8010df2:	4770      	bx	lr
 8010df4:	200b      	movs	r0, #11
 8010df6:	bd08      	pop	{r3, pc}

08010df8 <rmw_destroy_subscription>:
 8010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfa:	b128      	cbz	r0, 8010e08 <rmw_destroy_subscription+0x10>
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	6800      	ldr	r0, [r0, #0]
 8010e00:	460d      	mov	r5, r1
 8010e02:	f000 fc91 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 8010e06:	b910      	cbnz	r0, 8010e0e <rmw_destroy_subscription+0x16>
 8010e08:	2401      	movs	r4, #1
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0e:	6863      	ldr	r3, [r4, #4]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d0f9      	beq.n	8010e08 <rmw_destroy_subscription+0x10>
 8010e14:	2d00      	cmp	r5, #0
 8010e16:	d0f7      	beq.n	8010e08 <rmw_destroy_subscription+0x10>
 8010e18:	6828      	ldr	r0, [r5, #0]
 8010e1a:	f000 fc85 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d0f2      	beq.n	8010e08 <rmw_destroy_subscription+0x10>
 8010e22:	686c      	ldr	r4, [r5, #4]
 8010e24:	2c00      	cmp	r4, #0
 8010e26:	d0ef      	beq.n	8010e08 <rmw_destroy_subscription+0x10>
 8010e28:	6a26      	ldr	r6, [r4, #32]
 8010e2a:	6962      	ldr	r2, [r4, #20]
 8010e2c:	6930      	ldr	r0, [r6, #16]
 8010e2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010e32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e36:	6819      	ldr	r1, [r3, #0]
 8010e38:	f002 f8e4 	bl	8013004 <uxr_buffer_cancel_data>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	6930      	ldr	r0, [r6, #16]
 8010e40:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010e44:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010e48:	f000 fb54 	bl	80114f4 <run_xrce_session>
 8010e4c:	69e0      	ldr	r0, [r4, #28]
 8010e4e:	f008 fd97 	bl	8019980 <destroy_topic>
 8010e52:	6a23      	ldr	r3, [r4, #32]
 8010e54:	6962      	ldr	r2, [r4, #20]
 8010e56:	6918      	ldr	r0, [r3, #16]
 8010e58:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010e5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e60:	6819      	ldr	r1, [r3, #0]
 8010e62:	f001 fd2d 	bl	80128c0 <uxr_buffer_delete_entity>
 8010e66:	6a23      	ldr	r3, [r4, #32]
 8010e68:	6922      	ldr	r2, [r4, #16]
 8010e6a:	691b      	ldr	r3, [r3, #16]
 8010e6c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010e70:	4604      	mov	r4, r0
 8010e72:	6809      	ldr	r1, [r1, #0]
 8010e74:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010e78:	f001 fd22 	bl	80128c0 <uxr_buffer_delete_entity>
 8010e7c:	6937      	ldr	r7, [r6, #16]
 8010e7e:	4622      	mov	r2, r4
 8010e80:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010e84:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010e88:	4604      	mov	r4, r0
 8010e8a:	4638      	mov	r0, r7
 8010e8c:	f000 fb32 	bl	80114f4 <run_xrce_session>
 8010e90:	6936      	ldr	r6, [r6, #16]
 8010e92:	4622      	mov	r2, r4
 8010e94:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010e98:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	f000 fb28 	bl	80114f4 <run_xrce_session>
 8010ea4:	b12c      	cbz	r4, 8010eb2 <rmw_destroy_subscription+0xba>
 8010ea6:	b120      	cbz	r0, 8010eb2 <rmw_destroy_subscription+0xba>
 8010ea8:	2400      	movs	r4, #0
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 f9de 	bl	801126c <rmw_uxrce_fini_subscription_memory>
 8010eb0:	e7ab      	b.n	8010e0a <rmw_destroy_subscription+0x12>
 8010eb2:	2402      	movs	r4, #2
 8010eb4:	e7f9      	b.n	8010eaa <rmw_destroy_subscription+0xb2>
 8010eb6:	bf00      	nop

08010eb8 <rmw_uxrce_transport_init>:
 8010eb8:	b508      	push	{r3, lr}
 8010eba:	b108      	cbz	r0, 8010ec0 <rmw_uxrce_transport_init+0x8>
 8010ebc:	f100 0210 	add.w	r2, r0, #16
 8010ec0:	b139      	cbz	r1, 8010ed2 <rmw_uxrce_transport_init+0x1a>
 8010ec2:	6949      	ldr	r1, [r1, #20]
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	f001 fffb 	bl	8012ec0 <uxr_init_custom_transport>
 8010eca:	f080 0001 	eor.w	r0, r0, #1
 8010ece:	b2c0      	uxtb	r0, r0
 8010ed0:	bd08      	pop	{r3, pc}
 8010ed2:	4b04      	ldr	r3, [pc, #16]	@ (8010ee4 <rmw_uxrce_transport_init+0x2c>)
 8010ed4:	4610      	mov	r0, r2
 8010ed6:	6859      	ldr	r1, [r3, #4]
 8010ed8:	f001 fff2 	bl	8012ec0 <uxr_init_custom_transport>
 8010edc:	f080 0001 	eor.w	r0, r0, #1
 8010ee0:	b2c0      	uxtb	r0, r0
 8010ee2:	bd08      	pop	{r3, pc}
 8010ee4:	200077b8 	.word	0x200077b8

08010ee8 <rmw_uros_epoch_millis>:
 8010ee8:	4b05      	ldr	r3, [pc, #20]	@ (8010f00 <rmw_uros_epoch_millis+0x18>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	b123      	cbz	r3, 8010ef8 <rmw_uros_epoch_millis+0x10>
 8010eee:	6898      	ldr	r0, [r3, #8]
 8010ef0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ef4:	f002 ba92 	b.w	801341c <uxr_epoch_millis>
 8010ef8:	2000      	movs	r0, #0
 8010efa:	2100      	movs	r1, #0
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	2000c454 	.word	0x2000c454

08010f04 <rmw_uros_epoch_nanos>:
 8010f04:	4b05      	ldr	r3, [pc, #20]	@ (8010f1c <rmw_uros_epoch_nanos+0x18>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	b123      	cbz	r3, 8010f14 <rmw_uros_epoch_nanos+0x10>
 8010f0a:	6898      	ldr	r0, [r3, #8]
 8010f0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f10:	f002 ba96 	b.w	8013440 <uxr_epoch_nanos>
 8010f14:	2000      	movs	r0, #0
 8010f16:	2100      	movs	r1, #0
 8010f18:	4770      	bx	lr
 8010f1a:	bf00      	nop
 8010f1c:	2000c454 	.word	0x2000c454

08010f20 <rmw_uros_sync_session>:
 8010f20:	b508      	push	{r3, lr}
 8010f22:	4b07      	ldr	r3, [pc, #28]	@ (8010f40 <rmw_uros_sync_session+0x20>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	b14b      	cbz	r3, 8010f3c <rmw_uros_sync_session+0x1c>
 8010f28:	4601      	mov	r1, r0
 8010f2a:	6898      	ldr	r0, [r3, #8]
 8010f2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f30:	f002 feca 	bl	8013cc8 <uxr_sync_session>
 8010f34:	f080 0001 	eor.w	r0, r0, #1
 8010f38:	b2c0      	uxtb	r0, r0
 8010f3a:	bd08      	pop	{r3, pc}
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	bd08      	pop	{r3, pc}
 8010f40:	2000c454 	.word	0x2000c454

08010f44 <rmw_uxrce_init_service_memory>:
 8010f44:	b1e2      	cbz	r2, 8010f80 <rmw_uxrce_init_service_memory+0x3c>
 8010f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4a:	7b05      	ldrb	r5, [r0, #12]
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	b9ad      	cbnz	r5, 8010f7c <rmw_uxrce_init_service_memory+0x38>
 8010f50:	23c8      	movs	r3, #200	@ 0xc8
 8010f52:	e9c0 5500 	strd	r5, r5, [r0]
 8010f56:	6083      	str	r3, [r0, #8]
 8010f58:	f240 1301 	movw	r3, #257	@ 0x101
 8010f5c:	4617      	mov	r7, r2
 8010f5e:	8183      	strh	r3, [r0, #12]
 8010f60:	460c      	mov	r4, r1
 8010f62:	46a8      	mov	r8, r5
 8010f64:	4621      	mov	r1, r4
 8010f66:	4630      	mov	r0, r6
 8010f68:	3501      	adds	r5, #1
 8010f6a:	f008 fc7d 	bl	8019868 <put_memory>
 8010f6e:	42af      	cmp	r7, r5
 8010f70:	60a4      	str	r4, [r4, #8]
 8010f72:	f884 800c 	strb.w	r8, [r4, #12]
 8010f76:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010f7a:	d1f3      	bne.n	8010f64 <rmw_uxrce_init_service_memory+0x20>
 8010f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f80:	4770      	bx	lr
 8010f82:	bf00      	nop

08010f84 <rmw_uxrce_init_client_memory>:
 8010f84:	b1e2      	cbz	r2, 8010fc0 <rmw_uxrce_init_client_memory+0x3c>
 8010f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f8a:	7b05      	ldrb	r5, [r0, #12]
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	b9ad      	cbnz	r5, 8010fbc <rmw_uxrce_init_client_memory+0x38>
 8010f90:	23c8      	movs	r3, #200	@ 0xc8
 8010f92:	e9c0 5500 	strd	r5, r5, [r0]
 8010f96:	6083      	str	r3, [r0, #8]
 8010f98:	f240 1301 	movw	r3, #257	@ 0x101
 8010f9c:	4617      	mov	r7, r2
 8010f9e:	8183      	strh	r3, [r0, #12]
 8010fa0:	460c      	mov	r4, r1
 8010fa2:	46a8      	mov	r8, r5
 8010fa4:	4621      	mov	r1, r4
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	3501      	adds	r5, #1
 8010faa:	f008 fc5d 	bl	8019868 <put_memory>
 8010fae:	42af      	cmp	r7, r5
 8010fb0:	60a4      	str	r4, [r4, #8]
 8010fb2:	f884 800c 	strb.w	r8, [r4, #12]
 8010fb6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010fba:	d1f3      	bne.n	8010fa4 <rmw_uxrce_init_client_memory+0x20>
 8010fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop

08010fc4 <rmw_uxrce_init_publisher_memory>:
 8010fc4:	b1e2      	cbz	r2, 8011000 <rmw_uxrce_init_publisher_memory+0x3c>
 8010fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fca:	7b05      	ldrb	r5, [r0, #12]
 8010fcc:	4606      	mov	r6, r0
 8010fce:	b9ad      	cbnz	r5, 8010ffc <rmw_uxrce_init_publisher_memory+0x38>
 8010fd0:	23d8      	movs	r3, #216	@ 0xd8
 8010fd2:	e9c0 5500 	strd	r5, r5, [r0]
 8010fd6:	6083      	str	r3, [r0, #8]
 8010fd8:	f240 1301 	movw	r3, #257	@ 0x101
 8010fdc:	4617      	mov	r7, r2
 8010fde:	8183      	strh	r3, [r0, #12]
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	46a8      	mov	r8, r5
 8010fe4:	4621      	mov	r1, r4
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	3501      	adds	r5, #1
 8010fea:	f008 fc3d 	bl	8019868 <put_memory>
 8010fee:	42af      	cmp	r7, r5
 8010ff0:	60a4      	str	r4, [r4, #8]
 8010ff2:	f884 800c 	strb.w	r8, [r4, #12]
 8010ff6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010ffa:	d1f3      	bne.n	8010fe4 <rmw_uxrce_init_publisher_memory+0x20>
 8010ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011000:	4770      	bx	lr
 8011002:	bf00      	nop

08011004 <rmw_uxrce_init_subscription_memory>:
 8011004:	b1e2      	cbz	r2, 8011040 <rmw_uxrce_init_subscription_memory+0x3c>
 8011006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801100a:	7b05      	ldrb	r5, [r0, #12]
 801100c:	4606      	mov	r6, r0
 801100e:	b9ad      	cbnz	r5, 801103c <rmw_uxrce_init_subscription_memory+0x38>
 8011010:	23d8      	movs	r3, #216	@ 0xd8
 8011012:	e9c0 5500 	strd	r5, r5, [r0]
 8011016:	6083      	str	r3, [r0, #8]
 8011018:	f240 1301 	movw	r3, #257	@ 0x101
 801101c:	4617      	mov	r7, r2
 801101e:	8183      	strh	r3, [r0, #12]
 8011020:	460c      	mov	r4, r1
 8011022:	46a8      	mov	r8, r5
 8011024:	4621      	mov	r1, r4
 8011026:	4630      	mov	r0, r6
 8011028:	3501      	adds	r5, #1
 801102a:	f008 fc1d 	bl	8019868 <put_memory>
 801102e:	42af      	cmp	r7, r5
 8011030:	60a4      	str	r4, [r4, #8]
 8011032:	f884 800c 	strb.w	r8, [r4, #12]
 8011036:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801103a:	d1f3      	bne.n	8011024 <rmw_uxrce_init_subscription_memory+0x20>
 801103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011040:	4770      	bx	lr
 8011042:	bf00      	nop

08011044 <rmw_uxrce_init_node_memory>:
 8011044:	b1e2      	cbz	r2, 8011080 <rmw_uxrce_init_node_memory+0x3c>
 8011046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801104a:	7b05      	ldrb	r5, [r0, #12]
 801104c:	4606      	mov	r6, r0
 801104e:	b9ad      	cbnz	r5, 801107c <rmw_uxrce_init_node_memory+0x38>
 8011050:	23a4      	movs	r3, #164	@ 0xa4
 8011052:	e9c0 5500 	strd	r5, r5, [r0]
 8011056:	6083      	str	r3, [r0, #8]
 8011058:	f240 1301 	movw	r3, #257	@ 0x101
 801105c:	4617      	mov	r7, r2
 801105e:	8183      	strh	r3, [r0, #12]
 8011060:	460c      	mov	r4, r1
 8011062:	46a8      	mov	r8, r5
 8011064:	4621      	mov	r1, r4
 8011066:	4630      	mov	r0, r6
 8011068:	3501      	adds	r5, #1
 801106a:	f008 fbfd 	bl	8019868 <put_memory>
 801106e:	42af      	cmp	r7, r5
 8011070:	60a4      	str	r4, [r4, #8]
 8011072:	f884 800c 	strb.w	r8, [r4, #12]
 8011076:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801107a:	d1f3      	bne.n	8011064 <rmw_uxrce_init_node_memory+0x20>
 801107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop

08011084 <rmw_uxrce_init_session_memory>:
 8011084:	b1ea      	cbz	r2, 80110c2 <rmw_uxrce_init_session_memory+0x3e>
 8011086:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801108a:	7b05      	ldrb	r5, [r0, #12]
 801108c:	4606      	mov	r6, r0
 801108e:	b9b5      	cbnz	r5, 80110be <rmw_uxrce_init_session_memory+0x3a>
 8011090:	e9c0 5500 	strd	r5, r5, [r0]
 8011094:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011098:	f240 1301 	movw	r3, #257	@ 0x101
 801109c:	4617      	mov	r7, r2
 801109e:	f8c0 8008 	str.w	r8, [r0, #8]
 80110a2:	460c      	mov	r4, r1
 80110a4:	8183      	strh	r3, [r0, #12]
 80110a6:	46a9      	mov	r9, r5
 80110a8:	4621      	mov	r1, r4
 80110aa:	4630      	mov	r0, r6
 80110ac:	3501      	adds	r5, #1
 80110ae:	f008 fbdb 	bl	8019868 <put_memory>
 80110b2:	42af      	cmp	r7, r5
 80110b4:	60a4      	str	r4, [r4, #8]
 80110b6:	f884 900c 	strb.w	r9, [r4, #12]
 80110ba:	4444      	add	r4, r8
 80110bc:	d1f4      	bne.n	80110a8 <rmw_uxrce_init_session_memory+0x24>
 80110be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110c2:	4770      	bx	lr

080110c4 <rmw_uxrce_init_topic_memory>:
 80110c4:	b1e2      	cbz	r2, 8011100 <rmw_uxrce_init_topic_memory+0x3c>
 80110c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ca:	7b05      	ldrb	r5, [r0, #12]
 80110cc:	4606      	mov	r6, r0
 80110ce:	b9ad      	cbnz	r5, 80110fc <rmw_uxrce_init_topic_memory+0x38>
 80110d0:	231c      	movs	r3, #28
 80110d2:	e9c0 5500 	strd	r5, r5, [r0]
 80110d6:	6083      	str	r3, [r0, #8]
 80110d8:	f240 1301 	movw	r3, #257	@ 0x101
 80110dc:	4617      	mov	r7, r2
 80110de:	8183      	strh	r3, [r0, #12]
 80110e0:	460c      	mov	r4, r1
 80110e2:	46a8      	mov	r8, r5
 80110e4:	4621      	mov	r1, r4
 80110e6:	4630      	mov	r0, r6
 80110e8:	3501      	adds	r5, #1
 80110ea:	f008 fbbd 	bl	8019868 <put_memory>
 80110ee:	42af      	cmp	r7, r5
 80110f0:	60a4      	str	r4, [r4, #8]
 80110f2:	f884 800c 	strb.w	r8, [r4, #12]
 80110f6:	f104 041c 	add.w	r4, r4, #28
 80110fa:	d1f3      	bne.n	80110e4 <rmw_uxrce_init_topic_memory+0x20>
 80110fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop

08011104 <rmw_uxrce_init_static_input_buffer_memory>:
 8011104:	b1ea      	cbz	r2, 8011142 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8011106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801110a:	7b05      	ldrb	r5, [r0, #12]
 801110c:	4606      	mov	r6, r0
 801110e:	b9b5      	cbnz	r5, 801113e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011110:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8011114:	e9c0 5500 	strd	r5, r5, [r0]
 8011118:	6083      	str	r3, [r0, #8]
 801111a:	f240 1301 	movw	r3, #257	@ 0x101
 801111e:	4617      	mov	r7, r2
 8011120:	8183      	strh	r3, [r0, #12]
 8011122:	460c      	mov	r4, r1
 8011124:	46a8      	mov	r8, r5
 8011126:	4621      	mov	r1, r4
 8011128:	4630      	mov	r0, r6
 801112a:	3501      	adds	r5, #1
 801112c:	f008 fb9c 	bl	8019868 <put_memory>
 8011130:	42af      	cmp	r7, r5
 8011132:	60a4      	str	r4, [r4, #8]
 8011134:	f884 800c 	strb.w	r8, [r4, #12]
 8011138:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801113c:	d1f3      	bne.n	8011126 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011142:	4770      	bx	lr

08011144 <rmw_uxrce_init_init_options_impl_memory>:
 8011144:	b1e2      	cbz	r2, 8011180 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8011146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801114a:	7b05      	ldrb	r5, [r0, #12]
 801114c:	4606      	mov	r6, r0
 801114e:	b9ad      	cbnz	r5, 801117c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011150:	232c      	movs	r3, #44	@ 0x2c
 8011152:	e9c0 5500 	strd	r5, r5, [r0]
 8011156:	6083      	str	r3, [r0, #8]
 8011158:	f240 1301 	movw	r3, #257	@ 0x101
 801115c:	4617      	mov	r7, r2
 801115e:	8183      	strh	r3, [r0, #12]
 8011160:	460c      	mov	r4, r1
 8011162:	46a8      	mov	r8, r5
 8011164:	4621      	mov	r1, r4
 8011166:	4630      	mov	r0, r6
 8011168:	3501      	adds	r5, #1
 801116a:	f008 fb7d 	bl	8019868 <put_memory>
 801116e:	42af      	cmp	r7, r5
 8011170:	60a4      	str	r4, [r4, #8]
 8011172:	f884 800c 	strb.w	r8, [r4, #12]
 8011176:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801117a:	d1f3      	bne.n	8011164 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop

08011184 <rmw_uxrce_init_wait_set_memory>:
 8011184:	b1e2      	cbz	r2, 80111c0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8011186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118a:	7b05      	ldrb	r5, [r0, #12]
 801118c:	4606      	mov	r6, r0
 801118e:	b9ad      	cbnz	r5, 80111bc <rmw_uxrce_init_wait_set_memory+0x38>
 8011190:	231c      	movs	r3, #28
 8011192:	e9c0 5500 	strd	r5, r5, [r0]
 8011196:	6083      	str	r3, [r0, #8]
 8011198:	f240 1301 	movw	r3, #257	@ 0x101
 801119c:	4617      	mov	r7, r2
 801119e:	8183      	strh	r3, [r0, #12]
 80111a0:	460c      	mov	r4, r1
 80111a2:	46a8      	mov	r8, r5
 80111a4:	4621      	mov	r1, r4
 80111a6:	4630      	mov	r0, r6
 80111a8:	3501      	adds	r5, #1
 80111aa:	f008 fb5d 	bl	8019868 <put_memory>
 80111ae:	42af      	cmp	r7, r5
 80111b0:	60a4      	str	r4, [r4, #8]
 80111b2:	f884 800c 	strb.w	r8, [r4, #12]
 80111b6:	f104 041c 	add.w	r4, r4, #28
 80111ba:	d1f3      	bne.n	80111a4 <rmw_uxrce_init_wait_set_memory+0x20>
 80111bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop

080111c4 <rmw_uxrce_init_guard_condition_memory>:
 80111c4:	b1e2      	cbz	r2, 8011200 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80111c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ca:	7b05      	ldrb	r5, [r0, #12]
 80111cc:	4606      	mov	r6, r0
 80111ce:	b9ad      	cbnz	r5, 80111fc <rmw_uxrce_init_guard_condition_memory+0x38>
 80111d0:	2320      	movs	r3, #32
 80111d2:	e9c0 5500 	strd	r5, r5, [r0]
 80111d6:	6083      	str	r3, [r0, #8]
 80111d8:	f240 1301 	movw	r3, #257	@ 0x101
 80111dc:	4617      	mov	r7, r2
 80111de:	8183      	strh	r3, [r0, #12]
 80111e0:	460c      	mov	r4, r1
 80111e2:	46a8      	mov	r8, r5
 80111e4:	4621      	mov	r1, r4
 80111e6:	4630      	mov	r0, r6
 80111e8:	3501      	adds	r5, #1
 80111ea:	f008 fb3d 	bl	8019868 <put_memory>
 80111ee:	42af      	cmp	r7, r5
 80111f0:	60a4      	str	r4, [r4, #8]
 80111f2:	f884 800c 	strb.w	r8, [r4, #12]
 80111f6:	f104 0420 	add.w	r4, r4, #32
 80111fa:	d1f3      	bne.n	80111e4 <rmw_uxrce_init_guard_condition_memory+0x20>
 80111fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop

08011204 <rmw_uxrce_fini_session_memory>:
 8011204:	4601      	mov	r1, r0
 8011206:	4801      	ldr	r0, [pc, #4]	@ (801120c <rmw_uxrce_fini_session_memory+0x8>)
 8011208:	f008 bb2e 	b.w	8019868 <put_memory>
 801120c:	2000c454 	.word	0x2000c454

08011210 <rmw_uxrce_fini_node_memory>:
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	4604      	mov	r4, r0
 8011214:	6800      	ldr	r0, [r0, #0]
 8011216:	b128      	cbz	r0, 8011224 <rmw_uxrce_fini_node_memory+0x14>
 8011218:	4b07      	ldr	r3, [pc, #28]	@ (8011238 <rmw_uxrce_fini_node_memory+0x28>)
 801121a:	6819      	ldr	r1, [r3, #0]
 801121c:	f7ef f800 	bl	8000220 <strcmp>
 8011220:	b940      	cbnz	r0, 8011234 <rmw_uxrce_fini_node_memory+0x24>
 8011222:	6020      	str	r0, [r4, #0]
 8011224:	6861      	ldr	r1, [r4, #4]
 8011226:	b129      	cbz	r1, 8011234 <rmw_uxrce_fini_node_memory+0x24>
 8011228:	2500      	movs	r5, #0
 801122a:	4804      	ldr	r0, [pc, #16]	@ (801123c <rmw_uxrce_fini_node_memory+0x2c>)
 801122c:	610d      	str	r5, [r1, #16]
 801122e:	f008 fb1b 	bl	8019868 <put_memory>
 8011232:	6065      	str	r5, [r4, #4]
 8011234:	bd38      	pop	{r3, r4, r5, pc}
 8011236:	bf00      	nop
 8011238:	0801f430 	.word	0x0801f430
 801123c:	2000c424 	.word	0x2000c424

08011240 <rmw_uxrce_fini_publisher_memory>:
 8011240:	b510      	push	{r4, lr}
 8011242:	4604      	mov	r4, r0
 8011244:	6800      	ldr	r0, [r0, #0]
 8011246:	b128      	cbz	r0, 8011254 <rmw_uxrce_fini_publisher_memory+0x14>
 8011248:	4b06      	ldr	r3, [pc, #24]	@ (8011264 <rmw_uxrce_fini_publisher_memory+0x24>)
 801124a:	6819      	ldr	r1, [r3, #0]
 801124c:	f7ee ffe8 	bl	8000220 <strcmp>
 8011250:	b938      	cbnz	r0, 8011262 <rmw_uxrce_fini_publisher_memory+0x22>
 8011252:	6020      	str	r0, [r4, #0]
 8011254:	6861      	ldr	r1, [r4, #4]
 8011256:	b121      	cbz	r1, 8011262 <rmw_uxrce_fini_publisher_memory+0x22>
 8011258:	4803      	ldr	r0, [pc, #12]	@ (8011268 <rmw_uxrce_fini_publisher_memory+0x28>)
 801125a:	f008 fb05 	bl	8019868 <put_memory>
 801125e:	2300      	movs	r3, #0
 8011260:	6063      	str	r3, [r4, #4]
 8011262:	bd10      	pop	{r4, pc}
 8011264:	0801f430 	.word	0x0801f430
 8011268:	2000c434 	.word	0x2000c434

0801126c <rmw_uxrce_fini_subscription_memory>:
 801126c:	b510      	push	{r4, lr}
 801126e:	4604      	mov	r4, r0
 8011270:	6800      	ldr	r0, [r0, #0]
 8011272:	b128      	cbz	r0, 8011280 <rmw_uxrce_fini_subscription_memory+0x14>
 8011274:	4b06      	ldr	r3, [pc, #24]	@ (8011290 <rmw_uxrce_fini_subscription_memory+0x24>)
 8011276:	6819      	ldr	r1, [r3, #0]
 8011278:	f7ee ffd2 	bl	8000220 <strcmp>
 801127c:	b938      	cbnz	r0, 801128e <rmw_uxrce_fini_subscription_memory+0x22>
 801127e:	6020      	str	r0, [r4, #0]
 8011280:	6861      	ldr	r1, [r4, #4]
 8011282:	b121      	cbz	r1, 801128e <rmw_uxrce_fini_subscription_memory+0x22>
 8011284:	4803      	ldr	r0, [pc, #12]	@ (8011294 <rmw_uxrce_fini_subscription_memory+0x28>)
 8011286:	f008 faef 	bl	8019868 <put_memory>
 801128a:	2300      	movs	r3, #0
 801128c:	6063      	str	r3, [r4, #4]
 801128e:	bd10      	pop	{r4, pc}
 8011290:	0801f430 	.word	0x0801f430
 8011294:	2000c474 	.word	0x2000c474

08011298 <rmw_uxrce_fini_service_memory>:
 8011298:	b510      	push	{r4, lr}
 801129a:	4604      	mov	r4, r0
 801129c:	6800      	ldr	r0, [r0, #0]
 801129e:	b128      	cbz	r0, 80112ac <rmw_uxrce_fini_service_memory+0x14>
 80112a0:	4b06      	ldr	r3, [pc, #24]	@ (80112bc <rmw_uxrce_fini_service_memory+0x24>)
 80112a2:	6819      	ldr	r1, [r3, #0]
 80112a4:	f7ee ffbc 	bl	8000220 <strcmp>
 80112a8:	b938      	cbnz	r0, 80112ba <rmw_uxrce_fini_service_memory+0x22>
 80112aa:	6020      	str	r0, [r4, #0]
 80112ac:	6861      	ldr	r1, [r4, #4]
 80112ae:	b121      	cbz	r1, 80112ba <rmw_uxrce_fini_service_memory+0x22>
 80112b0:	4803      	ldr	r0, [pc, #12]	@ (80112c0 <rmw_uxrce_fini_service_memory+0x28>)
 80112b2:	f008 fad9 	bl	8019868 <put_memory>
 80112b6:	2300      	movs	r3, #0
 80112b8:	6063      	str	r3, [r4, #4]
 80112ba:	bd10      	pop	{r4, pc}
 80112bc:	0801f430 	.word	0x0801f430
 80112c0:	2000c444 	.word	0x2000c444

080112c4 <rmw_uxrce_fini_client_memory>:
 80112c4:	b510      	push	{r4, lr}
 80112c6:	4604      	mov	r4, r0
 80112c8:	6800      	ldr	r0, [r0, #0]
 80112ca:	b128      	cbz	r0, 80112d8 <rmw_uxrce_fini_client_memory+0x14>
 80112cc:	4b06      	ldr	r3, [pc, #24]	@ (80112e8 <rmw_uxrce_fini_client_memory+0x24>)
 80112ce:	6819      	ldr	r1, [r3, #0]
 80112d0:	f7ee ffa6 	bl	8000220 <strcmp>
 80112d4:	b938      	cbnz	r0, 80112e6 <rmw_uxrce_fini_client_memory+0x22>
 80112d6:	6020      	str	r0, [r4, #0]
 80112d8:	6861      	ldr	r1, [r4, #4]
 80112da:	b121      	cbz	r1, 80112e6 <rmw_uxrce_fini_client_memory+0x22>
 80112dc:	4803      	ldr	r0, [pc, #12]	@ (80112ec <rmw_uxrce_fini_client_memory+0x28>)
 80112de:	f008 fac3 	bl	8019868 <put_memory>
 80112e2:	2300      	movs	r3, #0
 80112e4:	6063      	str	r3, [r4, #4]
 80112e6:	bd10      	pop	{r4, pc}
 80112e8:	0801f430 	.word	0x0801f430
 80112ec:	20007a90 	.word	0x20007a90

080112f0 <rmw_uxrce_fini_topic_memory>:
 80112f0:	b510      	push	{r4, lr}
 80112f2:	4604      	mov	r4, r0
 80112f4:	4621      	mov	r1, r4
 80112f6:	4803      	ldr	r0, [pc, #12]	@ (8011304 <rmw_uxrce_fini_topic_memory+0x14>)
 80112f8:	f008 fab6 	bl	8019868 <put_memory>
 80112fc:	2300      	movs	r3, #0
 80112fe:	61a3      	str	r3, [r4, #24]
 8011300:	bd10      	pop	{r4, pc}
 8011302:	bf00      	nop
 8011304:	2000c484 	.word	0x2000c484

08011308 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011308:	b082      	sub	sp, #8
 801130a:	b530      	push	{r4, r5, lr}
 801130c:	4925      	ldr	r1, [pc, #148]	@ (80113a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801130e:	680d      	ldr	r5, [r1, #0]
 8011310:	ac03      	add	r4, sp, #12
 8011312:	e884 000c 	stmia.w	r4, {r2, r3}
 8011316:	461c      	mov	r4, r3
 8011318:	2d00      	cmp	r5, #0
 801131a:	d041      	beq.n	80113a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 801131c:	462b      	mov	r3, r5
 801131e:	2100      	movs	r1, #0
 8011320:	689a      	ldr	r2, [r3, #8]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011328:	4290      	cmp	r0, r2
 801132a:	bf08      	it	eq
 801132c:	3101      	addeq	r1, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	d1f6      	bne.n	8011320 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8011332:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011336:	2b02      	cmp	r3, #2
 8011338:	d029      	beq.n	801138e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801133a:	d907      	bls.n	801134c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801133c:	2b03      	cmp	r3, #3
 801133e:	d005      	beq.n	801134c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011340:	2100      	movs	r1, #0
 8011342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011346:	4608      	mov	r0, r1
 8011348:	b002      	add	sp, #8
 801134a:	4770      	bx	lr
 801134c:	b314      	cbz	r4, 8011394 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801134e:	428c      	cmp	r4, r1
 8011350:	d820      	bhi.n	8011394 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011352:	2d00      	cmp	r5, #0
 8011354:	d0f4      	beq.n	8011340 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011356:	2100      	movs	r1, #0
 8011358:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801135c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011360:	e002      	b.n	8011368 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8011362:	686d      	ldr	r5, [r5, #4]
 8011364:	2d00      	cmp	r5, #0
 8011366:	d0ec      	beq.n	8011342 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011368:	68ab      	ldr	r3, [r5, #8]
 801136a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801136e:	4290      	cmp	r0, r2
 8011370:	d1f7      	bne.n	8011362 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011372:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8011376:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801137a:	4562      	cmp	r2, ip
 801137c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011380:	eb73 0e04 	sbcs.w	lr, r3, r4
 8011384:	daed      	bge.n	8011362 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011386:	4694      	mov	ip, r2
 8011388:	461c      	mov	r4, r3
 801138a:	4629      	mov	r1, r5
 801138c:	e7e9      	b.n	8011362 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801138e:	b10c      	cbz	r4, 8011394 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011390:	428c      	cmp	r4, r1
 8011392:	d9d5      	bls.n	8011340 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011398:	4802      	ldr	r0, [pc, #8]	@ (80113a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801139a:	b002      	add	sp, #8
 801139c:	f008 ba54 	b.w	8019848 <get_memory>
 80113a0:	4629      	mov	r1, r5
 80113a2:	e7c6      	b.n	8011332 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80113a4:	2000c464 	.word	0x2000c464

080113a8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80113a8:	4b11      	ldr	r3, [pc, #68]	@ (80113f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	b530      	push	{r4, r5, lr}
 80113ae:	b1e3      	cbz	r3, 80113ea <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80113b0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80113b4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80113b8:	2400      	movs	r4, #0
 80113ba:	e001      	b.n	80113c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	b193      	cbz	r3, 80113e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 80113c0:	689a      	ldr	r2, [r3, #8]
 80113c2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80113c6:	4288      	cmp	r0, r1
 80113c8:	d1f8      	bne.n	80113bc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80113ca:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80113ce:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 80113d2:	4571      	cmp	r1, lr
 80113d4:	eb72 050c 	sbcs.w	r5, r2, ip
 80113d8:	daf0      	bge.n	80113bc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80113da:	461c      	mov	r4, r3
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	468e      	mov	lr, r1
 80113e0:	4694      	mov	ip, r2
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d1ec      	bne.n	80113c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80113e6:	4620      	mov	r0, r4
 80113e8:	bd30      	pop	{r4, r5, pc}
 80113ea:	461c      	mov	r4, r3
 80113ec:	4620      	mov	r0, r4
 80113ee:	bd30      	pop	{r4, r5, pc}
 80113f0:	2000c464 	.word	0x2000c464
 80113f4:	00000000 	.word	0x00000000

080113f8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80113f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fc:	4b3c      	ldr	r3, [pc, #240]	@ (80114f0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80113fe:	ed2d 8b06 	vpush	{d8-d10}
 8011402:	681f      	ldr	r7, [r3, #0]
 8011404:	b08d      	sub	sp, #52	@ 0x34
 8011406:	f7ff fd7d 	bl	8010f04 <rmw_uros_epoch_nanos>
 801140a:	2f00      	cmp	r7, #0
 801140c:	d05d      	beq.n	80114ca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801140e:	46b8      	mov	r8, r7
 8011410:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80114d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011414:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011418:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801141c:	2b04      	cmp	r3, #4
 801141e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80114e0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011422:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80114e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8011426:	4681      	mov	r9, r0
 8011428:	468a      	mov	sl, r1
 801142a:	ac04      	add	r4, sp, #16
 801142c:	d03f      	beq.n	80114ae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801142e:	2b05      	cmp	r3, #5
 8011430:	d044      	beq.n	80114bc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011432:	2b03      	cmp	r3, #3
 8011434:	d03b      	beq.n	80114ae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011436:	ed8d 8b04 	vstr	d8, [sp, #16]
 801143a:	ed8d ab06 	vstr	d10, [sp, #24]
 801143e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011442:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011446:	ab08      	add	r3, sp, #32
 8011448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801144a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801144e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011452:	f008 f885 	bl	8019560 <rmw_time_equal>
 8011456:	b118      	cbz	r0, 8011460 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011458:	ed8d 9b04 	vstr	d9, [sp, #16]
 801145c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011460:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011464:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011468:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 801146c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011470:	f008 f8ca 	bl	8019608 <rmw_time_total_nsec>
 8011474:	1830      	adds	r0, r6, r0
 8011476:	eb47 0101 	adc.w	r1, r7, r1
 801147a:	4548      	cmp	r0, r9
 801147c:	eb71 030a 	sbcs.w	r3, r1, sl
 8011480:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8011484:	db05      	blt.n	8011492 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8011486:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801148a:	4591      	cmp	r9, r2
 801148c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8011490:	da03      	bge.n	801149a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8011492:	4817      	ldr	r0, [pc, #92]	@ (80114f0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011494:	4641      	mov	r1, r8
 8011496:	f008 f9e7 	bl	8019868 <put_memory>
 801149a:	f1bb 0f00 	cmp.w	fp, #0
 801149e:	d014      	beq.n	80114ca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80114a0:	46d8      	mov	r8, fp
 80114a2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80114a6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80114aa:	2b04      	cmp	r3, #4
 80114ac:	d1bf      	bne.n	801142e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80114ae:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80114b2:	3340      	adds	r3, #64	@ 0x40
 80114b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80114b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80114ba:	e7c0      	b.n	801143e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80114bc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80114c0:	3348      	adds	r3, #72	@ 0x48
 80114c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80114c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80114c8:	e7b9      	b.n	801143e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80114ca:	b00d      	add	sp, #52	@ 0x34
 80114cc:	ecbd 8b06 	vpop	{d8-d10}
 80114d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d4:	f3af 8000 	nop.w
	...
 80114e0:	00000001 	.word	0x00000001
 80114e4:	00000000 	.word	0x00000000
 80114e8:	0000001e 	.word	0x0000001e
 80114ec:	00000000 	.word	0x00000000
 80114f0:	2000c464 	.word	0x2000c464

080114f4 <run_xrce_session>:
 80114f4:	b510      	push	{r4, lr}
 80114f6:	788c      	ldrb	r4, [r1, #2]
 80114f8:	b086      	sub	sp, #24
 80114fa:	2c01      	cmp	r4, #1
 80114fc:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011500:	d00c      	beq.n	801151c <run_xrce_session+0x28>
 8011502:	4619      	mov	r1, r3
 8011504:	2301      	movs	r3, #1
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	f10d 020e 	add.w	r2, sp, #14
 801150c:	f10d 0317 	add.w	r3, sp, #23
 8011510:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011514:	f002 fb84 	bl	8013c20 <uxr_run_session_until_all_status>
 8011518:	b006      	add	sp, #24
 801151a:	bd10      	pop	{r4, pc}
 801151c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011520:	f001 ff98 	bl	8013454 <uxr_flash_output_streams>
 8011524:	4620      	mov	r0, r4
 8011526:	b006      	add	sp, #24
 8011528:	bd10      	pop	{r4, pc}
 801152a:	bf00      	nop

0801152c <convert_qos_profile>:
 801152c:	7a4a      	ldrb	r2, [r1, #9]
 801152e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8011532:	2a02      	cmp	r2, #2
 8011534:	bf18      	it	ne
 8011536:	2200      	movne	r2, #0
 8011538:	7002      	strb	r2, [r0, #0]
 801153a:	780a      	ldrb	r2, [r1, #0]
 801153c:	8889      	ldrh	r1, [r1, #4]
 801153e:	8081      	strh	r1, [r0, #4]
 8011540:	f1ac 0c02 	sub.w	ip, ip, #2
 8011544:	f1a2 0202 	sub.w	r2, r2, #2
 8011548:	fabc fc8c 	clz	ip, ip
 801154c:	fab2 f282 	clz	r2, r2
 8011550:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8011554:	0952      	lsrs	r2, r2, #5
 8011556:	f880 c001 	strb.w	ip, [r0, #1]
 801155a:	7082      	strb	r2, [r0, #2]
 801155c:	4770      	bx	lr
 801155e:	bf00      	nop

08011560 <generate_service_topics>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	461c      	mov	r4, r3
 8011566:	4b12      	ldr	r3, [pc, #72]	@ (80115b0 <generate_service_topics+0x50>)
 8011568:	9301      	str	r3, [sp, #4]
 801156a:	4605      	mov	r5, r0
 801156c:	4b11      	ldr	r3, [pc, #68]	@ (80115b4 <generate_service_topics+0x54>)
 801156e:	9000      	str	r0, [sp, #0]
 8011570:	4616      	mov	r6, r2
 8011572:	4608      	mov	r0, r1
 8011574:	4a10      	ldr	r2, [pc, #64]	@ (80115b8 <generate_service_topics+0x58>)
 8011576:	4621      	mov	r1, r4
 8011578:	f009 feae 	bl	801b2d8 <sniprintf>
 801157c:	4b0f      	ldr	r3, [pc, #60]	@ (80115bc <generate_service_topics+0x5c>)
 801157e:	9301      	str	r3, [sp, #4]
 8011580:	4601      	mov	r1, r0
 8011582:	9500      	str	r5, [sp, #0]
 8011584:	4b0e      	ldr	r3, [pc, #56]	@ (80115c0 <generate_service_topics+0x60>)
 8011586:	4a0c      	ldr	r2, [pc, #48]	@ (80115b8 <generate_service_topics+0x58>)
 8011588:	460d      	mov	r5, r1
 801158a:	4630      	mov	r0, r6
 801158c:	4621      	mov	r1, r4
 801158e:	f009 fea3 	bl	801b2d8 <sniprintf>
 8011592:	2d00      	cmp	r5, #0
 8011594:	db01      	blt.n	801159a <generate_service_topics+0x3a>
 8011596:	42ac      	cmp	r4, r5
 8011598:	dc02      	bgt.n	80115a0 <generate_service_topics+0x40>
 801159a:	2000      	movs	r0, #0
 801159c:	b002      	add	sp, #8
 801159e:	bd70      	pop	{r4, r5, r6, pc}
 80115a0:	2800      	cmp	r0, #0
 80115a2:	dbfa      	blt.n	801159a <generate_service_topics+0x3a>
 80115a4:	4284      	cmp	r4, r0
 80115a6:	bfd4      	ite	le
 80115a8:	2000      	movle	r0, #0
 80115aa:	2001      	movgt	r0, #1
 80115ac:	b002      	add	sp, #8
 80115ae:	bd70      	pop	{r4, r5, r6, pc}
 80115b0:	0801e558 	.word	0x0801e558
 80115b4:	0801e554 	.word	0x0801e554
 80115b8:	0801e538 	.word	0x0801e538
 80115bc:	0801e54c 	.word	0x0801e54c
 80115c0:	0801e548 	.word	0x0801e548

080115c4 <generate_service_types>:
 80115c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c8:	4605      	mov	r5, r0
 80115ca:	b086      	sub	sp, #24
 80115cc:	6880      	ldr	r0, [r0, #8]
 80115ce:	460c      	mov	r4, r1
 80115d0:	4617      	mov	r7, r2
 80115d2:	461e      	mov	r6, r3
 80115d4:	4780      	blx	r0
 80115d6:	68eb      	ldr	r3, [r5, #12]
 80115d8:	4680      	mov	r8, r0
 80115da:	4798      	blx	r3
 80115dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80115e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80115e4:	2300      	movs	r3, #0
 80115e6:	7023      	strb	r3, [r4, #0]
 80115e8:	6813      	ldr	r3, [r2, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d042      	beq.n	8011674 <generate_service_types+0xb0>
 80115ee:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8011688 <generate_service_types+0xc4>
 80115f2:	4641      	mov	r1, r8
 80115f4:	4620      	mov	r0, r4
 80115f6:	4c22      	ldr	r4, [pc, #136]	@ (8011680 <generate_service_types+0xbc>)
 80115f8:	9405      	str	r4, [sp, #20]
 80115fa:	6852      	ldr	r2, [r2, #4]
 80115fc:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8011690 <generate_service_types+0xcc>
 8011600:	9204      	str	r2, [sp, #16]
 8011602:	9100      	str	r1, [sp, #0]
 8011604:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8011608:	4a1e      	ldr	r2, [pc, #120]	@ (8011684 <generate_service_types+0xc0>)
 801160a:	f8cd a004 	str.w	sl, [sp, #4]
 801160e:	4631      	mov	r1, r6
 8011610:	f009 fe62 	bl	801b2d8 <sniprintf>
 8011614:	2800      	cmp	r0, #0
 8011616:	db1f      	blt.n	8011658 <generate_service_types+0x94>
 8011618:	2300      	movs	r3, #0
 801161a:	703b      	strb	r3, [r7, #0]
 801161c:	f8d9 3000 	ldr.w	r3, [r9]
 8011620:	42b0      	cmp	r0, r6
 8011622:	bfac      	ite	ge
 8011624:	2500      	movge	r5, #0
 8011626:	2501      	movlt	r5, #1
 8011628:	b1eb      	cbz	r3, 8011666 <generate_service_types+0xa2>
 801162a:	4a17      	ldr	r2, [pc, #92]	@ (8011688 <generate_service_types+0xc4>)
 801162c:	9405      	str	r4, [sp, #20]
 801162e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011632:	9200      	str	r2, [sp, #0]
 8011634:	e9cd 8103 	strd	r8, r1, [sp, #12]
 8011638:	e9cd a401 	strd	sl, r4, [sp, #4]
 801163c:	4a11      	ldr	r2, [pc, #68]	@ (8011684 <generate_service_types+0xc0>)
 801163e:	4638      	mov	r0, r7
 8011640:	4631      	mov	r1, r6
 8011642:	f009 fe49 	bl	801b2d8 <sniprintf>
 8011646:	2800      	cmp	r0, #0
 8011648:	db10      	blt.n	801166c <generate_service_types+0xa8>
 801164a:	42b0      	cmp	r0, r6
 801164c:	bfb4      	ite	lt
 801164e:	4628      	movlt	r0, r5
 8011650:	2000      	movge	r0, #0
 8011652:	b006      	add	sp, #24
 8011654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011658:	2300      	movs	r3, #0
 801165a:	703b      	strb	r3, [r7, #0]
 801165c:	f8d9 3000 	ldr.w	r3, [r9]
 8011660:	2500      	movs	r5, #0
 8011662:	2b00      	cmp	r3, #0
 8011664:	d1e1      	bne.n	801162a <generate_service_types+0x66>
 8011666:	4b09      	ldr	r3, [pc, #36]	@ (801168c <generate_service_types+0xc8>)
 8011668:	461a      	mov	r2, r3
 801166a:	e7df      	b.n	801162c <generate_service_types+0x68>
 801166c:	2000      	movs	r0, #0
 801166e:	b006      	add	sp, #24
 8011670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011674:	4b05      	ldr	r3, [pc, #20]	@ (801168c <generate_service_types+0xc8>)
 8011676:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 8011688 <generate_service_types+0xc4>
 801167a:	4619      	mov	r1, r3
 801167c:	e7ba      	b.n	80115f4 <generate_service_types+0x30>
 801167e:	bf00      	nop
 8011680:	0801e540 	.word	0x0801e540
 8011684:	0801e530 	.word	0x0801e530
 8011688:	0801e52c 	.word	0x0801e52c
 801168c:	0801f490 	.word	0x0801f490
 8011690:	0801e544 	.word	0x0801e544

08011694 <generate_type_name>:
 8011694:	b530      	push	{r4, r5, lr}
 8011696:	2300      	movs	r3, #0
 8011698:	700b      	strb	r3, [r1, #0]
 801169a:	6803      	ldr	r3, [r0, #0]
 801169c:	b087      	sub	sp, #28
 801169e:	4614      	mov	r4, r2
 80116a0:	b1d3      	cbz	r3, 80116d8 <generate_type_name+0x44>
 80116a2:	4a0f      	ldr	r2, [pc, #60]	@ (80116e0 <generate_type_name+0x4c>)
 80116a4:	4615      	mov	r5, r2
 80116a6:	9203      	str	r2, [sp, #12]
 80116a8:	9500      	str	r5, [sp, #0]
 80116aa:	6842      	ldr	r2, [r0, #4]
 80116ac:	480d      	ldr	r0, [pc, #52]	@ (80116e4 <generate_type_name+0x50>)
 80116ae:	9001      	str	r0, [sp, #4]
 80116b0:	4608      	mov	r0, r1
 80116b2:	490d      	ldr	r1, [pc, #52]	@ (80116e8 <generate_type_name+0x54>)
 80116b4:	9204      	str	r2, [sp, #16]
 80116b6:	9105      	str	r1, [sp, #20]
 80116b8:	9102      	str	r1, [sp, #8]
 80116ba:	4a0c      	ldr	r2, [pc, #48]	@ (80116ec <generate_type_name+0x58>)
 80116bc:	4621      	mov	r1, r4
 80116be:	f009 fe0b 	bl	801b2d8 <sniprintf>
 80116c2:	2800      	cmp	r0, #0
 80116c4:	db05      	blt.n	80116d2 <generate_type_name+0x3e>
 80116c6:	4284      	cmp	r4, r0
 80116c8:	bfd4      	ite	le
 80116ca:	2000      	movle	r0, #0
 80116cc:	2001      	movgt	r0, #1
 80116ce:	b007      	add	sp, #28
 80116d0:	bd30      	pop	{r4, r5, pc}
 80116d2:	2000      	movs	r0, #0
 80116d4:	b007      	add	sp, #28
 80116d6:	bd30      	pop	{r4, r5, pc}
 80116d8:	4b05      	ldr	r3, [pc, #20]	@ (80116f0 <generate_type_name+0x5c>)
 80116da:	4a01      	ldr	r2, [pc, #4]	@ (80116e0 <generate_type_name+0x4c>)
 80116dc:	461d      	mov	r5, r3
 80116de:	e7e2      	b.n	80116a6 <generate_type_name+0x12>
 80116e0:	0801e52c 	.word	0x0801e52c
 80116e4:	0801e544 	.word	0x0801e544
 80116e8:	0801e540 	.word	0x0801e540
 80116ec:	0801e530 	.word	0x0801e530
 80116f0:	0801f490 	.word	0x0801f490

080116f4 <generate_topic_name>:
 80116f4:	b510      	push	{r4, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	4614      	mov	r4, r2
 80116fa:	9000      	str	r0, [sp, #0]
 80116fc:	4b08      	ldr	r3, [pc, #32]	@ (8011720 <generate_topic_name+0x2c>)
 80116fe:	4a09      	ldr	r2, [pc, #36]	@ (8011724 <generate_topic_name+0x30>)
 8011700:	4608      	mov	r0, r1
 8011702:	4621      	mov	r1, r4
 8011704:	f009 fde8 	bl	801b2d8 <sniprintf>
 8011708:	2800      	cmp	r0, #0
 801170a:	db05      	blt.n	8011718 <generate_topic_name+0x24>
 801170c:	4284      	cmp	r4, r0
 801170e:	bfd4      	ite	le
 8011710:	2000      	movle	r0, #0
 8011712:	2001      	movgt	r0, #1
 8011714:	b002      	add	sp, #8
 8011716:	bd10      	pop	{r4, pc}
 8011718:	2000      	movs	r0, #0
 801171a:	b002      	add	sp, #8
 801171c:	bd10      	pop	{r4, pc}
 801171e:	bf00      	nop
 8011720:	0801e560 	.word	0x0801e560
 8011724:	0801df94 	.word	0x0801df94

08011728 <is_uxrce_rmw_identifier_valid>:
 8011728:	b510      	push	{r4, lr}
 801172a:	4604      	mov	r4, r0
 801172c:	b140      	cbz	r0, 8011740 <is_uxrce_rmw_identifier_valid+0x18>
 801172e:	f7fe facb 	bl	800fcc8 <rmw_get_implementation_identifier>
 8011732:	4601      	mov	r1, r0
 8011734:	4620      	mov	r0, r4
 8011736:	f7ee fd73 	bl	8000220 <strcmp>
 801173a:	fab0 f080 	clz	r0, r0
 801173e:	0940      	lsrs	r0, r0, #5
 8011740:	bd10      	pop	{r4, pc}
 8011742:	bf00      	nop

08011744 <get_message_typesupport_handle>:
 8011744:	6883      	ldr	r3, [r0, #8]
 8011746:	4718      	bx	r3

08011748 <get_message_typesupport_handle_function>:
 8011748:	b510      	push	{r4, lr}
 801174a:	4604      	mov	r4, r0
 801174c:	6800      	ldr	r0, [r0, #0]
 801174e:	f7ee fd67 	bl	8000220 <strcmp>
 8011752:	2800      	cmp	r0, #0
 8011754:	bf0c      	ite	eq
 8011756:	4620      	moveq	r0, r4
 8011758:	2000      	movne	r0, #0
 801175a:	bd10      	pop	{r4, pc}

0801175c <get_service_typesupport_handle>:
 801175c:	6883      	ldr	r3, [r0, #8]
 801175e:	4718      	bx	r3

08011760 <get_service_typesupport_handle_function>:
 8011760:	b510      	push	{r4, lr}
 8011762:	4604      	mov	r4, r0
 8011764:	6800      	ldr	r0, [r0, #0]
 8011766:	f7ee fd5b 	bl	8000220 <strcmp>
 801176a:	2800      	cmp	r0, #0
 801176c:	bf0c      	ite	eq
 801176e:	4620      	moveq	r0, r4
 8011770:	2000      	movne	r0, #0
 8011772:	bd10      	pop	{r4, pc}

08011774 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8011774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011778:	6805      	ldr	r5, [r0, #0]
 801177a:	4604      	mov	r4, r0
 801177c:	4628      	mov	r0, r5
 801177e:	460e      	mov	r6, r1
 8011780:	f7ee fd4e 	bl	8000220 <strcmp>
 8011784:	b1c8      	cbz	r0, 80117ba <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011786:	4b11      	ldr	r3, [pc, #68]	@ (80117cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	429d      	cmp	r5, r3
 801178c:	d112      	bne.n	80117b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801178e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011792:	f8d8 4000 	ldr.w	r4, [r8]
 8011796:	b16c      	cbz	r4, 80117b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011798:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801179c:	2700      	movs	r7, #0
 801179e:	3d04      	subs	r5, #4
 80117a0:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80117a4:	4631      	mov	r1, r6
 80117a6:	f7ee fd3b 	bl	8000220 <strcmp>
 80117aa:	00bb      	lsls	r3, r7, #2
 80117ac:	b140      	cbz	r0, 80117c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80117ae:	3701      	adds	r7, #1
 80117b0:	42bc      	cmp	r4, r7
 80117b2:	d1f5      	bne.n	80117a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80117b4:	2000      	movs	r0, #0
 80117b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ba:	4620      	mov	r0, r4
 80117bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80117c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117c8:	58d3      	ldr	r3, [r2, r3]
 80117ca:	4718      	bx	r3
 80117cc:	200003bc 	.word	0x200003bc

080117d0 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80117d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d4:	6805      	ldr	r5, [r0, #0]
 80117d6:	4604      	mov	r4, r0
 80117d8:	4628      	mov	r0, r5
 80117da:	460e      	mov	r6, r1
 80117dc:	f7ee fd20 	bl	8000220 <strcmp>
 80117e0:	b1c8      	cbz	r0, 8011816 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80117e2:	4b11      	ldr	r3, [pc, #68]	@ (8011828 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	429d      	cmp	r5, r3
 80117e8:	d112      	bne.n	8011810 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80117ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80117ee:	f8d8 4000 	ldr.w	r4, [r8]
 80117f2:	b16c      	cbz	r4, 8011810 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80117f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80117f8:	2700      	movs	r7, #0
 80117fa:	3d04      	subs	r5, #4
 80117fc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011800:	4631      	mov	r1, r6
 8011802:	f7ee fd0d 	bl	8000220 <strcmp>
 8011806:	00bb      	lsls	r3, r7, #2
 8011808:	b140      	cbz	r0, 801181c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801180a:	3701      	adds	r7, #1
 801180c:	42bc      	cmp	r4, r7
 801180e:	d1f5      	bne.n	80117fc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8011810:	2000      	movs	r0, #0
 8011812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011816:	4620      	mov	r0, r4
 8011818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011824:	58d3      	ldr	r3, [r2, r3]
 8011826:	4718      	bx	r3
 8011828:	200003bc 	.word	0x200003bc

0801182c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801182c:	4b04      	ldr	r3, [pc, #16]	@ (8011840 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	b10a      	cbz	r2, 8011836 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8011832:	4803      	ldr	r0, [pc, #12]	@ (8011840 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011834:	4770      	bx	lr
 8011836:	4a03      	ldr	r2, [pc, #12]	@ (8011844 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8011838:	4801      	ldr	r0, [pc, #4]	@ (8011840 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801183a:	6812      	ldr	r2, [r2, #0]
 801183c:	601a      	str	r2, [r3, #0]
 801183e:	4770      	bx	lr
 8011840:	200003cc 	.word	0x200003cc
 8011844:	200003bc 	.word	0x200003bc

08011848 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011848:	4a02      	ldr	r2, [pc, #8]	@ (8011854 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 801184a:	4b03      	ldr	r3, [pc, #12]	@ (8011858 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 801184c:	6812      	ldr	r2, [r2, #0]
 801184e:	601a      	str	r2, [r3, #0]
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop
 8011854:	200003bc 	.word	0x200003bc
 8011858:	200003cc 	.word	0x200003cc

0801185c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 801185c:	2009      	movs	r0, #9
 801185e:	4770      	bx	lr

08011860 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8011860:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop

08011868 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8011868:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801186c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011870:	e9c2 0100 	strd	r0, r1, [r2]
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop

08011878 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8011878:	e9d2 2300 	ldrd	r2, r3, [r2]
 801187c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011880:	e9c1 2300 	strd	r2, r3, [r1]
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop

08011888 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8011888:	f008 ba96 	b.w	8019db8 <sensor_msgs__msg__Imu__init>

0801188c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 801188c:	f008 baea 	b.w	8019e64 <sensor_msgs__msg__Imu__fini>

08011890 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8011890:	2009      	movs	r0, #9
 8011892:	4770      	bx	lr

08011894 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 8011894:	2009      	movs	r0, #9
 8011896:	4770      	bx	lr

08011898 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8011898:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop

080118a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80118a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop

080118a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80118a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop

080118b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80118b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop

080118b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 80118b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop

080118c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 80118c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80118c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118c8:	e9c2 0100 	strd	r0, r1, [r2]
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop

080118d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 80118d0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80118d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80118d8:	e9c1 2300 	strd	r2, r3, [r1]
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop

080118e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 80118e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80118e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118e8:	e9c2 0100 	strd	r0, r1, [r2]
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop

080118f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 80118f0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80118f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80118f8:	e9c1 2300 	strd	r2, r3, [r1]
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop

08011900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011900:	b510      	push	{r4, lr}
 8011902:	f000 f939 	bl	8011b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011906:	4c0b      	ldr	r4, [pc, #44]	@ (8011934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8011908:	60e0      	str	r0, [r4, #12]
 801190a:	f000 fcc9 	bl	80122a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801190e:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011910:	f7f9 ffea 	bl	800b8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011914:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011918:	f7f9 ffe6 	bl	800b8e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801191c:	4b06      	ldr	r3, [pc, #24]	@ (8011938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801191e:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	b10a      	cbz	r2, 801192a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8011926:	4804      	ldr	r0, [pc, #16]	@ (8011938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8011928:	bd10      	pop	{r4, pc}
 801192a:	4a04      	ldr	r2, [pc, #16]	@ (801193c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 801192c:	4802      	ldr	r0, [pc, #8]	@ (8011938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801192e:	6812      	ldr	r2, [r2, #0]
 8011930:	601a      	str	r2, [r3, #0]
 8011932:	bd10      	pop	{r4, pc}
 8011934:	200003d8 	.word	0x200003d8
 8011938:	2000057c 	.word	0x2000057c
 801193c:	200003c0 	.word	0x200003c0

08011940 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8011940:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8011944:	4680      	mov	r8, r0
 8011946:	460f      	mov	r7, r1
 8011948:	f000 f968 	bl	8011c1c <get_serialized_size_std_msgs__msg__Header>
 801194c:	183c      	adds	r4, r7, r0
 801194e:	4621      	mov	r1, r4
 8011950:	f108 0018 	add.w	r0, r8, #24
 8011954:	f000 fcb2 	bl	80122bc <get_serialized_size_geometry_msgs__msg__Quaternion>
 8011958:	4404      	add	r4, r0
 801195a:	2108      	movs	r1, #8
 801195c:	4620      	mov	r0, r4
 801195e:	f7fb fcef 	bl	800d340 <ucdr_alignment>
 8011962:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8011966:	4425      	add	r5, r4
 8011968:	4629      	mov	r1, r5
 801196a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 801196e:	f7fa f82f 	bl	800b9d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8011972:	4405      	add	r5, r0
 8011974:	2108      	movs	r1, #8
 8011976:	4628      	mov	r0, r5
 8011978:	f7fb fce2 	bl	800d340 <ucdr_alignment>
 801197c:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8011980:	4425      	add	r5, r4
 8011982:	4629      	mov	r1, r5
 8011984:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8011988:	f7fa f822 	bl	800b9d0 <get_serialized_size_geometry_msgs__msg__Vector3>
 801198c:	4405      	add	r5, r0
 801198e:	2108      	movs	r1, #8
 8011990:	4628      	mov	r0, r5
 8011992:	f7fb fcd5 	bl	800d340 <ucdr_alignment>
 8011996:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 801199a:	4438      	add	r0, r7
 801199c:	4428      	add	r0, r5
 801199e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80119a2:	bf00      	nop

080119a4 <get_serialized_size_sensor_msgs__msg__Imu>:
 80119a4:	b108      	cbz	r0, 80119aa <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 80119a6:	f7ff bfcb 	b.w	8011940 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80119aa:	4770      	bx	lr

080119ac <_Imu__get_serialized_size>:
 80119ac:	b110      	cbz	r0, 80119b4 <_Imu__get_serialized_size+0x8>
 80119ae:	2100      	movs	r1, #0
 80119b0:	f7ff bfc6 	b.w	8011940 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80119b4:	4770      	bx	lr
 80119b6:	bf00      	nop

080119b8 <_Imu__cdr_deserialize>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	460c      	mov	r4, r1
 80119bc:	b399      	cbz	r1, 8011a26 <_Imu__cdr_deserialize+0x6e>
 80119be:	4605      	mov	r5, r0
 80119c0:	f000 f9ae 	bl	8011d20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80119c4:	6843      	ldr	r3, [r0, #4]
 80119c6:	4621      	mov	r1, r4
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	4628      	mov	r0, r5
 80119cc:	4798      	blx	r3
 80119ce:	f000 fd29 	bl	8012424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80119d2:	6843      	ldr	r3, [r0, #4]
 80119d4:	f104 0118 	add.w	r1, r4, #24
 80119d8:	68db      	ldr	r3, [r3, #12]
 80119da:	4628      	mov	r0, r5
 80119dc:	4798      	blx	r3
 80119de:	2209      	movs	r2, #9
 80119e0:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80119e4:	4628      	mov	r0, r5
 80119e6:	f000 febd 	bl	8012764 <ucdr_deserialize_array_double>
 80119ea:	f7fa f87d 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80119ee:	6843      	ldr	r3, [r0, #4]
 80119f0:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	4628      	mov	r0, r5
 80119f8:	4798      	blx	r3
 80119fa:	2209      	movs	r2, #9
 80119fc:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011a00:	4628      	mov	r0, r5
 8011a02:	f000 feaf 	bl	8012764 <ucdr_deserialize_array_double>
 8011a06:	f7fa f86f 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011a0a:	6843      	ldr	r3, [r0, #4]
 8011a0c:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	4628      	mov	r0, r5
 8011a14:	4798      	blx	r3
 8011a16:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	2209      	movs	r2, #9
 8011a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a22:	f000 be9f 	b.w	8012764 <ucdr_deserialize_array_double>
 8011a26:	4608      	mov	r0, r1
 8011a28:	bd38      	pop	{r3, r4, r5, pc}
 8011a2a:	bf00      	nop

08011a2c <_Imu__cdr_serialize>:
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d035      	beq.n	8011a9c <_Imu__cdr_serialize+0x70>
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	460d      	mov	r5, r1
 8011a34:	4604      	mov	r4, r0
 8011a36:	f000 f973 	bl	8011d20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011a3a:	6843      	ldr	r3, [r0, #4]
 8011a3c:	4629      	mov	r1, r5
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	4620      	mov	r0, r4
 8011a42:	4798      	blx	r3
 8011a44:	f000 fcee 	bl	8012424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011a48:	6843      	ldr	r3, [r0, #4]
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	f104 0018 	add.w	r0, r4, #24
 8011a52:	4798      	blx	r3
 8011a54:	2209      	movs	r2, #9
 8011a56:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f000 fe2e 	bl	80126bc <ucdr_serialize_array_double>
 8011a60:	f7fa f842 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011a64:	6843      	ldr	r3, [r0, #4]
 8011a66:	4629      	mov	r1, r5
 8011a68:	689b      	ldr	r3, [r3, #8]
 8011a6a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8011a6e:	4798      	blx	r3
 8011a70:	2209      	movs	r2, #9
 8011a72:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011a76:	4628      	mov	r0, r5
 8011a78:	f000 fe20 	bl	80126bc <ucdr_serialize_array_double>
 8011a7c:	f7fa f834 	bl	800bae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011a80:	6843      	ldr	r3, [r0, #4]
 8011a82:	4629      	mov	r1, r5
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8011a8a:	4798      	blx	r3
 8011a8c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8011a90:	4628      	mov	r0, r5
 8011a92:	2209      	movs	r2, #9
 8011a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a98:	f000 be10 	b.w	80126bc <ucdr_serialize_array_double>
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop

08011aa0 <max_serialized_size_sensor_msgs__msg__Imu>:
 8011aa0:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	7003      	strb	r3, [r0, #0]
 8011aa8:	4680      	mov	r8, r0
 8011aaa:	460f      	mov	r7, r1
 8011aac:	f000 f92e 	bl	8011d0c <max_serialized_size_std_msgs__msg__Header>
 8011ab0:	183c      	adds	r4, r7, r0
 8011ab2:	4621      	mov	r1, r4
 8011ab4:	4640      	mov	r0, r8
 8011ab6:	f000 fc93 	bl	80123e0 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8011aba:	4404      	add	r4, r0
 8011abc:	2108      	movs	r1, #8
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f7fb fc3e 	bl	800d340 <ucdr_alignment>
 8011ac4:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8011ac8:	4425      	add	r5, r4
 8011aca:	4629      	mov	r1, r5
 8011acc:	4640      	mov	r0, r8
 8011ace:	f7f9 ffef 	bl	800bab0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011ad2:	4405      	add	r5, r0
 8011ad4:	2108      	movs	r1, #8
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	f7fb fc32 	bl	800d340 <ucdr_alignment>
 8011adc:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8011ae0:	4425      	add	r5, r4
 8011ae2:	4629      	mov	r1, r5
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	f7f9 ffe3 	bl	800bab0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011aea:	4405      	add	r5, r0
 8011aec:	2108      	movs	r1, #8
 8011aee:	4628      	mov	r0, r5
 8011af0:	f7fb fc26 	bl	800d340 <ucdr_alignment>
 8011af4:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8011af8:	4438      	add	r0, r7
 8011afa:	4428      	add	r0, r5
 8011afc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

08011b00 <_Imu__max_serialized_size>:
 8011b00:	b500      	push	{lr}
 8011b02:	b083      	sub	sp, #12
 8011b04:	2100      	movs	r1, #0
 8011b06:	f10d 0007 	add.w	r0, sp, #7
 8011b0a:	f7ff ffc9 	bl	8011aa0 <max_serialized_size_sensor_msgs__msg__Imu>
 8011b0e:	b003      	add	sp, #12
 8011b10:	f85d fb04 	ldr.w	pc, [sp], #4

08011b14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011b14:	4800      	ldr	r0, [pc, #0]	@ (8011b18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 8011b16:	4770      	bx	lr
 8011b18:	20000588 	.word	0x20000588

08011b1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8011b1c:	4b04      	ldr	r3, [pc, #16]	@ (8011b30 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8011b1e:	681a      	ldr	r2, [r3, #0]
 8011b20:	b10a      	cbz	r2, 8011b26 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 8011b22:	4803      	ldr	r0, [pc, #12]	@ (8011b30 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8011b24:	4770      	bx	lr
 8011b26:	4a03      	ldr	r2, [pc, #12]	@ (8011b34 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 8011b28:	4801      	ldr	r0, [pc, #4]	@ (8011b30 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8011b2a:	6812      	ldr	r2, [r2, #0]
 8011b2c:	601a      	str	r2, [r3, #0]
 8011b2e:	4770      	bx	lr
 8011b30:	200005b8 	.word	0x200005b8
 8011b34:	200003bc 	.word	0x200003bc

08011b38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8011b38:	4a02      	ldr	r2, [pc, #8]	@ (8011b44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xc>)
 8011b3a:	4b03      	ldr	r3, [pc, #12]	@ (8011b48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x10>)
 8011b3c:	6812      	ldr	r2, [r2, #0]
 8011b3e:	601a      	str	r2, [r3, #0]
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop
 8011b44:	200003bc 	.word	0x200003bc
 8011b48:	200005b8 	.word	0x200005b8

08011b4c <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 8011b4c:	f008 b99e 	b.w	8019e8c <std_msgs__msg__Bool__init>

08011b50 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 8011b50:	f008 b9a0 	b.w	8019e94 <std_msgs__msg__Bool__fini>

08011b54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8011b54:	4b04      	ldr	r3, [pc, #16]	@ (8011b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	b10a      	cbz	r2, 8011b5e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 8011b5a:	4803      	ldr	r0, [pc, #12]	@ (8011b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8011b5c:	4770      	bx	lr
 8011b5e:	4a03      	ldr	r2, [pc, #12]	@ (8011b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 8011b60:	4801      	ldr	r0, [pc, #4]	@ (8011b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8011b62:	6812      	ldr	r2, [r2, #0]
 8011b64:	601a      	str	r2, [r3, #0]
 8011b66:	4770      	bx	lr
 8011b68:	20000600 	.word	0x20000600
 8011b6c:	200003c0 	.word	0x200003c0

08011b70 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8011b70:	f008 b992 	b.w	8019e98 <std_msgs__msg__Header__init>

08011b74 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8011b74:	f008 b9b4 	b.w	8019ee0 <std_msgs__msg__Header__fini>

08011b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011b78:	b508      	push	{r3, lr}
 8011b7a:	f000 fae1 	bl	8012140 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b7e:	4b06      	ldr	r3, [pc, #24]	@ (8011b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011b80:	4906      	ldr	r1, [pc, #24]	@ (8011b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	60c8      	str	r0, [r1, #12]
 8011b86:	b10a      	cbz	r2, 8011b8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8011b88:	4803      	ldr	r0, [pc, #12]	@ (8011b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011b8a:	bd08      	pop	{r3, pc}
 8011b8c:	4a04      	ldr	r2, [pc, #16]	@ (8011ba0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8011b8e:	4802      	ldr	r0, [pc, #8]	@ (8011b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011b90:	6812      	ldr	r2, [r2, #0]
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	bd08      	pop	{r3, pc}
 8011b96:	bf00      	nop
 8011b98:	20000684 	.word	0x20000684
 8011b9c:	2000060c 	.word	0x2000060c
 8011ba0:	200003c0 	.word	0x200003c0

08011ba4 <_Bool__max_serialized_size>:
 8011ba4:	b508      	push	{r3, lr}
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	2000      	movs	r0, #0
 8011baa:	f7fb fbc9 	bl	800d340 <ucdr_alignment>
 8011bae:	3001      	adds	r0, #1
 8011bb0:	bd08      	pop	{r3, pc}
 8011bb2:	bf00      	nop

08011bb4 <_Bool__cdr_deserialize>:
 8011bb4:	b109      	cbz	r1, 8011bba <_Bool__cdr_deserialize+0x6>
 8011bb6:	f7fa b8c5 	b.w	800bd44 <ucdr_deserialize_bool>
 8011bba:	4608      	mov	r0, r1
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop

08011bc0 <get_serialized_size_std_msgs__msg__Bool>:
 8011bc0:	b138      	cbz	r0, 8011bd2 <get_serialized_size_std_msgs__msg__Bool+0x12>
 8011bc2:	b508      	push	{r3, lr}
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	2101      	movs	r1, #1
 8011bca:	f7fb fbb9 	bl	800d340 <ucdr_alignment>
 8011bce:	3001      	adds	r0, #1
 8011bd0:	bd08      	pop	{r3, pc}
 8011bd2:	4770      	bx	lr

08011bd4 <_Bool__cdr_serialize>:
 8011bd4:	460a      	mov	r2, r1
 8011bd6:	b118      	cbz	r0, 8011be0 <_Bool__cdr_serialize+0xc>
 8011bd8:	7801      	ldrb	r1, [r0, #0]
 8011bda:	4610      	mov	r0, r2
 8011bdc:	f7fa b89c 	b.w	800bd18 <ucdr_serialize_bool>
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop

08011be4 <_Bool__get_serialized_size>:
 8011be4:	b130      	cbz	r0, 8011bf4 <_Bool__get_serialized_size+0x10>
 8011be6:	b508      	push	{r3, lr}
 8011be8:	2101      	movs	r1, #1
 8011bea:	2000      	movs	r0, #0
 8011bec:	f7fb fba8 	bl	800d340 <ucdr_alignment>
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	bd08      	pop	{r3, pc}
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop

08011bf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8011bf8:	4800      	ldr	r0, [pc, #0]	@ (8011bfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 8011bfa:	4770      	bx	lr
 8011bfc:	20000690 	.word	0x20000690

08011c00 <_Header__max_serialized_size>:
 8011c00:	b500      	push	{lr}
 8011c02:	b083      	sub	sp, #12
 8011c04:	2301      	movs	r3, #1
 8011c06:	2100      	movs	r1, #0
 8011c08:	f10d 0007 	add.w	r0, sp, #7
 8011c0c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c10:	f000 faf4 	bl	80121fc <max_serialized_size_builtin_interfaces__msg__Time>
 8011c14:	b003      	add	sp, #12
 8011c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c1a:	bf00      	nop

08011c1c <get_serialized_size_std_msgs__msg__Header>:
 8011c1c:	b570      	push	{r4, r5, r6, lr}
 8011c1e:	4605      	mov	r5, r0
 8011c20:	b168      	cbz	r0, 8011c3e <get_serialized_size_std_msgs__msg__Header+0x22>
 8011c22:	460c      	mov	r4, r1
 8011c24:	f000 fa9a 	bl	801215c <get_serialized_size_builtin_interfaces__msg__Time>
 8011c28:	1826      	adds	r6, r4, r0
 8011c2a:	2104      	movs	r1, #4
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f7fb fb87 	bl	800d340 <ucdr_alignment>
 8011c32:	68e9      	ldr	r1, [r5, #12]
 8011c34:	f1c4 0405 	rsb	r4, r4, #5
 8011c38:	440c      	add	r4, r1
 8011c3a:	4404      	add	r4, r0
 8011c3c:	19a0      	adds	r0, r4, r6
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}

08011c40 <_Header__cdr_deserialize>:
 8011c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c42:	460c      	mov	r4, r1
 8011c44:	b083      	sub	sp, #12
 8011c46:	b1e1      	cbz	r1, 8011c82 <_Header__cdr_deserialize+0x42>
 8011c48:	4606      	mov	r6, r0
 8011c4a:	f000 faeb 	bl	8012224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c4e:	6843      	ldr	r3, [r0, #4]
 8011c50:	4621      	mov	r1, r4
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	4630      	mov	r0, r6
 8011c56:	4798      	blx	r3
 8011c58:	6927      	ldr	r7, [r4, #16]
 8011c5a:	68a1      	ldr	r1, [r4, #8]
 8011c5c:	ab01      	add	r3, sp, #4
 8011c5e:	463a      	mov	r2, r7
 8011c60:	4630      	mov	r0, r6
 8011c62:	f000 fde7 	bl	8012834 <ucdr_deserialize_sequence_char>
 8011c66:	9b01      	ldr	r3, [sp, #4]
 8011c68:	4605      	mov	r5, r0
 8011c6a:	b920      	cbnz	r0, 8011c76 <_Header__cdr_deserialize+0x36>
 8011c6c:	429f      	cmp	r7, r3
 8011c6e:	d30c      	bcc.n	8011c8a <_Header__cdr_deserialize+0x4a>
 8011c70:	4628      	mov	r0, r5
 8011c72:	b003      	add	sp, #12
 8011c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c76:	b103      	cbz	r3, 8011c7a <_Header__cdr_deserialize+0x3a>
 8011c78:	3b01      	subs	r3, #1
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	60e3      	str	r3, [r4, #12]
 8011c7e:	b003      	add	sp, #12
 8011c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c82:	460d      	mov	r5, r1
 8011c84:	4628      	mov	r0, r5
 8011c86:	b003      	add	sp, #12
 8011c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c8a:	2101      	movs	r1, #1
 8011c8c:	75b0      	strb	r0, [r6, #22]
 8011c8e:	7571      	strb	r1, [r6, #21]
 8011c90:	4630      	mov	r0, r6
 8011c92:	60e5      	str	r5, [r4, #12]
 8011c94:	f7fb fb6a 	bl	800d36c <ucdr_align_to>
 8011c98:	4630      	mov	r0, r6
 8011c9a:	9901      	ldr	r1, [sp, #4]
 8011c9c:	f7fb fb9c 	bl	800d3d8 <ucdr_advance_buffer>
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	b003      	add	sp, #12
 8011ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ca6:	bf00      	nop

08011ca8 <_Header__cdr_serialize>:
 8011ca8:	b1f8      	cbz	r0, 8011cea <_Header__cdr_serialize+0x42>
 8011caa:	b570      	push	{r4, r5, r6, lr}
 8011cac:	4604      	mov	r4, r0
 8011cae:	460d      	mov	r5, r1
 8011cb0:	f000 fab8 	bl	8012224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011cb4:	6843      	ldr	r3, [r0, #4]
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	689b      	ldr	r3, [r3, #8]
 8011cba:	4620      	mov	r0, r4
 8011cbc:	4798      	blx	r3
 8011cbe:	68a6      	ldr	r6, [r4, #8]
 8011cc0:	b156      	cbz	r6, 8011cd8 <_Header__cdr_serialize+0x30>
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	f7ee fab6 	bl	8000234 <strlen>
 8011cc8:	4631      	mov	r1, r6
 8011cca:	60e0      	str	r0, [r4, #12]
 8011ccc:	1c42      	adds	r2, r0, #1
 8011cce:	4628      	mov	r0, r5
 8011cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cd4:	f000 bd9c 	b.w	8012810 <ucdr_serialize_sequence_char>
 8011cd8:	4630      	mov	r0, r6
 8011cda:	60e0      	str	r0, [r4, #12]
 8011cdc:	4632      	mov	r2, r6
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ce6:	f000 bd93 	b.w	8012810 <ucdr_serialize_sequence_char>
 8011cea:	4770      	bx	lr

08011cec <_Header__get_serialized_size>:
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	4604      	mov	r4, r0
 8011cf0:	b150      	cbz	r0, 8011d08 <_Header__get_serialized_size+0x1c>
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	f000 fa32 	bl	801215c <get_serialized_size_builtin_interfaces__msg__Time>
 8011cf8:	2104      	movs	r1, #4
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	f7fb fb20 	bl	800d340 <ucdr_alignment>
 8011d00:	68e2      	ldr	r2, [r4, #12]
 8011d02:	3205      	adds	r2, #5
 8011d04:	1953      	adds	r3, r2, r5
 8011d06:	4418      	add	r0, r3
 8011d08:	bd38      	pop	{r3, r4, r5, pc}
 8011d0a:	bf00      	nop

08011d0c <max_serialized_size_std_msgs__msg__Header>:
 8011d0c:	b510      	push	{r4, lr}
 8011d0e:	2301      	movs	r3, #1
 8011d10:	4604      	mov	r4, r0
 8011d12:	7003      	strb	r3, [r0, #0]
 8011d14:	f000 fa72 	bl	80121fc <max_serialized_size_builtin_interfaces__msg__Time>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	7023      	strb	r3, [r4, #0]
 8011d1c:	bd10      	pop	{r4, pc}
 8011d1e:	bf00      	nop

08011d20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011d20:	4800      	ldr	r0, [pc, #0]	@ (8011d24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011d22:	4770      	bx	lr
 8011d24:	200006b8 	.word	0x200006b8

08011d28 <std_srvs__srv__Empty_Request__init>:
 8011d28:	3800      	subs	r0, #0
 8011d2a:	bf18      	it	ne
 8011d2c:	2001      	movne	r0, #1
 8011d2e:	4770      	bx	lr

08011d30 <std_srvs__srv__Empty_Request__fini>:
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop

08011d34 <std_srvs__srv__Empty_Response__init>:
 8011d34:	3800      	subs	r0, #0
 8011d36:	bf18      	it	ne
 8011d38:	2001      	movne	r0, #1
 8011d3a:	4770      	bx	lr

08011d3c <std_srvs__srv__Empty_Response__fini>:
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop

08011d40 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty>:
 8011d40:	4b04      	ldr	r3, [pc, #16]	@ (8011d54 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty+0x14>)
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	b10a      	cbz	r2, 8011d4a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty+0xa>
 8011d46:	4803      	ldr	r0, [pc, #12]	@ (8011d54 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty+0x14>)
 8011d48:	4770      	bx	lr
 8011d4a:	4a03      	ldr	r2, [pc, #12]	@ (8011d58 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty+0x18>)
 8011d4c:	4801      	ldr	r0, [pc, #4]	@ (8011d54 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Empty+0x14>)
 8011d4e:	6812      	ldr	r2, [r2, #0]
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	4770      	bx	lr
 8011d54:	200006e8 	.word	0x200006e8
 8011d58:	200003bc 	.word	0x200003bc

08011d5c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Empty_Request>:
 8011d5c:	4b04      	ldr	r3, [pc, #16]	@ (8011d70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x14>)
 8011d5e:	4805      	ldr	r0, [pc, #20]	@ (8011d74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x18>)
 8011d60:	4905      	ldr	r1, [pc, #20]	@ (8011d78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x1c>)
 8011d62:	4a06      	ldr	r2, [pc, #24]	@ (8011d7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x20>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	6003      	str	r3, [r0, #0]
 8011d68:	600b      	str	r3, [r1, #0]
 8011d6a:	6013      	str	r3, [r2, #0]
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	200003bc 	.word	0x200003bc
 8011d74:	20000704 	.word	0x20000704
 8011d78:	20000710 	.word	0x20000710
 8011d7c:	200006e8 	.word	0x200006e8

08011d80 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8011d80:	4b04      	ldr	r3, [pc, #16]	@ (8011d94 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	b10a      	cbz	r2, 8011d8a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 8011d86:	4803      	ldr	r0, [pc, #12]	@ (8011d94 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8011d88:	4770      	bx	lr
 8011d8a:	4a03      	ldr	r2, [pc, #12]	@ (8011d98 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 8011d8c:	4801      	ldr	r0, [pc, #4]	@ (8011d94 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8011d8e:	6812      	ldr	r2, [r2, #0]
 8011d90:	601a      	str	r2, [r3, #0]
 8011d92:	4770      	bx	lr
 8011d94:	20000724 	.word	0x20000724
 8011d98:	200003bc 	.word	0x200003bc

08011d9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8011d9c:	4b04      	ldr	r3, [pc, #16]	@ (8011db0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011d9e:	4805      	ldr	r0, [pc, #20]	@ (8011db4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8011da0:	4905      	ldr	r1, [pc, #20]	@ (8011db8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 8011da2:	4a06      	ldr	r2, [pc, #24]	@ (8011dbc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	6003      	str	r3, [r0, #0]
 8011da8:	600b      	str	r3, [r1, #0]
 8011daa:	6013      	str	r3, [r2, #0]
 8011dac:	4770      	bx	lr
 8011dae:	bf00      	nop
 8011db0:	200003bc 	.word	0x200003bc
 8011db4:	20000740 	.word	0x20000740
 8011db8:	2000074c 	.word	0x2000074c
 8011dbc:	20000724 	.word	0x20000724

08011dc0 <std_srvs__srv__Empty_Request__rosidl_typesupport_introspection_c__Empty_Request_init_function>:
 8011dc0:	f7ff bfb2 	b.w	8011d28 <std_srvs__srv__Empty_Request__init>

08011dc4 <std_srvs__srv__Empty_Request__rosidl_typesupport_introspection_c__Empty_Request_fini_function>:
 8011dc4:	f7ff bfb4 	b.w	8011d30 <std_srvs__srv__Empty_Request__fini>

08011dc8 <std_srvs__srv__Empty_Response__rosidl_typesupport_introspection_c__Empty_Response_init_function>:
 8011dc8:	f7ff bfb4 	b.w	8011d34 <std_srvs__srv__Empty_Response__init>

08011dcc <std_srvs__srv__Empty_Response__rosidl_typesupport_introspection_c__Empty_Response_fini_function>:
 8011dcc:	f7ff bfb6 	b.w	8011d3c <std_srvs__srv__Empty_Response__fini>

08011dd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Request>:
 8011dd0:	4b04      	ldr	r3, [pc, #16]	@ (8011de4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x14>)
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	b10a      	cbz	r2, 8011dda <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0xa>
 8011dd6:	4803      	ldr	r0, [pc, #12]	@ (8011de4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x14>)
 8011dd8:	4770      	bx	lr
 8011dda:	4a03      	ldr	r2, [pc, #12]	@ (8011de8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x18>)
 8011ddc:	4801      	ldr	r0, [pc, #4]	@ (8011de4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x14>)
 8011dde:	6812      	ldr	r2, [r2, #0]
 8011de0:	601a      	str	r2, [r3, #0]
 8011de2:	4770      	bx	lr
 8011de4:	20000794 	.word	0x20000794
 8011de8:	200003c0 	.word	0x200003c0

08011dec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Response>:
 8011dec:	4b04      	ldr	r3, [pc, #16]	@ (8011e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Response+0x14>)
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	b10a      	cbz	r2, 8011df6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Response+0xa>
 8011df2:	4803      	ldr	r0, [pc, #12]	@ (8011e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Response+0x14>)
 8011df4:	4770      	bx	lr
 8011df6:	4a03      	ldr	r2, [pc, #12]	@ (8011e04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Response+0x18>)
 8011df8:	4801      	ldr	r0, [pc, #4]	@ (8011e00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Empty_Response+0x14>)
 8011dfa:	6812      	ldr	r2, [r2, #0]
 8011dfc:	601a      	str	r2, [r3, #0]
 8011dfe:	4770      	bx	lr
 8011e00:	200007dc 	.word	0x200007dc
 8011e04:	200003c0 	.word	0x200003c0

08011e08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty>:
 8011e08:	4b13      	ldr	r3, [pc, #76]	@ (8011e58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x50>)
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	b132      	cbz	r2, 8011e1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x14>
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	689a      	ldr	r2, [r3, #8]
 8011e12:	b152      	cbz	r2, 8011e2a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x22>
 8011e14:	68da      	ldr	r2, [r3, #12]
 8011e16:	b182      	cbz	r2, 8011e3a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x32>
 8011e18:	480f      	ldr	r0, [pc, #60]	@ (8011e58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x50>)
 8011e1a:	4770      	bx	lr
 8011e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8011e5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x54>)
 8011e1e:	6812      	ldr	r2, [r2, #0]
 8011e20:	601a      	str	r2, [r3, #0]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	689a      	ldr	r2, [r3, #8]
 8011e26:	2a00      	cmp	r2, #0
 8011e28:	d1f4      	bne.n	8011e14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0xc>
 8011e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8011e60 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x58>)
 8011e2c:	6811      	ldr	r1, [r2, #0]
 8011e2e:	b179      	cbz	r1, 8011e50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x48>
 8011e30:	6852      	ldr	r2, [r2, #4]
 8011e32:	609a      	str	r2, [r3, #8]
 8011e34:	68da      	ldr	r2, [r3, #12]
 8011e36:	2a00      	cmp	r2, #0
 8011e38:	d1ee      	bne.n	8011e18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x10>
 8011e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8011e64 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x5c>)
 8011e3c:	6811      	ldr	r1, [r2, #0]
 8011e3e:	b119      	cbz	r1, 8011e48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x40>
 8011e40:	6852      	ldr	r2, [r2, #4]
 8011e42:	4805      	ldr	r0, [pc, #20]	@ (8011e58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x50>)
 8011e44:	60da      	str	r2, [r3, #12]
 8011e46:	4770      	bx	lr
 8011e48:	4904      	ldr	r1, [pc, #16]	@ (8011e5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x54>)
 8011e4a:	6809      	ldr	r1, [r1, #0]
 8011e4c:	6011      	str	r1, [r2, #0]
 8011e4e:	e7f7      	b.n	8011e40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x38>
 8011e50:	4902      	ldr	r1, [pc, #8]	@ (8011e5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x54>)
 8011e52:	6809      	ldr	r1, [r1, #0]
 8011e54:	6011      	str	r1, [r2, #0]
 8011e56:	e7eb      	b.n	8011e30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Empty+0x28>
 8011e58:	200007f8 	.word	0x200007f8
 8011e5c:	200003c0 	.word	0x200003c0
 8011e60:	20000794 	.word	0x20000794
 8011e64:	200007dc 	.word	0x200007dc

08011e68 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 8011e68:	f008 b846 	b.w	8019ef8 <std_srvs__srv__SetBool_Request__init>

08011e6c <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 8011e6c:	f008 b848 	b.w	8019f00 <std_srvs__srv__SetBool_Request__fini>

08011e70 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 8011e70:	f008 b848 	b.w	8019f04 <std_srvs__srv__SetBool_Response__init>

08011e74 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 8011e74:	f008 b858 	b.w	8019f28 <std_srvs__srv__SetBool_Response__fini>

08011e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8011e78:	4b04      	ldr	r3, [pc, #16]	@ (8011e8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	b10a      	cbz	r2, 8011e82 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 8011e7e:	4803      	ldr	r0, [pc, #12]	@ (8011e8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011e80:	4770      	bx	lr
 8011e82:	4a03      	ldr	r2, [pc, #12]	@ (8011e90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8011e84:	4801      	ldr	r0, [pc, #4]	@ (8011e8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011e86:	6812      	ldr	r2, [r2, #0]
 8011e88:	601a      	str	r2, [r3, #0]
 8011e8a:	4770      	bx	lr
 8011e8c:	20000840 	.word	0x20000840
 8011e90:	200003c0 	.word	0x200003c0

08011e94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8011e94:	4b04      	ldr	r3, [pc, #16]	@ (8011ea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	b10a      	cbz	r2, 8011e9e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 8011e9a:	4803      	ldr	r0, [pc, #12]	@ (8011ea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8011e9c:	4770      	bx	lr
 8011e9e:	4a03      	ldr	r2, [pc, #12]	@ (8011eac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 8011ea0:	4801      	ldr	r0, [pc, #4]	@ (8011ea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8011ea2:	6812      	ldr	r2, [r2, #0]
 8011ea4:	601a      	str	r2, [r3, #0]
 8011ea6:	4770      	bx	lr
 8011ea8:	200008c4 	.word	0x200008c4
 8011eac:	200003c0 	.word	0x200003c0

08011eb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8011eb0:	4b13      	ldr	r3, [pc, #76]	@ (8011f00 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8011eb2:	681a      	ldr	r2, [r3, #0]
 8011eb4:	b132      	cbz	r2, 8011ec4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	689a      	ldr	r2, [r3, #8]
 8011eba:	b152      	cbz	r2, 8011ed2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 8011ebc:	68da      	ldr	r2, [r3, #12]
 8011ebe:	b182      	cbz	r2, 8011ee2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 8011ec0:	480f      	ldr	r0, [pc, #60]	@ (8011f00 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8011ec2:	4770      	bx	lr
 8011ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8011f04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8011ec6:	6812      	ldr	r2, [r2, #0]
 8011ec8:	601a      	str	r2, [r3, #0]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	689a      	ldr	r2, [r3, #8]
 8011ece:	2a00      	cmp	r2, #0
 8011ed0:	d1f4      	bne.n	8011ebc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 8011ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8011f08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 8011ed4:	6811      	ldr	r1, [r2, #0]
 8011ed6:	b179      	cbz	r1, 8011ef8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 8011ed8:	6852      	ldr	r2, [r2, #4]
 8011eda:	609a      	str	r2, [r3, #8]
 8011edc:	68da      	ldr	r2, [r3, #12]
 8011ede:	2a00      	cmp	r2, #0
 8011ee0:	d1ee      	bne.n	8011ec0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 8011ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8011f0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 8011ee4:	6811      	ldr	r1, [r2, #0]
 8011ee6:	b119      	cbz	r1, 8011ef0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 8011ee8:	6852      	ldr	r2, [r2, #4]
 8011eea:	4805      	ldr	r0, [pc, #20]	@ (8011f00 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8011eec:	60da      	str	r2, [r3, #12]
 8011eee:	4770      	bx	lr
 8011ef0:	4904      	ldr	r1, [pc, #16]	@ (8011f04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8011ef2:	6809      	ldr	r1, [r1, #0]
 8011ef4:	6011      	str	r1, [r2, #0]
 8011ef6:	e7f7      	b.n	8011ee8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 8011ef8:	4902      	ldr	r1, [pc, #8]	@ (8011f04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8011efa:	6809      	ldr	r1, [r1, #0]
 8011efc:	6011      	str	r1, [r2, #0]
 8011efe:	e7eb      	b.n	8011ed8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 8011f00:	200008e0 	.word	0x200008e0
 8011f04:	200003c0 	.word	0x200003c0
 8011f08:	20000840 	.word	0x20000840
 8011f0c:	200008c4 	.word	0x200008c4

08011f10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Empty_Request>:
 8011f10:	4800      	ldr	r0, [pc, #0]	@ (8011f14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Empty_Request+0x4>)
 8011f12:	4770      	bx	lr
 8011f14:	20000908 	.word	0x20000908

08011f18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Empty_Response>:
 8011f18:	4800      	ldr	r0, [pc, #0]	@ (8011f1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Empty_Response+0x4>)
 8011f1a:	4770      	bx	lr
 8011f1c:	20000914 	.word	0x20000914

08011f20 <_Empty_Request__max_serialized_size>:
 8011f20:	b508      	push	{r3, lr}
 8011f22:	2101      	movs	r1, #1
 8011f24:	2000      	movs	r0, #0
 8011f26:	f7fb fa0b 	bl	800d340 <ucdr_alignment>
 8011f2a:	3001      	adds	r0, #1
 8011f2c:	bd08      	pop	{r3, pc}
 8011f2e:	bf00      	nop

08011f30 <_Empty_Request__cdr_deserialize>:
 8011f30:	b109      	cbz	r1, 8011f36 <_Empty_Request__cdr_deserialize+0x6>
 8011f32:	f7f9 bf35 	b.w	800bda0 <ucdr_deserialize_uint8_t>
 8011f36:	4608      	mov	r0, r1
 8011f38:	4770      	bx	lr
 8011f3a:	bf00      	nop

08011f3c <_Empty_Response__cdr_deserialize>:
 8011f3c:	b109      	cbz	r1, 8011f42 <_Empty_Response__cdr_deserialize+0x6>
 8011f3e:	f7f9 bf2f 	b.w	800bda0 <ucdr_deserialize_uint8_t>
 8011f42:	4608      	mov	r0, r1
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop

08011f48 <_Empty_Request__get_serialized_size>:
 8011f48:	b130      	cbz	r0, 8011f58 <_Empty_Request__get_serialized_size+0x10>
 8011f4a:	b508      	push	{r3, lr}
 8011f4c:	2101      	movs	r1, #1
 8011f4e:	2000      	movs	r0, #0
 8011f50:	f7fb f9f6 	bl	800d340 <ucdr_alignment>
 8011f54:	3001      	adds	r0, #1
 8011f56:	bd08      	pop	{r3, pc}
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop

08011f5c <_Empty_Request__cdr_serialize>:
 8011f5c:	460a      	mov	r2, r1
 8011f5e:	b118      	cbz	r0, 8011f68 <_Empty_Request__cdr_serialize+0xc>
 8011f60:	7801      	ldrb	r1, [r0, #0]
 8011f62:	4610      	mov	r0, r2
 8011f64:	f7f9 bf06 	b.w	800bd74 <ucdr_serialize_uint8_t>
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop

08011f6c <_Empty_Response__cdr_serialize>:
 8011f6c:	460a      	mov	r2, r1
 8011f6e:	b118      	cbz	r0, 8011f78 <_Empty_Response__cdr_serialize+0xc>
 8011f70:	7801      	ldrb	r1, [r0, #0]
 8011f72:	4610      	mov	r0, r2
 8011f74:	f7f9 befe 	b.w	800bd74 <ucdr_serialize_uint8_t>
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop

08011f7c <get_serialized_size_std_srvs__srv__Empty_Request>:
 8011f7c:	b138      	cbz	r0, 8011f8e <get_serialized_size_std_srvs__srv__Empty_Request+0x12>
 8011f7e:	b508      	push	{r3, lr}
 8011f80:	460b      	mov	r3, r1
 8011f82:	4618      	mov	r0, r3
 8011f84:	2101      	movs	r1, #1
 8011f86:	f7fb f9db 	bl	800d340 <ucdr_alignment>
 8011f8a:	3001      	adds	r0, #1
 8011f8c:	bd08      	pop	{r3, pc}
 8011f8e:	4770      	bx	lr

08011f90 <get_serialized_size_std_srvs__srv__Empty_Response>:
 8011f90:	b138      	cbz	r0, 8011fa2 <get_serialized_size_std_srvs__srv__Empty_Response+0x12>
 8011f92:	b508      	push	{r3, lr}
 8011f94:	460b      	mov	r3, r1
 8011f96:	4618      	mov	r0, r3
 8011f98:	2101      	movs	r1, #1
 8011f9a:	f7fb f9d1 	bl	800d340 <ucdr_alignment>
 8011f9e:	3001      	adds	r0, #1
 8011fa0:	bd08      	pop	{r3, pc}
 8011fa2:	4770      	bx	lr

08011fa4 <_Empty_Response__get_serialized_size>:
 8011fa4:	b130      	cbz	r0, 8011fb4 <_Empty_Response__get_serialized_size+0x10>
 8011fa6:	b508      	push	{r3, lr}
 8011fa8:	2101      	movs	r1, #1
 8011faa:	2000      	movs	r0, #0
 8011fac:	f7fb f9c8 	bl	800d340 <ucdr_alignment>
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	bd08      	pop	{r3, pc}
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop

08011fb8 <_Empty_Response__max_serialized_size>:
 8011fb8:	b508      	push	{r3, lr}
 8011fba:	2101      	movs	r1, #1
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	f7fb f9bf 	bl	800d340 <ucdr_alignment>
 8011fc2:	3001      	adds	r0, #1
 8011fc4:	bd08      	pop	{r3, pc}
 8011fc6:	bf00      	nop

08011fc8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Empty>:
 8011fc8:	4800      	ldr	r0, [pc, #0]	@ (8011fcc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Empty+0x4>)
 8011fca:	4770      	bx	lr
 8011fcc:	200008fc 	.word	0x200008fc

08011fd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8011fd0:	4800      	ldr	r0, [pc, #0]	@ (8011fd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 8011fd2:	4770      	bx	lr
 8011fd4:	20000974 	.word	0x20000974

08011fd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8011fd8:	4800      	ldr	r0, [pc, #0]	@ (8011fdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 8011fda:	4770      	bx	lr
 8011fdc:	20000980 	.word	0x20000980

08011fe0 <_SetBool_Request__max_serialized_size>:
 8011fe0:	b508      	push	{r3, lr}
 8011fe2:	2101      	movs	r1, #1
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	f7fb f9ab 	bl	800d340 <ucdr_alignment>
 8011fea:	3001      	adds	r0, #1
 8011fec:	bd08      	pop	{r3, pc}
 8011fee:	bf00      	nop

08011ff0 <_SetBool_Request__cdr_deserialize>:
 8011ff0:	b109      	cbz	r1, 8011ff6 <_SetBool_Request__cdr_deserialize+0x6>
 8011ff2:	f7f9 bea7 	b.w	800bd44 <ucdr_deserialize_bool>
 8011ff6:	4608      	mov	r0, r1
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop

08011ffc <get_serialized_size_std_srvs__srv__SetBool_Request>:
 8011ffc:	b138      	cbz	r0, 801200e <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 8011ffe:	b508      	push	{r3, lr}
 8012000:	460b      	mov	r3, r1
 8012002:	4618      	mov	r0, r3
 8012004:	2101      	movs	r1, #1
 8012006:	f7fb f99b 	bl	800d340 <ucdr_alignment>
 801200a:	3001      	adds	r0, #1
 801200c:	bd08      	pop	{r3, pc}
 801200e:	4770      	bx	lr

08012010 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 8012010:	b570      	push	{r4, r5, r6, lr}
 8012012:	4605      	mov	r5, r0
 8012014:	b180      	cbz	r0, 8012038 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 8012016:	460c      	mov	r4, r1
 8012018:	4620      	mov	r0, r4
 801201a:	2101      	movs	r1, #1
 801201c:	f7fb f990 	bl	800d340 <ucdr_alignment>
 8012020:	1c63      	adds	r3, r4, #1
 8012022:	181e      	adds	r6, r3, r0
 8012024:	2104      	movs	r1, #4
 8012026:	4630      	mov	r0, r6
 8012028:	f7fb f98a 	bl	800d340 <ucdr_alignment>
 801202c:	68a9      	ldr	r1, [r5, #8]
 801202e:	f1c4 0405 	rsb	r4, r4, #5
 8012032:	440c      	add	r4, r1
 8012034:	4404      	add	r4, r0
 8012036:	19a0      	adds	r0, r4, r6
 8012038:	bd70      	pop	{r4, r5, r6, pc}
 801203a:	bf00      	nop

0801203c <_SetBool_Request__cdr_serialize>:
 801203c:	460a      	mov	r2, r1
 801203e:	b118      	cbz	r0, 8012048 <_SetBool_Request__cdr_serialize+0xc>
 8012040:	7801      	ldrb	r1, [r0, #0]
 8012042:	4610      	mov	r0, r2
 8012044:	f7f9 be68 	b.w	800bd18 <ucdr_serialize_bool>
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop

0801204c <_SetBool_Response__cdr_deserialize>:
 801204c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801204e:	460c      	mov	r4, r1
 8012050:	b083      	sub	sp, #12
 8012052:	b1b9      	cbz	r1, 8012084 <_SetBool_Response__cdr_deserialize+0x38>
 8012054:	4606      	mov	r6, r0
 8012056:	f7f9 fe75 	bl	800bd44 <ucdr_deserialize_bool>
 801205a:	68e7      	ldr	r7, [r4, #12]
 801205c:	6861      	ldr	r1, [r4, #4]
 801205e:	ab01      	add	r3, sp, #4
 8012060:	463a      	mov	r2, r7
 8012062:	4630      	mov	r0, r6
 8012064:	f000 fbe6 	bl	8012834 <ucdr_deserialize_sequence_char>
 8012068:	9b01      	ldr	r3, [sp, #4]
 801206a:	4605      	mov	r5, r0
 801206c:	b920      	cbnz	r0, 8012078 <_SetBool_Response__cdr_deserialize+0x2c>
 801206e:	429f      	cmp	r7, r3
 8012070:	d30c      	bcc.n	801208c <_SetBool_Response__cdr_deserialize+0x40>
 8012072:	4628      	mov	r0, r5
 8012074:	b003      	add	sp, #12
 8012076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012078:	b103      	cbz	r3, 801207c <_SetBool_Response__cdr_deserialize+0x30>
 801207a:	3b01      	subs	r3, #1
 801207c:	4628      	mov	r0, r5
 801207e:	60a3      	str	r3, [r4, #8]
 8012080:	b003      	add	sp, #12
 8012082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012084:	460d      	mov	r5, r1
 8012086:	4628      	mov	r0, r5
 8012088:	b003      	add	sp, #12
 801208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801208c:	2101      	movs	r1, #1
 801208e:	75b0      	strb	r0, [r6, #22]
 8012090:	7571      	strb	r1, [r6, #21]
 8012092:	4630      	mov	r0, r6
 8012094:	60a5      	str	r5, [r4, #8]
 8012096:	f7fb f969 	bl	800d36c <ucdr_align_to>
 801209a:	4630      	mov	r0, r6
 801209c:	9901      	ldr	r1, [sp, #4]
 801209e:	f7fb f99b 	bl	800d3d8 <ucdr_advance_buffer>
 80120a2:	4628      	mov	r0, r5
 80120a4:	b003      	add	sp, #12
 80120a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080120a8 <_SetBool_Response__cdr_serialize>:
 80120a8:	b1e0      	cbz	r0, 80120e4 <_SetBool_Response__cdr_serialize+0x3c>
 80120aa:	b570      	push	{r4, r5, r6, lr}
 80120ac:	460d      	mov	r5, r1
 80120ae:	4604      	mov	r4, r0
 80120b0:	7801      	ldrb	r1, [r0, #0]
 80120b2:	4628      	mov	r0, r5
 80120b4:	f7f9 fe30 	bl	800bd18 <ucdr_serialize_bool>
 80120b8:	6866      	ldr	r6, [r4, #4]
 80120ba:	b156      	cbz	r6, 80120d2 <_SetBool_Response__cdr_serialize+0x2a>
 80120bc:	4630      	mov	r0, r6
 80120be:	f7ee f8b9 	bl	8000234 <strlen>
 80120c2:	4631      	mov	r1, r6
 80120c4:	60a0      	str	r0, [r4, #8]
 80120c6:	1c42      	adds	r2, r0, #1
 80120c8:	4628      	mov	r0, r5
 80120ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120ce:	f000 bb9f 	b.w	8012810 <ucdr_serialize_sequence_char>
 80120d2:	4630      	mov	r0, r6
 80120d4:	60a0      	str	r0, [r4, #8]
 80120d6:	4632      	mov	r2, r6
 80120d8:	4631      	mov	r1, r6
 80120da:	4628      	mov	r0, r5
 80120dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120e0:	f000 bb96 	b.w	8012810 <ucdr_serialize_sequence_char>
 80120e4:	4770      	bx	lr
 80120e6:	bf00      	nop

080120e8 <_SetBool_Request__get_serialized_size>:
 80120e8:	b130      	cbz	r0, 80120f8 <_SetBool_Request__get_serialized_size+0x10>
 80120ea:	b508      	push	{r3, lr}
 80120ec:	2101      	movs	r1, #1
 80120ee:	2000      	movs	r0, #0
 80120f0:	f7fb f926 	bl	800d340 <ucdr_alignment>
 80120f4:	3001      	adds	r0, #1
 80120f6:	bd08      	pop	{r3, pc}
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop

080120fc <_SetBool_Response__max_serialized_size>:
 80120fc:	b508      	push	{r3, lr}
 80120fe:	2101      	movs	r1, #1
 8012100:	2000      	movs	r0, #0
 8012102:	f7fb f91d 	bl	800d340 <ucdr_alignment>
 8012106:	3001      	adds	r0, #1
 8012108:	bd08      	pop	{r3, pc}
 801210a:	bf00      	nop

0801210c <_SetBool_Response__get_serialized_size>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4604      	mov	r4, r0
 8012110:	b160      	cbz	r0, 801212c <_SetBool_Response__get_serialized_size+0x20>
 8012112:	2101      	movs	r1, #1
 8012114:	2000      	movs	r0, #0
 8012116:	f7fb f913 	bl	800d340 <ucdr_alignment>
 801211a:	1c45      	adds	r5, r0, #1
 801211c:	2104      	movs	r1, #4
 801211e:	4628      	mov	r0, r5
 8012120:	f7fb f90e 	bl	800d340 <ucdr_alignment>
 8012124:	68a3      	ldr	r3, [r4, #8]
 8012126:	3305      	adds	r3, #5
 8012128:	4418      	add	r0, r3
 801212a:	4428      	add	r0, r5
 801212c:	bd38      	pop	{r3, r4, r5, pc}
 801212e:	bf00      	nop

08012130 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8012130:	4800      	ldr	r0, [pc, #0]	@ (8012134 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 8012132:	4770      	bx	lr
 8012134:	20000968 	.word	0x20000968

08012138 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012138:	f007 befc 	b.w	8019f34 <builtin_interfaces__msg__Time__init>

0801213c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 801213c:	f007 befe 	b.w	8019f3c <builtin_interfaces__msg__Time__fini>

08012140 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012140:	4b04      	ldr	r3, [pc, #16]	@ (8012154 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	b10a      	cbz	r2, 801214a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012146:	4803      	ldr	r0, [pc, #12]	@ (8012154 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012148:	4770      	bx	lr
 801214a:	4a03      	ldr	r2, [pc, #12]	@ (8012158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 801214c:	4801      	ldr	r0, [pc, #4]	@ (8012154 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801214e:	6812      	ldr	r2, [r2, #0]
 8012150:	601a      	str	r2, [r3, #0]
 8012152:	4770      	bx	lr
 8012154:	20000a3c 	.word	0x20000a3c
 8012158:	200003c0 	.word	0x200003c0

0801215c <get_serialized_size_builtin_interfaces__msg__Time>:
 801215c:	b180      	cbz	r0, 8012180 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 801215e:	b538      	push	{r3, r4, r5, lr}
 8012160:	460d      	mov	r5, r1
 8012162:	4628      	mov	r0, r5
 8012164:	2104      	movs	r1, #4
 8012166:	f7fb f8eb 	bl	800d340 <ucdr_alignment>
 801216a:	1d2b      	adds	r3, r5, #4
 801216c:	181c      	adds	r4, r3, r0
 801216e:	2104      	movs	r1, #4
 8012170:	4620      	mov	r0, r4
 8012172:	f7fb f8e5 	bl	800d340 <ucdr_alignment>
 8012176:	f1c5 0504 	rsb	r5, r5, #4
 801217a:	4428      	add	r0, r5
 801217c:	4420      	add	r0, r4
 801217e:	bd38      	pop	{r3, r4, r5, pc}
 8012180:	4770      	bx	lr
 8012182:	bf00      	nop

08012184 <_Time__cdr_deserialize>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	460c      	mov	r4, r1
 8012188:	b141      	cbz	r1, 801219c <_Time__cdr_deserialize+0x18>
 801218a:	4605      	mov	r5, r0
 801218c:	f7fa fcba 	bl	800cb04 <ucdr_deserialize_int32_t>
 8012190:	1d21      	adds	r1, r4, #4
 8012192:	4628      	mov	r0, r5
 8012194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012198:	f7fa b932 	b.w	800c400 <ucdr_deserialize_uint32_t>
 801219c:	4608      	mov	r0, r1
 801219e:	bd38      	pop	{r3, r4, r5, pc}

080121a0 <_Time__cdr_serialize>:
 80121a0:	b160      	cbz	r0, 80121bc <_Time__cdr_serialize+0x1c>
 80121a2:	b538      	push	{r3, r4, r5, lr}
 80121a4:	460d      	mov	r5, r1
 80121a6:	4604      	mov	r4, r0
 80121a8:	6801      	ldr	r1, [r0, #0]
 80121aa:	4628      	mov	r0, r5
 80121ac:	f7fa fc12 	bl	800c9d4 <ucdr_serialize_int32_t>
 80121b0:	6861      	ldr	r1, [r4, #4]
 80121b2:	4628      	mov	r0, r5
 80121b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121b8:	f7f9 bff2 	b.w	800c1a0 <ucdr_serialize_uint32_t>
 80121bc:	4770      	bx	lr
 80121be:	bf00      	nop

080121c0 <_Time__get_serialized_size>:
 80121c0:	b160      	cbz	r0, 80121dc <_Time__get_serialized_size+0x1c>
 80121c2:	b510      	push	{r4, lr}
 80121c4:	2104      	movs	r1, #4
 80121c6:	2000      	movs	r0, #0
 80121c8:	f7fb f8ba 	bl	800d340 <ucdr_alignment>
 80121cc:	1d04      	adds	r4, r0, #4
 80121ce:	2104      	movs	r1, #4
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7fb f8b5 	bl	800d340 <ucdr_alignment>
 80121d6:	3004      	adds	r0, #4
 80121d8:	4420      	add	r0, r4
 80121da:	bd10      	pop	{r4, pc}
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop

080121e0 <_Time__max_serialized_size>:
 80121e0:	b510      	push	{r4, lr}
 80121e2:	2104      	movs	r1, #4
 80121e4:	2000      	movs	r0, #0
 80121e6:	f7fb f8ab 	bl	800d340 <ucdr_alignment>
 80121ea:	1d04      	adds	r4, r0, #4
 80121ec:	2104      	movs	r1, #4
 80121ee:	4620      	mov	r0, r4
 80121f0:	f7fb f8a6 	bl	800d340 <ucdr_alignment>
 80121f4:	3004      	adds	r0, #4
 80121f6:	4420      	add	r0, r4
 80121f8:	bd10      	pop	{r4, pc}
 80121fa:	bf00      	nop

080121fc <max_serialized_size_builtin_interfaces__msg__Time>:
 80121fc:	b538      	push	{r3, r4, r5, lr}
 80121fe:	460c      	mov	r4, r1
 8012200:	2301      	movs	r3, #1
 8012202:	7003      	strb	r3, [r0, #0]
 8012204:	2104      	movs	r1, #4
 8012206:	4620      	mov	r0, r4
 8012208:	f7fb f89a 	bl	800d340 <ucdr_alignment>
 801220c:	1d25      	adds	r5, r4, #4
 801220e:	4405      	add	r5, r0
 8012210:	2104      	movs	r1, #4
 8012212:	4628      	mov	r0, r5
 8012214:	f7fb f894 	bl	800d340 <ucdr_alignment>
 8012218:	f1c4 0404 	rsb	r4, r4, #4
 801221c:	4420      	add	r0, r4
 801221e:	4428      	add	r0, r5
 8012220:	bd38      	pop	{r3, r4, r5, pc}
 8012222:	bf00      	nop

08012224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012224:	4800      	ldr	r0, [pc, #0]	@ (8012228 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012226:	4770      	bx	lr
 8012228:	20000a48 	.word	0x20000a48

0801222c <geometry_msgs__msg__Twist__init>:
 801222c:	b570      	push	{r4, r5, r6, lr}
 801222e:	4605      	mov	r5, r0
 8012230:	b1a8      	cbz	r0, 801225e <geometry_msgs__msg__Twist__init+0x32>
 8012232:	f000 f82b 	bl	801228c <geometry_msgs__msg__Vector3__init>
 8012236:	4604      	mov	r4, r0
 8012238:	b140      	cbz	r0, 801224c <geometry_msgs__msg__Twist__init+0x20>
 801223a:	f105 0618 	add.w	r6, r5, #24
 801223e:	4630      	mov	r0, r6
 8012240:	f000 f824 	bl	801228c <geometry_msgs__msg__Vector3__init>
 8012244:	4604      	mov	r4, r0
 8012246:	b168      	cbz	r0, 8012264 <geometry_msgs__msg__Twist__init+0x38>
 8012248:	4620      	mov	r0, r4
 801224a:	bd70      	pop	{r4, r5, r6, pc}
 801224c:	4628      	mov	r0, r5
 801224e:	f000 f821 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8012252:	f105 0018 	add.w	r0, r5, #24
 8012256:	f000 f81d 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 801225a:	4620      	mov	r0, r4
 801225c:	bd70      	pop	{r4, r5, r6, pc}
 801225e:	4604      	mov	r4, r0
 8012260:	4620      	mov	r0, r4
 8012262:	bd70      	pop	{r4, r5, r6, pc}
 8012264:	4628      	mov	r0, r5
 8012266:	f000 f815 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 801226a:	4630      	mov	r0, r6
 801226c:	f000 f812 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8012270:	e7ea      	b.n	8012248 <geometry_msgs__msg__Twist__init+0x1c>
 8012272:	bf00      	nop

08012274 <geometry_msgs__msg__Twist__fini>:
 8012274:	b148      	cbz	r0, 801228a <geometry_msgs__msg__Twist__fini+0x16>
 8012276:	b510      	push	{r4, lr}
 8012278:	4604      	mov	r4, r0
 801227a:	f000 f80b 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 801227e:	f104 0018 	add.w	r0, r4, #24
 8012282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012286:	f000 b805 	b.w	8012294 <geometry_msgs__msg__Vector3__fini>
 801228a:	4770      	bx	lr

0801228c <geometry_msgs__msg__Vector3__init>:
 801228c:	3800      	subs	r0, #0
 801228e:	bf18      	it	ne
 8012290:	2001      	movne	r0, #1
 8012292:	4770      	bx	lr

08012294 <geometry_msgs__msg__Vector3__fini>:
 8012294:	4770      	bx	lr
 8012296:	bf00      	nop

08012298 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8012298:	f007 be52 	b.w	8019f40 <geometry_msgs__msg__Quaternion__init>

0801229c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 801229c:	f007 be64 	b.w	8019f68 <geometry_msgs__msg__Quaternion__fini>

080122a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80122a0:	4b04      	ldr	r3, [pc, #16]	@ (80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	b10a      	cbz	r2, 80122aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 80122a6:	4803      	ldr	r0, [pc, #12]	@ (80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80122a8:	4770      	bx	lr
 80122aa:	4a03      	ldr	r2, [pc, #12]	@ (80122b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 80122ac:	4801      	ldr	r0, [pc, #4]	@ (80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80122ae:	6812      	ldr	r2, [r2, #0]
 80122b0:	601a      	str	r2, [r3, #0]
 80122b2:	4770      	bx	lr
 80122b4:	20000b60 	.word	0x20000b60
 80122b8:	200003c0 	.word	0x200003c0

080122bc <get_serialized_size_geometry_msgs__msg__Quaternion>:
 80122bc:	b1f0      	cbz	r0, 80122fc <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 80122be:	b570      	push	{r4, r5, r6, lr}
 80122c0:	460d      	mov	r5, r1
 80122c2:	4628      	mov	r0, r5
 80122c4:	2108      	movs	r1, #8
 80122c6:	f7fb f83b 	bl	800d340 <ucdr_alignment>
 80122ca:	f105 0308 	add.w	r3, r5, #8
 80122ce:	181e      	adds	r6, r3, r0
 80122d0:	2108      	movs	r1, #8
 80122d2:	4630      	mov	r0, r6
 80122d4:	f7fb f834 	bl	800d340 <ucdr_alignment>
 80122d8:	f100 0408 	add.w	r4, r0, #8
 80122dc:	4434      	add	r4, r6
 80122de:	2108      	movs	r1, #8
 80122e0:	4620      	mov	r0, r4
 80122e2:	f7fb f82d 	bl	800d340 <ucdr_alignment>
 80122e6:	3008      	adds	r0, #8
 80122e8:	4404      	add	r4, r0
 80122ea:	2108      	movs	r1, #8
 80122ec:	4620      	mov	r0, r4
 80122ee:	f7fb f827 	bl	800d340 <ucdr_alignment>
 80122f2:	f1c5 0508 	rsb	r5, r5, #8
 80122f6:	4428      	add	r0, r5
 80122f8:	4420      	add	r0, r4
 80122fa:	bd70      	pop	{r4, r5, r6, pc}
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop

08012300 <_Quaternion__cdr_deserialize>:
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	460c      	mov	r4, r1
 8012304:	b199      	cbz	r1, 801232e <_Quaternion__cdr_deserialize+0x2e>
 8012306:	4605      	mov	r5, r0
 8012308:	f7fa fe2e 	bl	800cf68 <ucdr_deserialize_double>
 801230c:	f104 0108 	add.w	r1, r4, #8
 8012310:	4628      	mov	r0, r5
 8012312:	f7fa fe29 	bl	800cf68 <ucdr_deserialize_double>
 8012316:	f104 0110 	add.w	r1, r4, #16
 801231a:	4628      	mov	r0, r5
 801231c:	f7fa fe24 	bl	800cf68 <ucdr_deserialize_double>
 8012320:	f104 0118 	add.w	r1, r4, #24
 8012324:	4628      	mov	r0, r5
 8012326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801232a:	f7fa be1d 	b.w	800cf68 <ucdr_deserialize_double>
 801232e:	4608      	mov	r0, r1
 8012330:	bd38      	pop	{r3, r4, r5, pc}
 8012332:	bf00      	nop

08012334 <_Quaternion__cdr_serialize>:
 8012334:	b1c0      	cbz	r0, 8012368 <_Quaternion__cdr_serialize+0x34>
 8012336:	b538      	push	{r3, r4, r5, lr}
 8012338:	ed90 0b00 	vldr	d0, [r0]
 801233c:	460d      	mov	r5, r1
 801233e:	4604      	mov	r4, r0
 8012340:	4608      	mov	r0, r1
 8012342:	f7fa fc6f 	bl	800cc24 <ucdr_serialize_double>
 8012346:	ed94 0b02 	vldr	d0, [r4, #8]
 801234a:	4628      	mov	r0, r5
 801234c:	f7fa fc6a 	bl	800cc24 <ucdr_serialize_double>
 8012350:	ed94 0b04 	vldr	d0, [r4, #16]
 8012354:	4628      	mov	r0, r5
 8012356:	f7fa fc65 	bl	800cc24 <ucdr_serialize_double>
 801235a:	ed94 0b06 	vldr	d0, [r4, #24]
 801235e:	4628      	mov	r0, r5
 8012360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012364:	f7fa bc5e 	b.w	800cc24 <ucdr_serialize_double>
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop

0801236c <_Quaternion__get_serialized_size>:
 801236c:	b1d0      	cbz	r0, 80123a4 <_Quaternion__get_serialized_size+0x38>
 801236e:	b538      	push	{r3, r4, r5, lr}
 8012370:	2108      	movs	r1, #8
 8012372:	2000      	movs	r0, #0
 8012374:	f7fa ffe4 	bl	800d340 <ucdr_alignment>
 8012378:	f100 0508 	add.w	r5, r0, #8
 801237c:	2108      	movs	r1, #8
 801237e:	4628      	mov	r0, r5
 8012380:	f7fa ffde 	bl	800d340 <ucdr_alignment>
 8012384:	f100 0408 	add.w	r4, r0, #8
 8012388:	442c      	add	r4, r5
 801238a:	2108      	movs	r1, #8
 801238c:	4620      	mov	r0, r4
 801238e:	f7fa ffd7 	bl	800d340 <ucdr_alignment>
 8012392:	3008      	adds	r0, #8
 8012394:	4404      	add	r4, r0
 8012396:	2108      	movs	r1, #8
 8012398:	4620      	mov	r0, r4
 801239a:	f7fa ffd1 	bl	800d340 <ucdr_alignment>
 801239e:	3008      	adds	r0, #8
 80123a0:	4420      	add	r0, r4
 80123a2:	bd38      	pop	{r3, r4, r5, pc}
 80123a4:	4770      	bx	lr
 80123a6:	bf00      	nop

080123a8 <_Quaternion__max_serialized_size>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	2108      	movs	r1, #8
 80123ac:	2000      	movs	r0, #0
 80123ae:	f7fa ffc7 	bl	800d340 <ucdr_alignment>
 80123b2:	f100 0508 	add.w	r5, r0, #8
 80123b6:	2108      	movs	r1, #8
 80123b8:	4628      	mov	r0, r5
 80123ba:	f7fa ffc1 	bl	800d340 <ucdr_alignment>
 80123be:	f100 0408 	add.w	r4, r0, #8
 80123c2:	442c      	add	r4, r5
 80123c4:	2108      	movs	r1, #8
 80123c6:	4620      	mov	r0, r4
 80123c8:	f7fa ffba 	bl	800d340 <ucdr_alignment>
 80123cc:	3008      	adds	r0, #8
 80123ce:	4404      	add	r4, r0
 80123d0:	2108      	movs	r1, #8
 80123d2:	4620      	mov	r0, r4
 80123d4:	f7fa ffb4 	bl	800d340 <ucdr_alignment>
 80123d8:	3008      	adds	r0, #8
 80123da:	4420      	add	r0, r4
 80123dc:	bd38      	pop	{r3, r4, r5, pc}
 80123de:	bf00      	nop

080123e0 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 80123e0:	b570      	push	{r4, r5, r6, lr}
 80123e2:	2301      	movs	r3, #1
 80123e4:	460c      	mov	r4, r1
 80123e6:	7003      	strb	r3, [r0, #0]
 80123e8:	2108      	movs	r1, #8
 80123ea:	4620      	mov	r0, r4
 80123ec:	f7fa ffa8 	bl	800d340 <ucdr_alignment>
 80123f0:	f104 0508 	add.w	r5, r4, #8
 80123f4:	1946      	adds	r6, r0, r5
 80123f6:	2108      	movs	r1, #8
 80123f8:	4630      	mov	r0, r6
 80123fa:	f7fa ffa1 	bl	800d340 <ucdr_alignment>
 80123fe:	f100 0508 	add.w	r5, r0, #8
 8012402:	4435      	add	r5, r6
 8012404:	2108      	movs	r1, #8
 8012406:	4628      	mov	r0, r5
 8012408:	f7fa ff9a 	bl	800d340 <ucdr_alignment>
 801240c:	3008      	adds	r0, #8
 801240e:	4405      	add	r5, r0
 8012410:	2108      	movs	r1, #8
 8012412:	4628      	mov	r0, r5
 8012414:	f7fa ff94 	bl	800d340 <ucdr_alignment>
 8012418:	f1c4 0408 	rsb	r4, r4, #8
 801241c:	4420      	add	r0, r4
 801241e:	4428      	add	r0, r5
 8012420:	bd70      	pop	{r4, r5, r6, pc}
 8012422:	bf00      	nop

08012424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8012424:	4800      	ldr	r0, [pc, #0]	@ (8012428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8012426:	4770      	bx	lr
 8012428:	20000b6c 	.word	0x20000b6c

0801242c <imu_interfaces__srv__ImuCalibration_Request__init>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	4604      	mov	r4, r0
 8012430:	b128      	cbz	r0, 801243e <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 8012432:	f007 fcc1 	bl	8019db8 <sensor_msgs__msg__Imu__init>
 8012436:	4605      	mov	r5, r0
 8012438:	b120      	cbz	r0, 8012444 <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 801243a:	4628      	mov	r0, r5
 801243c:	bd38      	pop	{r3, r4, r5, pc}
 801243e:	4605      	mov	r5, r0
 8012440:	4628      	mov	r0, r5
 8012442:	bd38      	pop	{r3, r4, r5, pc}
 8012444:	4620      	mov	r0, r4
 8012446:	f007 fd0d 	bl	8019e64 <sensor_msgs__msg__Imu__fini>
 801244a:	4628      	mov	r0, r5
 801244c:	bd38      	pop	{r3, r4, r5, pc}
 801244e:	bf00      	nop

08012450 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 8012450:	b108      	cbz	r0, 8012456 <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 8012452:	f007 bd07 	b.w	8019e64 <sensor_msgs__msg__Imu__fini>
 8012456:	4770      	bx	lr

08012458 <imu_interfaces__srv__ImuCalibration_Response__init>:
 8012458:	3800      	subs	r0, #0
 801245a:	bf18      	it	ne
 801245c:	2001      	movne	r0, #1
 801245e:	4770      	bx	lr

08012460 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop

08012464 <ucdr_serialize_endian_array_char>:
 8012464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012468:	4619      	mov	r1, r3
 801246a:	461f      	mov	r7, r3
 801246c:	4605      	mov	r5, r0
 801246e:	4690      	mov	r8, r2
 8012470:	f7fa ff0e 	bl	800d290 <ucdr_check_buffer_available_for>
 8012474:	b9e0      	cbnz	r0, 80124b0 <ucdr_serialize_endian_array_char+0x4c>
 8012476:	463e      	mov	r6, r7
 8012478:	e009      	b.n	801248e <ucdr_serialize_endian_array_char+0x2a>
 801247a:	68a8      	ldr	r0, [r5, #8]
 801247c:	f009 f963 	bl	801b746 <memcpy>
 8012480:	68ab      	ldr	r3, [r5, #8]
 8012482:	6928      	ldr	r0, [r5, #16]
 8012484:	4423      	add	r3, r4
 8012486:	4420      	add	r0, r4
 8012488:	1b36      	subs	r6, r6, r4
 801248a:	60ab      	str	r3, [r5, #8]
 801248c:	6128      	str	r0, [r5, #16]
 801248e:	4631      	mov	r1, r6
 8012490:	2201      	movs	r2, #1
 8012492:	4628      	mov	r0, r5
 8012494:	f7fa ff84 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 8012498:	1bb9      	subs	r1, r7, r6
 801249a:	4441      	add	r1, r8
 801249c:	4604      	mov	r4, r0
 801249e:	4602      	mov	r2, r0
 80124a0:	2800      	cmp	r0, #0
 80124a2:	d1ea      	bne.n	801247a <ucdr_serialize_endian_array_char+0x16>
 80124a4:	2301      	movs	r3, #1
 80124a6:	7da8      	ldrb	r0, [r5, #22]
 80124a8:	756b      	strb	r3, [r5, #21]
 80124aa:	4058      	eors	r0, r3
 80124ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b0:	463a      	mov	r2, r7
 80124b2:	68a8      	ldr	r0, [r5, #8]
 80124b4:	4641      	mov	r1, r8
 80124b6:	f009 f946 	bl	801b746 <memcpy>
 80124ba:	68aa      	ldr	r2, [r5, #8]
 80124bc:	692b      	ldr	r3, [r5, #16]
 80124be:	443a      	add	r2, r7
 80124c0:	443b      	add	r3, r7
 80124c2:	60aa      	str	r2, [r5, #8]
 80124c4:	612b      	str	r3, [r5, #16]
 80124c6:	e7ed      	b.n	80124a4 <ucdr_serialize_endian_array_char+0x40>

080124c8 <ucdr_deserialize_endian_array_char>:
 80124c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124cc:	4619      	mov	r1, r3
 80124ce:	461f      	mov	r7, r3
 80124d0:	4605      	mov	r5, r0
 80124d2:	4690      	mov	r8, r2
 80124d4:	f7fa fedc 	bl	800d290 <ucdr_check_buffer_available_for>
 80124d8:	b9e0      	cbnz	r0, 8012514 <ucdr_deserialize_endian_array_char+0x4c>
 80124da:	463e      	mov	r6, r7
 80124dc:	e009      	b.n	80124f2 <ucdr_deserialize_endian_array_char+0x2a>
 80124de:	68a9      	ldr	r1, [r5, #8]
 80124e0:	f009 f931 	bl	801b746 <memcpy>
 80124e4:	68ab      	ldr	r3, [r5, #8]
 80124e6:	6928      	ldr	r0, [r5, #16]
 80124e8:	4423      	add	r3, r4
 80124ea:	4420      	add	r0, r4
 80124ec:	1b36      	subs	r6, r6, r4
 80124ee:	60ab      	str	r3, [r5, #8]
 80124f0:	6128      	str	r0, [r5, #16]
 80124f2:	2201      	movs	r2, #1
 80124f4:	4631      	mov	r1, r6
 80124f6:	4628      	mov	r0, r5
 80124f8:	f7fa ff52 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 80124fc:	4604      	mov	r4, r0
 80124fe:	1bb8      	subs	r0, r7, r6
 8012500:	4440      	add	r0, r8
 8012502:	4622      	mov	r2, r4
 8012504:	2c00      	cmp	r4, #0
 8012506:	d1ea      	bne.n	80124de <ucdr_deserialize_endian_array_char+0x16>
 8012508:	2301      	movs	r3, #1
 801250a:	7da8      	ldrb	r0, [r5, #22]
 801250c:	756b      	strb	r3, [r5, #21]
 801250e:	4058      	eors	r0, r3
 8012510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012514:	463a      	mov	r2, r7
 8012516:	68a9      	ldr	r1, [r5, #8]
 8012518:	4640      	mov	r0, r8
 801251a:	f009 f914 	bl	801b746 <memcpy>
 801251e:	68aa      	ldr	r2, [r5, #8]
 8012520:	692b      	ldr	r3, [r5, #16]
 8012522:	443a      	add	r2, r7
 8012524:	443b      	add	r3, r7
 8012526:	60aa      	str	r2, [r5, #8]
 8012528:	612b      	str	r3, [r5, #16]
 801252a:	e7ed      	b.n	8012508 <ucdr_deserialize_endian_array_char+0x40>

0801252c <ucdr_serialize_array_uint8_t>:
 801252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012530:	4688      	mov	r8, r1
 8012532:	4611      	mov	r1, r2
 8012534:	4617      	mov	r7, r2
 8012536:	4605      	mov	r5, r0
 8012538:	f7fa feaa 	bl	800d290 <ucdr_check_buffer_available_for>
 801253c:	b9e0      	cbnz	r0, 8012578 <ucdr_serialize_array_uint8_t+0x4c>
 801253e:	463e      	mov	r6, r7
 8012540:	e009      	b.n	8012556 <ucdr_serialize_array_uint8_t+0x2a>
 8012542:	68a8      	ldr	r0, [r5, #8]
 8012544:	f009 f8ff 	bl	801b746 <memcpy>
 8012548:	68aa      	ldr	r2, [r5, #8]
 801254a:	692b      	ldr	r3, [r5, #16]
 801254c:	4422      	add	r2, r4
 801254e:	4423      	add	r3, r4
 8012550:	1b36      	subs	r6, r6, r4
 8012552:	60aa      	str	r2, [r5, #8]
 8012554:	612b      	str	r3, [r5, #16]
 8012556:	4631      	mov	r1, r6
 8012558:	2201      	movs	r2, #1
 801255a:	4628      	mov	r0, r5
 801255c:	f7fa ff20 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 8012560:	1bb9      	subs	r1, r7, r6
 8012562:	4441      	add	r1, r8
 8012564:	4604      	mov	r4, r0
 8012566:	4602      	mov	r2, r0
 8012568:	2800      	cmp	r0, #0
 801256a:	d1ea      	bne.n	8012542 <ucdr_serialize_array_uint8_t+0x16>
 801256c:	2301      	movs	r3, #1
 801256e:	7da8      	ldrb	r0, [r5, #22]
 8012570:	756b      	strb	r3, [r5, #21]
 8012572:	4058      	eors	r0, r3
 8012574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012578:	463a      	mov	r2, r7
 801257a:	68a8      	ldr	r0, [r5, #8]
 801257c:	4641      	mov	r1, r8
 801257e:	f009 f8e2 	bl	801b746 <memcpy>
 8012582:	68aa      	ldr	r2, [r5, #8]
 8012584:	692b      	ldr	r3, [r5, #16]
 8012586:	443a      	add	r2, r7
 8012588:	443b      	add	r3, r7
 801258a:	60aa      	str	r2, [r5, #8]
 801258c:	612b      	str	r3, [r5, #16]
 801258e:	e7ed      	b.n	801256c <ucdr_serialize_array_uint8_t+0x40>

08012590 <ucdr_serialize_endian_array_uint8_t>:
 8012590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012594:	4619      	mov	r1, r3
 8012596:	461f      	mov	r7, r3
 8012598:	4605      	mov	r5, r0
 801259a:	4690      	mov	r8, r2
 801259c:	f7fa fe78 	bl	800d290 <ucdr_check_buffer_available_for>
 80125a0:	b9e0      	cbnz	r0, 80125dc <ucdr_serialize_endian_array_uint8_t+0x4c>
 80125a2:	463e      	mov	r6, r7
 80125a4:	e009      	b.n	80125ba <ucdr_serialize_endian_array_uint8_t+0x2a>
 80125a6:	68a8      	ldr	r0, [r5, #8]
 80125a8:	f009 f8cd 	bl	801b746 <memcpy>
 80125ac:	68ab      	ldr	r3, [r5, #8]
 80125ae:	6928      	ldr	r0, [r5, #16]
 80125b0:	4423      	add	r3, r4
 80125b2:	4420      	add	r0, r4
 80125b4:	1b36      	subs	r6, r6, r4
 80125b6:	60ab      	str	r3, [r5, #8]
 80125b8:	6128      	str	r0, [r5, #16]
 80125ba:	4631      	mov	r1, r6
 80125bc:	2201      	movs	r2, #1
 80125be:	4628      	mov	r0, r5
 80125c0:	f7fa feee 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 80125c4:	1bb9      	subs	r1, r7, r6
 80125c6:	4441      	add	r1, r8
 80125c8:	4604      	mov	r4, r0
 80125ca:	4602      	mov	r2, r0
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d1ea      	bne.n	80125a6 <ucdr_serialize_endian_array_uint8_t+0x16>
 80125d0:	2301      	movs	r3, #1
 80125d2:	7da8      	ldrb	r0, [r5, #22]
 80125d4:	756b      	strb	r3, [r5, #21]
 80125d6:	4058      	eors	r0, r3
 80125d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125dc:	463a      	mov	r2, r7
 80125de:	68a8      	ldr	r0, [r5, #8]
 80125e0:	4641      	mov	r1, r8
 80125e2:	f009 f8b0 	bl	801b746 <memcpy>
 80125e6:	68aa      	ldr	r2, [r5, #8]
 80125e8:	692b      	ldr	r3, [r5, #16]
 80125ea:	443a      	add	r2, r7
 80125ec:	443b      	add	r3, r7
 80125ee:	60aa      	str	r2, [r5, #8]
 80125f0:	612b      	str	r3, [r5, #16]
 80125f2:	e7ed      	b.n	80125d0 <ucdr_serialize_endian_array_uint8_t+0x40>

080125f4 <ucdr_deserialize_array_uint8_t>:
 80125f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f8:	4688      	mov	r8, r1
 80125fa:	4611      	mov	r1, r2
 80125fc:	4617      	mov	r7, r2
 80125fe:	4605      	mov	r5, r0
 8012600:	f7fa fe46 	bl	800d290 <ucdr_check_buffer_available_for>
 8012604:	b9e0      	cbnz	r0, 8012640 <ucdr_deserialize_array_uint8_t+0x4c>
 8012606:	463e      	mov	r6, r7
 8012608:	e009      	b.n	801261e <ucdr_deserialize_array_uint8_t+0x2a>
 801260a:	68a9      	ldr	r1, [r5, #8]
 801260c:	f009 f89b 	bl	801b746 <memcpy>
 8012610:	68aa      	ldr	r2, [r5, #8]
 8012612:	692b      	ldr	r3, [r5, #16]
 8012614:	4422      	add	r2, r4
 8012616:	4423      	add	r3, r4
 8012618:	1b36      	subs	r6, r6, r4
 801261a:	60aa      	str	r2, [r5, #8]
 801261c:	612b      	str	r3, [r5, #16]
 801261e:	2201      	movs	r2, #1
 8012620:	4631      	mov	r1, r6
 8012622:	4628      	mov	r0, r5
 8012624:	f7fa febc 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 8012628:	4604      	mov	r4, r0
 801262a:	1bb8      	subs	r0, r7, r6
 801262c:	4440      	add	r0, r8
 801262e:	4622      	mov	r2, r4
 8012630:	2c00      	cmp	r4, #0
 8012632:	d1ea      	bne.n	801260a <ucdr_deserialize_array_uint8_t+0x16>
 8012634:	2301      	movs	r3, #1
 8012636:	7da8      	ldrb	r0, [r5, #22]
 8012638:	756b      	strb	r3, [r5, #21]
 801263a:	4058      	eors	r0, r3
 801263c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012640:	463a      	mov	r2, r7
 8012642:	68a9      	ldr	r1, [r5, #8]
 8012644:	4640      	mov	r0, r8
 8012646:	f009 f87e 	bl	801b746 <memcpy>
 801264a:	68aa      	ldr	r2, [r5, #8]
 801264c:	692b      	ldr	r3, [r5, #16]
 801264e:	443a      	add	r2, r7
 8012650:	443b      	add	r3, r7
 8012652:	60aa      	str	r2, [r5, #8]
 8012654:	612b      	str	r3, [r5, #16]
 8012656:	e7ed      	b.n	8012634 <ucdr_deserialize_array_uint8_t+0x40>

08012658 <ucdr_deserialize_endian_array_uint8_t>:
 8012658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801265c:	4619      	mov	r1, r3
 801265e:	461f      	mov	r7, r3
 8012660:	4605      	mov	r5, r0
 8012662:	4690      	mov	r8, r2
 8012664:	f7fa fe14 	bl	800d290 <ucdr_check_buffer_available_for>
 8012668:	b9e0      	cbnz	r0, 80126a4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801266a:	463e      	mov	r6, r7
 801266c:	e009      	b.n	8012682 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801266e:	68a9      	ldr	r1, [r5, #8]
 8012670:	f009 f869 	bl	801b746 <memcpy>
 8012674:	68ab      	ldr	r3, [r5, #8]
 8012676:	6928      	ldr	r0, [r5, #16]
 8012678:	4423      	add	r3, r4
 801267a:	4420      	add	r0, r4
 801267c:	1b36      	subs	r6, r6, r4
 801267e:	60ab      	str	r3, [r5, #8]
 8012680:	6128      	str	r0, [r5, #16]
 8012682:	2201      	movs	r2, #1
 8012684:	4631      	mov	r1, r6
 8012686:	4628      	mov	r0, r5
 8012688:	f7fa fe8a 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 801268c:	4604      	mov	r4, r0
 801268e:	1bb8      	subs	r0, r7, r6
 8012690:	4440      	add	r0, r8
 8012692:	4622      	mov	r2, r4
 8012694:	2c00      	cmp	r4, #0
 8012696:	d1ea      	bne.n	801266e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012698:	2301      	movs	r3, #1
 801269a:	7da8      	ldrb	r0, [r5, #22]
 801269c:	756b      	strb	r3, [r5, #21]
 801269e:	4058      	eors	r0, r3
 80126a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a4:	463a      	mov	r2, r7
 80126a6:	68a9      	ldr	r1, [r5, #8]
 80126a8:	4640      	mov	r0, r8
 80126aa:	f009 f84c 	bl	801b746 <memcpy>
 80126ae:	68aa      	ldr	r2, [r5, #8]
 80126b0:	692b      	ldr	r3, [r5, #16]
 80126b2:	443a      	add	r2, r7
 80126b4:	443b      	add	r3, r7
 80126b6:	60aa      	str	r2, [r5, #8]
 80126b8:	612b      	str	r3, [r5, #16]
 80126ba:	e7ed      	b.n	8012698 <ucdr_deserialize_endian_array_uint8_t+0x40>

080126bc <ucdr_serialize_array_double>:
 80126bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	460e      	mov	r6, r1
 80126c2:	2108      	movs	r1, #8
 80126c4:	4604      	mov	r4, r0
 80126c6:	4617      	mov	r7, r2
 80126c8:	f7fa fe42 	bl	800d350 <ucdr_buffer_alignment>
 80126cc:	4601      	mov	r1, r0
 80126ce:	4620      	mov	r0, r4
 80126d0:	7d65      	ldrb	r5, [r4, #21]
 80126d2:	f7fa fe81 	bl	800d3d8 <ucdr_advance_buffer>
 80126d6:	7d21      	ldrb	r1, [r4, #20]
 80126d8:	7565      	strb	r5, [r4, #21]
 80126da:	2901      	cmp	r1, #1
 80126dc:	d010      	beq.n	8012700 <ucdr_serialize_array_double+0x44>
 80126de:	b157      	cbz	r7, 80126f6 <ucdr_serialize_array_double+0x3a>
 80126e0:	2500      	movs	r5, #0
 80126e2:	e000      	b.n	80126e6 <ucdr_serialize_array_double+0x2a>
 80126e4:	7d21      	ldrb	r1, [r4, #20]
 80126e6:	ecb6 0b02 	vldmia	r6!, {d0}
 80126ea:	4620      	mov	r0, r4
 80126ec:	3501      	adds	r5, #1
 80126ee:	f7fa fb69 	bl	800cdc4 <ucdr_serialize_endian_double>
 80126f2:	42af      	cmp	r7, r5
 80126f4:	d1f6      	bne.n	80126e4 <ucdr_serialize_array_double+0x28>
 80126f6:	7da0      	ldrb	r0, [r4, #22]
 80126f8:	f080 0001 	eor.w	r0, r0, #1
 80126fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012700:	00ff      	lsls	r7, r7, #3
 8012702:	4639      	mov	r1, r7
 8012704:	4620      	mov	r0, r4
 8012706:	f7fa fdc3 	bl	800d290 <ucdr_check_buffer_available_for>
 801270a:	b9f8      	cbnz	r0, 801274c <ucdr_serialize_array_double+0x90>
 801270c:	46b8      	mov	r8, r7
 801270e:	e00a      	b.n	8012726 <ucdr_serialize_array_double+0x6a>
 8012710:	68a0      	ldr	r0, [r4, #8]
 8012712:	f009 f818 	bl	801b746 <memcpy>
 8012716:	68a2      	ldr	r2, [r4, #8]
 8012718:	6923      	ldr	r3, [r4, #16]
 801271a:	442a      	add	r2, r5
 801271c:	442b      	add	r3, r5
 801271e:	eba8 0805 	sub.w	r8, r8, r5
 8012722:	60a2      	str	r2, [r4, #8]
 8012724:	6123      	str	r3, [r4, #16]
 8012726:	4641      	mov	r1, r8
 8012728:	2208      	movs	r2, #8
 801272a:	4620      	mov	r0, r4
 801272c:	f7fa fe38 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 8012730:	eba7 0108 	sub.w	r1, r7, r8
 8012734:	4431      	add	r1, r6
 8012736:	4605      	mov	r5, r0
 8012738:	4602      	mov	r2, r0
 801273a:	2800      	cmp	r0, #0
 801273c:	d1e8      	bne.n	8012710 <ucdr_serialize_array_double+0x54>
 801273e:	7da0      	ldrb	r0, [r4, #22]
 8012740:	2308      	movs	r3, #8
 8012742:	7563      	strb	r3, [r4, #21]
 8012744:	f080 0001 	eor.w	r0, r0, #1
 8012748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274c:	463a      	mov	r2, r7
 801274e:	68a0      	ldr	r0, [r4, #8]
 8012750:	4631      	mov	r1, r6
 8012752:	f008 fff8 	bl	801b746 <memcpy>
 8012756:	68a2      	ldr	r2, [r4, #8]
 8012758:	6923      	ldr	r3, [r4, #16]
 801275a:	443a      	add	r2, r7
 801275c:	441f      	add	r7, r3
 801275e:	60a2      	str	r2, [r4, #8]
 8012760:	6127      	str	r7, [r4, #16]
 8012762:	e7ec      	b.n	801273e <ucdr_serialize_array_double+0x82>

08012764 <ucdr_deserialize_array_double>:
 8012764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012768:	460e      	mov	r6, r1
 801276a:	2108      	movs	r1, #8
 801276c:	4604      	mov	r4, r0
 801276e:	4617      	mov	r7, r2
 8012770:	f7fa fdee 	bl	800d350 <ucdr_buffer_alignment>
 8012774:	4601      	mov	r1, r0
 8012776:	4620      	mov	r0, r4
 8012778:	7d65      	ldrb	r5, [r4, #21]
 801277a:	f7fa fe2d 	bl	800d3d8 <ucdr_advance_buffer>
 801277e:	7d21      	ldrb	r1, [r4, #20]
 8012780:	7565      	strb	r5, [r4, #21]
 8012782:	2901      	cmp	r1, #1
 8012784:	d011      	beq.n	80127aa <ucdr_deserialize_array_double+0x46>
 8012786:	b15f      	cbz	r7, 80127a0 <ucdr_deserialize_array_double+0x3c>
 8012788:	2500      	movs	r5, #0
 801278a:	e000      	b.n	801278e <ucdr_deserialize_array_double+0x2a>
 801278c:	7d21      	ldrb	r1, [r4, #20]
 801278e:	4632      	mov	r2, r6
 8012790:	4620      	mov	r0, r4
 8012792:	3501      	adds	r5, #1
 8012794:	f7fa fcae 	bl	800d0f4 <ucdr_deserialize_endian_double>
 8012798:	42af      	cmp	r7, r5
 801279a:	f106 0608 	add.w	r6, r6, #8
 801279e:	d1f5      	bne.n	801278c <ucdr_deserialize_array_double+0x28>
 80127a0:	7da0      	ldrb	r0, [r4, #22]
 80127a2:	f080 0001 	eor.w	r0, r0, #1
 80127a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127aa:	00ff      	lsls	r7, r7, #3
 80127ac:	4639      	mov	r1, r7
 80127ae:	4620      	mov	r0, r4
 80127b0:	f7fa fd6e 	bl	800d290 <ucdr_check_buffer_available_for>
 80127b4:	b9f8      	cbnz	r0, 80127f6 <ucdr_deserialize_array_double+0x92>
 80127b6:	46b8      	mov	r8, r7
 80127b8:	e00a      	b.n	80127d0 <ucdr_deserialize_array_double+0x6c>
 80127ba:	68a1      	ldr	r1, [r4, #8]
 80127bc:	f008 ffc3 	bl	801b746 <memcpy>
 80127c0:	68a2      	ldr	r2, [r4, #8]
 80127c2:	6923      	ldr	r3, [r4, #16]
 80127c4:	442a      	add	r2, r5
 80127c6:	442b      	add	r3, r5
 80127c8:	eba8 0805 	sub.w	r8, r8, r5
 80127cc:	60a2      	str	r2, [r4, #8]
 80127ce:	6123      	str	r3, [r4, #16]
 80127d0:	2208      	movs	r2, #8
 80127d2:	4641      	mov	r1, r8
 80127d4:	4620      	mov	r0, r4
 80127d6:	f7fa fde3 	bl	800d3a0 <ucdr_check_final_buffer_behavior_array>
 80127da:	4605      	mov	r5, r0
 80127dc:	eba7 0008 	sub.w	r0, r7, r8
 80127e0:	4430      	add	r0, r6
 80127e2:	462a      	mov	r2, r5
 80127e4:	2d00      	cmp	r5, #0
 80127e6:	d1e8      	bne.n	80127ba <ucdr_deserialize_array_double+0x56>
 80127e8:	7da0      	ldrb	r0, [r4, #22]
 80127ea:	2308      	movs	r3, #8
 80127ec:	7563      	strb	r3, [r4, #21]
 80127ee:	f080 0001 	eor.w	r0, r0, #1
 80127f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f6:	463a      	mov	r2, r7
 80127f8:	68a1      	ldr	r1, [r4, #8]
 80127fa:	4630      	mov	r0, r6
 80127fc:	f008 ffa3 	bl	801b746 <memcpy>
 8012800:	68a2      	ldr	r2, [r4, #8]
 8012802:	6923      	ldr	r3, [r4, #16]
 8012804:	443a      	add	r2, r7
 8012806:	441f      	add	r7, r3
 8012808:	60a2      	str	r2, [r4, #8]
 801280a:	6127      	str	r7, [r4, #16]
 801280c:	e7ec      	b.n	80127e8 <ucdr_deserialize_array_double+0x84>
 801280e:	bf00      	nop

08012810 <ucdr_serialize_sequence_char>:
 8012810:	b570      	push	{r4, r5, r6, lr}
 8012812:	4615      	mov	r5, r2
 8012814:	460e      	mov	r6, r1
 8012816:	7d01      	ldrb	r1, [r0, #20]
 8012818:	4604      	mov	r4, r0
 801281a:	f7f9 fd59 	bl	800c2d0 <ucdr_serialize_endian_uint32_t>
 801281e:	b90d      	cbnz	r5, 8012824 <ucdr_serialize_sequence_char+0x14>
 8012820:	2001      	movs	r0, #1
 8012822:	bd70      	pop	{r4, r5, r6, pc}
 8012824:	7d21      	ldrb	r1, [r4, #20]
 8012826:	462b      	mov	r3, r5
 8012828:	4632      	mov	r2, r6
 801282a:	4620      	mov	r0, r4
 801282c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012830:	f7ff be18 	b.w	8012464 <ucdr_serialize_endian_array_char>

08012834 <ucdr_deserialize_sequence_char>:
 8012834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012838:	461d      	mov	r5, r3
 801283a:	4616      	mov	r6, r2
 801283c:	460f      	mov	r7, r1
 801283e:	461a      	mov	r2, r3
 8012840:	7d01      	ldrb	r1, [r0, #20]
 8012842:	4604      	mov	r4, r0
 8012844:	f7f9 fe6c 	bl	800c520 <ucdr_deserialize_endian_uint32_t>
 8012848:	682b      	ldr	r3, [r5, #0]
 801284a:	429e      	cmp	r6, r3
 801284c:	bf3c      	itt	cc
 801284e:	2201      	movcc	r2, #1
 8012850:	75a2      	strbcc	r2, [r4, #22]
 8012852:	b913      	cbnz	r3, 801285a <ucdr_deserialize_sequence_char+0x26>
 8012854:	2001      	movs	r0, #1
 8012856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801285a:	7d21      	ldrb	r1, [r4, #20]
 801285c:	463a      	mov	r2, r7
 801285e:	4620      	mov	r0, r4
 8012860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012864:	f7ff be30 	b.w	80124c8 <ucdr_deserialize_endian_array_char>

08012868 <ucdr_serialize_sequence_uint8_t>:
 8012868:	b570      	push	{r4, r5, r6, lr}
 801286a:	4615      	mov	r5, r2
 801286c:	460e      	mov	r6, r1
 801286e:	7d01      	ldrb	r1, [r0, #20]
 8012870:	4604      	mov	r4, r0
 8012872:	f7f9 fd2d 	bl	800c2d0 <ucdr_serialize_endian_uint32_t>
 8012876:	b90d      	cbnz	r5, 801287c <ucdr_serialize_sequence_uint8_t+0x14>
 8012878:	2001      	movs	r0, #1
 801287a:	bd70      	pop	{r4, r5, r6, pc}
 801287c:	7d21      	ldrb	r1, [r4, #20]
 801287e:	462b      	mov	r3, r5
 8012880:	4632      	mov	r2, r6
 8012882:	4620      	mov	r0, r4
 8012884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012888:	f7ff be82 	b.w	8012590 <ucdr_serialize_endian_array_uint8_t>

0801288c <ucdr_deserialize_sequence_uint8_t>:
 801288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012890:	461d      	mov	r5, r3
 8012892:	4616      	mov	r6, r2
 8012894:	460f      	mov	r7, r1
 8012896:	461a      	mov	r2, r3
 8012898:	7d01      	ldrb	r1, [r0, #20]
 801289a:	4604      	mov	r4, r0
 801289c:	f7f9 fe40 	bl	800c520 <ucdr_deserialize_endian_uint32_t>
 80128a0:	682b      	ldr	r3, [r5, #0]
 80128a2:	429e      	cmp	r6, r3
 80128a4:	bf3c      	itt	cc
 80128a6:	2201      	movcc	r2, #1
 80128a8:	75a2      	strbcc	r2, [r4, #22]
 80128aa:	b913      	cbnz	r3, 80128b2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80128ac:	2001      	movs	r0, #1
 80128ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b2:	7d21      	ldrb	r1, [r4, #20]
 80128b4:	463a      	mov	r2, r7
 80128b6:	4620      	mov	r0, r4
 80128b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128bc:	f7ff becc 	b.w	8012658 <ucdr_deserialize_endian_array_uint8_t>

080128c0 <uxr_buffer_delete_entity>:
 80128c0:	b510      	push	{r4, lr}
 80128c2:	2300      	movs	r3, #0
 80128c4:	b08e      	sub	sp, #56	@ 0x38
 80128c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80128ca:	2303      	movs	r3, #3
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	2204      	movs	r2, #4
 80128d0:	ab06      	add	r3, sp, #24
 80128d2:	4604      	mov	r4, r0
 80128d4:	9103      	str	r1, [sp, #12]
 80128d6:	f001 fc21 	bl	801411c <uxr_prepare_stream_to_write_submessage>
 80128da:	b918      	cbnz	r0, 80128e4 <uxr_buffer_delete_entity+0x24>
 80128dc:	4604      	mov	r4, r0
 80128de:	4620      	mov	r0, r4
 80128e0:	b00e      	add	sp, #56	@ 0x38
 80128e2:	bd10      	pop	{r4, pc}
 80128e4:	9902      	ldr	r1, [sp, #8]
 80128e6:	aa05      	add	r2, sp, #20
 80128e8:	4620      	mov	r0, r4
 80128ea:	f001 fd4d 	bl	8014388 <uxr_init_base_object_request>
 80128ee:	a905      	add	r1, sp, #20
 80128f0:	4604      	mov	r4, r0
 80128f2:	a806      	add	r0, sp, #24
 80128f4:	f003 fc98 	bl	8016228 <uxr_serialize_DELETE_Payload>
 80128f8:	4620      	mov	r0, r4
 80128fa:	b00e      	add	sp, #56	@ 0x38
 80128fc:	bd10      	pop	{r4, pc}
 80128fe:	bf00      	nop

08012900 <uxr_common_create_entity>:
 8012900:	b510      	push	{r4, lr}
 8012902:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012906:	b08c      	sub	sp, #48	@ 0x30
 8012908:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801290c:	f1bc 0f01 	cmp.w	ip, #1
 8012910:	bf0c      	ite	eq
 8012912:	f003 0201 	andeq.w	r2, r3, #1
 8012916:	2200      	movne	r2, #0
 8012918:	330e      	adds	r3, #14
 801291a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801291e:	9101      	str	r1, [sp, #4]
 8012920:	441a      	add	r2, r3
 8012922:	2301      	movs	r3, #1
 8012924:	9300      	str	r3, [sp, #0]
 8012926:	9903      	ldr	r1, [sp, #12]
 8012928:	ab04      	add	r3, sp, #16
 801292a:	b292      	uxth	r2, r2
 801292c:	4604      	mov	r4, r0
 801292e:	f001 fbf5 	bl	801411c <uxr_prepare_stream_to_write_submessage>
 8012932:	b918      	cbnz	r0, 801293c <uxr_common_create_entity+0x3c>
 8012934:	4604      	mov	r4, r0
 8012936:	4620      	mov	r0, r4
 8012938:	b00c      	add	sp, #48	@ 0x30
 801293a:	bd10      	pop	{r4, pc}
 801293c:	9902      	ldr	r1, [sp, #8]
 801293e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012940:	4620      	mov	r0, r4
 8012942:	f001 fd21 	bl	8014388 <uxr_init_base_object_request>
 8012946:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012948:	4604      	mov	r4, r0
 801294a:	a804      	add	r0, sp, #16
 801294c:	f003 fbc8 	bl	80160e0 <uxr_serialize_CREATE_Payload>
 8012950:	4620      	mov	r0, r4
 8012952:	b00c      	add	sp, #48	@ 0x30
 8012954:	bd10      	pop	{r4, pc}
 8012956:	bf00      	nop

08012958 <uxr_buffer_create_participant_bin>:
 8012958:	b570      	push	{r4, r5, r6, lr}
 801295a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801295e:	ac11      	add	r4, sp, #68	@ 0x44
 8012960:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012964:	2303      	movs	r3, #3
 8012966:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801296a:	7223      	strb	r3, [r4, #8]
 801296c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801296e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012972:	2201      	movs	r2, #1
 8012974:	2100      	movs	r1, #0
 8012976:	4605      	mov	r5, r0
 8012978:	7122      	strb	r2, [r4, #4]
 801297a:	f88d 1014 	strb.w	r1, [sp, #20]
 801297e:	b1cb      	cbz	r3, 80129b4 <uxr_buffer_create_participant_bin+0x5c>
 8012980:	f88d 201c 	strb.w	r2, [sp, #28]
 8012984:	9308      	str	r3, [sp, #32]
 8012986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801298a:	a915      	add	r1, sp, #84	@ 0x54
 801298c:	a809      	add	r0, sp, #36	@ 0x24
 801298e:	f7fa fcd3 	bl	800d338 <ucdr_init_buffer>
 8012992:	a905      	add	r1, sp, #20
 8012994:	a809      	add	r0, sp, #36	@ 0x24
 8012996:	f002 ff1d 	bl	80157d4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801299a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801299c:	9600      	str	r6, [sp, #0]
 801299e:	9401      	str	r4, [sp, #4]
 80129a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80129a4:	60e3      	str	r3, [r4, #12]
 80129a6:	4628      	mov	r0, r5
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	f7ff ffa9 	bl	8012900 <uxr_common_create_entity>
 80129ae:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80129b2:	bd70      	pop	{r4, r5, r6, pc}
 80129b4:	f88d 301c 	strb.w	r3, [sp, #28]
 80129b8:	e7e5      	b.n	8012986 <uxr_buffer_create_participant_bin+0x2e>
 80129ba:	bf00      	nop

080129bc <uxr_buffer_create_topic_bin>:
 80129bc:	b570      	push	{r4, r5, r6, lr}
 80129be:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80129c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80129c6:	9105      	str	r1, [sp, #20]
 80129c8:	4605      	mov	r5, r0
 80129ca:	a997      	add	r1, sp, #604	@ 0x25c
 80129cc:	4618      	mov	r0, r3
 80129ce:	2302      	movs	r3, #2
 80129d0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80129d4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80129d8:	f000 facc 	bl	8012f74 <uxr_object_id_to_raw>
 80129dc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80129de:	9306      	str	r3, [sp, #24]
 80129e0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80129e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80129e4:	2303      	movs	r3, #3
 80129e6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80129ea:	2301      	movs	r3, #1
 80129ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129f0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80129f4:	a917      	add	r1, sp, #92	@ 0x5c
 80129f6:	2300      	movs	r3, #0
 80129f8:	a80b      	add	r0, sp, #44	@ 0x2c
 80129fa:	f88d 301c 	strb.w	r3, [sp, #28]
 80129fe:	f7fa fc9b 	bl	800d338 <ucdr_init_buffer>
 8012a02:	a906      	add	r1, sp, #24
 8012a04:	a80b      	add	r0, sp, #44	@ 0x2c
 8012a06:	f002 ff07 	bl	8015818 <uxr_serialize_OBJK_Topic_Binary>
 8012a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a0c:	9316      	str	r3, [sp, #88]	@ 0x58
 8012a0e:	ac13      	add	r4, sp, #76	@ 0x4c
 8012a10:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012a14:	9600      	str	r6, [sp, #0]
 8012a16:	9401      	str	r4, [sp, #4]
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	f7ff ff70 	bl	8012900 <uxr_common_create_entity>
 8012a20:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012a24:	bd70      	pop	{r4, r5, r6, pc}
 8012a26:	bf00      	nop

08012a28 <uxr_buffer_create_publisher_bin>:
 8012a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a2a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012a2e:	4605      	mov	r5, r0
 8012a30:	9105      	str	r1, [sp, #20]
 8012a32:	4618      	mov	r0, r3
 8012a34:	2603      	movs	r6, #3
 8012a36:	a992      	add	r1, sp, #584	@ 0x248
 8012a38:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012a3c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012a40:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012a44:	f000 fa96 	bl	8012f74 <uxr_object_id_to_raw>
 8012a48:	2300      	movs	r3, #0
 8012a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a4e:	a912      	add	r1, sp, #72	@ 0x48
 8012a50:	a806      	add	r0, sp, #24
 8012a52:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012a56:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012a5a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012a5e:	f7fa fc6b 	bl	800d338 <ucdr_init_buffer>
 8012a62:	a993      	add	r1, sp, #588	@ 0x24c
 8012a64:	a806      	add	r0, sp, #24
 8012a66:	f002 ff8b 	bl	8015980 <uxr_serialize_OBJK_Publisher_Binary>
 8012a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8012a6e:	ac0e      	add	r4, sp, #56	@ 0x38
 8012a70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012a74:	9700      	str	r7, [sp, #0]
 8012a76:	9401      	str	r4, [sp, #4]
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	f7ff ff40 	bl	8012900 <uxr_common_create_entity>
 8012a80:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a86:	bf00      	nop

08012a88 <uxr_buffer_create_subscriber_bin>:
 8012a88:	b570      	push	{r4, r5, r6, lr}
 8012a8a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8012a8e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012a92:	9105      	str	r1, [sp, #20]
 8012a94:	4605      	mov	r5, r0
 8012a96:	a992      	add	r1, sp, #584	@ 0x248
 8012a98:	4618      	mov	r0, r3
 8012a9a:	2304      	movs	r3, #4
 8012a9c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8012aa0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8012aa4:	f000 fa66 	bl	8012f74 <uxr_object_id_to_raw>
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012aae:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012ab2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012ab6:	a912      	add	r1, sp, #72	@ 0x48
 8012ab8:	2303      	movs	r3, #3
 8012aba:	a806      	add	r0, sp, #24
 8012abc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012ac0:	f7fa fc3a 	bl	800d338 <ucdr_init_buffer>
 8012ac4:	a993      	add	r1, sp, #588	@ 0x24c
 8012ac6:	a806      	add	r0, sp, #24
 8012ac8:	f003 f80a 	bl	8015ae0 <uxr_serialize_OBJK_Subscriber_Binary>
 8012acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ace:	9311      	str	r3, [sp, #68]	@ 0x44
 8012ad0:	ac0e      	add	r4, sp, #56	@ 0x38
 8012ad2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012ad6:	9600      	str	r6, [sp, #0]
 8012ad8:	9401      	str	r4, [sp, #4]
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	4628      	mov	r0, r5
 8012ade:	f7ff ff0f 	bl	8012900 <uxr_common_create_entity>
 8012ae2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8012ae6:	bd70      	pop	{r4, r5, r6, pc}

08012ae8 <uxr_buffer_create_datawriter_bin>:
 8012ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aec:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012af0:	ac1d      	add	r4, sp, #116	@ 0x74
 8012af2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012af6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8012afa:	9105      	str	r1, [sp, #20]
 8012afc:	4606      	mov	r6, r0
 8012afe:	a9a1      	add	r1, sp, #644	@ 0x284
 8012b00:	4618      	mov	r0, r3
 8012b02:	2305      	movs	r3, #5
 8012b04:	7123      	strb	r3, [r4, #4]
 8012b06:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8012b0a:	2703      	movs	r7, #3
 8012b0c:	f000 fa32 	bl	8012f74 <uxr_object_id_to_raw>
 8012b10:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012b12:	7227      	strb	r7, [r4, #8]
 8012b14:	a90e      	add	r1, sp, #56	@ 0x38
 8012b16:	f000 fa2d 	bl	8012f74 <uxr_object_id_to_raw>
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012b20:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012b24:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012b28:	3d00      	subs	r5, #0
 8012b2a:	bf18      	it	ne
 8012b2c:	2501      	movne	r5, #1
 8012b2e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012b32:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012b36:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012b3a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012b3e:	2301      	movs	r3, #1
 8012b40:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012b44:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012b48:	bb8a      	cbnz	r2, 8012bae <uxr_buffer_create_datawriter_bin+0xc6>
 8012b4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012b4e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012b52:	f04f 0c13 	mov.w	ip, #19
 8012b56:	250b      	movs	r5, #11
 8012b58:	2221      	movs	r2, #33	@ 0x21
 8012b5a:	2111      	movs	r1, #17
 8012b5c:	2009      	movs	r0, #9
 8012b5e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8012b62:	b923      	cbnz	r3, 8012b6e <uxr_buffer_create_datawriter_bin+0x86>
 8012b64:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012b68:	4672      	mov	r2, lr
 8012b6a:	4661      	mov	r1, ip
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d025      	beq.n	8012bc2 <uxr_buffer_create_datawriter_bin+0xda>
 8012b76:	2b03      	cmp	r3, #3
 8012b78:	d029      	beq.n	8012bce <uxr_buffer_create_datawriter_bin+0xe6>
 8012b7a:	b32b      	cbz	r3, 8012bc8 <uxr_buffer_create_datawriter_bin+0xe0>
 8012b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b80:	a921      	add	r1, sp, #132	@ 0x84
 8012b82:	a806      	add	r0, sp, #24
 8012b84:	f7fa fbd8 	bl	800d338 <ucdr_init_buffer>
 8012b88:	a90e      	add	r1, sp, #56	@ 0x38
 8012b8a:	a806      	add	r0, sp, #24
 8012b8c:	f003 f85a 	bl	8015c44 <uxr_serialize_OBJK_DataWriter_Binary>
 8012b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b92:	f8cd 8000 	str.w	r8, [sp]
 8012b96:	9401      	str	r4, [sp, #4]
 8012b98:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012b9c:	60e3      	str	r3, [r4, #12]
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	f7ff fead 	bl	8012900 <uxr_common_create_entity>
 8012ba6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bae:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8012bb2:	f04f 0c12 	mov.w	ip, #18
 8012bb6:	250a      	movs	r5, #10
 8012bb8:	2220      	movs	r2, #32
 8012bba:	2110      	movs	r1, #16
 8012bbc:	2008      	movs	r0, #8
 8012bbe:	2702      	movs	r7, #2
 8012bc0:	e7cd      	b.n	8012b5e <uxr_buffer_create_datawriter_bin+0x76>
 8012bc2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012bc6:	e7d9      	b.n	8012b7c <uxr_buffer_create_datawriter_bin+0x94>
 8012bc8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012bcc:	e7d6      	b.n	8012b7c <uxr_buffer_create_datawriter_bin+0x94>
 8012bce:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012bd2:	e7d3      	b.n	8012b7c <uxr_buffer_create_datawriter_bin+0x94>

08012bd4 <uxr_buffer_create_datareader_bin>:
 8012bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012bdc:	ac1f      	add	r4, sp, #124	@ 0x7c
 8012bde:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012be2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8012be6:	9105      	str	r1, [sp, #20]
 8012be8:	4606      	mov	r6, r0
 8012bea:	a9a3      	add	r1, sp, #652	@ 0x28c
 8012bec:	4618      	mov	r0, r3
 8012bee:	2306      	movs	r3, #6
 8012bf0:	7123      	strb	r3, [r4, #4]
 8012bf2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8012bf6:	2703      	movs	r7, #3
 8012bf8:	f000 f9bc 	bl	8012f74 <uxr_object_id_to_raw>
 8012bfc:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8012bfe:	7227      	strb	r7, [r4, #8]
 8012c00:	a90e      	add	r1, sp, #56	@ 0x38
 8012c02:	f000 f9b7 	bl	8012f74 <uxr_object_id_to_raw>
 8012c06:	2300      	movs	r3, #0
 8012c08:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012c0c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8012c10:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8012c14:	3d00      	subs	r5, #0
 8012c16:	bf18      	it	ne
 8012c18:	2501      	movne	r5, #1
 8012c1a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012c1e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012c22:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012c26:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012c2a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012c2e:	2301      	movs	r3, #1
 8012c30:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012c34:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012c38:	bb8a      	cbnz	r2, 8012c9e <uxr_buffer_create_datareader_bin+0xca>
 8012c3a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012c3e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012c42:	f04f 0c13 	mov.w	ip, #19
 8012c46:	250b      	movs	r5, #11
 8012c48:	2221      	movs	r2, #33	@ 0x21
 8012c4a:	2111      	movs	r1, #17
 8012c4c:	2009      	movs	r0, #9
 8012c4e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8012c52:	b923      	cbnz	r3, 8012c5e <uxr_buffer_create_datareader_bin+0x8a>
 8012c54:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012c58:	4672      	mov	r2, lr
 8012c5a:	4661      	mov	r1, ip
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d025      	beq.n	8012cb2 <uxr_buffer_create_datareader_bin+0xde>
 8012c66:	2b03      	cmp	r3, #3
 8012c68:	d029      	beq.n	8012cbe <uxr_buffer_create_datareader_bin+0xea>
 8012c6a:	b32b      	cbz	r3, 8012cb8 <uxr_buffer_create_datareader_bin+0xe4>
 8012c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c70:	a923      	add	r1, sp, #140	@ 0x8c
 8012c72:	a806      	add	r0, sp, #24
 8012c74:	f7fa fb60 	bl	800d338 <ucdr_init_buffer>
 8012c78:	a90e      	add	r1, sp, #56	@ 0x38
 8012c7a:	a806      	add	r0, sp, #24
 8012c7c:	f002 ffa6 	bl	8015bcc <uxr_serialize_OBJK_DataReader_Binary>
 8012c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c82:	f8cd 8000 	str.w	r8, [sp]
 8012c86:	9401      	str	r4, [sp, #4]
 8012c88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012c8c:	60e3      	str	r3, [r4, #12]
 8012c8e:	4630      	mov	r0, r6
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	f7ff fe35 	bl	8012900 <uxr_common_create_entity>
 8012c96:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c9e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8012ca2:	f04f 0c12 	mov.w	ip, #18
 8012ca6:	250a      	movs	r5, #10
 8012ca8:	2220      	movs	r2, #32
 8012caa:	2110      	movs	r1, #16
 8012cac:	2008      	movs	r0, #8
 8012cae:	2702      	movs	r7, #2
 8012cb0:	e7cd      	b.n	8012c4e <uxr_buffer_create_datareader_bin+0x7a>
 8012cb2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012cb6:	e7d9      	b.n	8012c6c <uxr_buffer_create_datareader_bin+0x98>
 8012cb8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012cbc:	e7d6      	b.n	8012c6c <uxr_buffer_create_datareader_bin+0x98>
 8012cbe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012cc2:	e7d3      	b.n	8012c6c <uxr_buffer_create_datareader_bin+0x98>

08012cc4 <uxr_buffer_create_requester_bin>:
 8012cc4:	b570      	push	{r4, r5, r6, lr}
 8012cc6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8012cca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012cce:	9105      	str	r1, [sp, #20]
 8012cd0:	4605      	mov	r5, r0
 8012cd2:	a999      	add	r1, sp, #612	@ 0x264
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	2307      	movs	r3, #7
 8012cd8:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8012cdc:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8012ce0:	f000 f948 	bl	8012f74 <uxr_object_id_to_raw>
 8012ce4:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8012ce6:	9306      	str	r3, [sp, #24]
 8012ce8:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8012cea:	9307      	str	r3, [sp, #28]
 8012cec:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8012cee:	9308      	str	r3, [sp, #32]
 8012cf0:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8012cf2:	930c      	str	r3, [sp, #48]	@ 0x30
 8012cf4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012cfe:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012d02:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012d06:	a919      	add	r1, sp, #100	@ 0x64
 8012d08:	2303      	movs	r3, #3
 8012d0a:	a80d      	add	r0, sp, #52	@ 0x34
 8012d0c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8012d10:	f7fa fb12 	bl	800d338 <ucdr_init_buffer>
 8012d14:	a906      	add	r1, sp, #24
 8012d16:	a80d      	add	r0, sp, #52	@ 0x34
 8012d18:	f002 ffc0 	bl	8015c9c <uxr_serialize_OBJK_Requester_Binary>
 8012d1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d1e:	9318      	str	r3, [sp, #96]	@ 0x60
 8012d20:	ac15      	add	r4, sp, #84	@ 0x54
 8012d22:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012d26:	9600      	str	r6, [sp, #0]
 8012d28:	9401      	str	r4, [sp, #4]
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f7ff fde7 	bl	8012900 <uxr_common_create_entity>
 8012d32:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8012d36:	bd70      	pop	{r4, r5, r6, pc}

08012d38 <uxr_buffer_create_replier_bin>:
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8012d3e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012d42:	9105      	str	r1, [sp, #20]
 8012d44:	4605      	mov	r5, r0
 8012d46:	a999      	add	r1, sp, #612	@ 0x264
 8012d48:	4618      	mov	r0, r3
 8012d4a:	2308      	movs	r3, #8
 8012d4c:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8012d50:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8012d54:	f000 f90e 	bl	8012f74 <uxr_object_id_to_raw>
 8012d58:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8012d5a:	9306      	str	r3, [sp, #24]
 8012d5c:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8012d5e:	9307      	str	r3, [sp, #28]
 8012d60:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8012d62:	9308      	str	r3, [sp, #32]
 8012d64:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8012d66:	930c      	str	r3, [sp, #48]	@ 0x30
 8012d68:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d72:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012d76:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012d7a:	a919      	add	r1, sp, #100	@ 0x64
 8012d7c:	2303      	movs	r3, #3
 8012d7e:	a80d      	add	r0, sp, #52	@ 0x34
 8012d80:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8012d84:	f7fa fad8 	bl	800d338 <ucdr_init_buffer>
 8012d88:	a906      	add	r1, sp, #24
 8012d8a:	a80d      	add	r0, sp, #52	@ 0x34
 8012d8c:	f002 ffba 	bl	8015d04 <uxr_serialize_OBJK_Replier_Binary>
 8012d90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d92:	9318      	str	r3, [sp, #96]	@ 0x60
 8012d94:	ac15      	add	r4, sp, #84	@ 0x54
 8012d96:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012d9a:	9600      	str	r6, [sp, #0]
 8012d9c:	9401      	str	r4, [sp, #4]
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	4628      	mov	r0, r5
 8012da2:	f7ff fdad 	bl	8012900 <uxr_common_create_entity>
 8012da6:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8012daa:	bd70      	pop	{r4, r5, r6, pc}

08012dac <get_custom_error>:
 8012dac:	4b01      	ldr	r3, [pc, #4]	@ (8012db4 <get_custom_error+0x8>)
 8012dae:	7818      	ldrb	r0, [r3, #0]
 8012db0:	4770      	bx	lr
 8012db2:	bf00      	nop
 8012db4:	2000c4a4 	.word	0x2000c4a4

08012db8 <recv_custom_msg>:
 8012db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dbc:	4693      	mov	fp, r2
 8012dbe:	b089      	sub	sp, #36	@ 0x24
 8012dc0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8012dc4:	9305      	str	r3, [sp, #20]
 8012dc6:	468a      	mov	sl, r1
 8012dc8:	2100      	movs	r1, #0
 8012dca:	4604      	mov	r4, r0
 8012dcc:	f88d 101e 	strb.w	r1, [sp, #30]
 8012dd0:	b322      	cbz	r2, 8012e1c <recv_custom_msg+0x64>
 8012dd2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8012dd6:	f10d 081f 	add.w	r8, sp, #31
 8012dda:	af05      	add	r7, sp, #20
 8012ddc:	f10d 061e 	add.w	r6, sp, #30
 8012de0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8012de4:	e002      	b.n	8012dec <recv_custom_msg+0x34>
 8012de6:	9b05      	ldr	r3, [sp, #20]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	dd0f      	ble.n	8012e0c <recv_custom_msg+0x54>
 8012dec:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8012df0:	4623      	mov	r3, r4
 8012df2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012df6:	e9cd 5600 	strd	r5, r6, [sp]
 8012dfa:	4622      	mov	r2, r4
 8012dfc:	4648      	mov	r0, r9
 8012dfe:	f001 fcf1 	bl	80147e4 <uxr_read_framed_msg>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d0ef      	beq.n	8012de6 <recv_custom_msg+0x2e>
 8012e06:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012e0a:	b1b3      	cbz	r3, 8012e3a <recv_custom_msg+0x82>
 8012e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8012e4c <recv_custom_msg+0x94>)
 8012e0e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012e12:	701a      	strb	r2, [r3, #0]
 8012e14:	2000      	movs	r0, #0
 8012e16:	b009      	add	sp, #36	@ 0x24
 8012e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1c:	f10d 021f 	add.w	r2, sp, #31
 8012e20:	9200      	str	r2, [sp, #0]
 8012e22:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8012e26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	47a8      	blx	r5
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d0ec      	beq.n	8012e0c <recv_custom_msg+0x54>
 8012e32:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1e8      	bne.n	8012e0c <recv_custom_msg+0x54>
 8012e3a:	f8cb 0000 	str.w	r0, [fp]
 8012e3e:	2001      	movs	r0, #1
 8012e40:	f8ca 4000 	str.w	r4, [sl]
 8012e44:	b009      	add	sp, #36	@ 0x24
 8012e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e4a:	bf00      	nop
 8012e4c:	2000c4a4 	.word	0x2000c4a4

08012e50 <send_custom_msg>:
 8012e50:	b530      	push	{r4, r5, lr}
 8012e52:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8012e56:	b087      	sub	sp, #28
 8012e58:	4615      	mov	r5, r2
 8012e5a:	b974      	cbnz	r4, 8012e7a <send_custom_msg+0x2a>
 8012e5c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8012e60:	f10d 0317 	add.w	r3, sp, #23
 8012e64:	47a0      	blx	r4
 8012e66:	b108      	cbz	r0, 8012e6c <send_custom_msg+0x1c>
 8012e68:	42a8      	cmp	r0, r5
 8012e6a:	d015      	beq.n	8012e98 <send_custom_msg+0x48>
 8012e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8012ea0 <send_custom_msg+0x50>)
 8012e6e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012e72:	701a      	strb	r2, [r3, #0]
 8012e74:	2000      	movs	r0, #0
 8012e76:	b007      	add	sp, #28
 8012e78:	bd30      	pop	{r4, r5, pc}
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	f10d 0117 	add.w	r1, sp, #23
 8012e82:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012e86:	4602      	mov	r2, r0
 8012e88:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8012e8c:	9500      	str	r5, [sp, #0]
 8012e8e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8012e92:	f001 faaf 	bl	80143f4 <uxr_write_framed_msg>
 8012e96:	e7e6      	b.n	8012e66 <send_custom_msg+0x16>
 8012e98:	2001      	movs	r0, #1
 8012e9a:	b007      	add	sp, #28
 8012e9c:	bd30      	pop	{r4, r5, pc}
 8012e9e:	bf00      	nop
 8012ea0:	2000c4a4 	.word	0x2000c4a4

08012ea4 <uxr_set_custom_transport_callbacks>:
 8012ea4:	b410      	push	{r4}
 8012ea6:	9c01      	ldr	r4, [sp, #4]
 8012ea8:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8012eac:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8012eb0:	9b02      	ldr	r3, [sp, #8]
 8012eb2:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8012eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012eba:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8012ebe:	4770      	bx	lr

08012ec0 <uxr_init_custom_transport>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8012ec6:	b303      	cbz	r3, 8012f0a <uxr_init_custom_transport+0x4a>
 8012ec8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8012ecc:	4604      	mov	r4, r0
 8012ece:	b1e2      	cbz	r2, 8012f0a <uxr_init_custom_transport+0x4a>
 8012ed0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8012ed4:	b1ca      	cbz	r2, 8012f0a <uxr_init_custom_transport+0x4a>
 8012ed6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8012eda:	b1b2      	cbz	r2, 8012f0a <uxr_init_custom_transport+0x4a>
 8012edc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8012ee0:	4798      	blx	r3
 8012ee2:	4605      	mov	r5, r0
 8012ee4:	b188      	cbz	r0, 8012f0a <uxr_init_custom_transport+0x4a>
 8012ee6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8012eea:	b98b      	cbnz	r3, 8012f10 <uxr_init_custom_transport+0x50>
 8012eec:	490b      	ldr	r1, [pc, #44]	@ (8012f1c <uxr_init_custom_transport+0x5c>)
 8012eee:	4b0c      	ldr	r3, [pc, #48]	@ (8012f20 <uxr_init_custom_transport+0x60>)
 8012ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8012f24 <uxr_init_custom_transport+0x64>)
 8012ef2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8012ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012efa:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8012efe:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8012f02:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8012f06:	4628      	mov	r0, r5
 8012f08:	bd38      	pop	{r3, r4, r5, pc}
 8012f0a:	2500      	movs	r5, #0
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	bd38      	pop	{r3, r4, r5, pc}
 8012f10:	2100      	movs	r1, #0
 8012f12:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8012f16:	f001 fa67 	bl	80143e8 <uxr_init_framing_io>
 8012f1a:	e7e7      	b.n	8012eec <uxr_init_custom_transport+0x2c>
 8012f1c:	08012e51 	.word	0x08012e51
 8012f20:	08012db9 	.word	0x08012db9
 8012f24:	08012dad 	.word	0x08012dad

08012f28 <uxr_close_custom_transport>:
 8012f28:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8012f2c:	4718      	bx	r3
 8012f2e:	bf00      	nop

08012f30 <uxr_object_id>:
 8012f30:	b082      	sub	sp, #8
 8012f32:	2300      	movs	r3, #0
 8012f34:	f88d 1006 	strb.w	r1, [sp, #6]
 8012f38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012f3c:	f360 030f 	bfi	r3, r0, #0, #16
 8012f40:	f362 431f 	bfi	r3, r2, #16, #16
 8012f44:	4618      	mov	r0, r3
 8012f46:	b002      	add	sp, #8
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop

08012f4c <uxr_object_id_from_raw>:
 8012f4c:	7843      	ldrb	r3, [r0, #1]
 8012f4e:	7801      	ldrb	r1, [r0, #0]
 8012f50:	b082      	sub	sp, #8
 8012f52:	f003 020f 	and.w	r2, r3, #15
 8012f56:	f88d 2006 	strb.w	r2, [sp, #6]
 8012f5a:	091b      	lsrs	r3, r3, #4
 8012f5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012f60:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8012f64:	2000      	movs	r0, #0
 8012f66:	f363 000f 	bfi	r0, r3, #0, #16
 8012f6a:	f362 401f 	bfi	r0, r2, #16, #16
 8012f6e:	b002      	add	sp, #8
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop

08012f74 <uxr_object_id_to_raw>:
 8012f74:	4602      	mov	r2, r0
 8012f76:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012f80:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8012f84:	f881 c000 	strb.w	ip, [r1]
 8012f88:	7048      	strb	r0, [r1, #1]
 8012f8a:	b002      	add	sp, #8
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop

08012f90 <uxr_buffer_request_data>:
 8012f90:	b530      	push	{r4, r5, lr}
 8012f92:	b095      	sub	sp, #84	@ 0x54
 8012f94:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012f98:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8012f9a:	9303      	str	r3, [sp, #12]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	2d00      	cmp	r5, #0
 8012fa0:	bf14      	ite	ne
 8012fa2:	2101      	movne	r1, #1
 8012fa4:	4611      	moveq	r1, r2
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	f88d 301c 	strb.w	r3, [sp, #28]
 8012fac:	f88d 201d 	strb.w	r2, [sp, #29]
 8012fb0:	f88d 201e 	strb.w	r2, [sp, #30]
 8012fb4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8012fb8:	d021      	beq.n	8012ffe <uxr_buffer_request_data+0x6e>
 8012fba:	682a      	ldr	r2, [r5, #0]
 8012fbc:	686b      	ldr	r3, [r5, #4]
 8012fbe:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8012fc2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012fc6:	2210      	movs	r2, #16
 8012fc8:	2308      	movs	r3, #8
 8012fca:	2100      	movs	r1, #0
 8012fcc:	e9cd 3100 	strd	r3, r1, [sp]
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	9905      	ldr	r1, [sp, #20]
 8012fd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8012fd6:	f001 f8a1 	bl	801411c <uxr_prepare_stream_to_write_submessage>
 8012fda:	b918      	cbnz	r0, 8012fe4 <uxr_buffer_request_data+0x54>
 8012fdc:	4604      	mov	r4, r0
 8012fde:	4620      	mov	r0, r4
 8012fe0:	b015      	add	sp, #84	@ 0x54
 8012fe2:	bd30      	pop	{r4, r5, pc}
 8012fe4:	9904      	ldr	r1, [sp, #16]
 8012fe6:	aa06      	add	r2, sp, #24
 8012fe8:	4620      	mov	r0, r4
 8012fea:	f001 f9cd 	bl	8014388 <uxr_init_base_object_request>
 8012fee:	a906      	add	r1, sp, #24
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	a80c      	add	r0, sp, #48	@ 0x30
 8012ff4:	f003 f9c2 	bl	801637c <uxr_serialize_READ_DATA_Payload>
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	b015      	add	sp, #84	@ 0x54
 8012ffc:	bd30      	pop	{r4, r5, pc}
 8012ffe:	2208      	movs	r2, #8
 8013000:	e7e2      	b.n	8012fc8 <uxr_buffer_request_data+0x38>
 8013002:	bf00      	nop

08013004 <uxr_buffer_cancel_data>:
 8013004:	b510      	push	{r4, lr}
 8013006:	b094      	sub	sp, #80	@ 0x50
 8013008:	2300      	movs	r3, #0
 801300a:	9202      	str	r2, [sp, #8]
 801300c:	9205      	str	r2, [sp, #20]
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	2201      	movs	r2, #1
 8013012:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013016:	f88d 301e 	strb.w	r3, [sp, #30]
 801301a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801301e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013022:	2308      	movs	r3, #8
 8013024:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	2210      	movs	r2, #16
 801302c:	ab0c      	add	r3, sp, #48	@ 0x30
 801302e:	4604      	mov	r4, r0
 8013030:	9103      	str	r1, [sp, #12]
 8013032:	f001 f873 	bl	801411c <uxr_prepare_stream_to_write_submessage>
 8013036:	b918      	cbnz	r0, 8013040 <uxr_buffer_cancel_data+0x3c>
 8013038:	4604      	mov	r4, r0
 801303a:	4620      	mov	r0, r4
 801303c:	b014      	add	sp, #80	@ 0x50
 801303e:	bd10      	pop	{r4, pc}
 8013040:	9905      	ldr	r1, [sp, #20]
 8013042:	aa06      	add	r2, sp, #24
 8013044:	4620      	mov	r0, r4
 8013046:	f001 f99f 	bl	8014388 <uxr_init_base_object_request>
 801304a:	a906      	add	r1, sp, #24
 801304c:	4604      	mov	r4, r0
 801304e:	a80c      	add	r0, sp, #48	@ 0x30
 8013050:	f003 f994 	bl	801637c <uxr_serialize_READ_DATA_Payload>
 8013054:	4620      	mov	r0, r4
 8013056:	b014      	add	sp, #80	@ 0x50
 8013058:	bd10      	pop	{r4, pc}
 801305a:	bf00      	nop

0801305c <read_submessage_format>:
 801305c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013060:	b095      	sub	sp, #84	@ 0x54
 8013062:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8013066:	b113      	cbz	r3, 801306e <read_submessage_format+0x12>
 8013068:	b015      	add	sp, #84	@ 0x54
 801306a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801306e:	460c      	mov	r4, r1
 8013070:	4615      	mov	r5, r2
 8013072:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013076:	4607      	mov	r7, r0
 8013078:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801307a:	9004      	str	r0, [sp, #16]
 801307c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801307e:	9005      	str	r0, [sp, #20]
 8013080:	1a52      	subs	r2, r2, r1
 8013082:	a80c      	add	r0, sp, #48	@ 0x30
 8013084:	4699      	mov	r9, r3
 8013086:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801308a:	f7fa f955 	bl	800d338 <ucdr_init_buffer>
 801308e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013092:	a80c      	add	r0, sp, #48	@ 0x30
 8013094:	f7fa f924 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 8013098:	69e2      	ldr	r2, [r4, #28]
 801309a:	b19a      	cbz	r2, 80130c4 <read_submessage_format+0x68>
 801309c:	f1b8 0f07 	cmp.w	r8, #7
 80130a0:	f882 9014 	strb.w	r9, [r2, #20]
 80130a4:	d040      	beq.n	8013128 <read_submessage_format+0xcc>
 80130a6:	f1b8 0f08 	cmp.w	r8, #8
 80130aa:	d02e      	beq.n	801310a <read_submessage_format+0xae>
 80130ac:	f1b8 0f06 	cmp.w	r8, #6
 80130b0:	d011      	beq.n	80130d6 <read_submessage_format+0x7a>
 80130b2:	2301      	movs	r3, #1
 80130b4:	7513      	strb	r3, [r2, #20]
 80130b6:	4629      	mov	r1, r5
 80130b8:	4620      	mov	r0, r4
 80130ba:	f7fa f98d 	bl	800d3d8 <ucdr_advance_buffer>
 80130be:	b015      	add	sp, #84	@ 0x54
 80130c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130c4:	f1b8 0f07 	cmp.w	r8, #7
 80130c8:	d02e      	beq.n	8013128 <read_submessage_format+0xcc>
 80130ca:	f1b8 0f08 	cmp.w	r8, #8
 80130ce:	d01c      	beq.n	801310a <read_submessage_format+0xae>
 80130d0:	f1b8 0f06 	cmp.w	r8, #6
 80130d4:	d1ef      	bne.n	80130b6 <read_submessage_format+0x5a>
 80130d6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80130da:	f1b8 0f00 	cmp.w	r8, #0
 80130de:	d011      	beq.n	8013104 <read_submessage_format+0xa8>
 80130e0:	ab0c      	add	r3, sp, #48	@ 0x30
 80130e2:	e9cd 3500 	strd	r3, r5, [sp]
 80130e6:	2306      	movs	r3, #6
 80130e8:	f88d 3016 	strb.w	r3, [sp, #22]
 80130ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80130f0:	9302      	str	r3, [sp, #8]
 80130f2:	4632      	mov	r2, r6
 80130f4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80130f8:	4638      	mov	r0, r7
 80130fa:	47c0      	blx	r8
 80130fc:	2301      	movs	r3, #1
 80130fe:	69e2      	ldr	r2, [r4, #28]
 8013100:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013104:	2a00      	cmp	r2, #0
 8013106:	d1d4      	bne.n	80130b2 <read_submessage_format+0x56>
 8013108:	e7d5      	b.n	80130b6 <read_submessage_format+0x5a>
 801310a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801310e:	2b00      	cmp	r3, #0
 8013110:	d0f8      	beq.n	8013104 <read_submessage_format+0xa8>
 8013112:	a906      	add	r1, sp, #24
 8013114:	a80c      	add	r0, sp, #48	@ 0x30
 8013116:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801311a:	f003 fa03 	bl	8016524 <uxr_deserialize_SampleIdentity>
 801311e:	b9a0      	cbnz	r0, 801314a <read_submessage_format+0xee>
 8013120:	69e2      	ldr	r2, [r4, #28]
 8013122:	2a00      	cmp	r2, #0
 8013124:	d1c5      	bne.n	80130b2 <read_submessage_format+0x56>
 8013126:	e7c6      	b.n	80130b6 <read_submessage_format+0x5a>
 8013128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801312c:	b13b      	cbz	r3, 801313e <read_submessage_format+0xe2>
 801312e:	a906      	add	r1, sp, #24
 8013130:	a80c      	add	r0, sp, #48	@ 0x30
 8013132:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013136:	f002 febb 	bl	8015eb0 <uxr_deserialize_BaseObjectRequest>
 801313a:	bb60      	cbnz	r0, 8013196 <read_submessage_format+0x13a>
 801313c:	69e2      	ldr	r2, [r4, #28]
 801313e:	68a3      	ldr	r3, [r4, #8]
 8013140:	442b      	add	r3, r5
 8013142:	60a3      	str	r3, [r4, #8]
 8013144:	2a00      	cmp	r2, #0
 8013146:	d1b4      	bne.n	80130b2 <read_submessage_format+0x56>
 8013148:	e7b5      	b.n	80130b6 <read_submessage_format+0x5a>
 801314a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801314e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013150:	1a52      	subs	r2, r2, r1
 8013152:	eba8 0803 	sub.w	r8, r8, r3
 8013156:	a80c      	add	r0, sp, #48	@ 0x30
 8013158:	f7fa f8ee 	bl	800d338 <ucdr_init_buffer>
 801315c:	44a8      	add	r8, r5
 801315e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013162:	a80c      	add	r0, sp, #48	@ 0x30
 8013164:	f7fa f8bc 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 8013168:	fa1f f888 	uxth.w	r8, r8
 801316c:	ab0c      	add	r3, sp, #48	@ 0x30
 801316e:	9300      	str	r3, [sp, #0]
 8013170:	f8cd 8004 	str.w	r8, [sp, #4]
 8013174:	2108      	movs	r1, #8
 8013176:	f88d 1016 	strb.w	r1, [sp, #22]
 801317a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801317e:	9102      	str	r1, [sp, #8]
 8013180:	ab06      	add	r3, sp, #24
 8013182:	4632      	mov	r2, r6
 8013184:	9905      	ldr	r1, [sp, #20]
 8013186:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801318a:	4638      	mov	r0, r7
 801318c:	47b0      	blx	r6
 801318e:	2301      	movs	r3, #1
 8013190:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013194:	e7c4      	b.n	8013120 <read_submessage_format+0xc4>
 8013196:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801319a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801319c:	1a52      	subs	r2, r2, r1
 801319e:	a80c      	add	r0, sp, #48	@ 0x30
 80131a0:	eba8 0803 	sub.w	r8, r8, r3
 80131a4:	f7fa f8c8 	bl	800d338 <ucdr_init_buffer>
 80131a8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80131ac:	a80c      	add	r0, sp, #48	@ 0x30
 80131ae:	f7fa f897 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 80131b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80131b4:	9300      	str	r3, [sp, #0]
 80131b6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80131ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80131be:	44a8      	add	r8, r5
 80131c0:	fa1f f888 	uxth.w	r8, r8
 80131c4:	f8cd 8004 	str.w	r8, [sp, #4]
 80131c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80131cc:	2107      	movs	r1, #7
 80131ce:	f88d 1016 	strb.w	r1, [sp, #22]
 80131d2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80131d6:	9102      	str	r1, [sp, #8]
 80131d8:	4632      	mov	r2, r6
 80131da:	b29b      	uxth	r3, r3
 80131dc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80131e0:	9905      	ldr	r1, [sp, #20]
 80131e2:	4638      	mov	r0, r7
 80131e4:	47b0      	blx	r6
 80131e6:	2301      	movs	r3, #1
 80131e8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80131ec:	e7a6      	b.n	801313c <read_submessage_format+0xe0>
 80131ee:	bf00      	nop

080131f0 <on_get_fragmentation_info>:
 80131f0:	b500      	push	{lr}
 80131f2:	b08b      	sub	sp, #44	@ 0x2c
 80131f4:	4601      	mov	r1, r0
 80131f6:	2204      	movs	r2, #4
 80131f8:	a802      	add	r0, sp, #8
 80131fa:	f7fa f89d 	bl	800d338 <ucdr_init_buffer>
 80131fe:	f10d 0305 	add.w	r3, sp, #5
 8013202:	f10d 0206 	add.w	r2, sp, #6
 8013206:	a901      	add	r1, sp, #4
 8013208:	a802      	add	r0, sp, #8
 801320a:	f001 fed1 	bl	8014fb0 <uxr_read_submessage_header>
 801320e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013212:	2b0d      	cmp	r3, #13
 8013214:	d003      	beq.n	801321e <on_get_fragmentation_info+0x2e>
 8013216:	2000      	movs	r0, #0
 8013218:	b00b      	add	sp, #44	@ 0x2c
 801321a:	f85d fb04 	ldr.w	pc, [sp], #4
 801321e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013222:	f013 0f02 	tst.w	r3, #2
 8013226:	bf14      	ite	ne
 8013228:	2002      	movne	r0, #2
 801322a:	2001      	moveq	r0, #1
 801322c:	b00b      	add	sp, #44	@ 0x2c
 801322e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013232:	bf00      	nop

08013234 <read_submessage_get_info>:
 8013234:	b570      	push	{r4, r5, r6, lr}
 8013236:	2500      	movs	r5, #0
 8013238:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801323c:	4604      	mov	r4, r0
 801323e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8013242:	460e      	mov	r6, r1
 8013244:	a810      	add	r0, sp, #64	@ 0x40
 8013246:	4629      	mov	r1, r5
 8013248:	e9cd 5503 	strd	r5, r5, [sp, #12]
 801324c:	f008 f9b2 	bl	801b5b4 <memset>
 8013250:	a903      	add	r1, sp, #12
 8013252:	4630      	mov	r0, r6
 8013254:	f002 ffd4 	bl	8016200 <uxr_deserialize_GET_INFO_Payload>
 8013258:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801325c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013260:	4620      	mov	r0, r4
 8013262:	f001 f889 	bl	8014378 <uxr_session_header_offset>
 8013266:	462b      	mov	r3, r5
 8013268:	9000      	str	r0, [sp, #0]
 801326a:	220c      	movs	r2, #12
 801326c:	a905      	add	r1, sp, #20
 801326e:	a808      	add	r0, sp, #32
 8013270:	f7fa f850 	bl	800d314 <ucdr_init_buffer_origin_offset>
 8013274:	a910      	add	r1, sp, #64	@ 0x40
 8013276:	a808      	add	r0, sp, #32
 8013278:	f003 f834 	bl	80162e4 <uxr_serialize_INFO_Payload>
 801327c:	9b08      	ldr	r3, [sp, #32]
 801327e:	462a      	mov	r2, r5
 8013280:	4629      	mov	r1, r5
 8013282:	4620      	mov	r0, r4
 8013284:	f001 f822 	bl	80142cc <uxr_stamp_session_header>
 8013288:	a808      	add	r0, sp, #32
 801328a:	f7fa f881 	bl	800d390 <ucdr_buffer_length>
 801328e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013290:	4602      	mov	r2, r0
 8013292:	a905      	add	r1, sp, #20
 8013294:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013298:	47a0      	blx	r4
 801329a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801329e:	bd70      	pop	{r4, r5, r6, pc}

080132a0 <write_submessage_acknack.isra.0>:
 80132a0:	b570      	push	{r4, r5, r6, lr}
 80132a2:	b092      	sub	sp, #72	@ 0x48
 80132a4:	4605      	mov	r5, r0
 80132a6:	460e      	mov	r6, r1
 80132a8:	4614      	mov	r4, r2
 80132aa:	f001 f865 	bl	8014378 <uxr_session_header_offset>
 80132ae:	a905      	add	r1, sp, #20
 80132b0:	9000      	str	r0, [sp, #0]
 80132b2:	2300      	movs	r3, #0
 80132b4:	a80a      	add	r0, sp, #40	@ 0x28
 80132b6:	2211      	movs	r2, #17
 80132b8:	f7fa f82c 	bl	800d314 <ucdr_init_buffer_origin_offset>
 80132bc:	2218      	movs	r2, #24
 80132be:	fb02 5404 	mla	r4, r2, r4, r5
 80132c2:	2300      	movs	r3, #0
 80132c4:	2205      	movs	r2, #5
 80132c6:	3450      	adds	r4, #80	@ 0x50
 80132c8:	210a      	movs	r1, #10
 80132ca:	a80a      	add	r0, sp, #40	@ 0x28
 80132cc:	f001 fe56 	bl	8014f7c <uxr_buffer_submessage_header>
 80132d0:	a903      	add	r1, sp, #12
 80132d2:	4620      	mov	r0, r4
 80132d4:	f007 f804 	bl	801a2e0 <uxr_compute_acknack>
 80132d8:	ba40      	rev16	r0, r0
 80132da:	f8ad 000e 	strh.w	r0, [sp, #14]
 80132de:	a903      	add	r1, sp, #12
 80132e0:	a80a      	add	r0, sp, #40	@ 0x28
 80132e2:	f88d 6010 	strb.w	r6, [sp, #16]
 80132e6:	f003 f86d 	bl	80163c4 <uxr_serialize_ACKNACK_Payload>
 80132ea:	2200      	movs	r2, #0
 80132ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132ee:	4611      	mov	r1, r2
 80132f0:	4628      	mov	r0, r5
 80132f2:	f000 ffeb 	bl	80142cc <uxr_stamp_session_header>
 80132f6:	a80a      	add	r0, sp, #40	@ 0x28
 80132f8:	f7fa f84a 	bl	800d390 <ucdr_buffer_length>
 80132fc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80132fe:	4602      	mov	r2, r0
 8013300:	a905      	add	r1, sp, #20
 8013302:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013306:	47a0      	blx	r4
 8013308:	b012      	add	sp, #72	@ 0x48
 801330a:	bd70      	pop	{r4, r5, r6, pc}
 801330c:	0000      	movs	r0, r0
	...

08013310 <uxr_init_session>:
 8013310:	b510      	push	{r4, lr}
 8013312:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013348 <uxr_init_session+0x38>
 8013316:	2300      	movs	r3, #0
 8013318:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801331c:	4604      	mov	r4, r0
 801331e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8013322:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8013326:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801332a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801332e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8013332:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8013336:	2181      	movs	r1, #129	@ 0x81
 8013338:	f000 ff34 	bl	80141a4 <uxr_init_session_info>
 801333c:	f104 0008 	add.w	r0, r4, #8
 8013340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013344:	f001 bd36 	b.w	8014db4 <uxr_init_stream_storage>
	...

08013350 <uxr_set_status_callback>:
 8013350:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop

08013358 <uxr_set_topic_callback>:
 8013358:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop

08013360 <uxr_set_request_callback>:
 8013360:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8013364:	4770      	bx	lr
 8013366:	bf00      	nop

08013368 <uxr_set_reply_callback>:
 8013368:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801336c:	4770      	bx	lr
 801336e:	bf00      	nop

08013370 <uxr_create_output_best_effort_stream>:
 8013370:	b510      	push	{r4, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	e9cd 2100 	strd	r2, r1, [sp]
 8013378:	4604      	mov	r4, r0
 801337a:	f000 fffd 	bl	8014378 <uxr_session_header_offset>
 801337e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013382:	4603      	mov	r3, r0
 8013384:	f104 0008 	add.w	r0, r4, #8
 8013388:	b004      	add	sp, #16
 801338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801338e:	f001 bd5b 	b.w	8014e48 <uxr_add_output_best_effort_buffer>
 8013392:	bf00      	nop

08013394 <uxr_create_output_reliable_stream>:
 8013394:	b510      	push	{r4, lr}
 8013396:	b088      	sub	sp, #32
 8013398:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801339c:	4604      	mov	r4, r0
 801339e:	9303      	str	r3, [sp, #12]
 80133a0:	f000 ffea 	bl	8014378 <uxr_session_header_offset>
 80133a4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80133a8:	9000      	str	r0, [sp, #0]
 80133aa:	9905      	ldr	r1, [sp, #20]
 80133ac:	f104 0008 	add.w	r0, r4, #8
 80133b0:	f001 fd5e 	bl	8014e70 <uxr_add_output_reliable_buffer>
 80133b4:	2200      	movs	r2, #0
 80133b6:	b2c3      	uxtb	r3, r0
 80133b8:	f363 0207 	bfi	r2, r3, #0, #8
 80133bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80133c0:	f363 220f 	bfi	r2, r3, #8, #8
 80133c4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80133c8:	f363 4217 	bfi	r2, r3, #16, #8
 80133cc:	0e03      	lsrs	r3, r0, #24
 80133ce:	f363 621f 	bfi	r2, r3, #24, #8
 80133d2:	4610      	mov	r0, r2
 80133d4:	b008      	add	sp, #32
 80133d6:	bd10      	pop	{r4, pc}

080133d8 <uxr_create_input_best_effort_stream>:
 80133d8:	b082      	sub	sp, #8
 80133da:	3008      	adds	r0, #8
 80133dc:	b002      	add	sp, #8
 80133de:	f001 bd61 	b.w	8014ea4 <uxr_add_input_best_effort_buffer>
 80133e2:	bf00      	nop

080133e4 <uxr_create_input_reliable_stream>:
 80133e4:	b510      	push	{r4, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	4c0b      	ldr	r4, [pc, #44]	@ (8013418 <uxr_create_input_reliable_stream+0x34>)
 80133ea:	9400      	str	r4, [sp, #0]
 80133ec:	3008      	adds	r0, #8
 80133ee:	f001 fd6f 	bl	8014ed0 <uxr_add_input_reliable_buffer>
 80133f2:	2200      	movs	r2, #0
 80133f4:	b2c3      	uxtb	r3, r0
 80133f6:	f363 0207 	bfi	r2, r3, #0, #8
 80133fa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80133fe:	f363 220f 	bfi	r2, r3, #8, #8
 8013402:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013406:	f363 4217 	bfi	r2, r3, #16, #8
 801340a:	0e03      	lsrs	r3, r0, #24
 801340c:	f363 621f 	bfi	r2, r3, #24, #8
 8013410:	4610      	mov	r0, r2
 8013412:	b004      	add	sp, #16
 8013414:	bd10      	pop	{r4, pc}
 8013416:	bf00      	nop
 8013418:	080131f1 	.word	0x080131f1

0801341c <uxr_epoch_millis>:
 801341c:	b510      	push	{r4, lr}
 801341e:	4604      	mov	r4, r0
 8013420:	f001 fe0c 	bl	801503c <uxr_nanos>
 8013424:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8013428:	1ac0      	subs	r0, r0, r3
 801342a:	4a04      	ldr	r2, [pc, #16]	@ (801343c <uxr_epoch_millis+0x20>)
 801342c:	f04f 0300 	mov.w	r3, #0
 8013430:	eb61 0104 	sbc.w	r1, r1, r4
 8013434:	f7ed fc18 	bl	8000c68 <__aeabi_ldivmod>
 8013438:	bd10      	pop	{r4, pc}
 801343a:	bf00      	nop
 801343c:	000f4240 	.word	0x000f4240

08013440 <uxr_epoch_nanos>:
 8013440:	b510      	push	{r4, lr}
 8013442:	4604      	mov	r4, r0
 8013444:	f001 fdfa 	bl	801503c <uxr_nanos>
 8013448:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801344c:	1ac0      	subs	r0, r0, r3
 801344e:	eb61 0102 	sbc.w	r1, r1, r2
 8013452:	bd10      	pop	{r4, pc}

08013454 <uxr_flash_output_streams>:
 8013454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013458:	7e03      	ldrb	r3, [r0, #24]
 801345a:	b084      	sub	sp, #16
 801345c:	4604      	mov	r4, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d035      	beq.n	80134ce <uxr_flash_output_streams+0x7a>
 8013462:	f04f 0900 	mov.w	r9, #0
 8013466:	4648      	mov	r0, r9
 8013468:	f10d 0802 	add.w	r8, sp, #2
 801346c:	af03      	add	r7, sp, #12
 801346e:	ae02      	add	r6, sp, #8
 8013470:	e006      	b.n	8013480 <uxr_flash_output_streams+0x2c>
 8013472:	7e23      	ldrb	r3, [r4, #24]
 8013474:	f109 0901 	add.w	r9, r9, #1
 8013478:	fa5f f089 	uxtb.w	r0, r9
 801347c:	4283      	cmp	r3, r0
 801347e:	d926      	bls.n	80134ce <uxr_flash_output_streams+0x7a>
 8013480:	2201      	movs	r2, #1
 8013482:	4611      	mov	r1, r2
 8013484:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8013488:	f001 fc40 	bl	8014d0c <uxr_stream_id>
 801348c:	3508      	adds	r5, #8
 801348e:	4684      	mov	ip, r0
 8013490:	4643      	mov	r3, r8
 8013492:	463a      	mov	r2, r7
 8013494:	4631      	mov	r1, r6
 8013496:	4628      	mov	r0, r5
 8013498:	f8cd c004 	str.w	ip, [sp, #4]
 801349c:	f006 ffa6 	bl	801a3ec <uxr_prepare_best_effort_buffer_to_send>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	d0e6      	beq.n	8013472 <uxr_flash_output_streams+0x1e>
 80134a4:	9b02      	ldr	r3, [sp, #8]
 80134a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80134aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80134ae:	4620      	mov	r0, r4
 80134b0:	f000 ff0c 	bl	80142cc <uxr_stamp_session_header>
 80134b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80134b6:	9a03      	ldr	r2, [sp, #12]
 80134b8:	685d      	ldr	r5, [r3, #4]
 80134ba:	6818      	ldr	r0, [r3, #0]
 80134bc:	9902      	ldr	r1, [sp, #8]
 80134be:	47a8      	blx	r5
 80134c0:	f109 0901 	add.w	r9, r9, #1
 80134c4:	7e23      	ldrb	r3, [r4, #24]
 80134c6:	fa5f f089 	uxtb.w	r0, r9
 80134ca:	4283      	cmp	r3, r0
 80134cc:	d8d8      	bhi.n	8013480 <uxr_flash_output_streams+0x2c>
 80134ce:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80134d2:	b38b      	cbz	r3, 8013538 <uxr_flash_output_streams+0xe4>
 80134d4:	f04f 0900 	mov.w	r9, #0
 80134d8:	f10d 0802 	add.w	r8, sp, #2
 80134dc:	af03      	add	r7, sp, #12
 80134de:	ae02      	add	r6, sp, #8
 80134e0:	4648      	mov	r0, r9
 80134e2:	2201      	movs	r2, #1
 80134e4:	2102      	movs	r1, #2
 80134e6:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80134ea:	f001 fc0f 	bl	8014d0c <uxr_stream_id>
 80134ee:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80134f2:	3520      	adds	r5, #32
 80134f4:	9001      	str	r0, [sp, #4]
 80134f6:	e00d      	b.n	8013514 <uxr_flash_output_streams+0xc0>
 80134f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80134fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013500:	9b02      	ldr	r3, [sp, #8]
 8013502:	f000 fee3 	bl	80142cc <uxr_stamp_session_header>
 8013506:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013508:	9a03      	ldr	r2, [sp, #12]
 801350a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801350e:	9902      	ldr	r1, [sp, #8]
 8013510:	6818      	ldr	r0, [r3, #0]
 8013512:	47d0      	blx	sl
 8013514:	4643      	mov	r3, r8
 8013516:	463a      	mov	r2, r7
 8013518:	4631      	mov	r1, r6
 801351a:	4628      	mov	r0, r5
 801351c:	f007 f984 	bl	801a828 <uxr_prepare_next_reliable_buffer_to_send>
 8013520:	4603      	mov	r3, r0
 8013522:	4620      	mov	r0, r4
 8013524:	2b00      	cmp	r3, #0
 8013526:	d1e7      	bne.n	80134f8 <uxr_flash_output_streams+0xa4>
 8013528:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801352c:	f109 0901 	add.w	r9, r9, #1
 8013530:	fa5f f089 	uxtb.w	r0, r9
 8013534:	4283      	cmp	r3, r0
 8013536:	d8d4      	bhi.n	80134e2 <uxr_flash_output_streams+0x8e>
 8013538:	b004      	add	sp, #16
 801353a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801353e:	bf00      	nop

08013540 <read_submessage_info>:
 8013540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013544:	460d      	mov	r5, r1
 8013546:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801354a:	4669      	mov	r1, sp
 801354c:	4607      	mov	r7, r0
 801354e:	4628      	mov	r0, r5
 8013550:	f002 fd64 	bl	801601c <uxr_deserialize_BaseObjectReply>
 8013554:	a902      	add	r1, sp, #8
 8013556:	4604      	mov	r4, r0
 8013558:	4628      	mov	r0, r5
 801355a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801355e:	f7f8 fbf1 	bl	800bd44 <ucdr_deserialize_bool>
 8013562:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013566:	4004      	ands	r4, r0
 8013568:	b2e4      	uxtb	r4, r4
 801356a:	b95b      	cbnz	r3, 8013584 <read_submessage_info+0x44>
 801356c:	a987      	add	r1, sp, #540	@ 0x21c
 801356e:	4628      	mov	r0, r5
 8013570:	f7f8 fbe8 	bl	800bd44 <ucdr_deserialize_bool>
 8013574:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8013578:	4606      	mov	r6, r0
 801357a:	b94b      	cbnz	r3, 8013590 <read_submessage_info+0x50>
 801357c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013584:	a903      	add	r1, sp, #12
 8013586:	4628      	mov	r0, r5
 8013588:	f002 fbf0 	bl	8015d6c <uxr_deserialize_ObjectVariant>
 801358c:	4004      	ands	r4, r0
 801358e:	e7ed      	b.n	801356c <read_submessage_info+0x2c>
 8013590:	a988      	add	r1, sp, #544	@ 0x220
 8013592:	4628      	mov	r0, r5
 8013594:	f7f8 fc04 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8013598:	4234      	tst	r4, r6
 801359a:	d0ef      	beq.n	801357c <read_submessage_info+0x3c>
 801359c:	2800      	cmp	r0, #0
 801359e:	d0ed      	beq.n	801357c <read_submessage_info+0x3c>
 80135a0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80135a4:	2b0d      	cmp	r3, #13
 80135a6:	d1e9      	bne.n	801357c <read_submessage_info+0x3c>
 80135a8:	a98a      	add	r1, sp, #552	@ 0x228
 80135aa:	4628      	mov	r0, r5
 80135ac:	f7f9 f99e 	bl	800c8ec <ucdr_deserialize_int16_t>
 80135b0:	b140      	cbz	r0, 80135c4 <read_submessage_info+0x84>
 80135b2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	dd07      	ble.n	80135ca <read_submessage_info+0x8a>
 80135ba:	f1b8 0f00 	cmp.w	r8, #0
 80135be:	bf14      	ite	ne
 80135c0:	2001      	movne	r0, #1
 80135c2:	2002      	moveq	r0, #2
 80135c4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80135c8:	e7d8      	b.n	801357c <read_submessage_info+0x3c>
 80135ca:	2000      	movs	r0, #0
 80135cc:	e7fa      	b.n	80135c4 <read_submessage_info+0x84>
 80135ce:	bf00      	nop

080135d0 <read_submessage_list>:
 80135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d4:	b097      	sub	sp, #92	@ 0x5c
 80135d6:	4ec1      	ldr	r6, [pc, #772]	@ (80138dc <read_submessage_list+0x30c>)
 80135d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80135da:	4604      	mov	r4, r0
 80135dc:	460d      	mov	r5, r1
 80135de:	f04f 0801 	mov.w	r8, #1
 80135e2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80135e6:	aa0c      	add	r2, sp, #48	@ 0x30
 80135e8:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80135ec:	4628      	mov	r0, r5
 80135ee:	f001 fcdf 	bl	8014fb0 <uxr_read_submessage_header>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	f000 813e 	beq.w	8013874 <read_submessage_list+0x2a4>
 80135f8:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80135fc:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8013600:	3b02      	subs	r3, #2
 8013602:	2b0d      	cmp	r3, #13
 8013604:	d8ed      	bhi.n	80135e2 <read_submessage_list+0x12>
 8013606:	a101      	add	r1, pc, #4	@ (adr r1, 801360c <read_submessage_list+0x3c>)
 8013608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801360c:	0801386b 	.word	0x0801386b
 8013610:	080135e3 	.word	0x080135e3
 8013614:	0801385b 	.word	0x0801385b
 8013618:	080137f9 	.word	0x080137f9
 801361c:	080137ef 	.word	0x080137ef
 8013620:	080135e3 	.word	0x080135e3
 8013624:	080135e3 	.word	0x080135e3
 8013628:	0801374f 	.word	0x0801374f
 801362c:	080136df 	.word	0x080136df
 8013630:	0801369f 	.word	0x0801369f
 8013634:	080135e3 	.word	0x080135e3
 8013638:	080135e3 	.word	0x080135e3
 801363c:	080135e3 	.word	0x080135e3
 8013640:	08013645 	.word	0x08013645
 8013644:	a910      	add	r1, sp, #64	@ 0x40
 8013646:	4628      	mov	r0, r5
 8013648:	f002 ff1a 	bl	8016480 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801364c:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8013650:	f1b9 0f00 	cmp.w	r9, #0
 8013654:	f000 8116 	beq.w	8013884 <read_submessage_list+0x2b4>
 8013658:	f001 fcf0 	bl	801503c <uxr_nanos>
 801365c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801365e:	4602      	mov	r2, r0
 8013660:	460b      	mov	r3, r1
 8013662:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013664:	2100      	movs	r1, #0
 8013666:	468c      	mov	ip, r1
 8013668:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801366c:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013670:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013672:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8013674:	468c      	mov	ip, r1
 8013676:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801367a:	46e2      	mov	sl, ip
 801367c:	46bc      	mov	ip, r7
 801367e:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8013682:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013686:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801368a:	e9cd 7100 	strd	r7, r1, [sp]
 801368e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013692:	9106      	str	r1, [sp, #24]
 8013694:	4620      	mov	r0, r4
 8013696:	47c8      	blx	r9
 8013698:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 801369c:	e7a1      	b.n	80135e2 <read_submessage_list+0x12>
 801369e:	a910      	add	r1, sp, #64	@ 0x40
 80136a0:	4628      	mov	r0, r5
 80136a2:	f002 fecd 	bl	8016440 <uxr_deserialize_HEARTBEAT_Payload>
 80136a6:	2100      	movs	r1, #0
 80136a8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80136ac:	f001 fb58 	bl	8014d60 <uxr_stream_id_from_raw>
 80136b0:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80136b4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80136b6:	4639      	mov	r1, r7
 80136b8:	f104 0008 	add.w	r0, r4, #8
 80136bc:	f001 fc3e 	bl	8014f3c <uxr_get_input_reliable_stream>
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d08e      	beq.n	80135e2 <read_submessage_list+0x12>
 80136c4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80136c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80136cc:	f006 fdfc 	bl	801a2c8 <uxr_process_heartbeat>
 80136d0:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80136d4:	463a      	mov	r2, r7
 80136d6:	4620      	mov	r0, r4
 80136d8:	f7ff fde2 	bl	80132a0 <write_submessage_acknack.isra.0>
 80136dc:	e781      	b.n	80135e2 <read_submessage_list+0x12>
 80136de:	a910      	add	r1, sp, #64	@ 0x40
 80136e0:	4628      	mov	r0, r5
 80136e2:	f002 fe85 	bl	80163f0 <uxr_deserialize_ACKNACK_Payload>
 80136e6:	2100      	movs	r1, #0
 80136e8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80136ec:	f001 fb38 	bl	8014d60 <uxr_stream_id_from_raw>
 80136f0:	900d      	str	r0, [sp, #52]	@ 0x34
 80136f2:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80136f6:	f104 0008 	add.w	r0, r4, #8
 80136fa:	f001 fc0b 	bl	8014f14 <uxr_get_output_reliable_stream>
 80136fe:	4607      	mov	r7, r0
 8013700:	2800      	cmp	r0, #0
 8013702:	f43f af6e 	beq.w	80135e2 <read_submessage_list+0x12>
 8013706:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801370a:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801370e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013712:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013716:	b289      	uxth	r1, r1
 8013718:	f007 f930 	bl	801a97c <uxr_process_acknack>
 801371c:	4638      	mov	r0, r7
 801371e:	f007 f8ed 	bl	801a8fc <uxr_begin_output_nack_buffer_it>
 8013722:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013726:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801372a:	e006      	b.n	801373a <read_submessage_list+0x16a>
 801372c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801372e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013730:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013734:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013736:	6818      	ldr	r0, [r3, #0]
 8013738:	47c8      	blx	r9
 801373a:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801373e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013740:	4651      	mov	r1, sl
 8013742:	4638      	mov	r0, r7
 8013744:	f007 f8dc 	bl	801a900 <uxr_next_reliable_nack_buffer_to_send>
 8013748:	2800      	cmp	r0, #0
 801374a:	d1ef      	bne.n	801372c <read_submessage_list+0x15c>
 801374c:	e749      	b.n	80135e2 <read_submessage_list+0x12>
 801374e:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013752:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8013756:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801375a:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801375e:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8013762:	4651      	mov	r1, sl
 8013764:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013768:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 801376c:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8013770:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8013774:	4628      	mov	r0, r5
 8013776:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801377a:	f002 fb99 	bl	8015eb0 <uxr_deserialize_BaseObjectRequest>
 801377e:	4650      	mov	r0, sl
 8013780:	a90f      	add	r1, sp, #60	@ 0x3c
 8013782:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8013786:	f000 fe1d 	bl	80143c4 <uxr_parse_base_object_request>
 801378a:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801378e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013790:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8013794:	9110      	str	r1, [sp, #64]	@ 0x40
 8013796:	3f04      	subs	r7, #4
 8013798:	f009 090e 	and.w	r9, r9, #14
 801379c:	b2bf      	uxth	r7, r7
 801379e:	f1bb 0f00 	cmp.w	fp, #0
 80137a2:	d006      	beq.n	80137b2 <read_submessage_list+0x1e2>
 80137a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	4652      	mov	r2, sl
 80137ac:	2300      	movs	r3, #0
 80137ae:	4620      	mov	r0, r4
 80137b0:	47d8      	blx	fp
 80137b2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80137b4:	b16a      	cbz	r2, 80137d2 <read_submessage_list+0x202>
 80137b6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80137b8:	2100      	movs	r1, #0
 80137ba:	3802      	subs	r0, #2
 80137bc:	e002      	b.n	80137c4 <read_submessage_list+0x1f4>
 80137be:	3101      	adds	r1, #1
 80137c0:	4291      	cmp	r1, r2
 80137c2:	d006      	beq.n	80137d2 <read_submessage_list+0x202>
 80137c4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80137c8:	4553      	cmp	r3, sl
 80137ca:	d1f8      	bne.n	80137be <read_submessage_list+0x1ee>
 80137cc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80137ce:	2200      	movs	r2, #0
 80137d0:	545a      	strb	r2, [r3, r1]
 80137d2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80137d6:	9102      	str	r1, [sp, #8]
 80137d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80137da:	9101      	str	r1, [sp, #4]
 80137dc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80137de:	9100      	str	r1, [sp, #0]
 80137e0:	464b      	mov	r3, r9
 80137e2:	463a      	mov	r2, r7
 80137e4:	4629      	mov	r1, r5
 80137e6:	4620      	mov	r0, r4
 80137e8:	f7ff fc38 	bl	801305c <read_submessage_format>
 80137ec:	e6f9      	b.n	80135e2 <read_submessage_list+0x12>
 80137ee:	4629      	mov	r1, r5
 80137f0:	4620      	mov	r0, r4
 80137f2:	f7ff fea5 	bl	8013540 <read_submessage_info>
 80137f6:	e6f4      	b.n	80135e2 <read_submessage_list+0x12>
 80137f8:	2a00      	cmp	r2, #0
 80137fa:	d03e      	beq.n	801387a <read_submessage_list+0x2aa>
 80137fc:	a910      	add	r1, sp, #64	@ 0x40
 80137fe:	4628      	mov	r0, r5
 8013800:	f002 fd52 	bl	80162a8 <uxr_deserialize_STATUS_Payload>
 8013804:	a90e      	add	r1, sp, #56	@ 0x38
 8013806:	aa0d      	add	r2, sp, #52	@ 0x34
 8013808:	a810      	add	r0, sp, #64	@ 0x40
 801380a:	f000 fddb 	bl	80143c4 <uxr_parse_base_object_request>
 801380e:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8013812:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013814:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8013818:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 801381c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801381e:	f1ba 0f00 	cmp.w	sl, #0
 8013822:	d006      	beq.n	8013832 <read_submessage_list+0x262>
 8013824:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013828:	9300      	str	r3, [sp, #0]
 801382a:	463a      	mov	r2, r7
 801382c:	464b      	mov	r3, r9
 801382e:	4620      	mov	r0, r4
 8013830:	47d0      	blx	sl
 8013832:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013834:	2a00      	cmp	r2, #0
 8013836:	f43f aed4 	beq.w	80135e2 <read_submessage_list+0x12>
 801383a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801383c:	2100      	movs	r1, #0
 801383e:	3802      	subs	r0, #2
 8013840:	e003      	b.n	801384a <read_submessage_list+0x27a>
 8013842:	3101      	adds	r1, #1
 8013844:	4291      	cmp	r1, r2
 8013846:	f43f aecc 	beq.w	80135e2 <read_submessage_list+0x12>
 801384a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801384e:	42bb      	cmp	r3, r7
 8013850:	d1f7      	bne.n	8013842 <read_submessage_list+0x272>
 8013852:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013854:	f803 9001 	strb.w	r9, [r3, r1]
 8013858:	e6c3      	b.n	80135e2 <read_submessage_list+0x12>
 801385a:	2a00      	cmp	r2, #0
 801385c:	f47f aec1 	bne.w	80135e2 <read_submessage_list+0x12>
 8013860:	4629      	mov	r1, r5
 8013862:	4620      	mov	r0, r4
 8013864:	f000 fcf4 	bl	8014250 <uxr_read_create_session_status>
 8013868:	e6bb      	b.n	80135e2 <read_submessage_list+0x12>
 801386a:	4629      	mov	r1, r5
 801386c:	4620      	mov	r0, r4
 801386e:	f7ff fce1 	bl	8013234 <read_submessage_get_info>
 8013872:	e6b6      	b.n	80135e2 <read_submessage_list+0x12>
 8013874:	b017      	add	sp, #92	@ 0x5c
 8013876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387a:	4629      	mov	r1, r5
 801387c:	4620      	mov	r0, r4
 801387e:	f000 fcf3 	bl	8014268 <uxr_read_delete_session_status>
 8013882:	e6ae      	b.n	80135e2 <read_submessage_list+0x12>
 8013884:	f001 fbda 	bl	801503c <uxr_nanos>
 8013888:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801388a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801388c:	464f      	mov	r7, r9
 801388e:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013892:	1812      	adds	r2, r2, r0
 8013894:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013896:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013898:	eb47 0101 	adc.w	r1, r7, r1
 801389c:	464f      	mov	r7, r9
 801389e:	fbc3 0706 	smlal	r0, r7, r3, r6
 80138a2:	463b      	mov	r3, r7
 80138a4:	4684      	mov	ip, r0
 80138a6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80138aa:	fbc7 0906 	smlal	r0, r9, r7, r6
 80138ae:	eb1c 0c00 	adds.w	ip, ip, r0
 80138b2:	464f      	mov	r7, r9
 80138b4:	eb43 0307 	adc.w	r3, r3, r7
 80138b8:	ebb2 0c0c 	subs.w	ip, r2, ip
 80138bc:	eb61 0303 	sbc.w	r3, r1, r3
 80138c0:	0fda      	lsrs	r2, r3, #31
 80138c2:	eb12 020c 	adds.w	r2, r2, ip
 80138c6:	f143 0300 	adc.w	r3, r3, #0
 80138ca:	0852      	lsrs	r2, r2, #1
 80138cc:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80138d0:	105b      	asrs	r3, r3, #1
 80138d2:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80138d6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80138da:	e6dd      	b.n	8013698 <read_submessage_list+0xc8>
 80138dc:	3b9aca00 	.word	0x3b9aca00

080138e0 <listen_message_reliably>:
 80138e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e4:	1e0b      	subs	r3, r1, #0
 80138e6:	b09d      	sub	sp, #116	@ 0x74
 80138e8:	bfb8      	it	lt
 80138ea:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80138ee:	4680      	mov	r8, r0
 80138f0:	9305      	str	r3, [sp, #20]
 80138f2:	f001 fb89 	bl	8015008 <uxr_millis>
 80138f6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80138fa:	4681      	mov	r9, r0
 80138fc:	2a00      	cmp	r2, #0
 80138fe:	f000 80a1 	beq.w	8013a44 <listen_message_reliably+0x164>
 8013902:	2600      	movs	r6, #0
 8013904:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013908:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801390c:	9303      	str	r3, [sp, #12]
 801390e:	4630      	mov	r0, r6
 8013910:	460f      	mov	r7, r1
 8013912:	e00f      	b.n	8013934 <listen_message_reliably+0x54>
 8013914:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013918:	9903      	ldr	r1, [sp, #12]
 801391a:	455a      	cmp	r2, fp
 801391c:	f106 0601 	add.w	r6, r6, #1
 8013920:	eb73 0101 	sbcs.w	r1, r3, r1
 8013924:	b2f0      	uxtb	r0, r6
 8013926:	da01      	bge.n	801392c <listen_message_reliably+0x4c>
 8013928:	4693      	mov	fp, r2
 801392a:	9303      	str	r3, [sp, #12]
 801392c:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013930:	4283      	cmp	r3, r0
 8013932:	d960      	bls.n	80139f6 <listen_message_reliably+0x116>
 8013934:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013938:	2102      	movs	r1, #2
 801393a:	2201      	movs	r2, #1
 801393c:	f001 f9e6 	bl	8014d0c <uxr_stream_id>
 8013940:	00e4      	lsls	r4, r4, #3
 8013942:	f104 0520 	add.w	r5, r4, #32
 8013946:	4445      	add	r5, r8
 8013948:	4601      	mov	r1, r0
 801394a:	463b      	mov	r3, r7
 801394c:	464a      	mov	r2, r9
 801394e:	4628      	mov	r0, r5
 8013950:	9109      	str	r1, [sp, #36]	@ 0x24
 8013952:	f006 ffa9 	bl	801a8a8 <uxr_update_output_stream_heartbeat_timestamp>
 8013956:	eb08 0304 	add.w	r3, r8, r4
 801395a:	2800      	cmp	r0, #0
 801395c:	d0da      	beq.n	8013914 <listen_message_reliably+0x34>
 801395e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013962:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8013966:	9304      	str	r3, [sp, #16]
 8013968:	4640      	mov	r0, r8
 801396a:	f000 fd05 	bl	8014378 <uxr_session_header_offset>
 801396e:	3501      	adds	r5, #1
 8013970:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8013974:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013978:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801397c:	2300      	movs	r3, #0
 801397e:	2211      	movs	r2, #17
 8013980:	9000      	str	r0, [sp, #0]
 8013982:	a90c      	add	r1, sp, #48	@ 0x30
 8013984:	4650      	mov	r0, sl
 8013986:	f7f9 fcc5 	bl	800d314 <ucdr_init_buffer_origin_offset>
 801398a:	2300      	movs	r3, #0
 801398c:	2205      	movs	r2, #5
 801398e:	210b      	movs	r1, #11
 8013990:	4650      	mov	r0, sl
 8013992:	f001 faf3 	bl	8014f7c <uxr_buffer_submessage_header>
 8013996:	8968      	ldrh	r0, [r5, #10]
 8013998:	2101      	movs	r1, #1
 801399a:	f007 f847 	bl	801aa2c <uxr_seq_num_add>
 801399e:	892b      	ldrh	r3, [r5, #8]
 80139a0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80139a4:	4602      	mov	r2, r0
 80139a6:	9b04      	ldr	r3, [sp, #16]
 80139a8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80139ac:	a90a      	add	r1, sp, #40	@ 0x28
 80139ae:	4650      	mov	r0, sl
 80139b0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80139b4:	f002 fd30 	bl	8016418 <uxr_serialize_HEARTBEAT_Payload>
 80139b8:	2200      	movs	r2, #0
 80139ba:	4611      	mov	r1, r2
 80139bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80139be:	4640      	mov	r0, r8
 80139c0:	f000 fc84 	bl	80142cc <uxr_stamp_session_header>
 80139c4:	4650      	mov	r0, sl
 80139c6:	f7f9 fce3 	bl	800d390 <ucdr_buffer_length>
 80139ca:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80139ce:	4602      	mov	r2, r0
 80139d0:	a90c      	add	r1, sp, #48	@ 0x30
 80139d2:	e9d3 0500 	ldrd	r0, r5, [r3]
 80139d6:	4444      	add	r4, r8
 80139d8:	47a8      	blx	r5
 80139da:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80139de:	9903      	ldr	r1, [sp, #12]
 80139e0:	455a      	cmp	r2, fp
 80139e2:	f106 0601 	add.w	r6, r6, #1
 80139e6:	eb73 0101 	sbcs.w	r1, r3, r1
 80139ea:	b2f0      	uxtb	r0, r6
 80139ec:	db9c      	blt.n	8013928 <listen_message_reliably+0x48>
 80139ee:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80139f2:	4283      	cmp	r3, r0
 80139f4:	d89e      	bhi.n	8013934 <listen_message_reliably+0x54>
 80139f6:	9a03      	ldr	r2, [sp, #12]
 80139f8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80139fc:	429a      	cmp	r2, r3
 80139fe:	bf08      	it	eq
 8013a00:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013a04:	d01e      	beq.n	8013a44 <listen_message_reliably+0x164>
 8013a06:	ebab 0309 	sub.w	r3, fp, r9
 8013a0a:	9905      	ldr	r1, [sp, #20]
 8013a0c:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	bf08      	it	eq
 8013a14:	2301      	moveq	r3, #1
 8013a16:	4299      	cmp	r1, r3
 8013a18:	bfa8      	it	ge
 8013a1a:	4619      	movge	r1, r3
 8013a1c:	6894      	ldr	r4, [r2, #8]
 8013a1e:	6810      	ldr	r0, [r2, #0]
 8013a20:	4689      	mov	r9, r1
 8013a22:	460b      	mov	r3, r1
 8013a24:	aa08      	add	r2, sp, #32
 8013a26:	a907      	add	r1, sp, #28
 8013a28:	47a0      	blx	r4
 8013a2a:	b968      	cbnz	r0, 8013a48 <listen_message_reliably+0x168>
 8013a2c:	9b05      	ldr	r3, [sp, #20]
 8013a2e:	eba3 0309 	sub.w	r3, r3, r9
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	9305      	str	r3, [sp, #20]
 8013a36:	f73f af5c 	bgt.w	80138f2 <listen_message_reliably+0x12>
 8013a3a:	4604      	mov	r4, r0
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	b01d      	add	sp, #116	@ 0x74
 8013a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a44:	9b05      	ldr	r3, [sp, #20]
 8013a46:	e7e0      	b.n	8013a0a <listen_message_reliably+0x12a>
 8013a48:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	a80c      	add	r0, sp, #48	@ 0x30
 8013a50:	f7f9 fc72 	bl	800d338 <ucdr_init_buffer>
 8013a54:	2500      	movs	r5, #0
 8013a56:	f10d 031a 	add.w	r3, sp, #26
 8013a5a:	aa06      	add	r2, sp, #24
 8013a5c:	a90c      	add	r1, sp, #48	@ 0x30
 8013a5e:	4640      	mov	r0, r8
 8013a60:	f88d 5018 	strb.w	r5, [sp, #24]
 8013a64:	f000 fc46 	bl	80142f4 <uxr_read_session_header>
 8013a68:	b918      	cbnz	r0, 8013a72 <listen_message_reliably+0x192>
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	b01d      	add	sp, #116	@ 0x74
 8013a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a72:	4629      	mov	r1, r5
 8013a74:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013a78:	f001 f972 	bl	8014d60 <uxr_stream_id_from_raw>
 8013a7c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013a80:	2d01      	cmp	r5, #1
 8013a82:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013a86:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013a8a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013a8e:	d04b      	beq.n	8013b28 <listen_message_reliably+0x248>
 8013a90:	2d02      	cmp	r5, #2
 8013a92:	d00f      	beq.n	8013ab4 <listen_message_reliably+0x1d4>
 8013a94:	2d00      	cmp	r5, #0
 8013a96:	d1e8      	bne.n	8013a6a <listen_message_reliably+0x18a>
 8013a98:	4629      	mov	r1, r5
 8013a9a:	4628      	mov	r0, r5
 8013a9c:	f001 f960 	bl	8014d60 <uxr_stream_id_from_raw>
 8013aa0:	a90c      	add	r1, sp, #48	@ 0x30
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	4640      	mov	r0, r8
 8013aa6:	920a      	str	r2, [sp, #40]	@ 0x28
 8013aa8:	f7ff fd92 	bl	80135d0 <read_submessage_list>
 8013aac:	4620      	mov	r0, r4
 8013aae:	b01d      	add	sp, #116	@ 0x74
 8013ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab4:	4631      	mov	r1, r6
 8013ab6:	f108 0008 	add.w	r0, r8, #8
 8013aba:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013abe:	f001 fa3d 	bl	8014f3c <uxr_get_input_reliable_stream>
 8013ac2:	4607      	mov	r7, r0
 8013ac4:	b338      	cbz	r0, 8013b16 <listen_message_reliably+0x236>
 8013ac6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ac8:	9203      	str	r2, [sp, #12]
 8013aca:	a80c      	add	r0, sp, #48	@ 0x30
 8013acc:	f7f9 fc64 	bl	800d398 <ucdr_buffer_remaining>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	f10d 0019 	add.w	r0, sp, #25
 8013ad6:	9000      	str	r0, [sp, #0]
 8013ad8:	9a03      	ldr	r2, [sp, #12]
 8013ada:	4651      	mov	r1, sl
 8013adc:	4638      	mov	r0, r7
 8013ade:	f006 faf9 	bl	801a0d4 <uxr_receive_reliable_message>
 8013ae2:	b1c0      	cbz	r0, 8013b16 <listen_message_reliably+0x236>
 8013ae4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013ae8:	b393      	cbz	r3, 8013b50 <listen_message_reliably+0x270>
 8013aea:	ad14      	add	r5, sp, #80	@ 0x50
 8013aec:	f04f 0a02 	mov.w	sl, #2
 8013af0:	e00a      	b.n	8013b08 <listen_message_reliably+0x228>
 8013af2:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013af6:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013afa:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8013afe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b00:	4629      	mov	r1, r5
 8013b02:	4640      	mov	r0, r8
 8013b04:	f7ff fd64 	bl	80135d0 <read_submessage_list>
 8013b08:	2204      	movs	r2, #4
 8013b0a:	4629      	mov	r1, r5
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	f006 fb61 	bl	801a1d4 <uxr_next_input_reliable_buffer_available>
 8013b12:	2800      	cmp	r0, #0
 8013b14:	d1ed      	bne.n	8013af2 <listen_message_reliably+0x212>
 8013b16:	4640      	mov	r0, r8
 8013b18:	4632      	mov	r2, r6
 8013b1a:	4649      	mov	r1, r9
 8013b1c:	f7ff fbc0 	bl	80132a0 <write_submessage_acknack.isra.0>
 8013b20:	4620      	mov	r0, r4
 8013b22:	b01d      	add	sp, #116	@ 0x74
 8013b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b28:	4631      	mov	r1, r6
 8013b2a:	f108 0008 	add.w	r0, r8, #8
 8013b2e:	f001 f9fb 	bl	8014f28 <uxr_get_input_best_effort_stream>
 8013b32:	2800      	cmp	r0, #0
 8013b34:	d099      	beq.n	8013a6a <listen_message_reliably+0x18a>
 8013b36:	4651      	mov	r1, sl
 8013b38:	f006 fa38 	bl	8019fac <uxr_receive_best_effort_message>
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d094      	beq.n	8013a6a <listen_message_reliably+0x18a>
 8013b40:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013b44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b46:	a90c      	add	r1, sp, #48	@ 0x30
 8013b48:	4640      	mov	r0, r8
 8013b4a:	f7ff fd41 	bl	80135d0 <read_submessage_list>
 8013b4e:	e78c      	b.n	8013a6a <listen_message_reliably+0x18a>
 8013b50:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013b54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b56:	a90c      	add	r1, sp, #48	@ 0x30
 8013b58:	4640      	mov	r0, r8
 8013b5a:	f7ff fd39 	bl	80135d0 <read_submessage_list>
 8013b5e:	e7c4      	b.n	8013aea <listen_message_reliably+0x20a>

08013b60 <uxr_run_session_timeout>:
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	4604      	mov	r4, r0
 8013b64:	460d      	mov	r5, r1
 8013b66:	f001 fa4f 	bl	8015008 <uxr_millis>
 8013b6a:	4606      	mov	r6, r0
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f7ff fc71 	bl	8013454 <uxr_flash_output_streams>
 8013b72:	4629      	mov	r1, r5
 8013b74:	4620      	mov	r0, r4
 8013b76:	f7ff feb3 	bl	80138e0 <listen_message_reliably>
 8013b7a:	f001 fa45 	bl	8015008 <uxr_millis>
 8013b7e:	1b83      	subs	r3, r0, r6
 8013b80:	1ae9      	subs	r1, r5, r3
 8013b82:	2900      	cmp	r1, #0
 8013b84:	dcf6      	bgt.n	8013b74 <uxr_run_session_timeout+0x14>
 8013b86:	f104 0008 	add.w	r0, r4, #8
 8013b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b8e:	f001 b9df 	b.w	8014f50 <uxr_output_streams_confirmed>
 8013b92:	bf00      	nop

08013b94 <uxr_run_session_until_data>:
 8013b94:	b570      	push	{r4, r5, r6, lr}
 8013b96:	4604      	mov	r4, r0
 8013b98:	460d      	mov	r5, r1
 8013b9a:	f001 fa35 	bl	8015008 <uxr_millis>
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f7ff fc57 	bl	8013454 <uxr_flash_output_streams>
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8013bac:	4629      	mov	r1, r5
 8013bae:	e005      	b.n	8013bbc <uxr_run_session_until_data+0x28>
 8013bb0:	f001 fa2a 	bl	8015008 <uxr_millis>
 8013bb4:	1b83      	subs	r3, r0, r6
 8013bb6:	1ae9      	subs	r1, r5, r3
 8013bb8:	2900      	cmp	r1, #0
 8013bba:	dd07      	ble.n	8013bcc <uxr_run_session_until_data+0x38>
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	f7ff fe8f 	bl	80138e0 <listen_message_reliably>
 8013bc2:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	d0f2      	beq.n	8013bb0 <uxr_run_session_until_data+0x1c>
 8013bca:	bd70      	pop	{r4, r5, r6, pc}
 8013bcc:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013bd0:	bd70      	pop	{r4, r5, r6, pc}
 8013bd2:	bf00      	nop

08013bd4 <uxr_run_session_until_confirm_delivery>:
 8013bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd8:	4606      	mov	r6, r0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	f001 fa14 	bl	8015008 <uxr_millis>
 8013be0:	4607      	mov	r7, r0
 8013be2:	4630      	mov	r0, r6
 8013be4:	f7ff fc36 	bl	8013454 <uxr_flash_output_streams>
 8013be8:	2d00      	cmp	r5, #0
 8013bea:	f106 0808 	add.w	r8, r6, #8
 8013bee:	bfa8      	it	ge
 8013bf0:	462c      	movge	r4, r5
 8013bf2:	da07      	bge.n	8013c04 <uxr_run_session_until_confirm_delivery+0x30>
 8013bf4:	e00e      	b.n	8013c14 <uxr_run_session_until_confirm_delivery+0x40>
 8013bf6:	f7ff fe73 	bl	80138e0 <listen_message_reliably>
 8013bfa:	f001 fa05 	bl	8015008 <uxr_millis>
 8013bfe:	1bc3      	subs	r3, r0, r7
 8013c00:	1aec      	subs	r4, r5, r3
 8013c02:	d407      	bmi.n	8013c14 <uxr_run_session_until_confirm_delivery+0x40>
 8013c04:	4640      	mov	r0, r8
 8013c06:	f001 f9a3 	bl	8014f50 <uxr_output_streams_confirmed>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	4621      	mov	r1, r4
 8013c0e:	4630      	mov	r0, r6
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d0f0      	beq.n	8013bf6 <uxr_run_session_until_confirm_delivery+0x22>
 8013c14:	4640      	mov	r0, r8
 8013c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1a:	f001 b999 	b.w	8014f50 <uxr_output_streams_confirmed>
 8013c1e:	bf00      	nop

08013c20 <uxr_run_session_until_all_status>:
 8013c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c24:	9c08      	ldr	r4, [sp, #32]
 8013c26:	4606      	mov	r6, r0
 8013c28:	460f      	mov	r7, r1
 8013c2a:	4691      	mov	r9, r2
 8013c2c:	461d      	mov	r5, r3
 8013c2e:	f7ff fc11 	bl	8013454 <uxr_flash_output_streams>
 8013c32:	b124      	cbz	r4, 8013c3e <uxr_run_session_until_all_status+0x1e>
 8013c34:	4622      	mov	r2, r4
 8013c36:	21ff      	movs	r1, #255	@ 0xff
 8013c38:	4628      	mov	r0, r5
 8013c3a:	f007 fcbb 	bl	801b5b4 <memset>
 8013c3e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8013c42:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013c44:	f001 f9e0 	bl	8015008 <uxr_millis>
 8013c48:	3d01      	subs	r5, #1
 8013c4a:	f1a9 0902 	sub.w	r9, r9, #2
 8013c4e:	4680      	mov	r8, r0
 8013c50:	4639      	mov	r1, r7
 8013c52:	4630      	mov	r0, r6
 8013c54:	f7ff fe44 	bl	80138e0 <listen_message_reliably>
 8013c58:	f001 f9d6 	bl	8015008 <uxr_millis>
 8013c5c:	eba0 0008 	sub.w	r0, r0, r8
 8013c60:	1a39      	subs	r1, r7, r0
 8013c62:	b344      	cbz	r4, 8013cb6 <uxr_run_session_until_all_status+0x96>
 8013c64:	4628      	mov	r0, r5
 8013c66:	46ac      	mov	ip, r5
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e002      	b.n	8013c72 <uxr_run_session_until_all_status+0x52>
 8013c6c:	42a3      	cmp	r3, r4
 8013c6e:	d20d      	bcs.n	8013c8c <uxr_run_session_until_all_status+0x6c>
 8013c70:	3301      	adds	r3, #1
 8013c72:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8013c76:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8013c7a:	d1f7      	bne.n	8013c6c <uxr_run_session_until_all_status+0x4c>
 8013c7c:	42a3      	cmp	r3, r4
 8013c7e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8013c82:	d213      	bcs.n	8013cac <uxr_run_session_until_all_status+0x8c>
 8013c84:	2a00      	cmp	r2, #0
 8013c86:	d0f3      	beq.n	8013c70 <uxr_run_session_until_all_status+0x50>
 8013c88:	2900      	cmp	r1, #0
 8013c8a:	dce2      	bgt.n	8013c52 <uxr_run_session_until_all_status+0x32>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8013c90:	442c      	add	r4, r5
 8013c92:	e001      	b.n	8013c98 <uxr_run_session_until_all_status+0x78>
 8013c94:	2b01      	cmp	r3, #1
 8013c96:	d812      	bhi.n	8013cbe <uxr_run_session_until_all_status+0x9e>
 8013c98:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013c9c:	4284      	cmp	r4, r0
 8013c9e:	d1f9      	bne.n	8013c94 <uxr_run_session_until_all_status+0x74>
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	bf8c      	ite	hi
 8013ca4:	2000      	movhi	r0, #0
 8013ca6:	2001      	movls	r0, #1
 8013ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cac:	2900      	cmp	r1, #0
 8013cae:	dded      	ble.n	8013c8c <uxr_run_session_until_all_status+0x6c>
 8013cb0:	2a00      	cmp	r2, #0
 8013cb2:	d1ce      	bne.n	8013c52 <uxr_run_session_until_all_status+0x32>
 8013cb4:	e7ea      	b.n	8013c8c <uxr_run_session_until_all_status+0x6c>
 8013cb6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013cb8:	2001      	movs	r0, #1
 8013cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cbe:	2000      	movs	r0, #0
 8013cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cc4:	0000      	movs	r0, r0
	...

08013cc8 <uxr_sync_session>:
 8013cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cca:	b093      	sub	sp, #76	@ 0x4c
 8013ccc:	4604      	mov	r4, r0
 8013cce:	460d      	mov	r5, r1
 8013cd0:	f000 fb52 	bl	8014378 <uxr_session_header_offset>
 8013cd4:	2214      	movs	r2, #20
 8013cd6:	eb0d 0102 	add.w	r1, sp, r2
 8013cda:	9000      	str	r0, [sp, #0]
 8013cdc:	2300      	movs	r3, #0
 8013cde:	a80a      	add	r0, sp, #40	@ 0x28
 8013ce0:	f7f9 fb18 	bl	800d314 <ucdr_init_buffer_origin_offset>
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	2208      	movs	r2, #8
 8013ce8:	210e      	movs	r1, #14
 8013cea:	a80a      	add	r0, sp, #40	@ 0x28
 8013cec:	f001 f946 	bl	8014f7c <uxr_buffer_submessage_header>
 8013cf0:	f001 f9a4 	bl	801503c <uxr_nanos>
 8013cf4:	a31c      	add	r3, pc, #112	@ (adr r3, 8013d68 <uxr_sync_session+0xa0>)
 8013cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfa:	460e      	mov	r6, r1
 8013cfc:	4607      	mov	r7, r0
 8013cfe:	f7ec ffb3 	bl	8000c68 <__aeabi_ldivmod>
 8013d02:	4631      	mov	r1, r6
 8013d04:	9003      	str	r0, [sp, #12]
 8013d06:	a318      	add	r3, pc, #96	@ (adr r3, 8013d68 <uxr_sync_session+0xa0>)
 8013d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	f7ec ffab 	bl	8000c68 <__aeabi_ldivmod>
 8013d12:	a903      	add	r1, sp, #12
 8013d14:	a80a      	add	r0, sp, #40	@ 0x28
 8013d16:	9204      	str	r2, [sp, #16]
 8013d18:	f002 fba4 	bl	8016464 <uxr_serialize_TIMESTAMP_Payload>
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	4611      	mov	r1, r2
 8013d20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d22:	4620      	mov	r0, r4
 8013d24:	f000 fad2 	bl	80142cc <uxr_stamp_session_header>
 8013d28:	a80a      	add	r0, sp, #40	@ 0x28
 8013d2a:	f7f9 fb31 	bl	800d390 <ucdr_buffer_length>
 8013d2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013d30:	4602      	mov	r2, r0
 8013d32:	a905      	add	r1, sp, #20
 8013d34:	e9d3 0600 	ldrd	r0, r6, [r3]
 8013d38:	47b0      	blx	r6
 8013d3a:	f001 f965 	bl	8015008 <uxr_millis>
 8013d3e:	2300      	movs	r3, #0
 8013d40:	4606      	mov	r6, r0
 8013d42:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8013d46:	4629      	mov	r1, r5
 8013d48:	e000      	b.n	8013d4c <uxr_sync_session+0x84>
 8013d4a:	b950      	cbnz	r0, 8013d62 <uxr_sync_session+0x9a>
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	f7ff fdc7 	bl	80138e0 <listen_message_reliably>
 8013d52:	f001 f959 	bl	8015008 <uxr_millis>
 8013d56:	1b83      	subs	r3, r0, r6
 8013d58:	1ae9      	subs	r1, r5, r3
 8013d5a:	2900      	cmp	r1, #0
 8013d5c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8013d60:	dcf3      	bgt.n	8013d4a <uxr_sync_session+0x82>
 8013d62:	b013      	add	sp, #76	@ 0x4c
 8013d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d66:	bf00      	nop
 8013d68:	3b9aca00 	.word	0x3b9aca00
 8013d6c:	00000000 	.word	0x00000000

08013d70 <wait_session_status>:
 8013d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d74:	4604      	mov	r4, r0
 8013d76:	b09d      	sub	sp, #116	@ 0x74
 8013d78:	20ff      	movs	r0, #255	@ 0xff
 8013d7a:	7160      	strb	r0, [r4, #5]
 8013d7c:	9303      	str	r3, [sp, #12]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	f000 80b6 	beq.w	8013ef0 <wait_session_status+0x180>
 8013d84:	468a      	mov	sl, r1
 8013d86:	4691      	mov	r9, r2
 8013d88:	f04f 0b00 	mov.w	fp, #0
 8013d8c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013d8e:	464a      	mov	r2, r9
 8013d90:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013d94:	4651      	mov	r1, sl
 8013d96:	47a8      	blx	r5
 8013d98:	f001 f936 	bl	8015008 <uxr_millis>
 8013d9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013da0:	4605      	mov	r5, r0
 8013da2:	e009      	b.n	8013db8 <wait_session_status+0x48>
 8013da4:	f001 f930 	bl	8015008 <uxr_millis>
 8013da8:	1b40      	subs	r0, r0, r5
 8013daa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	dd40      	ble.n	8013e34 <wait_session_status+0xc4>
 8013db2:	7960      	ldrb	r0, [r4, #5]
 8013db4:	28ff      	cmp	r0, #255	@ 0xff
 8013db6:	d145      	bne.n	8013e44 <wait_session_status+0xd4>
 8013db8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013dba:	a908      	add	r1, sp, #32
 8013dbc:	6896      	ldr	r6, [r2, #8]
 8013dbe:	6810      	ldr	r0, [r2, #0]
 8013dc0:	aa09      	add	r2, sp, #36	@ 0x24
 8013dc2:	47b0      	blx	r6
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	d0ed      	beq.n	8013da4 <wait_session_status+0x34>
 8013dc8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8013dcc:	a80c      	add	r0, sp, #48	@ 0x30
 8013dce:	f7f9 fab3 	bl	800d338 <ucdr_init_buffer>
 8013dd2:	2600      	movs	r6, #0
 8013dd4:	f10d 031e 	add.w	r3, sp, #30
 8013dd8:	aa07      	add	r2, sp, #28
 8013dda:	a90c      	add	r1, sp, #48	@ 0x30
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f88d 601c 	strb.w	r6, [sp, #28]
 8013de2:	f000 fa87 	bl	80142f4 <uxr_read_session_header>
 8013de6:	2800      	cmp	r0, #0
 8013de8:	d0dc      	beq.n	8013da4 <wait_session_status+0x34>
 8013dea:	4631      	mov	r1, r6
 8013dec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8013df0:	f000 ffb6 	bl	8014d60 <uxr_stream_id_from_raw>
 8013df4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013df8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013dfc:	9302      	str	r3, [sp, #8]
 8013dfe:	2f01      	cmp	r7, #1
 8013e00:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8013e04:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013e08:	d05c      	beq.n	8013ec4 <wait_session_status+0x154>
 8013e0a:	2f02      	cmp	r7, #2
 8013e0c:	d020      	beq.n	8013e50 <wait_session_status+0xe0>
 8013e0e:	2f00      	cmp	r7, #0
 8013e10:	d1c8      	bne.n	8013da4 <wait_session_status+0x34>
 8013e12:	4639      	mov	r1, r7
 8013e14:	4638      	mov	r0, r7
 8013e16:	f000 ffa3 	bl	8014d60 <uxr_stream_id_from_raw>
 8013e1a:	a90c      	add	r1, sp, #48	@ 0x30
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013e20:	4620      	mov	r0, r4
 8013e22:	f7ff fbd5 	bl	80135d0 <read_submessage_list>
 8013e26:	f001 f8ef 	bl	8015008 <uxr_millis>
 8013e2a:	1b40      	subs	r0, r0, r5
 8013e2c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	dcbe      	bgt.n	8013db2 <wait_session_status+0x42>
 8013e34:	9b03      	ldr	r3, [sp, #12]
 8013e36:	7960      	ldrb	r0, [r4, #5]
 8013e38:	f10b 0b01 	add.w	fp, fp, #1
 8013e3c:	455b      	cmp	r3, fp
 8013e3e:	d001      	beq.n	8013e44 <wait_session_status+0xd4>
 8013e40:	28ff      	cmp	r0, #255	@ 0xff
 8013e42:	d0a3      	beq.n	8013d8c <wait_session_status+0x1c>
 8013e44:	38ff      	subs	r0, #255	@ 0xff
 8013e46:	bf18      	it	ne
 8013e48:	2001      	movne	r0, #1
 8013e4a:	b01d      	add	sp, #116	@ 0x74
 8013e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e50:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013e54:	9304      	str	r3, [sp, #16]
 8013e56:	4631      	mov	r1, r6
 8013e58:	f104 0008 	add.w	r0, r4, #8
 8013e5c:	f001 f86e 	bl	8014f3c <uxr_get_input_reliable_stream>
 8013e60:	4680      	mov	r8, r0
 8013e62:	b348      	cbz	r0, 8013eb8 <wait_session_status+0x148>
 8013e64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e66:	9205      	str	r2, [sp, #20]
 8013e68:	a80c      	add	r0, sp, #48	@ 0x30
 8013e6a:	f7f9 fa95 	bl	800d398 <ucdr_buffer_remaining>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	f10d 001d 	add.w	r0, sp, #29
 8013e74:	9000      	str	r0, [sp, #0]
 8013e76:	9a05      	ldr	r2, [sp, #20]
 8013e78:	9902      	ldr	r1, [sp, #8]
 8013e7a:	4640      	mov	r0, r8
 8013e7c:	f006 f92a 	bl	801a0d4 <uxr_receive_reliable_message>
 8013e80:	b1d0      	cbz	r0, 8013eb8 <wait_session_status+0x148>
 8013e82:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d03a      	beq.n	8013f00 <wait_session_status+0x190>
 8013e8a:	9f04      	ldr	r7, [sp, #16]
 8013e8c:	e00a      	b.n	8013ea4 <wait_session_status+0x134>
 8013e8e:	f04f 0302 	mov.w	r3, #2
 8013e92:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8013e96:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8013e9a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8013e9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ea0:	f7ff fb96 	bl	80135d0 <read_submessage_list>
 8013ea4:	a914      	add	r1, sp, #80	@ 0x50
 8013ea6:	2204      	movs	r2, #4
 8013ea8:	4640      	mov	r0, r8
 8013eaa:	f006 f993 	bl	801a1d4 <uxr_next_input_reliable_buffer_available>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	a914      	add	r1, sp, #80	@ 0x50
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1ea      	bne.n	8013e8e <wait_session_status+0x11e>
 8013eb8:	9904      	ldr	r1, [sp, #16]
 8013eba:	4632      	mov	r2, r6
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	f7ff f9ef 	bl	80132a0 <write_submessage_acknack.isra.0>
 8013ec2:	e76f      	b.n	8013da4 <wait_session_status+0x34>
 8013ec4:	4631      	mov	r1, r6
 8013ec6:	f104 0008 	add.w	r0, r4, #8
 8013eca:	f001 f82d 	bl	8014f28 <uxr_get_input_best_effort_stream>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	f43f af68 	beq.w	8013da4 <wait_session_status+0x34>
 8013ed4:	9902      	ldr	r1, [sp, #8]
 8013ed6:	f006 f869 	bl	8019fac <uxr_receive_best_effort_message>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	f43f af62 	beq.w	8013da4 <wait_session_status+0x34>
 8013ee0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013ee4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ee6:	a90c      	add	r1, sp, #48	@ 0x30
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f7ff fb71 	bl	80135d0 <read_submessage_list>
 8013eee:	e759      	b.n	8013da4 <wait_session_status+0x34>
 8013ef0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013ef2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013ef6:	47a0      	blx	r4
 8013ef8:	2001      	movs	r0, #1
 8013efa:	b01d      	add	sp, #116	@ 0x74
 8013efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f00:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013f04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f06:	a90c      	add	r1, sp, #48	@ 0x30
 8013f08:	4620      	mov	r0, r4
 8013f0a:	f7ff fb61 	bl	80135d0 <read_submessage_list>
 8013f0e:	e7bc      	b.n	8013e8a <wait_session_status+0x11a>

08013f10 <uxr_delete_session_retries>:
 8013f10:	b530      	push	{r4, r5, lr}
 8013f12:	b08f      	sub	sp, #60	@ 0x3c
 8013f14:	4604      	mov	r4, r0
 8013f16:	460d      	mov	r5, r1
 8013f18:	f000 fa2e 	bl	8014378 <uxr_session_header_offset>
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	2210      	movs	r2, #16
 8013f20:	9000      	str	r0, [sp, #0]
 8013f22:	a902      	add	r1, sp, #8
 8013f24:	a806      	add	r0, sp, #24
 8013f26:	f7f9 f9f5 	bl	800d314 <ucdr_init_buffer_origin_offset>
 8013f2a:	a906      	add	r1, sp, #24
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	f000 f973 	bl	8014218 <uxr_buffer_delete_session>
 8013f32:	2200      	movs	r2, #0
 8013f34:	4611      	mov	r1, r2
 8013f36:	9b06      	ldr	r3, [sp, #24]
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f000 f9c7 	bl	80142cc <uxr_stamp_session_header>
 8013f3e:	a806      	add	r0, sp, #24
 8013f40:	f7f9 fa26 	bl	800d390 <ucdr_buffer_length>
 8013f44:	462b      	mov	r3, r5
 8013f46:	4602      	mov	r2, r0
 8013f48:	a902      	add	r1, sp, #8
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	f7ff ff10 	bl	8013d70 <wait_session_status>
 8013f50:	b118      	cbz	r0, 8013f5a <uxr_delete_session_retries+0x4a>
 8013f52:	7960      	ldrb	r0, [r4, #5]
 8013f54:	fab0 f080 	clz	r0, r0
 8013f58:	0940      	lsrs	r0, r0, #5
 8013f5a:	b00f      	add	sp, #60	@ 0x3c
 8013f5c:	bd30      	pop	{r4, r5, pc}
 8013f5e:	bf00      	nop

08013f60 <uxr_create_session>:
 8013f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f64:	f100 0b08 	add.w	fp, r0, #8
 8013f68:	b0ab      	sub	sp, #172	@ 0xac
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	4658      	mov	r0, fp
 8013f6e:	f000 ff2b 	bl	8014dc8 <uxr_reset_stream_storage>
 8013f72:	4620      	mov	r0, r4
 8013f74:	f000 fa00 	bl	8014378 <uxr_session_header_offset>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	9000      	str	r0, [sp, #0]
 8013f7c:	221c      	movs	r2, #28
 8013f7e:	a90b      	add	r1, sp, #44	@ 0x2c
 8013f80:	a812      	add	r0, sp, #72	@ 0x48
 8013f82:	f7f9 f9c7 	bl	800d314 <ucdr_init_buffer_origin_offset>
 8013f86:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013f88:	8a1a      	ldrh	r2, [r3, #16]
 8013f8a:	3a04      	subs	r2, #4
 8013f8c:	b292      	uxth	r2, r2
 8013f8e:	a912      	add	r1, sp, #72	@ 0x48
 8013f90:	4620      	mov	r0, r4
 8013f92:	f000 f917 	bl	80141c4 <uxr_buffer_create_session>
 8013f96:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f000 f983 	bl	80142a4 <uxr_stamp_create_session_header>
 8013f9e:	a812      	add	r0, sp, #72	@ 0x48
 8013fa0:	f7f9 f9f6 	bl	800d390 <ucdr_buffer_length>
 8013fa4:	23ff      	movs	r3, #255	@ 0xff
 8013fa6:	7163      	strb	r3, [r4, #5]
 8013fa8:	230a      	movs	r3, #10
 8013faa:	46da      	mov	sl, fp
 8013fac:	9303      	str	r3, [sp, #12]
 8013fae:	4683      	mov	fp, r0
 8013fb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013fb2:	465a      	mov	r2, fp
 8013fb4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013fb8:	a90b      	add	r1, sp, #44	@ 0x2c
 8013fba:	47a8      	blx	r5
 8013fbc:	f001 f824 	bl	8015008 <uxr_millis>
 8013fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013fc4:	4605      	mov	r5, r0
 8013fc6:	e009      	b.n	8013fdc <uxr_create_session+0x7c>
 8013fc8:	f001 f81e 	bl	8015008 <uxr_millis>
 8013fcc:	1b40      	subs	r0, r0, r5
 8013fce:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	7962      	ldrb	r2, [r4, #5]
 8013fd6:	dd38      	ble.n	801404a <uxr_create_session+0xea>
 8013fd8:	2aff      	cmp	r2, #255	@ 0xff
 8013fda:	d13c      	bne.n	8014056 <uxr_create_session+0xf6>
 8013fdc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013fde:	a907      	add	r1, sp, #28
 8013fe0:	6896      	ldr	r6, [r2, #8]
 8013fe2:	6810      	ldr	r0, [r2, #0]
 8013fe4:	aa08      	add	r2, sp, #32
 8013fe6:	47b0      	blx	r6
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d0ed      	beq.n	8013fc8 <uxr_create_session+0x68>
 8013fec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013ff0:	a81a      	add	r0, sp, #104	@ 0x68
 8013ff2:	f7f9 f9a1 	bl	800d338 <ucdr_init_buffer>
 8013ff6:	2600      	movs	r6, #0
 8013ff8:	f10d 031a 	add.w	r3, sp, #26
 8013ffc:	aa06      	add	r2, sp, #24
 8013ffe:	a91a      	add	r1, sp, #104	@ 0x68
 8014000:	4620      	mov	r0, r4
 8014002:	f88d 6018 	strb.w	r6, [sp, #24]
 8014006:	f000 f975 	bl	80142f4 <uxr_read_session_header>
 801400a:	2800      	cmp	r0, #0
 801400c:	d0dc      	beq.n	8013fc8 <uxr_create_session+0x68>
 801400e:	4631      	mov	r1, r6
 8014010:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014014:	f000 fea4 	bl	8014d60 <uxr_stream_id_from_raw>
 8014018:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801401c:	2e01      	cmp	r6, #1
 801401e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8014022:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8014026:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801402a:	d053      	beq.n	80140d4 <uxr_create_session+0x174>
 801402c:	2e02      	cmp	r6, #2
 801402e:	d018      	beq.n	8014062 <uxr_create_session+0x102>
 8014030:	2e00      	cmp	r6, #0
 8014032:	d1c9      	bne.n	8013fc8 <uxr_create_session+0x68>
 8014034:	4631      	mov	r1, r6
 8014036:	4630      	mov	r0, r6
 8014038:	f000 fe92 	bl	8014d60 <uxr_stream_id_from_raw>
 801403c:	a91a      	add	r1, sp, #104	@ 0x68
 801403e:	4602      	mov	r2, r0
 8014040:	900a      	str	r0, [sp, #40]	@ 0x28
 8014042:	4620      	mov	r0, r4
 8014044:	f7ff fac4 	bl	80135d0 <read_submessage_list>
 8014048:	e7be      	b.n	8013fc8 <uxr_create_session+0x68>
 801404a:	9b03      	ldr	r3, [sp, #12]
 801404c:	3b01      	subs	r3, #1
 801404e:	9303      	str	r3, [sp, #12]
 8014050:	d001      	beq.n	8014056 <uxr_create_session+0xf6>
 8014052:	2aff      	cmp	r2, #255	@ 0xff
 8014054:	d0ac      	beq.n	8013fb0 <uxr_create_session+0x50>
 8014056:	2a00      	cmp	r2, #0
 8014058:	d051      	beq.n	80140fe <uxr_create_session+0x19e>
 801405a:	2000      	movs	r0, #0
 801405c:	b02b      	add	sp, #172	@ 0xac
 801405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014062:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014066:	9304      	str	r3, [sp, #16]
 8014068:	4639      	mov	r1, r7
 801406a:	4650      	mov	r0, sl
 801406c:	f000 ff66 	bl	8014f3c <uxr_get_input_reliable_stream>
 8014070:	4680      	mov	r8, r0
 8014072:	b348      	cbz	r0, 80140c8 <uxr_create_session+0x168>
 8014074:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014076:	9205      	str	r2, [sp, #20]
 8014078:	a81a      	add	r0, sp, #104	@ 0x68
 801407a:	f7f9 f98d 	bl	800d398 <ucdr_buffer_remaining>
 801407e:	4603      	mov	r3, r0
 8014080:	f10d 0019 	add.w	r0, sp, #25
 8014084:	9000      	str	r0, [sp, #0]
 8014086:	9a05      	ldr	r2, [sp, #20]
 8014088:	4649      	mov	r1, r9
 801408a:	4640      	mov	r0, r8
 801408c:	f006 f822 	bl	801a0d4 <uxr_receive_reliable_message>
 8014090:	b1d0      	cbz	r0, 80140c8 <uxr_create_session+0x168>
 8014092:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d038      	beq.n	801410c <uxr_create_session+0x1ac>
 801409a:	9e04      	ldr	r6, [sp, #16]
 801409c:	e00a      	b.n	80140b4 <uxr_create_session+0x154>
 801409e:	f04f 0302 	mov.w	r3, #2
 80140a2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80140a6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80140aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80140ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80140b0:	f7ff fa8e 	bl	80135d0 <read_submessage_list>
 80140b4:	a922      	add	r1, sp, #136	@ 0x88
 80140b6:	2204      	movs	r2, #4
 80140b8:	4640      	mov	r0, r8
 80140ba:	f006 f88b 	bl	801a1d4 <uxr_next_input_reliable_buffer_available>
 80140be:	4603      	mov	r3, r0
 80140c0:	a922      	add	r1, sp, #136	@ 0x88
 80140c2:	4620      	mov	r0, r4
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d1ea      	bne.n	801409e <uxr_create_session+0x13e>
 80140c8:	9904      	ldr	r1, [sp, #16]
 80140ca:	463a      	mov	r2, r7
 80140cc:	4620      	mov	r0, r4
 80140ce:	f7ff f8e7 	bl	80132a0 <write_submessage_acknack.isra.0>
 80140d2:	e779      	b.n	8013fc8 <uxr_create_session+0x68>
 80140d4:	4639      	mov	r1, r7
 80140d6:	4650      	mov	r0, sl
 80140d8:	f000 ff26 	bl	8014f28 <uxr_get_input_best_effort_stream>
 80140dc:	2800      	cmp	r0, #0
 80140de:	f43f af73 	beq.w	8013fc8 <uxr_create_session+0x68>
 80140e2:	4649      	mov	r1, r9
 80140e4:	f005 ff62 	bl	8019fac <uxr_receive_best_effort_message>
 80140e8:	2800      	cmp	r0, #0
 80140ea:	f43f af6d 	beq.w	8013fc8 <uxr_create_session+0x68>
 80140ee:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80140f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80140f4:	a91a      	add	r1, sp, #104	@ 0x68
 80140f6:	4620      	mov	r0, r4
 80140f8:	f7ff fa6a 	bl	80135d0 <read_submessage_list>
 80140fc:	e764      	b.n	8013fc8 <uxr_create_session+0x68>
 80140fe:	4650      	mov	r0, sl
 8014100:	f000 fe62 	bl	8014dc8 <uxr_reset_stream_storage>
 8014104:	2001      	movs	r0, #1
 8014106:	b02b      	add	sp, #172	@ 0xac
 8014108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801410c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8014110:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014112:	a91a      	add	r1, sp, #104	@ 0x68
 8014114:	4620      	mov	r0, r4
 8014116:	f7ff fa5b 	bl	80135d0 <read_submessage_list>
 801411a:	e7be      	b.n	801409a <uxr_create_session+0x13a>

0801411c <uxr_prepare_stream_to_write_submessage>:
 801411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014120:	b082      	sub	sp, #8
 8014122:	4682      	mov	sl, r0
 8014124:	4610      	mov	r0, r2
 8014126:	4615      	mov	r5, r2
 8014128:	461e      	mov	r6, r3
 801412a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801412e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8014132:	9101      	str	r1, [sp, #4]
 8014134:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014138:	f000 ff60 	bl	8014ffc <uxr_submessage_padding>
 801413c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014140:	f105 0904 	add.w	r9, r5, #4
 8014144:	2b01      	cmp	r3, #1
 8014146:	4481      	add	r9, r0
 8014148:	d01d      	beq.n	8014186 <uxr_prepare_stream_to_write_submessage+0x6a>
 801414a:	2b02      	cmp	r3, #2
 801414c:	d116      	bne.n	801417c <uxr_prepare_stream_to_write_submessage+0x60>
 801414e:	4621      	mov	r1, r4
 8014150:	f10a 0008 	add.w	r0, sl, #8
 8014154:	f000 fede 	bl	8014f14 <uxr_get_output_reliable_stream>
 8014158:	4604      	mov	r4, r0
 801415a:	b158      	cbz	r0, 8014174 <uxr_prepare_stream_to_write_submessage+0x58>
 801415c:	4649      	mov	r1, r9
 801415e:	4632      	mov	r2, r6
 8014160:	f006 f9f4 	bl	801a54c <uxr_prepare_reliable_buffer_to_write>
 8014164:	4604      	mov	r4, r0
 8014166:	b12c      	cbz	r4, 8014174 <uxr_prepare_stream_to_write_submessage+0x58>
 8014168:	4643      	mov	r3, r8
 801416a:	b2aa      	uxth	r2, r5
 801416c:	4639      	mov	r1, r7
 801416e:	4630      	mov	r0, r6
 8014170:	f000 ff04 	bl	8014f7c <uxr_buffer_submessage_header>
 8014174:	4620      	mov	r0, r4
 8014176:	b002      	add	sp, #8
 8014178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801417c:	2400      	movs	r4, #0
 801417e:	4620      	mov	r0, r4
 8014180:	b002      	add	sp, #8
 8014182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014186:	4621      	mov	r1, r4
 8014188:	f10a 0008 	add.w	r0, sl, #8
 801418c:	f000 feba 	bl	8014f04 <uxr_get_output_best_effort_stream>
 8014190:	4604      	mov	r4, r0
 8014192:	2800      	cmp	r0, #0
 8014194:	d0ee      	beq.n	8014174 <uxr_prepare_stream_to_write_submessage+0x58>
 8014196:	4649      	mov	r1, r9
 8014198:	4632      	mov	r2, r6
 801419a:	f006 f907 	bl	801a3ac <uxr_prepare_best_effort_buffer_to_write>
 801419e:	4604      	mov	r4, r0
 80141a0:	e7e1      	b.n	8014166 <uxr_prepare_stream_to_write_submessage+0x4a>
 80141a2:	bf00      	nop

080141a4 <uxr_init_session_info>:
 80141a4:	0e13      	lsrs	r3, r2, #24
 80141a6:	7043      	strb	r3, [r0, #1]
 80141a8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80141ac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80141b0:	7001      	strb	r1, [r0, #0]
 80141b2:	70c3      	strb	r3, [r0, #3]
 80141b4:	2109      	movs	r1, #9
 80141b6:	23ff      	movs	r3, #255	@ 0xff
 80141b8:	f880 c002 	strb.w	ip, [r0, #2]
 80141bc:	7102      	strb	r2, [r0, #4]
 80141be:	80c1      	strh	r1, [r0, #6]
 80141c0:	7143      	strb	r3, [r0, #5]
 80141c2:	4770      	bx	lr

080141c4 <uxr_buffer_create_session>:
 80141c4:	b530      	push	{r4, r5, lr}
 80141c6:	b089      	sub	sp, #36	@ 0x24
 80141c8:	2300      	movs	r3, #0
 80141ca:	4d12      	ldr	r5, [pc, #72]	@ (8014214 <uxr_buffer_create_session+0x50>)
 80141cc:	9307      	str	r3, [sp, #28]
 80141ce:	f8ad 201c 	strh.w	r2, [sp, #28]
 80141d2:	2201      	movs	r2, #1
 80141d4:	9301      	str	r3, [sp, #4]
 80141d6:	80c2      	strh	r2, [r0, #6]
 80141d8:	f88d 2004 	strb.w	r2, [sp, #4]
 80141dc:	682a      	ldr	r2, [r5, #0]
 80141de:	9200      	str	r2, [sp, #0]
 80141e0:	88aa      	ldrh	r2, [r5, #4]
 80141e2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80141e6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80141ea:	9202      	str	r2, [sp, #8]
 80141ec:	460c      	mov	r4, r1
 80141ee:	7802      	ldrb	r2, [r0, #0]
 80141f0:	9303      	str	r3, [sp, #12]
 80141f2:	4619      	mov	r1, r3
 80141f4:	f88d 200c 	strb.w	r2, [sp, #12]
 80141f8:	4620      	mov	r0, r4
 80141fa:	2210      	movs	r2, #16
 80141fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014200:	9306      	str	r3, [sp, #24]
 8014202:	f000 febb 	bl	8014f7c <uxr_buffer_submessage_header>
 8014206:	4669      	mov	r1, sp
 8014208:	4620      	mov	r0, r4
 801420a:	f001 ff67 	bl	80160dc <uxr_serialize_CREATE_CLIENT_Payload>
 801420e:	b009      	add	sp, #36	@ 0x24
 8014210:	bd30      	pop	{r4, r5, pc}
 8014212:	bf00      	nop
 8014214:	0801d920 	.word	0x0801d920

08014218 <uxr_buffer_delete_session>:
 8014218:	b510      	push	{r4, lr}
 801421a:	4b0c      	ldr	r3, [pc, #48]	@ (801424c <uxr_buffer_delete_session+0x34>)
 801421c:	b082      	sub	sp, #8
 801421e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8014222:	f8ad c006 	strh.w	ip, [sp, #6]
 8014226:	460c      	mov	r4, r1
 8014228:	2202      	movs	r2, #2
 801422a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801422e:	80c2      	strh	r2, [r0, #6]
 8014230:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014234:	2204      	movs	r2, #4
 8014236:	2300      	movs	r3, #0
 8014238:	2103      	movs	r1, #3
 801423a:	4620      	mov	r0, r4
 801423c:	f000 fe9e 	bl	8014f7c <uxr_buffer_submessage_header>
 8014240:	a901      	add	r1, sp, #4
 8014242:	4620      	mov	r0, r4
 8014244:	f001 fff0 	bl	8016228 <uxr_serialize_DELETE_Payload>
 8014248:	b002      	add	sp, #8
 801424a:	bd10      	pop	{r4, pc}
 801424c:	0801d920 	.word	0x0801d920

08014250 <uxr_read_create_session_status>:
 8014250:	b510      	push	{r4, lr}
 8014252:	b088      	sub	sp, #32
 8014254:	4604      	mov	r4, r0
 8014256:	4608      	mov	r0, r1
 8014258:	a901      	add	r1, sp, #4
 801425a:	f001 fff5 	bl	8016248 <uxr_deserialize_STATUS_AGENT_Payload>
 801425e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014262:	7163      	strb	r3, [r4, #5]
 8014264:	b008      	add	sp, #32
 8014266:	bd10      	pop	{r4, pc}

08014268 <uxr_read_delete_session_status>:
 8014268:	b510      	push	{r4, lr}
 801426a:	4604      	mov	r4, r0
 801426c:	b084      	sub	sp, #16
 801426e:	4608      	mov	r0, r1
 8014270:	a902      	add	r1, sp, #8
 8014272:	f002 f819 	bl	80162a8 <uxr_deserialize_STATUS_Payload>
 8014276:	88e3      	ldrh	r3, [r4, #6]
 8014278:	2b02      	cmp	r3, #2
 801427a:	d001      	beq.n	8014280 <uxr_read_delete_session_status+0x18>
 801427c:	b004      	add	sp, #16
 801427e:	bd10      	pop	{r4, pc}
 8014280:	f10d 000a 	add.w	r0, sp, #10
 8014284:	f7fe fe62 	bl	8012f4c <uxr_object_id_from_raw>
 8014288:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801428c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014290:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014294:	b29b      	uxth	r3, r3
 8014296:	2b02      	cmp	r3, #2
 8014298:	bf04      	itt	eq
 801429a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801429e:	7163      	strbeq	r3, [r4, #5]
 80142a0:	b004      	add	sp, #16
 80142a2:	bd10      	pop	{r4, pc}

080142a4 <uxr_stamp_create_session_header>:
 80142a4:	b510      	push	{r4, lr}
 80142a6:	2208      	movs	r2, #8
 80142a8:	b08a      	sub	sp, #40	@ 0x28
 80142aa:	4604      	mov	r4, r0
 80142ac:	eb0d 0002 	add.w	r0, sp, r2
 80142b0:	f7f9 f842 	bl	800d338 <ucdr_init_buffer>
 80142b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142b8:	9400      	str	r4, [sp, #0]
 80142ba:	2300      	movs	r3, #0
 80142bc:	461a      	mov	r2, r3
 80142be:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80142c2:	a802      	add	r0, sp, #8
 80142c4:	f001 f854 	bl	8015370 <uxr_serialize_message_header>
 80142c8:	b00a      	add	sp, #40	@ 0x28
 80142ca:	bd10      	pop	{r4, pc}

080142cc <uxr_stamp_session_header>:
 80142cc:	b530      	push	{r4, r5, lr}
 80142ce:	b08d      	sub	sp, #52	@ 0x34
 80142d0:	4604      	mov	r4, r0
 80142d2:	460d      	mov	r5, r1
 80142d4:	9203      	str	r2, [sp, #12]
 80142d6:	4619      	mov	r1, r3
 80142d8:	a804      	add	r0, sp, #16
 80142da:	2208      	movs	r2, #8
 80142dc:	f7f9 f82c 	bl	800d338 <ucdr_init_buffer>
 80142e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142e4:	9b03      	ldr	r3, [sp, #12]
 80142e6:	9400      	str	r4, [sp, #0]
 80142e8:	462a      	mov	r2, r5
 80142ea:	a804      	add	r0, sp, #16
 80142ec:	f001 f840 	bl	8015370 <uxr_serialize_message_header>
 80142f0:	b00d      	add	sp, #52	@ 0x34
 80142f2:	bd30      	pop	{r4, r5, pc}

080142f4 <uxr_read_session_header>:
 80142f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142f8:	4607      	mov	r7, r0
 80142fa:	b084      	sub	sp, #16
 80142fc:	4608      	mov	r0, r1
 80142fe:	460c      	mov	r4, r1
 8014300:	4615      	mov	r5, r2
 8014302:	461e      	mov	r6, r3
 8014304:	f7f9 f848 	bl	800d398 <ucdr_buffer_remaining>
 8014308:	2808      	cmp	r0, #8
 801430a:	d803      	bhi.n	8014314 <uxr_read_session_header+0x20>
 801430c:	2000      	movs	r0, #0
 801430e:	b004      	add	sp, #16
 8014310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014314:	f10d 080c 	add.w	r8, sp, #12
 8014318:	4633      	mov	r3, r6
 801431a:	462a      	mov	r2, r5
 801431c:	f8cd 8000 	str.w	r8, [sp]
 8014320:	4620      	mov	r0, r4
 8014322:	f10d 010b 	add.w	r1, sp, #11
 8014326:	f001 f841 	bl	80153ac <uxr_deserialize_message_header>
 801432a:	783a      	ldrb	r2, [r7, #0]
 801432c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014330:	4293      	cmp	r3, r2
 8014332:	d1eb      	bne.n	801430c <uxr_read_session_header+0x18>
 8014334:	061b      	lsls	r3, r3, #24
 8014336:	d41c      	bmi.n	8014372 <uxr_read_session_header+0x7e>
 8014338:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801433c:	787b      	ldrb	r3, [r7, #1]
 801433e:	429a      	cmp	r2, r3
 8014340:	d003      	beq.n	801434a <uxr_read_session_header+0x56>
 8014342:	2001      	movs	r0, #1
 8014344:	f080 0001 	eor.w	r0, r0, #1
 8014348:	e7e1      	b.n	801430e <uxr_read_session_header+0x1a>
 801434a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801434e:	78bb      	ldrb	r3, [r7, #2]
 8014350:	429a      	cmp	r2, r3
 8014352:	f107 0102 	add.w	r1, r7, #2
 8014356:	d1f4      	bne.n	8014342 <uxr_read_session_header+0x4e>
 8014358:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801435c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014360:	429a      	cmp	r2, r3
 8014362:	d1ee      	bne.n	8014342 <uxr_read_session_header+0x4e>
 8014364:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014368:	784b      	ldrb	r3, [r1, #1]
 801436a:	429a      	cmp	r2, r3
 801436c:	d1e9      	bne.n	8014342 <uxr_read_session_header+0x4e>
 801436e:	2000      	movs	r0, #0
 8014370:	e7e8      	b.n	8014344 <uxr_read_session_header+0x50>
 8014372:	2001      	movs	r0, #1
 8014374:	e7cb      	b.n	801430e <uxr_read_session_header+0x1a>
 8014376:	bf00      	nop

08014378 <uxr_session_header_offset>:
 8014378:	f990 3000 	ldrsb.w	r3, [r0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	bfac      	ite	ge
 8014380:	2008      	movge	r0, #8
 8014382:	2004      	movlt	r0, #4
 8014384:	4770      	bx	lr
 8014386:	bf00      	nop

08014388 <uxr_init_base_object_request>:
 8014388:	b510      	push	{r4, lr}
 801438a:	88c3      	ldrh	r3, [r0, #6]
 801438c:	b082      	sub	sp, #8
 801438e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014392:	9101      	str	r1, [sp, #4]
 8014394:	f1a3 010a 	sub.w	r1, r3, #10
 8014398:	b289      	uxth	r1, r1
 801439a:	42a1      	cmp	r1, r4
 801439c:	d80e      	bhi.n	80143bc <uxr_init_base_object_request+0x34>
 801439e:	3301      	adds	r3, #1
 80143a0:	b29c      	uxth	r4, r3
 80143a2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	80c4      	strh	r4, [r0, #6]
 80143aa:	9801      	ldr	r0, [sp, #4]
 80143ac:	7011      	strb	r1, [r2, #0]
 80143ae:	7053      	strb	r3, [r2, #1]
 80143b0:	1c91      	adds	r1, r2, #2
 80143b2:	f7fe fddf 	bl	8012f74 <uxr_object_id_to_raw>
 80143b6:	4620      	mov	r0, r4
 80143b8:	b002      	add	sp, #8
 80143ba:	bd10      	pop	{r4, pc}
 80143bc:	230a      	movs	r3, #10
 80143be:	2100      	movs	r1, #0
 80143c0:	461c      	mov	r4, r3
 80143c2:	e7f1      	b.n	80143a8 <uxr_init_base_object_request+0x20>

080143c4 <uxr_parse_base_object_request>:
 80143c4:	b570      	push	{r4, r5, r6, lr}
 80143c6:	4604      	mov	r4, r0
 80143c8:	3002      	adds	r0, #2
 80143ca:	460d      	mov	r5, r1
 80143cc:	4616      	mov	r6, r2
 80143ce:	f7fe fdbd 	bl	8012f4c <uxr_object_id_from_raw>
 80143d2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80143d6:	8028      	strh	r0, [r5, #0]
 80143d8:	806b      	strh	r3, [r5, #2]
 80143da:	7822      	ldrb	r2, [r4, #0]
 80143dc:	7863      	ldrb	r3, [r4, #1]
 80143de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80143e2:	8033      	strh	r3, [r6, #0]
 80143e4:	bd70      	pop	{r4, r5, r6, pc}
 80143e6:	bf00      	nop

080143e8 <uxr_init_framing_io>:
 80143e8:	2300      	movs	r3, #0
 80143ea:	7041      	strb	r1, [r0, #1]
 80143ec:	7003      	strb	r3, [r0, #0]
 80143ee:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80143f0:	4770      	bx	lr
 80143f2:	bf00      	nop

080143f4 <uxr_write_framed_msg>:
 80143f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f8:	4617      	mov	r7, r2
 80143fa:	7842      	ldrb	r2, [r0, #1]
 80143fc:	b083      	sub	sp, #12
 80143fe:	460e      	mov	r6, r1
 8014400:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014404:	469a      	mov	sl, r3
 8014406:	2901      	cmp	r1, #1
 8014408:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801440c:	4604      	mov	r4, r0
 801440e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014412:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014416:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801441a:	f240 8137 	bls.w	801468c <uxr_write_framed_msg+0x298>
 801441e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014422:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014426:	2901      	cmp	r1, #1
 8014428:	f04f 0202 	mov.w	r2, #2
 801442c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014430:	f240 808f 	bls.w	8014552 <uxr_write_framed_msg+0x15e>
 8014434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014436:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801443a:	b2dd      	uxtb	r5, r3
 801443c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014440:	2203      	movs	r2, #3
 8014442:	2901      	cmp	r1, #1
 8014444:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014448:	f240 809a 	bls.w	8014580 <uxr_write_framed_msg+0x18c>
 801444c:	18a1      	adds	r1, r4, r2
 801444e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014450:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8014454:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014458:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801445c:	3201      	adds	r2, #1
 801445e:	2801      	cmp	r0, #1
 8014460:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014464:	f240 80a0 	bls.w	80145a8 <uxr_write_framed_msg+0x1b4>
 8014468:	18a0      	adds	r0, r4, r2
 801446a:	3201      	adds	r2, #1
 801446c:	b2d2      	uxtb	r2, r2
 801446e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014472:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014476:	2b00      	cmp	r3, #0
 8014478:	f000 80a9 	beq.w	80145ce <uxr_write_framed_msg+0x1da>
 801447c:	f04f 0900 	mov.w	r9, #0
 8014480:	46c8      	mov	r8, r9
 8014482:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014486:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801448a:	2901      	cmp	r1, #1
 801448c:	f240 80c3 	bls.w	8014616 <uxr_write_framed_msg+0x222>
 8014490:	2a29      	cmp	r2, #41	@ 0x29
 8014492:	f200 809f 	bhi.w	80145d4 <uxr_write_framed_msg+0x1e0>
 8014496:	18a1      	adds	r1, r4, r2
 8014498:	3201      	adds	r2, #1
 801449a:	b2d2      	uxtb	r2, r2
 801449c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80144a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80144a4:	ea89 0303 	eor.w	r3, r9, r3
 80144a8:	498c      	ldr	r1, [pc, #560]	@ (80146dc <uxr_write_framed_msg+0x2e8>)
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	f108 0801 	add.w	r8, r8, #1
 80144b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80144b4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80144b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80144ba:	4543      	cmp	r3, r8
 80144bc:	d8e1      	bhi.n	8014482 <uxr_write_framed_msg+0x8e>
 80144be:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80144c2:	fa5f f889 	uxtb.w	r8, r9
 80144c6:	9301      	str	r3, [sp, #4]
 80144c8:	f04f 0900 	mov.w	r9, #0
 80144cc:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80144d0:	fa5f f18a 	uxtb.w	r1, sl
 80144d4:	2901      	cmp	r1, #1
 80144d6:	d921      	bls.n	801451c <uxr_write_framed_msg+0x128>
 80144d8:	2a29      	cmp	r2, #41	@ 0x29
 80144da:	f240 80af 	bls.w	801463c <uxr_write_framed_msg+0x248>
 80144de:	2500      	movs	r5, #0
 80144e0:	e000      	b.n	80144e4 <uxr_write_framed_msg+0xf0>
 80144e2:	b160      	cbz	r0, 80144fe <uxr_write_framed_msg+0x10a>
 80144e4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80144e8:	1b52      	subs	r2, r2, r5
 80144ea:	465b      	mov	r3, fp
 80144ec:	4421      	add	r1, r4
 80144ee:	4638      	mov	r0, r7
 80144f0:	47b0      	blx	r6
 80144f2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80144f6:	4405      	add	r5, r0
 80144f8:	4295      	cmp	r5, r2
 80144fa:	d3f2      	bcc.n	80144e2 <uxr_write_framed_msg+0xee>
 80144fc:	d003      	beq.n	8014506 <uxr_write_framed_msg+0x112>
 80144fe:	2000      	movs	r0, #0
 8014500:	b003      	add	sp, #12
 8014502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014506:	fa5f f18a 	uxtb.w	r1, sl
 801450a:	f04f 0300 	mov.w	r3, #0
 801450e:	2901      	cmp	r1, #1
 8014510:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014514:	f04f 0200 	mov.w	r2, #0
 8014518:	f200 8090 	bhi.w	801463c <uxr_write_framed_msg+0x248>
 801451c:	1c51      	adds	r1, r2, #1
 801451e:	b2c9      	uxtb	r1, r1
 8014520:	2929      	cmp	r1, #41	@ 0x29
 8014522:	d8dc      	bhi.n	80144de <uxr_write_framed_msg+0xea>
 8014524:	18a5      	adds	r5, r4, r2
 8014526:	4421      	add	r1, r4
 8014528:	3202      	adds	r2, #2
 801452a:	f088 0820 	eor.w	r8, r8, #32
 801452e:	4648      	mov	r0, r9
 8014530:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014534:	b2d2      	uxtb	r2, r2
 8014536:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801453a:	f04f 0901 	mov.w	r9, #1
 801453e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014542:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014546:	2800      	cmp	r0, #0
 8014548:	f040 8085 	bne.w	8014656 <uxr_write_framed_msg+0x262>
 801454c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014550:	e7bc      	b.n	80144cc <uxr_write_framed_msg+0xd8>
 8014552:	4611      	mov	r1, r2
 8014554:	f04f 0c03 	mov.w	ip, #3
 8014558:	2204      	movs	r2, #4
 801455a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801455c:	4421      	add	r1, r4
 801455e:	b2dd      	uxtb	r5, r3
 8014560:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014564:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014568:	44a4      	add	ip, r4
 801456a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801456e:	f080 0020 	eor.w	r0, r0, #32
 8014572:	2901      	cmp	r1, #1
 8014574:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014578:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801457c:	f63f af66 	bhi.w	801444c <uxr_write_framed_msg+0x58>
 8014580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014582:	18a0      	adds	r0, r4, r2
 8014584:	f085 0520 	eor.w	r5, r5, #32
 8014588:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801458c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014590:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014594:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014598:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801459c:	3202      	adds	r2, #2
 801459e:	2801      	cmp	r0, #1
 80145a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80145a4:	f63f af60 	bhi.w	8014468 <uxr_write_framed_msg+0x74>
 80145a8:	1c50      	adds	r0, r2, #1
 80145aa:	18a5      	adds	r5, r4, r2
 80145ac:	fa54 f080 	uxtab	r0, r4, r0
 80145b0:	3202      	adds	r2, #2
 80145b2:	f081 0120 	eor.w	r1, r1, #32
 80145b6:	b2d2      	uxtb	r2, r2
 80145b8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80145bc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80145c0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80145c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	f47f af57 	bne.w	801447c <uxr_write_framed_msg+0x88>
 80145ce:	9301      	str	r3, [sp, #4]
 80145d0:	4698      	mov	r8, r3
 80145d2:	e779      	b.n	80144c8 <uxr_write_framed_msg+0xd4>
 80145d4:	2500      	movs	r5, #0
 80145d6:	e001      	b.n	80145dc <uxr_write_framed_msg+0x1e8>
 80145d8:	2800      	cmp	r0, #0
 80145da:	d090      	beq.n	80144fe <uxr_write_framed_msg+0x10a>
 80145dc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80145e0:	1b52      	subs	r2, r2, r5
 80145e2:	465b      	mov	r3, fp
 80145e4:	4421      	add	r1, r4
 80145e6:	4638      	mov	r0, r7
 80145e8:	47b0      	blx	r6
 80145ea:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80145ee:	4405      	add	r5, r0
 80145f0:	4295      	cmp	r5, r2
 80145f2:	d3f1      	bcc.n	80145d8 <uxr_write_framed_msg+0x1e4>
 80145f4:	d183      	bne.n	80144fe <uxr_write_framed_msg+0x10a>
 80145f6:	f04f 0300 	mov.w	r3, #0
 80145fa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80145fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014600:	4543      	cmp	r3, r8
 8014602:	d964      	bls.n	80146ce <uxr_write_framed_msg+0x2da>
 8014604:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014608:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801460c:	2901      	cmp	r1, #1
 801460e:	f04f 0200 	mov.w	r2, #0
 8014612:	f63f af3d 	bhi.w	8014490 <uxr_write_framed_msg+0x9c>
 8014616:	1c51      	adds	r1, r2, #1
 8014618:	b2c9      	uxtb	r1, r1
 801461a:	2929      	cmp	r1, #41	@ 0x29
 801461c:	d8da      	bhi.n	80145d4 <uxr_write_framed_msg+0x1e0>
 801461e:	18a0      	adds	r0, r4, r2
 8014620:	4421      	add	r1, r4
 8014622:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014626:	3202      	adds	r2, #2
 8014628:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801462c:	b2d2      	uxtb	r2, r2
 801462e:	f083 0020 	eor.w	r0, r3, #32
 8014632:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014636:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801463a:	e733      	b.n	80144a4 <uxr_write_framed_msg+0xb0>
 801463c:	18a1      	adds	r1, r4, r2
 801463e:	3201      	adds	r2, #1
 8014640:	4648      	mov	r0, r9
 8014642:	b2d2      	uxtb	r2, r2
 8014644:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014648:	f04f 0901 	mov.w	r9, #1
 801464c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014650:	2800      	cmp	r0, #0
 8014652:	f43f af7b 	beq.w	801454c <uxr_write_framed_msg+0x158>
 8014656:	2500      	movs	r5, #0
 8014658:	e002      	b.n	8014660 <uxr_write_framed_msg+0x26c>
 801465a:	2800      	cmp	r0, #0
 801465c:	f43f af4f 	beq.w	80144fe <uxr_write_framed_msg+0x10a>
 8014660:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014664:	1b52      	subs	r2, r2, r5
 8014666:	465b      	mov	r3, fp
 8014668:	4421      	add	r1, r4
 801466a:	4638      	mov	r0, r7
 801466c:	47b0      	blx	r6
 801466e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014672:	4405      	add	r5, r0
 8014674:	4295      	cmp	r5, r2
 8014676:	d3f0      	bcc.n	801465a <uxr_write_framed_msg+0x266>
 8014678:	f47f af41 	bne.w	80144fe <uxr_write_framed_msg+0x10a>
 801467c:	2300      	movs	r3, #0
 801467e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014682:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014684:	b298      	uxth	r0, r3
 8014686:	b003      	add	sp, #12
 8014688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801468c:	217d      	movs	r1, #125	@ 0x7d
 801468e:	f082 0220 	eor.w	r2, r2, #32
 8014692:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014696:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801469a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801469e:	2901      	cmp	r1, #1
 80146a0:	f04f 0203 	mov.w	r2, #3
 80146a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80146a8:	d804      	bhi.n	80146b4 <uxr_write_framed_msg+0x2c0>
 80146aa:	4611      	mov	r1, r2
 80146ac:	f04f 0c04 	mov.w	ip, #4
 80146b0:	2205      	movs	r2, #5
 80146b2:	e752      	b.n	801455a <uxr_write_framed_msg+0x166>
 80146b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80146b6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80146ba:	b2dd      	uxtb	r5, r3
 80146bc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80146c0:	2204      	movs	r2, #4
 80146c2:	2901      	cmp	r1, #1
 80146c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80146c8:	f63f aec0 	bhi.w	801444c <uxr_write_framed_msg+0x58>
 80146cc:	e758      	b.n	8014580 <uxr_write_framed_msg+0x18c>
 80146ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80146d2:	fa5f f889 	uxtb.w	r8, r9
 80146d6:	9301      	str	r3, [sp, #4]
 80146d8:	2200      	movs	r2, #0
 80146da:	e6f5      	b.n	80144c8 <uxr_write_framed_msg+0xd4>
 80146dc:	0801ef58 	.word	0x0801ef58

080146e0 <uxr_framing_read_transport>:
 80146e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e4:	4604      	mov	r4, r0
 80146e6:	b083      	sub	sp, #12
 80146e8:	461f      	mov	r7, r3
 80146ea:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80146ee:	4689      	mov	r9, r1
 80146f0:	4692      	mov	sl, r2
 80146f2:	f000 fc89 	bl	8015008 <uxr_millis>
 80146f6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80146fa:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80146fe:	42b3      	cmp	r3, r6
 8014700:	4680      	mov	r8, r0
 8014702:	d061      	beq.n	80147c8 <uxr_framing_read_transport+0xe8>
 8014704:	d81c      	bhi.n	8014740 <uxr_framing_read_transport+0x60>
 8014706:	1e75      	subs	r5, r6, #1
 8014708:	1aed      	subs	r5, r5, r3
 801470a:	b2ed      	uxtb	r5, r5
 801470c:	2600      	movs	r6, #0
 801470e:	455d      	cmp	r5, fp
 8014710:	d81f      	bhi.n	8014752 <uxr_framing_read_transport+0x72>
 8014712:	19ab      	adds	r3, r5, r6
 8014714:	455b      	cmp	r3, fp
 8014716:	bf84      	itt	hi
 8014718:	ebab 0605 	subhi.w	r6, fp, r5
 801471c:	b2f6      	uxtbhi	r6, r6
 801471e:	b9ed      	cbnz	r5, 801475c <uxr_framing_read_transport+0x7c>
 8014720:	f04f 0b00 	mov.w	fp, #0
 8014724:	f000 fc70 	bl	8015008 <uxr_millis>
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	eba0 0808 	sub.w	r8, r0, r8
 801472e:	eba3 0308 	sub.w	r3, r3, r8
 8014732:	4658      	mov	r0, fp
 8014734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014738:	603b      	str	r3, [r7, #0]
 801473a:	b003      	add	sp, #12
 801473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014740:	2e00      	cmp	r6, #0
 8014742:	d049      	beq.n	80147d8 <uxr_framing_read_transport+0xf8>
 8014744:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014748:	b2ed      	uxtb	r5, r5
 801474a:	3e01      	subs	r6, #1
 801474c:	455d      	cmp	r5, fp
 801474e:	b2f6      	uxtb	r6, r6
 8014750:	d9df      	bls.n	8014712 <uxr_framing_read_transport+0x32>
 8014752:	fa5f f58b 	uxtb.w	r5, fp
 8014756:	2600      	movs	r6, #0
 8014758:	2d00      	cmp	r5, #0
 801475a:	d0e1      	beq.n	8014720 <uxr_framing_read_transport+0x40>
 801475c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014760:	3102      	adds	r1, #2
 8014762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014764:	9300      	str	r3, [sp, #0]
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	4421      	add	r1, r4
 801476a:	462a      	mov	r2, r5
 801476c:	4650      	mov	r0, sl
 801476e:	47c8      	blx	r9
 8014770:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014774:	4a1a      	ldr	r2, [pc, #104]	@ (80147e0 <uxr_framing_read_transport+0x100>)
 8014776:	4403      	add	r3, r0
 8014778:	0859      	lsrs	r1, r3, #1
 801477a:	fba2 2101 	umull	r2, r1, r2, r1
 801477e:	0889      	lsrs	r1, r1, #2
 8014780:	222a      	movs	r2, #42	@ 0x2a
 8014782:	fb02 3111 	mls	r1, r2, r1, r3
 8014786:	4683      	mov	fp, r0
 8014788:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801478c:	2800      	cmp	r0, #0
 801478e:	d0c7      	beq.n	8014720 <uxr_framing_read_transport+0x40>
 8014790:	42a8      	cmp	r0, r5
 8014792:	d1c7      	bne.n	8014724 <uxr_framing_read_transport+0x44>
 8014794:	2e00      	cmp	r6, #0
 8014796:	d0c5      	beq.n	8014724 <uxr_framing_read_transport+0x44>
 8014798:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	3102      	adds	r1, #2
 801479e:	4632      	mov	r2, r6
 80147a0:	4421      	add	r1, r4
 80147a2:	2300      	movs	r3, #0
 80147a4:	4650      	mov	r0, sl
 80147a6:	47c8      	blx	r9
 80147a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80147ac:	4a0c      	ldr	r2, [pc, #48]	@ (80147e0 <uxr_framing_read_transport+0x100>)
 80147ae:	180b      	adds	r3, r1, r0
 80147b0:	0859      	lsrs	r1, r3, #1
 80147b2:	fba2 1201 	umull	r1, r2, r2, r1
 80147b6:	0892      	lsrs	r2, r2, #2
 80147b8:	212a      	movs	r1, #42	@ 0x2a
 80147ba:	fb01 3312 	mls	r3, r1, r2, r3
 80147be:	eb00 0b05 	add.w	fp, r0, r5
 80147c2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80147c6:	e7ad      	b.n	8014724 <uxr_framing_read_transport+0x44>
 80147c8:	2600      	movs	r6, #0
 80147ca:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80147ce:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80147d0:	d9bf      	bls.n	8014752 <uxr_framing_read_transport+0x72>
 80147d2:	2102      	movs	r1, #2
 80147d4:	2529      	movs	r5, #41	@ 0x29
 80147d6:	e7c4      	b.n	8014762 <uxr_framing_read_transport+0x82>
 80147d8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80147dc:	b2ed      	uxtb	r5, r5
 80147de:	e796      	b.n	801470e <uxr_framing_read_transport+0x2e>
 80147e0:	30c30c31 	.word	0x30c30c31

080147e4 <uxr_read_framed_msg>:
 80147e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e8:	461e      	mov	r6, r3
 80147ea:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80147ee:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80147f2:	429d      	cmp	r5, r3
 80147f4:	b083      	sub	sp, #12
 80147f6:	4604      	mov	r4, r0
 80147f8:	4688      	mov	r8, r1
 80147fa:	4691      	mov	r9, r2
 80147fc:	f000 8188 	beq.w	8014b10 <uxr_read_framed_msg+0x32c>
 8014800:	7823      	ldrb	r3, [r4, #0]
 8014802:	4dc1      	ldr	r5, [pc, #772]	@ (8014b08 <uxr_read_framed_msg+0x324>)
 8014804:	4fc1      	ldr	r7, [pc, #772]	@ (8014b0c <uxr_read_framed_msg+0x328>)
 8014806:	2b07      	cmp	r3, #7
 8014808:	d8fd      	bhi.n	8014806 <uxr_read_framed_msg+0x22>
 801480a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801480e:	0115      	.short	0x0115
 8014810:	00d600f6 	.word	0x00d600f6
 8014814:	009000b9 	.word	0x009000b9
 8014818:	0030004d 	.word	0x0030004d
 801481c:	0008      	.short	0x0008
 801481e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014822:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014826:	4299      	cmp	r1, r3
 8014828:	f000 814a 	beq.w	8014ac0 <uxr_read_framed_msg+0x2dc>
 801482c:	18e2      	adds	r2, r4, r3
 801482e:	7892      	ldrb	r2, [r2, #2]
 8014830:	2a7d      	cmp	r2, #125	@ 0x7d
 8014832:	f000 8199 	beq.w	8014b68 <uxr_read_framed_msg+0x384>
 8014836:	3301      	adds	r3, #1
 8014838:	0858      	lsrs	r0, r3, #1
 801483a:	fba5 1000 	umull	r1, r0, r5, r0
 801483e:	0880      	lsrs	r0, r0, #2
 8014840:	212a      	movs	r1, #42	@ 0x2a
 8014842:	fb01 3310 	mls	r3, r1, r0, r3
 8014846:	2a7e      	cmp	r2, #126	@ 0x7e
 8014848:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801484c:	f000 8252 	beq.w	8014cf4 <uxr_read_framed_msg+0x510>
 8014850:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014852:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8014854:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014858:	b29b      	uxth	r3, r3
 801485a:	2200      	movs	r2, #0
 801485c:	4299      	cmp	r1, r3
 801485e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014860:	7022      	strb	r2, [r4, #0]
 8014862:	f000 8179 	beq.w	8014b58 <uxr_read_framed_msg+0x374>
 8014866:	2000      	movs	r0, #0
 8014868:	b003      	add	sp, #12
 801486a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014872:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014876:	4299      	cmp	r1, r3
 8014878:	f000 8131 	beq.w	8014ade <uxr_read_framed_msg+0x2fa>
 801487c:	18e2      	adds	r2, r4, r3
 801487e:	7890      	ldrb	r0, [r2, #2]
 8014880:	287d      	cmp	r0, #125	@ 0x7d
 8014882:	f000 8190 	beq.w	8014ba6 <uxr_read_framed_msg+0x3c2>
 8014886:	3301      	adds	r3, #1
 8014888:	085a      	lsrs	r2, r3, #1
 801488a:	fba5 1202 	umull	r1, r2, r5, r2
 801488e:	0892      	lsrs	r2, r2, #2
 8014890:	212a      	movs	r1, #42	@ 0x2a
 8014892:	fb01 3312 	mls	r3, r1, r2, r3
 8014896:	287e      	cmp	r0, #126	@ 0x7e
 8014898:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801489c:	f000 821a 	beq.w	8014cd4 <uxr_read_framed_msg+0x4f0>
 80148a0:	2307      	movs	r3, #7
 80148a2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80148a4:	7023      	strb	r3, [r4, #0]
 80148a6:	e7ae      	b.n	8014806 <uxr_read_framed_msg+0x22>
 80148a8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80148aa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80148ae:	459e      	cmp	lr, r3
 80148b0:	d938      	bls.n	8014924 <uxr_read_framed_msg+0x140>
 80148b2:	ee07 8a90 	vmov	s15, r8
 80148b6:	212a      	movs	r1, #42	@ 0x2a
 80148b8:	e020      	b.n	80148fc <uxr_read_framed_msg+0x118>
 80148ba:	f89b c002 	ldrb.w	ip, [fp, #2]
 80148be:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80148c2:	f000 80d4 	beq.w	8014a6e <uxr_read_framed_msg+0x28a>
 80148c6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80148ca:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80148ce:	f000 8219 	beq.w	8014d04 <uxr_read_framed_msg+0x520>
 80148d2:	f806 c003 	strb.w	ip, [r6, r3]
 80148d6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80148da:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80148dc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80148e0:	ea8a 000c 	eor.w	r0, sl, ip
 80148e4:	b2c0      	uxtb	r0, r0
 80148e6:	3301      	adds	r3, #1
 80148e8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80148f2:	4573      	cmp	r3, lr
 80148f4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80148f6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80148f8:	f080 8120 	bcs.w	8014b3c <uxr_read_framed_msg+0x358>
 80148fc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8014900:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014904:	f100 0c01 	add.w	ip, r0, #1
 8014908:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801490c:	fba5 8202 	umull	r8, r2, r5, r2
 8014910:	0892      	lsrs	r2, r2, #2
 8014912:	4582      	cmp	sl, r0
 8014914:	eb04 0b00 	add.w	fp, r4, r0
 8014918:	fb01 c212 	mls	r2, r1, r2, ip
 801491c:	d1cd      	bne.n	80148ba <uxr_read_framed_msg+0xd6>
 801491e:	ee17 8a90 	vmov	r8, s15
 8014922:	459e      	cmp	lr, r3
 8014924:	f040 8111 	bne.w	8014b4a <uxr_read_framed_msg+0x366>
 8014928:	2306      	movs	r3, #6
 801492a:	7023      	strb	r3, [r4, #0]
 801492c:	e76b      	b.n	8014806 <uxr_read_framed_msg+0x22>
 801492e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014932:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014936:	4298      	cmp	r0, r3
 8014938:	f000 80c2 	beq.w	8014ac0 <uxr_read_framed_msg+0x2dc>
 801493c:	18e2      	adds	r2, r4, r3
 801493e:	7891      	ldrb	r1, [r2, #2]
 8014940:	297d      	cmp	r1, #125	@ 0x7d
 8014942:	f000 814c 	beq.w	8014bde <uxr_read_framed_msg+0x3fa>
 8014946:	3301      	adds	r3, #1
 8014948:	085a      	lsrs	r2, r3, #1
 801494a:	fba5 0202 	umull	r0, r2, r5, r2
 801494e:	0892      	lsrs	r2, r2, #2
 8014950:	202a      	movs	r0, #42	@ 0x2a
 8014952:	fb00 3312 	mls	r3, r0, r2, r3
 8014956:	297e      	cmp	r1, #126	@ 0x7e
 8014958:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801495c:	f000 81ca 	beq.w	8014cf4 <uxr_read_framed_msg+0x510>
 8014960:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014962:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014966:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014968:	b29b      	uxth	r3, r3
 801496a:	2000      	movs	r0, #0
 801496c:	428b      	cmp	r3, r1
 801496e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014970:	8660      	strh	r0, [r4, #50]	@ 0x32
 8014972:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014974:	f240 80df 	bls.w	8014b36 <uxr_read_framed_msg+0x352>
 8014978:	7020      	strb	r0, [r4, #0]
 801497a:	b003      	add	sp, #12
 801497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014980:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014984:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014988:	4299      	cmp	r1, r3
 801498a:	f000 80a8 	beq.w	8014ade <uxr_read_framed_msg+0x2fa>
 801498e:	18e2      	adds	r2, r4, r3
 8014990:	7890      	ldrb	r0, [r2, #2]
 8014992:	287d      	cmp	r0, #125	@ 0x7d
 8014994:	f000 8164 	beq.w	8014c60 <uxr_read_framed_msg+0x47c>
 8014998:	3301      	adds	r3, #1
 801499a:	085a      	lsrs	r2, r3, #1
 801499c:	fba5 1202 	umull	r1, r2, r5, r2
 80149a0:	0892      	lsrs	r2, r2, #2
 80149a2:	212a      	movs	r1, #42	@ 0x2a
 80149a4:	fb01 3312 	mls	r3, r1, r2, r3
 80149a8:	287e      	cmp	r0, #126	@ 0x7e
 80149aa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80149ae:	f000 8191 	beq.w	8014cd4 <uxr_read_framed_msg+0x4f0>
 80149b2:	2304      	movs	r3, #4
 80149b4:	8620      	strh	r0, [r4, #48]	@ 0x30
 80149b6:	7023      	strb	r3, [r4, #0]
 80149b8:	e725      	b.n	8014806 <uxr_read_framed_msg+0x22>
 80149ba:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80149be:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80149c2:	4290      	cmp	r0, r2
 80149c4:	f000 80b3 	beq.w	8014b2e <uxr_read_framed_msg+0x34a>
 80149c8:	18a3      	adds	r3, r4, r2
 80149ca:	7899      	ldrb	r1, [r3, #2]
 80149cc:	297d      	cmp	r1, #125	@ 0x7d
 80149ce:	f000 8164 	beq.w	8014c9a <uxr_read_framed_msg+0x4b6>
 80149d2:	3201      	adds	r2, #1
 80149d4:	0850      	lsrs	r0, r2, #1
 80149d6:	fba5 3000 	umull	r3, r0, r5, r0
 80149da:	0880      	lsrs	r0, r0, #2
 80149dc:	232a      	movs	r3, #42	@ 0x2a
 80149de:	fb03 2210 	mls	r2, r3, r0, r2
 80149e2:	297e      	cmp	r1, #126	@ 0x7e
 80149e4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80149e8:	f000 8188 	beq.w	8014cfc <uxr_read_framed_msg+0x518>
 80149ec:	7863      	ldrb	r3, [r4, #1]
 80149ee:	428b      	cmp	r3, r1
 80149f0:	bf0c      	ite	eq
 80149f2:	2303      	moveq	r3, #3
 80149f4:	2300      	movne	r3, #0
 80149f6:	7023      	strb	r3, [r4, #0]
 80149f8:	e705      	b.n	8014806 <uxr_read_framed_msg+0x22>
 80149fa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80149fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014a02:	2200      	movs	r2, #0
 8014a04:	4299      	cmp	r1, r3
 8014a06:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8014a0a:	d06c      	beq.n	8014ae6 <uxr_read_framed_msg+0x302>
 8014a0c:	18e2      	adds	r2, r4, r3
 8014a0e:	7890      	ldrb	r0, [r2, #2]
 8014a10:	287d      	cmp	r0, #125	@ 0x7d
 8014a12:	f000 8101 	beq.w	8014c18 <uxr_read_framed_msg+0x434>
 8014a16:	3301      	adds	r3, #1
 8014a18:	085a      	lsrs	r2, r3, #1
 8014a1a:	fba5 1202 	umull	r1, r2, r5, r2
 8014a1e:	0892      	lsrs	r2, r2, #2
 8014a20:	212a      	movs	r1, #42	@ 0x2a
 8014a22:	fb01 3312 	mls	r3, r1, r2, r3
 8014a26:	287e      	cmp	r0, #126	@ 0x7e
 8014a28:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014a2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014a30:	d059      	beq.n	8014ae6 <uxr_read_framed_msg+0x302>
 8014a32:	2302      	movs	r3, #2
 8014a34:	7023      	strb	r3, [r4, #0]
 8014a36:	e6e6      	b.n	8014806 <uxr_read_framed_msg+0x22>
 8014a38:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014a3c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014a40:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8014a44:	1c51      	adds	r1, r2, #1
 8014a46:	084b      	lsrs	r3, r1, #1
 8014a48:	fba5 c303 	umull	ip, r3, r5, r3
 8014a4c:	089b      	lsrs	r3, r3, #2
 8014a4e:	fb0e 1313 	mls	r3, lr, r3, r1
 8014a52:	4592      	cmp	sl, r2
 8014a54:	eb04 0002 	add.w	r0, r4, r2
 8014a58:	b2da      	uxtb	r2, r3
 8014a5a:	f43f af04 	beq.w	8014866 <uxr_read_framed_msg+0x82>
 8014a5e:	7883      	ldrb	r3, [r0, #2]
 8014a60:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014a64:	2b7e      	cmp	r3, #126	@ 0x7e
 8014a66:	d1ed      	bne.n	8014a44 <uxr_read_framed_msg+0x260>
 8014a68:	2301      	movs	r3, #1
 8014a6a:	7023      	strb	r3, [r4, #0]
 8014a6c:	e6cb      	b.n	8014806 <uxr_read_framed_msg+0x22>
 8014a6e:	f100 0c01 	add.w	ip, r0, #1
 8014a72:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014a76:	fba5 8202 	umull	r8, r2, r5, r2
 8014a7a:	0892      	lsrs	r2, r2, #2
 8014a7c:	fb01 c212 	mls	r2, r1, r2, ip
 8014a80:	eb04 0c02 	add.w	ip, r4, r2
 8014a84:	b2d2      	uxtb	r2, r2
 8014a86:	4592      	cmp	sl, r2
 8014a88:	f100 0002 	add.w	r0, r0, #2
 8014a8c:	f43f af47 	beq.w	801491e <uxr_read_framed_msg+0x13a>
 8014a90:	0842      	lsrs	r2, r0, #1
 8014a92:	f89c a002 	ldrb.w	sl, [ip, #2]
 8014a96:	fba5 8202 	umull	r8, r2, r5, r2
 8014a9a:	0892      	lsrs	r2, r2, #2
 8014a9c:	fb01 0012 	mls	r0, r1, r2, r0
 8014aa0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8014aa4:	f08a 0c20 	eor.w	ip, sl, #32
 8014aa8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014aac:	f47f af11 	bne.w	80148d2 <uxr_read_framed_msg+0xee>
 8014ab0:	459e      	cmp	lr, r3
 8014ab2:	ee17 8a90 	vmov	r8, s15
 8014ab6:	f43f af37 	beq.w	8014928 <uxr_read_framed_msg+0x144>
 8014aba:	2301      	movs	r3, #1
 8014abc:	7023      	strb	r3, [r4, #0]
 8014abe:	e6a2      	b.n	8014806 <uxr_read_framed_msg+0x22>
 8014ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ac2:	9300      	str	r3, [sp, #0]
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	9301      	str	r3, [sp, #4]
 8014ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014aca:	464a      	mov	r2, r9
 8014acc:	4641      	mov	r1, r8
 8014ace:	4620      	mov	r0, r4
 8014ad0:	f7ff fe06 	bl	80146e0 <uxr_framing_read_transport>
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	f43f aec6 	beq.w	8014866 <uxr_read_framed_msg+0x82>
 8014ada:	7823      	ldrb	r3, [r4, #0]
 8014adc:	e693      	b.n	8014806 <uxr_read_framed_msg+0x22>
 8014ade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ae0:	9300      	str	r3, [sp, #0]
 8014ae2:	2302      	movs	r3, #2
 8014ae4:	e7ef      	b.n	8014ac6 <uxr_read_framed_msg+0x2e2>
 8014ae6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	2304      	movs	r3, #4
 8014aec:	9301      	str	r3, [sp, #4]
 8014aee:	464a      	mov	r2, r9
 8014af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014af2:	4641      	mov	r1, r8
 8014af4:	4620      	mov	r0, r4
 8014af6:	f7ff fdf3 	bl	80146e0 <uxr_framing_read_transport>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	d1ed      	bne.n	8014ada <uxr_read_framed_msg+0x2f6>
 8014afe:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014b02:	2b7e      	cmp	r3, #126	@ 0x7e
 8014b04:	d0e9      	beq.n	8014ada <uxr_read_framed_msg+0x2f6>
 8014b06:	e6ae      	b.n	8014866 <uxr_read_framed_msg+0x82>
 8014b08:	30c30c31 	.word	0x30c30c31
 8014b0c:	0801ef58 	.word	0x0801ef58
 8014b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b12:	9300      	str	r3, [sp, #0]
 8014b14:	2305      	movs	r3, #5
 8014b16:	9301      	str	r3, [sp, #4]
 8014b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b1a:	f7ff fde1 	bl	80146e0 <uxr_framing_read_transport>
 8014b1e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014b22:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014b26:	429a      	cmp	r2, r3
 8014b28:	f43f ae9d 	beq.w	8014866 <uxr_read_framed_msg+0x82>
 8014b2c:	e668      	b.n	8014800 <uxr_read_framed_msg+0x1c>
 8014b2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b30:	9300      	str	r3, [sp, #0]
 8014b32:	2303      	movs	r3, #3
 8014b34:	e7c7      	b.n	8014ac6 <uxr_read_framed_msg+0x2e2>
 8014b36:	2305      	movs	r3, #5
 8014b38:	7023      	strb	r3, [r4, #0]
 8014b3a:	e664      	b.n	8014806 <uxr_read_framed_msg+0x22>
 8014b3c:	ee17 8a90 	vmov	r8, s15
 8014b40:	f43f aef2 	beq.w	8014928 <uxr_read_framed_msg+0x144>
 8014b44:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014b48:	d08e      	beq.n	8014a68 <uxr_read_framed_msg+0x284>
 8014b4a:	ebae 0303 	sub.w	r3, lr, r3
 8014b4e:	3302      	adds	r3, #2
 8014b50:	9301      	str	r3, [sp, #4]
 8014b52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b54:	9300      	str	r3, [sp, #0]
 8014b56:	e7b7      	b.n	8014ac8 <uxr_read_framed_msg+0x2e4>
 8014b58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014b5a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014b5e:	7013      	strb	r3, [r2, #0]
 8014b60:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8014b62:	b003      	add	sp, #12
 8014b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b68:	f103 0c01 	add.w	ip, r3, #1
 8014b6c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014b70:	fba5 0202 	umull	r0, r2, r5, r2
 8014b74:	0892      	lsrs	r2, r2, #2
 8014b76:	202a      	movs	r0, #42	@ 0x2a
 8014b78:	fb00 c212 	mls	r2, r0, r2, ip
 8014b7c:	fa5f fc82 	uxtb.w	ip, r2
 8014b80:	4561      	cmp	r1, ip
 8014b82:	d09d      	beq.n	8014ac0 <uxr_read_framed_msg+0x2dc>
 8014b84:	3302      	adds	r3, #2
 8014b86:	4422      	add	r2, r4
 8014b88:	0859      	lsrs	r1, r3, #1
 8014b8a:	7892      	ldrb	r2, [r2, #2]
 8014b8c:	fba5 c101 	umull	ip, r1, r5, r1
 8014b90:	0889      	lsrs	r1, r1, #2
 8014b92:	fb00 3311 	mls	r3, r0, r1, r3
 8014b96:	2a7e      	cmp	r2, #126	@ 0x7e
 8014b98:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014b9c:	f000 80aa 	beq.w	8014cf4 <uxr_read_framed_msg+0x510>
 8014ba0:	f082 0220 	eor.w	r2, r2, #32
 8014ba4:	e654      	b.n	8014850 <uxr_read_framed_msg+0x6c>
 8014ba6:	1c58      	adds	r0, r3, #1
 8014ba8:	0842      	lsrs	r2, r0, #1
 8014baa:	fba5 c202 	umull	ip, r2, r5, r2
 8014bae:	0892      	lsrs	r2, r2, #2
 8014bb0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014bb4:	fb0c 0212 	mls	r2, ip, r2, r0
 8014bb8:	b2d0      	uxtb	r0, r2
 8014bba:	4281      	cmp	r1, r0
 8014bbc:	d08f      	beq.n	8014ade <uxr_read_framed_msg+0x2fa>
 8014bbe:	4422      	add	r2, r4
 8014bc0:	3302      	adds	r3, #2
 8014bc2:	7890      	ldrb	r0, [r2, #2]
 8014bc4:	085a      	lsrs	r2, r3, #1
 8014bc6:	fba5 1202 	umull	r1, r2, r5, r2
 8014bca:	0892      	lsrs	r2, r2, #2
 8014bcc:	fb0c 3312 	mls	r3, ip, r2, r3
 8014bd0:	287e      	cmp	r0, #126	@ 0x7e
 8014bd2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014bd6:	d07d      	beq.n	8014cd4 <uxr_read_framed_msg+0x4f0>
 8014bd8:	f080 0020 	eor.w	r0, r0, #32
 8014bdc:	e660      	b.n	80148a0 <uxr_read_framed_msg+0xbc>
 8014bde:	1c59      	adds	r1, r3, #1
 8014be0:	084a      	lsrs	r2, r1, #1
 8014be2:	fba5 c202 	umull	ip, r2, r5, r2
 8014be6:	0892      	lsrs	r2, r2, #2
 8014be8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014bec:	fb0c 1212 	mls	r2, ip, r2, r1
 8014bf0:	b2d1      	uxtb	r1, r2
 8014bf2:	4288      	cmp	r0, r1
 8014bf4:	f43f af64 	beq.w	8014ac0 <uxr_read_framed_msg+0x2dc>
 8014bf8:	4422      	add	r2, r4
 8014bfa:	3302      	adds	r3, #2
 8014bfc:	7891      	ldrb	r1, [r2, #2]
 8014bfe:	085a      	lsrs	r2, r3, #1
 8014c00:	fba5 0202 	umull	r0, r2, r5, r2
 8014c04:	0892      	lsrs	r2, r2, #2
 8014c06:	fb0c 3312 	mls	r3, ip, r2, r3
 8014c0a:	297e      	cmp	r1, #126	@ 0x7e
 8014c0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014c10:	d070      	beq.n	8014cf4 <uxr_read_framed_msg+0x510>
 8014c12:	f081 0120 	eor.w	r1, r1, #32
 8014c16:	e6a3      	b.n	8014960 <uxr_read_framed_msg+0x17c>
 8014c18:	f103 0c01 	add.w	ip, r3, #1
 8014c1c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014c20:	fba5 0202 	umull	r0, r2, r5, r2
 8014c24:	0892      	lsrs	r2, r2, #2
 8014c26:	202a      	movs	r0, #42	@ 0x2a
 8014c28:	fb00 c212 	mls	r2, r0, r2, ip
 8014c2c:	fa5f fc82 	uxtb.w	ip, r2
 8014c30:	4561      	cmp	r1, ip
 8014c32:	f43f af58 	beq.w	8014ae6 <uxr_read_framed_msg+0x302>
 8014c36:	4422      	add	r2, r4
 8014c38:	3302      	adds	r3, #2
 8014c3a:	7891      	ldrb	r1, [r2, #2]
 8014c3c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014c40:	085a      	lsrs	r2, r3, #1
 8014c42:	fba5 c202 	umull	ip, r2, r5, r2
 8014c46:	0892      	lsrs	r2, r2, #2
 8014c48:	fb00 3312 	mls	r3, r0, r2, r3
 8014c4c:	297e      	cmp	r1, #126	@ 0x7e
 8014c4e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014c52:	f43f af48 	beq.w	8014ae6 <uxr_read_framed_msg+0x302>
 8014c56:	f081 0120 	eor.w	r1, r1, #32
 8014c5a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014c5e:	e6e8      	b.n	8014a32 <uxr_read_framed_msg+0x24e>
 8014c60:	1c58      	adds	r0, r3, #1
 8014c62:	0842      	lsrs	r2, r0, #1
 8014c64:	fba5 c202 	umull	ip, r2, r5, r2
 8014c68:	0892      	lsrs	r2, r2, #2
 8014c6a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014c6e:	fb0c 0212 	mls	r2, ip, r2, r0
 8014c72:	b2d0      	uxtb	r0, r2
 8014c74:	4281      	cmp	r1, r0
 8014c76:	f43f af32 	beq.w	8014ade <uxr_read_framed_msg+0x2fa>
 8014c7a:	4422      	add	r2, r4
 8014c7c:	3302      	adds	r3, #2
 8014c7e:	7890      	ldrb	r0, [r2, #2]
 8014c80:	085a      	lsrs	r2, r3, #1
 8014c82:	fba5 1202 	umull	r1, r2, r5, r2
 8014c86:	0892      	lsrs	r2, r2, #2
 8014c88:	fb0c 3312 	mls	r3, ip, r2, r3
 8014c8c:	287e      	cmp	r0, #126	@ 0x7e
 8014c8e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014c92:	d01f      	beq.n	8014cd4 <uxr_read_framed_msg+0x4f0>
 8014c94:	f080 0020 	eor.w	r0, r0, #32
 8014c98:	e68b      	b.n	80149b2 <uxr_read_framed_msg+0x1ce>
 8014c9a:	1c51      	adds	r1, r2, #1
 8014c9c:	084b      	lsrs	r3, r1, #1
 8014c9e:	fba5 c303 	umull	ip, r3, r5, r3
 8014ca2:	089b      	lsrs	r3, r3, #2
 8014ca4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014ca8:	fb0c 1313 	mls	r3, ip, r3, r1
 8014cac:	b2d9      	uxtb	r1, r3
 8014cae:	4288      	cmp	r0, r1
 8014cb0:	f43f af3d 	beq.w	8014b2e <uxr_read_framed_msg+0x34a>
 8014cb4:	3202      	adds	r2, #2
 8014cb6:	4423      	add	r3, r4
 8014cb8:	0850      	lsrs	r0, r2, #1
 8014cba:	789b      	ldrb	r3, [r3, #2]
 8014cbc:	fba5 1000 	umull	r1, r0, r5, r0
 8014cc0:	0880      	lsrs	r0, r0, #2
 8014cc2:	fb0c 2210 	mls	r2, ip, r0, r2
 8014cc6:	2b7e      	cmp	r3, #126	@ 0x7e
 8014cc8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014ccc:	d016      	beq.n	8014cfc <uxr_read_framed_msg+0x518>
 8014cce:	f083 0120 	eor.w	r1, r3, #32
 8014cd2:	e68b      	b.n	80149ec <uxr_read_framed_msg+0x208>
 8014cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cd6:	9300      	str	r3, [sp, #0]
 8014cd8:	2302      	movs	r3, #2
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	464a      	mov	r2, r9
 8014cde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ce0:	4641      	mov	r1, r8
 8014ce2:	4620      	mov	r0, r4
 8014ce4:	f7ff fcfc 	bl	80146e0 <uxr_framing_read_transport>
 8014ce8:	2800      	cmp	r0, #0
 8014cea:	f47f aef6 	bne.w	8014ada <uxr_read_framed_msg+0x2f6>
 8014cee:	2301      	movs	r3, #1
 8014cf0:	7023      	strb	r3, [r4, #0]
 8014cf2:	e588      	b.n	8014806 <uxr_read_framed_msg+0x22>
 8014cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cf6:	9300      	str	r3, [sp, #0]
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e7ee      	b.n	8014cda <uxr_read_framed_msg+0x4f6>
 8014cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	2303      	movs	r3, #3
 8014d02:	e7ea      	b.n	8014cda <uxr_read_framed_msg+0x4f6>
 8014d04:	ee17 8a90 	vmov	r8, s15
 8014d08:	e6ae      	b.n	8014a68 <uxr_read_framed_msg+0x284>
 8014d0a:	bf00      	nop

08014d0c <uxr_stream_id>:
 8014d0c:	2901      	cmp	r1, #1
 8014d0e:	b082      	sub	sp, #8
 8014d10:	d01d      	beq.n	8014d4e <uxr_stream_id+0x42>
 8014d12:	2902      	cmp	r1, #2
 8014d14:	f04f 0c00 	mov.w	ip, #0
 8014d18:	d01e      	beq.n	8014d58 <uxr_stream_id+0x4c>
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	f36c 0307 	bfi	r3, ip, #0, #8
 8014d20:	f360 230f 	bfi	r3, r0, #8, #8
 8014d24:	f361 4317 	bfi	r3, r1, #16, #8
 8014d28:	f362 631f 	bfi	r3, r2, #24, #8
 8014d2c:	b2da      	uxtb	r2, r3
 8014d2e:	2000      	movs	r0, #0
 8014d30:	f362 0007 	bfi	r0, r2, #0, #8
 8014d34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014d38:	f362 200f 	bfi	r0, r2, #8, #8
 8014d3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014d40:	f362 4017 	bfi	r0, r2, #16, #8
 8014d44:	0e1b      	lsrs	r3, r3, #24
 8014d46:	f363 601f 	bfi	r0, r3, #24, #8
 8014d4a:	b002      	add	sp, #8
 8014d4c:	4770      	bx	lr
 8014d4e:	f100 0c01 	add.w	ip, r0, #1
 8014d52:	fa5f fc8c 	uxtb.w	ip, ip
 8014d56:	e7e0      	b.n	8014d1a <uxr_stream_id+0xe>
 8014d58:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8014d5c:	e7dd      	b.n	8014d1a <uxr_stream_id+0xe>
 8014d5e:	bf00      	nop

08014d60 <uxr_stream_id_from_raw>:
 8014d60:	b082      	sub	sp, #8
 8014d62:	b130      	cbz	r0, 8014d72 <uxr_stream_id_from_raw+0x12>
 8014d64:	0603      	lsls	r3, r0, #24
 8014d66:	d420      	bmi.n	8014daa <uxr_stream_id_from_raw+0x4a>
 8014d68:	1e42      	subs	r2, r0, #1
 8014d6a:	b2d2      	uxtb	r2, r2
 8014d6c:	f04f 0c01 	mov.w	ip, #1
 8014d70:	e001      	b.n	8014d76 <uxr_stream_id_from_raw+0x16>
 8014d72:	4684      	mov	ip, r0
 8014d74:	4602      	mov	r2, r0
 8014d76:	2300      	movs	r3, #0
 8014d78:	f360 0307 	bfi	r3, r0, #0, #8
 8014d7c:	f362 230f 	bfi	r3, r2, #8, #8
 8014d80:	f36c 4317 	bfi	r3, ip, #16, #8
 8014d84:	f361 631f 	bfi	r3, r1, #24, #8
 8014d88:	b2da      	uxtb	r2, r3
 8014d8a:	2000      	movs	r0, #0
 8014d8c:	f362 0007 	bfi	r0, r2, #0, #8
 8014d90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014d94:	f362 200f 	bfi	r0, r2, #8, #8
 8014d98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014d9c:	f362 4017 	bfi	r0, r2, #16, #8
 8014da0:	0e1b      	lsrs	r3, r3, #24
 8014da2:	f363 601f 	bfi	r0, r3, #24, #8
 8014da6:	b002      	add	sp, #8
 8014da8:	4770      	bx	lr
 8014daa:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8014dae:	f04f 0c02 	mov.w	ip, #2
 8014db2:	e7e0      	b.n	8014d76 <uxr_stream_id_from_raw+0x16>

08014db4 <uxr_init_stream_storage>:
 8014db4:	2300      	movs	r3, #0
 8014db6:	7403      	strb	r3, [r0, #16]
 8014db8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8014dbc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8014dc0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop

08014dc8 <uxr_reset_stream_storage>:
 8014dc8:	b570      	push	{r4, r5, r6, lr}
 8014dca:	7c03      	ldrb	r3, [r0, #16]
 8014dcc:	4604      	mov	r4, r0
 8014dce:	b153      	cbz	r3, 8014de6 <uxr_reset_stream_storage+0x1e>
 8014dd0:	4606      	mov	r6, r0
 8014dd2:	2500      	movs	r5, #0
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	f005 fae3 	bl	801a3a0 <uxr_reset_output_best_effort_stream>
 8014dda:	7c23      	ldrb	r3, [r4, #16]
 8014ddc:	3501      	adds	r5, #1
 8014dde:	42ab      	cmp	r3, r5
 8014de0:	f106 0610 	add.w	r6, r6, #16
 8014de4:	d8f6      	bhi.n	8014dd4 <uxr_reset_stream_storage+0xc>
 8014de6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014dea:	b163      	cbz	r3, 8014e06 <uxr_reset_stream_storage+0x3e>
 8014dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014df0:	2500      	movs	r5, #0
 8014df2:	4630      	mov	r0, r6
 8014df4:	f005 f8d6 	bl	8019fa4 <uxr_reset_input_best_effort_stream>
 8014df8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014dfc:	3501      	adds	r5, #1
 8014dfe:	42ab      	cmp	r3, r5
 8014e00:	f106 0602 	add.w	r6, r6, #2
 8014e04:	d8f5      	bhi.n	8014df2 <uxr_reset_stream_storage+0x2a>
 8014e06:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014e0a:	b163      	cbz	r3, 8014e26 <uxr_reset_stream_storage+0x5e>
 8014e0c:	f104 0618 	add.w	r6, r4, #24
 8014e10:	2500      	movs	r5, #0
 8014e12:	4630      	mov	r0, r6
 8014e14:	f005 fb70 	bl	801a4f8 <uxr_reset_output_reliable_stream>
 8014e18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014e1c:	3501      	adds	r5, #1
 8014e1e:	42ab      	cmp	r3, r5
 8014e20:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8014e24:	d8f5      	bhi.n	8014e12 <uxr_reset_stream_storage+0x4a>
 8014e26:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014e2a:	b163      	cbz	r3, 8014e46 <uxr_reset_stream_storage+0x7e>
 8014e2c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8014e30:	2500      	movs	r5, #0
 8014e32:	4630      	mov	r0, r6
 8014e34:	f005 f92a 	bl	801a08c <uxr_reset_input_reliable_stream>
 8014e38:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014e3c:	3501      	adds	r5, #1
 8014e3e:	42ab      	cmp	r3, r5
 8014e40:	f106 0618 	add.w	r6, r6, #24
 8014e44:	d8f5      	bhi.n	8014e32 <uxr_reset_stream_storage+0x6a>
 8014e46:	bd70      	pop	{r4, r5, r6, pc}

08014e48 <uxr_add_output_best_effort_buffer>:
 8014e48:	b510      	push	{r4, lr}
 8014e4a:	7c04      	ldrb	r4, [r0, #16]
 8014e4c:	f104 0c01 	add.w	ip, r4, #1
 8014e50:	b082      	sub	sp, #8
 8014e52:	f880 c010 	strb.w	ip, [r0, #16]
 8014e56:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8014e5a:	f005 fa97 	bl	801a38c <uxr_init_output_best_effort_stream>
 8014e5e:	2201      	movs	r2, #1
 8014e60:	4611      	mov	r1, r2
 8014e62:	4620      	mov	r0, r4
 8014e64:	b002      	add	sp, #8
 8014e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e6a:	f7ff bf4f 	b.w	8014d0c <uxr_stream_id>
 8014e6e:	bf00      	nop

08014e70 <uxr_add_output_reliable_buffer>:
 8014e70:	b510      	push	{r4, lr}
 8014e72:	b084      	sub	sp, #16
 8014e74:	4684      	mov	ip, r0
 8014e76:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014e7a:	9000      	str	r0, [sp, #0]
 8014e7c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8014e80:	2028      	movs	r0, #40	@ 0x28
 8014e82:	fb00 c004 	mla	r0, r0, r4, ip
 8014e86:	f104 0e01 	add.w	lr, r4, #1
 8014e8a:	3018      	adds	r0, #24
 8014e8c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8014e90:	f005 fafa 	bl	801a488 <uxr_init_output_reliable_stream>
 8014e94:	2201      	movs	r2, #1
 8014e96:	2102      	movs	r1, #2
 8014e98:	4620      	mov	r0, r4
 8014e9a:	b004      	add	sp, #16
 8014e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ea0:	f7ff bf34 	b.w	8014d0c <uxr_stream_id>

08014ea4 <uxr_add_input_best_effort_buffer>:
 8014ea4:	b510      	push	{r4, lr}
 8014ea6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8014eaa:	4603      	mov	r3, r0
 8014eac:	1c62      	adds	r2, r4, #1
 8014eae:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014ebc:	f005 f86e 	bl	8019f9c <uxr_init_input_best_effort_stream>
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	2101      	movs	r1, #1
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	b002      	add	sp, #8
 8014ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ecc:	f7ff bf1e 	b.w	8014d0c <uxr_stream_id>

08014ed0 <uxr_add_input_reliable_buffer>:
 8014ed0:	b510      	push	{r4, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	4684      	mov	ip, r0
 8014ed6:	9806      	ldr	r0, [sp, #24]
 8014ed8:	9000      	str	r0, [sp, #0]
 8014eda:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014ede:	2018      	movs	r0, #24
 8014ee0:	fb00 c004 	mla	r0, r0, r4, ip
 8014ee4:	f104 0e01 	add.w	lr, r4, #1
 8014ee8:	3048      	adds	r0, #72	@ 0x48
 8014eea:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8014eee:	f005 f8a1 	bl	801a034 <uxr_init_input_reliable_stream>
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	2102      	movs	r1, #2
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	b004      	add	sp, #16
 8014efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014efe:	f7ff bf05 	b.w	8014d0c <uxr_stream_id>
 8014f02:	bf00      	nop

08014f04 <uxr_get_output_best_effort_stream>:
 8014f04:	7c03      	ldrb	r3, [r0, #16]
 8014f06:	428b      	cmp	r3, r1
 8014f08:	bf8c      	ite	hi
 8014f0a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014f0e:	2000      	movls	r0, #0
 8014f10:	4770      	bx	lr
 8014f12:	bf00      	nop

08014f14 <uxr_get_output_reliable_stream>:
 8014f14:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014f18:	428b      	cmp	r3, r1
 8014f1a:	bf83      	ittte	hi
 8014f1c:	2328      	movhi	r3, #40	@ 0x28
 8014f1e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014f22:	3018      	addhi	r0, #24
 8014f24:	2000      	movls	r0, #0
 8014f26:	4770      	bx	lr

08014f28 <uxr_get_input_best_effort_stream>:
 8014f28:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014f2c:	428b      	cmp	r3, r1
 8014f2e:	bf86      	itte	hi
 8014f30:	3121      	addhi	r1, #33	@ 0x21
 8014f32:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8014f36:	2000      	movls	r0, #0
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop

08014f3c <uxr_get_input_reliable_stream>:
 8014f3c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8014f40:	428b      	cmp	r3, r1
 8014f42:	bf83      	ittte	hi
 8014f44:	2318      	movhi	r3, #24
 8014f46:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014f4a:	3048      	addhi	r0, #72	@ 0x48
 8014f4c:	2000      	movls	r0, #0
 8014f4e:	4770      	bx	lr

08014f50 <uxr_output_streams_confirmed>:
 8014f50:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014f54:	b183      	cbz	r3, 8014f78 <uxr_output_streams_confirmed+0x28>
 8014f56:	b570      	push	{r4, r5, r6, lr}
 8014f58:	4606      	mov	r6, r0
 8014f5a:	f100 0518 	add.w	r5, r0, #24
 8014f5e:	2400      	movs	r4, #0
 8014f60:	e001      	b.n	8014f66 <uxr_output_streams_confirmed+0x16>
 8014f62:	3528      	adds	r5, #40	@ 0x28
 8014f64:	b138      	cbz	r0, 8014f76 <uxr_output_streams_confirmed+0x26>
 8014f66:	4628      	mov	r0, r5
 8014f68:	f005 fd36 	bl	801a9d8 <uxr_is_output_up_to_date>
 8014f6c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8014f70:	3401      	adds	r4, #1
 8014f72:	42a3      	cmp	r3, r4
 8014f74:	d8f5      	bhi.n	8014f62 <uxr_output_streams_confirmed+0x12>
 8014f76:	bd70      	pop	{r4, r5, r6, pc}
 8014f78:	2001      	movs	r0, #1
 8014f7a:	4770      	bx	lr

08014f7c <uxr_buffer_submessage_header>:
 8014f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f7e:	4604      	mov	r4, r0
 8014f80:	460e      	mov	r6, r1
 8014f82:	2104      	movs	r1, #4
 8014f84:	4615      	mov	r5, r2
 8014f86:	461f      	mov	r7, r3
 8014f88:	f7f8 f9f0 	bl	800d36c <ucdr_align_to>
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	ea47 0203 	orr.w	r2, r7, r3
 8014f92:	4631      	mov	r1, r6
 8014f94:	7523      	strb	r3, [r4, #20]
 8014f96:	4620      	mov	r0, r4
 8014f98:	462b      	mov	r3, r5
 8014f9a:	f000 fa27 	bl	80153ec <uxr_serialize_submessage_header>
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	f7f8 f9fa 	bl	800d398 <ucdr_buffer_remaining>
 8014fa4:	42a8      	cmp	r0, r5
 8014fa6:	bf34      	ite	cc
 8014fa8:	2000      	movcc	r0, #0
 8014faa:	2001      	movcs	r0, #1
 8014fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fae:	bf00      	nop

08014fb0 <uxr_read_submessage_header>:
 8014fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	460d      	mov	r5, r1
 8014fb8:	2104      	movs	r1, #4
 8014fba:	4616      	mov	r6, r2
 8014fbc:	4698      	mov	r8, r3
 8014fbe:	f7f8 f9d5 	bl	800d36c <ucdr_align_to>
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	f7f8 f9e8 	bl	800d398 <ucdr_buffer_remaining>
 8014fc8:	2803      	cmp	r0, #3
 8014fca:	bf8c      	ite	hi
 8014fcc:	2701      	movhi	r7, #1
 8014fce:	2700      	movls	r7, #0
 8014fd0:	d802      	bhi.n	8014fd8 <uxr_read_submessage_header+0x28>
 8014fd2:	4638      	mov	r0, r7
 8014fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd8:	4633      	mov	r3, r6
 8014fda:	4642      	mov	r2, r8
 8014fdc:	4620      	mov	r0, r4
 8014fde:	4629      	mov	r1, r5
 8014fe0:	f000 fa18 	bl	8015414 <uxr_deserialize_submessage_header>
 8014fe4:	f898 3000 	ldrb.w	r3, [r8]
 8014fe8:	f003 0201 	and.w	r2, r3, #1
 8014fec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8014ff0:	f888 3000 	strb.w	r3, [r8]
 8014ff4:	7522      	strb	r2, [r4, #20]
 8014ff6:	4638      	mov	r0, r7
 8014ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ffc <uxr_submessage_padding>:
 8014ffc:	f010 0003 	ands.w	r0, r0, #3
 8015000:	bf18      	it	ne
 8015002:	f1c0 0004 	rsbne	r0, r0, #4
 8015006:	4770      	bx	lr

08015008 <uxr_millis>:
 8015008:	b510      	push	{r4, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	4669      	mov	r1, sp
 801500e:	2001      	movs	r0, #1
 8015010:	f7ee f9e6 	bl	80033e0 <clock_gettime>
 8015014:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8015018:	4906      	ldr	r1, [pc, #24]	@ (8015034 <uxr_millis+0x2c>)
 801501a:	fba0 0301 	umull	r0, r3, r0, r1
 801501e:	1900      	adds	r0, r0, r4
 8015020:	fb01 3102 	mla	r1, r1, r2, r3
 8015024:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015028:	4a03      	ldr	r2, [pc, #12]	@ (8015038 <uxr_millis+0x30>)
 801502a:	2300      	movs	r3, #0
 801502c:	f7eb fe1c 	bl	8000c68 <__aeabi_ldivmod>
 8015030:	b004      	add	sp, #16
 8015032:	bd10      	pop	{r4, pc}
 8015034:	3b9aca00 	.word	0x3b9aca00
 8015038:	000f4240 	.word	0x000f4240

0801503c <uxr_nanos>:
 801503c:	b510      	push	{r4, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	4669      	mov	r1, sp
 8015042:	2001      	movs	r0, #1
 8015044:	f7ee f9cc 	bl	80033e0 <clock_gettime>
 8015048:	4a06      	ldr	r2, [pc, #24]	@ (8015064 <uxr_nanos+0x28>)
 801504a:	9800      	ldr	r0, [sp, #0]
 801504c:	9902      	ldr	r1, [sp, #8]
 801504e:	9c01      	ldr	r4, [sp, #4]
 8015050:	fba0 0302 	umull	r0, r3, r0, r2
 8015054:	1840      	adds	r0, r0, r1
 8015056:	fb02 3304 	mla	r3, r2, r4, r3
 801505a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801505e:	b004      	add	sp, #16
 8015060:	bd10      	pop	{r4, pc}
 8015062:	bf00      	nop
 8015064:	3b9aca00 	.word	0x3b9aca00

08015068 <on_full_output_buffer_fragmented>:
 8015068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801506c:	460c      	mov	r4, r1
 801506e:	b08a      	sub	sp, #40	@ 0x28
 8015070:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8015074:	4606      	mov	r6, r0
 8015076:	f104 0008 	add.w	r0, r4, #8
 801507a:	f7ff ff4b 	bl	8014f14 <uxr_get_output_reliable_stream>
 801507e:	4605      	mov	r5, r0
 8015080:	f005 fcb4 	bl	801a9ec <get_available_free_slots>
 8015084:	b968      	cbnz	r0, 80150a2 <on_full_output_buffer_fragmented+0x3a>
 8015086:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801508a:	4620      	mov	r0, r4
 801508c:	4798      	blx	r3
 801508e:	b918      	cbnz	r0, 8015098 <on_full_output_buffer_fragmented+0x30>
 8015090:	2001      	movs	r0, #1
 8015092:	b00a      	add	sp, #40	@ 0x28
 8015094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015098:	4628      	mov	r0, r5
 801509a:	f005 fca7 	bl	801a9ec <get_available_free_slots>
 801509e:	2800      	cmp	r0, #0
 80150a0:	d0f6      	beq.n	8015090 <on_full_output_buffer_fragmented+0x28>
 80150a2:	8929      	ldrh	r1, [r5, #8]
 80150a4:	89eb      	ldrh	r3, [r5, #14]
 80150a6:	7b28      	ldrb	r0, [r5, #12]
 80150a8:	686a      	ldr	r2, [r5, #4]
 80150aa:	fbb2 f8f1 	udiv	r8, r2, r1
 80150ae:	fbb3 f2f1 	udiv	r2, r3, r1
 80150b2:	fb01 3112 	mls	r1, r1, r2, r3
 80150b6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80150ba:	b289      	uxth	r1, r1
 80150bc:	fb08 f101 	mul.w	r1, r8, r1
 80150c0:	30fc      	adds	r0, #252	@ 0xfc
 80150c2:	f1a8 0804 	sub.w	r8, r8, #4
 80150c6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80150ca:	4440      	add	r0, r8
 80150cc:	b287      	uxth	r7, r0
 80150ce:	1bdb      	subs	r3, r3, r7
 80150d0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80150d4:	682b      	ldr	r3, [r5, #0]
 80150d6:	3104      	adds	r1, #4
 80150d8:	4419      	add	r1, r3
 80150da:	4642      	mov	r2, r8
 80150dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	a802      	add	r0, sp, #8
 80150e4:	2300      	movs	r3, #0
 80150e6:	f7f8 f915 	bl	800d314 <ucdr_init_buffer_origin_offset>
 80150ea:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80150ee:	f102 0308 	add.w	r3, r2, #8
 80150f2:	4543      	cmp	r3, r8
 80150f4:	d928      	bls.n	8015148 <on_full_output_buffer_fragmented+0xe0>
 80150f6:	463a      	mov	r2, r7
 80150f8:	2300      	movs	r3, #0
 80150fa:	210d      	movs	r1, #13
 80150fc:	a802      	add	r0, sp, #8
 80150fe:	f7ff ff3d 	bl	8014f7c <uxr_buffer_submessage_header>
 8015102:	8929      	ldrh	r1, [r5, #8]
 8015104:	89eb      	ldrh	r3, [r5, #14]
 8015106:	fbb3 f2f1 	udiv	r2, r3, r1
 801510a:	fb01 3312 	mls	r3, r1, r2, r3
 801510e:	b29b      	uxth	r3, r3
 8015110:	686a      	ldr	r2, [r5, #4]
 8015112:	fbb2 f2f1 	udiv	r2, r2, r1
 8015116:	fb02 f303 	mul.w	r3, r2, r3
 801511a:	682a      	ldr	r2, [r5, #0]
 801511c:	f842 8003 	str.w	r8, [r2, r3]
 8015120:	89e8      	ldrh	r0, [r5, #14]
 8015122:	2101      	movs	r1, #1
 8015124:	f005 fc82 	bl	801aa2c <uxr_seq_num_add>
 8015128:	9904      	ldr	r1, [sp, #16]
 801512a:	9a03      	ldr	r2, [sp, #12]
 801512c:	81e8      	strh	r0, [r5, #14]
 801512e:	1a52      	subs	r2, r2, r1
 8015130:	4630      	mov	r0, r6
 8015132:	f7f8 f901 	bl	800d338 <ucdr_init_buffer>
 8015136:	4630      	mov	r0, r6
 8015138:	490f      	ldr	r1, [pc, #60]	@ (8015178 <on_full_output_buffer_fragmented+0x110>)
 801513a:	4622      	mov	r2, r4
 801513c:	f7f8 f8d0 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 8015140:	2000      	movs	r0, #0
 8015142:	b00a      	add	sp, #40	@ 0x28
 8015144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015148:	b292      	uxth	r2, r2
 801514a:	2302      	movs	r3, #2
 801514c:	210d      	movs	r1, #13
 801514e:	a802      	add	r0, sp, #8
 8015150:	f7ff ff14 	bl	8014f7c <uxr_buffer_submessage_header>
 8015154:	8928      	ldrh	r0, [r5, #8]
 8015156:	89eb      	ldrh	r3, [r5, #14]
 8015158:	fbb3 f1f0 	udiv	r1, r3, r0
 801515c:	fb00 3311 	mls	r3, r0, r1, r3
 8015160:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015164:	6869      	ldr	r1, [r5, #4]
 8015166:	fbb1 f1f0 	udiv	r1, r1, r0
 801516a:	b29b      	uxth	r3, r3
 801516c:	fb01 f303 	mul.w	r3, r1, r3
 8015170:	6829      	ldr	r1, [r5, #0]
 8015172:	3208      	adds	r2, #8
 8015174:	50ca      	str	r2, [r1, r3]
 8015176:	e7d3      	b.n	8015120 <on_full_output_buffer_fragmented+0xb8>
 8015178:	08015069 	.word	0x08015069

0801517c <uxr_prepare_output_stream>:
 801517c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801517e:	b087      	sub	sp, #28
 8015180:	2707      	movs	r7, #7
 8015182:	9202      	str	r2, [sp, #8]
 8015184:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015186:	9103      	str	r1, [sp, #12]
 8015188:	2500      	movs	r5, #0
 801518a:	3204      	adds	r2, #4
 801518c:	e9cd 7500 	strd	r7, r5, [sp]
 8015190:	461c      	mov	r4, r3
 8015192:	4606      	mov	r6, r0
 8015194:	f7fe ffc2 	bl	801411c <uxr_prepare_stream_to_write_submessage>
 8015198:	f080 0201 	eor.w	r2, r0, #1
 801519c:	b2d2      	uxtb	r2, r2
 801519e:	75a2      	strb	r2, [r4, #22]
 80151a0:	b112      	cbz	r2, 80151a8 <uxr_prepare_output_stream+0x2c>
 80151a2:	4628      	mov	r0, r5
 80151a4:	b007      	add	sp, #28
 80151a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151a8:	aa05      	add	r2, sp, #20
 80151aa:	9902      	ldr	r1, [sp, #8]
 80151ac:	4630      	mov	r0, r6
 80151ae:	f7ff f8eb 	bl	8014388 <uxr_init_base_object_request>
 80151b2:	a905      	add	r1, sp, #20
 80151b4:	4605      	mov	r5, r0
 80151b6:	4620      	mov	r0, r4
 80151b8:	f001 f8f4 	bl	80163a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80151bc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80151c0:	69a6      	ldr	r6, [r4, #24]
 80151c2:	69e7      	ldr	r7, [r4, #28]
 80151c4:	1a52      	subs	r2, r2, r1
 80151c6:	4620      	mov	r0, r4
 80151c8:	f7f8 f8b6 	bl	800d338 <ucdr_init_buffer>
 80151cc:	4620      	mov	r0, r4
 80151ce:	463a      	mov	r2, r7
 80151d0:	4631      	mov	r1, r6
 80151d2:	f7f8 f885 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 80151d6:	4628      	mov	r0, r5
 80151d8:	b007      	add	sp, #28
 80151da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151dc <uxr_prepare_output_stream_fragmented>:
 80151dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e0:	b091      	sub	sp, #68	@ 0x44
 80151e2:	4605      	mov	r5, r0
 80151e4:	9105      	str	r1, [sp, #20]
 80151e6:	3008      	adds	r0, #8
 80151e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80151ec:	461e      	mov	r6, r3
 80151ee:	9204      	str	r2, [sp, #16]
 80151f0:	f7ff fe90 	bl	8014f14 <uxr_get_output_reliable_stream>
 80151f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	f000 8091 	beq.w	8015320 <uxr_prepare_output_stream_fragmented+0x144>
 80151fe:	4604      	mov	r4, r0
 8015200:	2800      	cmp	r0, #0
 8015202:	f000 808d 	beq.w	8015320 <uxr_prepare_output_stream_fragmented+0x144>
 8015206:	f005 fbf1 	bl	801a9ec <get_available_free_slots>
 801520a:	2800      	cmp	r0, #0
 801520c:	f000 8083 	beq.w	8015316 <uxr_prepare_output_stream_fragmented+0x13a>
 8015210:	8922      	ldrh	r2, [r4, #8]
 8015212:	89e7      	ldrh	r7, [r4, #14]
 8015214:	fbb7 f9f2 	udiv	r9, r7, r2
 8015218:	fb02 7919 	mls	r9, r2, r9, r7
 801521c:	fa1f f989 	uxth.w	r9, r9
 8015220:	6863      	ldr	r3, [r4, #4]
 8015222:	fbb3 f2f2 	udiv	r2, r3, r2
 8015226:	6823      	ldr	r3, [r4, #0]
 8015228:	9203      	str	r2, [sp, #12]
 801522a:	fb02 f909 	mul.w	r9, r2, r9
 801522e:	f109 0904 	add.w	r9, r9, #4
 8015232:	4499      	add	r9, r3
 8015234:	7b23      	ldrb	r3, [r4, #12]
 8015236:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801523a:	4543      	cmp	r3, r8
 801523c:	f1a2 0b04 	sub.w	fp, r2, #4
 8015240:	d37a      	bcc.n	8015338 <uxr_prepare_output_stream_fragmented+0x15c>
 8015242:	f1ab 0a04 	sub.w	sl, fp, #4
 8015246:	ebaa 0a03 	sub.w	sl, sl, r3
 801524a:	465a      	mov	r2, fp
 801524c:	2300      	movs	r3, #0
 801524e:	4649      	mov	r1, r9
 8015250:	a808      	add	r0, sp, #32
 8015252:	f8cd 8000 	str.w	r8, [sp]
 8015256:	f7f8 f85d 	bl	800d314 <ucdr_init_buffer_origin_offset>
 801525a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801525c:	fa1f fa8a 	uxth.w	sl, sl
 8015260:	4652      	mov	r2, sl
 8015262:	f103 0a08 	add.w	sl, r3, #8
 8015266:	45da      	cmp	sl, fp
 8015268:	bf34      	ite	cc
 801526a:	2302      	movcc	r3, #2
 801526c:	2300      	movcs	r3, #0
 801526e:	210d      	movs	r1, #13
 8015270:	a808      	add	r0, sp, #32
 8015272:	f7ff fe83 	bl	8014f7c <uxr_buffer_submessage_header>
 8015276:	8921      	ldrh	r1, [r4, #8]
 8015278:	fbb7 f2f1 	udiv	r2, r7, r1
 801527c:	fb01 7212 	mls	r2, r1, r2, r7
 8015280:	b292      	uxth	r2, r2
 8015282:	6863      	ldr	r3, [r4, #4]
 8015284:	fbb3 f3f1 	udiv	r3, r3, r1
 8015288:	fb02 f303 	mul.w	r3, r2, r3
 801528c:	6822      	ldr	r2, [r4, #0]
 801528e:	4638      	mov	r0, r7
 8015290:	f842 b003 	str.w	fp, [r2, r3]
 8015294:	2101      	movs	r1, #1
 8015296:	f005 fbc9 	bl	801aa2c <uxr_seq_num_add>
 801529a:	9b03      	ldr	r3, [sp, #12]
 801529c:	f108 0104 	add.w	r1, r8, #4
 80152a0:	f1a3 0208 	sub.w	r2, r3, #8
 80152a4:	eba2 0208 	sub.w	r2, r2, r8
 80152a8:	4449      	add	r1, r9
 80152aa:	4607      	mov	r7, r0
 80152ac:	4630      	mov	r0, r6
 80152ae:	f7f8 f843 	bl	800d338 <ucdr_init_buffer>
 80152b2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80152b4:	81e7      	strh	r7, [r4, #14]
 80152b6:	1d1a      	adds	r2, r3, #4
 80152b8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80152bc:	bf28      	it	cs
 80152be:	2200      	movcs	r2, #0
 80152c0:	2300      	movs	r3, #0
 80152c2:	b292      	uxth	r2, r2
 80152c4:	2107      	movs	r1, #7
 80152c6:	4630      	mov	r0, r6
 80152c8:	f7ff fe58 	bl	8014f7c <uxr_buffer_submessage_header>
 80152cc:	9904      	ldr	r1, [sp, #16]
 80152ce:	aa07      	add	r2, sp, #28
 80152d0:	4628      	mov	r0, r5
 80152d2:	f7ff f859 	bl	8014388 <uxr_init_base_object_request>
 80152d6:	4604      	mov	r4, r0
 80152d8:	b318      	cbz	r0, 8015322 <uxr_prepare_output_stream_fragmented+0x146>
 80152da:	a907      	add	r1, sp, #28
 80152dc:	4630      	mov	r0, r6
 80152de:	f001 f861 	bl	80163a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80152e2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80152e6:	4630      	mov	r0, r6
 80152e8:	1a52      	subs	r2, r2, r1
 80152ea:	f7f8 f825 	bl	800d338 <ucdr_init_buffer>
 80152ee:	9b05      	ldr	r3, [sp, #20]
 80152f0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80152f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80152f6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80152fa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80152fc:	491b      	ldr	r1, [pc, #108]	@ (801536c <uxr_prepare_output_stream_fragmented+0x190>)
 80152fe:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8015302:	4630      	mov	r0, r6
 8015304:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015308:	462a      	mov	r2, r5
 801530a:	f7f7 ffe9 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 801530e:	4620      	mov	r0, r4
 8015310:	b011      	add	sp, #68	@ 0x44
 8015312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015316:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8015318:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801531a:	4628      	mov	r0, r5
 801531c:	4798      	blx	r3
 801531e:	b920      	cbnz	r0, 801532a <uxr_prepare_output_stream_fragmented+0x14e>
 8015320:	2400      	movs	r4, #0
 8015322:	4620      	mov	r0, r4
 8015324:	b011      	add	sp, #68	@ 0x44
 8015326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532a:	4620      	mov	r0, r4
 801532c:	f005 fb5e 	bl	801a9ec <get_available_free_slots>
 8015330:	2800      	cmp	r0, #0
 8015332:	f47f af6d 	bne.w	8015210 <uxr_prepare_output_stream_fragmented+0x34>
 8015336:	e7f3      	b.n	8015320 <uxr_prepare_output_stream_fragmented+0x144>
 8015338:	4638      	mov	r0, r7
 801533a:	2101      	movs	r1, #1
 801533c:	f005 fb76 	bl	801aa2c <uxr_seq_num_add>
 8015340:	8921      	ldrh	r1, [r4, #8]
 8015342:	fbb0 f2f1 	udiv	r2, r0, r1
 8015346:	fb01 0912 	mls	r9, r1, r2, r0
 801534a:	fa1f f289 	uxth.w	r2, r9
 801534e:	6863      	ldr	r3, [r4, #4]
 8015350:	fbb3 f9f1 	udiv	r9, r3, r1
 8015354:	6823      	ldr	r3, [r4, #0]
 8015356:	fb02 f909 	mul.w	r9, r2, r9
 801535a:	f109 0904 	add.w	r9, r9, #4
 801535e:	4499      	add	r9, r3
 8015360:	4607      	mov	r7, r0
 8015362:	7b23      	ldrb	r3, [r4, #12]
 8015364:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015368:	e76b      	b.n	8015242 <uxr_prepare_output_stream_fragmented+0x66>
 801536a:	bf00      	nop
 801536c:	08015069 	.word	0x08015069

08015370 <uxr_serialize_message_header>:
 8015370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015372:	b083      	sub	sp, #12
 8015374:	4616      	mov	r6, r2
 8015376:	4604      	mov	r4, r0
 8015378:	9301      	str	r3, [sp, #4]
 801537a:	460d      	mov	r5, r1
 801537c:	9f08      	ldr	r7, [sp, #32]
 801537e:	f7f6 fcf9 	bl	800bd74 <ucdr_serialize_uint8_t>
 8015382:	4631      	mov	r1, r6
 8015384:	4620      	mov	r0, r4
 8015386:	f7f6 fcf5 	bl	800bd74 <ucdr_serialize_uint8_t>
 801538a:	9a01      	ldr	r2, [sp, #4]
 801538c:	2101      	movs	r1, #1
 801538e:	4620      	mov	r0, r4
 8015390:	f7f6 fd9c 	bl	800becc <ucdr_serialize_endian_uint16_t>
 8015394:	062b      	lsls	r3, r5, #24
 8015396:	d501      	bpl.n	801539c <uxr_serialize_message_header+0x2c>
 8015398:	b003      	add	sp, #12
 801539a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801539c:	2204      	movs	r2, #4
 801539e:	4639      	mov	r1, r7
 80153a0:	4620      	mov	r0, r4
 80153a2:	b003      	add	sp, #12
 80153a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80153a8:	f7fd b8c0 	b.w	801252c <ucdr_serialize_array_uint8_t>

080153ac <uxr_deserialize_message_header>:
 80153ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153ae:	b083      	sub	sp, #12
 80153b0:	4616      	mov	r6, r2
 80153b2:	4604      	mov	r4, r0
 80153b4:	9301      	str	r3, [sp, #4]
 80153b6:	460d      	mov	r5, r1
 80153b8:	9f08      	ldr	r7, [sp, #32]
 80153ba:	f7f6 fcf1 	bl	800bda0 <ucdr_deserialize_uint8_t>
 80153be:	4631      	mov	r1, r6
 80153c0:	4620      	mov	r0, r4
 80153c2:	f7f6 fced 	bl	800bda0 <ucdr_deserialize_uint8_t>
 80153c6:	9a01      	ldr	r2, [sp, #4]
 80153c8:	2101      	movs	r1, #1
 80153ca:	4620      	mov	r0, r4
 80153cc:	f7f6 fe72 	bl	800c0b4 <ucdr_deserialize_endian_uint16_t>
 80153d0:	f995 3000 	ldrsb.w	r3, [r5]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	da01      	bge.n	80153dc <uxr_deserialize_message_header+0x30>
 80153d8:	b003      	add	sp, #12
 80153da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153dc:	2204      	movs	r2, #4
 80153de:	4639      	mov	r1, r7
 80153e0:	4620      	mov	r0, r4
 80153e2:	b003      	add	sp, #12
 80153e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80153e8:	f7fd b904 	b.w	80125f4 <ucdr_deserialize_array_uint8_t>

080153ec <uxr_serialize_submessage_header>:
 80153ec:	b530      	push	{r4, r5, lr}
 80153ee:	b083      	sub	sp, #12
 80153f0:	4615      	mov	r5, r2
 80153f2:	4604      	mov	r4, r0
 80153f4:	9301      	str	r3, [sp, #4]
 80153f6:	f7f6 fcbd 	bl	800bd74 <ucdr_serialize_uint8_t>
 80153fa:	4629      	mov	r1, r5
 80153fc:	4620      	mov	r0, r4
 80153fe:	f7f6 fcb9 	bl	800bd74 <ucdr_serialize_uint8_t>
 8015402:	9a01      	ldr	r2, [sp, #4]
 8015404:	2101      	movs	r1, #1
 8015406:	4620      	mov	r0, r4
 8015408:	b003      	add	sp, #12
 801540a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801540e:	f7f6 bd5d 	b.w	800becc <ucdr_serialize_endian_uint16_t>
 8015412:	bf00      	nop

08015414 <uxr_deserialize_submessage_header>:
 8015414:	b530      	push	{r4, r5, lr}
 8015416:	b083      	sub	sp, #12
 8015418:	4615      	mov	r5, r2
 801541a:	4604      	mov	r4, r0
 801541c:	9301      	str	r3, [sp, #4]
 801541e:	f7f6 fcbf 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8015422:	4629      	mov	r1, r5
 8015424:	4620      	mov	r0, r4
 8015426:	f7f6 fcbb 	bl	800bda0 <ucdr_deserialize_uint8_t>
 801542a:	9a01      	ldr	r2, [sp, #4]
 801542c:	2101      	movs	r1, #1
 801542e:	4620      	mov	r0, r4
 8015430:	b003      	add	sp, #12
 8015432:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015436:	f7f6 be3d 	b.w	800c0b4 <ucdr_deserialize_endian_uint16_t>
 801543a:	bf00      	nop

0801543c <uxr_serialize_CLIENT_Representation>:
 801543c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015440:	2204      	movs	r2, #4
 8015442:	460e      	mov	r6, r1
 8015444:	4605      	mov	r5, r0
 8015446:	f7fd f871 	bl	801252c <ucdr_serialize_array_uint8_t>
 801544a:	2202      	movs	r2, #2
 801544c:	4607      	mov	r7, r0
 801544e:	1d31      	adds	r1, r6, #4
 8015450:	4628      	mov	r0, r5
 8015452:	f7fd f86b 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015456:	4038      	ands	r0, r7
 8015458:	2202      	movs	r2, #2
 801545a:	1db1      	adds	r1, r6, #6
 801545c:	b2c7      	uxtb	r7, r0
 801545e:	4628      	mov	r0, r5
 8015460:	f7fd f864 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015464:	2204      	movs	r2, #4
 8015466:	4007      	ands	r7, r0
 8015468:	f106 0108 	add.w	r1, r6, #8
 801546c:	4628      	mov	r0, r5
 801546e:	f7fd f85d 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015472:	7b31      	ldrb	r1, [r6, #12]
 8015474:	4007      	ands	r7, r0
 8015476:	4628      	mov	r0, r5
 8015478:	f7f6 fc7c 	bl	800bd74 <ucdr_serialize_uint8_t>
 801547c:	7b71      	ldrb	r1, [r6, #13]
 801547e:	4007      	ands	r7, r0
 8015480:	4628      	mov	r0, r5
 8015482:	f7f6 fc49 	bl	800bd18 <ucdr_serialize_bool>
 8015486:	7b73      	ldrb	r3, [r6, #13]
 8015488:	ea07 0800 	and.w	r8, r7, r0
 801548c:	b93b      	cbnz	r3, 801549e <uxr_serialize_CLIENT_Representation+0x62>
 801548e:	8bb1      	ldrh	r1, [r6, #28]
 8015490:	4628      	mov	r0, r5
 8015492:	f7f6 fc9b 	bl	800bdcc <ucdr_serialize_uint16_t>
 8015496:	ea08 0000 	and.w	r0, r8, r0
 801549a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801549e:	6931      	ldr	r1, [r6, #16]
 80154a0:	4628      	mov	r0, r5
 80154a2:	f7f6 fe7d 	bl	800c1a0 <ucdr_serialize_uint32_t>
 80154a6:	6933      	ldr	r3, [r6, #16]
 80154a8:	b1e3      	cbz	r3, 80154e4 <uxr_serialize_CLIENT_Representation+0xa8>
 80154aa:	b1c0      	cbz	r0, 80154de <uxr_serialize_CLIENT_Representation+0xa2>
 80154ac:	4637      	mov	r7, r6
 80154ae:	f04f 0900 	mov.w	r9, #0
 80154b2:	e001      	b.n	80154b8 <uxr_serialize_CLIENT_Representation+0x7c>
 80154b4:	3708      	adds	r7, #8
 80154b6:	b194      	cbz	r4, 80154de <uxr_serialize_CLIENT_Representation+0xa2>
 80154b8:	6979      	ldr	r1, [r7, #20]
 80154ba:	4628      	mov	r0, r5
 80154bc:	f004 fd56 	bl	8019f6c <ucdr_serialize_string>
 80154c0:	69b9      	ldr	r1, [r7, #24]
 80154c2:	4604      	mov	r4, r0
 80154c4:	4628      	mov	r0, r5
 80154c6:	f004 fd51 	bl	8019f6c <ucdr_serialize_string>
 80154ca:	6933      	ldr	r3, [r6, #16]
 80154cc:	f109 0901 	add.w	r9, r9, #1
 80154d0:	4004      	ands	r4, r0
 80154d2:	4599      	cmp	r9, r3
 80154d4:	b2e4      	uxtb	r4, r4
 80154d6:	d3ed      	bcc.n	80154b4 <uxr_serialize_CLIENT_Representation+0x78>
 80154d8:	ea08 0804 	and.w	r8, r8, r4
 80154dc:	e7d7      	b.n	801548e <uxr_serialize_CLIENT_Representation+0x52>
 80154de:	f04f 0800 	mov.w	r8, #0
 80154e2:	e7d4      	b.n	801548e <uxr_serialize_CLIENT_Representation+0x52>
 80154e4:	ea08 0800 	and.w	r8, r8, r0
 80154e8:	e7d1      	b.n	801548e <uxr_serialize_CLIENT_Representation+0x52>
 80154ea:	bf00      	nop

080154ec <uxr_deserialize_CLIENT_Representation>:
 80154ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154f0:	2204      	movs	r2, #4
 80154f2:	460c      	mov	r4, r1
 80154f4:	4605      	mov	r5, r0
 80154f6:	f7fd f87d 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 80154fa:	2202      	movs	r2, #2
 80154fc:	4607      	mov	r7, r0
 80154fe:	1d21      	adds	r1, r4, #4
 8015500:	4628      	mov	r0, r5
 8015502:	f7fd f877 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015506:	4038      	ands	r0, r7
 8015508:	2202      	movs	r2, #2
 801550a:	1da1      	adds	r1, r4, #6
 801550c:	b2c6      	uxtb	r6, r0
 801550e:	4628      	mov	r0, r5
 8015510:	f7fd f870 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015514:	2204      	movs	r2, #4
 8015516:	4006      	ands	r6, r0
 8015518:	f104 0108 	add.w	r1, r4, #8
 801551c:	4628      	mov	r0, r5
 801551e:	f7fd f869 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015522:	f104 010c 	add.w	r1, r4, #12
 8015526:	4006      	ands	r6, r0
 8015528:	4628      	mov	r0, r5
 801552a:	f7f6 fc39 	bl	800bda0 <ucdr_deserialize_uint8_t>
 801552e:	f104 010d 	add.w	r1, r4, #13
 8015532:	ea06 0700 	and.w	r7, r6, r0
 8015536:	4628      	mov	r0, r5
 8015538:	f7f6 fc04 	bl	800bd44 <ucdr_deserialize_bool>
 801553c:	7b63      	ldrb	r3, [r4, #13]
 801553e:	4007      	ands	r7, r0
 8015540:	b93b      	cbnz	r3, 8015552 <uxr_deserialize_CLIENT_Representation+0x66>
 8015542:	f104 011c 	add.w	r1, r4, #28
 8015546:	4628      	mov	r0, r5
 8015548:	f7f6 fd40 	bl	800bfcc <ucdr_deserialize_uint16_t>
 801554c:	4038      	ands	r0, r7
 801554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015552:	f104 0110 	add.w	r1, r4, #16
 8015556:	4628      	mov	r0, r5
 8015558:	f7f6 ff52 	bl	800c400 <ucdr_deserialize_uint32_t>
 801555c:	6923      	ldr	r3, [r4, #16]
 801555e:	2b01      	cmp	r3, #1
 8015560:	d903      	bls.n	801556a <uxr_deserialize_CLIENT_Representation+0x7e>
 8015562:	2301      	movs	r3, #1
 8015564:	75ab      	strb	r3, [r5, #22]
 8015566:	2700      	movs	r7, #0
 8015568:	e7eb      	b.n	8015542 <uxr_deserialize_CLIENT_Representation+0x56>
 801556a:	b30b      	cbz	r3, 80155b0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801556c:	2800      	cmp	r0, #0
 801556e:	d0fa      	beq.n	8015566 <uxr_deserialize_CLIENT_Representation+0x7a>
 8015570:	46a0      	mov	r8, r4
 8015572:	f04f 0900 	mov.w	r9, #0
 8015576:	e001      	b.n	801557c <uxr_deserialize_CLIENT_Representation+0x90>
 8015578:	2e00      	cmp	r6, #0
 801557a:	d0f4      	beq.n	8015566 <uxr_deserialize_CLIENT_Representation+0x7a>
 801557c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015584:	4628      	mov	r0, r5
 8015586:	f004 fd01 	bl	8019f8c <ucdr_deserialize_string>
 801558a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801558e:	4606      	mov	r6, r0
 8015590:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8015594:	4628      	mov	r0, r5
 8015596:	f004 fcf9 	bl	8019f8c <ucdr_deserialize_string>
 801559a:	6923      	ldr	r3, [r4, #16]
 801559c:	f109 0901 	add.w	r9, r9, #1
 80155a0:	4006      	ands	r6, r0
 80155a2:	4599      	cmp	r9, r3
 80155a4:	f108 0808 	add.w	r8, r8, #8
 80155a8:	b2f6      	uxtb	r6, r6
 80155aa:	d3e5      	bcc.n	8015578 <uxr_deserialize_CLIENT_Representation+0x8c>
 80155ac:	4037      	ands	r7, r6
 80155ae:	e7c8      	b.n	8015542 <uxr_deserialize_CLIENT_Representation+0x56>
 80155b0:	4007      	ands	r7, r0
 80155b2:	e7c6      	b.n	8015542 <uxr_deserialize_CLIENT_Representation+0x56>

080155b4 <uxr_serialize_AGENT_Representation>:
 80155b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155b8:	2204      	movs	r2, #4
 80155ba:	460f      	mov	r7, r1
 80155bc:	4605      	mov	r5, r0
 80155be:	f7fc ffb5 	bl	801252c <ucdr_serialize_array_uint8_t>
 80155c2:	2202      	movs	r2, #2
 80155c4:	4604      	mov	r4, r0
 80155c6:	1d39      	adds	r1, r7, #4
 80155c8:	4628      	mov	r0, r5
 80155ca:	f7fc ffaf 	bl	801252c <ucdr_serialize_array_uint8_t>
 80155ce:	4020      	ands	r0, r4
 80155d0:	2202      	movs	r2, #2
 80155d2:	1db9      	adds	r1, r7, #6
 80155d4:	b2c4      	uxtb	r4, r0
 80155d6:	4628      	mov	r0, r5
 80155d8:	f7fc ffa8 	bl	801252c <ucdr_serialize_array_uint8_t>
 80155dc:	7a39      	ldrb	r1, [r7, #8]
 80155de:	4004      	ands	r4, r0
 80155e0:	4628      	mov	r0, r5
 80155e2:	f7f6 fb99 	bl	800bd18 <ucdr_serialize_bool>
 80155e6:	7a3b      	ldrb	r3, [r7, #8]
 80155e8:	ea00 0804 	and.w	r8, r0, r4
 80155ec:	b913      	cbnz	r3, 80155f4 <uxr_serialize_AGENT_Representation+0x40>
 80155ee:	4640      	mov	r0, r8
 80155f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155f4:	68f9      	ldr	r1, [r7, #12]
 80155f6:	4628      	mov	r0, r5
 80155f8:	f7f6 fdd2 	bl	800c1a0 <ucdr_serialize_uint32_t>
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	b303      	cbz	r3, 8015642 <uxr_serialize_AGENT_Representation+0x8e>
 8015600:	b1d0      	cbz	r0, 8015638 <uxr_serialize_AGENT_Representation+0x84>
 8015602:	463e      	mov	r6, r7
 8015604:	f04f 0900 	mov.w	r9, #0
 8015608:	e001      	b.n	801560e <uxr_serialize_AGENT_Representation+0x5a>
 801560a:	3608      	adds	r6, #8
 801560c:	b1a4      	cbz	r4, 8015638 <uxr_serialize_AGENT_Representation+0x84>
 801560e:	6931      	ldr	r1, [r6, #16]
 8015610:	4628      	mov	r0, r5
 8015612:	f004 fcab 	bl	8019f6c <ucdr_serialize_string>
 8015616:	6971      	ldr	r1, [r6, #20]
 8015618:	4604      	mov	r4, r0
 801561a:	4628      	mov	r0, r5
 801561c:	f004 fca6 	bl	8019f6c <ucdr_serialize_string>
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	f109 0901 	add.w	r9, r9, #1
 8015626:	4004      	ands	r4, r0
 8015628:	4599      	cmp	r9, r3
 801562a:	b2e4      	uxtb	r4, r4
 801562c:	d3ed      	bcc.n	801560a <uxr_serialize_AGENT_Representation+0x56>
 801562e:	ea08 0804 	and.w	r8, r8, r4
 8015632:	4640      	mov	r0, r8
 8015634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015638:	f04f 0800 	mov.w	r8, #0
 801563c:	4640      	mov	r0, r8
 801563e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015642:	ea08 0800 	and.w	r8, r8, r0
 8015646:	e7d2      	b.n	80155ee <uxr_serialize_AGENT_Representation+0x3a>

08015648 <uxr_serialize_DATAWRITER_Representation>:
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	460d      	mov	r5, r1
 801564c:	7809      	ldrb	r1, [r1, #0]
 801564e:	4606      	mov	r6, r0
 8015650:	f7f6 fb90 	bl	800bd74 <ucdr_serialize_uint8_t>
 8015654:	4604      	mov	r4, r0
 8015656:	b130      	cbz	r0, 8015666 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015658:	782b      	ldrb	r3, [r5, #0]
 801565a:	2b02      	cmp	r3, #2
 801565c:	d00c      	beq.n	8015678 <uxr_serialize_DATAWRITER_Representation+0x30>
 801565e:	2b03      	cmp	r3, #3
 8015660:	d010      	beq.n	8015684 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015662:	2b01      	cmp	r3, #1
 8015664:	d008      	beq.n	8015678 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015666:	2202      	movs	r2, #2
 8015668:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801566c:	4630      	mov	r0, r6
 801566e:	f7fc ff5d 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015672:	4020      	ands	r0, r4
 8015674:	b2c0      	uxtb	r0, r0
 8015676:	bd70      	pop	{r4, r5, r6, pc}
 8015678:	6869      	ldr	r1, [r5, #4]
 801567a:	4630      	mov	r0, r6
 801567c:	f004 fc76 	bl	8019f6c <ucdr_serialize_string>
 8015680:	4604      	mov	r4, r0
 8015682:	e7f0      	b.n	8015666 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015684:	4629      	mov	r1, r5
 8015686:	4630      	mov	r0, r6
 8015688:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801568c:	3104      	adds	r1, #4
 801568e:	f7fd f8eb 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 8015692:	4604      	mov	r4, r0
 8015694:	e7e7      	b.n	8015666 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015696:	bf00      	nop

08015698 <uxr_serialize_ObjectVariant.part.0>:
 8015698:	b570      	push	{r4, r5, r6, lr}
 801569a:	780b      	ldrb	r3, [r1, #0]
 801569c:	3b01      	subs	r3, #1
 801569e:	460c      	mov	r4, r1
 80156a0:	4605      	mov	r5, r0
 80156a2:	2b0d      	cmp	r3, #13
 80156a4:	d854      	bhi.n	8015750 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80156a6:	e8df f003 	tbb	[pc, r3]
 80156aa:	0730      	.short	0x0730
 80156ac:	07071b1b 	.word	0x07071b1b
 80156b0:	0c530707 	.word	0x0c530707
 80156b4:	494e0c0c 	.word	0x494e0c0c
 80156b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156bc:	3104      	adds	r1, #4
 80156be:	f7ff bfc3 	b.w	8015648 <uxr_serialize_DATAWRITER_Representation>
 80156c2:	7909      	ldrb	r1, [r1, #4]
 80156c4:	f7f6 fb56 	bl	800bd74 <ucdr_serialize_uint8_t>
 80156c8:	b1e8      	cbz	r0, 8015706 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80156ca:	7923      	ldrb	r3, [r4, #4]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d001      	beq.n	80156d4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80156d0:	2b02      	cmp	r3, #2
 80156d2:	d13d      	bne.n	8015750 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80156d4:	68a1      	ldr	r1, [r4, #8]
 80156d6:	4628      	mov	r0, r5
 80156d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156dc:	f004 bc46 	b.w	8019f6c <ucdr_serialize_string>
 80156e0:	7909      	ldrb	r1, [r1, #4]
 80156e2:	f7f6 fb47 	bl	800bd74 <ucdr_serialize_uint8_t>
 80156e6:	4606      	mov	r6, r0
 80156e8:	b120      	cbz	r0, 80156f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80156ea:	7923      	ldrb	r3, [r4, #4]
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	d039      	beq.n	8015764 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80156f0:	2b03      	cmp	r3, #3
 80156f2:	d02f      	beq.n	8015754 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80156f4:	2202      	movs	r2, #2
 80156f6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80156fa:	4628      	mov	r0, r5
 80156fc:	f7fc ff16 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015700:	4030      	ands	r0, r6
 8015702:	b2c0      	uxtb	r0, r0
 8015704:	bd70      	pop	{r4, r5, r6, pc}
 8015706:	2000      	movs	r0, #0
 8015708:	bd70      	pop	{r4, r5, r6, pc}
 801570a:	7909      	ldrb	r1, [r1, #4]
 801570c:	f7f6 fb32 	bl	800bd74 <ucdr_serialize_uint8_t>
 8015710:	4606      	mov	r6, r0
 8015712:	b158      	cbz	r0, 801572c <uxr_serialize_ObjectVariant.part.0+0x94>
 8015714:	7923      	ldrb	r3, [r4, #4]
 8015716:	2b02      	cmp	r3, #2
 8015718:	d003      	beq.n	8015722 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801571a:	2b03      	cmp	r3, #3
 801571c:	d028      	beq.n	8015770 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801571e:	2b01      	cmp	r3, #1
 8015720:	d104      	bne.n	801572c <uxr_serialize_ObjectVariant.part.0+0x94>
 8015722:	68a1      	ldr	r1, [r4, #8]
 8015724:	4628      	mov	r0, r5
 8015726:	f004 fc21 	bl	8019f6c <ucdr_serialize_string>
 801572a:	4606      	mov	r6, r0
 801572c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8015730:	4628      	mov	r0, r5
 8015732:	f7f7 f85b 	bl	800c7ec <ucdr_serialize_int16_t>
 8015736:	4030      	ands	r0, r6
 8015738:	b2c0      	uxtb	r0, r0
 801573a:	bd70      	pop	{r4, r5, r6, pc}
 801573c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015740:	3104      	adds	r1, #4
 8015742:	f7ff be7b 	b.w	801543c <uxr_serialize_CLIENT_Representation>
 8015746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801574a:	3104      	adds	r1, #4
 801574c:	f7ff bf32 	b.w	80155b4 <uxr_serialize_AGENT_Representation>
 8015750:	2001      	movs	r0, #1
 8015752:	bd70      	pop	{r4, r5, r6, pc}
 8015754:	68a2      	ldr	r2, [r4, #8]
 8015756:	f104 010c 	add.w	r1, r4, #12
 801575a:	4628      	mov	r0, r5
 801575c:	f7fd f884 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 8015760:	4606      	mov	r6, r0
 8015762:	e7c7      	b.n	80156f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015764:	68a1      	ldr	r1, [r4, #8]
 8015766:	4628      	mov	r0, r5
 8015768:	f004 fc00 	bl	8019f6c <ucdr_serialize_string>
 801576c:	4606      	mov	r6, r0
 801576e:	e7c1      	b.n	80156f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015770:	68a2      	ldr	r2, [r4, #8]
 8015772:	f104 010c 	add.w	r1, r4, #12
 8015776:	4628      	mov	r0, r5
 8015778:	f7fd f876 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 801577c:	4606      	mov	r6, r0
 801577e:	e7d5      	b.n	801572c <uxr_serialize_ObjectVariant.part.0+0x94>

08015780 <uxr_deserialize_DATAWRITER_Representation>:
 8015780:	b570      	push	{r4, r5, r6, lr}
 8015782:	4606      	mov	r6, r0
 8015784:	460d      	mov	r5, r1
 8015786:	f7f6 fb0b 	bl	800bda0 <ucdr_deserialize_uint8_t>
 801578a:	4604      	mov	r4, r0
 801578c:	b130      	cbz	r0, 801579c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801578e:	782b      	ldrb	r3, [r5, #0]
 8015790:	2b02      	cmp	r3, #2
 8015792:	d00c      	beq.n	80157ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015794:	2b03      	cmp	r3, #3
 8015796:	d012      	beq.n	80157be <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015798:	2b01      	cmp	r3, #1
 801579a:	d008      	beq.n	80157ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801579c:	2202      	movs	r2, #2
 801579e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80157a2:	4630      	mov	r0, r6
 80157a4:	f7fc ff26 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 80157a8:	4020      	ands	r0, r4
 80157aa:	b2c0      	uxtb	r0, r0
 80157ac:	bd70      	pop	{r4, r5, r6, pc}
 80157ae:	6869      	ldr	r1, [r5, #4]
 80157b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80157b4:	4630      	mov	r0, r6
 80157b6:	f004 fbe9 	bl	8019f8c <ucdr_deserialize_string>
 80157ba:	4604      	mov	r4, r0
 80157bc:	e7ee      	b.n	801579c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80157be:	1d2b      	adds	r3, r5, #4
 80157c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80157c4:	f105 0108 	add.w	r1, r5, #8
 80157c8:	4630      	mov	r0, r6
 80157ca:	f7fd f85f 	bl	801288c <ucdr_deserialize_sequence_uint8_t>
 80157ce:	4604      	mov	r4, r0
 80157d0:	e7e4      	b.n	801579c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80157d2:	bf00      	nop

080157d4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80157d4:	b570      	push	{r4, r5, r6, lr}
 80157d6:	460d      	mov	r5, r1
 80157d8:	7809      	ldrb	r1, [r1, #0]
 80157da:	4606      	mov	r6, r0
 80157dc:	f7f6 fa9c 	bl	800bd18 <ucdr_serialize_bool>
 80157e0:	782b      	ldrb	r3, [r5, #0]
 80157e2:	4604      	mov	r4, r0
 80157e4:	b94b      	cbnz	r3, 80157fa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80157e6:	7a29      	ldrb	r1, [r5, #8]
 80157e8:	4630      	mov	r0, r6
 80157ea:	f7f6 fa95 	bl	800bd18 <ucdr_serialize_bool>
 80157ee:	7a2b      	ldrb	r3, [r5, #8]
 80157f0:	4004      	ands	r4, r0
 80157f2:	b2e4      	uxtb	r4, r4
 80157f4:	b943      	cbnz	r3, 8015808 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80157f6:	4620      	mov	r0, r4
 80157f8:	bd70      	pop	{r4, r5, r6, pc}
 80157fa:	6869      	ldr	r1, [r5, #4]
 80157fc:	4630      	mov	r0, r6
 80157fe:	f004 fbb5 	bl	8019f6c <ucdr_serialize_string>
 8015802:	4004      	ands	r4, r0
 8015804:	b2e4      	uxtb	r4, r4
 8015806:	e7ee      	b.n	80157e6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015808:	68e9      	ldr	r1, [r5, #12]
 801580a:	4630      	mov	r0, r6
 801580c:	f004 fbae 	bl	8019f6c <ucdr_serialize_string>
 8015810:	4004      	ands	r4, r0
 8015812:	4620      	mov	r0, r4
 8015814:	bd70      	pop	{r4, r5, r6, pc}
 8015816:	bf00      	nop

08015818 <uxr_serialize_OBJK_Topic_Binary>:
 8015818:	b570      	push	{r4, r5, r6, lr}
 801581a:	460d      	mov	r5, r1
 801581c:	6809      	ldr	r1, [r1, #0]
 801581e:	4606      	mov	r6, r0
 8015820:	f004 fba4 	bl	8019f6c <ucdr_serialize_string>
 8015824:	7929      	ldrb	r1, [r5, #4]
 8015826:	4604      	mov	r4, r0
 8015828:	4630      	mov	r0, r6
 801582a:	f7f6 fa75 	bl	800bd18 <ucdr_serialize_bool>
 801582e:	792b      	ldrb	r3, [r5, #4]
 8015830:	4004      	ands	r4, r0
 8015832:	b2e4      	uxtb	r4, r4
 8015834:	b943      	cbnz	r3, 8015848 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015836:	7b29      	ldrb	r1, [r5, #12]
 8015838:	4630      	mov	r0, r6
 801583a:	f7f6 fa6d 	bl	800bd18 <ucdr_serialize_bool>
 801583e:	7b2b      	ldrb	r3, [r5, #12]
 8015840:	4004      	ands	r4, r0
 8015842:	b93b      	cbnz	r3, 8015854 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015844:	4620      	mov	r0, r4
 8015846:	bd70      	pop	{r4, r5, r6, pc}
 8015848:	68a9      	ldr	r1, [r5, #8]
 801584a:	4630      	mov	r0, r6
 801584c:	f004 fb8e 	bl	8019f6c <ucdr_serialize_string>
 8015850:	4004      	ands	r4, r0
 8015852:	e7f0      	b.n	8015836 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015854:	6929      	ldr	r1, [r5, #16]
 8015856:	4630      	mov	r0, r6
 8015858:	f004 fb88 	bl	8019f6c <ucdr_serialize_string>
 801585c:	4004      	ands	r4, r0
 801585e:	b2e4      	uxtb	r4, r4
 8015860:	4620      	mov	r0, r4
 8015862:	bd70      	pop	{r4, r5, r6, pc}

08015864 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015868:	460c      	mov	r4, r1
 801586a:	7809      	ldrb	r1, [r1, #0]
 801586c:	4606      	mov	r6, r0
 801586e:	f7f6 fa53 	bl	800bd18 <ucdr_serialize_bool>
 8015872:	7823      	ldrb	r3, [r4, #0]
 8015874:	4605      	mov	r5, r0
 8015876:	b96b      	cbnz	r3, 8015894 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015878:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801587c:	4630      	mov	r0, r6
 801587e:	f7f6 fa4b 	bl	800bd18 <ucdr_serialize_bool>
 8015882:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015886:	4005      	ands	r5, r0
 8015888:	b2ed      	uxtb	r5, r5
 801588a:	2b00      	cmp	r3, #0
 801588c:	d169      	bne.n	8015962 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801588e:	4628      	mov	r0, r5
 8015890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015894:	6861      	ldr	r1, [r4, #4]
 8015896:	4630      	mov	r0, r6
 8015898:	f7f6 fc82 	bl	800c1a0 <ucdr_serialize_uint32_t>
 801589c:	6863      	ldr	r3, [r4, #4]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d06b      	beq.n	801597a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80158a2:	2800      	cmp	r0, #0
 80158a4:	d067      	beq.n	8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158a6:	68a1      	ldr	r1, [r4, #8]
 80158a8:	4630      	mov	r0, r6
 80158aa:	f004 fb5f 	bl	8019f6c <ucdr_serialize_string>
 80158ae:	6863      	ldr	r3, [r4, #4]
 80158b0:	2b01      	cmp	r3, #1
 80158b2:	d953      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d05e      	beq.n	8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158b8:	68e1      	ldr	r1, [r4, #12]
 80158ba:	4630      	mov	r0, r6
 80158bc:	f004 fb56 	bl	8019f6c <ucdr_serialize_string>
 80158c0:	6863      	ldr	r3, [r4, #4]
 80158c2:	2b02      	cmp	r3, #2
 80158c4:	d94a      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80158c6:	2800      	cmp	r0, #0
 80158c8:	d055      	beq.n	8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158ca:	6921      	ldr	r1, [r4, #16]
 80158cc:	4630      	mov	r0, r6
 80158ce:	f004 fb4d 	bl	8019f6c <ucdr_serialize_string>
 80158d2:	6863      	ldr	r3, [r4, #4]
 80158d4:	2b03      	cmp	r3, #3
 80158d6:	d941      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80158d8:	2800      	cmp	r0, #0
 80158da:	d04c      	beq.n	8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158dc:	6961      	ldr	r1, [r4, #20]
 80158de:	4630      	mov	r0, r6
 80158e0:	f004 fb44 	bl	8019f6c <ucdr_serialize_string>
 80158e4:	6863      	ldr	r3, [r4, #4]
 80158e6:	2b04      	cmp	r3, #4
 80158e8:	d938      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80158ea:	2800      	cmp	r0, #0
 80158ec:	d043      	beq.n	8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158ee:	69a1      	ldr	r1, [r4, #24]
 80158f0:	4630      	mov	r0, r6
 80158f2:	f004 fb3b 	bl	8019f6c <ucdr_serialize_string>
 80158f6:	6863      	ldr	r3, [r4, #4]
 80158f8:	2b05      	cmp	r3, #5
 80158fa:	d92f      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80158fc:	2800      	cmp	r0, #0
 80158fe:	d03a      	beq.n	8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015900:	69e1      	ldr	r1, [r4, #28]
 8015902:	4630      	mov	r0, r6
 8015904:	f004 fb32 	bl	8019f6c <ucdr_serialize_string>
 8015908:	6863      	ldr	r3, [r4, #4]
 801590a:	2b06      	cmp	r3, #6
 801590c:	d926      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801590e:	b390      	cbz	r0, 8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015910:	6a21      	ldr	r1, [r4, #32]
 8015912:	4630      	mov	r0, r6
 8015914:	f004 fb2a 	bl	8019f6c <ucdr_serialize_string>
 8015918:	6863      	ldr	r3, [r4, #4]
 801591a:	2b07      	cmp	r3, #7
 801591c:	d91e      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801591e:	b350      	cbz	r0, 8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015920:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015922:	4630      	mov	r0, r6
 8015924:	f004 fb22 	bl	8019f6c <ucdr_serialize_string>
 8015928:	6863      	ldr	r3, [r4, #4]
 801592a:	2b08      	cmp	r3, #8
 801592c:	d916      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801592e:	b310      	cbz	r0, 8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015930:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015932:	4630      	mov	r0, r6
 8015934:	f004 fb1a 	bl	8019f6c <ucdr_serialize_string>
 8015938:	6863      	ldr	r3, [r4, #4]
 801593a:	2b09      	cmp	r3, #9
 801593c:	d90e      	bls.n	801595c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801593e:	b1d0      	cbz	r0, 8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015940:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015944:	2709      	movs	r7, #9
 8015946:	e000      	b.n	801594a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015948:	b1a8      	cbz	r0, 8015976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801594a:	f858 1b04 	ldr.w	r1, [r8], #4
 801594e:	4630      	mov	r0, r6
 8015950:	f004 fb0c 	bl	8019f6c <ucdr_serialize_string>
 8015954:	6862      	ldr	r2, [r4, #4]
 8015956:	3701      	adds	r7, #1
 8015958:	4297      	cmp	r7, r2
 801595a:	d3f5      	bcc.n	8015948 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801595c:	4005      	ands	r5, r0
 801595e:	b2ed      	uxtb	r5, r5
 8015960:	e78a      	b.n	8015878 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015962:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015964:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015968:	4630      	mov	r0, r6
 801596a:	f7fc ff7d 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 801596e:	4005      	ands	r5, r0
 8015970:	4628      	mov	r0, r5
 8015972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015976:	2500      	movs	r5, #0
 8015978:	e77e      	b.n	8015878 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801597a:	4028      	ands	r0, r5
 801597c:	b2c5      	uxtb	r5, r0
 801597e:	e77b      	b.n	8015878 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015980 <uxr_serialize_OBJK_Publisher_Binary>:
 8015980:	b570      	push	{r4, r5, r6, lr}
 8015982:	460d      	mov	r5, r1
 8015984:	7809      	ldrb	r1, [r1, #0]
 8015986:	4606      	mov	r6, r0
 8015988:	f7f6 f9c6 	bl	800bd18 <ucdr_serialize_bool>
 801598c:	782b      	ldrb	r3, [r5, #0]
 801598e:	4604      	mov	r4, r0
 8015990:	b94b      	cbnz	r3, 80159a6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015992:	7a29      	ldrb	r1, [r5, #8]
 8015994:	4630      	mov	r0, r6
 8015996:	f7f6 f9bf 	bl	800bd18 <ucdr_serialize_bool>
 801599a:	7a2b      	ldrb	r3, [r5, #8]
 801599c:	4004      	ands	r4, r0
 801599e:	b2e4      	uxtb	r4, r4
 80159a0:	b943      	cbnz	r3, 80159b4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80159a2:	4620      	mov	r0, r4
 80159a4:	bd70      	pop	{r4, r5, r6, pc}
 80159a6:	6869      	ldr	r1, [r5, #4]
 80159a8:	4630      	mov	r0, r6
 80159aa:	f004 fadf 	bl	8019f6c <ucdr_serialize_string>
 80159ae:	4004      	ands	r4, r0
 80159b0:	b2e4      	uxtb	r4, r4
 80159b2:	e7ee      	b.n	8015992 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80159b4:	f105 010c 	add.w	r1, r5, #12
 80159b8:	4630      	mov	r0, r6
 80159ba:	f7ff ff53 	bl	8015864 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80159be:	4004      	ands	r4, r0
 80159c0:	4620      	mov	r0, r4
 80159c2:	bd70      	pop	{r4, r5, r6, pc}

080159c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80159c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c8:	460c      	mov	r4, r1
 80159ca:	7809      	ldrb	r1, [r1, #0]
 80159cc:	4606      	mov	r6, r0
 80159ce:	f7f6 f9a3 	bl	800bd18 <ucdr_serialize_bool>
 80159d2:	7823      	ldrb	r3, [r4, #0]
 80159d4:	4605      	mov	r5, r0
 80159d6:	b96b      	cbnz	r3, 80159f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80159d8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80159dc:	4630      	mov	r0, r6
 80159de:	f7f6 f99b 	bl	800bd18 <ucdr_serialize_bool>
 80159e2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80159e6:	4005      	ands	r5, r0
 80159e8:	b2ed      	uxtb	r5, r5
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d169      	bne.n	8015ac2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80159ee:	4628      	mov	r0, r5
 80159f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159f4:	6861      	ldr	r1, [r4, #4]
 80159f6:	4630      	mov	r0, r6
 80159f8:	f7f6 fbd2 	bl	800c1a0 <ucdr_serialize_uint32_t>
 80159fc:	6863      	ldr	r3, [r4, #4]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d06b      	beq.n	8015ada <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8015a02:	2800      	cmp	r0, #0
 8015a04:	d067      	beq.n	8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a06:	68a1      	ldr	r1, [r4, #8]
 8015a08:	4630      	mov	r0, r6
 8015a0a:	f004 faaf 	bl	8019f6c <ucdr_serialize_string>
 8015a0e:	6863      	ldr	r3, [r4, #4]
 8015a10:	2b01      	cmp	r3, #1
 8015a12:	d953      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d05e      	beq.n	8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a18:	68e1      	ldr	r1, [r4, #12]
 8015a1a:	4630      	mov	r0, r6
 8015a1c:	f004 faa6 	bl	8019f6c <ucdr_serialize_string>
 8015a20:	6863      	ldr	r3, [r4, #4]
 8015a22:	2b02      	cmp	r3, #2
 8015a24:	d94a      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d055      	beq.n	8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a2a:	6921      	ldr	r1, [r4, #16]
 8015a2c:	4630      	mov	r0, r6
 8015a2e:	f004 fa9d 	bl	8019f6c <ucdr_serialize_string>
 8015a32:	6863      	ldr	r3, [r4, #4]
 8015a34:	2b03      	cmp	r3, #3
 8015a36:	d941      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d04c      	beq.n	8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a3c:	6961      	ldr	r1, [r4, #20]
 8015a3e:	4630      	mov	r0, r6
 8015a40:	f004 fa94 	bl	8019f6c <ucdr_serialize_string>
 8015a44:	6863      	ldr	r3, [r4, #4]
 8015a46:	2b04      	cmp	r3, #4
 8015a48:	d938      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d043      	beq.n	8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a4e:	69a1      	ldr	r1, [r4, #24]
 8015a50:	4630      	mov	r0, r6
 8015a52:	f004 fa8b 	bl	8019f6c <ucdr_serialize_string>
 8015a56:	6863      	ldr	r3, [r4, #4]
 8015a58:	2b05      	cmp	r3, #5
 8015a5a:	d92f      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a5c:	2800      	cmp	r0, #0
 8015a5e:	d03a      	beq.n	8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a60:	69e1      	ldr	r1, [r4, #28]
 8015a62:	4630      	mov	r0, r6
 8015a64:	f004 fa82 	bl	8019f6c <ucdr_serialize_string>
 8015a68:	6863      	ldr	r3, [r4, #4]
 8015a6a:	2b06      	cmp	r3, #6
 8015a6c:	d926      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a6e:	b390      	cbz	r0, 8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a70:	6a21      	ldr	r1, [r4, #32]
 8015a72:	4630      	mov	r0, r6
 8015a74:	f004 fa7a 	bl	8019f6c <ucdr_serialize_string>
 8015a78:	6863      	ldr	r3, [r4, #4]
 8015a7a:	2b07      	cmp	r3, #7
 8015a7c:	d91e      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a7e:	b350      	cbz	r0, 8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a80:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015a82:	4630      	mov	r0, r6
 8015a84:	f004 fa72 	bl	8019f6c <ucdr_serialize_string>
 8015a88:	6863      	ldr	r3, [r4, #4]
 8015a8a:	2b08      	cmp	r3, #8
 8015a8c:	d916      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a8e:	b310      	cbz	r0, 8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a90:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015a92:	4630      	mov	r0, r6
 8015a94:	f004 fa6a 	bl	8019f6c <ucdr_serialize_string>
 8015a98:	6863      	ldr	r3, [r4, #4]
 8015a9a:	2b09      	cmp	r3, #9
 8015a9c:	d90e      	bls.n	8015abc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a9e:	b1d0      	cbz	r0, 8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015aa0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015aa4:	2709      	movs	r7, #9
 8015aa6:	e000      	b.n	8015aaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8015aa8:	b1a8      	cbz	r0, 8015ad6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015aaa:	f858 1b04 	ldr.w	r1, [r8], #4
 8015aae:	4630      	mov	r0, r6
 8015ab0:	f004 fa5c 	bl	8019f6c <ucdr_serialize_string>
 8015ab4:	6862      	ldr	r2, [r4, #4]
 8015ab6:	3701      	adds	r7, #1
 8015ab8:	4297      	cmp	r7, r2
 8015aba:	d3f5      	bcc.n	8015aa8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8015abc:	4005      	ands	r5, r0
 8015abe:	b2ed      	uxtb	r5, r5
 8015ac0:	e78a      	b.n	80159d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015ac2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015ac4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015ac8:	4630      	mov	r0, r6
 8015aca:	f7fc fecd 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 8015ace:	4005      	ands	r5, r0
 8015ad0:	4628      	mov	r0, r5
 8015ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad6:	2500      	movs	r5, #0
 8015ad8:	e77e      	b.n	80159d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015ada:	4028      	ands	r0, r5
 8015adc:	b2c5      	uxtb	r5, r0
 8015ade:	e77b      	b.n	80159d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08015ae0 <uxr_serialize_OBJK_Subscriber_Binary>:
 8015ae0:	b570      	push	{r4, r5, r6, lr}
 8015ae2:	460d      	mov	r5, r1
 8015ae4:	7809      	ldrb	r1, [r1, #0]
 8015ae6:	4606      	mov	r6, r0
 8015ae8:	f7f6 f916 	bl	800bd18 <ucdr_serialize_bool>
 8015aec:	782b      	ldrb	r3, [r5, #0]
 8015aee:	4604      	mov	r4, r0
 8015af0:	b94b      	cbnz	r3, 8015b06 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8015af2:	7a29      	ldrb	r1, [r5, #8]
 8015af4:	4630      	mov	r0, r6
 8015af6:	f7f6 f90f 	bl	800bd18 <ucdr_serialize_bool>
 8015afa:	7a2b      	ldrb	r3, [r5, #8]
 8015afc:	4004      	ands	r4, r0
 8015afe:	b2e4      	uxtb	r4, r4
 8015b00:	b943      	cbnz	r3, 8015b14 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8015b02:	4620      	mov	r0, r4
 8015b04:	bd70      	pop	{r4, r5, r6, pc}
 8015b06:	6869      	ldr	r1, [r5, #4]
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f004 fa2f 	bl	8019f6c <ucdr_serialize_string>
 8015b0e:	4004      	ands	r4, r0
 8015b10:	b2e4      	uxtb	r4, r4
 8015b12:	e7ee      	b.n	8015af2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8015b14:	f105 010c 	add.w	r1, r5, #12
 8015b18:	4630      	mov	r0, r6
 8015b1a:	f7ff ff53 	bl	80159c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8015b1e:	4004      	ands	r4, r0
 8015b20:	4620      	mov	r0, r4
 8015b22:	bd70      	pop	{r4, r5, r6, pc}

08015b24 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015b24:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8015b28:	4688      	mov	r8, r1
 8015b2a:	8809      	ldrh	r1, [r1, #0]
 8015b2c:	4681      	mov	r9, r0
 8015b2e:	f7f6 f94d 	bl	800bdcc <ucdr_serialize_uint16_t>
 8015b32:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015b36:	4606      	mov	r6, r0
 8015b38:	4648      	mov	r0, r9
 8015b3a:	f7f6 f8ed 	bl	800bd18 <ucdr_serialize_bool>
 8015b3e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015b42:	4006      	ands	r6, r0
 8015b44:	b2f5      	uxtb	r5, r6
 8015b46:	b9eb      	cbnz	r3, 8015b84 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015b48:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015b4c:	4648      	mov	r0, r9
 8015b4e:	f7f6 f8e3 	bl	800bd18 <ucdr_serialize_bool>
 8015b52:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015b56:	4005      	ands	r5, r0
 8015b58:	bb7b      	cbnz	r3, 8015bba <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8015b5a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8015b5e:	4648      	mov	r0, r9
 8015b60:	f7f6 f8da 	bl	800bd18 <ucdr_serialize_bool>
 8015b64:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015b68:	4005      	ands	r5, r0
 8015b6a:	b9f3      	cbnz	r3, 8015baa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8015b6c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015b70:	4648      	mov	r0, r9
 8015b72:	f7f6 f8d1 	bl	800bd18 <ucdr_serialize_bool>
 8015b76:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015b7a:	4005      	ands	r5, r0
 8015b7c:	b94b      	cbnz	r3, 8015b92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8015b7e:	4628      	mov	r0, r5
 8015b80:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015b84:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015b88:	4648      	mov	r0, r9
 8015b8a:	f7f6 f91f 	bl	800bdcc <ucdr_serialize_uint16_t>
 8015b8e:	4005      	ands	r5, r0
 8015b90:	e7da      	b.n	8015b48 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015b92:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015b96:	f108 011c 	add.w	r1, r8, #28
 8015b9a:	4648      	mov	r0, r9
 8015b9c:	f7fc fe64 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 8015ba0:	4028      	ands	r0, r5
 8015ba2:	b2c5      	uxtb	r5, r0
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015baa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015bae:	4648      	mov	r0, r9
 8015bb0:	f7f6 faf6 	bl	800c1a0 <ucdr_serialize_uint32_t>
 8015bb4:	4028      	ands	r0, r5
 8015bb6:	b2c5      	uxtb	r5, r0
 8015bb8:	e7d8      	b.n	8015b6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8015bba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015bbe:	4648      	mov	r0, r9
 8015bc0:	f7f6 faee 	bl	800c1a0 <ucdr_serialize_uint32_t>
 8015bc4:	4028      	ands	r0, r5
 8015bc6:	b2c5      	uxtb	r5, r0
 8015bc8:	e7c7      	b.n	8015b5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8015bca:	bf00      	nop

08015bcc <uxr_serialize_OBJK_DataReader_Binary>:
 8015bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bce:	2202      	movs	r2, #2
 8015bd0:	460c      	mov	r4, r1
 8015bd2:	4606      	mov	r6, r0
 8015bd4:	f7fc fcaa 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015bd8:	78a1      	ldrb	r1, [r4, #2]
 8015bda:	4605      	mov	r5, r0
 8015bdc:	4630      	mov	r0, r6
 8015bde:	f7f6 f89b 	bl	800bd18 <ucdr_serialize_bool>
 8015be2:	78a3      	ldrb	r3, [r4, #2]
 8015be4:	4005      	ands	r5, r0
 8015be6:	b2ed      	uxtb	r5, r5
 8015be8:	b90b      	cbnz	r3, 8015bee <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8015bea:	4628      	mov	r0, r5
 8015bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bee:	f104 0108 	add.w	r1, r4, #8
 8015bf2:	4630      	mov	r0, r6
 8015bf4:	f7ff ff96 	bl	8015b24 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015bf8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015bfc:	4607      	mov	r7, r0
 8015bfe:	4630      	mov	r0, r6
 8015c00:	f7f6 f88a 	bl	800bd18 <ucdr_serialize_bool>
 8015c04:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015c08:	4038      	ands	r0, r7
 8015c0a:	b2c7      	uxtb	r7, r0
 8015c0c:	b95b      	cbnz	r3, 8015c26 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8015c0e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8015c12:	4630      	mov	r0, r6
 8015c14:	f7f6 f880 	bl	800bd18 <ucdr_serialize_bool>
 8015c18:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015c1c:	4007      	ands	r7, r0
 8015c1e:	b94b      	cbnz	r3, 8015c34 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8015c20:	403d      	ands	r5, r7
 8015c22:	4628      	mov	r0, r5
 8015c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c26:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8015c2a:	4630      	mov	r0, r6
 8015c2c:	f7f6 fd0e 	bl	800c64c <ucdr_serialize_uint64_t>
 8015c30:	4007      	ands	r7, r0
 8015c32:	e7ec      	b.n	8015c0e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8015c34:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8015c36:	4630      	mov	r0, r6
 8015c38:	f004 f998 	bl	8019f6c <ucdr_serialize_string>
 8015c3c:	4007      	ands	r7, r0
 8015c3e:	b2ff      	uxtb	r7, r7
 8015c40:	e7ee      	b.n	8015c20 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8015c42:	bf00      	nop

08015c44 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c46:	2202      	movs	r2, #2
 8015c48:	460d      	mov	r5, r1
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	f7fc fc6e 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015c50:	78a9      	ldrb	r1, [r5, #2]
 8015c52:	4604      	mov	r4, r0
 8015c54:	4630      	mov	r0, r6
 8015c56:	f7f6 f85f 	bl	800bd18 <ucdr_serialize_bool>
 8015c5a:	78ab      	ldrb	r3, [r5, #2]
 8015c5c:	4004      	ands	r4, r0
 8015c5e:	b2e4      	uxtb	r4, r4
 8015c60:	b90b      	cbnz	r3, 8015c66 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015c62:	4620      	mov	r0, r4
 8015c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c66:	f105 0108 	add.w	r1, r5, #8
 8015c6a:	4630      	mov	r0, r6
 8015c6c:	f7ff ff5a 	bl	8015b24 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015c70:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8015c74:	4607      	mov	r7, r0
 8015c76:	4630      	mov	r0, r6
 8015c78:	f7f6 f84e 	bl	800bd18 <ucdr_serialize_bool>
 8015c7c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8015c80:	4038      	ands	r0, r7
 8015c82:	b2c7      	uxtb	r7, r0
 8015c84:	b913      	cbnz	r3, 8015c8c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015c86:	403c      	ands	r4, r7
 8015c88:	4620      	mov	r0, r4
 8015c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c8c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8015c90:	4630      	mov	r0, r6
 8015c92:	f7f6 fcdb 	bl	800c64c <ucdr_serialize_uint64_t>
 8015c96:	4007      	ands	r7, r0
 8015c98:	e7f5      	b.n	8015c86 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015c9a:	bf00      	nop

08015c9c <uxr_serialize_OBJK_Requester_Binary>:
 8015c9c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8015ca0:	460f      	mov	r7, r1
 8015ca2:	6809      	ldr	r1, [r1, #0]
 8015ca4:	4680      	mov	r8, r0
 8015ca6:	f004 f961 	bl	8019f6c <ucdr_serialize_string>
 8015caa:	6879      	ldr	r1, [r7, #4]
 8015cac:	4605      	mov	r5, r0
 8015cae:	4640      	mov	r0, r8
 8015cb0:	f004 f95c 	bl	8019f6c <ucdr_serialize_string>
 8015cb4:	68b9      	ldr	r1, [r7, #8]
 8015cb6:	4005      	ands	r5, r0
 8015cb8:	4640      	mov	r0, r8
 8015cba:	f004 f957 	bl	8019f6c <ucdr_serialize_string>
 8015cbe:	b2ec      	uxtb	r4, r5
 8015cc0:	4004      	ands	r4, r0
 8015cc2:	7b39      	ldrb	r1, [r7, #12]
 8015cc4:	4640      	mov	r0, r8
 8015cc6:	f7f6 f827 	bl	800bd18 <ucdr_serialize_bool>
 8015cca:	7b3b      	ldrb	r3, [r7, #12]
 8015ccc:	4004      	ands	r4, r0
 8015cce:	b94b      	cbnz	r3, 8015ce4 <uxr_serialize_OBJK_Requester_Binary+0x48>
 8015cd0:	7d39      	ldrb	r1, [r7, #20]
 8015cd2:	4640      	mov	r0, r8
 8015cd4:	f7f6 f820 	bl	800bd18 <ucdr_serialize_bool>
 8015cd8:	7d3b      	ldrb	r3, [r7, #20]
 8015cda:	4004      	ands	r4, r0
 8015cdc:	b943      	cbnz	r3, 8015cf0 <uxr_serialize_OBJK_Requester_Binary+0x54>
 8015cde:	4620      	mov	r0, r4
 8015ce0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015ce4:	6939      	ldr	r1, [r7, #16]
 8015ce6:	4640      	mov	r0, r8
 8015ce8:	f004 f940 	bl	8019f6c <ucdr_serialize_string>
 8015cec:	4004      	ands	r4, r0
 8015cee:	e7ef      	b.n	8015cd0 <uxr_serialize_OBJK_Requester_Binary+0x34>
 8015cf0:	69b9      	ldr	r1, [r7, #24]
 8015cf2:	4640      	mov	r0, r8
 8015cf4:	f004 f93a 	bl	8019f6c <ucdr_serialize_string>
 8015cf8:	4004      	ands	r4, r0
 8015cfa:	b2e4      	uxtb	r4, r4
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015d02:	bf00      	nop

08015d04 <uxr_serialize_OBJK_Replier_Binary>:
 8015d04:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8015d08:	460f      	mov	r7, r1
 8015d0a:	6809      	ldr	r1, [r1, #0]
 8015d0c:	4680      	mov	r8, r0
 8015d0e:	f004 f92d 	bl	8019f6c <ucdr_serialize_string>
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	4605      	mov	r5, r0
 8015d16:	4640      	mov	r0, r8
 8015d18:	f004 f928 	bl	8019f6c <ucdr_serialize_string>
 8015d1c:	68b9      	ldr	r1, [r7, #8]
 8015d1e:	4005      	ands	r5, r0
 8015d20:	4640      	mov	r0, r8
 8015d22:	f004 f923 	bl	8019f6c <ucdr_serialize_string>
 8015d26:	b2ec      	uxtb	r4, r5
 8015d28:	4004      	ands	r4, r0
 8015d2a:	7b39      	ldrb	r1, [r7, #12]
 8015d2c:	4640      	mov	r0, r8
 8015d2e:	f7f5 fff3 	bl	800bd18 <ucdr_serialize_bool>
 8015d32:	7b3b      	ldrb	r3, [r7, #12]
 8015d34:	4004      	ands	r4, r0
 8015d36:	b94b      	cbnz	r3, 8015d4c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8015d38:	7d39      	ldrb	r1, [r7, #20]
 8015d3a:	4640      	mov	r0, r8
 8015d3c:	f7f5 ffec 	bl	800bd18 <ucdr_serialize_bool>
 8015d40:	7d3b      	ldrb	r3, [r7, #20]
 8015d42:	4004      	ands	r4, r0
 8015d44:	b943      	cbnz	r3, 8015d58 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8015d46:	4620      	mov	r0, r4
 8015d48:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015d4c:	6939      	ldr	r1, [r7, #16]
 8015d4e:	4640      	mov	r0, r8
 8015d50:	f004 f90c 	bl	8019f6c <ucdr_serialize_string>
 8015d54:	4004      	ands	r4, r0
 8015d56:	e7ef      	b.n	8015d38 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8015d58:	69b9      	ldr	r1, [r7, #24]
 8015d5a:	4640      	mov	r0, r8
 8015d5c:	f004 f906 	bl	8019f6c <ucdr_serialize_string>
 8015d60:	4004      	ands	r4, r0
 8015d62:	b2e4      	uxtb	r4, r4
 8015d64:	4620      	mov	r0, r4
 8015d66:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015d6a:	bf00      	nop

08015d6c <uxr_deserialize_ObjectVariant>:
 8015d6c:	b570      	push	{r4, r5, r6, lr}
 8015d6e:	4605      	mov	r5, r0
 8015d70:	460e      	mov	r6, r1
 8015d72:	f7f6 f815 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8015d76:	b168      	cbz	r0, 8015d94 <uxr_deserialize_ObjectVariant+0x28>
 8015d78:	7833      	ldrb	r3, [r6, #0]
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	2b0d      	cmp	r3, #13
 8015d80:	d809      	bhi.n	8015d96 <uxr_deserialize_ObjectVariant+0x2a>
 8015d82:	e8df f003 	tbb	[pc, r3]
 8015d86:	0a41      	.short	0x0a41
 8015d88:	0a0a2323 	.word	0x0a0a2323
 8015d8c:	10080a0a 	.word	0x10080a0a
 8015d90:	565c1010 	.word	0x565c1010
 8015d94:	2400      	movs	r4, #0
 8015d96:	4620      	mov	r0, r4
 8015d98:	bd70      	pop	{r4, r5, r6, pc}
 8015d9a:	1d31      	adds	r1, r6, #4
 8015d9c:	4628      	mov	r0, r5
 8015d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015da2:	f7ff bced 	b.w	8015780 <uxr_deserialize_DATAWRITER_Representation>
 8015da6:	1d31      	adds	r1, r6, #4
 8015da8:	4628      	mov	r0, r5
 8015daa:	f7f5 fff9 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8015dae:	2800      	cmp	r0, #0
 8015db0:	d0f0      	beq.n	8015d94 <uxr_deserialize_ObjectVariant+0x28>
 8015db2:	7933      	ldrb	r3, [r6, #4]
 8015db4:	2b01      	cmp	r3, #1
 8015db6:	d001      	beq.n	8015dbc <uxr_deserialize_ObjectVariant+0x50>
 8015db8:	2b02      	cmp	r3, #2
 8015dba:	d1ec      	bne.n	8015d96 <uxr_deserialize_ObjectVariant+0x2a>
 8015dbc:	68b1      	ldr	r1, [r6, #8]
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dc8:	f004 b8e0 	b.w	8019f8c <ucdr_deserialize_string>
 8015dcc:	1d31      	adds	r1, r6, #4
 8015dce:	4628      	mov	r0, r5
 8015dd0:	f7f5 ffe6 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	b170      	cbz	r0, 8015df6 <uxr_deserialize_ObjectVariant+0x8a>
 8015dd8:	7933      	ldrb	r3, [r6, #4]
 8015dda:	2b02      	cmp	r3, #2
 8015ddc:	d04c      	beq.n	8015e78 <uxr_deserialize_ObjectVariant+0x10c>
 8015dde:	2b03      	cmp	r3, #3
 8015de0:	d109      	bne.n	8015df6 <uxr_deserialize_ObjectVariant+0x8a>
 8015de2:	f106 0308 	add.w	r3, r6, #8
 8015de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015dea:	f106 010c 	add.w	r1, r6, #12
 8015dee:	4628      	mov	r0, r5
 8015df0:	f7fc fd4c 	bl	801288c <ucdr_deserialize_sequence_uint8_t>
 8015df4:	4604      	mov	r4, r0
 8015df6:	2202      	movs	r2, #2
 8015df8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015dfc:	4628      	mov	r0, r5
 8015dfe:	f7fc fbf9 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015e02:	4020      	ands	r0, r4
 8015e04:	b2c4      	uxtb	r4, r0
 8015e06:	e7c6      	b.n	8015d96 <uxr_deserialize_ObjectVariant+0x2a>
 8015e08:	1d31      	adds	r1, r6, #4
 8015e0a:	4628      	mov	r0, r5
 8015e0c:	f7f5 ffc8 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8015e10:	4604      	mov	r4, r0
 8015e12:	b130      	cbz	r0, 8015e22 <uxr_deserialize_ObjectVariant+0xb6>
 8015e14:	7933      	ldrb	r3, [r6, #4]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d036      	beq.n	8015e88 <uxr_deserialize_ObjectVariant+0x11c>
 8015e1a:	2b03      	cmp	r3, #3
 8015e1c:	d03c      	beq.n	8015e98 <uxr_deserialize_ObjectVariant+0x12c>
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	d032      	beq.n	8015e88 <uxr_deserialize_ObjectVariant+0x11c>
 8015e22:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015e26:	4628      	mov	r0, r5
 8015e28:	f7f6 fd60 	bl	800c8ec <ucdr_deserialize_int16_t>
 8015e2c:	4020      	ands	r0, r4
 8015e2e:	b2c4      	uxtb	r4, r0
 8015e30:	e7b1      	b.n	8015d96 <uxr_deserialize_ObjectVariant+0x2a>
 8015e32:	1d31      	adds	r1, r6, #4
 8015e34:	4628      	mov	r0, r5
 8015e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e3a:	f7ff bb57 	b.w	80154ec <uxr_deserialize_CLIENT_Representation>
 8015e3e:	2204      	movs	r2, #4
 8015e40:	18b1      	adds	r1, r6, r2
 8015e42:	4628      	mov	r0, r5
 8015e44:	f7fc fbd6 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015e48:	2202      	movs	r2, #2
 8015e4a:	f106 0108 	add.w	r1, r6, #8
 8015e4e:	4604      	mov	r4, r0
 8015e50:	4628      	mov	r0, r5
 8015e52:	f7fc fbcf 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015e56:	2202      	movs	r2, #2
 8015e58:	4004      	ands	r4, r0
 8015e5a:	f106 010a 	add.w	r1, r6, #10
 8015e5e:	4628      	mov	r0, r5
 8015e60:	f7fc fbc8 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015e64:	b2e4      	uxtb	r4, r4
 8015e66:	4603      	mov	r3, r0
 8015e68:	f106 010c 	add.w	r1, r6, #12
 8015e6c:	4628      	mov	r0, r5
 8015e6e:	401c      	ands	r4, r3
 8015e70:	f7f5 ff68 	bl	800bd44 <ucdr_deserialize_bool>
 8015e74:	4004      	ands	r4, r0
 8015e76:	e78e      	b.n	8015d96 <uxr_deserialize_ObjectVariant+0x2a>
 8015e78:	68b1      	ldr	r1, [r6, #8]
 8015e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015e7e:	4628      	mov	r0, r5
 8015e80:	f004 f884 	bl	8019f8c <ucdr_deserialize_string>
 8015e84:	4604      	mov	r4, r0
 8015e86:	e7b6      	b.n	8015df6 <uxr_deserialize_ObjectVariant+0x8a>
 8015e88:	68b1      	ldr	r1, [r6, #8]
 8015e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015e8e:	4628      	mov	r0, r5
 8015e90:	f004 f87c 	bl	8019f8c <ucdr_deserialize_string>
 8015e94:	4604      	mov	r4, r0
 8015e96:	e7c4      	b.n	8015e22 <uxr_deserialize_ObjectVariant+0xb6>
 8015e98:	f106 0308 	add.w	r3, r6, #8
 8015e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015ea0:	f106 010c 	add.w	r1, r6, #12
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	f7fc fcf1 	bl	801288c <ucdr_deserialize_sequence_uint8_t>
 8015eaa:	4604      	mov	r4, r0
 8015eac:	e7b9      	b.n	8015e22 <uxr_deserialize_ObjectVariant+0xb6>
 8015eae:	bf00      	nop

08015eb0 <uxr_deserialize_BaseObjectRequest>:
 8015eb0:	b570      	push	{r4, r5, r6, lr}
 8015eb2:	2202      	movs	r2, #2
 8015eb4:	4605      	mov	r5, r0
 8015eb6:	460e      	mov	r6, r1
 8015eb8:	f7fc fb9c 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015ebc:	2202      	movs	r2, #2
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	18b1      	adds	r1, r6, r2
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	f7fc fb96 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8015ec8:	4020      	ands	r0, r4
 8015eca:	b2c0      	uxtb	r0, r0
 8015ecc:	bd70      	pop	{r4, r5, r6, pc}
 8015ece:	bf00      	nop

08015ed0 <uxr_serialize_ActivityInfoVariant>:
 8015ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ed4:	460d      	mov	r5, r1
 8015ed6:	7809      	ldrb	r1, [r1, #0]
 8015ed8:	4607      	mov	r7, r0
 8015eda:	f7f5 ff4b 	bl	800bd74 <ucdr_serialize_uint8_t>
 8015ede:	4681      	mov	r9, r0
 8015ee0:	b138      	cbz	r0, 8015ef2 <uxr_serialize_ActivityInfoVariant+0x22>
 8015ee2:	782b      	ldrb	r3, [r5, #0]
 8015ee4:	2b06      	cmp	r3, #6
 8015ee6:	f000 8082 	beq.w	8015fee <uxr_serialize_ActivityInfoVariant+0x11e>
 8015eea:	2b0d      	cmp	r3, #13
 8015eec:	d016      	beq.n	8015f1c <uxr_serialize_ActivityInfoVariant+0x4c>
 8015eee:	2b05      	cmp	r3, #5
 8015ef0:	d002      	beq.n	8015ef8 <uxr_serialize_ActivityInfoVariant+0x28>
 8015ef2:	4648      	mov	r0, r9
 8015ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ef8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015efc:	4638      	mov	r0, r7
 8015efe:	f7f6 fc75 	bl	800c7ec <ucdr_serialize_int16_t>
 8015f02:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8015f06:	4681      	mov	r9, r0
 8015f08:	4638      	mov	r0, r7
 8015f0a:	f7f6 fb9f 	bl	800c64c <ucdr_serialize_uint64_t>
 8015f0e:	ea09 0000 	and.w	r0, r9, r0
 8015f12:	fa5f f980 	uxtb.w	r9, r0
 8015f16:	4648      	mov	r0, r9
 8015f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f1c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015f20:	4638      	mov	r0, r7
 8015f22:	f7f6 fc63 	bl	800c7ec <ucdr_serialize_int16_t>
 8015f26:	68e9      	ldr	r1, [r5, #12]
 8015f28:	4681      	mov	r9, r0
 8015f2a:	4638      	mov	r0, r7
 8015f2c:	f7f6 f938 	bl	800c1a0 <ucdr_serialize_uint32_t>
 8015f30:	68eb      	ldr	r3, [r5, #12]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d0eb      	beq.n	8015f0e <uxr_serialize_ActivityInfoVariant+0x3e>
 8015f36:	b320      	cbz	r0, 8015f82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8015f38:	f105 080c 	add.w	r8, r5, #12
 8015f3c:	2600      	movs	r6, #0
 8015f3e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8015f42:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8015f46:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8015f4a:	4638      	mov	r0, r7
 8015f4c:	f7f5 ff12 	bl	800bd74 <ucdr_serialize_uint8_t>
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d053      	beq.n	8015ffc <uxr_serialize_ActivityInfoVariant+0x12c>
 8015f54:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8015f58:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015f5c:	0074      	lsls	r4, r6, #1
 8015f5e:	00c9      	lsls	r1, r1, #3
 8015f60:	2b03      	cmp	r3, #3
 8015f62:	d854      	bhi.n	801600e <uxr_serialize_ActivityInfoVariant+0x13e>
 8015f64:	e8df f003 	tbb	[pc, r3]
 8015f68:	02102132 	.word	0x02102132
 8015f6c:	4441      	add	r1, r8
 8015f6e:	4638      	mov	r0, r7
 8015f70:	6889      	ldr	r1, [r1, #8]
 8015f72:	f003 fffb 	bl	8019f6c <ucdr_serialize_string>
 8015f76:	68ea      	ldr	r2, [r5, #12]
 8015f78:	3601      	adds	r6, #1
 8015f7a:	4296      	cmp	r6, r2
 8015f7c:	d242      	bcs.n	8016004 <uxr_serialize_ActivityInfoVariant+0x134>
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	d1dd      	bne.n	8015f3e <uxr_serialize_ActivityInfoVariant+0x6e>
 8015f82:	f04f 0900 	mov.w	r9, #0
 8015f86:	e7b4      	b.n	8015ef2 <uxr_serialize_ActivityInfoVariant+0x22>
 8015f88:	3108      	adds	r1, #8
 8015f8a:	4441      	add	r1, r8
 8015f8c:	2210      	movs	r2, #16
 8015f8e:	4638      	mov	r0, r7
 8015f90:	f7fc facc 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015f94:	4434      	add	r4, r6
 8015f96:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015f9a:	4604      	mov	r4, r0
 8015f9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015f9e:	4638      	mov	r0, r7
 8015fa0:	f7f6 f8fe 	bl	800c1a0 <ucdr_serialize_uint32_t>
 8015fa4:	4020      	ands	r0, r4
 8015fa6:	b2c0      	uxtb	r0, r0
 8015fa8:	e7e5      	b.n	8015f76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015faa:	3108      	adds	r1, #8
 8015fac:	4441      	add	r1, r8
 8015fae:	2204      	movs	r2, #4
 8015fb0:	4638      	mov	r0, r7
 8015fb2:	f7fc fabb 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015fb6:	4434      	add	r4, r6
 8015fb8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015fbc:	4604      	mov	r4, r0
 8015fbe:	8b19      	ldrh	r1, [r3, #24]
 8015fc0:	4638      	mov	r0, r7
 8015fc2:	f7f5 ff03 	bl	800bdcc <ucdr_serialize_uint16_t>
 8015fc6:	4020      	ands	r0, r4
 8015fc8:	b2c0      	uxtb	r0, r0
 8015fca:	e7d4      	b.n	8015f76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015fcc:	3108      	adds	r1, #8
 8015fce:	4441      	add	r1, r8
 8015fd0:	2202      	movs	r2, #2
 8015fd2:	4638      	mov	r0, r7
 8015fd4:	f7fc faaa 	bl	801252c <ucdr_serialize_array_uint8_t>
 8015fd8:	4434      	add	r4, r6
 8015fda:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015fde:	4604      	mov	r4, r0
 8015fe0:	7d99      	ldrb	r1, [r3, #22]
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	f7f5 fec6 	bl	800bd74 <ucdr_serialize_uint8_t>
 8015fe8:	4020      	ands	r0, r4
 8015fea:	b2c0      	uxtb	r0, r0
 8015fec:	e7c3      	b.n	8015f76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015fee:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015ff2:	4638      	mov	r0, r7
 8015ff4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ff8:	f7f6 bbf8 	b.w	800c7ec <ucdr_serialize_int16_t>
 8015ffc:	68ea      	ldr	r2, [r5, #12]
 8015ffe:	3601      	adds	r6, #1
 8016000:	42b2      	cmp	r2, r6
 8016002:	d8be      	bhi.n	8015f82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8016004:	ea09 0900 	and.w	r9, r9, r0
 8016008:	fa5f f989 	uxtb.w	r9, r9
 801600c:	e771      	b.n	8015ef2 <uxr_serialize_ActivityInfoVariant+0x22>
 801600e:	68eb      	ldr	r3, [r5, #12]
 8016010:	3601      	adds	r6, #1
 8016012:	429e      	cmp	r6, r3
 8016014:	f10a 0a18 	add.w	sl, sl, #24
 8016018:	d395      	bcc.n	8015f46 <uxr_serialize_ActivityInfoVariant+0x76>
 801601a:	e76a      	b.n	8015ef2 <uxr_serialize_ActivityInfoVariant+0x22>

0801601c <uxr_deserialize_BaseObjectReply>:
 801601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016020:	2202      	movs	r2, #2
 8016022:	4606      	mov	r6, r0
 8016024:	460f      	mov	r7, r1
 8016026:	f7fc fae5 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 801602a:	2202      	movs	r2, #2
 801602c:	18b9      	adds	r1, r7, r2
 801602e:	4605      	mov	r5, r0
 8016030:	4630      	mov	r0, r6
 8016032:	f7fc fadf 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8016036:	1d39      	adds	r1, r7, #4
 8016038:	4680      	mov	r8, r0
 801603a:	4630      	mov	r0, r6
 801603c:	f7f5 feb0 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8016040:	1d79      	adds	r1, r7, #5
 8016042:	4604      	mov	r4, r0
 8016044:	4630      	mov	r0, r6
 8016046:	f7f5 feab 	bl	800bda0 <ucdr_deserialize_uint8_t>
 801604a:	ea05 0508 	and.w	r5, r5, r8
 801604e:	402c      	ands	r4, r5
 8016050:	4020      	ands	r0, r4
 8016052:	b2c0      	uxtb	r0, r0
 8016054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016058 <uxr_serialize_ReadSpecification>:
 8016058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801605c:	460e      	mov	r6, r1
 801605e:	7809      	ldrb	r1, [r1, #0]
 8016060:	4607      	mov	r7, r0
 8016062:	f7f5 fe87 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016066:	7871      	ldrb	r1, [r6, #1]
 8016068:	4604      	mov	r4, r0
 801606a:	4638      	mov	r0, r7
 801606c:	f7f5 fe82 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016070:	78b1      	ldrb	r1, [r6, #2]
 8016072:	4004      	ands	r4, r0
 8016074:	4638      	mov	r0, r7
 8016076:	f7f5 fe4f 	bl	800bd18 <ucdr_serialize_bool>
 801607a:	78b3      	ldrb	r3, [r6, #2]
 801607c:	b2e4      	uxtb	r4, r4
 801607e:	4004      	ands	r4, r0
 8016080:	b94b      	cbnz	r3, 8016096 <uxr_serialize_ReadSpecification+0x3e>
 8016082:	7a31      	ldrb	r1, [r6, #8]
 8016084:	4638      	mov	r0, r7
 8016086:	f7f5 fe47 	bl	800bd18 <ucdr_serialize_bool>
 801608a:	7a33      	ldrb	r3, [r6, #8]
 801608c:	4004      	ands	r4, r0
 801608e:	b943      	cbnz	r3, 80160a2 <uxr_serialize_ReadSpecification+0x4a>
 8016090:	4620      	mov	r0, r4
 8016092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016096:	6871      	ldr	r1, [r6, #4]
 8016098:	4638      	mov	r0, r7
 801609a:	f003 ff67 	bl	8019f6c <ucdr_serialize_string>
 801609e:	4004      	ands	r4, r0
 80160a0:	e7ef      	b.n	8016082 <uxr_serialize_ReadSpecification+0x2a>
 80160a2:	8971      	ldrh	r1, [r6, #10]
 80160a4:	4638      	mov	r0, r7
 80160a6:	f7f5 fe91 	bl	800bdcc <ucdr_serialize_uint16_t>
 80160aa:	89b1      	ldrh	r1, [r6, #12]
 80160ac:	4605      	mov	r5, r0
 80160ae:	4638      	mov	r0, r7
 80160b0:	f7f5 fe8c 	bl	800bdcc <ucdr_serialize_uint16_t>
 80160b4:	89f1      	ldrh	r1, [r6, #14]
 80160b6:	4005      	ands	r5, r0
 80160b8:	4638      	mov	r0, r7
 80160ba:	f7f5 fe87 	bl	800bdcc <ucdr_serialize_uint16_t>
 80160be:	8a31      	ldrh	r1, [r6, #16]
 80160c0:	4680      	mov	r8, r0
 80160c2:	4638      	mov	r0, r7
 80160c4:	f7f5 fe82 	bl	800bdcc <ucdr_serialize_uint16_t>
 80160c8:	b2ed      	uxtb	r5, r5
 80160ca:	4025      	ands	r5, r4
 80160cc:	ea08 0505 	and.w	r5, r8, r5
 80160d0:	ea00 0405 	and.w	r4, r0, r5
 80160d4:	4620      	mov	r0, r4
 80160d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160da:	bf00      	nop

080160dc <uxr_serialize_CREATE_CLIENT_Payload>:
 80160dc:	f7ff b9ae 	b.w	801543c <uxr_serialize_CLIENT_Representation>

080160e0 <uxr_serialize_CREATE_Payload>:
 80160e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160e2:	2202      	movs	r2, #2
 80160e4:	4607      	mov	r7, r0
 80160e6:	460e      	mov	r6, r1
 80160e8:	f7fc fa20 	bl	801252c <ucdr_serialize_array_uint8_t>
 80160ec:	2202      	movs	r2, #2
 80160ee:	18b1      	adds	r1, r6, r2
 80160f0:	4605      	mov	r5, r0
 80160f2:	4638      	mov	r0, r7
 80160f4:	f7fc fa1a 	bl	801252c <ucdr_serialize_array_uint8_t>
 80160f8:	7931      	ldrb	r1, [r6, #4]
 80160fa:	4604      	mov	r4, r0
 80160fc:	4638      	mov	r0, r7
 80160fe:	f7f5 fe39 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016102:	b170      	cbz	r0, 8016122 <uxr_serialize_CREATE_Payload+0x42>
 8016104:	7933      	ldrb	r3, [r6, #4]
 8016106:	402c      	ands	r4, r5
 8016108:	3b01      	subs	r3, #1
 801610a:	b2e4      	uxtb	r4, r4
 801610c:	2b0d      	cmp	r3, #13
 801610e:	d809      	bhi.n	8016124 <uxr_serialize_CREATE_Payload+0x44>
 8016110:	e8df f003 	tbb	[pc, r3]
 8016114:	23230a4c 	.word	0x23230a4c
 8016118:	0a0a0a0a 	.word	0x0a0a0a0a
 801611c:	12121208 	.word	0x12121208
 8016120:	3e45      	.short	0x3e45
 8016122:	2400      	movs	r4, #0
 8016124:	4620      	mov	r0, r4
 8016126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016128:	f106 0108 	add.w	r1, r6, #8
 801612c:	4638      	mov	r0, r7
 801612e:	f7ff fa8b 	bl	8015648 <uxr_serialize_DATAWRITER_Representation>
 8016132:	4004      	ands	r4, r0
 8016134:	4620      	mov	r0, r4
 8016136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016138:	7a31      	ldrb	r1, [r6, #8]
 801613a:	4638      	mov	r0, r7
 801613c:	f7f5 fe1a 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016140:	2800      	cmp	r0, #0
 8016142:	d0ee      	beq.n	8016122 <uxr_serialize_CREATE_Payload+0x42>
 8016144:	7a33      	ldrb	r3, [r6, #8]
 8016146:	2b01      	cmp	r3, #1
 8016148:	d001      	beq.n	801614e <uxr_serialize_CREATE_Payload+0x6e>
 801614a:	2b02      	cmp	r3, #2
 801614c:	d1ea      	bne.n	8016124 <uxr_serialize_CREATE_Payload+0x44>
 801614e:	68f1      	ldr	r1, [r6, #12]
 8016150:	4638      	mov	r0, r7
 8016152:	f003 ff0b 	bl	8019f6c <ucdr_serialize_string>
 8016156:	4004      	ands	r4, r0
 8016158:	e7e4      	b.n	8016124 <uxr_serialize_CREATE_Payload+0x44>
 801615a:	7a31      	ldrb	r1, [r6, #8]
 801615c:	4638      	mov	r0, r7
 801615e:	f7f5 fe09 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016162:	4605      	mov	r5, r0
 8016164:	b158      	cbz	r0, 801617e <uxr_serialize_CREATE_Payload+0x9e>
 8016166:	7a33      	ldrb	r3, [r6, #8]
 8016168:	2b02      	cmp	r3, #2
 801616a:	d034      	beq.n	80161d6 <uxr_serialize_CREATE_Payload+0xf6>
 801616c:	2b03      	cmp	r3, #3
 801616e:	d106      	bne.n	801617e <uxr_serialize_CREATE_Payload+0x9e>
 8016170:	68f2      	ldr	r2, [r6, #12]
 8016172:	f106 0110 	add.w	r1, r6, #16
 8016176:	4638      	mov	r0, r7
 8016178:	f7fc fb76 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 801617c:	4605      	mov	r5, r0
 801617e:	2202      	movs	r2, #2
 8016180:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8016184:	4638      	mov	r0, r7
 8016186:	f7fc f9d1 	bl	801252c <ucdr_serialize_array_uint8_t>
 801618a:	4028      	ands	r0, r5
 801618c:	4004      	ands	r4, r0
 801618e:	e7c9      	b.n	8016124 <uxr_serialize_CREATE_Payload+0x44>
 8016190:	f106 0108 	add.w	r1, r6, #8
 8016194:	4638      	mov	r0, r7
 8016196:	f7ff f951 	bl	801543c <uxr_serialize_CLIENT_Representation>
 801619a:	4004      	ands	r4, r0
 801619c:	e7c2      	b.n	8016124 <uxr_serialize_CREATE_Payload+0x44>
 801619e:	f106 0108 	add.w	r1, r6, #8
 80161a2:	4638      	mov	r0, r7
 80161a4:	f7ff fa06 	bl	80155b4 <uxr_serialize_AGENT_Representation>
 80161a8:	4004      	ands	r4, r0
 80161aa:	e7bb      	b.n	8016124 <uxr_serialize_CREATE_Payload+0x44>
 80161ac:	7a31      	ldrb	r1, [r6, #8]
 80161ae:	4638      	mov	r0, r7
 80161b0:	f7f5 fde0 	bl	800bd74 <ucdr_serialize_uint8_t>
 80161b4:	4605      	mov	r5, r0
 80161b6:	b130      	cbz	r0, 80161c6 <uxr_serialize_CREATE_Payload+0xe6>
 80161b8:	7a33      	ldrb	r3, [r6, #8]
 80161ba:	2b02      	cmp	r3, #2
 80161bc:	d011      	beq.n	80161e2 <uxr_serialize_CREATE_Payload+0x102>
 80161be:	2b03      	cmp	r3, #3
 80161c0:	d015      	beq.n	80161ee <uxr_serialize_CREATE_Payload+0x10e>
 80161c2:	2b01      	cmp	r3, #1
 80161c4:	d00d      	beq.n	80161e2 <uxr_serialize_CREATE_Payload+0x102>
 80161c6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80161ca:	4638      	mov	r0, r7
 80161cc:	f7f6 fb0e 	bl	800c7ec <ucdr_serialize_int16_t>
 80161d0:	4028      	ands	r0, r5
 80161d2:	4004      	ands	r4, r0
 80161d4:	e7a6      	b.n	8016124 <uxr_serialize_CREATE_Payload+0x44>
 80161d6:	68f1      	ldr	r1, [r6, #12]
 80161d8:	4638      	mov	r0, r7
 80161da:	f003 fec7 	bl	8019f6c <ucdr_serialize_string>
 80161de:	4605      	mov	r5, r0
 80161e0:	e7cd      	b.n	801617e <uxr_serialize_CREATE_Payload+0x9e>
 80161e2:	68f1      	ldr	r1, [r6, #12]
 80161e4:	4638      	mov	r0, r7
 80161e6:	f003 fec1 	bl	8019f6c <ucdr_serialize_string>
 80161ea:	4605      	mov	r5, r0
 80161ec:	e7eb      	b.n	80161c6 <uxr_serialize_CREATE_Payload+0xe6>
 80161ee:	68f2      	ldr	r2, [r6, #12]
 80161f0:	f106 0110 	add.w	r1, r6, #16
 80161f4:	4638      	mov	r0, r7
 80161f6:	f7fc fb37 	bl	8012868 <ucdr_serialize_sequence_uint8_t>
 80161fa:	4605      	mov	r5, r0
 80161fc:	e7e3      	b.n	80161c6 <uxr_serialize_CREATE_Payload+0xe6>
 80161fe:	bf00      	nop

08016200 <uxr_deserialize_GET_INFO_Payload>:
 8016200:	b570      	push	{r4, r5, r6, lr}
 8016202:	2202      	movs	r2, #2
 8016204:	4605      	mov	r5, r0
 8016206:	460e      	mov	r6, r1
 8016208:	f7fc f9f4 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 801620c:	2202      	movs	r2, #2
 801620e:	18b1      	adds	r1, r6, r2
 8016210:	4604      	mov	r4, r0
 8016212:	4628      	mov	r0, r5
 8016214:	f7fc f9ee 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8016218:	1d31      	adds	r1, r6, #4
 801621a:	4004      	ands	r4, r0
 801621c:	4628      	mov	r0, r5
 801621e:	f7f6 f8ef 	bl	800c400 <ucdr_deserialize_uint32_t>
 8016222:	b2e4      	uxtb	r4, r4
 8016224:	4020      	ands	r0, r4
 8016226:	bd70      	pop	{r4, r5, r6, pc}

08016228 <uxr_serialize_DELETE_Payload>:
 8016228:	b570      	push	{r4, r5, r6, lr}
 801622a:	2202      	movs	r2, #2
 801622c:	4605      	mov	r5, r0
 801622e:	460e      	mov	r6, r1
 8016230:	f7fc f97c 	bl	801252c <ucdr_serialize_array_uint8_t>
 8016234:	2202      	movs	r2, #2
 8016236:	4604      	mov	r4, r0
 8016238:	18b1      	adds	r1, r6, r2
 801623a:	4628      	mov	r0, r5
 801623c:	f7fc f976 	bl	801252c <ucdr_serialize_array_uint8_t>
 8016240:	4020      	ands	r0, r4
 8016242:	b2c0      	uxtb	r0, r0
 8016244:	bd70      	pop	{r4, r5, r6, pc}
 8016246:	bf00      	nop

08016248 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801624c:	4605      	mov	r5, r0
 801624e:	460e      	mov	r6, r1
 8016250:	f7f5 fda6 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8016254:	1c71      	adds	r1, r6, #1
 8016256:	4604      	mov	r4, r0
 8016258:	4628      	mov	r0, r5
 801625a:	f7f5 fda1 	bl	800bda0 <ucdr_deserialize_uint8_t>
 801625e:	2204      	movs	r2, #4
 8016260:	18b1      	adds	r1, r6, r2
 8016262:	4680      	mov	r8, r0
 8016264:	4628      	mov	r0, r5
 8016266:	f7fc f9c5 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 801626a:	f106 0108 	add.w	r1, r6, #8
 801626e:	4607      	mov	r7, r0
 8016270:	2202      	movs	r2, #2
 8016272:	4628      	mov	r0, r5
 8016274:	f7fc f9be 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8016278:	ea04 0308 	and.w	r3, r4, r8
 801627c:	b2db      	uxtb	r3, r3
 801627e:	ea03 0407 	and.w	r4, r3, r7
 8016282:	2202      	movs	r2, #2
 8016284:	4607      	mov	r7, r0
 8016286:	f106 010a 	add.w	r1, r6, #10
 801628a:	4628      	mov	r0, r5
 801628c:	f7fc f9b2 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8016290:	f106 010c 	add.w	r1, r6, #12
 8016294:	4603      	mov	r3, r0
 8016296:	4628      	mov	r0, r5
 8016298:	461d      	mov	r5, r3
 801629a:	f7f5 fd53 	bl	800bd44 <ucdr_deserialize_bool>
 801629e:	403c      	ands	r4, r7
 80162a0:	4025      	ands	r5, r4
 80162a2:	4028      	ands	r0, r5
 80162a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162a8 <uxr_deserialize_STATUS_Payload>:
 80162a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ac:	2202      	movs	r2, #2
 80162ae:	4606      	mov	r6, r0
 80162b0:	460f      	mov	r7, r1
 80162b2:	f7fc f99f 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 80162b6:	2202      	movs	r2, #2
 80162b8:	18b9      	adds	r1, r7, r2
 80162ba:	4605      	mov	r5, r0
 80162bc:	4630      	mov	r0, r6
 80162be:	f7fc f999 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 80162c2:	1d39      	adds	r1, r7, #4
 80162c4:	4680      	mov	r8, r0
 80162c6:	4630      	mov	r0, r6
 80162c8:	f7f5 fd6a 	bl	800bda0 <ucdr_deserialize_uint8_t>
 80162cc:	1d79      	adds	r1, r7, #5
 80162ce:	4604      	mov	r4, r0
 80162d0:	4630      	mov	r0, r6
 80162d2:	f7f5 fd65 	bl	800bda0 <ucdr_deserialize_uint8_t>
 80162d6:	ea05 0508 	and.w	r5, r5, r8
 80162da:	402c      	ands	r4, r5
 80162dc:	4020      	ands	r0, r4
 80162de:	b2c0      	uxtb	r0, r0
 80162e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162e4 <uxr_serialize_INFO_Payload>:
 80162e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e8:	2202      	movs	r2, #2
 80162ea:	460c      	mov	r4, r1
 80162ec:	4605      	mov	r5, r0
 80162ee:	f7fc f91d 	bl	801252c <ucdr_serialize_array_uint8_t>
 80162f2:	2202      	movs	r2, #2
 80162f4:	18a1      	adds	r1, r4, r2
 80162f6:	4680      	mov	r8, r0
 80162f8:	4628      	mov	r0, r5
 80162fa:	f7fc f917 	bl	801252c <ucdr_serialize_array_uint8_t>
 80162fe:	7921      	ldrb	r1, [r4, #4]
 8016300:	4607      	mov	r7, r0
 8016302:	4628      	mov	r0, r5
 8016304:	f7f5 fd36 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016308:	7961      	ldrb	r1, [r4, #5]
 801630a:	4606      	mov	r6, r0
 801630c:	4628      	mov	r0, r5
 801630e:	f7f5 fd31 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016312:	ea08 0807 	and.w	r8, r8, r7
 8016316:	ea06 0608 	and.w	r6, r6, r8
 801631a:	4006      	ands	r6, r0
 801631c:	7a21      	ldrb	r1, [r4, #8]
 801631e:	4628      	mov	r0, r5
 8016320:	f7f5 fcfa 	bl	800bd18 <ucdr_serialize_bool>
 8016324:	7a23      	ldrb	r3, [r4, #8]
 8016326:	b2f7      	uxtb	r7, r6
 8016328:	4606      	mov	r6, r0
 801632a:	b96b      	cbnz	r3, 8016348 <uxr_serialize_INFO_Payload+0x64>
 801632c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8016330:	4628      	mov	r0, r5
 8016332:	f7f5 fcf1 	bl	800bd18 <ucdr_serialize_bool>
 8016336:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801633a:	4030      	ands	r0, r6
 801633c:	b2c6      	uxtb	r6, r0
 801633e:	b983      	cbnz	r3, 8016362 <uxr_serialize_INFO_Payload+0x7e>
 8016340:	ea06 0007 	and.w	r0, r6, r7
 8016344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016348:	7b21      	ldrb	r1, [r4, #12]
 801634a:	4628      	mov	r0, r5
 801634c:	f7f5 fd12 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016350:	b188      	cbz	r0, 8016376 <uxr_serialize_INFO_Payload+0x92>
 8016352:	f104 010c 	add.w	r1, r4, #12
 8016356:	4628      	mov	r0, r5
 8016358:	f7ff f99e 	bl	8015698 <uxr_serialize_ObjectVariant.part.0>
 801635c:	4030      	ands	r0, r6
 801635e:	b2c6      	uxtb	r6, r0
 8016360:	e7e4      	b.n	801632c <uxr_serialize_INFO_Payload+0x48>
 8016362:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8016366:	4628      	mov	r0, r5
 8016368:	f7ff fdb2 	bl	8015ed0 <uxr_serialize_ActivityInfoVariant>
 801636c:	4006      	ands	r6, r0
 801636e:	ea06 0007 	and.w	r0, r6, r7
 8016372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016376:	4606      	mov	r6, r0
 8016378:	e7d8      	b.n	801632c <uxr_serialize_INFO_Payload+0x48>
 801637a:	bf00      	nop

0801637c <uxr_serialize_READ_DATA_Payload>:
 801637c:	b570      	push	{r4, r5, r6, lr}
 801637e:	2202      	movs	r2, #2
 8016380:	4605      	mov	r5, r0
 8016382:	460e      	mov	r6, r1
 8016384:	f7fc f8d2 	bl	801252c <ucdr_serialize_array_uint8_t>
 8016388:	2202      	movs	r2, #2
 801638a:	18b1      	adds	r1, r6, r2
 801638c:	4604      	mov	r4, r0
 801638e:	4628      	mov	r0, r5
 8016390:	f7fc f8cc 	bl	801252c <ucdr_serialize_array_uint8_t>
 8016394:	1d31      	adds	r1, r6, #4
 8016396:	4004      	ands	r4, r0
 8016398:	4628      	mov	r0, r5
 801639a:	f7ff fe5d 	bl	8016058 <uxr_serialize_ReadSpecification>
 801639e:	b2e4      	uxtb	r4, r4
 80163a0:	4020      	ands	r0, r4
 80163a2:	bd70      	pop	{r4, r5, r6, pc}

080163a4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80163a4:	b570      	push	{r4, r5, r6, lr}
 80163a6:	2202      	movs	r2, #2
 80163a8:	4605      	mov	r5, r0
 80163aa:	460e      	mov	r6, r1
 80163ac:	f7fc f8be 	bl	801252c <ucdr_serialize_array_uint8_t>
 80163b0:	2202      	movs	r2, #2
 80163b2:	4604      	mov	r4, r0
 80163b4:	18b1      	adds	r1, r6, r2
 80163b6:	4628      	mov	r0, r5
 80163b8:	f7fc f8b8 	bl	801252c <ucdr_serialize_array_uint8_t>
 80163bc:	4020      	ands	r0, r4
 80163be:	b2c0      	uxtb	r0, r0
 80163c0:	bd70      	pop	{r4, r5, r6, pc}
 80163c2:	bf00      	nop

080163c4 <uxr_serialize_ACKNACK_Payload>:
 80163c4:	b570      	push	{r4, r5, r6, lr}
 80163c6:	460c      	mov	r4, r1
 80163c8:	460e      	mov	r6, r1
 80163ca:	f834 1b02 	ldrh.w	r1, [r4], #2
 80163ce:	4605      	mov	r5, r0
 80163d0:	f7f5 fcfc 	bl	800bdcc <ucdr_serialize_uint16_t>
 80163d4:	2202      	movs	r2, #2
 80163d6:	4621      	mov	r1, r4
 80163d8:	4604      	mov	r4, r0
 80163da:	4628      	mov	r0, r5
 80163dc:	f7fc f8a6 	bl	801252c <ucdr_serialize_array_uint8_t>
 80163e0:	7931      	ldrb	r1, [r6, #4]
 80163e2:	4004      	ands	r4, r0
 80163e4:	4628      	mov	r0, r5
 80163e6:	f7f5 fcc5 	bl	800bd74 <ucdr_serialize_uint8_t>
 80163ea:	b2e4      	uxtb	r4, r4
 80163ec:	4020      	ands	r0, r4
 80163ee:	bd70      	pop	{r4, r5, r6, pc}

080163f0 <uxr_deserialize_ACKNACK_Payload>:
 80163f0:	b570      	push	{r4, r5, r6, lr}
 80163f2:	4605      	mov	r5, r0
 80163f4:	460e      	mov	r6, r1
 80163f6:	f7f5 fde9 	bl	800bfcc <ucdr_deserialize_uint16_t>
 80163fa:	2202      	movs	r2, #2
 80163fc:	18b1      	adds	r1, r6, r2
 80163fe:	4604      	mov	r4, r0
 8016400:	4628      	mov	r0, r5
 8016402:	f7fc f8f7 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8016406:	1d31      	adds	r1, r6, #4
 8016408:	4004      	ands	r4, r0
 801640a:	4628      	mov	r0, r5
 801640c:	f7f5 fcc8 	bl	800bda0 <ucdr_deserialize_uint8_t>
 8016410:	b2e4      	uxtb	r4, r4
 8016412:	4020      	ands	r0, r4
 8016414:	bd70      	pop	{r4, r5, r6, pc}
 8016416:	bf00      	nop

08016418 <uxr_serialize_HEARTBEAT_Payload>:
 8016418:	b570      	push	{r4, r5, r6, lr}
 801641a:	460d      	mov	r5, r1
 801641c:	8809      	ldrh	r1, [r1, #0]
 801641e:	4606      	mov	r6, r0
 8016420:	f7f5 fcd4 	bl	800bdcc <ucdr_serialize_uint16_t>
 8016424:	8869      	ldrh	r1, [r5, #2]
 8016426:	4604      	mov	r4, r0
 8016428:	4630      	mov	r0, r6
 801642a:	f7f5 fccf 	bl	800bdcc <ucdr_serialize_uint16_t>
 801642e:	7929      	ldrb	r1, [r5, #4]
 8016430:	4004      	ands	r4, r0
 8016432:	4630      	mov	r0, r6
 8016434:	f7f5 fc9e 	bl	800bd74 <ucdr_serialize_uint8_t>
 8016438:	b2e4      	uxtb	r4, r4
 801643a:	4020      	ands	r0, r4
 801643c:	bd70      	pop	{r4, r5, r6, pc}
 801643e:	bf00      	nop

08016440 <uxr_deserialize_HEARTBEAT_Payload>:
 8016440:	b570      	push	{r4, r5, r6, lr}
 8016442:	4605      	mov	r5, r0
 8016444:	460e      	mov	r6, r1
 8016446:	f7f5 fdc1 	bl	800bfcc <ucdr_deserialize_uint16_t>
 801644a:	1cb1      	adds	r1, r6, #2
 801644c:	4604      	mov	r4, r0
 801644e:	4628      	mov	r0, r5
 8016450:	f7f5 fdbc 	bl	800bfcc <ucdr_deserialize_uint16_t>
 8016454:	1d31      	adds	r1, r6, #4
 8016456:	4004      	ands	r4, r0
 8016458:	4628      	mov	r0, r5
 801645a:	f7f5 fca1 	bl	800bda0 <ucdr_deserialize_uint8_t>
 801645e:	b2e4      	uxtb	r4, r4
 8016460:	4020      	ands	r0, r4
 8016462:	bd70      	pop	{r4, r5, r6, pc}

08016464 <uxr_serialize_TIMESTAMP_Payload>:
 8016464:	b570      	push	{r4, r5, r6, lr}
 8016466:	460d      	mov	r5, r1
 8016468:	6809      	ldr	r1, [r1, #0]
 801646a:	4606      	mov	r6, r0
 801646c:	f7f6 fab2 	bl	800c9d4 <ucdr_serialize_int32_t>
 8016470:	6869      	ldr	r1, [r5, #4]
 8016472:	4604      	mov	r4, r0
 8016474:	4630      	mov	r0, r6
 8016476:	f7f5 fe93 	bl	800c1a0 <ucdr_serialize_uint32_t>
 801647a:	4020      	ands	r0, r4
 801647c:	b2c0      	uxtb	r0, r0
 801647e:	bd70      	pop	{r4, r5, r6, pc}

08016480 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016484:	4605      	mov	r5, r0
 8016486:	460e      	mov	r6, r1
 8016488:	f7f6 fb3c 	bl	800cb04 <ucdr_deserialize_int32_t>
 801648c:	1d31      	adds	r1, r6, #4
 801648e:	4607      	mov	r7, r0
 8016490:	4628      	mov	r0, r5
 8016492:	f7f5 ffb5 	bl	800c400 <ucdr_deserialize_uint32_t>
 8016496:	f106 0108 	add.w	r1, r6, #8
 801649a:	4680      	mov	r8, r0
 801649c:	4628      	mov	r0, r5
 801649e:	f7f6 fb31 	bl	800cb04 <ucdr_deserialize_int32_t>
 80164a2:	f106 010c 	add.w	r1, r6, #12
 80164a6:	4604      	mov	r4, r0
 80164a8:	4628      	mov	r0, r5
 80164aa:	f7f5 ffa9 	bl	800c400 <ucdr_deserialize_uint32_t>
 80164ae:	ea07 0708 	and.w	r7, r7, r8
 80164b2:	403c      	ands	r4, r7
 80164b4:	f106 0110 	add.w	r1, r6, #16
 80164b8:	4004      	ands	r4, r0
 80164ba:	4628      	mov	r0, r5
 80164bc:	f7f6 fb22 	bl	800cb04 <ucdr_deserialize_int32_t>
 80164c0:	f106 0114 	add.w	r1, r6, #20
 80164c4:	4607      	mov	r7, r0
 80164c6:	4628      	mov	r0, r5
 80164c8:	f7f5 ff9a 	bl	800c400 <ucdr_deserialize_uint32_t>
 80164cc:	b2e4      	uxtb	r4, r4
 80164ce:	403c      	ands	r4, r7
 80164d0:	4020      	ands	r0, r4
 80164d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d6:	bf00      	nop

080164d8 <uxr_serialize_SampleIdentity>:
 80164d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164dc:	220c      	movs	r2, #12
 80164de:	4604      	mov	r4, r0
 80164e0:	460d      	mov	r5, r1
 80164e2:	f7fc f823 	bl	801252c <ucdr_serialize_array_uint8_t>
 80164e6:	2203      	movs	r2, #3
 80164e8:	f105 010c 	add.w	r1, r5, #12
 80164ec:	4607      	mov	r7, r0
 80164ee:	4620      	mov	r0, r4
 80164f0:	f7fc f81c 	bl	801252c <ucdr_serialize_array_uint8_t>
 80164f4:	7be9      	ldrb	r1, [r5, #15]
 80164f6:	4680      	mov	r8, r0
 80164f8:	4620      	mov	r0, r4
 80164fa:	f7f5 fc3b 	bl	800bd74 <ucdr_serialize_uint8_t>
 80164fe:	6929      	ldr	r1, [r5, #16]
 8016500:	4606      	mov	r6, r0
 8016502:	4620      	mov	r0, r4
 8016504:	f7f6 fa66 	bl	800c9d4 <ucdr_serialize_int32_t>
 8016508:	6969      	ldr	r1, [r5, #20]
 801650a:	4603      	mov	r3, r0
 801650c:	4620      	mov	r0, r4
 801650e:	ea07 0708 	and.w	r7, r7, r8
 8016512:	461c      	mov	r4, r3
 8016514:	f7f5 fe44 	bl	800c1a0 <ucdr_serialize_uint32_t>
 8016518:	403e      	ands	r6, r7
 801651a:	4034      	ands	r4, r6
 801651c:	4020      	ands	r0, r4
 801651e:	b2c0      	uxtb	r0, r0
 8016520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016524 <uxr_deserialize_SampleIdentity>:
 8016524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016528:	220c      	movs	r2, #12
 801652a:	4604      	mov	r4, r0
 801652c:	460d      	mov	r5, r1
 801652e:	f7fc f861 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8016532:	2203      	movs	r2, #3
 8016534:	f105 010c 	add.w	r1, r5, #12
 8016538:	4607      	mov	r7, r0
 801653a:	4620      	mov	r0, r4
 801653c:	f7fc f85a 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8016540:	f105 010f 	add.w	r1, r5, #15
 8016544:	4680      	mov	r8, r0
 8016546:	4620      	mov	r0, r4
 8016548:	f7f5 fc2a 	bl	800bda0 <ucdr_deserialize_uint8_t>
 801654c:	f105 0110 	add.w	r1, r5, #16
 8016550:	4606      	mov	r6, r0
 8016552:	4620      	mov	r0, r4
 8016554:	f7f6 fad6 	bl	800cb04 <ucdr_deserialize_int32_t>
 8016558:	f105 0114 	add.w	r1, r5, #20
 801655c:	4603      	mov	r3, r0
 801655e:	4620      	mov	r0, r4
 8016560:	ea07 0708 	and.w	r7, r7, r8
 8016564:	461c      	mov	r4, r3
 8016566:	f7f5 ff4b 	bl	800c400 <ucdr_deserialize_uint32_t>
 801656a:	403e      	ands	r6, r7
 801656c:	4034      	ands	r4, r6
 801656e:	4020      	ands	r0, r4
 8016570:	b2c0      	uxtb	r0, r0
 8016572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016576:	bf00      	nop

08016578 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016578:	280b      	cmp	r0, #11
 801657a:	dc0d      	bgt.n	8016598 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801657c:	2800      	cmp	r0, #0
 801657e:	db09      	blt.n	8016594 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016580:	280b      	cmp	r0, #11
 8016582:	d807      	bhi.n	8016594 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016584:	e8df f000 	tbb	[pc, r0]
 8016588:	07060607 	.word	0x07060607
 801658c:	06060606 	.word	0x06060606
 8016590:	07070606 	.word	0x07070606
 8016594:	2001      	movs	r0, #1
 8016596:	4770      	bx	lr
 8016598:	28cb      	cmp	r0, #203	@ 0xcb
 801659a:	bf18      	it	ne
 801659c:	2001      	movne	r0, #1
 801659e:	4770      	bx	lr

080165a0 <rcl_get_zero_initialized_context>:
 80165a0:	4a03      	ldr	r2, [pc, #12]	@ (80165b0 <rcl_get_zero_initialized_context+0x10>)
 80165a2:	4603      	mov	r3, r0
 80165a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80165ac:	4618      	mov	r0, r3
 80165ae:	4770      	bx	lr
 80165b0:	0801f158 	.word	0x0801f158

080165b4 <rcl_context_is_valid>:
 80165b4:	b118      	cbz	r0, 80165be <rcl_context_is_valid+0xa>
 80165b6:	6840      	ldr	r0, [r0, #4]
 80165b8:	3800      	subs	r0, #0
 80165ba:	bf18      	it	ne
 80165bc:	2001      	movne	r0, #1
 80165be:	4770      	bx	lr

080165c0 <__cleanup_context>:
 80165c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c4:	4606      	mov	r6, r0
 80165c6:	6800      	ldr	r0, [r0, #0]
 80165c8:	2300      	movs	r3, #0
 80165ca:	6073      	str	r3, [r6, #4]
 80165cc:	2800      	cmp	r0, #0
 80165ce:	d049      	beq.n	8016664 <__cleanup_context+0xa4>
 80165d0:	6947      	ldr	r7, [r0, #20]
 80165d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80165d6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80165da:	b137      	cbz	r7, 80165ea <__cleanup_context+0x2a>
 80165dc:	3014      	adds	r0, #20
 80165de:	f7f7 f8c9 	bl	800d774 <rcl_init_options_fini>
 80165e2:	4607      	mov	r7, r0
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d144      	bne.n	8016672 <__cleanup_context+0xb2>
 80165e8:	6830      	ldr	r0, [r6, #0]
 80165ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80165ec:	b143      	cbz	r3, 8016600 <__cleanup_context+0x40>
 80165ee:	3028      	adds	r0, #40	@ 0x28
 80165f0:	f7f9 fd9e 	bl	8010130 <rmw_context_fini>
 80165f4:	b118      	cbz	r0, 80165fe <__cleanup_context+0x3e>
 80165f6:	2f00      	cmp	r7, #0
 80165f8:	d03e      	beq.n	8016678 <__cleanup_context+0xb8>
 80165fa:	f7f8 fdd1 	bl	800f1a0 <rcutils_reset_error>
 80165fe:	6830      	ldr	r0, [r6, #0]
 8016600:	6a03      	ldr	r3, [r0, #32]
 8016602:	b1db      	cbz	r3, 801663c <__cleanup_context+0x7c>
 8016604:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8016608:	2a01      	cmp	r2, #1
 801660a:	f17c 0100 	sbcs.w	r1, ip, #0
 801660e:	db11      	blt.n	8016634 <__cleanup_context+0x74>
 8016610:	2400      	movs	r4, #0
 8016612:	4625      	mov	r5, r4
 8016614:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016618:	4649      	mov	r1, r9
 801661a:	b1b8      	cbz	r0, 801664c <__cleanup_context+0x8c>
 801661c:	47c0      	blx	r8
 801661e:	6833      	ldr	r3, [r6, #0]
 8016620:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8016624:	3401      	adds	r4, #1
 8016626:	f145 0500 	adc.w	r5, r5, #0
 801662a:	4294      	cmp	r4, r2
 801662c:	eb75 010c 	sbcs.w	r1, r5, ip
 8016630:	6a1b      	ldr	r3, [r3, #32]
 8016632:	dbef      	blt.n	8016614 <__cleanup_context+0x54>
 8016634:	4618      	mov	r0, r3
 8016636:	4649      	mov	r1, r9
 8016638:	47c0      	blx	r8
 801663a:	6830      	ldr	r0, [r6, #0]
 801663c:	4649      	mov	r1, r9
 801663e:	47c0      	blx	r8
 8016640:	2300      	movs	r3, #0
 8016642:	e9c6 3300 	strd	r3, r3, [r6]
 8016646:	4638      	mov	r0, r7
 8016648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801664c:	3401      	adds	r4, #1
 801664e:	f145 0500 	adc.w	r5, r5, #0
 8016652:	4294      	cmp	r4, r2
 8016654:	eb75 010c 	sbcs.w	r1, r5, ip
 8016658:	dbdc      	blt.n	8016614 <__cleanup_context+0x54>
 801665a:	4618      	mov	r0, r3
 801665c:	4649      	mov	r1, r9
 801665e:	47c0      	blx	r8
 8016660:	6830      	ldr	r0, [r6, #0]
 8016662:	e7eb      	b.n	801663c <__cleanup_context+0x7c>
 8016664:	4607      	mov	r7, r0
 8016666:	2300      	movs	r3, #0
 8016668:	e9c6 3300 	strd	r3, r3, [r6]
 801666c:	4638      	mov	r0, r7
 801666e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016672:	f7f8 fd95 	bl	800f1a0 <rcutils_reset_error>
 8016676:	e7b7      	b.n	80165e8 <__cleanup_context+0x28>
 8016678:	f7ff ff7e 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 801667c:	4607      	mov	r7, r0
 801667e:	e7bc      	b.n	80165fa <__cleanup_context+0x3a>

08016680 <rcl_expand_topic_name>:
 8016680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016684:	b08b      	sub	sp, #44	@ 0x2c
 8016686:	9306      	str	r3, [sp, #24]
 8016688:	2800      	cmp	r0, #0
 801668a:	f000 80ad 	beq.w	80167e8 <rcl_expand_topic_name+0x168>
 801668e:	460e      	mov	r6, r1
 8016690:	2900      	cmp	r1, #0
 8016692:	f000 80a9 	beq.w	80167e8 <rcl_expand_topic_name+0x168>
 8016696:	4617      	mov	r7, r2
 8016698:	2a00      	cmp	r2, #0
 801669a:	f000 80a5 	beq.w	80167e8 <rcl_expand_topic_name+0x168>
 801669e:	2b00      	cmp	r3, #0
 80166a0:	f000 80a2 	beq.w	80167e8 <rcl_expand_topic_name+0x168>
 80166a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	f000 809e 	beq.w	80167e8 <rcl_expand_topic_name+0x168>
 80166ac:	2200      	movs	r2, #0
 80166ae:	a909      	add	r1, sp, #36	@ 0x24
 80166b0:	4680      	mov	r8, r0
 80166b2:	f001 faf1 	bl	8017c98 <rcl_validate_topic_name>
 80166b6:	4604      	mov	r4, r0
 80166b8:	2800      	cmp	r0, #0
 80166ba:	f040 8096 	bne.w	80167ea <rcl_expand_topic_name+0x16a>
 80166be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	f040 809a 	bne.w	80167fa <rcl_expand_topic_name+0x17a>
 80166c6:	4602      	mov	r2, r0
 80166c8:	a909      	add	r1, sp, #36	@ 0x24
 80166ca:	4630      	mov	r0, r6
 80166cc:	f7f9 f952 	bl	800f974 <rmw_validate_node_name>
 80166d0:	2800      	cmp	r0, #0
 80166d2:	f040 808e 	bne.w	80167f2 <rcl_expand_topic_name+0x172>
 80166d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166d8:	2a00      	cmp	r2, #0
 80166da:	f040 8093 	bne.w	8016804 <rcl_expand_topic_name+0x184>
 80166de:	a909      	add	r1, sp, #36	@ 0x24
 80166e0:	4638      	mov	r0, r7
 80166e2:	f7f9 f929 	bl	800f938 <rmw_validate_namespace>
 80166e6:	2800      	cmp	r0, #0
 80166e8:	f040 8083 	bne.w	80167f2 <rcl_expand_topic_name+0x172>
 80166ec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80166ee:	2c00      	cmp	r4, #0
 80166f0:	f040 80ed 	bne.w	80168ce <rcl_expand_topic_name+0x24e>
 80166f4:	217b      	movs	r1, #123	@ 0x7b
 80166f6:	4640      	mov	r0, r8
 80166f8:	f004 ff64 	bl	801b5c4 <strchr>
 80166fc:	f898 3000 	ldrb.w	r3, [r8]
 8016700:	2b2f      	cmp	r3, #47	@ 0x2f
 8016702:	4605      	mov	r5, r0
 8016704:	f000 809e 	beq.w	8016844 <rcl_expand_topic_name+0x1c4>
 8016708:	2b7e      	cmp	r3, #126	@ 0x7e
 801670a:	f040 80a2 	bne.w	8016852 <rcl_expand_topic_name+0x1d2>
 801670e:	4638      	mov	r0, r7
 8016710:	f7e9 fd90 	bl	8000234 <strlen>
 8016714:	4a82      	ldr	r2, [pc, #520]	@ (8016920 <rcl_expand_topic_name+0x2a0>)
 8016716:	4b83      	ldr	r3, [pc, #524]	@ (8016924 <rcl_expand_topic_name+0x2a4>)
 8016718:	2801      	cmp	r0, #1
 801671a:	bf18      	it	ne
 801671c:	4613      	movne	r3, r2
 801671e:	9302      	str	r3, [sp, #8]
 8016720:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016722:	9300      	str	r3, [sp, #0]
 8016724:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016728:	f108 0301 	add.w	r3, r8, #1
 801672c:	9305      	str	r3, [sp, #20]
 801672e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016732:	9301      	str	r3, [sp, #4]
 8016734:	ab14      	add	r3, sp, #80	@ 0x50
 8016736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016738:	f7f8 fd4e 	bl	800f1d8 <rcutils_format_string_limit>
 801673c:	4682      	mov	sl, r0
 801673e:	2800      	cmp	r0, #0
 8016740:	f000 80c7 	beq.w	80168d2 <rcl_expand_topic_name+0x252>
 8016744:	2d00      	cmp	r5, #0
 8016746:	f000 80a2 	beq.w	801688e <rcl_expand_topic_name+0x20e>
 801674a:	217b      	movs	r1, #123	@ 0x7b
 801674c:	f004 ff3a 	bl	801b5c4 <strchr>
 8016750:	46d1      	mov	r9, sl
 8016752:	4605      	mov	r5, r0
 8016754:	9407      	str	r4, [sp, #28]
 8016756:	46d3      	mov	fp, sl
 8016758:	464c      	mov	r4, r9
 801675a:	2d00      	cmp	r5, #0
 801675c:	f000 80be 	beq.w	80168dc <rcl_expand_topic_name+0x25c>
 8016760:	217d      	movs	r1, #125	@ 0x7d
 8016762:	4620      	mov	r0, r4
 8016764:	f004 ff2e 	bl	801b5c4 <strchr>
 8016768:	eba0 0905 	sub.w	r9, r0, r5
 801676c:	f109 0a01 	add.w	sl, r9, #1
 8016770:	486d      	ldr	r0, [pc, #436]	@ (8016928 <rcl_expand_topic_name+0x2a8>)
 8016772:	4652      	mov	r2, sl
 8016774:	4629      	mov	r1, r5
 8016776:	f004 ff32 	bl	801b5de <strncmp>
 801677a:	2800      	cmp	r0, #0
 801677c:	d067      	beq.n	801684e <rcl_expand_topic_name+0x1ce>
 801677e:	486b      	ldr	r0, [pc, #428]	@ (801692c <rcl_expand_topic_name+0x2ac>)
 8016780:	4652      	mov	r2, sl
 8016782:	4629      	mov	r1, r5
 8016784:	f004 ff2b 	bl	801b5de <strncmp>
 8016788:	b130      	cbz	r0, 8016798 <rcl_expand_topic_name+0x118>
 801678a:	4869      	ldr	r0, [pc, #420]	@ (8016930 <rcl_expand_topic_name+0x2b0>)
 801678c:	4652      	mov	r2, sl
 801678e:	4629      	mov	r1, r5
 8016790:	f004 ff25 	bl	801b5de <strncmp>
 8016794:	2800      	cmp	r0, #0
 8016796:	d137      	bne.n	8016808 <rcl_expand_topic_name+0x188>
 8016798:	46b9      	mov	r9, r7
 801679a:	ab16      	add	r3, sp, #88	@ 0x58
 801679c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80167a4:	ab14      	add	r3, sp, #80	@ 0x50
 80167a6:	4628      	mov	r0, r5
 80167a8:	cb0c      	ldmia	r3, {r2, r3}
 80167aa:	4651      	mov	r1, sl
 80167ac:	f7f8 fe50 	bl	800f450 <rcutils_strndup>
 80167b0:	4605      	mov	r5, r0
 80167b2:	2800      	cmp	r0, #0
 80167b4:	f000 809c 	beq.w	80168f0 <rcl_expand_topic_name+0x270>
 80167b8:	464a      	mov	r2, r9
 80167ba:	4620      	mov	r0, r4
 80167bc:	ab14      	add	r3, sp, #80	@ 0x50
 80167be:	4629      	mov	r1, r5
 80167c0:	f7f8 fd44 	bl	800f24c <rcutils_repl_str>
 80167c4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167c8:	4604      	mov	r4, r0
 80167ca:	4628      	mov	r0, r5
 80167cc:	4798      	blx	r3
 80167ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167d0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167d2:	4658      	mov	r0, fp
 80167d4:	4798      	blx	r3
 80167d6:	2c00      	cmp	r4, #0
 80167d8:	d07b      	beq.n	80168d2 <rcl_expand_topic_name+0x252>
 80167da:	217b      	movs	r1, #123	@ 0x7b
 80167dc:	4620      	mov	r0, r4
 80167de:	f004 fef1 	bl	801b5c4 <strchr>
 80167e2:	46a3      	mov	fp, r4
 80167e4:	4605      	mov	r5, r0
 80167e6:	e7b8      	b.n	801675a <rcl_expand_topic_name+0xda>
 80167e8:	240b      	movs	r4, #11
 80167ea:	4620      	mov	r0, r4
 80167ec:	b00b      	add	sp, #44	@ 0x2c
 80167ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f2:	f7ff fec1 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 80167f6:	4604      	mov	r4, r0
 80167f8:	e7f7      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 80167fa:	2467      	movs	r4, #103	@ 0x67
 80167fc:	4620      	mov	r0, r4
 80167fe:	b00b      	add	sp, #44	@ 0x2c
 8016800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016804:	24c9      	movs	r4, #201	@ 0xc9
 8016806:	e7f0      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 8016808:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801680c:	9806      	ldr	r0, [sp, #24]
 801680e:	1c69      	adds	r1, r5, #1
 8016810:	f7f8 ff38 	bl	800f684 <rcutils_string_map_getn>
 8016814:	4681      	mov	r9, r0
 8016816:	2800      	cmp	r0, #0
 8016818:	d1bf      	bne.n	801679a <rcl_expand_topic_name+0x11a>
 801681a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801681c:	aa16      	add	r2, sp, #88	@ 0x58
 801681e:	6018      	str	r0, [r3, #0]
 8016820:	ca07      	ldmia	r2, {r0, r1, r2}
 8016822:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016826:	ab14      	add	r3, sp, #80	@ 0x50
 8016828:	cb0c      	ldmia	r3, {r2, r3}
 801682a:	4651      	mov	r1, sl
 801682c:	4628      	mov	r0, r5
 801682e:	f7f8 fe0f 	bl	800f450 <rcutils_strndup>
 8016832:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016834:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016836:	4798      	blx	r3
 8016838:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801683a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801683c:	4658      	mov	r0, fp
 801683e:	2469      	movs	r4, #105	@ 0x69
 8016840:	4798      	blx	r3
 8016842:	e7d2      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 8016844:	2800      	cmp	r0, #0
 8016846:	d05b      	beq.n	8016900 <rcl_expand_topic_name+0x280>
 8016848:	46c1      	mov	r9, r8
 801684a:	46a2      	mov	sl, r4
 801684c:	e782      	b.n	8016754 <rcl_expand_topic_name+0xd4>
 801684e:	46b1      	mov	r9, r6
 8016850:	e7a3      	b.n	801679a <rcl_expand_topic_name+0x11a>
 8016852:	2800      	cmp	r0, #0
 8016854:	d1f8      	bne.n	8016848 <rcl_expand_topic_name+0x1c8>
 8016856:	4638      	mov	r0, r7
 8016858:	f7e9 fcec 	bl	8000234 <strlen>
 801685c:	4a35      	ldr	r2, [pc, #212]	@ (8016934 <rcl_expand_topic_name+0x2b4>)
 801685e:	4b36      	ldr	r3, [pc, #216]	@ (8016938 <rcl_expand_topic_name+0x2b8>)
 8016860:	f8cd 8010 	str.w	r8, [sp, #16]
 8016864:	2801      	cmp	r0, #1
 8016866:	bf18      	it	ne
 8016868:	4613      	movne	r3, r2
 801686a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801686e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016872:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016874:	9703      	str	r7, [sp, #12]
 8016876:	9200      	str	r2, [sp, #0]
 8016878:	ab14      	add	r3, sp, #80	@ 0x50
 801687a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801687c:	f7f8 fcac 	bl	800f1d8 <rcutils_format_string_limit>
 8016880:	4682      	mov	sl, r0
 8016882:	4653      	mov	r3, sl
 8016884:	b32b      	cbz	r3, 80168d2 <rcl_expand_topic_name+0x252>
 8016886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016888:	f8c3 a000 	str.w	sl, [r3]
 801688c:	e7ad      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 801688e:	f89a 3000 	ldrb.w	r3, [sl]
 8016892:	2b2f      	cmp	r3, #47	@ 0x2f
 8016894:	d0f7      	beq.n	8016886 <rcl_expand_topic_name+0x206>
 8016896:	4638      	mov	r0, r7
 8016898:	f7e9 fccc 	bl	8000234 <strlen>
 801689c:	4a25      	ldr	r2, [pc, #148]	@ (8016934 <rcl_expand_topic_name+0x2b4>)
 801689e:	4b26      	ldr	r3, [pc, #152]	@ (8016938 <rcl_expand_topic_name+0x2b8>)
 80168a0:	f8cd a010 	str.w	sl, [sp, #16]
 80168a4:	2801      	cmp	r0, #1
 80168a6:	bf18      	it	ne
 80168a8:	4613      	movne	r3, r2
 80168aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80168ae:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80168b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80168b4:	9703      	str	r7, [sp, #12]
 80168b6:	9200      	str	r2, [sp, #0]
 80168b8:	ab14      	add	r3, sp, #80	@ 0x50
 80168ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80168bc:	f7f8 fc8c 	bl	800f1d8 <rcutils_format_string_limit>
 80168c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80168c2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80168c4:	4605      	mov	r5, r0
 80168c6:	4650      	mov	r0, sl
 80168c8:	4798      	blx	r3
 80168ca:	46aa      	mov	sl, r5
 80168cc:	e7d9      	b.n	8016882 <rcl_expand_topic_name+0x202>
 80168ce:	24ca      	movs	r4, #202	@ 0xca
 80168d0:	e78b      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 80168d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168d4:	2300      	movs	r3, #0
 80168d6:	6013      	str	r3, [r2, #0]
 80168d8:	240a      	movs	r4, #10
 80168da:	e786      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 80168dc:	465b      	mov	r3, fp
 80168de:	9c07      	ldr	r4, [sp, #28]
 80168e0:	46da      	mov	sl, fp
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d1d3      	bne.n	801688e <rcl_expand_topic_name+0x20e>
 80168e6:	f898 3000 	ldrb.w	r3, [r8]
 80168ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80168ec:	d0cb      	beq.n	8016886 <rcl_expand_topic_name+0x206>
 80168ee:	e7b2      	b.n	8016856 <rcl_expand_topic_name+0x1d6>
 80168f0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80168f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80168f6:	6015      	str	r5, [r2, #0]
 80168f8:	4658      	mov	r0, fp
 80168fa:	4798      	blx	r3
 80168fc:	240a      	movs	r4, #10
 80168fe:	e774      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 8016900:	ab17      	add	r3, sp, #92	@ 0x5c
 8016902:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016906:	e88d 0003 	stmia.w	sp, {r0, r1}
 801690a:	ab14      	add	r3, sp, #80	@ 0x50
 801690c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801690e:	4640      	mov	r0, r8
 8016910:	f7f8 fd7c 	bl	800f40c <rcutils_strdup>
 8016914:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016916:	2800      	cmp	r0, #0
 8016918:	6018      	str	r0, [r3, #0]
 801691a:	bf08      	it	eq
 801691c:	240a      	moveq	r4, #10
 801691e:	e764      	b.n	80167ea <rcl_expand_topic_name+0x16a>
 8016920:	0801f160 	.word	0x0801f160
 8016924:	0801e538 	.word	0x0801e538
 8016928:	0801f168 	.word	0x0801f168
 801692c:	0801f170 	.word	0x0801f170
 8016930:	0801f178 	.word	0x0801f178
 8016934:	0801df9c 	.word	0x0801df9c
 8016938:	0801df94 	.word	0x0801df94

0801693c <rcl_get_default_topic_name_substitutions>:
 801693c:	2800      	cmp	r0, #0
 801693e:	bf0c      	ite	eq
 8016940:	200b      	moveq	r0, #11
 8016942:	2000      	movne	r0, #0
 8016944:	4770      	bx	lr
 8016946:	bf00      	nop

08016948 <rcl_get_zero_initialized_guard_condition>:
 8016948:	4a03      	ldr	r2, [pc, #12]	@ (8016958 <rcl_get_zero_initialized_guard_condition+0x10>)
 801694a:	4603      	mov	r3, r0
 801694c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016950:	e883 0003 	stmia.w	r3, {r0, r1}
 8016954:	4618      	mov	r0, r3
 8016956:	4770      	bx	lr
 8016958:	0801f184 	.word	0x0801f184

0801695c <rcl_guard_condition_init>:
 801695c:	b082      	sub	sp, #8
 801695e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016960:	b087      	sub	sp, #28
 8016962:	ac0c      	add	r4, sp, #48	@ 0x30
 8016964:	e884 000c 	stmia.w	r4, {r2, r3}
 8016968:	46a6      	mov	lr, r4
 801696a:	460d      	mov	r5, r1
 801696c:	4604      	mov	r4, r0
 801696e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016972:	f10d 0c04 	add.w	ip, sp, #4
 8016976:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801697a:	f8de 3000 	ldr.w	r3, [lr]
 801697e:	f8cc 3000 	str.w	r3, [ip]
 8016982:	a801      	add	r0, sp, #4
 8016984:	f7f8 fb2a 	bl	800efdc <rcutils_allocator_is_valid>
 8016988:	b338      	cbz	r0, 80169da <rcl_guard_condition_init+0x7e>
 801698a:	b334      	cbz	r4, 80169da <rcl_guard_condition_init+0x7e>
 801698c:	6866      	ldr	r6, [r4, #4]
 801698e:	b9ee      	cbnz	r6, 80169cc <rcl_guard_condition_init+0x70>
 8016990:	b31d      	cbz	r5, 80169da <rcl_guard_condition_init+0x7e>
 8016992:	4628      	mov	r0, r5
 8016994:	f7ff fe0e 	bl	80165b4 <rcl_context_is_valid>
 8016998:	b308      	cbz	r0, 80169de <rcl_guard_condition_init+0x82>
 801699a:	9b01      	ldr	r3, [sp, #4]
 801699c:	9905      	ldr	r1, [sp, #20]
 801699e:	201c      	movs	r0, #28
 80169a0:	4798      	blx	r3
 80169a2:	4607      	mov	r7, r0
 80169a4:	6060      	str	r0, [r4, #4]
 80169a6:	b310      	cbz	r0, 80169ee <rcl_guard_condition_init+0x92>
 80169a8:	6828      	ldr	r0, [r5, #0]
 80169aa:	3028      	adds	r0, #40	@ 0x28
 80169ac:	f002 ff70 	bl	8019890 <rmw_create_guard_condition>
 80169b0:	6038      	str	r0, [r7, #0]
 80169b2:	6860      	ldr	r0, [r4, #4]
 80169b4:	6805      	ldr	r5, [r0, #0]
 80169b6:	b1a5      	cbz	r5, 80169e2 <rcl_guard_condition_init+0x86>
 80169b8:	2301      	movs	r3, #1
 80169ba:	ac01      	add	r4, sp, #4
 80169bc:	7103      	strb	r3, [r0, #4]
 80169be:	f100 0708 	add.w	r7, r0, #8
 80169c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80169c6:	6823      	ldr	r3, [r4, #0]
 80169c8:	603b      	str	r3, [r7, #0]
 80169ca:	e000      	b.n	80169ce <rcl_guard_condition_init+0x72>
 80169cc:	2664      	movs	r6, #100	@ 0x64
 80169ce:	4630      	mov	r0, r6
 80169d0:	b007      	add	sp, #28
 80169d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80169d6:	b002      	add	sp, #8
 80169d8:	4770      	bx	lr
 80169da:	260b      	movs	r6, #11
 80169dc:	e7f7      	b.n	80169ce <rcl_guard_condition_init+0x72>
 80169de:	2665      	movs	r6, #101	@ 0x65
 80169e0:	e7f5      	b.n	80169ce <rcl_guard_condition_init+0x72>
 80169e2:	9b02      	ldr	r3, [sp, #8]
 80169e4:	9905      	ldr	r1, [sp, #20]
 80169e6:	4798      	blx	r3
 80169e8:	2601      	movs	r6, #1
 80169ea:	6065      	str	r5, [r4, #4]
 80169ec:	e7ef      	b.n	80169ce <rcl_guard_condition_init+0x72>
 80169ee:	260a      	movs	r6, #10
 80169f0:	e7ed      	b.n	80169ce <rcl_guard_condition_init+0x72>
 80169f2:	bf00      	nop

080169f4 <rcl_guard_condition_init_from_rmw>:
 80169f4:	b082      	sub	sp, #8
 80169f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169fa:	b086      	sub	sp, #24
 80169fc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016a00:	4604      	mov	r4, r0
 8016a02:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016a06:	460e      	mov	r6, r1
 8016a08:	4617      	mov	r7, r2
 8016a0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a0e:	f10d 0e04 	add.w	lr, sp, #4
 8016a12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a16:	f8dc 3000 	ldr.w	r3, [ip]
 8016a1a:	f8ce 3000 	str.w	r3, [lr]
 8016a1e:	a801      	add	r0, sp, #4
 8016a20:	f7f8 fadc 	bl	800efdc <rcutils_allocator_is_valid>
 8016a24:	b350      	cbz	r0, 8016a7c <rcl_guard_condition_init_from_rmw+0x88>
 8016a26:	b34c      	cbz	r4, 8016a7c <rcl_guard_condition_init_from_rmw+0x88>
 8016a28:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016a2c:	f1b8 0f00 	cmp.w	r8, #0
 8016a30:	d11e      	bne.n	8016a70 <rcl_guard_condition_init_from_rmw+0x7c>
 8016a32:	b31f      	cbz	r7, 8016a7c <rcl_guard_condition_init_from_rmw+0x88>
 8016a34:	4638      	mov	r0, r7
 8016a36:	f7ff fdbd 	bl	80165b4 <rcl_context_is_valid>
 8016a3a:	b328      	cbz	r0, 8016a88 <rcl_guard_condition_init_from_rmw+0x94>
 8016a3c:	9b01      	ldr	r3, [sp, #4]
 8016a3e:	9905      	ldr	r1, [sp, #20]
 8016a40:	201c      	movs	r0, #28
 8016a42:	4798      	blx	r3
 8016a44:	4605      	mov	r5, r0
 8016a46:	6060      	str	r0, [r4, #4]
 8016a48:	b358      	cbz	r0, 8016aa2 <rcl_guard_condition_init_from_rmw+0xae>
 8016a4a:	b1fe      	cbz	r6, 8016a8c <rcl_guard_condition_init_from_rmw+0x98>
 8016a4c:	6006      	str	r6, [r0, #0]
 8016a4e:	f880 8004 	strb.w	r8, [r0, #4]
 8016a52:	ac01      	add	r4, sp, #4
 8016a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a56:	f105 0c08 	add.w	ip, r5, #8
 8016a5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a5e:	6823      	ldr	r3, [r4, #0]
 8016a60:	f8cc 3000 	str.w	r3, [ip]
 8016a64:	2000      	movs	r0, #0
 8016a66:	b006      	add	sp, #24
 8016a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a6c:	b002      	add	sp, #8
 8016a6e:	4770      	bx	lr
 8016a70:	2064      	movs	r0, #100	@ 0x64
 8016a72:	b006      	add	sp, #24
 8016a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a78:	b002      	add	sp, #8
 8016a7a:	4770      	bx	lr
 8016a7c:	200b      	movs	r0, #11
 8016a7e:	b006      	add	sp, #24
 8016a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a84:	b002      	add	sp, #8
 8016a86:	4770      	bx	lr
 8016a88:	2065      	movs	r0, #101	@ 0x65
 8016a8a:	e7f2      	b.n	8016a72 <rcl_guard_condition_init_from_rmw+0x7e>
 8016a8c:	6838      	ldr	r0, [r7, #0]
 8016a8e:	3028      	adds	r0, #40	@ 0x28
 8016a90:	f002 fefe 	bl	8019890 <rmw_create_guard_condition>
 8016a94:	6028      	str	r0, [r5, #0]
 8016a96:	6865      	ldr	r5, [r4, #4]
 8016a98:	682e      	ldr	r6, [r5, #0]
 8016a9a:	b126      	cbz	r6, 8016aa6 <rcl_guard_condition_init_from_rmw+0xb2>
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	712b      	strb	r3, [r5, #4]
 8016aa0:	e7d7      	b.n	8016a52 <rcl_guard_condition_init_from_rmw+0x5e>
 8016aa2:	200a      	movs	r0, #10
 8016aa4:	e7e5      	b.n	8016a72 <rcl_guard_condition_init_from_rmw+0x7e>
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	9b02      	ldr	r3, [sp, #8]
 8016aaa:	9905      	ldr	r1, [sp, #20]
 8016aac:	4798      	blx	r3
 8016aae:	6066      	str	r6, [r4, #4]
 8016ab0:	2001      	movs	r0, #1
 8016ab2:	e7de      	b.n	8016a72 <rcl_guard_condition_init_from_rmw+0x7e>

08016ab4 <rcl_guard_condition_fini>:
 8016ab4:	b570      	push	{r4, r5, r6, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	b1f0      	cbz	r0, 8016af8 <rcl_guard_condition_fini+0x44>
 8016aba:	6843      	ldr	r3, [r0, #4]
 8016abc:	4604      	mov	r4, r0
 8016abe:	b163      	cbz	r3, 8016ada <rcl_guard_condition_fini+0x26>
 8016ac0:	6818      	ldr	r0, [r3, #0]
 8016ac2:	68de      	ldr	r6, [r3, #12]
 8016ac4:	6999      	ldr	r1, [r3, #24]
 8016ac6:	b160      	cbz	r0, 8016ae2 <rcl_guard_condition_fini+0x2e>
 8016ac8:	791d      	ldrb	r5, [r3, #4]
 8016aca:	b965      	cbnz	r5, 8016ae6 <rcl_guard_condition_fini+0x32>
 8016acc:	4618      	mov	r0, r3
 8016ace:	47b0      	blx	r6
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	6063      	str	r3, [r4, #4]
 8016ad6:	b002      	add	sp, #8
 8016ad8:	bd70      	pop	{r4, r5, r6, pc}
 8016ada:	461d      	mov	r5, r3
 8016adc:	4628      	mov	r0, r5
 8016ade:	b002      	add	sp, #8
 8016ae0:	bd70      	pop	{r4, r5, r6, pc}
 8016ae2:	4605      	mov	r5, r0
 8016ae4:	e7f2      	b.n	8016acc <rcl_guard_condition_fini+0x18>
 8016ae6:	9101      	str	r1, [sp, #4]
 8016ae8:	f002 fee6 	bl	80198b8 <rmw_destroy_guard_condition>
 8016aec:	1e05      	subs	r5, r0, #0
 8016aee:	6863      	ldr	r3, [r4, #4]
 8016af0:	9901      	ldr	r1, [sp, #4]
 8016af2:	bf18      	it	ne
 8016af4:	2501      	movne	r5, #1
 8016af6:	e7e9      	b.n	8016acc <rcl_guard_condition_fini+0x18>
 8016af8:	250b      	movs	r5, #11
 8016afa:	4628      	mov	r0, r5
 8016afc:	b002      	add	sp, #8
 8016afe:	bd70      	pop	{r4, r5, r6, pc}

08016b00 <rcl_guard_condition_get_default_options>:
 8016b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b02:	b087      	sub	sp, #28
 8016b04:	4606      	mov	r6, r0
 8016b06:	4668      	mov	r0, sp
 8016b08:	f7f8 fa5a 	bl	800efc0 <rcutils_get_default_allocator>
 8016b0c:	4b09      	ldr	r3, [pc, #36]	@ (8016b34 <rcl_guard_condition_get_default_options+0x34>)
 8016b0e:	46ee      	mov	lr, sp
 8016b10:	469c      	mov	ip, r3
 8016b12:	461d      	mov	r5, r3
 8016b14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b1e:	4634      	mov	r4, r6
 8016b20:	f8de 7000 	ldr.w	r7, [lr]
 8016b24:	f8cc 7000 	str.w	r7, [ip]
 8016b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	6027      	str	r7, [r4, #0]
 8016b2e:	b007      	add	sp, #28
 8016b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b32:	bf00      	nop
 8016b34:	2000c4a8 	.word	0x2000c4a8

08016b38 <rcl_trigger_guard_condition>:
 8016b38:	b148      	cbz	r0, 8016b4e <rcl_trigger_guard_condition+0x16>
 8016b3a:	b508      	push	{r3, lr}
 8016b3c:	6843      	ldr	r3, [r0, #4]
 8016b3e:	b143      	cbz	r3, 8016b52 <rcl_trigger_guard_condition+0x1a>
 8016b40:	6818      	ldr	r0, [r3, #0]
 8016b42:	f002 ff93 	bl	8019a6c <rmw_trigger_guard_condition>
 8016b46:	3800      	subs	r0, #0
 8016b48:	bf18      	it	ne
 8016b4a:	2001      	movne	r0, #1
 8016b4c:	bd08      	pop	{r3, pc}
 8016b4e:	200b      	movs	r0, #11
 8016b50:	4770      	bx	lr
 8016b52:	200b      	movs	r0, #11
 8016b54:	bd08      	pop	{r3, pc}
 8016b56:	bf00      	nop

08016b58 <rcl_guard_condition_get_rmw_handle>:
 8016b58:	b110      	cbz	r0, 8016b60 <rcl_guard_condition_get_rmw_handle+0x8>
 8016b5a:	6840      	ldr	r0, [r0, #4]
 8016b5c:	b100      	cbz	r0, 8016b60 <rcl_guard_condition_get_rmw_handle+0x8>
 8016b5e:	6800      	ldr	r0, [r0, #0]
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop

08016b64 <rcl_init>:
 8016b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b68:	1e05      	subs	r5, r0, #0
 8016b6a:	b09e      	sub	sp, #120	@ 0x78
 8016b6c:	460e      	mov	r6, r1
 8016b6e:	4690      	mov	r8, r2
 8016b70:	461f      	mov	r7, r3
 8016b72:	f340 809c 	ble.w	8016cae <rcl_init+0x14a>
 8016b76:	2900      	cmp	r1, #0
 8016b78:	f000 809c 	beq.w	8016cb4 <rcl_init+0x150>
 8016b7c:	f1a1 0e04 	sub.w	lr, r1, #4
 8016b80:	f04f 0c00 	mov.w	ip, #0
 8016b84:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8016b88:	f10c 0c01 	add.w	ip, ip, #1
 8016b8c:	2c00      	cmp	r4, #0
 8016b8e:	f000 8091 	beq.w	8016cb4 <rcl_init+0x150>
 8016b92:	4565      	cmp	r5, ip
 8016b94:	d1f6      	bne.n	8016b84 <rcl_init+0x20>
 8016b96:	f1b8 0f00 	cmp.w	r8, #0
 8016b9a:	f000 808b 	beq.w	8016cb4 <rcl_init+0x150>
 8016b9e:	f8d8 4000 	ldr.w	r4, [r8]
 8016ba2:	2c00      	cmp	r4, #0
 8016ba4:	f000 8086 	beq.w	8016cb4 <rcl_init+0x150>
 8016ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016baa:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8016bae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	f8cc 3000 	str.w	r3, [ip]
 8016bb8:	a819      	add	r0, sp, #100	@ 0x64
 8016bba:	f7f8 fa0f 	bl	800efdc <rcutils_allocator_is_valid>
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	d078      	beq.n	8016cb4 <rcl_init+0x150>
 8016bc2:	2f00      	cmp	r7, #0
 8016bc4:	d076      	beq.n	8016cb4 <rcl_init+0x150>
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d178      	bne.n	8016cbe <rcl_init+0x15a>
 8016bcc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8016bd0:	2178      	movs	r1, #120	@ 0x78
 8016bd2:	2001      	movs	r0, #1
 8016bd4:	4798      	blx	r3
 8016bd6:	4604      	mov	r4, r0
 8016bd8:	6038      	str	r0, [r7, #0]
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	f000 80b6 	beq.w	8016d4c <rcl_init+0x1e8>
 8016be0:	a802      	add	r0, sp, #8
 8016be2:	f002 fc8d 	bl	8019500 <rmw_get_zero_initialized_context>
 8016be6:	a902      	add	r1, sp, #8
 8016be8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016bec:	2250      	movs	r2, #80	@ 0x50
 8016bee:	ac19      	add	r4, sp, #100	@ 0x64
 8016bf0:	f004 fda9 	bl	801b746 <memcpy>
 8016bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bf6:	f8d7 e000 	ldr.w	lr, [r7]
 8016bfa:	46f4      	mov	ip, lr
 8016bfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c00:	6823      	ldr	r3, [r4, #0]
 8016c02:	f8cc 3000 	str.w	r3, [ip]
 8016c06:	f10e 0114 	add.w	r1, lr, #20
 8016c0a:	4640      	mov	r0, r8
 8016c0c:	f7f6 fddc 	bl	800d7c8 <rcl_init_options_copy>
 8016c10:	4604      	mov	r4, r0
 8016c12:	2800      	cmp	r0, #0
 8016c14:	d144      	bne.n	8016ca0 <rcl_init+0x13c>
 8016c16:	f8d7 9000 	ldr.w	r9, [r7]
 8016c1a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8016c1e:	f8c9 0020 	str.w	r0, [r9, #32]
 8016c22:	f8c9 5018 	str.w	r5, [r9, #24]
 8016c26:	f8c9 801c 	str.w	r8, [r9, #28]
 8016c2a:	2d00      	cmp	r5, #0
 8016c2c:	d04e      	beq.n	8016ccc <rcl_init+0x168>
 8016c2e:	2e00      	cmp	r6, #0
 8016c30:	d04c      	beq.n	8016ccc <rcl_init+0x168>
 8016c32:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8016c36:	2104      	movs	r1, #4
 8016c38:	4628      	mov	r0, r5
 8016c3a:	4798      	blx	r3
 8016c3c:	f8c9 0020 	str.w	r0, [r9, #32]
 8016c40:	f8d7 9000 	ldr.w	r9, [r7]
 8016c44:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8016c48:	46ca      	mov	sl, r9
 8016c4a:	b343      	cbz	r3, 8016c9e <rcl_init+0x13a>
 8016c4c:	2d01      	cmp	r5, #1
 8016c4e:	f178 0300 	sbcs.w	r3, r8, #0
 8016c52:	db3b      	blt.n	8016ccc <rcl_init+0x168>
 8016c54:	2400      	movs	r4, #0
 8016c56:	3e04      	subs	r6, #4
 8016c58:	46a1      	mov	r9, r4
 8016c5a:	e00b      	b.n	8016c74 <rcl_init+0x110>
 8016c5c:	6831      	ldr	r1, [r6, #0]
 8016c5e:	f004 fd72 	bl	801b746 <memcpy>
 8016c62:	3401      	adds	r4, #1
 8016c64:	f149 0900 	adc.w	r9, r9, #0
 8016c68:	45c8      	cmp	r8, r9
 8016c6a:	bf08      	it	eq
 8016c6c:	42a5      	cmpeq	r5, r4
 8016c6e:	d02b      	beq.n	8016cc8 <rcl_init+0x164>
 8016c70:	f8d7 a000 	ldr.w	sl, [r7]
 8016c74:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016c78:	f7e9 fadc 	bl	8000234 <strlen>
 8016c7c:	1c42      	adds	r2, r0, #1
 8016c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c80:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8016c82:	f8da a020 	ldr.w	sl, [sl, #32]
 8016c86:	9201      	str	r2, [sp, #4]
 8016c88:	4610      	mov	r0, r2
 8016c8a:	4798      	blx	r3
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8016c92:	6a1b      	ldr	r3, [r3, #32]
 8016c94:	9a01      	ldr	r2, [sp, #4]
 8016c96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	d1de      	bne.n	8016c5c <rcl_init+0xf8>
 8016c9e:	240a      	movs	r4, #10
 8016ca0:	4638      	mov	r0, r7
 8016ca2:	f7ff fc8d 	bl	80165c0 <__cleanup_context>
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	b01e      	add	sp, #120	@ 0x78
 8016caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cae:	2900      	cmp	r1, #0
 8016cb0:	f43f af71 	beq.w	8016b96 <rcl_init+0x32>
 8016cb4:	240b      	movs	r4, #11
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	b01e      	add	sp, #120	@ 0x78
 8016cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cbe:	2464      	movs	r4, #100	@ 0x64
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	b01e      	add	sp, #120	@ 0x78
 8016cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cc8:	f8d7 9000 	ldr.w	r9, [r7]
 8016ccc:	4926      	ldr	r1, [pc, #152]	@ (8016d68 <rcl_init+0x204>)
 8016cce:	680b      	ldr	r3, [r1, #0]
 8016cd0:	3301      	adds	r3, #1
 8016cd2:	d036      	beq.n	8016d42 <rcl_init+0x1de>
 8016cd4:	600b      	str	r3, [r1, #0]
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	2400      	movs	r4, #0
 8016cda:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016cde:	607b      	str	r3, [r7, #4]
 8016ce0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8016ce8:	d034      	beq.n	8016d54 <rcl_init+0x1f0>
 8016cea:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8016cee:	b93b      	cbnz	r3, 8016d00 <rcl_init+0x19c>
 8016cf0:	3030      	adds	r0, #48	@ 0x30
 8016cf2:	f000 f83b 	bl	8016d6c <rcl_get_localhost_only>
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d1d1      	bne.n	8016ca0 <rcl_init+0x13c>
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	6958      	ldr	r0, [r3, #20]
 8016d00:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8016d02:	aa18      	add	r2, sp, #96	@ 0x60
 8016d04:	a917      	add	r1, sp, #92	@ 0x5c
 8016d06:	f000 ffb5 	bl	8017c74 <rcl_validate_enclave_name>
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	2800      	cmp	r0, #0
 8016d0e:	d1c7      	bne.n	8016ca0 <rcl_init+0x13c>
 8016d10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016d12:	b9eb      	cbnz	r3, 8016d50 <rcl_init+0x1ec>
 8016d14:	6839      	ldr	r1, [r7, #0]
 8016d16:	694b      	ldr	r3, [r1, #20]
 8016d18:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8016d1a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8016d1e:	f000 f8f3 	bl	8016f08 <rcl_get_security_options_from_environment>
 8016d22:	4604      	mov	r4, r0
 8016d24:	2800      	cmp	r0, #0
 8016d26:	d1bb      	bne.n	8016ca0 <rcl_init+0x13c>
 8016d28:	6839      	ldr	r1, [r7, #0]
 8016d2a:	6948      	ldr	r0, [r1, #20]
 8016d2c:	3128      	adds	r1, #40	@ 0x28
 8016d2e:	3018      	adds	r0, #24
 8016d30:	f7f9 f8c8 	bl	800fec4 <rmw_init>
 8016d34:	4604      	mov	r4, r0
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d0bd      	beq.n	8016cb6 <rcl_init+0x152>
 8016d3a:	f7ff fc1d 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 8016d3e:	4604      	mov	r4, r0
 8016d40:	e7ae      	b.n	8016ca0 <rcl_init+0x13c>
 8016d42:	2201      	movs	r2, #1
 8016d44:	461c      	mov	r4, r3
 8016d46:	600a      	str	r2, [r1, #0]
 8016d48:	4613      	mov	r3, r2
 8016d4a:	e7c6      	b.n	8016cda <rcl_init+0x176>
 8016d4c:	240a      	movs	r4, #10
 8016d4e:	e7b2      	b.n	8016cb6 <rcl_init+0x152>
 8016d50:	2401      	movs	r4, #1
 8016d52:	e7a5      	b.n	8016ca0 <rcl_init+0x13c>
 8016d54:	3024      	adds	r0, #36	@ 0x24
 8016d56:	f003 fe89 	bl	801aa6c <rcl_get_default_domain_id>
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	d19f      	bne.n	8016ca0 <rcl_init+0x13c>
 8016d60:	683b      	ldr	r3, [r7, #0]
 8016d62:	6958      	ldr	r0, [r3, #20]
 8016d64:	e7c1      	b.n	8016cea <rcl_init+0x186>
 8016d66:	bf00      	nop
 8016d68:	2000c4bc 	.word	0x2000c4bc

08016d6c <rcl_get_localhost_only>:
 8016d6c:	b510      	push	{r4, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	2300      	movs	r3, #0
 8016d72:	9301      	str	r3, [sp, #4]
 8016d74:	b1b8      	cbz	r0, 8016da6 <rcl_get_localhost_only+0x3a>
 8016d76:	4604      	mov	r4, r0
 8016d78:	a901      	add	r1, sp, #4
 8016d7a:	480c      	ldr	r0, [pc, #48]	@ (8016dac <rcl_get_localhost_only+0x40>)
 8016d7c:	f7f8 f9e0 	bl	800f140 <rcutils_get_env>
 8016d80:	b110      	cbz	r0, 8016d88 <rcl_get_localhost_only+0x1c>
 8016d82:	2001      	movs	r0, #1
 8016d84:	b002      	add	sp, #8
 8016d86:	bd10      	pop	{r4, pc}
 8016d88:	9b01      	ldr	r3, [sp, #4]
 8016d8a:	b113      	cbz	r3, 8016d92 <rcl_get_localhost_only+0x26>
 8016d8c:	781a      	ldrb	r2, [r3, #0]
 8016d8e:	2a31      	cmp	r2, #49	@ 0x31
 8016d90:	d004      	beq.n	8016d9c <rcl_get_localhost_only+0x30>
 8016d92:	2302      	movs	r3, #2
 8016d94:	2000      	movs	r0, #0
 8016d96:	7023      	strb	r3, [r4, #0]
 8016d98:	b002      	add	sp, #8
 8016d9a:	bd10      	pop	{r4, pc}
 8016d9c:	785b      	ldrb	r3, [r3, #1]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d1f7      	bne.n	8016d92 <rcl_get_localhost_only+0x26>
 8016da2:	2301      	movs	r3, #1
 8016da4:	e7f6      	b.n	8016d94 <rcl_get_localhost_only+0x28>
 8016da6:	200b      	movs	r0, #11
 8016da8:	b002      	add	sp, #8
 8016daa:	bd10      	pop	{r4, pc}
 8016dac:	0801f18c 	.word	0x0801f18c

08016db0 <exact_match_lookup>:
 8016db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016db2:	f102 0708 	add.w	r7, r2, #8
 8016db6:	460b      	mov	r3, r1
 8016db8:	4614      	mov	r4, r2
 8016dba:	4606      	mov	r6, r0
 8016dbc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016dc0:	b085      	sub	sp, #20
 8016dc2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	4919      	ldr	r1, [pc, #100]	@ (8016e30 <exact_match_lookup+0x80>)
 8016dca:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016dce:	f002 fb89 	bl	80194e4 <rcutils_join_path>
 8016dd2:	7833      	ldrb	r3, [r6, #0]
 8016dd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8016dd6:	4605      	mov	r5, r0
 8016dd8:	d023      	beq.n	8016e22 <exact_match_lookup+0x72>
 8016dda:	f104 030c 	add.w	r3, r4, #12
 8016dde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016de2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016de6:	1c70      	adds	r0, r6, #1
 8016de8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016dec:	f002 fb80 	bl	80194f0 <rcutils_to_native_path>
 8016df0:	4606      	mov	r6, r0
 8016df2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016df6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016dfa:	4631      	mov	r1, r6
 8016dfc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016e00:	4628      	mov	r0, r5
 8016e02:	f002 fb6f 	bl	80194e4 <rcutils_join_path>
 8016e06:	6862      	ldr	r2, [r4, #4]
 8016e08:	6921      	ldr	r1, [r4, #16]
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	4630      	mov	r0, r6
 8016e0e:	461e      	mov	r6, r3
 8016e10:	4790      	blx	r2
 8016e12:	4628      	mov	r0, r5
 8016e14:	6863      	ldr	r3, [r4, #4]
 8016e16:	6921      	ldr	r1, [r4, #16]
 8016e18:	4798      	blx	r3
 8016e1a:	4635      	mov	r5, r6
 8016e1c:	4628      	mov	r0, r5
 8016e1e:	b005      	add	sp, #20
 8016e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e22:	7873      	ldrb	r3, [r6, #1]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d1d8      	bne.n	8016dda <exact_match_lookup+0x2a>
 8016e28:	4628      	mov	r0, r5
 8016e2a:	b005      	add	sp, #20
 8016e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e2e:	bf00      	nop
 8016e30:	0801f1dc 	.word	0x0801f1dc

08016e34 <rcl_get_secure_root>:
 8016e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e38:	b085      	sub	sp, #20
 8016e3a:	b168      	cbz	r0, 8016e58 <rcl_get_secure_root+0x24>
 8016e3c:	4607      	mov	r7, r0
 8016e3e:	4608      	mov	r0, r1
 8016e40:	460c      	mov	r4, r1
 8016e42:	f7f8 f8cb 	bl	800efdc <rcutils_allocator_is_valid>
 8016e46:	b138      	cbz	r0, 8016e58 <rcl_get_secure_root+0x24>
 8016e48:	2300      	movs	r3, #0
 8016e4a:	482d      	ldr	r0, [pc, #180]	@ (8016f00 <rcl_get_secure_root+0xcc>)
 8016e4c:	9303      	str	r3, [sp, #12]
 8016e4e:	a903      	add	r1, sp, #12
 8016e50:	f7f8 f976 	bl	800f140 <rcutils_get_env>
 8016e54:	4605      	mov	r5, r0
 8016e56:	b120      	cbz	r0, 8016e62 <rcl_get_secure_root+0x2e>
 8016e58:	2500      	movs	r5, #0
 8016e5a:	4628      	mov	r0, r5
 8016e5c:	b005      	add	sp, #20
 8016e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e62:	9b03      	ldr	r3, [sp, #12]
 8016e64:	781a      	ldrb	r2, [r3, #0]
 8016e66:	2a00      	cmp	r2, #0
 8016e68:	d0f6      	beq.n	8016e58 <rcl_get_secure_root+0x24>
 8016e6a:	f104 090c 	add.w	r9, r4, #12
 8016e6e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016e72:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016e76:	4618      	mov	r0, r3
 8016e78:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016e7c:	f7f8 fac6 	bl	800f40c <rcutils_strdup>
 8016e80:	4680      	mov	r8, r0
 8016e82:	2800      	cmp	r0, #0
 8016e84:	d0e8      	beq.n	8016e58 <rcl_get_secure_root+0x24>
 8016e86:	481f      	ldr	r0, [pc, #124]	@ (8016f04 <rcl_get_secure_root+0xd0>)
 8016e88:	9503      	str	r5, [sp, #12]
 8016e8a:	a903      	add	r1, sp, #12
 8016e8c:	f7f8 f958 	bl	800f140 <rcutils_get_env>
 8016e90:	b160      	cbz	r0, 8016eac <rcl_get_secure_root+0x78>
 8016e92:	2600      	movs	r6, #0
 8016e94:	6863      	ldr	r3, [r4, #4]
 8016e96:	6921      	ldr	r1, [r4, #16]
 8016e98:	4630      	mov	r0, r6
 8016e9a:	4798      	blx	r3
 8016e9c:	4640      	mov	r0, r8
 8016e9e:	6863      	ldr	r3, [r4, #4]
 8016ea0:	6921      	ldr	r1, [r4, #16]
 8016ea2:	4798      	blx	r3
 8016ea4:	4628      	mov	r0, r5
 8016ea6:	b005      	add	sp, #20
 8016ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eac:	9b03      	ldr	r3, [sp, #12]
 8016eae:	781e      	ldrb	r6, [r3, #0]
 8016eb0:	b1f6      	cbz	r6, 8016ef0 <rcl_get_secure_root+0xbc>
 8016eb2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016eb6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016ec0:	f7f8 faa4 	bl	800f40c <rcutils_strdup>
 8016ec4:	4606      	mov	r6, r0
 8016ec6:	2800      	cmp	r0, #0
 8016ec8:	d0e3      	beq.n	8016e92 <rcl_get_secure_root+0x5e>
 8016eca:	4622      	mov	r2, r4
 8016ecc:	4641      	mov	r1, r8
 8016ece:	f7ff ff6f 	bl	8016db0 <exact_match_lookup>
 8016ed2:	4605      	mov	r5, r0
 8016ed4:	2d00      	cmp	r5, #0
 8016ed6:	d0dd      	beq.n	8016e94 <rcl_get_secure_root+0x60>
 8016ed8:	4628      	mov	r0, r5
 8016eda:	f002 fb01 	bl	80194e0 <rcutils_is_directory>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	d1d7      	bne.n	8016e94 <rcl_get_secure_root+0x60>
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	6921      	ldr	r1, [r4, #16]
 8016ee8:	461d      	mov	r5, r3
 8016eea:	6863      	ldr	r3, [r4, #4]
 8016eec:	4798      	blx	r3
 8016eee:	e7d1      	b.n	8016e94 <rcl_get_secure_root+0x60>
 8016ef0:	4622      	mov	r2, r4
 8016ef2:	4638      	mov	r0, r7
 8016ef4:	4641      	mov	r1, r8
 8016ef6:	f7ff ff5b 	bl	8016db0 <exact_match_lookup>
 8016efa:	4605      	mov	r5, r0
 8016efc:	e7ea      	b.n	8016ed4 <rcl_get_secure_root+0xa0>
 8016efe:	bf00      	nop
 8016f00:	0801f1e8 	.word	0x0801f1e8
 8016f04:	0801f200 	.word	0x0801f200

08016f08 <rcl_get_security_options_from_environment>:
 8016f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f0c:	b082      	sub	sp, #8
 8016f0e:	2300      	movs	r3, #0
 8016f10:	4606      	mov	r6, r0
 8016f12:	460f      	mov	r7, r1
 8016f14:	4820      	ldr	r0, [pc, #128]	@ (8016f98 <rcl_get_security_options_from_environment+0x90>)
 8016f16:	9301      	str	r3, [sp, #4]
 8016f18:	a901      	add	r1, sp, #4
 8016f1a:	4690      	mov	r8, r2
 8016f1c:	f7f8 f910 	bl	800f140 <rcutils_get_env>
 8016f20:	b120      	cbz	r0, 8016f2c <rcl_get_security_options_from_environment+0x24>
 8016f22:	2501      	movs	r5, #1
 8016f24:	4628      	mov	r0, r5
 8016f26:	b002      	add	sp, #8
 8016f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f2c:	491b      	ldr	r1, [pc, #108]	@ (8016f9c <rcl_get_security_options_from_environment+0x94>)
 8016f2e:	4604      	mov	r4, r0
 8016f30:	9801      	ldr	r0, [sp, #4]
 8016f32:	f7e9 f975 	bl	8000220 <strcmp>
 8016f36:	4605      	mov	r5, r0
 8016f38:	b9e8      	cbnz	r0, 8016f76 <rcl_get_security_options_from_environment+0x6e>
 8016f3a:	9001      	str	r0, [sp, #4]
 8016f3c:	f1b8 0f00 	cmp.w	r8, #0
 8016f40:	d020      	beq.n	8016f84 <rcl_get_security_options_from_environment+0x7c>
 8016f42:	4817      	ldr	r0, [pc, #92]	@ (8016fa0 <rcl_get_security_options_from_environment+0x98>)
 8016f44:	a901      	add	r1, sp, #4
 8016f46:	f7f8 f8fb 	bl	800f140 <rcutils_get_env>
 8016f4a:	2800      	cmp	r0, #0
 8016f4c:	d1e9      	bne.n	8016f22 <rcl_get_security_options_from_environment+0x1a>
 8016f4e:	4915      	ldr	r1, [pc, #84]	@ (8016fa4 <rcl_get_security_options_from_environment+0x9c>)
 8016f50:	9801      	ldr	r0, [sp, #4]
 8016f52:	f7e9 f965 	bl	8000220 <strcmp>
 8016f56:	fab0 f080 	clz	r0, r0
 8016f5a:	0940      	lsrs	r0, r0, #5
 8016f5c:	f888 0000 	strb.w	r0, [r8]
 8016f60:	4639      	mov	r1, r7
 8016f62:	4630      	mov	r0, r6
 8016f64:	f7ff ff66 	bl	8016e34 <rcl_get_secure_root>
 8016f68:	b170      	cbz	r0, 8016f88 <rcl_get_security_options_from_environment+0x80>
 8016f6a:	f8c8 0004 	str.w	r0, [r8, #4]
 8016f6e:	4628      	mov	r0, r5
 8016f70:	b002      	add	sp, #8
 8016f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f76:	4625      	mov	r5, r4
 8016f78:	4628      	mov	r0, r5
 8016f7a:	f888 4000 	strb.w	r4, [r8]
 8016f7e:	b002      	add	sp, #8
 8016f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f84:	250b      	movs	r5, #11
 8016f86:	e7cd      	b.n	8016f24 <rcl_get_security_options_from_environment+0x1c>
 8016f88:	f898 5000 	ldrb.w	r5, [r8]
 8016f8c:	f1a5 0501 	sub.w	r5, r5, #1
 8016f90:	fab5 f585 	clz	r5, r5
 8016f94:	096d      	lsrs	r5, r5, #5
 8016f96:	e7c5      	b.n	8016f24 <rcl_get_security_options_from_environment+0x1c>
 8016f98:	0801f1a0 	.word	0x0801f1a0
 8016f9c:	0801f1b4 	.word	0x0801f1b4
 8016fa0:	0801f1bc 	.word	0x0801f1bc
 8016fa4:	0801f1d4 	.word	0x0801f1d4

08016fa8 <rcl_get_zero_initialized_service>:
 8016fa8:	4b01      	ldr	r3, [pc, #4]	@ (8016fb0 <rcl_get_zero_initialized_service+0x8>)
 8016faa:	6818      	ldr	r0, [r3, #0]
 8016fac:	4770      	bx	lr
 8016fae:	bf00      	nop
 8016fb0:	0801f220 	.word	0x0801f220

08016fb4 <rcl_service_init>:
 8016fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fb8:	b089      	sub	sp, #36	@ 0x24
 8016fba:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016fbc:	b1c5      	cbz	r5, 8016ff0 <rcl_service_init+0x3c>
 8016fbe:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	4648      	mov	r0, r9
 8016fc6:	4688      	mov	r8, r1
 8016fc8:	4617      	mov	r7, r2
 8016fca:	461e      	mov	r6, r3
 8016fcc:	f7f8 f806 	bl	800efdc <rcutils_allocator_is_valid>
 8016fd0:	b170      	cbz	r0, 8016ff0 <rcl_service_init+0x3c>
 8016fd2:	b16c      	cbz	r4, 8016ff0 <rcl_service_init+0x3c>
 8016fd4:	4640      	mov	r0, r8
 8016fd6:	f7f6 fdbb 	bl	800db50 <rcl_node_is_valid>
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	d058      	beq.n	8017090 <rcl_service_init+0xdc>
 8016fde:	b13f      	cbz	r7, 8016ff0 <rcl_service_init+0x3c>
 8016fe0:	b136      	cbz	r6, 8016ff0 <rcl_service_init+0x3c>
 8016fe2:	6823      	ldr	r3, [r4, #0]
 8016fe4:	b14b      	cbz	r3, 8016ffa <rcl_service_init+0x46>
 8016fe6:	2664      	movs	r6, #100	@ 0x64
 8016fe8:	4630      	mov	r0, r6
 8016fea:	b009      	add	sp, #36	@ 0x24
 8016fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ff0:	260b      	movs	r6, #11
 8016ff2:	4630      	mov	r0, r6
 8016ff4:	b009      	add	sp, #36	@ 0x24
 8016ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ffa:	aa07      	add	r2, sp, #28
 8016ffc:	9205      	str	r2, [sp, #20]
 8016ffe:	2201      	movs	r2, #1
 8017000:	9304      	str	r3, [sp, #16]
 8017002:	9203      	str	r2, [sp, #12]
 8017004:	9307      	str	r3, [sp, #28]
 8017006:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801700a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801700e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017012:	4631      	mov	r1, r6
 8017014:	e899 000c 	ldmia.w	r9, {r2, r3}
 8017018:	4640      	mov	r0, r8
 801701a:	f7f6 fded 	bl	800dbf8 <rcl_node_resolve_name>
 801701e:	2800      	cmp	r0, #0
 8017020:	d145      	bne.n	80170ae <rcl_service_init+0xfa>
 8017022:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8017024:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8017026:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801702a:	4798      	blx	r3
 801702c:	6020      	str	r0, [r4, #0]
 801702e:	2800      	cmp	r0, #0
 8017030:	d043      	beq.n	80170ba <rcl_service_init+0x106>
 8017032:	4640      	mov	r0, r8
 8017034:	f7f6 fdae 	bl	800db94 <rcl_node_get_rmw_handle>
 8017038:	462b      	mov	r3, r5
 801703a:	9a07      	ldr	r2, [sp, #28]
 801703c:	6826      	ldr	r6, [r4, #0]
 801703e:	4639      	mov	r1, r7
 8017040:	f7f9 fcb2 	bl	80109a8 <rmw_create_service>
 8017044:	6823      	ldr	r3, [r4, #0]
 8017046:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 801704a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801704e:	b330      	cbz	r0, 801709e <rcl_service_init+0xea>
 8017050:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8017054:	f7f9 fdce 	bl	8010bf4 <rmw_service_request_subscription_get_actual_qos>
 8017058:	b9f8      	cbnz	r0, 801709a <rcl_service_init+0xe6>
 801705a:	6821      	ldr	r1, [r4, #0]
 801705c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8017060:	31b8      	adds	r1, #184	@ 0xb8
 8017062:	f7f9 fdb7 	bl	8010bd4 <rmw_service_response_publisher_get_actual_qos>
 8017066:	4606      	mov	r6, r0
 8017068:	b9b8      	cbnz	r0, 801709a <rcl_service_init+0xe6>
 801706a:	6820      	ldr	r0, [r4, #0]
 801706c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8017070:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8017074:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8017078:	2268      	movs	r2, #104	@ 0x68
 801707a:	4629      	mov	r1, r5
 801707c:	f004 fb63 	bl	801b746 <memcpy>
 8017080:	9807      	ldr	r0, [sp, #28]
 8017082:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8017084:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8017086:	4798      	blx	r3
 8017088:	4630      	mov	r0, r6
 801708a:	b009      	add	sp, #36	@ 0x24
 801708c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017090:	26c8      	movs	r6, #200	@ 0xc8
 8017092:	4630      	mov	r0, r6
 8017094:	b009      	add	sp, #36	@ 0x24
 8017096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	b12b      	cbz	r3, 80170aa <rcl_service_init+0xf6>
 801709e:	4618      	mov	r0, r3
 80170a0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80170a2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80170a4:	4790      	blx	r2
 80170a6:	2300      	movs	r3, #0
 80170a8:	6023      	str	r3, [r4, #0]
 80170aa:	2601      	movs	r6, #1
 80170ac:	e7e8      	b.n	8017080 <rcl_service_init+0xcc>
 80170ae:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d903      	bls.n	80170be <rcl_service_init+0x10a>
 80170b6:	280a      	cmp	r0, #10
 80170b8:	d1f7      	bne.n	80170aa <rcl_service_init+0xf6>
 80170ba:	260a      	movs	r6, #10
 80170bc:	e7e0      	b.n	8017080 <rcl_service_init+0xcc>
 80170be:	2668      	movs	r6, #104	@ 0x68
 80170c0:	e7de      	b.n	8017080 <rcl_service_init+0xcc>
 80170c2:	bf00      	nop

080170c4 <rcl_service_get_default_options>:
 80170c4:	b530      	push	{r4, r5, lr}
 80170c6:	4d0f      	ldr	r5, [pc, #60]	@ (8017104 <rcl_service_get_default_options+0x40>)
 80170c8:	490f      	ldr	r1, [pc, #60]	@ (8017108 <rcl_service_get_default_options+0x44>)
 80170ca:	b087      	sub	sp, #28
 80170cc:	4604      	mov	r4, r0
 80170ce:	2250      	movs	r2, #80	@ 0x50
 80170d0:	4628      	mov	r0, r5
 80170d2:	f004 fb38 	bl	801b746 <memcpy>
 80170d6:	4668      	mov	r0, sp
 80170d8:	f7f7 ff72 	bl	800efc0 <rcutils_get_default_allocator>
 80170dc:	46ec      	mov	ip, sp
 80170de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80170e2:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80170e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80170ea:	2268      	movs	r2, #104	@ 0x68
 80170ec:	f8dc 3000 	ldr.w	r3, [ip]
 80170f0:	f8ce 3000 	str.w	r3, [lr]
 80170f4:	4629      	mov	r1, r5
 80170f6:	4620      	mov	r0, r4
 80170f8:	f004 fb25 	bl	801b746 <memcpy>
 80170fc:	4620      	mov	r0, r4
 80170fe:	b007      	add	sp, #28
 8017100:	bd30      	pop	{r4, r5, pc}
 8017102:	bf00      	nop
 8017104:	2000c4c0 	.word	0x2000c4c0
 8017108:	0801f228 	.word	0x0801f228

0801710c <rcl_service_get_rmw_handle>:
 801710c:	b118      	cbz	r0, 8017116 <rcl_service_get_rmw_handle+0xa>
 801710e:	6800      	ldr	r0, [r0, #0]
 8017110:	b108      	cbz	r0, 8017116 <rcl_service_get_rmw_handle+0xa>
 8017112:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017116:	4770      	bx	lr

08017118 <rcl_take_request>:
 8017118:	b570      	push	{r4, r5, r6, lr}
 801711a:	468e      	mov	lr, r1
 801711c:	460c      	mov	r4, r1
 801711e:	4616      	mov	r6, r2
 8017120:	4605      	mov	r5, r0
 8017122:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017126:	b08c      	sub	sp, #48	@ 0x30
 8017128:	f10d 0c18 	add.w	ip, sp, #24
 801712c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017130:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017134:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017138:	b30d      	cbz	r5, 801717e <rcl_take_request+0x66>
 801713a:	682b      	ldr	r3, [r5, #0]
 801713c:	b1fb      	cbz	r3, 801717e <rcl_take_request+0x66>
 801713e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017142:	b1e0      	cbz	r0, 801717e <rcl_take_request+0x66>
 8017144:	b336      	cbz	r6, 8017194 <rcl_take_request+0x7c>
 8017146:	2300      	movs	r3, #0
 8017148:	f88d 3007 	strb.w	r3, [sp, #7]
 801714c:	4632      	mov	r2, r6
 801714e:	f10d 0307 	add.w	r3, sp, #7
 8017152:	a902      	add	r1, sp, #8
 8017154:	f7f9 fb24 	bl	80107a0 <rmw_take_request>
 8017158:	4605      	mov	r5, r0
 801715a:	b198      	cbz	r0, 8017184 <rcl_take_request+0x6c>
 801715c:	280a      	cmp	r0, #10
 801715e:	bf18      	it	ne
 8017160:	2501      	movne	r5, #1
 8017162:	f10d 0e18 	add.w	lr, sp, #24
 8017166:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801716a:	46a4      	mov	ip, r4
 801716c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017170:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017174:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017178:	4628      	mov	r0, r5
 801717a:	b00c      	add	sp, #48	@ 0x30
 801717c:	bd70      	pop	{r4, r5, r6, pc}
 801717e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8017182:	e7ee      	b.n	8017162 <rcl_take_request+0x4a>
 8017184:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017188:	f240 2359 	movw	r3, #601	@ 0x259
 801718c:	2a00      	cmp	r2, #0
 801718e:	bf08      	it	eq
 8017190:	461d      	moveq	r5, r3
 8017192:	e7e6      	b.n	8017162 <rcl_take_request+0x4a>
 8017194:	250b      	movs	r5, #11
 8017196:	e7e4      	b.n	8017162 <rcl_take_request+0x4a>

08017198 <rcl_send_response>:
 8017198:	b170      	cbz	r0, 80171b8 <rcl_send_response+0x20>
 801719a:	6800      	ldr	r0, [r0, #0]
 801719c:	b160      	cbz	r0, 80171b8 <rcl_send_response+0x20>
 801719e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80171a2:	b148      	cbz	r0, 80171b8 <rcl_send_response+0x20>
 80171a4:	b159      	cbz	r1, 80171be <rcl_send_response+0x26>
 80171a6:	b510      	push	{r4, lr}
 80171a8:	b15a      	cbz	r2, 80171c2 <rcl_send_response+0x2a>
 80171aa:	f7f9 fb57 	bl	801085c <rmw_send_response>
 80171ae:	b110      	cbz	r0, 80171b6 <rcl_send_response+0x1e>
 80171b0:	2802      	cmp	r0, #2
 80171b2:	bf18      	it	ne
 80171b4:	2001      	movne	r0, #1
 80171b6:	bd10      	pop	{r4, pc}
 80171b8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80171bc:	4770      	bx	lr
 80171be:	200b      	movs	r0, #11
 80171c0:	4770      	bx	lr
 80171c2:	200b      	movs	r0, #11
 80171c4:	bd10      	pop	{r4, pc}
 80171c6:	bf00      	nop

080171c8 <rcl_service_is_valid>:
 80171c8:	b130      	cbz	r0, 80171d8 <rcl_service_is_valid+0x10>
 80171ca:	6800      	ldr	r0, [r0, #0]
 80171cc:	b120      	cbz	r0, 80171d8 <rcl_service_is_valid+0x10>
 80171ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80171d2:	3800      	subs	r0, #0
 80171d4:	bf18      	it	ne
 80171d6:	2001      	movne	r0, #1
 80171d8:	4770      	bx	lr
 80171da:	bf00      	nop

080171dc <rcl_get_zero_initialized_subscription>:
 80171dc:	4b01      	ldr	r3, [pc, #4]	@ (80171e4 <rcl_get_zero_initialized_subscription+0x8>)
 80171de:	6818      	ldr	r0, [r3, #0]
 80171e0:	4770      	bx	lr
 80171e2:	bf00      	nop
 80171e4:	0801f278 	.word	0x0801f278

080171e8 <rcl_subscription_init>:
 80171e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171ec:	b089      	sub	sp, #36	@ 0x24
 80171ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80171f0:	b1d6      	cbz	r6, 8017228 <rcl_subscription_init+0x40>
 80171f2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80171f6:	4604      	mov	r4, r0
 80171f8:	4648      	mov	r0, r9
 80171fa:	460d      	mov	r5, r1
 80171fc:	4690      	mov	r8, r2
 80171fe:	461f      	mov	r7, r3
 8017200:	f7f7 feec 	bl	800efdc <rcutils_allocator_is_valid>
 8017204:	b180      	cbz	r0, 8017228 <rcl_subscription_init+0x40>
 8017206:	b17c      	cbz	r4, 8017228 <rcl_subscription_init+0x40>
 8017208:	4628      	mov	r0, r5
 801720a:	f7f6 fca1 	bl	800db50 <rcl_node_is_valid>
 801720e:	2800      	cmp	r0, #0
 8017210:	d054      	beq.n	80172bc <rcl_subscription_init+0xd4>
 8017212:	f1b8 0f00 	cmp.w	r8, #0
 8017216:	d007      	beq.n	8017228 <rcl_subscription_init+0x40>
 8017218:	b137      	cbz	r7, 8017228 <rcl_subscription_init+0x40>
 801721a:	6823      	ldr	r3, [r4, #0]
 801721c:	b14b      	cbz	r3, 8017232 <rcl_subscription_init+0x4a>
 801721e:	2764      	movs	r7, #100	@ 0x64
 8017220:	4638      	mov	r0, r7
 8017222:	b009      	add	sp, #36	@ 0x24
 8017224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017228:	270b      	movs	r7, #11
 801722a:	4638      	mov	r0, r7
 801722c:	b009      	add	sp, #36	@ 0x24
 801722e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017232:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8017236:	aa07      	add	r2, sp, #28
 8017238:	9205      	str	r2, [sp, #20]
 801723a:	9307      	str	r3, [sp, #28]
 801723c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8017240:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017244:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017248:	4639      	mov	r1, r7
 801724a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801724e:	4628      	mov	r0, r5
 8017250:	f7f6 fcd2 	bl	800dbf8 <rcl_node_resolve_name>
 8017254:	4607      	mov	r7, r0
 8017256:	2800      	cmp	r0, #0
 8017258:	d15f      	bne.n	801731a <rcl_subscription_init+0x132>
 801725a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801725e:	21c8      	movs	r1, #200	@ 0xc8
 8017260:	2001      	movs	r0, #1
 8017262:	4798      	blx	r3
 8017264:	6020      	str	r0, [r4, #0]
 8017266:	2800      	cmp	r0, #0
 8017268:	d05d      	beq.n	8017326 <rcl_subscription_init+0x13e>
 801726a:	4628      	mov	r0, r5
 801726c:	f7f6 fc92 	bl	800db94 <rcl_node_get_rmw_handle>
 8017270:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8017274:	9300      	str	r3, [sp, #0]
 8017276:	9a07      	ldr	r2, [sp, #28]
 8017278:	6827      	ldr	r7, [r4, #0]
 801727a:	4641      	mov	r1, r8
 801727c:	4633      	mov	r3, r6
 801727e:	f7f9 fcc9 	bl	8010c14 <rmw_create_subscription>
 8017282:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8017286:	6827      	ldr	r7, [r4, #0]
 8017288:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 801728c:	b348      	cbz	r0, 80172e2 <rcl_subscription_init+0xfa>
 801728e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8017292:	f7f9 fda1 	bl	8010dd8 <rmw_subscription_get_actual_qos>
 8017296:	4607      	mov	r7, r0
 8017298:	b9a8      	cbnz	r0, 80172c6 <rcl_subscription_init+0xde>
 801729a:	6820      	ldr	r0, [r4, #0]
 801729c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80172a0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80172a4:	2270      	movs	r2, #112	@ 0x70
 80172a6:	4631      	mov	r1, r6
 80172a8:	f004 fa4d 	bl	801b746 <memcpy>
 80172ac:	9807      	ldr	r0, [sp, #28]
 80172ae:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80172b0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80172b2:	4798      	blx	r3
 80172b4:	4638      	mov	r0, r7
 80172b6:	b009      	add	sp, #36	@ 0x24
 80172b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172bc:	27c8      	movs	r7, #200	@ 0xc8
 80172be:	4638      	mov	r0, r7
 80172c0:	b009      	add	sp, #36	@ 0x24
 80172c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172c6:	6827      	ldr	r7, [r4, #0]
 80172c8:	b32f      	cbz	r7, 8017316 <rcl_subscription_init+0x12e>
 80172ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80172ce:	b14b      	cbz	r3, 80172e4 <rcl_subscription_init+0xfc>
 80172d0:	4628      	mov	r0, r5
 80172d2:	f7f6 fc5f 	bl	800db94 <rcl_node_get_rmw_handle>
 80172d6:	6823      	ldr	r3, [r4, #0]
 80172d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80172dc:	f7f9 fd8c 	bl	8010df8 <rmw_destroy_subscription>
 80172e0:	6827      	ldr	r7, [r4, #0]
 80172e2:	b197      	cbz	r7, 801730a <rcl_subscription_init+0x122>
 80172e4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80172e8:	4628      	mov	r0, r5
 80172ea:	f7f7 fe77 	bl	800efdc <rcutils_allocator_is_valid>
 80172ee:	b158      	cbz	r0, 8017308 <rcl_subscription_init+0x120>
 80172f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80172f2:	b148      	cbz	r0, 8017308 <rcl_subscription_init+0x120>
 80172f4:	4629      	mov	r1, r5
 80172f6:	f002 f913 	bl	8019520 <rmw_subscription_content_filter_options_fini>
 80172fa:	4605      	mov	r5, r0
 80172fc:	b9b8      	cbnz	r0, 801732e <rcl_subscription_init+0x146>
 80172fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017300:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8017302:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8017304:	4798      	blx	r3
 8017306:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8017308:	6827      	ldr	r7, [r4, #0]
 801730a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801730c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801730e:	4638      	mov	r0, r7
 8017310:	4798      	blx	r3
 8017312:	2300      	movs	r3, #0
 8017314:	6023      	str	r3, [r4, #0]
 8017316:	2701      	movs	r7, #1
 8017318:	e7c8      	b.n	80172ac <rcl_subscription_init+0xc4>
 801731a:	2867      	cmp	r0, #103	@ 0x67
 801731c:	d0c6      	beq.n	80172ac <rcl_subscription_init+0xc4>
 801731e:	2869      	cmp	r0, #105	@ 0x69
 8017320:	d003      	beq.n	801732a <rcl_subscription_init+0x142>
 8017322:	280a      	cmp	r0, #10
 8017324:	d1f7      	bne.n	8017316 <rcl_subscription_init+0x12e>
 8017326:	270a      	movs	r7, #10
 8017328:	e7c0      	b.n	80172ac <rcl_subscription_init+0xc4>
 801732a:	2767      	movs	r7, #103	@ 0x67
 801732c:	e7be      	b.n	80172ac <rcl_subscription_init+0xc4>
 801732e:	f7ff f923 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 8017332:	6827      	ldr	r7, [r4, #0]
 8017334:	e7e9      	b.n	801730a <rcl_subscription_init+0x122>
 8017336:	bf00      	nop

08017338 <rcl_subscription_get_default_options>:
 8017338:	b570      	push	{r4, r5, r6, lr}
 801733a:	4d14      	ldr	r5, [pc, #80]	@ (801738c <rcl_subscription_get_default_options+0x54>)
 801733c:	4914      	ldr	r1, [pc, #80]	@ (8017390 <rcl_subscription_get_default_options+0x58>)
 801733e:	b08a      	sub	sp, #40	@ 0x28
 8017340:	4604      	mov	r4, r0
 8017342:	2250      	movs	r2, #80	@ 0x50
 8017344:	4628      	mov	r0, r5
 8017346:	f004 f9fe 	bl	801b746 <memcpy>
 801734a:	a804      	add	r0, sp, #16
 801734c:	f7f7 fe38 	bl	800efc0 <rcutils_get_default_allocator>
 8017350:	f10d 0c10 	add.w	ip, sp, #16
 8017354:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017358:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801735c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017360:	466e      	mov	r6, sp
 8017362:	f8dc 3000 	ldr.w	r3, [ip]
 8017366:	f8ce 3000 	str.w	r3, [lr]
 801736a:	4630      	mov	r0, r6
 801736c:	f002 f8f2 	bl	8019554 <rmw_get_default_subscription_options>
 8017370:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017374:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8017378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801737c:	2270      	movs	r2, #112	@ 0x70
 801737e:	4629      	mov	r1, r5
 8017380:	4620      	mov	r0, r4
 8017382:	f004 f9e0 	bl	801b746 <memcpy>
 8017386:	4620      	mov	r0, r4
 8017388:	b00a      	add	sp, #40	@ 0x28
 801738a:	bd70      	pop	{r4, r5, r6, pc}
 801738c:	2000c528 	.word	0x2000c528
 8017390:	0801f280 	.word	0x0801f280

08017394 <rcl_take>:
 8017394:	2800      	cmp	r0, #0
 8017396:	d04a      	beq.n	801742e <rcl_take+0x9a>
 8017398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801739c:	4604      	mov	r4, r0
 801739e:	6800      	ldr	r0, [r0, #0]
 80173a0:	b0a4      	sub	sp, #144	@ 0x90
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d03b      	beq.n	801741e <rcl_take+0x8a>
 80173a6:	461f      	mov	r7, r3
 80173a8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d036      	beq.n	801741e <rcl_take+0x8a>
 80173b0:	460e      	mov	r6, r1
 80173b2:	2900      	cmp	r1, #0
 80173b4:	d039      	beq.n	801742a <rcl_take+0x96>
 80173b6:	4615      	mov	r5, r2
 80173b8:	2a00      	cmp	r2, #0
 80173ba:	d03c      	beq.n	8017436 <rcl_take+0xa2>
 80173bc:	a802      	add	r0, sp, #8
 80173be:	f002 f953 	bl	8019668 <rmw_get_zero_initialized_message_info>
 80173c2:	f10d 0c08 	add.w	ip, sp, #8
 80173c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173ca:	46ae      	mov	lr, r5
 80173cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80173d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80173d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80173e0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80173e4:	f04f 0800 	mov.w	r8, #0
 80173e8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80173ec:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80173f0:	6822      	ldr	r2, [r4, #0]
 80173f2:	462b      	mov	r3, r5
 80173f4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80173f8:	9700      	str	r7, [sp, #0]
 80173fa:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80173fe:	4631      	mov	r1, r6
 8017400:	f002 fae0 	bl	80199c4 <rmw_take_with_info>
 8017404:	4603      	mov	r3, r0
 8017406:	b9c0      	cbnz	r0, 801743a <rcl_take+0xa6>
 8017408:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801740c:	f240 1291 	movw	r2, #401	@ 0x191
 8017410:	2900      	cmp	r1, #0
 8017412:	bf08      	it	eq
 8017414:	4613      	moveq	r3, r2
 8017416:	4618      	mov	r0, r3
 8017418:	b024      	add	sp, #144	@ 0x90
 801741a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017422:	4618      	mov	r0, r3
 8017424:	b024      	add	sp, #144	@ 0x90
 8017426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801742a:	230b      	movs	r3, #11
 801742c:	e7f3      	b.n	8017416 <rcl_take+0x82>
 801742e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017432:	4618      	mov	r0, r3
 8017434:	4770      	bx	lr
 8017436:	ad14      	add	r5, sp, #80	@ 0x50
 8017438:	e7c0      	b.n	80173bc <rcl_take+0x28>
 801743a:	f7ff f89d 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 801743e:	4603      	mov	r3, r0
 8017440:	e7e9      	b.n	8017416 <rcl_take+0x82>
 8017442:	bf00      	nop

08017444 <rcl_subscription_get_rmw_handle>:
 8017444:	b118      	cbz	r0, 801744e <rcl_subscription_get_rmw_handle+0xa>
 8017446:	6800      	ldr	r0, [r0, #0]
 8017448:	b108      	cbz	r0, 801744e <rcl_subscription_get_rmw_handle+0xa>
 801744a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801744e:	4770      	bx	lr

08017450 <rcl_subscription_is_valid>:
 8017450:	b130      	cbz	r0, 8017460 <rcl_subscription_is_valid+0x10>
 8017452:	6800      	ldr	r0, [r0, #0]
 8017454:	b120      	cbz	r0, 8017460 <rcl_subscription_is_valid+0x10>
 8017456:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801745a:	3800      	subs	r0, #0
 801745c:	bf18      	it	ne
 801745e:	2001      	movne	r0, #1
 8017460:	4770      	bx	lr
 8017462:	bf00      	nop

08017464 <rcl_get_system_time>:
 8017464:	4608      	mov	r0, r1
 8017466:	f7f8 b93b 	b.w	800f6e0 <rcutils_system_time_now>
 801746a:	bf00      	nop

0801746c <rcl_get_steady_time>:
 801746c:	4608      	mov	r0, r1
 801746e:	f7f8 b95f 	b.w	800f730 <rcutils_steady_time_now>
 8017472:	bf00      	nop

08017474 <rcl_get_ros_time>:
 8017474:	7a03      	ldrb	r3, [r0, #8]
 8017476:	b510      	push	{r4, lr}
 8017478:	460c      	mov	r4, r1
 801747a:	b133      	cbz	r3, 801748a <rcl_get_ros_time+0x16>
 801747c:	2105      	movs	r1, #5
 801747e:	f7f7 fdbb 	bl	800eff8 <__atomic_load_8>
 8017482:	e9c4 0100 	strd	r0, r1, [r4]
 8017486:	2000      	movs	r0, #0
 8017488:	bd10      	pop	{r4, pc}
 801748a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801748e:	4608      	mov	r0, r1
 8017490:	f7f8 b926 	b.w	800f6e0 <rcutils_system_time_now>

08017494 <rcl_clock_init>:
 8017494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017496:	4605      	mov	r5, r0
 8017498:	4610      	mov	r0, r2
 801749a:	4614      	mov	r4, r2
 801749c:	460e      	mov	r6, r1
 801749e:	f7f7 fd9d 	bl	800efdc <rcutils_allocator_is_valid>
 80174a2:	b128      	cbz	r0, 80174b0 <rcl_clock_init+0x1c>
 80174a4:	2d03      	cmp	r5, #3
 80174a6:	d803      	bhi.n	80174b0 <rcl_clock_init+0x1c>
 80174a8:	e8df f005 	tbb	[pc, r5]
 80174ac:	06532e1d 	.word	0x06532e1d
 80174b0:	f04f 0c0b 	mov.w	ip, #11
 80174b4:	4660      	mov	r0, ip
 80174b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174b8:	2e00      	cmp	r6, #0
 80174ba:	d0f9      	beq.n	80174b0 <rcl_clock_init+0x1c>
 80174bc:	2c00      	cmp	r4, #0
 80174be:	d0f7      	beq.n	80174b0 <rcl_clock_init+0x1c>
 80174c0:	2300      	movs	r3, #0
 80174c2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80174c6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801757c <rcl_clock_init+0xe8>
 80174ca:	6133      	str	r3, [r6, #16]
 80174cc:	f106 0514 	add.w	r5, r6, #20
 80174d0:	469c      	mov	ip, r3
 80174d2:	2703      	movs	r7, #3
 80174d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174d8:	6823      	ldr	r3, [r4, #0]
 80174da:	602b      	str	r3, [r5, #0]
 80174dc:	7037      	strb	r7, [r6, #0]
 80174de:	f8c6 e00c 	str.w	lr, [r6, #12]
 80174e2:	4660      	mov	r0, ip
 80174e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174e6:	2e00      	cmp	r6, #0
 80174e8:	d0e2      	beq.n	80174b0 <rcl_clock_init+0x1c>
 80174ea:	2300      	movs	r3, #0
 80174ec:	7033      	strb	r3, [r6, #0]
 80174ee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80174f2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80174f6:	469c      	mov	ip, r3
 80174f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174fa:	f106 0514 	add.w	r5, r6, #20
 80174fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017500:	6823      	ldr	r3, [r4, #0]
 8017502:	602b      	str	r3, [r5, #0]
 8017504:	4660      	mov	r0, ip
 8017506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017508:	2e00      	cmp	r6, #0
 801750a:	d0d1      	beq.n	80174b0 <rcl_clock_init+0x1c>
 801750c:	2c00      	cmp	r4, #0
 801750e:	d0cf      	beq.n	80174b0 <rcl_clock_init+0x1c>
 8017510:	2700      	movs	r7, #0
 8017512:	7037      	strb	r7, [r6, #0]
 8017514:	46a4      	mov	ip, r4
 8017516:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801751a:	f106 0514 	add.w	r5, r6, #20
 801751e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8017522:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8017526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017528:	f8dc 3000 	ldr.w	r3, [ip]
 801752c:	602b      	str	r3, [r5, #0]
 801752e:	6921      	ldr	r1, [r4, #16]
 8017530:	6823      	ldr	r3, [r4, #0]
 8017532:	2010      	movs	r0, #16
 8017534:	4798      	blx	r3
 8017536:	6130      	str	r0, [r6, #16]
 8017538:	b1d0      	cbz	r0, 8017570 <rcl_clock_init+0xdc>
 801753a:	2200      	movs	r2, #0
 801753c:	2300      	movs	r3, #0
 801753e:	e9c0 2300 	strd	r2, r3, [r0]
 8017542:	2301      	movs	r3, #1
 8017544:	7207      	strb	r7, [r0, #8]
 8017546:	4a0c      	ldr	r2, [pc, #48]	@ (8017578 <rcl_clock_init+0xe4>)
 8017548:	7033      	strb	r3, [r6, #0]
 801754a:	46bc      	mov	ip, r7
 801754c:	60f2      	str	r2, [r6, #12]
 801754e:	4660      	mov	r0, ip
 8017550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017552:	2e00      	cmp	r6, #0
 8017554:	d0ac      	beq.n	80174b0 <rcl_clock_init+0x1c>
 8017556:	2c00      	cmp	r4, #0
 8017558:	d0aa      	beq.n	80174b0 <rcl_clock_init+0x1c>
 801755a:	2300      	movs	r3, #0
 801755c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017560:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8017580 <rcl_clock_init+0xec>
 8017564:	6133      	str	r3, [r6, #16]
 8017566:	f106 0514 	add.w	r5, r6, #20
 801756a:	469c      	mov	ip, r3
 801756c:	2702      	movs	r7, #2
 801756e:	e7b1      	b.n	80174d4 <rcl_clock_init+0x40>
 8017570:	f04f 0c0a 	mov.w	ip, #10
 8017574:	e79e      	b.n	80174b4 <rcl_clock_init+0x20>
 8017576:	bf00      	nop
 8017578:	08017475 	.word	0x08017475
 801757c:	0801746d 	.word	0x0801746d
 8017580:	08017465 	.word	0x08017465

08017584 <rcl_clock_get_now>:
 8017584:	b140      	cbz	r0, 8017598 <rcl_clock_get_now+0x14>
 8017586:	b139      	cbz	r1, 8017598 <rcl_clock_get_now+0x14>
 8017588:	7803      	ldrb	r3, [r0, #0]
 801758a:	b11b      	cbz	r3, 8017594 <rcl_clock_get_now+0x10>
 801758c:	68c3      	ldr	r3, [r0, #12]
 801758e:	b10b      	cbz	r3, 8017594 <rcl_clock_get_now+0x10>
 8017590:	6900      	ldr	r0, [r0, #16]
 8017592:	4718      	bx	r3
 8017594:	2001      	movs	r0, #1
 8017596:	4770      	bx	lr
 8017598:	200b      	movs	r0, #11
 801759a:	4770      	bx	lr

0801759c <rcl_clock_add_jump_callback>:
 801759c:	b082      	sub	sp, #8
 801759e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175a2:	a906      	add	r1, sp, #24
 80175a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80175a8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80175ac:	b320      	cbz	r0, 80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175ae:	4604      	mov	r4, r0
 80175b0:	3014      	adds	r0, #20
 80175b2:	f7f7 fd13 	bl	800efdc <rcutils_allocator_is_valid>
 80175b6:	b1f8      	cbz	r0, 80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175b8:	b1f6      	cbz	r6, 80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175bc:	2b00      	cmp	r3, #0
 80175be:	db1b      	blt.n	80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80175c4:	2a01      	cmp	r2, #1
 80175c6:	f173 0300 	sbcs.w	r3, r3, #0
 80175ca:	da15      	bge.n	80175f8 <rcl_clock_add_jump_callback+0x5c>
 80175cc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80175d0:	2f00      	cmp	r7, #0
 80175d2:	d042      	beq.n	801765a <rcl_clock_add_jump_callback+0xbe>
 80175d4:	2300      	movs	r3, #0
 80175d6:	4602      	mov	r2, r0
 80175d8:	e003      	b.n	80175e2 <rcl_clock_add_jump_callback+0x46>
 80175da:	42bb      	cmp	r3, r7
 80175dc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80175e0:	d011      	beq.n	8017606 <rcl_clock_add_jump_callback+0x6a>
 80175e2:	6811      	ldr	r1, [r2, #0]
 80175e4:	42b1      	cmp	r1, r6
 80175e6:	f103 0301 	add.w	r3, r3, #1
 80175ea:	d1f6      	bne.n	80175da <rcl_clock_add_jump_callback+0x3e>
 80175ec:	6a11      	ldr	r1, [r2, #32]
 80175ee:	42a9      	cmp	r1, r5
 80175f0:	d1f3      	bne.n	80175da <rcl_clock_add_jump_callback+0x3e>
 80175f2:	f04f 0e01 	mov.w	lr, #1
 80175f6:	e001      	b.n	80175fc <rcl_clock_add_jump_callback+0x60>
 80175f8:	f04f 0e0b 	mov.w	lr, #11
 80175fc:	4670      	mov	r0, lr
 80175fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017602:	b002      	add	sp, #8
 8017604:	4770      	bx	lr
 8017606:	3301      	adds	r3, #1
 8017608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801760c:	00d9      	lsls	r1, r3, #3
 801760e:	69e3      	ldr	r3, [r4, #28]
 8017610:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017612:	4798      	blx	r3
 8017614:	b1f0      	cbz	r0, 8017654 <rcl_clock_add_jump_callback+0xb8>
 8017616:	68a3      	ldr	r3, [r4, #8]
 8017618:	6060      	str	r0, [r4, #4]
 801761a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801761e:	f10d 0c18 	add.w	ip, sp, #24
 8017622:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8017626:	f103 0801 	add.w	r8, r3, #1
 801762a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801762e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017632:	f106 0708 	add.w	r7, r6, #8
 8017636:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017638:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801763c:	f04f 0e00 	mov.w	lr, #0
 8017640:	e887 0003 	stmia.w	r7, {r0, r1}
 8017644:	6235      	str	r5, [r6, #32]
 8017646:	4670      	mov	r0, lr
 8017648:	f8c4 8008 	str.w	r8, [r4, #8]
 801764c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017650:	b002      	add	sp, #8
 8017652:	4770      	bx	lr
 8017654:	f04f 0e0a 	mov.w	lr, #10
 8017658:	e7d0      	b.n	80175fc <rcl_clock_add_jump_callback+0x60>
 801765a:	2128      	movs	r1, #40	@ 0x28
 801765c:	e7d7      	b.n	801760e <rcl_clock_add_jump_callback+0x72>
 801765e:	bf00      	nop

08017660 <rcl_clock_remove_jump_callback>:
 8017660:	2800      	cmp	r0, #0
 8017662:	d057      	beq.n	8017714 <rcl_clock_remove_jump_callback+0xb4>
 8017664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017668:	4605      	mov	r5, r0
 801766a:	3014      	adds	r0, #20
 801766c:	4688      	mov	r8, r1
 801766e:	4692      	mov	sl, r2
 8017670:	f7f7 fcb4 	bl	800efdc <rcutils_allocator_is_valid>
 8017674:	2800      	cmp	r0, #0
 8017676:	d03b      	beq.n	80176f0 <rcl_clock_remove_jump_callback+0x90>
 8017678:	f1b8 0f00 	cmp.w	r8, #0
 801767c:	d038      	beq.n	80176f0 <rcl_clock_remove_jump_callback+0x90>
 801767e:	68ae      	ldr	r6, [r5, #8]
 8017680:	b166      	cbz	r6, 801769c <rcl_clock_remove_jump_callback+0x3c>
 8017682:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017686:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801768a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801768e:	464c      	mov	r4, r9
 8017690:	6823      	ldr	r3, [r4, #0]
 8017692:	4543      	cmp	r3, r8
 8017694:	d005      	beq.n	80176a2 <rcl_clock_remove_jump_callback+0x42>
 8017696:	3428      	adds	r4, #40	@ 0x28
 8017698:	42a7      	cmp	r7, r4
 801769a:	d1f9      	bne.n	8017690 <rcl_clock_remove_jump_callback+0x30>
 801769c:	2001      	movs	r0, #1
 801769e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176a2:	6a23      	ldr	r3, [r4, #32]
 80176a4:	3428      	adds	r4, #40	@ 0x28
 80176a6:	42bc      	cmp	r4, r7
 80176a8:	d02d      	beq.n	8017706 <rcl_clock_remove_jump_callback+0xa6>
 80176aa:	4553      	cmp	r3, sl
 80176ac:	d1f0      	bne.n	8017690 <rcl_clock_remove_jump_callback+0x30>
 80176ae:	46a6      	mov	lr, r4
 80176b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80176b4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80176b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80176c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80176c8:	3428      	adds	r4, #40	@ 0x28
 80176ca:	42a7      	cmp	r7, r4
 80176cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80176d0:	d1ed      	bne.n	80176ae <rcl_clock_remove_jump_callback+0x4e>
 80176d2:	3e01      	subs	r6, #1
 80176d4:	60ae      	str	r6, [r5, #8]
 80176d6:	b176      	cbz	r6, 80176f6 <rcl_clock_remove_jump_callback+0x96>
 80176d8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80176dc:	69eb      	ldr	r3, [r5, #28]
 80176de:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80176e0:	00f1      	lsls	r1, r6, #3
 80176e2:	4648      	mov	r0, r9
 80176e4:	4798      	blx	r3
 80176e6:	b1b8      	cbz	r0, 8017718 <rcl_clock_remove_jump_callback+0xb8>
 80176e8:	6068      	str	r0, [r5, #4]
 80176ea:	2000      	movs	r0, #0
 80176ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176f0:	200b      	movs	r0, #11
 80176f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176f6:	4648      	mov	r0, r9
 80176f8:	69ab      	ldr	r3, [r5, #24]
 80176fa:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80176fc:	4798      	blx	r3
 80176fe:	606e      	str	r6, [r5, #4]
 8017700:	4630      	mov	r0, r6
 8017702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017706:	4553      	cmp	r3, sl
 8017708:	d1c8      	bne.n	801769c <rcl_clock_remove_jump_callback+0x3c>
 801770a:	3e01      	subs	r6, #1
 801770c:	60ae      	str	r6, [r5, #8]
 801770e:	2e00      	cmp	r6, #0
 8017710:	d1e2      	bne.n	80176d8 <rcl_clock_remove_jump_callback+0x78>
 8017712:	e7f0      	b.n	80176f6 <rcl_clock_remove_jump_callback+0x96>
 8017714:	200b      	movs	r0, #11
 8017716:	4770      	bx	lr
 8017718:	200a      	movs	r0, #10
 801771a:	e7ea      	b.n	80176f2 <rcl_clock_remove_jump_callback+0x92>

0801771c <_rcl_timer_time_jump>:
 801771c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017720:	4605      	mov	r5, r0
 8017722:	b084      	sub	sp, #16
 8017724:	4614      	mov	r4, r2
 8017726:	b131      	cbz	r1, 8017736 <_rcl_timer_time_jump+0x1a>
 8017728:	7803      	ldrb	r3, [r0, #0]
 801772a:	3b02      	subs	r3, #2
 801772c:	2b01      	cmp	r3, #1
 801772e:	d93f      	bls.n	80177b0 <_rcl_timer_time_jump+0x94>
 8017730:	b004      	add	sp, #16
 8017732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017736:	6813      	ldr	r3, [r2, #0]
 8017738:	a902      	add	r1, sp, #8
 801773a:	6818      	ldr	r0, [r3, #0]
 801773c:	f7ff ff22 	bl	8017584 <rcl_clock_get_now>
 8017740:	2800      	cmp	r0, #0
 8017742:	d1f5      	bne.n	8017730 <_rcl_timer_time_jump+0x14>
 8017744:	6820      	ldr	r0, [r4, #0]
 8017746:	2105      	movs	r1, #5
 8017748:	3020      	adds	r0, #32
 801774a:	f7f7 fc55 	bl	800eff8 <__atomic_load_8>
 801774e:	6823      	ldr	r3, [r4, #0]
 8017750:	4681      	mov	r9, r0
 8017752:	4688      	mov	r8, r1
 8017754:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8017758:	2105      	movs	r1, #5
 801775a:	f7f7 fc4d 	bl	800eff8 <__atomic_load_8>
 801775e:	4607      	mov	r7, r0
 8017760:	6820      	ldr	r0, [r4, #0]
 8017762:	460e      	mov	r6, r1
 8017764:	3018      	adds	r0, #24
 8017766:	2105      	movs	r1, #5
 8017768:	f7f7 fc46 	bl	800eff8 <__atomic_load_8>
 801776c:	782b      	ldrb	r3, [r5, #0]
 801776e:	9a02      	ldr	r2, [sp, #8]
 8017770:	3b02      	subs	r3, #2
 8017772:	2b01      	cmp	r3, #1
 8017774:	460d      	mov	r5, r1
 8017776:	9b03      	ldr	r3, [sp, #12]
 8017778:	4682      	mov	sl, r0
 801777a:	d937      	bls.n	80177ec <_rcl_timer_time_jump+0xd0>
 801777c:	42ba      	cmp	r2, r7
 801777e:	eb73 0106 	sbcs.w	r1, r3, r6
 8017782:	da5f      	bge.n	8017844 <_rcl_timer_time_jump+0x128>
 8017784:	454a      	cmp	r2, r9
 8017786:	eb73 0108 	sbcs.w	r1, r3, r8
 801778a:	dad1      	bge.n	8017730 <_rcl_timer_time_jump+0x14>
 801778c:	6820      	ldr	r0, [r4, #0]
 801778e:	eb1a 0202 	adds.w	r2, sl, r2
 8017792:	eb43 0305 	adc.w	r3, r3, r5
 8017796:	2505      	movs	r5, #5
 8017798:	3028      	adds	r0, #40	@ 0x28
 801779a:	9500      	str	r5, [sp, #0]
 801779c:	f7f7 fc62 	bl	800f064 <__atomic_store_8>
 80177a0:	6820      	ldr	r0, [r4, #0]
 80177a2:	9500      	str	r5, [sp, #0]
 80177a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177a8:	3020      	adds	r0, #32
 80177aa:	f7f7 fc5b 	bl	800f064 <__atomic_store_8>
 80177ae:	e7bf      	b.n	8017730 <_rcl_timer_time_jump+0x14>
 80177b0:	6813      	ldr	r3, [r2, #0]
 80177b2:	a902      	add	r1, sp, #8
 80177b4:	6818      	ldr	r0, [r3, #0]
 80177b6:	f7ff fee5 	bl	8017584 <rcl_clock_get_now>
 80177ba:	2800      	cmp	r0, #0
 80177bc:	d1b8      	bne.n	8017730 <_rcl_timer_time_jump+0x14>
 80177be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177c2:	4313      	orrs	r3, r2
 80177c4:	d0b4      	beq.n	8017730 <_rcl_timer_time_jump+0x14>
 80177c6:	6820      	ldr	r0, [r4, #0]
 80177c8:	2105      	movs	r1, #5
 80177ca:	3028      	adds	r0, #40	@ 0x28
 80177cc:	f7f7 fc14 	bl	800eff8 <__atomic_load_8>
 80177d0:	9d02      	ldr	r5, [sp, #8]
 80177d2:	9b03      	ldr	r3, [sp, #12]
 80177d4:	4602      	mov	r2, r0
 80177d6:	6820      	ldr	r0, [r4, #0]
 80177d8:	1b52      	subs	r2, r2, r5
 80177da:	f04f 0405 	mov.w	r4, #5
 80177de:	9400      	str	r4, [sp, #0]
 80177e0:	eb61 0303 	sbc.w	r3, r1, r3
 80177e4:	3030      	adds	r0, #48	@ 0x30
 80177e6:	f7f7 fc3d 	bl	800f064 <__atomic_store_8>
 80177ea:	e7a1      	b.n	8017730 <_rcl_timer_time_jump+0x14>
 80177ec:	4313      	orrs	r3, r2
 80177ee:	d09f      	beq.n	8017730 <_rcl_timer_time_jump+0x14>
 80177f0:	6820      	ldr	r0, [r4, #0]
 80177f2:	f04f 0805 	mov.w	r8, #5
 80177f6:	2300      	movs	r3, #0
 80177f8:	f8cd 8000 	str.w	r8, [sp]
 80177fc:	3030      	adds	r0, #48	@ 0x30
 80177fe:	2200      	movs	r2, #0
 8017800:	f7f7 fc66 	bl	800f0d0 <__atomic_exchange_8>
 8017804:	ea51 0300 	orrs.w	r3, r1, r0
 8017808:	4606      	mov	r6, r0
 801780a:	460f      	mov	r7, r1
 801780c:	d090      	beq.n	8017730 <_rcl_timer_time_jump+0x14>
 801780e:	9a02      	ldr	r2, [sp, #8]
 8017810:	9b03      	ldr	r3, [sp, #12]
 8017812:	f8cd 8000 	str.w	r8, [sp]
 8017816:	1a12      	subs	r2, r2, r0
 8017818:	6820      	ldr	r0, [r4, #0]
 801781a:	eb63 0301 	sbc.w	r3, r3, r1
 801781e:	eb12 020a 	adds.w	r2, r2, sl
 8017822:	eb43 0305 	adc.w	r3, r3, r5
 8017826:	3028      	adds	r0, #40	@ 0x28
 8017828:	f7f7 fc1c 	bl	800f064 <__atomic_store_8>
 801782c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017830:	f8cd 8000 	str.w	r8, [sp]
 8017834:	6820      	ldr	r0, [r4, #0]
 8017836:	1b92      	subs	r2, r2, r6
 8017838:	eb63 0307 	sbc.w	r3, r3, r7
 801783c:	3020      	adds	r0, #32
 801783e:	f7f7 fc11 	bl	800f064 <__atomic_store_8>
 8017842:	e775      	b.n	8017730 <_rcl_timer_time_jump+0x14>
 8017844:	6820      	ldr	r0, [r4, #0]
 8017846:	3008      	adds	r0, #8
 8017848:	f7ff f976 	bl	8016b38 <rcl_trigger_guard_condition>
 801784c:	e770      	b.n	8017730 <_rcl_timer_time_jump+0x14>
 801784e:	bf00      	nop

08017850 <rcl_get_zero_initialized_timer>:
 8017850:	4b01      	ldr	r3, [pc, #4]	@ (8017858 <rcl_get_zero_initialized_timer+0x8>)
 8017852:	6818      	ldr	r0, [r3, #0]
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	0801f2d0 	.word	0x0801f2d0
 801785c:	00000000 	.word	0x00000000

08017860 <rcl_timer_init>:
 8017860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017864:	b0aa      	sub	sp, #168	@ 0xa8
 8017866:	4604      	mov	r4, r0
 8017868:	a835      	add	r0, sp, #212	@ 0xd4
 801786a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801786e:	460d      	mov	r5, r1
 8017870:	4692      	mov	sl, r2
 8017872:	f7f7 fbb3 	bl	800efdc <rcutils_allocator_is_valid>
 8017876:	2800      	cmp	r0, #0
 8017878:	d064      	beq.n	8017944 <rcl_timer_init+0xe4>
 801787a:	2c00      	cmp	r4, #0
 801787c:	d062      	beq.n	8017944 <rcl_timer_init+0xe4>
 801787e:	2d00      	cmp	r5, #0
 8017880:	d060      	beq.n	8017944 <rcl_timer_init+0xe4>
 8017882:	2f00      	cmp	r7, #0
 8017884:	db5e      	blt.n	8017944 <rcl_timer_init+0xe4>
 8017886:	6823      	ldr	r3, [r4, #0]
 8017888:	b123      	cbz	r3, 8017894 <rcl_timer_init+0x34>
 801788a:	2664      	movs	r6, #100	@ 0x64
 801788c:	4630      	mov	r0, r6
 801788e:	b02a      	add	sp, #168	@ 0xa8
 8017890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017894:	a908      	add	r1, sp, #32
 8017896:	4628      	mov	r0, r5
 8017898:	f7ff fe74 	bl	8017584 <rcl_clock_get_now>
 801789c:	4606      	mov	r6, r0
 801789e:	2800      	cmp	r0, #0
 80178a0:	d1f4      	bne.n	801788c <rcl_timer_init+0x2c>
 80178a2:	ae06      	add	r6, sp, #24
 80178a4:	4630      	mov	r0, r6
 80178a6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80178aa:	f7ff f84d 	bl	8016948 <rcl_get_zero_initialized_guard_condition>
 80178ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80178b2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80178b6:	ae0b      	add	r6, sp, #44	@ 0x2c
 80178b8:	e889 0003 	stmia.w	r9, {r0, r1}
 80178bc:	4630      	mov	r0, r6
 80178be:	f7ff f91f 	bl	8016b00 <rcl_guard_condition_get_default_options>
 80178c2:	ab0d      	add	r3, sp, #52	@ 0x34
 80178c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80178c8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80178cc:	4651      	mov	r1, sl
 80178ce:	e896 000c 	ldmia.w	r6, {r2, r3}
 80178d2:	4648      	mov	r0, r9
 80178d4:	f7ff f842 	bl	801695c <rcl_guard_condition_init>
 80178d8:	4606      	mov	r6, r0
 80178da:	2800      	cmp	r0, #0
 80178dc:	d1d6      	bne.n	801788c <rcl_timer_init+0x2c>
 80178de:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80178e0:	781b      	ldrb	r3, [r3, #0]
 80178e2:	2b01      	cmp	r3, #1
 80178e4:	d033      	beq.n	801794e <rcl_timer_init+0xee>
 80178e6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80178e8:	911a      	str	r1, [sp, #104]	@ 0x68
 80178ea:	4642      	mov	r2, r8
 80178ec:	463b      	mov	r3, r7
 80178ee:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80178f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178f6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80179a8 <rcl_timer_init+0x148>
 80178fa:	eb12 0008 	adds.w	r0, r2, r8
 80178fe:	eb47 0103 	adc.w	r1, r7, r3
 8017902:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8017906:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801790a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801790e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8017912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017916:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801791a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801791e:	f8de 3000 	ldr.w	r3, [lr]
 8017922:	f8cc 3000 	str.w	r3, [ip]
 8017926:	f04f 0a00 	mov.w	sl, #0
 801792a:	4619      	mov	r1, r3
 801792c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8017930:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017932:	2050      	movs	r0, #80	@ 0x50
 8017934:	4798      	blx	r3
 8017936:	6020      	str	r0, [r4, #0]
 8017938:	b358      	cbz	r0, 8017992 <rcl_timer_init+0x132>
 801793a:	2250      	movs	r2, #80	@ 0x50
 801793c:	a916      	add	r1, sp, #88	@ 0x58
 801793e:	f003 ff02 	bl	801b746 <memcpy>
 8017942:	e7a3      	b.n	801788c <rcl_timer_init+0x2c>
 8017944:	260b      	movs	r6, #11
 8017946:	4630      	mov	r0, r6
 8017948:	b02a      	add	sp, #168	@ 0xa8
 801794a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801794e:	2001      	movs	r0, #1
 8017950:	2100      	movs	r1, #0
 8017952:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8017956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801795a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801795e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8017962:	4a13      	ldr	r2, [pc, #76]	@ (80179b0 <rcl_timer_init+0x150>)
 8017964:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017968:	9405      	str	r4, [sp, #20]
 801796a:	9204      	str	r2, [sp, #16]
 801796c:	ab12      	add	r3, sp, #72	@ 0x48
 801796e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017970:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017974:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017978:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801797c:	4628      	mov	r0, r5
 801797e:	f7ff fe0d 	bl	801759c <rcl_clock_add_jump_callback>
 8017982:	4682      	mov	sl, r0
 8017984:	2800      	cmp	r0, #0
 8017986:	d0ae      	beq.n	80178e6 <rcl_timer_init+0x86>
 8017988:	4648      	mov	r0, r9
 801798a:	f7ff f893 	bl	8016ab4 <rcl_guard_condition_fini>
 801798e:	4656      	mov	r6, sl
 8017990:	e77c      	b.n	801788c <rcl_timer_init+0x2c>
 8017992:	4648      	mov	r0, r9
 8017994:	f7ff f88e 	bl	8016ab4 <rcl_guard_condition_fini>
 8017998:	4905      	ldr	r1, [pc, #20]	@ (80179b0 <rcl_timer_init+0x150>)
 801799a:	4622      	mov	r2, r4
 801799c:	4628      	mov	r0, r5
 801799e:	f7ff fe5f 	bl	8017660 <rcl_clock_remove_jump_callback>
 80179a2:	260a      	movs	r6, #10
 80179a4:	e772      	b.n	801788c <rcl_timer_init+0x2c>
 80179a6:	bf00      	nop
	...
 80179b0:	0801771d 	.word	0x0801771d

080179b4 <rcl_timer_call>:
 80179b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b8:	b087      	sub	sp, #28
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d06d      	beq.n	8017a9a <rcl_timer_call+0xe6>
 80179be:	6803      	ldr	r3, [r0, #0]
 80179c0:	4604      	mov	r4, r0
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d063      	beq.n	8017a8e <rcl_timer_call+0xda>
 80179c6:	f3bf 8f5b 	dmb	ish
 80179ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80179ce:	f3bf 8f5b 	dmb	ish
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d150      	bne.n	8017a78 <rcl_timer_call+0xc4>
 80179d6:	6803      	ldr	r3, [r0, #0]
 80179d8:	a904      	add	r1, sp, #16
 80179da:	6818      	ldr	r0, [r3, #0]
 80179dc:	f7ff fdd2 	bl	8017584 <rcl_clock_get_now>
 80179e0:	4605      	mov	r5, r0
 80179e2:	2800      	cmp	r0, #0
 80179e4:	d14a      	bne.n	8017a7c <rcl_timer_call+0xc8>
 80179e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	db4a      	blt.n	8017a84 <rcl_timer_call+0xd0>
 80179ee:	6820      	ldr	r0, [r4, #0]
 80179f0:	f04f 0a05 	mov.w	sl, #5
 80179f4:	f8cd a000 	str.w	sl, [sp]
 80179f8:	3020      	adds	r0, #32
 80179fa:	f7f7 fb69 	bl	800f0d0 <__atomic_exchange_8>
 80179fe:	6823      	ldr	r3, [r4, #0]
 8017a00:	f3bf 8f5b 	dmb	ish
 8017a04:	4680      	mov	r8, r0
 8017a06:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8017a0a:	f3bf 8f5b 	dmb	ish
 8017a0e:	6820      	ldr	r0, [r4, #0]
 8017a10:	4689      	mov	r9, r1
 8017a12:	3028      	adds	r0, #40	@ 0x28
 8017a14:	4651      	mov	r1, sl
 8017a16:	f7f7 faef 	bl	800eff8 <__atomic_load_8>
 8017a1a:	4606      	mov	r6, r0
 8017a1c:	6820      	ldr	r0, [r4, #0]
 8017a1e:	460f      	mov	r7, r1
 8017a20:	3018      	adds	r0, #24
 8017a22:	4651      	mov	r1, sl
 8017a24:	f7f7 fae8 	bl	800eff8 <__atomic_load_8>
 8017a28:	1836      	adds	r6, r6, r0
 8017a2a:	4602      	mov	r2, r0
 8017a2c:	4682      	mov	sl, r0
 8017a2e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8017a32:	eb47 0701 	adc.w	r7, r7, r1
 8017a36:	4286      	cmp	r6, r0
 8017a38:	460b      	mov	r3, r1
 8017a3a:	eb77 010c 	sbcs.w	r1, r7, ip
 8017a3e:	da04      	bge.n	8017a4a <rcl_timer_call+0x96>
 8017a40:	ea53 0102 	orrs.w	r1, r3, r2
 8017a44:	d12e      	bne.n	8017aa4 <rcl_timer_call+0xf0>
 8017a46:	4606      	mov	r6, r0
 8017a48:	4667      	mov	r7, ip
 8017a4a:	6820      	ldr	r0, [r4, #0]
 8017a4c:	2105      	movs	r1, #5
 8017a4e:	4632      	mov	r2, r6
 8017a50:	463b      	mov	r3, r7
 8017a52:	3028      	adds	r0, #40	@ 0x28
 8017a54:	9100      	str	r1, [sp, #0]
 8017a56:	f7f7 fb05 	bl	800f064 <__atomic_store_8>
 8017a5a:	f1bb 0f00 	cmp.w	fp, #0
 8017a5e:	d00d      	beq.n	8017a7c <rcl_timer_call+0xc8>
 8017a60:	9a04      	ldr	r2, [sp, #16]
 8017a62:	9b05      	ldr	r3, [sp, #20]
 8017a64:	ebb2 0208 	subs.w	r2, r2, r8
 8017a68:	4620      	mov	r0, r4
 8017a6a:	eb63 0309 	sbc.w	r3, r3, r9
 8017a6e:	47d8      	blx	fp
 8017a70:	4628      	mov	r0, r5
 8017a72:	b007      	add	sp, #28
 8017a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a78:	f240 3521 	movw	r5, #801	@ 0x321
 8017a7c:	4628      	mov	r0, r5
 8017a7e:	b007      	add	sp, #28
 8017a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a84:	2501      	movs	r5, #1
 8017a86:	4628      	mov	r0, r5
 8017a88:	b007      	add	sp, #28
 8017a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a8e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8017a92:	4628      	mov	r0, r5
 8017a94:	b007      	add	sp, #28
 8017a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a9a:	250b      	movs	r5, #11
 8017a9c:	4628      	mov	r0, r5
 8017a9e:	b007      	add	sp, #28
 8017aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aa4:	1b80      	subs	r0, r0, r6
 8017aa6:	eb6c 0107 	sbc.w	r1, ip, r7
 8017aaa:	3801      	subs	r0, #1
 8017aac:	f161 0100 	sbc.w	r1, r1, #0
 8017ab0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017ab4:	f7e9 f8d8 	bl	8000c68 <__aeabi_ldivmod>
 8017ab8:	9b02      	ldr	r3, [sp, #8]
 8017aba:	3001      	adds	r0, #1
 8017abc:	f141 0100 	adc.w	r1, r1, #0
 8017ac0:	fb00 f303 	mul.w	r3, r0, r3
 8017ac4:	fb01 330a 	mla	r3, r1, sl, r3
 8017ac8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8017acc:	1986      	adds	r6, r0, r6
 8017ace:	4453      	add	r3, sl
 8017ad0:	eb43 0707 	adc.w	r7, r3, r7
 8017ad4:	e7b9      	b.n	8017a4a <rcl_timer_call+0x96>
 8017ad6:	bf00      	nop

08017ad8 <rcl_timer_is_ready>:
 8017ad8:	b570      	push	{r4, r5, r6, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	b378      	cbz	r0, 8017b3e <rcl_timer_is_ready+0x66>
 8017ade:	6803      	ldr	r3, [r0, #0]
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	b383      	cbz	r3, 8017b46 <rcl_timer_is_ready+0x6e>
 8017ae4:	460d      	mov	r5, r1
 8017ae6:	b351      	cbz	r1, 8017b3e <rcl_timer_is_ready+0x66>
 8017ae8:	f3bf 8f5b 	dmb	ish
 8017aec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017af0:	f3bf 8f5b 	dmb	ish
 8017af4:	b953      	cbnz	r3, 8017b0c <rcl_timer_is_ready+0x34>
 8017af6:	6803      	ldr	r3, [r0, #0]
 8017af8:	4669      	mov	r1, sp
 8017afa:	6818      	ldr	r0, [r3, #0]
 8017afc:	f7ff fd42 	bl	8017584 <rcl_clock_get_now>
 8017b00:	4606      	mov	r6, r0
 8017b02:	b140      	cbz	r0, 8017b16 <rcl_timer_is_ready+0x3e>
 8017b04:	f240 3321 	movw	r3, #801	@ 0x321
 8017b08:	4298      	cmp	r0, r3
 8017b0a:	d101      	bne.n	8017b10 <rcl_timer_is_ready+0x38>
 8017b0c:	2600      	movs	r6, #0
 8017b0e:	702e      	strb	r6, [r5, #0]
 8017b10:	4630      	mov	r0, r6
 8017b12:	b002      	add	sp, #8
 8017b14:	bd70      	pop	{r4, r5, r6, pc}
 8017b16:	6820      	ldr	r0, [r4, #0]
 8017b18:	2105      	movs	r1, #5
 8017b1a:	3028      	adds	r0, #40	@ 0x28
 8017b1c:	f7f7 fa6c 	bl	800eff8 <__atomic_load_8>
 8017b20:	9b00      	ldr	r3, [sp, #0]
 8017b22:	1ac0      	subs	r0, r0, r3
 8017b24:	9b01      	ldr	r3, [sp, #4]
 8017b26:	eb61 0103 	sbc.w	r1, r1, r3
 8017b2a:	2801      	cmp	r0, #1
 8017b2c:	f171 0300 	sbcs.w	r3, r1, #0
 8017b30:	bfb4      	ite	lt
 8017b32:	2301      	movlt	r3, #1
 8017b34:	2300      	movge	r3, #0
 8017b36:	4630      	mov	r0, r6
 8017b38:	702b      	strb	r3, [r5, #0]
 8017b3a:	b002      	add	sp, #8
 8017b3c:	bd70      	pop	{r4, r5, r6, pc}
 8017b3e:	260b      	movs	r6, #11
 8017b40:	4630      	mov	r0, r6
 8017b42:	b002      	add	sp, #8
 8017b44:	bd70      	pop	{r4, r5, r6, pc}
 8017b46:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017b4a:	e7e1      	b.n	8017b10 <rcl_timer_is_ready+0x38>

08017b4c <rcl_timer_get_time_until_next_call>:
 8017b4c:	b570      	push	{r4, r5, r6, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	b330      	cbz	r0, 8017ba0 <rcl_timer_get_time_until_next_call+0x54>
 8017b52:	6803      	ldr	r3, [r0, #0]
 8017b54:	4604      	mov	r4, r0
 8017b56:	b33b      	cbz	r3, 8017ba8 <rcl_timer_get_time_until_next_call+0x5c>
 8017b58:	460d      	mov	r5, r1
 8017b5a:	b309      	cbz	r1, 8017ba0 <rcl_timer_get_time_until_next_call+0x54>
 8017b5c:	f3bf 8f5b 	dmb	ish
 8017b60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017b64:	f3bf 8f5b 	dmb	ish
 8017b68:	b9ab      	cbnz	r3, 8017b96 <rcl_timer_get_time_until_next_call+0x4a>
 8017b6a:	6803      	ldr	r3, [r0, #0]
 8017b6c:	4669      	mov	r1, sp
 8017b6e:	6818      	ldr	r0, [r3, #0]
 8017b70:	f7ff fd08 	bl	8017584 <rcl_clock_get_now>
 8017b74:	4606      	mov	r6, r0
 8017b76:	b958      	cbnz	r0, 8017b90 <rcl_timer_get_time_until_next_call+0x44>
 8017b78:	6820      	ldr	r0, [r4, #0]
 8017b7a:	2105      	movs	r1, #5
 8017b7c:	3028      	adds	r0, #40	@ 0x28
 8017b7e:	f7f7 fa3b 	bl	800eff8 <__atomic_load_8>
 8017b82:	9b00      	ldr	r3, [sp, #0]
 8017b84:	1ac0      	subs	r0, r0, r3
 8017b86:	9b01      	ldr	r3, [sp, #4]
 8017b88:	6028      	str	r0, [r5, #0]
 8017b8a:	eb61 0103 	sbc.w	r1, r1, r3
 8017b8e:	6069      	str	r1, [r5, #4]
 8017b90:	4630      	mov	r0, r6
 8017b92:	b002      	add	sp, #8
 8017b94:	bd70      	pop	{r4, r5, r6, pc}
 8017b96:	f240 3621 	movw	r6, #801	@ 0x321
 8017b9a:	4630      	mov	r0, r6
 8017b9c:	b002      	add	sp, #8
 8017b9e:	bd70      	pop	{r4, r5, r6, pc}
 8017ba0:	260b      	movs	r6, #11
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	b002      	add	sp, #8
 8017ba6:	bd70      	pop	{r4, r5, r6, pc}
 8017ba8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017bac:	e7f0      	b.n	8017b90 <rcl_timer_get_time_until_next_call+0x44>
 8017bae:	bf00      	nop

08017bb0 <rcl_timer_get_guard_condition>:
 8017bb0:	b130      	cbz	r0, 8017bc0 <rcl_timer_get_guard_condition+0x10>
 8017bb2:	6800      	ldr	r0, [r0, #0]
 8017bb4:	b120      	cbz	r0, 8017bc0 <rcl_timer_get_guard_condition+0x10>
 8017bb6:	68c3      	ldr	r3, [r0, #12]
 8017bb8:	b10b      	cbz	r3, 8017bbe <rcl_timer_get_guard_condition+0xe>
 8017bba:	3008      	adds	r0, #8
 8017bbc:	4770      	bx	lr
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	4770      	bx	lr
 8017bc2:	bf00      	nop

08017bc4 <rcl_validate_enclave_name_with_size>:
 8017bc4:	b378      	cbz	r0, 8017c26 <rcl_validate_enclave_name_with_size+0x62>
 8017bc6:	b570      	push	{r4, r5, r6, lr}
 8017bc8:	4615      	mov	r5, r2
 8017bca:	b0c2      	sub	sp, #264	@ 0x108
 8017bcc:	b302      	cbz	r2, 8017c10 <rcl_validate_enclave_name_with_size+0x4c>
 8017bce:	461e      	mov	r6, r3
 8017bd0:	466a      	mov	r2, sp
 8017bd2:	ab01      	add	r3, sp, #4
 8017bd4:	460c      	mov	r4, r1
 8017bd6:	f7f7 fe61 	bl	800f89c <rmw_validate_namespace_with_size>
 8017bda:	4684      	mov	ip, r0
 8017bdc:	b9e8      	cbnz	r0, 8017c1a <rcl_validate_enclave_name_with_size+0x56>
 8017bde:	9b00      	ldr	r3, [sp, #0]
 8017be0:	b923      	cbnz	r3, 8017bec <rcl_validate_enclave_name_with_size+0x28>
 8017be2:	2300      	movs	r3, #0
 8017be4:	602b      	str	r3, [r5, #0]
 8017be6:	4660      	mov	r0, ip
 8017be8:	b042      	add	sp, #264	@ 0x108
 8017bea:	bd70      	pop	{r4, r5, r6, pc}
 8017bec:	2b07      	cmp	r3, #7
 8017bee:	d007      	beq.n	8017c00 <rcl_validate_enclave_name_with_size+0x3c>
 8017bf0:	1e5a      	subs	r2, r3, #1
 8017bf2:	2a05      	cmp	r2, #5
 8017bf4:	d833      	bhi.n	8017c5e <rcl_validate_enclave_name_with_size+0x9a>
 8017bf6:	e8df f002 	tbb	[pc, r2]
 8017bfa:	2c2f      	.short	0x2c2f
 8017bfc:	1a232629 	.word	0x1a232629
 8017c00:	2cff      	cmp	r4, #255	@ 0xff
 8017c02:	d9ee      	bls.n	8017be2 <rcl_validate_enclave_name_with_size+0x1e>
 8017c04:	602b      	str	r3, [r5, #0]
 8017c06:	2e00      	cmp	r6, #0
 8017c08:	d0ed      	beq.n	8017be6 <rcl_validate_enclave_name_with_size+0x22>
 8017c0a:	23fe      	movs	r3, #254	@ 0xfe
 8017c0c:	6033      	str	r3, [r6, #0]
 8017c0e:	e7ea      	b.n	8017be6 <rcl_validate_enclave_name_with_size+0x22>
 8017c10:	f04f 0c0b 	mov.w	ip, #11
 8017c14:	4660      	mov	r0, ip
 8017c16:	b042      	add	sp, #264	@ 0x108
 8017c18:	bd70      	pop	{r4, r5, r6, pc}
 8017c1a:	f7fe fcad 	bl	8016578 <rcl_convert_rmw_ret_to_rcl_ret>
 8017c1e:	4684      	mov	ip, r0
 8017c20:	4660      	mov	r0, ip
 8017c22:	b042      	add	sp, #264	@ 0x108
 8017c24:	bd70      	pop	{r4, r5, r6, pc}
 8017c26:	f04f 0c0b 	mov.w	ip, #11
 8017c2a:	4660      	mov	r0, ip
 8017c2c:	4770      	bx	lr
 8017c2e:	2306      	movs	r3, #6
 8017c30:	602b      	str	r3, [r5, #0]
 8017c32:	2e00      	cmp	r6, #0
 8017c34:	d0d7      	beq.n	8017be6 <rcl_validate_enclave_name_with_size+0x22>
 8017c36:	9b01      	ldr	r3, [sp, #4]
 8017c38:	6033      	str	r3, [r6, #0]
 8017c3a:	4660      	mov	r0, ip
 8017c3c:	b042      	add	sp, #264	@ 0x108
 8017c3e:	bd70      	pop	{r4, r5, r6, pc}
 8017c40:	2305      	movs	r3, #5
 8017c42:	602b      	str	r3, [r5, #0]
 8017c44:	e7f5      	b.n	8017c32 <rcl_validate_enclave_name_with_size+0x6e>
 8017c46:	2304      	movs	r3, #4
 8017c48:	602b      	str	r3, [r5, #0]
 8017c4a:	e7f2      	b.n	8017c32 <rcl_validate_enclave_name_with_size+0x6e>
 8017c4c:	2303      	movs	r3, #3
 8017c4e:	602b      	str	r3, [r5, #0]
 8017c50:	e7ef      	b.n	8017c32 <rcl_validate_enclave_name_with_size+0x6e>
 8017c52:	2302      	movs	r3, #2
 8017c54:	602b      	str	r3, [r5, #0]
 8017c56:	e7ec      	b.n	8017c32 <rcl_validate_enclave_name_with_size+0x6e>
 8017c58:	2301      	movs	r3, #1
 8017c5a:	602b      	str	r3, [r5, #0]
 8017c5c:	e7e9      	b.n	8017c32 <rcl_validate_enclave_name_with_size+0x6e>
 8017c5e:	4a04      	ldr	r2, [pc, #16]	@ (8017c70 <rcl_validate_enclave_name_with_size+0xac>)
 8017c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017c64:	a802      	add	r0, sp, #8
 8017c66:	f7f7 fba5 	bl	800f3b4 <rcutils_snprintf>
 8017c6a:	f04f 0c01 	mov.w	ip, #1
 8017c6e:	e7ba      	b.n	8017be6 <rcl_validate_enclave_name_with_size+0x22>
 8017c70:	0801f2d4 	.word	0x0801f2d4

08017c74 <rcl_validate_enclave_name>:
 8017c74:	b168      	cbz	r0, 8017c92 <rcl_validate_enclave_name+0x1e>
 8017c76:	b570      	push	{r4, r5, r6, lr}
 8017c78:	460d      	mov	r5, r1
 8017c7a:	4616      	mov	r6, r2
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	f7e8 fad9 	bl	8000234 <strlen>
 8017c82:	4633      	mov	r3, r6
 8017c84:	4601      	mov	r1, r0
 8017c86:	462a      	mov	r2, r5
 8017c88:	4620      	mov	r0, r4
 8017c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c8e:	f7ff bf99 	b.w	8017bc4 <rcl_validate_enclave_name_with_size>
 8017c92:	200b      	movs	r0, #11
 8017c94:	4770      	bx	lr
 8017c96:	bf00      	nop

08017c98 <rcl_validate_topic_name>:
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	d07a      	beq.n	8017d92 <rcl_validate_topic_name+0xfa>
 8017c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca0:	460e      	mov	r6, r1
 8017ca2:	2900      	cmp	r1, #0
 8017ca4:	d07c      	beq.n	8017da0 <rcl_validate_topic_name+0x108>
 8017ca6:	4617      	mov	r7, r2
 8017ca8:	4605      	mov	r5, r0
 8017caa:	f7e8 fac3 	bl	8000234 <strlen>
 8017cae:	b1b0      	cbz	r0, 8017cde <rcl_validate_topic_name+0x46>
 8017cb0:	f895 9000 	ldrb.w	r9, [r5]
 8017cb4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017e38 <rcl_validate_topic_name+0x1a0>
 8017cb8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017cbc:	f013 0304 	ands.w	r3, r3, #4
 8017cc0:	d169      	bne.n	8017d96 <rcl_validate_topic_name+0xfe>
 8017cc2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8017cc6:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017cca:	2a2f      	cmp	r2, #47	@ 0x2f
 8017ccc:	d10e      	bne.n	8017cec <rcl_validate_topic_name+0x54>
 8017cce:	2202      	movs	r2, #2
 8017cd0:	6032      	str	r2, [r6, #0]
 8017cd2:	b36f      	cbz	r7, 8017d30 <rcl_validate_topic_name+0x98>
 8017cd4:	f8c7 8000 	str.w	r8, [r7]
 8017cd8:	4618      	mov	r0, r3
 8017cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cde:	2301      	movs	r3, #1
 8017ce0:	6033      	str	r3, [r6, #0]
 8017ce2:	b32f      	cbz	r7, 8017d30 <rcl_validate_topic_name+0x98>
 8017ce4:	2000      	movs	r0, #0
 8017ce6:	6038      	str	r0, [r7, #0]
 8017ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cec:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017cf0:	461c      	mov	r4, r3
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017cf8:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017cfc:	f1be 0f09 	cmp.w	lr, #9
 8017d00:	d919      	bls.n	8017d36 <rcl_validate_topic_name+0x9e>
 8017d02:	f022 0e20 	bic.w	lr, r2, #32
 8017d06:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017d0a:	f1be 0f19 	cmp.w	lr, #25
 8017d0e:	d912      	bls.n	8017d36 <rcl_validate_topic_name+0x9e>
 8017d10:	2a5f      	cmp	r2, #95	@ 0x5f
 8017d12:	d019      	beq.n	8017d48 <rcl_validate_topic_name+0xb0>
 8017d14:	2a2f      	cmp	r2, #47	@ 0x2f
 8017d16:	d051      	beq.n	8017dbc <rcl_validate_topic_name+0x124>
 8017d18:	2a7e      	cmp	r2, #126	@ 0x7e
 8017d1a:	d048      	beq.n	8017dae <rcl_validate_topic_name+0x116>
 8017d1c:	2a7b      	cmp	r2, #123	@ 0x7b
 8017d1e:	d054      	beq.n	8017dca <rcl_validate_topic_name+0x132>
 8017d20:	2a7d      	cmp	r2, #125	@ 0x7d
 8017d22:	d161      	bne.n	8017de8 <rcl_validate_topic_name+0x150>
 8017d24:	2c00      	cmp	r4, #0
 8017d26:	d155      	bne.n	8017dd4 <rcl_validate_topic_name+0x13c>
 8017d28:	2305      	movs	r3, #5
 8017d2a:	6033      	str	r3, [r6, #0]
 8017d2c:	b107      	cbz	r7, 8017d30 <rcl_validate_topic_name+0x98>
 8017d2e:	6039      	str	r1, [r7, #0]
 8017d30:	2000      	movs	r0, #0
 8017d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d36:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017d3a:	0752      	lsls	r2, r2, #29
 8017d3c:	d504      	bpl.n	8017d48 <rcl_validate_topic_name+0xb0>
 8017d3e:	b11c      	cbz	r4, 8017d48 <rcl_validate_topic_name+0xb0>
 8017d40:	b111      	cbz	r1, 8017d48 <rcl_validate_topic_name+0xb0>
 8017d42:	1e4a      	subs	r2, r1, #1
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d02d      	beq.n	8017da4 <rcl_validate_topic_name+0x10c>
 8017d48:	3101      	adds	r1, #1
 8017d4a:	4288      	cmp	r0, r1
 8017d4c:	d1d2      	bne.n	8017cf4 <rcl_validate_topic_name+0x5c>
 8017d4e:	2c00      	cmp	r4, #0
 8017d50:	d145      	bne.n	8017dde <rcl_validate_topic_name+0x146>
 8017d52:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8017d56:	d04f      	beq.n	8017df8 <rcl_validate_topic_name+0x160>
 8017d58:	4620      	mov	r0, r4
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	e006      	b.n	8017d6c <rcl_validate_topic_name+0xd4>
 8017d5e:	428b      	cmp	r3, r1
 8017d60:	f105 0501 	add.w	r5, r5, #1
 8017d64:	f103 0201 	add.w	r2, r3, #1
 8017d68:	d236      	bcs.n	8017dd8 <rcl_validate_topic_name+0x140>
 8017d6a:	4613      	mov	r3, r2
 8017d6c:	4580      	cmp	r8, r0
 8017d6e:	f100 0001 	add.w	r0, r0, #1
 8017d72:	d0f4      	beq.n	8017d5e <rcl_validate_topic_name+0xc6>
 8017d74:	782a      	ldrb	r2, [r5, #0]
 8017d76:	2a2f      	cmp	r2, #47	@ 0x2f
 8017d78:	d1f1      	bne.n	8017d5e <rcl_validate_topic_name+0xc6>
 8017d7a:	786a      	ldrb	r2, [r5, #1]
 8017d7c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017d80:	0754      	lsls	r4, r2, #29
 8017d82:	d5ec      	bpl.n	8017d5e <rcl_validate_topic_name+0xc6>
 8017d84:	2204      	movs	r2, #4
 8017d86:	6032      	str	r2, [r6, #0]
 8017d88:	2f00      	cmp	r7, #0
 8017d8a:	d0d1      	beq.n	8017d30 <rcl_validate_topic_name+0x98>
 8017d8c:	603b      	str	r3, [r7, #0]
 8017d8e:	2000      	movs	r0, #0
 8017d90:	e7aa      	b.n	8017ce8 <rcl_validate_topic_name+0x50>
 8017d92:	200b      	movs	r0, #11
 8017d94:	4770      	bx	lr
 8017d96:	2304      	movs	r3, #4
 8017d98:	6033      	str	r3, [r6, #0]
 8017d9a:	2f00      	cmp	r7, #0
 8017d9c:	d1a2      	bne.n	8017ce4 <rcl_validate_topic_name+0x4c>
 8017d9e:	e7c7      	b.n	8017d30 <rcl_validate_topic_name+0x98>
 8017da0:	200b      	movs	r0, #11
 8017da2:	e7a1      	b.n	8017ce8 <rcl_validate_topic_name+0x50>
 8017da4:	2309      	movs	r3, #9
 8017da6:	6033      	str	r3, [r6, #0]
 8017da8:	2f00      	cmp	r7, #0
 8017daa:	d1c0      	bne.n	8017d2e <rcl_validate_topic_name+0x96>
 8017dac:	e7c0      	b.n	8017d30 <rcl_validate_topic_name+0x98>
 8017dae:	2900      	cmp	r1, #0
 8017db0:	d0ca      	beq.n	8017d48 <rcl_validate_topic_name+0xb0>
 8017db2:	2306      	movs	r3, #6
 8017db4:	6033      	str	r3, [r6, #0]
 8017db6:	2f00      	cmp	r7, #0
 8017db8:	d1b9      	bne.n	8017d2e <rcl_validate_topic_name+0x96>
 8017dba:	e7b9      	b.n	8017d30 <rcl_validate_topic_name+0x98>
 8017dbc:	2c00      	cmp	r4, #0
 8017dbe:	d0c3      	beq.n	8017d48 <rcl_validate_topic_name+0xb0>
 8017dc0:	2308      	movs	r3, #8
 8017dc2:	6033      	str	r3, [r6, #0]
 8017dc4:	2f00      	cmp	r7, #0
 8017dc6:	d1b2      	bne.n	8017d2e <rcl_validate_topic_name+0x96>
 8017dc8:	e7b2      	b.n	8017d30 <rcl_validate_topic_name+0x98>
 8017dca:	2c00      	cmp	r4, #0
 8017dcc:	d1f8      	bne.n	8017dc0 <rcl_validate_topic_name+0x128>
 8017dce:	460b      	mov	r3, r1
 8017dd0:	2401      	movs	r4, #1
 8017dd2:	e7b9      	b.n	8017d48 <rcl_validate_topic_name+0xb0>
 8017dd4:	2400      	movs	r4, #0
 8017dd6:	e7b7      	b.n	8017d48 <rcl_validate_topic_name+0xb0>
 8017dd8:	2000      	movs	r0, #0
 8017dda:	6030      	str	r0, [r6, #0]
 8017ddc:	e784      	b.n	8017ce8 <rcl_validate_topic_name+0x50>
 8017dde:	2205      	movs	r2, #5
 8017de0:	6032      	str	r2, [r6, #0]
 8017de2:	2f00      	cmp	r7, #0
 8017de4:	d1d2      	bne.n	8017d8c <rcl_validate_topic_name+0xf4>
 8017de6:	e7a3      	b.n	8017d30 <rcl_validate_topic_name+0x98>
 8017de8:	2c00      	cmp	r4, #0
 8017dea:	bf14      	ite	ne
 8017dec:	2308      	movne	r3, #8
 8017dee:	2303      	moveq	r3, #3
 8017df0:	6033      	str	r3, [r6, #0]
 8017df2:	2f00      	cmp	r7, #0
 8017df4:	d19b      	bne.n	8017d2e <rcl_validate_topic_name+0x96>
 8017df6:	e79b      	b.n	8017d30 <rcl_validate_topic_name+0x98>
 8017df8:	2301      	movs	r3, #1
 8017dfa:	e00a      	b.n	8017e12 <rcl_validate_topic_name+0x17a>
 8017dfc:	2c01      	cmp	r4, #1
 8017dfe:	d013      	beq.n	8017e28 <rcl_validate_topic_name+0x190>
 8017e00:	4299      	cmp	r1, r3
 8017e02:	f104 0401 	add.w	r4, r4, #1
 8017e06:	f105 0501 	add.w	r5, r5, #1
 8017e0a:	f103 0201 	add.w	r2, r3, #1
 8017e0e:	d9e3      	bls.n	8017dd8 <rcl_validate_topic_name+0x140>
 8017e10:	4613      	mov	r3, r2
 8017e12:	45a0      	cmp	r8, r4
 8017e14:	d0f4      	beq.n	8017e00 <rcl_validate_topic_name+0x168>
 8017e16:	782a      	ldrb	r2, [r5, #0]
 8017e18:	2a2f      	cmp	r2, #47	@ 0x2f
 8017e1a:	d1ef      	bne.n	8017dfc <rcl_validate_topic_name+0x164>
 8017e1c:	786a      	ldrb	r2, [r5, #1]
 8017e1e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017e22:	0752      	lsls	r2, r2, #29
 8017e24:	d5ec      	bpl.n	8017e00 <rcl_validate_topic_name+0x168>
 8017e26:	e7ad      	b.n	8017d84 <rcl_validate_topic_name+0xec>
 8017e28:	2307      	movs	r3, #7
 8017e2a:	6033      	str	r3, [r6, #0]
 8017e2c:	2f00      	cmp	r7, #0
 8017e2e:	f43f af7f 	beq.w	8017d30 <rcl_validate_topic_name+0x98>
 8017e32:	603c      	str	r4, [r7, #0]
 8017e34:	2000      	movs	r0, #0
 8017e36:	e757      	b.n	8017ce8 <rcl_validate_topic_name+0x50>
 8017e38:	0801f5a6 	.word	0x0801f5a6

08017e3c <rcl_get_zero_initialized_wait_set>:
 8017e3c:	b510      	push	{r4, lr}
 8017e3e:	4c08      	ldr	r4, [pc, #32]	@ (8017e60 <rcl_get_zero_initialized_wait_set+0x24>)
 8017e40:	4686      	mov	lr, r0
 8017e42:	4684      	mov	ip, r0
 8017e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e56:	6823      	ldr	r3, [r4, #0]
 8017e58:	f8cc 3000 	str.w	r3, [ip]
 8017e5c:	4670      	mov	r0, lr
 8017e5e:	bd10      	pop	{r4, pc}
 8017e60:	0801f334 	.word	0x0801f334

08017e64 <rcl_wait_set_is_valid>:
 8017e64:	b118      	cbz	r0, 8017e6e <rcl_wait_set_is_valid+0xa>
 8017e66:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017e68:	3800      	subs	r0, #0
 8017e6a:	bf18      	it	ne
 8017e6c:	2001      	movne	r0, #1
 8017e6e:	4770      	bx	lr

08017e70 <rcl_wait_set_fini>:
 8017e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e74:	b082      	sub	sp, #8
 8017e76:	2800      	cmp	r0, #0
 8017e78:	f000 8095 	beq.w	8017fa6 <rcl_wait_set_fini+0x136>
 8017e7c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017e7e:	4604      	mov	r4, r0
 8017e80:	2e00      	cmp	r6, #0
 8017e82:	f000 808c 	beq.w	8017f9e <rcl_wait_set_fini+0x12e>
 8017e86:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8017e88:	f001 ff82 	bl	8019d90 <rmw_destroy_wait_set>
 8017e8c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e8e:	1e06      	subs	r6, r0, #0
 8017e90:	bf18      	it	ne
 8017e92:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017e96:	2d00      	cmp	r5, #0
 8017e98:	f000 8081 	beq.w	8017f9e <rcl_wait_set_fini+0x12e>
 8017e9c:	6820      	ldr	r0, [r4, #0]
 8017e9e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017ea2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017ea4:	2700      	movs	r7, #0
 8017ea6:	6067      	str	r7, [r4, #4]
 8017ea8:	602f      	str	r7, [r5, #0]
 8017eaa:	b120      	cbz	r0, 8017eb6 <rcl_wait_set_fini+0x46>
 8017eac:	9101      	str	r1, [sp, #4]
 8017eae:	47c0      	blx	r8
 8017eb0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017eb2:	9901      	ldr	r1, [sp, #4]
 8017eb4:	6027      	str	r7, [r4, #0]
 8017eb6:	68a8      	ldr	r0, [r5, #8]
 8017eb8:	b120      	cbz	r0, 8017ec4 <rcl_wait_set_fini+0x54>
 8017eba:	47c0      	blx	r8
 8017ebc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017ec4:	68a0      	ldr	r0, [r4, #8]
 8017ec6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017ec8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017eca:	f04f 0800 	mov.w	r8, #0
 8017ece:	f8c4 800c 	str.w	r8, [r4, #12]
 8017ed2:	f8c5 800c 	str.w	r8, [r5, #12]
 8017ed6:	b128      	cbz	r0, 8017ee4 <rcl_wait_set_fini+0x74>
 8017ed8:	47b8      	blx	r7
 8017eda:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017edc:	f8c4 8008 	str.w	r8, [r4, #8]
 8017ee0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017ee2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017ee4:	6968      	ldr	r0, [r5, #20]
 8017ee6:	f04f 0800 	mov.w	r8, #0
 8017eea:	f8c5 8010 	str.w	r8, [r5, #16]
 8017eee:	b128      	cbz	r0, 8017efc <rcl_wait_set_fini+0x8c>
 8017ef0:	47b8      	blx	r7
 8017ef2:	f8c5 8014 	str.w	r8, [r5, #20]
 8017ef6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017ef8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017efa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017efc:	6920      	ldr	r0, [r4, #16]
 8017efe:	f04f 0800 	mov.w	r8, #0
 8017f02:	f8c4 8014 	str.w	r8, [r4, #20]
 8017f06:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8017f0a:	b128      	cbz	r0, 8017f18 <rcl_wait_set_fini+0xa8>
 8017f0c:	47b8      	blx	r7
 8017f0e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f10:	f8c4 8010 	str.w	r8, [r4, #16]
 8017f14:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017f16:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017f18:	69a0      	ldr	r0, [r4, #24]
 8017f1a:	f04f 0800 	mov.w	r8, #0
 8017f1e:	f8c4 801c 	str.w	r8, [r4, #28]
 8017f22:	f8c5 8018 	str.w	r8, [r5, #24]
 8017f26:	b128      	cbz	r0, 8017f34 <rcl_wait_set_fini+0xc4>
 8017f28:	9101      	str	r1, [sp, #4]
 8017f2a:	47b8      	blx	r7
 8017f2c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f2e:	9901      	ldr	r1, [sp, #4]
 8017f30:	f8c4 8018 	str.w	r8, [r4, #24]
 8017f34:	6a28      	ldr	r0, [r5, #32]
 8017f36:	b120      	cbz	r0, 8017f42 <rcl_wait_set_fini+0xd2>
 8017f38:	47b8      	blx	r7
 8017f3a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8017f42:	6a20      	ldr	r0, [r4, #32]
 8017f44:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017f48:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017f4a:	2700      	movs	r7, #0
 8017f4c:	6267      	str	r7, [r4, #36]	@ 0x24
 8017f4e:	626f      	str	r7, [r5, #36]	@ 0x24
 8017f50:	b120      	cbz	r0, 8017f5c <rcl_wait_set_fini+0xec>
 8017f52:	9101      	str	r1, [sp, #4]
 8017f54:	47c0      	blx	r8
 8017f56:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f58:	9901      	ldr	r1, [sp, #4]
 8017f5a:	6227      	str	r7, [r4, #32]
 8017f5c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8017f5e:	b120      	cbz	r0, 8017f6a <rcl_wait_set_fini+0xfa>
 8017f60:	47c0      	blx	r8
 8017f62:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f64:	2300      	movs	r3, #0
 8017f66:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017f6a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017f6c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017f70:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017f72:	2700      	movs	r7, #0
 8017f74:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8017f76:	632f      	str	r7, [r5, #48]	@ 0x30
 8017f78:	b120      	cbz	r0, 8017f84 <rcl_wait_set_fini+0x114>
 8017f7a:	9101      	str	r1, [sp, #4]
 8017f7c:	47c0      	blx	r8
 8017f7e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f80:	9901      	ldr	r1, [sp, #4]
 8017f82:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017f84:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017f86:	b120      	cbz	r0, 8017f92 <rcl_wait_set_fini+0x122>
 8017f88:	47c0      	blx	r8
 8017f8a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8017f92:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017f94:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017f96:	4628      	mov	r0, r5
 8017f98:	4798      	blx	r3
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	b002      	add	sp, #8
 8017fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fa6:	260b      	movs	r6, #11
 8017fa8:	4630      	mov	r0, r6
 8017faa:	b002      	add	sp, #8
 8017fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017fb0 <rcl_wait_set_add_subscription>:
 8017fb0:	b318      	cbz	r0, 8017ffa <rcl_wait_set_add_subscription+0x4a>
 8017fb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017fb4:	b570      	push	{r4, r5, r6, lr}
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	b30b      	cbz	r3, 8017ffe <rcl_wait_set_add_subscription+0x4e>
 8017fba:	b319      	cbz	r1, 8018004 <rcl_wait_set_add_subscription+0x54>
 8017fbc:	681d      	ldr	r5, [r3, #0]
 8017fbe:	6840      	ldr	r0, [r0, #4]
 8017fc0:	4285      	cmp	r5, r0
 8017fc2:	d217      	bcs.n	8017ff4 <rcl_wait_set_add_subscription+0x44>
 8017fc4:	6820      	ldr	r0, [r4, #0]
 8017fc6:	1c6e      	adds	r6, r5, #1
 8017fc8:	601e      	str	r6, [r3, #0]
 8017fca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017fce:	b102      	cbz	r2, 8017fd2 <rcl_wait_set_add_subscription+0x22>
 8017fd0:	6015      	str	r5, [r2, #0]
 8017fd2:	4608      	mov	r0, r1
 8017fd4:	f7ff fa36 	bl	8017444 <rcl_subscription_get_rmw_handle>
 8017fd8:	b150      	cbz	r0, 8017ff0 <rcl_wait_set_add_subscription+0x40>
 8017fda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fdc:	6842      	ldr	r2, [r0, #4]
 8017fde:	689b      	ldr	r3, [r3, #8]
 8017fe0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017fe4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017fe6:	6853      	ldr	r3, [r2, #4]
 8017fe8:	3301      	adds	r3, #1
 8017fea:	2000      	movs	r0, #0
 8017fec:	6053      	str	r3, [r2, #4]
 8017fee:	bd70      	pop	{r4, r5, r6, pc}
 8017ff0:	2001      	movs	r0, #1
 8017ff2:	bd70      	pop	{r4, r5, r6, pc}
 8017ff4:	f240 3086 	movw	r0, #902	@ 0x386
 8017ff8:	bd70      	pop	{r4, r5, r6, pc}
 8017ffa:	200b      	movs	r0, #11
 8017ffc:	4770      	bx	lr
 8017ffe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018002:	bd70      	pop	{r4, r5, r6, pc}
 8018004:	200b      	movs	r0, #11
 8018006:	bd70      	pop	{r4, r5, r6, pc}

08018008 <rcl_wait_set_clear>:
 8018008:	2800      	cmp	r0, #0
 801800a:	d073      	beq.n	80180f4 <rcl_wait_set_clear+0xec>
 801800c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801800e:	b510      	push	{r4, lr}
 8018010:	4604      	mov	r4, r0
 8018012:	2b00      	cmp	r3, #0
 8018014:	d070      	beq.n	80180f8 <rcl_wait_set_clear+0xf0>
 8018016:	6800      	ldr	r0, [r0, #0]
 8018018:	b138      	cbz	r0, 801802a <rcl_wait_set_clear+0x22>
 801801a:	6862      	ldr	r2, [r4, #4]
 801801c:	2100      	movs	r1, #0
 801801e:	0092      	lsls	r2, r2, #2
 8018020:	f003 fac8 	bl	801b5b4 <memset>
 8018024:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018026:	2200      	movs	r2, #0
 8018028:	601a      	str	r2, [r3, #0]
 801802a:	68a0      	ldr	r0, [r4, #8]
 801802c:	b138      	cbz	r0, 801803e <rcl_wait_set_clear+0x36>
 801802e:	68e2      	ldr	r2, [r4, #12]
 8018030:	2100      	movs	r1, #0
 8018032:	0092      	lsls	r2, r2, #2
 8018034:	f003 fabe 	bl	801b5b4 <memset>
 8018038:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801803a:	2200      	movs	r2, #0
 801803c:	60da      	str	r2, [r3, #12]
 801803e:	69a0      	ldr	r0, [r4, #24]
 8018040:	b138      	cbz	r0, 8018052 <rcl_wait_set_clear+0x4a>
 8018042:	69e2      	ldr	r2, [r4, #28]
 8018044:	2100      	movs	r1, #0
 8018046:	0092      	lsls	r2, r2, #2
 8018048:	f003 fab4 	bl	801b5b4 <memset>
 801804c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801804e:	2200      	movs	r2, #0
 8018050:	619a      	str	r2, [r3, #24]
 8018052:	6a20      	ldr	r0, [r4, #32]
 8018054:	b138      	cbz	r0, 8018066 <rcl_wait_set_clear+0x5e>
 8018056:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8018058:	2100      	movs	r1, #0
 801805a:	0092      	lsls	r2, r2, #2
 801805c:	f003 faaa 	bl	801b5b4 <memset>
 8018060:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018062:	2200      	movs	r2, #0
 8018064:	625a      	str	r2, [r3, #36]	@ 0x24
 8018066:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8018068:	b138      	cbz	r0, 801807a <rcl_wait_set_clear+0x72>
 801806a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801806c:	2100      	movs	r1, #0
 801806e:	0092      	lsls	r2, r2, #2
 8018070:	f003 faa0 	bl	801b5b4 <memset>
 8018074:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018076:	2200      	movs	r2, #0
 8018078:	631a      	str	r2, [r3, #48]	@ 0x30
 801807a:	6920      	ldr	r0, [r4, #16]
 801807c:	b138      	cbz	r0, 801808e <rcl_wait_set_clear+0x86>
 801807e:	6962      	ldr	r2, [r4, #20]
 8018080:	2100      	movs	r1, #0
 8018082:	0092      	lsls	r2, r2, #2
 8018084:	f003 fa96 	bl	801b5b4 <memset>
 8018088:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801808a:	2200      	movs	r2, #0
 801808c:	641a      	str	r2, [r3, #64]	@ 0x40
 801808e:	6898      	ldr	r0, [r3, #8]
 8018090:	b138      	cbz	r0, 80180a2 <rcl_wait_set_clear+0x9a>
 8018092:	685a      	ldr	r2, [r3, #4]
 8018094:	2100      	movs	r1, #0
 8018096:	0092      	lsls	r2, r2, #2
 8018098:	f003 fa8c 	bl	801b5b4 <memset>
 801809c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801809e:	2200      	movs	r2, #0
 80180a0:	605a      	str	r2, [r3, #4]
 80180a2:	6958      	ldr	r0, [r3, #20]
 80180a4:	b138      	cbz	r0, 80180b6 <rcl_wait_set_clear+0xae>
 80180a6:	691a      	ldr	r2, [r3, #16]
 80180a8:	2100      	movs	r1, #0
 80180aa:	0092      	lsls	r2, r2, #2
 80180ac:	f003 fa82 	bl	801b5b4 <memset>
 80180b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180b2:	2200      	movs	r2, #0
 80180b4:	611a      	str	r2, [r3, #16]
 80180b6:	6a18      	ldr	r0, [r3, #32]
 80180b8:	b138      	cbz	r0, 80180ca <rcl_wait_set_clear+0xc2>
 80180ba:	69da      	ldr	r2, [r3, #28]
 80180bc:	2100      	movs	r1, #0
 80180be:	0092      	lsls	r2, r2, #2
 80180c0:	f003 fa78 	bl	801b5b4 <memset>
 80180c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180c6:	2200      	movs	r2, #0
 80180c8:	61da      	str	r2, [r3, #28]
 80180ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80180cc:	b138      	cbz	r0, 80180de <rcl_wait_set_clear+0xd6>
 80180ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80180d0:	2100      	movs	r1, #0
 80180d2:	0092      	lsls	r2, r2, #2
 80180d4:	f003 fa6e 	bl	801b5b4 <memset>
 80180d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180da:	2200      	movs	r2, #0
 80180dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80180de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80180e0:	b138      	cbz	r0, 80180f2 <rcl_wait_set_clear+0xea>
 80180e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80180e4:	2100      	movs	r1, #0
 80180e6:	0092      	lsls	r2, r2, #2
 80180e8:	f003 fa64 	bl	801b5b4 <memset>
 80180ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180ee:	2000      	movs	r0, #0
 80180f0:	6358      	str	r0, [r3, #52]	@ 0x34
 80180f2:	bd10      	pop	{r4, pc}
 80180f4:	200b      	movs	r0, #11
 80180f6:	4770      	bx	lr
 80180f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80180fc:	bd10      	pop	{r4, pc}
 80180fe:	bf00      	nop

08018100 <rcl_wait_set_resize>:
 8018100:	2800      	cmp	r0, #0
 8018102:	f000 8185 	beq.w	8018410 <rcl_wait_set_resize+0x310>
 8018106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801810a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801810c:	b083      	sub	sp, #12
 801810e:	4605      	mov	r5, r0
 8018110:	2c00      	cmp	r4, #0
 8018112:	f000 817f 	beq.w	8018414 <rcl_wait_set_resize+0x314>
 8018116:	f04f 0900 	mov.w	r9, #0
 801811a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801811e:	461f      	mov	r7, r3
 8018120:	4688      	mov	r8, r1
 8018122:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8018126:	4616      	mov	r6, r2
 8018128:	f8c0 9004 	str.w	r9, [r0, #4]
 801812c:	f8c4 9000 	str.w	r9, [r4]
 8018130:	2900      	cmp	r1, #0
 8018132:	f000 80bd 	beq.w	80182b0 <rcl_wait_set_resize+0x1b0>
 8018136:	008c      	lsls	r4, r1, #2
 8018138:	6800      	ldr	r0, [r0, #0]
 801813a:	9301      	str	r3, [sp, #4]
 801813c:	4652      	mov	r2, sl
 801813e:	4621      	mov	r1, r4
 8018140:	4798      	blx	r3
 8018142:	9b01      	ldr	r3, [sp, #4]
 8018144:	6028      	str	r0, [r5, #0]
 8018146:	2800      	cmp	r0, #0
 8018148:	f000 80cb 	beq.w	80182e2 <rcl_wait_set_resize+0x1e2>
 801814c:	4622      	mov	r2, r4
 801814e:	4649      	mov	r1, r9
 8018150:	9301      	str	r3, [sp, #4]
 8018152:	f003 fa2f 	bl	801b5b4 <memset>
 8018156:	f8c5 8004 	str.w	r8, [r5, #4]
 801815a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801815e:	9b01      	ldr	r3, [sp, #4]
 8018160:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018164:	f8c8 9004 	str.w	r9, [r8, #4]
 8018168:	4652      	mov	r2, sl
 801816a:	4621      	mov	r1, r4
 801816c:	4798      	blx	r3
 801816e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018170:	f8c8 0008 	str.w	r0, [r8, #8]
 8018174:	689b      	ldr	r3, [r3, #8]
 8018176:	2b00      	cmp	r3, #0
 8018178:	f000 80ac 	beq.w	80182d4 <rcl_wait_set_resize+0x1d4>
 801817c:	4622      	mov	r2, r4
 801817e:	4649      	mov	r1, r9
 8018180:	4618      	mov	r0, r3
 8018182:	f003 fa17 	bl	801b5b4 <memset>
 8018186:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018188:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801818c:	f04f 0800 	mov.w	r8, #0
 8018190:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8018194:	f8c5 800c 	str.w	r8, [r5, #12]
 8018198:	f8c4 800c 	str.w	r8, [r4, #12]
 801819c:	2e00      	cmp	r6, #0
 801819e:	f040 80a4 	bne.w	80182ea <rcl_wait_set_resize+0x1ea>
 80181a2:	68a8      	ldr	r0, [r5, #8]
 80181a4:	b128      	cbz	r0, 80181b2 <rcl_wait_set_resize+0xb2>
 80181a6:	4649      	mov	r1, r9
 80181a8:	4790      	blx	r2
 80181aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80181ac:	60ae      	str	r6, [r5, #8]
 80181ae:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80181b2:	f04f 0800 	mov.w	r8, #0
 80181b6:	19f6      	adds	r6, r6, r7
 80181b8:	f8c4 8010 	str.w	r8, [r4, #16]
 80181bc:	f040 80ac 	bne.w	8018318 <rcl_wait_set_resize+0x218>
 80181c0:	6960      	ldr	r0, [r4, #20]
 80181c2:	b130      	cbz	r0, 80181d2 <rcl_wait_set_resize+0xd2>
 80181c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80181c6:	4649      	mov	r1, r9
 80181c8:	4798      	blx	r3
 80181ca:	6166      	str	r6, [r4, #20]
 80181cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80181ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80181d2:	2600      	movs	r6, #0
 80181d4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80181d8:	616e      	str	r6, [r5, #20]
 80181da:	6426      	str	r6, [r4, #64]	@ 0x40
 80181dc:	2f00      	cmp	r7, #0
 80181de:	f040 80ad 	bne.w	801833c <rcl_wait_set_resize+0x23c>
 80181e2:	6928      	ldr	r0, [r5, #16]
 80181e4:	b138      	cbz	r0, 80181f6 <rcl_wait_set_resize+0xf6>
 80181e6:	4649      	mov	r1, r9
 80181e8:	47d0      	blx	sl
 80181ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80181ec:	612f      	str	r7, [r5, #16]
 80181ee:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80181f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80181f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80181f8:	2600      	movs	r6, #0
 80181fa:	61ee      	str	r6, [r5, #28]
 80181fc:	61a6      	str	r6, [r4, #24]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	f040 80af 	bne.w	8018362 <rcl_wait_set_resize+0x262>
 8018204:	69a8      	ldr	r0, [r5, #24]
 8018206:	b120      	cbz	r0, 8018212 <rcl_wait_set_resize+0x112>
 8018208:	4649      	mov	r1, r9
 801820a:	47d0      	blx	sl
 801820c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801820e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018210:	61ab      	str	r3, [r5, #24]
 8018212:	6a20      	ldr	r0, [r4, #32]
 8018214:	b128      	cbz	r0, 8018222 <rcl_wait_set_resize+0x122>
 8018216:	4649      	mov	r1, r9
 8018218:	47d0      	blx	sl
 801821a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801821c:	2300      	movs	r3, #0
 801821e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8018222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018224:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8018226:	2600      	movs	r6, #0
 8018228:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801822c:	626e      	str	r6, [r5, #36]	@ 0x24
 801822e:	6266      	str	r6, [r4, #36]	@ 0x24
 8018230:	2b00      	cmp	r3, #0
 8018232:	f000 80b6 	beq.w	80183a2 <rcl_wait_set_resize+0x2a2>
 8018236:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801823a:	6a28      	ldr	r0, [r5, #32]
 801823c:	463a      	mov	r2, r7
 801823e:	4651      	mov	r1, sl
 8018240:	47c8      	blx	r9
 8018242:	6228      	str	r0, [r5, #32]
 8018244:	2800      	cmp	r0, #0
 8018246:	d04c      	beq.n	80182e2 <rcl_wait_set_resize+0x1e2>
 8018248:	4652      	mov	r2, sl
 801824a:	4631      	mov	r1, r6
 801824c:	f003 f9b2 	bl	801b5b4 <memset>
 8018250:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018254:	626b      	str	r3, [r5, #36]	@ 0x24
 8018256:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018258:	62a6      	str	r6, [r4, #40]	@ 0x28
 801825a:	463a      	mov	r2, r7
 801825c:	4651      	mov	r1, sl
 801825e:	47c8      	blx	r9
 8018260:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018262:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8018264:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8018266:	2c00      	cmp	r4, #0
 8018268:	f000 80f0 	beq.w	801844c <rcl_wait_set_resize+0x34c>
 801826c:	4620      	mov	r0, r4
 801826e:	4652      	mov	r2, sl
 8018270:	4631      	mov	r1, r6
 8018272:	f003 f99f 	bl	801b5b4 <memset>
 8018276:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801827a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801827c:	2600      	movs	r6, #0
 801827e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8018282:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8018284:	6326      	str	r6, [r4, #48]	@ 0x30
 8018286:	2b00      	cmp	r3, #0
 8018288:	f040 809d 	bne.w	80183c6 <rcl_wait_set_resize+0x2c6>
 801828c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801828e:	b120      	cbz	r0, 801829a <rcl_wait_set_resize+0x19a>
 8018290:	4639      	mov	r1, r7
 8018292:	47c0      	blx	r8
 8018294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018296:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018298:	62ab      	str	r3, [r5, #40]	@ 0x28
 801829a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801829c:	b310      	cbz	r0, 80182e4 <rcl_wait_set_resize+0x1e4>
 801829e:	4639      	mov	r1, r7
 80182a0:	47c0      	blx	r8
 80182a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80182a4:	2000      	movs	r0, #0
 80182a6:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80182aa:	b003      	add	sp, #12
 80182ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182b0:	6800      	ldr	r0, [r0, #0]
 80182b2:	b120      	cbz	r0, 80182be <rcl_wait_set_resize+0x1be>
 80182b4:	4651      	mov	r1, sl
 80182b6:	47d8      	blx	fp
 80182b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80182ba:	f8c5 8000 	str.w	r8, [r5]
 80182be:	68a0      	ldr	r0, [r4, #8]
 80182c0:	2800      	cmp	r0, #0
 80182c2:	f43f af61 	beq.w	8018188 <rcl_wait_set_resize+0x88>
 80182c6:	4651      	mov	r1, sl
 80182c8:	47d8      	blx	fp
 80182ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80182cc:	2300      	movs	r3, #0
 80182ce:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80182d2:	e759      	b.n	8018188 <rcl_wait_set_resize+0x88>
 80182d4:	6828      	ldr	r0, [r5, #0]
 80182d6:	9301      	str	r3, [sp, #4]
 80182d8:	4651      	mov	r1, sl
 80182da:	47d8      	blx	fp
 80182dc:	9b01      	ldr	r3, [sp, #4]
 80182de:	e9c5 3300 	strd	r3, r3, [r5]
 80182e2:	200a      	movs	r0, #10
 80182e4:	b003      	add	sp, #12
 80182e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ea:	00b4      	lsls	r4, r6, #2
 80182ec:	68a8      	ldr	r0, [r5, #8]
 80182ee:	464a      	mov	r2, r9
 80182f0:	4621      	mov	r1, r4
 80182f2:	4798      	blx	r3
 80182f4:	60a8      	str	r0, [r5, #8]
 80182f6:	2800      	cmp	r0, #0
 80182f8:	d0f3      	beq.n	80182e2 <rcl_wait_set_resize+0x1e2>
 80182fa:	4622      	mov	r2, r4
 80182fc:	4641      	mov	r1, r8
 80182fe:	f003 f959 	bl	801b5b4 <memset>
 8018302:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018304:	60ee      	str	r6, [r5, #12]
 8018306:	f04f 0800 	mov.w	r8, #0
 801830a:	19f6      	adds	r6, r6, r7
 801830c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018310:	f8c4 8010 	str.w	r8, [r4, #16]
 8018314:	f43f af54 	beq.w	80181c0 <rcl_wait_set_resize+0xc0>
 8018318:	00b6      	lsls	r6, r6, #2
 801831a:	464a      	mov	r2, r9
 801831c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801831e:	6960      	ldr	r0, [r4, #20]
 8018320:	4631      	mov	r1, r6
 8018322:	4798      	blx	r3
 8018324:	4681      	mov	r9, r0
 8018326:	6160      	str	r0, [r4, #20]
 8018328:	2800      	cmp	r0, #0
 801832a:	d076      	beq.n	801841a <rcl_wait_set_resize+0x31a>
 801832c:	4632      	mov	r2, r6
 801832e:	4641      	mov	r1, r8
 8018330:	f003 f940 	bl	801b5b4 <memset>
 8018334:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018336:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801833a:	e74a      	b.n	80181d2 <rcl_wait_set_resize+0xd2>
 801833c:	00bc      	lsls	r4, r7, #2
 801833e:	6928      	ldr	r0, [r5, #16]
 8018340:	464a      	mov	r2, r9
 8018342:	4621      	mov	r1, r4
 8018344:	47c0      	blx	r8
 8018346:	6128      	str	r0, [r5, #16]
 8018348:	2800      	cmp	r0, #0
 801834a:	d0ca      	beq.n	80182e2 <rcl_wait_set_resize+0x1e2>
 801834c:	4622      	mov	r2, r4
 801834e:	4631      	mov	r1, r6
 8018350:	f003 f930 	bl	801b5b4 <memset>
 8018354:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018356:	616f      	str	r7, [r5, #20]
 8018358:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801835c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018360:	e749      	b.n	80181f6 <rcl_wait_set_resize+0xf6>
 8018362:	009c      	lsls	r4, r3, #2
 8018364:	69a8      	ldr	r0, [r5, #24]
 8018366:	464a      	mov	r2, r9
 8018368:	4621      	mov	r1, r4
 801836a:	47c0      	blx	r8
 801836c:	61a8      	str	r0, [r5, #24]
 801836e:	2800      	cmp	r0, #0
 8018370:	d0b7      	beq.n	80182e2 <rcl_wait_set_resize+0x1e2>
 8018372:	4622      	mov	r2, r4
 8018374:	4631      	mov	r1, r6
 8018376:	f003 f91d 	bl	801b5b4 <memset>
 801837a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801837c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801837e:	61eb      	str	r3, [r5, #28]
 8018380:	6a38      	ldr	r0, [r7, #32]
 8018382:	61fe      	str	r6, [r7, #28]
 8018384:	464a      	mov	r2, r9
 8018386:	4621      	mov	r1, r4
 8018388:	47c0      	blx	r8
 801838a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801838c:	6238      	str	r0, [r7, #32]
 801838e:	6a1f      	ldr	r7, [r3, #32]
 8018390:	2f00      	cmp	r7, #0
 8018392:	d054      	beq.n	801843e <rcl_wait_set_resize+0x33e>
 8018394:	4622      	mov	r2, r4
 8018396:	4631      	mov	r1, r6
 8018398:	4638      	mov	r0, r7
 801839a:	f003 f90b 	bl	801b5b4 <memset>
 801839e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80183a0:	e73f      	b.n	8018222 <rcl_wait_set_resize+0x122>
 80183a2:	6a28      	ldr	r0, [r5, #32]
 80183a4:	b120      	cbz	r0, 80183b0 <rcl_wait_set_resize+0x2b0>
 80183a6:	4639      	mov	r1, r7
 80183a8:	47c0      	blx	r8
 80183aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80183ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80183ae:	622b      	str	r3, [r5, #32]
 80183b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80183b2:	2800      	cmp	r0, #0
 80183b4:	f43f af60 	beq.w	8018278 <rcl_wait_set_resize+0x178>
 80183b8:	4639      	mov	r1, r7
 80183ba:	47c0      	blx	r8
 80183bc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80183be:	2300      	movs	r3, #0
 80183c0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80183c4:	e758      	b.n	8018278 <rcl_wait_set_resize+0x178>
 80183c6:	009c      	lsls	r4, r3, #2
 80183c8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80183ca:	463a      	mov	r2, r7
 80183cc:	4621      	mov	r1, r4
 80183ce:	47c8      	blx	r9
 80183d0:	62a8      	str	r0, [r5, #40]	@ 0x28
 80183d2:	2800      	cmp	r0, #0
 80183d4:	d085      	beq.n	80182e2 <rcl_wait_set_resize+0x1e2>
 80183d6:	4622      	mov	r2, r4
 80183d8:	4631      	mov	r1, r6
 80183da:	f003 f8eb 	bl	801b5b4 <memset>
 80183de:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80183e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80183e6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80183ea:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80183ee:	463a      	mov	r2, r7
 80183f0:	4621      	mov	r1, r4
 80183f2:	47c8      	blx	r9
 80183f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80183f6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80183fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183fc:	b36b      	cbz	r3, 801845a <rcl_wait_set_resize+0x35a>
 80183fe:	4622      	mov	r2, r4
 8018400:	4631      	mov	r1, r6
 8018402:	4618      	mov	r0, r3
 8018404:	f003 f8d6 	bl	801b5b4 <memset>
 8018408:	4630      	mov	r0, r6
 801840a:	b003      	add	sp, #12
 801840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018410:	200b      	movs	r0, #11
 8018412:	4770      	bx	lr
 8018414:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018418:	e764      	b.n	80182e4 <rcl_wait_set_resize+0x1e4>
 801841a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801841c:	68a8      	ldr	r0, [r5, #8]
 801841e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8018420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018422:	4798      	blx	r3
 8018424:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018426:	6928      	ldr	r0, [r5, #16]
 8018428:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801842a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801842c:	f8c5 900c 	str.w	r9, [r5, #12]
 8018430:	f8c5 9008 	str.w	r9, [r5, #8]
 8018434:	4790      	blx	r2
 8018436:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801843a:	200a      	movs	r0, #10
 801843c:	e752      	b.n	80182e4 <rcl_wait_set_resize+0x1e4>
 801843e:	69a8      	ldr	r0, [r5, #24]
 8018440:	4649      	mov	r1, r9
 8018442:	47d0      	blx	sl
 8018444:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8018448:	200a      	movs	r0, #10
 801844a:	e74b      	b.n	80182e4 <rcl_wait_set_resize+0x1e4>
 801844c:	6a28      	ldr	r0, [r5, #32]
 801844e:	4639      	mov	r1, r7
 8018450:	47c0      	blx	r8
 8018452:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8018456:	200a      	movs	r0, #10
 8018458:	e744      	b.n	80182e4 <rcl_wait_set_resize+0x1e4>
 801845a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801845c:	9301      	str	r3, [sp, #4]
 801845e:	4639      	mov	r1, r7
 8018460:	47c0      	blx	r8
 8018462:	9b01      	ldr	r3, [sp, #4]
 8018464:	200a      	movs	r0, #10
 8018466:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801846a:	e73b      	b.n	80182e4 <rcl_wait_set_resize+0x1e4>

0801846c <rcl_wait_set_init>:
 801846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018470:	b084      	sub	sp, #16
 8018472:	4604      	mov	r4, r0
 8018474:	a810      	add	r0, sp, #64	@ 0x40
 8018476:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801847a:	460f      	mov	r7, r1
 801847c:	4690      	mov	r8, r2
 801847e:	4699      	mov	r9, r3
 8018480:	f7f6 fdac 	bl	800efdc <rcutils_allocator_is_valid>
 8018484:	2800      	cmp	r0, #0
 8018486:	d06b      	beq.n	8018560 <rcl_wait_set_init+0xf4>
 8018488:	2c00      	cmp	r4, #0
 801848a:	d069      	beq.n	8018560 <rcl_wait_set_init+0xf4>
 801848c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801848e:	b125      	cbz	r5, 801849a <rcl_wait_set_init+0x2e>
 8018490:	2564      	movs	r5, #100	@ 0x64
 8018492:	4628      	mov	r0, r5
 8018494:	b004      	add	sp, #16
 8018496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801849a:	f1ba 0f00 	cmp.w	sl, #0
 801849e:	d05f      	beq.n	8018560 <rcl_wait_set_init+0xf4>
 80184a0:	4650      	mov	r0, sl
 80184a2:	f7fe f887 	bl	80165b4 <rcl_context_is_valid>
 80184a6:	2800      	cmp	r0, #0
 80184a8:	d067      	beq.n	801857a <rcl_wait_set_init+0x10e>
 80184aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80184ac:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80184ae:	205c      	movs	r0, #92	@ 0x5c
 80184b0:	4798      	blx	r3
 80184b2:	6320      	str	r0, [r4, #48]	@ 0x30
 80184b4:	2800      	cmp	r0, #0
 80184b6:	d062      	beq.n	801857e <rcl_wait_set_init+0x112>
 80184b8:	4629      	mov	r1, r5
 80184ba:	225c      	movs	r2, #92	@ 0x5c
 80184bc:	f003 f87a 	bl	801b5b4 <memset>
 80184c0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80184c4:	eb03 0e02 	add.w	lr, r3, r2
 80184c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80184ca:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80184cc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80184d0:	449e      	add	lr, r3
 80184d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80184d6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80184da:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80184de:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80184e2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80184e6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80184ea:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80184ee:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80184f2:	f8da a000 	ldr.w	sl, [sl]
 80184f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80184f8:	44c6      	add	lr, r8
 80184fa:	f8dc 3000 	ldr.w	r3, [ip]
 80184fe:	602b      	str	r3, [r5, #0]
 8018500:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8018504:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8018508:	f001 fc38 	bl	8019d7c <rmw_create_wait_set>
 801850c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801850e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8018510:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018512:	b350      	cbz	r0, 801856a <rcl_wait_set_init+0xfe>
 8018514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018516:	9302      	str	r3, [sp, #8]
 8018518:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801851a:	9301      	str	r3, [sp, #4]
 801851c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801851e:	9300      	str	r3, [sp, #0]
 8018520:	4642      	mov	r2, r8
 8018522:	464b      	mov	r3, r9
 8018524:	4639      	mov	r1, r7
 8018526:	4620      	mov	r0, r4
 8018528:	f7ff fdea 	bl	8018100 <rcl_wait_set_resize>
 801852c:	4605      	mov	r5, r0
 801852e:	2800      	cmp	r0, #0
 8018530:	d0af      	beq.n	8018492 <rcl_wait_set_init+0x26>
 8018532:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018534:	bb2b      	cbnz	r3, 8018582 <rcl_wait_set_init+0x116>
 8018536:	2600      	movs	r6, #0
 8018538:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801853c:	9600      	str	r6, [sp, #0]
 801853e:	4633      	mov	r3, r6
 8018540:	4632      	mov	r2, r6
 8018542:	4631      	mov	r1, r6
 8018544:	4620      	mov	r0, r4
 8018546:	f7ff fddb 	bl	8018100 <rcl_wait_set_resize>
 801854a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801854c:	2800      	cmp	r0, #0
 801854e:	d0a0      	beq.n	8018492 <rcl_wait_set_init+0x26>
 8018550:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018552:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018554:	4798      	blx	r3
 8018556:	4628      	mov	r0, r5
 8018558:	6326      	str	r6, [r4, #48]	@ 0x30
 801855a:	b004      	add	sp, #16
 801855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018560:	250b      	movs	r5, #11
 8018562:	4628      	mov	r0, r5
 8018564:	b004      	add	sp, #16
 8018566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801856a:	2501      	movs	r5, #1
 801856c:	f001 fc10 	bl	8019d90 <rmw_destroy_wait_set>
 8018570:	2800      	cmp	r0, #0
 8018572:	bf18      	it	ne
 8018574:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8018578:	e7dd      	b.n	8018536 <rcl_wait_set_init+0xca>
 801857a:	2565      	movs	r5, #101	@ 0x65
 801857c:	e789      	b.n	8018492 <rcl_wait_set_init+0x26>
 801857e:	250a      	movs	r5, #10
 8018580:	e787      	b.n	8018492 <rcl_wait_set_init+0x26>
 8018582:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018584:	e7f2      	b.n	801856c <rcl_wait_set_init+0x100>
 8018586:	bf00      	nop

08018588 <rcl_wait_set_add_guard_condition>:
 8018588:	b318      	cbz	r0, 80185d2 <rcl_wait_set_add_guard_condition+0x4a>
 801858a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801858c:	b570      	push	{r4, r5, r6, lr}
 801858e:	4604      	mov	r4, r0
 8018590:	b30b      	cbz	r3, 80185d6 <rcl_wait_set_add_guard_condition+0x4e>
 8018592:	b319      	cbz	r1, 80185dc <rcl_wait_set_add_guard_condition+0x54>
 8018594:	68dd      	ldr	r5, [r3, #12]
 8018596:	68c0      	ldr	r0, [r0, #12]
 8018598:	4285      	cmp	r5, r0
 801859a:	d217      	bcs.n	80185cc <rcl_wait_set_add_guard_condition+0x44>
 801859c:	68a0      	ldr	r0, [r4, #8]
 801859e:	1c6e      	adds	r6, r5, #1
 80185a0:	60de      	str	r6, [r3, #12]
 80185a2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80185a6:	b102      	cbz	r2, 80185aa <rcl_wait_set_add_guard_condition+0x22>
 80185a8:	6015      	str	r5, [r2, #0]
 80185aa:	4608      	mov	r0, r1
 80185ac:	f7fe fad4 	bl	8016b58 <rcl_guard_condition_get_rmw_handle>
 80185b0:	b150      	cbz	r0, 80185c8 <rcl_wait_set_add_guard_condition+0x40>
 80185b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185b4:	6842      	ldr	r2, [r0, #4]
 80185b6:	695b      	ldr	r3, [r3, #20]
 80185b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80185bc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80185be:	6913      	ldr	r3, [r2, #16]
 80185c0:	3301      	adds	r3, #1
 80185c2:	2000      	movs	r0, #0
 80185c4:	6113      	str	r3, [r2, #16]
 80185c6:	bd70      	pop	{r4, r5, r6, pc}
 80185c8:	2001      	movs	r0, #1
 80185ca:	bd70      	pop	{r4, r5, r6, pc}
 80185cc:	f240 3086 	movw	r0, #902	@ 0x386
 80185d0:	bd70      	pop	{r4, r5, r6, pc}
 80185d2:	200b      	movs	r0, #11
 80185d4:	4770      	bx	lr
 80185d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80185da:	bd70      	pop	{r4, r5, r6, pc}
 80185dc:	200b      	movs	r0, #11
 80185de:	bd70      	pop	{r4, r5, r6, pc}

080185e0 <rcl_wait_set_add_timer>:
 80185e0:	b328      	cbz	r0, 801862e <rcl_wait_set_add_timer+0x4e>
 80185e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80185e4:	b570      	push	{r4, r5, r6, lr}
 80185e6:	4604      	mov	r4, r0
 80185e8:	b31b      	cbz	r3, 8018632 <rcl_wait_set_add_timer+0x52>
 80185ea:	b329      	cbz	r1, 8018638 <rcl_wait_set_add_timer+0x58>
 80185ec:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80185ee:	6965      	ldr	r5, [r4, #20]
 80185f0:	42a8      	cmp	r0, r5
 80185f2:	d219      	bcs.n	8018628 <rcl_wait_set_add_timer+0x48>
 80185f4:	6925      	ldr	r5, [r4, #16]
 80185f6:	1c46      	adds	r6, r0, #1
 80185f8:	641e      	str	r6, [r3, #64]	@ 0x40
 80185fa:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80185fe:	b102      	cbz	r2, 8018602 <rcl_wait_set_add_timer+0x22>
 8018600:	6010      	str	r0, [r2, #0]
 8018602:	4608      	mov	r0, r1
 8018604:	f7ff fad4 	bl	8017bb0 <rcl_timer_get_guard_condition>
 8018608:	b168      	cbz	r0, 8018626 <rcl_wait_set_add_timer+0x46>
 801860a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801860c:	68e3      	ldr	r3, [r4, #12]
 801860e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8018610:	3b01      	subs	r3, #1
 8018612:	441d      	add	r5, r3
 8018614:	f7fe faa0 	bl	8016b58 <rcl_guard_condition_get_rmw_handle>
 8018618:	b180      	cbz	r0, 801863c <rcl_wait_set_add_timer+0x5c>
 801861a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801861c:	6842      	ldr	r2, [r0, #4]
 801861e:	695b      	ldr	r3, [r3, #20]
 8018620:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018624:	2000      	movs	r0, #0
 8018626:	bd70      	pop	{r4, r5, r6, pc}
 8018628:	f240 3086 	movw	r0, #902	@ 0x386
 801862c:	bd70      	pop	{r4, r5, r6, pc}
 801862e:	200b      	movs	r0, #11
 8018630:	4770      	bx	lr
 8018632:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018636:	bd70      	pop	{r4, r5, r6, pc}
 8018638:	200b      	movs	r0, #11
 801863a:	bd70      	pop	{r4, r5, r6, pc}
 801863c:	2001      	movs	r0, #1
 801863e:	bd70      	pop	{r4, r5, r6, pc}

08018640 <rcl_wait_set_add_client>:
 8018640:	b318      	cbz	r0, 801868a <rcl_wait_set_add_client+0x4a>
 8018642:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018644:	b570      	push	{r4, r5, r6, lr}
 8018646:	4604      	mov	r4, r0
 8018648:	b30b      	cbz	r3, 801868e <rcl_wait_set_add_client+0x4e>
 801864a:	b319      	cbz	r1, 8018694 <rcl_wait_set_add_client+0x54>
 801864c:	699d      	ldr	r5, [r3, #24]
 801864e:	69c0      	ldr	r0, [r0, #28]
 8018650:	4285      	cmp	r5, r0
 8018652:	d217      	bcs.n	8018684 <rcl_wait_set_add_client+0x44>
 8018654:	69a0      	ldr	r0, [r4, #24]
 8018656:	1c6e      	adds	r6, r5, #1
 8018658:	619e      	str	r6, [r3, #24]
 801865a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801865e:	b102      	cbz	r2, 8018662 <rcl_wait_set_add_client+0x22>
 8018660:	6015      	str	r5, [r2, #0]
 8018662:	4608      	mov	r0, r1
 8018664:	f7f4 ff90 	bl	800d588 <rcl_client_get_rmw_handle>
 8018668:	b150      	cbz	r0, 8018680 <rcl_wait_set_add_client+0x40>
 801866a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801866c:	6842      	ldr	r2, [r0, #4]
 801866e:	6a1b      	ldr	r3, [r3, #32]
 8018670:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018674:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018676:	69d3      	ldr	r3, [r2, #28]
 8018678:	3301      	adds	r3, #1
 801867a:	2000      	movs	r0, #0
 801867c:	61d3      	str	r3, [r2, #28]
 801867e:	bd70      	pop	{r4, r5, r6, pc}
 8018680:	2001      	movs	r0, #1
 8018682:	bd70      	pop	{r4, r5, r6, pc}
 8018684:	f240 3086 	movw	r0, #902	@ 0x386
 8018688:	bd70      	pop	{r4, r5, r6, pc}
 801868a:	200b      	movs	r0, #11
 801868c:	4770      	bx	lr
 801868e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018692:	bd70      	pop	{r4, r5, r6, pc}
 8018694:	200b      	movs	r0, #11
 8018696:	bd70      	pop	{r4, r5, r6, pc}

08018698 <rcl_wait_set_add_service>:
 8018698:	b318      	cbz	r0, 80186e2 <rcl_wait_set_add_service+0x4a>
 801869a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801869c:	b570      	push	{r4, r5, r6, lr}
 801869e:	4604      	mov	r4, r0
 80186a0:	b30b      	cbz	r3, 80186e6 <rcl_wait_set_add_service+0x4e>
 80186a2:	b319      	cbz	r1, 80186ec <rcl_wait_set_add_service+0x54>
 80186a4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80186a6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80186a8:	4285      	cmp	r5, r0
 80186aa:	d217      	bcs.n	80186dc <rcl_wait_set_add_service+0x44>
 80186ac:	6a20      	ldr	r0, [r4, #32]
 80186ae:	1c6e      	adds	r6, r5, #1
 80186b0:	625e      	str	r6, [r3, #36]	@ 0x24
 80186b2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80186b6:	b102      	cbz	r2, 80186ba <rcl_wait_set_add_service+0x22>
 80186b8:	6015      	str	r5, [r2, #0]
 80186ba:	4608      	mov	r0, r1
 80186bc:	f7fe fd26 	bl	801710c <rcl_service_get_rmw_handle>
 80186c0:	b150      	cbz	r0, 80186d8 <rcl_wait_set_add_service+0x40>
 80186c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80186c4:	6842      	ldr	r2, [r0, #4]
 80186c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186c8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80186cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80186ce:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80186d0:	3301      	adds	r3, #1
 80186d2:	2000      	movs	r0, #0
 80186d4:	6293      	str	r3, [r2, #40]	@ 0x28
 80186d6:	bd70      	pop	{r4, r5, r6, pc}
 80186d8:	2001      	movs	r0, #1
 80186da:	bd70      	pop	{r4, r5, r6, pc}
 80186dc:	f240 3086 	movw	r0, #902	@ 0x386
 80186e0:	bd70      	pop	{r4, r5, r6, pc}
 80186e2:	200b      	movs	r0, #11
 80186e4:	4770      	bx	lr
 80186e6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80186ea:	bd70      	pop	{r4, r5, r6, pc}
 80186ec:	200b      	movs	r0, #11
 80186ee:	bd70      	pop	{r4, r5, r6, pc}

080186f0 <rcl_wait>:
 80186f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186f4:	ed2d 8b02 	vpush	{d8}
 80186f8:	b08d      	sub	sp, #52	@ 0x34
 80186fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80186fe:	2800      	cmp	r0, #0
 8018700:	f000 8143 	beq.w	801898a <rcl_wait+0x29a>
 8018704:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8018706:	4605      	mov	r5, r0
 8018708:	2e00      	cmp	r6, #0
 801870a:	f000 8112 	beq.w	8018932 <rcl_wait+0x242>
 801870e:	6843      	ldr	r3, [r0, #4]
 8018710:	b983      	cbnz	r3, 8018734 <rcl_wait+0x44>
 8018712:	68eb      	ldr	r3, [r5, #12]
 8018714:	b973      	cbnz	r3, 8018734 <rcl_wait+0x44>
 8018716:	696b      	ldr	r3, [r5, #20]
 8018718:	b963      	cbnz	r3, 8018734 <rcl_wait+0x44>
 801871a:	69eb      	ldr	r3, [r5, #28]
 801871c:	b953      	cbnz	r3, 8018734 <rcl_wait+0x44>
 801871e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018720:	b943      	cbnz	r3, 8018734 <rcl_wait+0x44>
 8018722:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8018724:	b933      	cbnz	r3, 8018734 <rcl_wait+0x44>
 8018726:	f240 3085 	movw	r0, #901	@ 0x385
 801872a:	b00d      	add	sp, #52	@ 0x34
 801872c:	ecbd 8b02 	vpop	{d8}
 8018730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018734:	9b04      	ldr	r3, [sp, #16]
 8018736:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8018738:	2b01      	cmp	r3, #1
 801873a:	9b05      	ldr	r3, [sp, #20]
 801873c:	f173 0300 	sbcs.w	r3, r3, #0
 8018740:	f2c0 80f0 	blt.w	8018924 <rcl_wait+0x234>
 8018744:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018748:	4643      	mov	r3, r8
 801874a:	2a00      	cmp	r2, #0
 801874c:	f000 8133 	beq.w	80189b6 <rcl_wait+0x2c6>
 8018750:	2400      	movs	r4, #0
 8018752:	4613      	mov	r3, r2
 8018754:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80189c8 <rcl_wait+0x2d8>
 8018758:	46a2      	mov	sl, r4
 801875a:	46a3      	mov	fp, r4
 801875c:	f240 3921 	movw	r9, #801	@ 0x321
 8018760:	4632      	mov	r2, r6
 8018762:	e014      	b.n	801878e <rcl_wait+0x9e>
 8018764:	2800      	cmp	r0, #0
 8018766:	d1e0      	bne.n	801872a <rcl_wait+0x3a>
 8018768:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801876c:	4542      	cmp	r2, r8
 801876e:	eb73 0107 	sbcs.w	r1, r3, r7
 8018772:	da03      	bge.n	801877c <rcl_wait+0x8c>
 8018774:	4690      	mov	r8, r2
 8018776:	461f      	mov	r7, r3
 8018778:	f04f 0b01 	mov.w	fp, #1
 801877c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801877e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018780:	3401      	adds	r4, #1
 8018782:	f14a 0a00 	adc.w	sl, sl, #0
 8018786:	429c      	cmp	r4, r3
 8018788:	f17a 0100 	sbcs.w	r1, sl, #0
 801878c:	d228      	bcs.n	80187e0 <rcl_wait+0xf0>
 801878e:	6928      	ldr	r0, [r5, #16]
 8018790:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8018794:	a908      	add	r1, sp, #32
 8018796:	00a6      	lsls	r6, r4, #2
 8018798:	2800      	cmp	r0, #0
 801879a:	d0f1      	beq.n	8018780 <rcl_wait+0x90>
 801879c:	68eb      	ldr	r3, [r5, #12]
 801879e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80187a2:	4423      	add	r3, r4
 80187a4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80187a8:	f1be 0f00 	cmp.w	lr, #0
 80187ac:	d006      	beq.n	80187bc <rcl_wait+0xcc>
 80187ae:	6913      	ldr	r3, [r2, #16]
 80187b0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80187b4:	3301      	adds	r3, #1
 80187b6:	6113      	str	r3, [r2, #16]
 80187b8:	692b      	ldr	r3, [r5, #16]
 80187ba:	5998      	ldr	r0, [r3, r6]
 80187bc:	ed8d 8b08 	vstr	d8, [sp, #32]
 80187c0:	f7ff f9c4 	bl	8017b4c <rcl_timer_get_time_until_next_call>
 80187c4:	4548      	cmp	r0, r9
 80187c6:	d1cd      	bne.n	8018764 <rcl_wait+0x74>
 80187c8:	692b      	ldr	r3, [r5, #16]
 80187ca:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80187cc:	2100      	movs	r1, #0
 80187ce:	5199      	str	r1, [r3, r6]
 80187d0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80187d2:	3401      	adds	r4, #1
 80187d4:	f14a 0a00 	adc.w	sl, sl, #0
 80187d8:	429c      	cmp	r4, r3
 80187da:	f17a 0100 	sbcs.w	r1, sl, #0
 80187de:	d3d6      	bcc.n	801878e <rcl_wait+0x9e>
 80187e0:	4616      	mov	r6, r2
 80187e2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80187e6:	4313      	orrs	r3, r2
 80187e8:	46d9      	mov	r9, fp
 80187ea:	f040 80a9 	bne.w	8018940 <rcl_wait+0x250>
 80187ee:	2300      	movs	r3, #0
 80187f0:	2200      	movs	r2, #0
 80187f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80187f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80187fa:	ab08      	add	r3, sp, #32
 80187fc:	9302      	str	r3, [sp, #8]
 80187fe:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8018800:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8018804:	e9cd 3200 	strd	r3, r2, [sp]
 8018808:	f106 0110 	add.w	r1, r6, #16
 801880c:	f106 031c 	add.w	r3, r6, #28
 8018810:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8018814:	1d30      	adds	r0, r6, #4
 8018816:	f001 f939 	bl	8019a8c <rmw_wait>
 801881a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801881c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801881e:	4680      	mov	r8, r0
 8018820:	b1ca      	cbz	r2, 8018856 <rcl_wait+0x166>
 8018822:	2400      	movs	r4, #0
 8018824:	4627      	mov	r7, r4
 8018826:	692a      	ldr	r2, [r5, #16]
 8018828:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801882c:	f10d 011f 	add.w	r1, sp, #31
 8018830:	00a6      	lsls	r6, r4, #2
 8018832:	b160      	cbz	r0, 801884e <rcl_wait+0x15e>
 8018834:	f88d 701f 	strb.w	r7, [sp, #31]
 8018838:	f7ff f94e 	bl	8017ad8 <rcl_timer_is_ready>
 801883c:	2800      	cmp	r0, #0
 801883e:	f47f af74 	bne.w	801872a <rcl_wait+0x3a>
 8018842:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8018846:	b90b      	cbnz	r3, 801884c <rcl_wait+0x15c>
 8018848:	692a      	ldr	r2, [r5, #16]
 801884a:	5193      	str	r3, [r2, r6]
 801884c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801884e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018850:	3401      	adds	r4, #1
 8018852:	42a2      	cmp	r2, r4
 8018854:	d8e7      	bhi.n	8018826 <rcl_wait+0x136>
 8018856:	f038 0002 	bics.w	r0, r8, #2
 801885a:	f040 8090 	bne.w	801897e <rcl_wait+0x28e>
 801885e:	686e      	ldr	r6, [r5, #4]
 8018860:	4602      	mov	r2, r0
 8018862:	b91e      	cbnz	r6, 801886c <rcl_wait+0x17c>
 8018864:	e00d      	b.n	8018882 <rcl_wait+0x192>
 8018866:	3201      	adds	r2, #1
 8018868:	42b2      	cmp	r2, r6
 801886a:	d00a      	beq.n	8018882 <rcl_wait+0x192>
 801886c:	6899      	ldr	r1, [r3, #8]
 801886e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018872:	2900      	cmp	r1, #0
 8018874:	d1f7      	bne.n	8018866 <rcl_wait+0x176>
 8018876:	682c      	ldr	r4, [r5, #0]
 8018878:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801887c:	3201      	adds	r2, #1
 801887e:	42b2      	cmp	r2, r6
 8018880:	d1f4      	bne.n	801886c <rcl_wait+0x17c>
 8018882:	68ee      	ldr	r6, [r5, #12]
 8018884:	2200      	movs	r2, #0
 8018886:	b91e      	cbnz	r6, 8018890 <rcl_wait+0x1a0>
 8018888:	e00d      	b.n	80188a6 <rcl_wait+0x1b6>
 801888a:	3201      	adds	r2, #1
 801888c:	42b2      	cmp	r2, r6
 801888e:	d00a      	beq.n	80188a6 <rcl_wait+0x1b6>
 8018890:	6959      	ldr	r1, [r3, #20]
 8018892:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018896:	2900      	cmp	r1, #0
 8018898:	d1f7      	bne.n	801888a <rcl_wait+0x19a>
 801889a:	68ac      	ldr	r4, [r5, #8]
 801889c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80188a0:	3201      	adds	r2, #1
 80188a2:	42b2      	cmp	r2, r6
 80188a4:	d1f4      	bne.n	8018890 <rcl_wait+0x1a0>
 80188a6:	69ee      	ldr	r6, [r5, #28]
 80188a8:	2200      	movs	r2, #0
 80188aa:	b91e      	cbnz	r6, 80188b4 <rcl_wait+0x1c4>
 80188ac:	e00d      	b.n	80188ca <rcl_wait+0x1da>
 80188ae:	3201      	adds	r2, #1
 80188b0:	42b2      	cmp	r2, r6
 80188b2:	d00a      	beq.n	80188ca <rcl_wait+0x1da>
 80188b4:	6a19      	ldr	r1, [r3, #32]
 80188b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80188ba:	2900      	cmp	r1, #0
 80188bc:	d1f7      	bne.n	80188ae <rcl_wait+0x1be>
 80188be:	69ac      	ldr	r4, [r5, #24]
 80188c0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80188c4:	3201      	adds	r2, #1
 80188c6:	42b2      	cmp	r2, r6
 80188c8:	d1f4      	bne.n	80188b4 <rcl_wait+0x1c4>
 80188ca:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80188cc:	2200      	movs	r2, #0
 80188ce:	b91e      	cbnz	r6, 80188d8 <rcl_wait+0x1e8>
 80188d0:	e00d      	b.n	80188ee <rcl_wait+0x1fe>
 80188d2:	3201      	adds	r2, #1
 80188d4:	4296      	cmp	r6, r2
 80188d6:	d00a      	beq.n	80188ee <rcl_wait+0x1fe>
 80188d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80188da:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80188de:	2900      	cmp	r1, #0
 80188e0:	d1f7      	bne.n	80188d2 <rcl_wait+0x1e2>
 80188e2:	6a2c      	ldr	r4, [r5, #32]
 80188e4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80188e8:	3201      	adds	r2, #1
 80188ea:	4296      	cmp	r6, r2
 80188ec:	d1f4      	bne.n	80188d8 <rcl_wait+0x1e8>
 80188ee:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80188f0:	2200      	movs	r2, #0
 80188f2:	b91e      	cbnz	r6, 80188fc <rcl_wait+0x20c>
 80188f4:	e00d      	b.n	8018912 <rcl_wait+0x222>
 80188f6:	3201      	adds	r2, #1
 80188f8:	42b2      	cmp	r2, r6
 80188fa:	d00a      	beq.n	8018912 <rcl_wait+0x222>
 80188fc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80188fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018902:	2900      	cmp	r1, #0
 8018904:	d1f7      	bne.n	80188f6 <rcl_wait+0x206>
 8018906:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8018908:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801890c:	3201      	adds	r2, #1
 801890e:	42b2      	cmp	r2, r6
 8018910:	d1f4      	bne.n	80188fc <rcl_wait+0x20c>
 8018912:	f1b8 0f02 	cmp.w	r8, #2
 8018916:	f47f af08 	bne.w	801872a <rcl_wait+0x3a>
 801891a:	464b      	mov	r3, r9
 801891c:	2b00      	cmp	r3, #0
 801891e:	bf08      	it	eq
 8018920:	2002      	moveq	r0, #2
 8018922:	e702      	b.n	801872a <rcl_wait+0x3a>
 8018924:	2a00      	cmp	r2, #0
 8018926:	d03a      	beq.n	801899e <rcl_wait+0x2ae>
 8018928:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801892c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018930:	e70e      	b.n	8018750 <rcl_wait+0x60>
 8018932:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018936:	b00d      	add	sp, #52	@ 0x34
 8018938:	ecbd 8b02 	vpop	{d8}
 801893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018940:	9b04      	ldr	r3, [sp, #16]
 8018942:	2b01      	cmp	r3, #1
 8018944:	9b05      	ldr	r3, [sp, #20]
 8018946:	f173 0300 	sbcs.w	r3, r3, #0
 801894a:	db24      	blt.n	8018996 <rcl_wait+0x2a6>
 801894c:	2f00      	cmp	r7, #0
 801894e:	bfbc      	itt	lt
 8018950:	f04f 0800 	movlt.w	r8, #0
 8018954:	4647      	movlt	r7, r8
 8018956:	a31e      	add	r3, pc, #120	@ (adr r3, 80189d0 <rcl_wait+0x2e0>)
 8018958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801895c:	4640      	mov	r0, r8
 801895e:	4639      	mov	r1, r7
 8018960:	f7e8 f982 	bl	8000c68 <__aeabi_ldivmod>
 8018964:	a31a      	add	r3, pc, #104	@ (adr r3, 80189d0 <rcl_wait+0x2e0>)
 8018966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801896a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801896e:	4640      	mov	r0, r8
 8018970:	4639      	mov	r1, r7
 8018972:	f7e8 f979 	bl	8000c68 <__aeabi_ldivmod>
 8018976:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801897a:	ab08      	add	r3, sp, #32
 801897c:	e73e      	b.n	80187fc <rcl_wait+0x10c>
 801897e:	2001      	movs	r0, #1
 8018980:	b00d      	add	sp, #52	@ 0x34
 8018982:	ecbd 8b02 	vpop	{d8}
 8018986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801898a:	200b      	movs	r0, #11
 801898c:	b00d      	add	sp, #52	@ 0x34
 801898e:	ecbd 8b02 	vpop	{d8}
 8018992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018996:	465b      	mov	r3, fp
 8018998:	2b00      	cmp	r3, #0
 801899a:	d1d7      	bne.n	801894c <rcl_wait+0x25c>
 801899c:	e72e      	b.n	80187fc <rcl_wait+0x10c>
 801899e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80189a2:	430b      	orrs	r3, r1
 80189a4:	bf08      	it	eq
 80189a6:	4691      	moveq	r9, r2
 80189a8:	f43f af21 	beq.w	80187ee <rcl_wait+0xfe>
 80189ac:	9b04      	ldr	r3, [sp, #16]
 80189ae:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80189b2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80189b6:	2b01      	cmp	r3, #1
 80189b8:	9b05      	ldr	r3, [sp, #20]
 80189ba:	f173 0300 	sbcs.w	r3, r3, #0
 80189be:	f04f 0300 	mov.w	r3, #0
 80189c2:	4699      	mov	r9, r3
 80189c4:	dac2      	bge.n	801894c <rcl_wait+0x25c>
 80189c6:	e719      	b.n	80187fc <rcl_wait+0x10c>
 80189c8:	ffffffff 	.word	0xffffffff
 80189cc:	7fffffff 	.word	0x7fffffff
 80189d0:	3b9aca00 	.word	0x3b9aca00
 80189d4:	00000000 	.word	0x00000000

080189d8 <rcl_action_take_goal_response>:
 80189d8:	2800      	cmp	r0, #0
 80189da:	d039      	beq.n	8018a50 <rcl_action_take_goal_response+0x78>
 80189dc:	b570      	push	{r4, r5, r6, lr}
 80189de:	4604      	mov	r4, r0
 80189e0:	6800      	ldr	r0, [r0, #0]
 80189e2:	b380      	cbz	r0, 8018a46 <rcl_action_take_goal_response+0x6e>
 80189e4:	460d      	mov	r5, r1
 80189e6:	4616      	mov	r6, r2
 80189e8:	f7f4 fe52 	bl	800d690 <rcl_client_is_valid>
 80189ec:	b330      	cbz	r0, 8018a3c <rcl_action_take_goal_response+0x64>
 80189ee:	6820      	ldr	r0, [r4, #0]
 80189f0:	3004      	adds	r0, #4
 80189f2:	f7f4 fe4d 	bl	800d690 <rcl_client_is_valid>
 80189f6:	b308      	cbz	r0, 8018a3c <rcl_action_take_goal_response+0x64>
 80189f8:	6820      	ldr	r0, [r4, #0]
 80189fa:	3008      	adds	r0, #8
 80189fc:	f7f4 fe48 	bl	800d690 <rcl_client_is_valid>
 8018a00:	b1e0      	cbz	r0, 8018a3c <rcl_action_take_goal_response+0x64>
 8018a02:	6820      	ldr	r0, [r4, #0]
 8018a04:	300c      	adds	r0, #12
 8018a06:	f7fe fd23 	bl	8017450 <rcl_subscription_is_valid>
 8018a0a:	b1b8      	cbz	r0, 8018a3c <rcl_action_take_goal_response+0x64>
 8018a0c:	6820      	ldr	r0, [r4, #0]
 8018a0e:	3010      	adds	r0, #16
 8018a10:	f7fe fd1e 	bl	8017450 <rcl_subscription_is_valid>
 8018a14:	b190      	cbz	r0, 8018a3c <rcl_action_take_goal_response+0x64>
 8018a16:	b1cd      	cbz	r5, 8018a4c <rcl_action_take_goal_response+0x74>
 8018a18:	b1c6      	cbz	r6, 8018a4c <rcl_action_take_goal_response+0x74>
 8018a1a:	6820      	ldr	r0, [r4, #0]
 8018a1c:	4632      	mov	r2, r6
 8018a1e:	4629      	mov	r1, r5
 8018a20:	f7f4 fdee 	bl	800d600 <rcl_take_response>
 8018a24:	b148      	cbz	r0, 8018a3a <rcl_action_take_goal_response+0x62>
 8018a26:	280a      	cmp	r0, #10
 8018a28:	d007      	beq.n	8018a3a <rcl_action_take_goal_response+0x62>
 8018a2a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018a2e:	f640 0337 	movw	r3, #2103	@ 0x837
 8018a32:	4290      	cmp	r0, r2
 8018a34:	bf0c      	ite	eq
 8018a36:	4618      	moveq	r0, r3
 8018a38:	2001      	movne	r0, #1
 8018a3a:	bd70      	pop	{r4, r5, r6, pc}
 8018a3c:	f7f6 fbb0 	bl	800f1a0 <rcutils_reset_error>
 8018a40:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a44:	bd70      	pop	{r4, r5, r6, pc}
 8018a46:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a4a:	bd70      	pop	{r4, r5, r6, pc}
 8018a4c:	200b      	movs	r0, #11
 8018a4e:	bd70      	pop	{r4, r5, r6, pc}
 8018a50:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a54:	4770      	bx	lr
 8018a56:	bf00      	nop

08018a58 <rcl_action_send_result_request>:
 8018a58:	b390      	cbz	r0, 8018ac0 <rcl_action_send_result_request+0x68>
 8018a5a:	b570      	push	{r4, r5, r6, lr}
 8018a5c:	4604      	mov	r4, r0
 8018a5e:	6800      	ldr	r0, [r0, #0]
 8018a60:	b348      	cbz	r0, 8018ab6 <rcl_action_send_result_request+0x5e>
 8018a62:	460d      	mov	r5, r1
 8018a64:	4616      	mov	r6, r2
 8018a66:	f7f4 fe13 	bl	800d690 <rcl_client_is_valid>
 8018a6a:	b1f8      	cbz	r0, 8018aac <rcl_action_send_result_request+0x54>
 8018a6c:	6820      	ldr	r0, [r4, #0]
 8018a6e:	3004      	adds	r0, #4
 8018a70:	f7f4 fe0e 	bl	800d690 <rcl_client_is_valid>
 8018a74:	b1d0      	cbz	r0, 8018aac <rcl_action_send_result_request+0x54>
 8018a76:	6820      	ldr	r0, [r4, #0]
 8018a78:	3008      	adds	r0, #8
 8018a7a:	f7f4 fe09 	bl	800d690 <rcl_client_is_valid>
 8018a7e:	b1a8      	cbz	r0, 8018aac <rcl_action_send_result_request+0x54>
 8018a80:	6820      	ldr	r0, [r4, #0]
 8018a82:	300c      	adds	r0, #12
 8018a84:	f7fe fce4 	bl	8017450 <rcl_subscription_is_valid>
 8018a88:	b180      	cbz	r0, 8018aac <rcl_action_send_result_request+0x54>
 8018a8a:	6820      	ldr	r0, [r4, #0]
 8018a8c:	3010      	adds	r0, #16
 8018a8e:	f7fe fcdf 	bl	8017450 <rcl_subscription_is_valid>
 8018a92:	b158      	cbz	r0, 8018aac <rcl_action_send_result_request+0x54>
 8018a94:	b195      	cbz	r5, 8018abc <rcl_action_send_result_request+0x64>
 8018a96:	b18e      	cbz	r6, 8018abc <rcl_action_send_result_request+0x64>
 8018a98:	6820      	ldr	r0, [r4, #0]
 8018a9a:	4632      	mov	r2, r6
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	3008      	adds	r0, #8
 8018aa0:	f7f4 fd78 	bl	800d594 <rcl_send_request>
 8018aa4:	3800      	subs	r0, #0
 8018aa6:	bf18      	it	ne
 8018aa8:	2001      	movne	r0, #1
 8018aaa:	bd70      	pop	{r4, r5, r6, pc}
 8018aac:	f7f6 fb78 	bl	800f1a0 <rcutils_reset_error>
 8018ab0:	f640 0036 	movw	r0, #2102	@ 0x836
 8018ab4:	bd70      	pop	{r4, r5, r6, pc}
 8018ab6:	f640 0036 	movw	r0, #2102	@ 0x836
 8018aba:	bd70      	pop	{r4, r5, r6, pc}
 8018abc:	200b      	movs	r0, #11
 8018abe:	bd70      	pop	{r4, r5, r6, pc}
 8018ac0:	f640 0036 	movw	r0, #2102	@ 0x836
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop

08018ac8 <rcl_action_take_result_response>:
 8018ac8:	2800      	cmp	r0, #0
 8018aca:	d03a      	beq.n	8018b42 <rcl_action_take_result_response+0x7a>
 8018acc:	b570      	push	{r4, r5, r6, lr}
 8018ace:	4604      	mov	r4, r0
 8018ad0:	6800      	ldr	r0, [r0, #0]
 8018ad2:	b388      	cbz	r0, 8018b38 <rcl_action_take_result_response+0x70>
 8018ad4:	460d      	mov	r5, r1
 8018ad6:	4616      	mov	r6, r2
 8018ad8:	f7f4 fdda 	bl	800d690 <rcl_client_is_valid>
 8018adc:	b338      	cbz	r0, 8018b2e <rcl_action_take_result_response+0x66>
 8018ade:	6820      	ldr	r0, [r4, #0]
 8018ae0:	3004      	adds	r0, #4
 8018ae2:	f7f4 fdd5 	bl	800d690 <rcl_client_is_valid>
 8018ae6:	b310      	cbz	r0, 8018b2e <rcl_action_take_result_response+0x66>
 8018ae8:	6820      	ldr	r0, [r4, #0]
 8018aea:	3008      	adds	r0, #8
 8018aec:	f7f4 fdd0 	bl	800d690 <rcl_client_is_valid>
 8018af0:	b1e8      	cbz	r0, 8018b2e <rcl_action_take_result_response+0x66>
 8018af2:	6820      	ldr	r0, [r4, #0]
 8018af4:	300c      	adds	r0, #12
 8018af6:	f7fe fcab 	bl	8017450 <rcl_subscription_is_valid>
 8018afa:	b1c0      	cbz	r0, 8018b2e <rcl_action_take_result_response+0x66>
 8018afc:	6820      	ldr	r0, [r4, #0]
 8018afe:	3010      	adds	r0, #16
 8018b00:	f7fe fca6 	bl	8017450 <rcl_subscription_is_valid>
 8018b04:	b198      	cbz	r0, 8018b2e <rcl_action_take_result_response+0x66>
 8018b06:	b1d5      	cbz	r5, 8018b3e <rcl_action_take_result_response+0x76>
 8018b08:	b1ce      	cbz	r6, 8018b3e <rcl_action_take_result_response+0x76>
 8018b0a:	6820      	ldr	r0, [r4, #0]
 8018b0c:	4632      	mov	r2, r6
 8018b0e:	4629      	mov	r1, r5
 8018b10:	3008      	adds	r0, #8
 8018b12:	f7f4 fd75 	bl	800d600 <rcl_take_response>
 8018b16:	b148      	cbz	r0, 8018b2c <rcl_action_take_result_response+0x64>
 8018b18:	280a      	cmp	r0, #10
 8018b1a:	d007      	beq.n	8018b2c <rcl_action_take_result_response+0x64>
 8018b1c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018b20:	f640 0337 	movw	r3, #2103	@ 0x837
 8018b24:	4290      	cmp	r0, r2
 8018b26:	bf0c      	ite	eq
 8018b28:	4618      	moveq	r0, r3
 8018b2a:	2001      	movne	r0, #1
 8018b2c:	bd70      	pop	{r4, r5, r6, pc}
 8018b2e:	f7f6 fb37 	bl	800f1a0 <rcutils_reset_error>
 8018b32:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b36:	bd70      	pop	{r4, r5, r6, pc}
 8018b38:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b3c:	bd70      	pop	{r4, r5, r6, pc}
 8018b3e:	200b      	movs	r0, #11
 8018b40:	bd70      	pop	{r4, r5, r6, pc}
 8018b42:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b46:	4770      	bx	lr

08018b48 <rcl_action_take_cancel_response>:
 8018b48:	2800      	cmp	r0, #0
 8018b4a:	d03a      	beq.n	8018bc2 <rcl_action_take_cancel_response+0x7a>
 8018b4c:	b570      	push	{r4, r5, r6, lr}
 8018b4e:	4604      	mov	r4, r0
 8018b50:	6800      	ldr	r0, [r0, #0]
 8018b52:	b388      	cbz	r0, 8018bb8 <rcl_action_take_cancel_response+0x70>
 8018b54:	460d      	mov	r5, r1
 8018b56:	4616      	mov	r6, r2
 8018b58:	f7f4 fd9a 	bl	800d690 <rcl_client_is_valid>
 8018b5c:	b338      	cbz	r0, 8018bae <rcl_action_take_cancel_response+0x66>
 8018b5e:	6820      	ldr	r0, [r4, #0]
 8018b60:	3004      	adds	r0, #4
 8018b62:	f7f4 fd95 	bl	800d690 <rcl_client_is_valid>
 8018b66:	b310      	cbz	r0, 8018bae <rcl_action_take_cancel_response+0x66>
 8018b68:	6820      	ldr	r0, [r4, #0]
 8018b6a:	3008      	adds	r0, #8
 8018b6c:	f7f4 fd90 	bl	800d690 <rcl_client_is_valid>
 8018b70:	b1e8      	cbz	r0, 8018bae <rcl_action_take_cancel_response+0x66>
 8018b72:	6820      	ldr	r0, [r4, #0]
 8018b74:	300c      	adds	r0, #12
 8018b76:	f7fe fc6b 	bl	8017450 <rcl_subscription_is_valid>
 8018b7a:	b1c0      	cbz	r0, 8018bae <rcl_action_take_cancel_response+0x66>
 8018b7c:	6820      	ldr	r0, [r4, #0]
 8018b7e:	3010      	adds	r0, #16
 8018b80:	f7fe fc66 	bl	8017450 <rcl_subscription_is_valid>
 8018b84:	b198      	cbz	r0, 8018bae <rcl_action_take_cancel_response+0x66>
 8018b86:	b1d5      	cbz	r5, 8018bbe <rcl_action_take_cancel_response+0x76>
 8018b88:	b1ce      	cbz	r6, 8018bbe <rcl_action_take_cancel_response+0x76>
 8018b8a:	6820      	ldr	r0, [r4, #0]
 8018b8c:	4632      	mov	r2, r6
 8018b8e:	4629      	mov	r1, r5
 8018b90:	3004      	adds	r0, #4
 8018b92:	f7f4 fd35 	bl	800d600 <rcl_take_response>
 8018b96:	b148      	cbz	r0, 8018bac <rcl_action_take_cancel_response+0x64>
 8018b98:	280a      	cmp	r0, #10
 8018b9a:	d007      	beq.n	8018bac <rcl_action_take_cancel_response+0x64>
 8018b9c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018ba0:	f640 0337 	movw	r3, #2103	@ 0x837
 8018ba4:	4290      	cmp	r0, r2
 8018ba6:	bf0c      	ite	eq
 8018ba8:	4618      	moveq	r0, r3
 8018baa:	2001      	movne	r0, #1
 8018bac:	bd70      	pop	{r4, r5, r6, pc}
 8018bae:	f7f6 faf7 	bl	800f1a0 <rcutils_reset_error>
 8018bb2:	f640 0036 	movw	r0, #2102	@ 0x836
 8018bb6:	bd70      	pop	{r4, r5, r6, pc}
 8018bb8:	f640 0036 	movw	r0, #2102	@ 0x836
 8018bbc:	bd70      	pop	{r4, r5, r6, pc}
 8018bbe:	200b      	movs	r0, #11
 8018bc0:	bd70      	pop	{r4, r5, r6, pc}
 8018bc2:	f640 0036 	movw	r0, #2102	@ 0x836
 8018bc6:	4770      	bx	lr

08018bc8 <rcl_action_take_feedback>:
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	d038      	beq.n	8018c3e <rcl_action_take_feedback+0x76>
 8018bcc:	b530      	push	{r4, r5, lr}
 8018bce:	4604      	mov	r4, r0
 8018bd0:	6800      	ldr	r0, [r0, #0]
 8018bd2:	b091      	sub	sp, #68	@ 0x44
 8018bd4:	b378      	cbz	r0, 8018c36 <rcl_action_take_feedback+0x6e>
 8018bd6:	460d      	mov	r5, r1
 8018bd8:	f7f4 fd5a 	bl	800d690 <rcl_client_is_valid>
 8018bdc:	b328      	cbz	r0, 8018c2a <rcl_action_take_feedback+0x62>
 8018bde:	6820      	ldr	r0, [r4, #0]
 8018be0:	3004      	adds	r0, #4
 8018be2:	f7f4 fd55 	bl	800d690 <rcl_client_is_valid>
 8018be6:	b300      	cbz	r0, 8018c2a <rcl_action_take_feedback+0x62>
 8018be8:	6820      	ldr	r0, [r4, #0]
 8018bea:	3008      	adds	r0, #8
 8018bec:	f7f4 fd50 	bl	800d690 <rcl_client_is_valid>
 8018bf0:	b1d8      	cbz	r0, 8018c2a <rcl_action_take_feedback+0x62>
 8018bf2:	6820      	ldr	r0, [r4, #0]
 8018bf4:	300c      	adds	r0, #12
 8018bf6:	f7fe fc2b 	bl	8017450 <rcl_subscription_is_valid>
 8018bfa:	b1b0      	cbz	r0, 8018c2a <rcl_action_take_feedback+0x62>
 8018bfc:	6820      	ldr	r0, [r4, #0]
 8018bfe:	3010      	adds	r0, #16
 8018c00:	f7fe fc26 	bl	8017450 <rcl_subscription_is_valid>
 8018c04:	b188      	cbz	r0, 8018c2a <rcl_action_take_feedback+0x62>
 8018c06:	b1ed      	cbz	r5, 8018c44 <rcl_action_take_feedback+0x7c>
 8018c08:	6820      	ldr	r0, [r4, #0]
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	466a      	mov	r2, sp
 8018c0e:	4629      	mov	r1, r5
 8018c10:	300c      	adds	r0, #12
 8018c12:	f7fe fbbf 	bl	8017394 <rcl_take>
 8018c16:	b160      	cbz	r0, 8018c32 <rcl_action_take_feedback+0x6a>
 8018c18:	f240 1391 	movw	r3, #401	@ 0x191
 8018c1c:	4298      	cmp	r0, r3
 8018c1e:	d014      	beq.n	8018c4a <rcl_action_take_feedback+0x82>
 8018c20:	280a      	cmp	r0, #10
 8018c22:	bf18      	it	ne
 8018c24:	2001      	movne	r0, #1
 8018c26:	b011      	add	sp, #68	@ 0x44
 8018c28:	bd30      	pop	{r4, r5, pc}
 8018c2a:	f7f6 fab9 	bl	800f1a0 <rcutils_reset_error>
 8018c2e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018c32:	b011      	add	sp, #68	@ 0x44
 8018c34:	bd30      	pop	{r4, r5, pc}
 8018c36:	f640 0036 	movw	r0, #2102	@ 0x836
 8018c3a:	b011      	add	sp, #68	@ 0x44
 8018c3c:	bd30      	pop	{r4, r5, pc}
 8018c3e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018c42:	4770      	bx	lr
 8018c44:	200b      	movs	r0, #11
 8018c46:	b011      	add	sp, #68	@ 0x44
 8018c48:	bd30      	pop	{r4, r5, pc}
 8018c4a:	f640 0037 	movw	r0, #2103	@ 0x837
 8018c4e:	e7f0      	b.n	8018c32 <rcl_action_take_feedback+0x6a>

08018c50 <rcl_action_wait_set_add_action_client>:
 8018c50:	2800      	cmp	r0, #0
 8018c52:	d048      	beq.n	8018ce6 <rcl_action_wait_set_add_action_client+0x96>
 8018c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c56:	460c      	mov	r4, r1
 8018c58:	2900      	cmp	r1, #0
 8018c5a:	d03c      	beq.n	8018cd6 <rcl_action_wait_set_add_action_client+0x86>
 8018c5c:	4605      	mov	r5, r0
 8018c5e:	6808      	ldr	r0, [r1, #0]
 8018c60:	2800      	cmp	r0, #0
 8018c62:	d038      	beq.n	8018cd6 <rcl_action_wait_set_add_action_client+0x86>
 8018c64:	4617      	mov	r7, r2
 8018c66:	461e      	mov	r6, r3
 8018c68:	f7f4 fd12 	bl	800d690 <rcl_client_is_valid>
 8018c6c:	b3b0      	cbz	r0, 8018cdc <rcl_action_wait_set_add_action_client+0x8c>
 8018c6e:	6820      	ldr	r0, [r4, #0]
 8018c70:	3004      	adds	r0, #4
 8018c72:	f7f4 fd0d 	bl	800d690 <rcl_client_is_valid>
 8018c76:	b388      	cbz	r0, 8018cdc <rcl_action_wait_set_add_action_client+0x8c>
 8018c78:	6820      	ldr	r0, [r4, #0]
 8018c7a:	3008      	adds	r0, #8
 8018c7c:	f7f4 fd08 	bl	800d690 <rcl_client_is_valid>
 8018c80:	b360      	cbz	r0, 8018cdc <rcl_action_wait_set_add_action_client+0x8c>
 8018c82:	6820      	ldr	r0, [r4, #0]
 8018c84:	300c      	adds	r0, #12
 8018c86:	f7fe fbe3 	bl	8017450 <rcl_subscription_is_valid>
 8018c8a:	b338      	cbz	r0, 8018cdc <rcl_action_wait_set_add_action_client+0x8c>
 8018c8c:	6820      	ldr	r0, [r4, #0]
 8018c8e:	3010      	adds	r0, #16
 8018c90:	f7fe fbde 	bl	8017450 <rcl_subscription_is_valid>
 8018c94:	b310      	cbz	r0, 8018cdc <rcl_action_wait_set_add_action_client+0x8c>
 8018c96:	6821      	ldr	r1, [r4, #0]
 8018c98:	4628      	mov	r0, r5
 8018c9a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8018c9e:	f7ff fccf 	bl	8018640 <rcl_wait_set_add_client>
 8018ca2:	b9b8      	cbnz	r0, 8018cd4 <rcl_action_wait_set_add_action_client+0x84>
 8018ca4:	6821      	ldr	r1, [r4, #0]
 8018ca6:	4628      	mov	r0, r5
 8018ca8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8018cac:	3104      	adds	r1, #4
 8018cae:	f7ff fcc7 	bl	8018640 <rcl_wait_set_add_client>
 8018cb2:	b978      	cbnz	r0, 8018cd4 <rcl_action_wait_set_add_action_client+0x84>
 8018cb4:	6821      	ldr	r1, [r4, #0]
 8018cb6:	4628      	mov	r0, r5
 8018cb8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8018cbc:	3108      	adds	r1, #8
 8018cbe:	f7ff fcbf 	bl	8018640 <rcl_wait_set_add_client>
 8018cc2:	b938      	cbnz	r0, 8018cd4 <rcl_action_wait_set_add_action_client+0x84>
 8018cc4:	6821      	ldr	r1, [r4, #0]
 8018cc6:	4628      	mov	r0, r5
 8018cc8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8018ccc:	310c      	adds	r1, #12
 8018cce:	f7ff f96f 	bl	8017fb0 <rcl_wait_set_add_subscription>
 8018cd2:	b158      	cbz	r0, 8018cec <rcl_action_wait_set_add_action_client+0x9c>
 8018cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8018cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cdc:	f7f6 fa60 	bl	800f1a0 <rcutils_reset_error>
 8018ce0:	f640 0036 	movw	r0, #2102	@ 0x836
 8018ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ce6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018cea:	4770      	bx	lr
 8018cec:	6821      	ldr	r1, [r4, #0]
 8018cee:	4628      	mov	r0, r5
 8018cf0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8018cf4:	3110      	adds	r1, #16
 8018cf6:	f7ff f95b 	bl	8017fb0 <rcl_wait_set_add_subscription>
 8018cfa:	2800      	cmp	r0, #0
 8018cfc:	d1ea      	bne.n	8018cd4 <rcl_action_wait_set_add_action_client+0x84>
 8018cfe:	b11f      	cbz	r7, 8018d08 <rcl_action_wait_set_add_action_client+0xb8>
 8018d00:	6823      	ldr	r3, [r4, #0]
 8018d02:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8018d06:	603b      	str	r3, [r7, #0]
 8018d08:	2e00      	cmp	r6, #0
 8018d0a:	d0e3      	beq.n	8018cd4 <rcl_action_wait_set_add_action_client+0x84>
 8018d0c:	6823      	ldr	r3, [r4, #0]
 8018d0e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8018d12:	6033      	str	r3, [r6, #0]
 8018d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d16:	bf00      	nop

08018d18 <rcl_action_client_wait_set_get_entities_ready>:
 8018d18:	2800      	cmp	r0, #0
 8018d1a:	f000 808d 	beq.w	8018e38 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8018d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d22:	460c      	mov	r4, r1
 8018d24:	2900      	cmp	r1, #0
 8018d26:	d077      	beq.n	8018e18 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018d28:	4605      	mov	r5, r0
 8018d2a:	6808      	ldr	r0, [r1, #0]
 8018d2c:	2800      	cmp	r0, #0
 8018d2e:	d073      	beq.n	8018e18 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018d30:	4616      	mov	r6, r2
 8018d32:	461f      	mov	r7, r3
 8018d34:	f7f4 fcac 	bl	800d690 <rcl_client_is_valid>
 8018d38:	2800      	cmp	r0, #0
 8018d3a:	d071      	beq.n	8018e20 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018d3c:	6820      	ldr	r0, [r4, #0]
 8018d3e:	3004      	adds	r0, #4
 8018d40:	f7f4 fca6 	bl	800d690 <rcl_client_is_valid>
 8018d44:	2800      	cmp	r0, #0
 8018d46:	d06b      	beq.n	8018e20 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018d48:	6820      	ldr	r0, [r4, #0]
 8018d4a:	3008      	adds	r0, #8
 8018d4c:	f7f4 fca0 	bl	800d690 <rcl_client_is_valid>
 8018d50:	2800      	cmp	r0, #0
 8018d52:	d065      	beq.n	8018e20 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018d54:	6820      	ldr	r0, [r4, #0]
 8018d56:	300c      	adds	r0, #12
 8018d58:	f7fe fb7a 	bl	8017450 <rcl_subscription_is_valid>
 8018d5c:	2800      	cmp	r0, #0
 8018d5e:	d05f      	beq.n	8018e20 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018d60:	6820      	ldr	r0, [r4, #0]
 8018d62:	3010      	adds	r0, #16
 8018d64:	f7fe fb74 	bl	8017450 <rcl_subscription_is_valid>
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	d059      	beq.n	8018e20 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018d6c:	2e00      	cmp	r6, #0
 8018d6e:	d060      	beq.n	8018e32 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018d70:	2f00      	cmp	r7, #0
 8018d72:	d05e      	beq.n	8018e32 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018d74:	9b06      	ldr	r3, [sp, #24]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d05b      	beq.n	8018e32 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018d7a:	9b07      	ldr	r3, [sp, #28]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d058      	beq.n	8018e32 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018d80:	9b08      	ldr	r3, [sp, #32]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d055      	beq.n	8018e32 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018d86:	6823      	ldr	r3, [r4, #0]
 8018d88:	686a      	ldr	r2, [r5, #4]
 8018d8a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8018d8e:	428a      	cmp	r2, r1
 8018d90:	d94c      	bls.n	8018e2c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018d92:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8018d96:	4282      	cmp	r2, r0
 8018d98:	d948      	bls.n	8018e2c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018d9a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8018d9e:	69ea      	ldr	r2, [r5, #28]
 8018da0:	42a2      	cmp	r2, r4
 8018da2:	d943      	bls.n	8018e2c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018da4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8018da8:	4562      	cmp	r2, ip
 8018daa:	d93f      	bls.n	8018e2c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018dac:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8018db0:	4572      	cmp	r2, lr
 8018db2:	d93b      	bls.n	8018e2c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018db4:	69aa      	ldr	r2, [r5, #24]
 8018db6:	682d      	ldr	r5, [r5, #0]
 8018db8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8018dbc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8018dc0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8018dc4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8018dc8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8018dcc:	f103 0c0c 	add.w	ip, r3, #12
 8018dd0:	eba5 050c 	sub.w	r5, r5, ip
 8018dd4:	fab5 f585 	clz	r5, r5
 8018dd8:	096d      	lsrs	r5, r5, #5
 8018dda:	7035      	strb	r5, [r6, #0]
 8018ddc:	f103 0510 	add.w	r5, r3, #16
 8018de0:	1b64      	subs	r4, r4, r5
 8018de2:	fab4 f484 	clz	r4, r4
 8018de6:	0964      	lsrs	r4, r4, #5
 8018de8:	703c      	strb	r4, [r7, #0]
 8018dea:	eba3 0008 	sub.w	r0, r3, r8
 8018dee:	1d1c      	adds	r4, r3, #4
 8018df0:	3308      	adds	r3, #8
 8018df2:	1ad3      	subs	r3, r2, r3
 8018df4:	fab0 f080 	clz	r0, r0
 8018df8:	9a06      	ldr	r2, [sp, #24]
 8018dfa:	0940      	lsrs	r0, r0, #5
 8018dfc:	1b09      	subs	r1, r1, r4
 8018dfe:	7010      	strb	r0, [r2, #0]
 8018e00:	fab1 f181 	clz	r1, r1
 8018e04:	9a07      	ldr	r2, [sp, #28]
 8018e06:	0949      	lsrs	r1, r1, #5
 8018e08:	7011      	strb	r1, [r2, #0]
 8018e0a:	fab3 f383 	clz	r3, r3
 8018e0e:	9a08      	ldr	r2, [sp, #32]
 8018e10:	095b      	lsrs	r3, r3, #5
 8018e12:	2000      	movs	r0, #0
 8018e14:	7013      	strb	r3, [r2, #0]
 8018e16:	e001      	b.n	8018e1c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8018e18:	f640 0036 	movw	r0, #2102	@ 0x836
 8018e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e20:	f7f6 f9be 	bl	800f1a0 <rcutils_reset_error>
 8018e24:	f640 0036 	movw	r0, #2102	@ 0x836
 8018e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e2c:	2001      	movs	r0, #1
 8018e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e32:	200b      	movs	r0, #11
 8018e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e38:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018e3c:	4770      	bx	lr
 8018e3e:	bf00      	nop

08018e40 <rcl_action_take_goal_request>:
 8018e40:	2800      	cmp	r0, #0
 8018e42:	d039      	beq.n	8018eb8 <rcl_action_take_goal_request+0x78>
 8018e44:	b570      	push	{r4, r5, r6, lr}
 8018e46:	4604      	mov	r4, r0
 8018e48:	6800      	ldr	r0, [r0, #0]
 8018e4a:	b380      	cbz	r0, 8018eae <rcl_action_take_goal_request+0x6e>
 8018e4c:	460d      	mov	r5, r1
 8018e4e:	4616      	mov	r6, r2
 8018e50:	f7fe f9ba 	bl	80171c8 <rcl_service_is_valid>
 8018e54:	b330      	cbz	r0, 8018ea4 <rcl_action_take_goal_request+0x64>
 8018e56:	6820      	ldr	r0, [r4, #0]
 8018e58:	3004      	adds	r0, #4
 8018e5a:	f7fe f9b5 	bl	80171c8 <rcl_service_is_valid>
 8018e5e:	b308      	cbz	r0, 8018ea4 <rcl_action_take_goal_request+0x64>
 8018e60:	6820      	ldr	r0, [r4, #0]
 8018e62:	3008      	adds	r0, #8
 8018e64:	f7fe f9b0 	bl	80171c8 <rcl_service_is_valid>
 8018e68:	b1e0      	cbz	r0, 8018ea4 <rcl_action_take_goal_request+0x64>
 8018e6a:	6820      	ldr	r0, [r4, #0]
 8018e6c:	300c      	adds	r0, #12
 8018e6e:	f7f5 f859 	bl	800df24 <rcl_publisher_is_valid>
 8018e72:	b1b8      	cbz	r0, 8018ea4 <rcl_action_take_goal_request+0x64>
 8018e74:	6820      	ldr	r0, [r4, #0]
 8018e76:	3010      	adds	r0, #16
 8018e78:	f7f5 f854 	bl	800df24 <rcl_publisher_is_valid>
 8018e7c:	b190      	cbz	r0, 8018ea4 <rcl_action_take_goal_request+0x64>
 8018e7e:	b1cd      	cbz	r5, 8018eb4 <rcl_action_take_goal_request+0x74>
 8018e80:	b1c6      	cbz	r6, 8018eb4 <rcl_action_take_goal_request+0x74>
 8018e82:	6820      	ldr	r0, [r4, #0]
 8018e84:	4632      	mov	r2, r6
 8018e86:	4629      	mov	r1, r5
 8018e88:	f7fe f946 	bl	8017118 <rcl_take_request>
 8018e8c:	b148      	cbz	r0, 8018ea2 <rcl_action_take_goal_request+0x62>
 8018e8e:	280a      	cmp	r0, #10
 8018e90:	d007      	beq.n	8018ea2 <rcl_action_take_goal_request+0x62>
 8018e92:	f240 2259 	movw	r2, #601	@ 0x259
 8018e96:	f640 0399 	movw	r3, #2201	@ 0x899
 8018e9a:	4290      	cmp	r0, r2
 8018e9c:	bf0c      	ite	eq
 8018e9e:	4618      	moveq	r0, r3
 8018ea0:	2001      	movne	r0, #1
 8018ea2:	bd70      	pop	{r4, r5, r6, pc}
 8018ea4:	f7f6 f97c 	bl	800f1a0 <rcutils_reset_error>
 8018ea8:	f640 0098 	movw	r0, #2200	@ 0x898
 8018eac:	bd70      	pop	{r4, r5, r6, pc}
 8018eae:	f640 0098 	movw	r0, #2200	@ 0x898
 8018eb2:	bd70      	pop	{r4, r5, r6, pc}
 8018eb4:	200b      	movs	r0, #11
 8018eb6:	bd70      	pop	{r4, r5, r6, pc}
 8018eb8:	f640 0098 	movw	r0, #2200	@ 0x898
 8018ebc:	4770      	bx	lr
 8018ebe:	bf00      	nop

08018ec0 <rcl_action_send_goal_response>:
 8018ec0:	b390      	cbz	r0, 8018f28 <rcl_action_send_goal_response+0x68>
 8018ec2:	b570      	push	{r4, r5, r6, lr}
 8018ec4:	4604      	mov	r4, r0
 8018ec6:	6800      	ldr	r0, [r0, #0]
 8018ec8:	b348      	cbz	r0, 8018f1e <rcl_action_send_goal_response+0x5e>
 8018eca:	460d      	mov	r5, r1
 8018ecc:	4616      	mov	r6, r2
 8018ece:	f7fe f97b 	bl	80171c8 <rcl_service_is_valid>
 8018ed2:	b1f8      	cbz	r0, 8018f14 <rcl_action_send_goal_response+0x54>
 8018ed4:	6820      	ldr	r0, [r4, #0]
 8018ed6:	3004      	adds	r0, #4
 8018ed8:	f7fe f976 	bl	80171c8 <rcl_service_is_valid>
 8018edc:	b1d0      	cbz	r0, 8018f14 <rcl_action_send_goal_response+0x54>
 8018ede:	6820      	ldr	r0, [r4, #0]
 8018ee0:	3008      	adds	r0, #8
 8018ee2:	f7fe f971 	bl	80171c8 <rcl_service_is_valid>
 8018ee6:	b1a8      	cbz	r0, 8018f14 <rcl_action_send_goal_response+0x54>
 8018ee8:	6820      	ldr	r0, [r4, #0]
 8018eea:	300c      	adds	r0, #12
 8018eec:	f7f5 f81a 	bl	800df24 <rcl_publisher_is_valid>
 8018ef0:	b180      	cbz	r0, 8018f14 <rcl_action_send_goal_response+0x54>
 8018ef2:	6820      	ldr	r0, [r4, #0]
 8018ef4:	3010      	adds	r0, #16
 8018ef6:	f7f5 f815 	bl	800df24 <rcl_publisher_is_valid>
 8018efa:	b158      	cbz	r0, 8018f14 <rcl_action_send_goal_response+0x54>
 8018efc:	b195      	cbz	r5, 8018f24 <rcl_action_send_goal_response+0x64>
 8018efe:	b18e      	cbz	r6, 8018f24 <rcl_action_send_goal_response+0x64>
 8018f00:	6820      	ldr	r0, [r4, #0]
 8018f02:	4632      	mov	r2, r6
 8018f04:	4629      	mov	r1, r5
 8018f06:	f7fe f947 	bl	8017198 <rcl_send_response>
 8018f0a:	b110      	cbz	r0, 8018f12 <rcl_action_send_goal_response+0x52>
 8018f0c:	2802      	cmp	r0, #2
 8018f0e:	bf18      	it	ne
 8018f10:	2001      	movne	r0, #1
 8018f12:	bd70      	pop	{r4, r5, r6, pc}
 8018f14:	f7f6 f944 	bl	800f1a0 <rcutils_reset_error>
 8018f18:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f1c:	bd70      	pop	{r4, r5, r6, pc}
 8018f1e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f22:	bd70      	pop	{r4, r5, r6, pc}
 8018f24:	200b      	movs	r0, #11
 8018f26:	bd70      	pop	{r4, r5, r6, pc}
 8018f28:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f2c:	4770      	bx	lr
 8018f2e:	bf00      	nop

08018f30 <rcl_action_take_result_request>:
 8018f30:	2800      	cmp	r0, #0
 8018f32:	d03a      	beq.n	8018faa <rcl_action_take_result_request+0x7a>
 8018f34:	b570      	push	{r4, r5, r6, lr}
 8018f36:	4604      	mov	r4, r0
 8018f38:	6800      	ldr	r0, [r0, #0]
 8018f3a:	b388      	cbz	r0, 8018fa0 <rcl_action_take_result_request+0x70>
 8018f3c:	460d      	mov	r5, r1
 8018f3e:	4616      	mov	r6, r2
 8018f40:	f7fe f942 	bl	80171c8 <rcl_service_is_valid>
 8018f44:	b338      	cbz	r0, 8018f96 <rcl_action_take_result_request+0x66>
 8018f46:	6820      	ldr	r0, [r4, #0]
 8018f48:	3004      	adds	r0, #4
 8018f4a:	f7fe f93d 	bl	80171c8 <rcl_service_is_valid>
 8018f4e:	b310      	cbz	r0, 8018f96 <rcl_action_take_result_request+0x66>
 8018f50:	6820      	ldr	r0, [r4, #0]
 8018f52:	3008      	adds	r0, #8
 8018f54:	f7fe f938 	bl	80171c8 <rcl_service_is_valid>
 8018f58:	b1e8      	cbz	r0, 8018f96 <rcl_action_take_result_request+0x66>
 8018f5a:	6820      	ldr	r0, [r4, #0]
 8018f5c:	300c      	adds	r0, #12
 8018f5e:	f7f4 ffe1 	bl	800df24 <rcl_publisher_is_valid>
 8018f62:	b1c0      	cbz	r0, 8018f96 <rcl_action_take_result_request+0x66>
 8018f64:	6820      	ldr	r0, [r4, #0]
 8018f66:	3010      	adds	r0, #16
 8018f68:	f7f4 ffdc 	bl	800df24 <rcl_publisher_is_valid>
 8018f6c:	b198      	cbz	r0, 8018f96 <rcl_action_take_result_request+0x66>
 8018f6e:	b1d5      	cbz	r5, 8018fa6 <rcl_action_take_result_request+0x76>
 8018f70:	b1ce      	cbz	r6, 8018fa6 <rcl_action_take_result_request+0x76>
 8018f72:	6820      	ldr	r0, [r4, #0]
 8018f74:	4632      	mov	r2, r6
 8018f76:	4629      	mov	r1, r5
 8018f78:	3008      	adds	r0, #8
 8018f7a:	f7fe f8cd 	bl	8017118 <rcl_take_request>
 8018f7e:	b148      	cbz	r0, 8018f94 <rcl_action_take_result_request+0x64>
 8018f80:	280a      	cmp	r0, #10
 8018f82:	d007      	beq.n	8018f94 <rcl_action_take_result_request+0x64>
 8018f84:	f240 2259 	movw	r2, #601	@ 0x259
 8018f88:	f640 0399 	movw	r3, #2201	@ 0x899
 8018f8c:	4290      	cmp	r0, r2
 8018f8e:	bf0c      	ite	eq
 8018f90:	4618      	moveq	r0, r3
 8018f92:	2001      	movne	r0, #1
 8018f94:	bd70      	pop	{r4, r5, r6, pc}
 8018f96:	f7f6 f903 	bl	800f1a0 <rcutils_reset_error>
 8018f9a:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f9e:	bd70      	pop	{r4, r5, r6, pc}
 8018fa0:	f640 0098 	movw	r0, #2200	@ 0x898
 8018fa4:	bd70      	pop	{r4, r5, r6, pc}
 8018fa6:	200b      	movs	r0, #11
 8018fa8:	bd70      	pop	{r4, r5, r6, pc}
 8018faa:	f640 0098 	movw	r0, #2200	@ 0x898
 8018fae:	4770      	bx	lr

08018fb0 <rcl_action_take_cancel_request>:
 8018fb0:	2800      	cmp	r0, #0
 8018fb2:	d03a      	beq.n	801902a <rcl_action_take_cancel_request+0x7a>
 8018fb4:	b570      	push	{r4, r5, r6, lr}
 8018fb6:	4604      	mov	r4, r0
 8018fb8:	6800      	ldr	r0, [r0, #0]
 8018fba:	b388      	cbz	r0, 8019020 <rcl_action_take_cancel_request+0x70>
 8018fbc:	460d      	mov	r5, r1
 8018fbe:	4616      	mov	r6, r2
 8018fc0:	f7fe f902 	bl	80171c8 <rcl_service_is_valid>
 8018fc4:	b338      	cbz	r0, 8019016 <rcl_action_take_cancel_request+0x66>
 8018fc6:	6820      	ldr	r0, [r4, #0]
 8018fc8:	3004      	adds	r0, #4
 8018fca:	f7fe f8fd 	bl	80171c8 <rcl_service_is_valid>
 8018fce:	b310      	cbz	r0, 8019016 <rcl_action_take_cancel_request+0x66>
 8018fd0:	6820      	ldr	r0, [r4, #0]
 8018fd2:	3008      	adds	r0, #8
 8018fd4:	f7fe f8f8 	bl	80171c8 <rcl_service_is_valid>
 8018fd8:	b1e8      	cbz	r0, 8019016 <rcl_action_take_cancel_request+0x66>
 8018fda:	6820      	ldr	r0, [r4, #0]
 8018fdc:	300c      	adds	r0, #12
 8018fde:	f7f4 ffa1 	bl	800df24 <rcl_publisher_is_valid>
 8018fe2:	b1c0      	cbz	r0, 8019016 <rcl_action_take_cancel_request+0x66>
 8018fe4:	6820      	ldr	r0, [r4, #0]
 8018fe6:	3010      	adds	r0, #16
 8018fe8:	f7f4 ff9c 	bl	800df24 <rcl_publisher_is_valid>
 8018fec:	b198      	cbz	r0, 8019016 <rcl_action_take_cancel_request+0x66>
 8018fee:	b1d5      	cbz	r5, 8019026 <rcl_action_take_cancel_request+0x76>
 8018ff0:	b1ce      	cbz	r6, 8019026 <rcl_action_take_cancel_request+0x76>
 8018ff2:	6820      	ldr	r0, [r4, #0]
 8018ff4:	4632      	mov	r2, r6
 8018ff6:	4629      	mov	r1, r5
 8018ff8:	3004      	adds	r0, #4
 8018ffa:	f7fe f88d 	bl	8017118 <rcl_take_request>
 8018ffe:	b148      	cbz	r0, 8019014 <rcl_action_take_cancel_request+0x64>
 8019000:	280a      	cmp	r0, #10
 8019002:	d007      	beq.n	8019014 <rcl_action_take_cancel_request+0x64>
 8019004:	f240 2259 	movw	r2, #601	@ 0x259
 8019008:	f640 0399 	movw	r3, #2201	@ 0x899
 801900c:	4290      	cmp	r0, r2
 801900e:	bf0c      	ite	eq
 8019010:	4618      	moveq	r0, r3
 8019012:	2001      	movne	r0, #1
 8019014:	bd70      	pop	{r4, r5, r6, pc}
 8019016:	f7f6 f8c3 	bl	800f1a0 <rcutils_reset_error>
 801901a:	f640 0098 	movw	r0, #2200	@ 0x898
 801901e:	bd70      	pop	{r4, r5, r6, pc}
 8019020:	f640 0098 	movw	r0, #2200	@ 0x898
 8019024:	bd70      	pop	{r4, r5, r6, pc}
 8019026:	200b      	movs	r0, #11
 8019028:	bd70      	pop	{r4, r5, r6, pc}
 801902a:	f640 0098 	movw	r0, #2200	@ 0x898
 801902e:	4770      	bx	lr

08019030 <rcl_action_send_cancel_response>:
 8019030:	b398      	cbz	r0, 801909a <rcl_action_send_cancel_response+0x6a>
 8019032:	b570      	push	{r4, r5, r6, lr}
 8019034:	4604      	mov	r4, r0
 8019036:	6800      	ldr	r0, [r0, #0]
 8019038:	b350      	cbz	r0, 8019090 <rcl_action_send_cancel_response+0x60>
 801903a:	460d      	mov	r5, r1
 801903c:	4616      	mov	r6, r2
 801903e:	f7fe f8c3 	bl	80171c8 <rcl_service_is_valid>
 8019042:	b300      	cbz	r0, 8019086 <rcl_action_send_cancel_response+0x56>
 8019044:	6820      	ldr	r0, [r4, #0]
 8019046:	3004      	adds	r0, #4
 8019048:	f7fe f8be 	bl	80171c8 <rcl_service_is_valid>
 801904c:	b1d8      	cbz	r0, 8019086 <rcl_action_send_cancel_response+0x56>
 801904e:	6820      	ldr	r0, [r4, #0]
 8019050:	3008      	adds	r0, #8
 8019052:	f7fe f8b9 	bl	80171c8 <rcl_service_is_valid>
 8019056:	b1b0      	cbz	r0, 8019086 <rcl_action_send_cancel_response+0x56>
 8019058:	6820      	ldr	r0, [r4, #0]
 801905a:	300c      	adds	r0, #12
 801905c:	f7f4 ff62 	bl	800df24 <rcl_publisher_is_valid>
 8019060:	b188      	cbz	r0, 8019086 <rcl_action_send_cancel_response+0x56>
 8019062:	6820      	ldr	r0, [r4, #0]
 8019064:	3010      	adds	r0, #16
 8019066:	f7f4 ff5d 	bl	800df24 <rcl_publisher_is_valid>
 801906a:	b160      	cbz	r0, 8019086 <rcl_action_send_cancel_response+0x56>
 801906c:	b19d      	cbz	r5, 8019096 <rcl_action_send_cancel_response+0x66>
 801906e:	b196      	cbz	r6, 8019096 <rcl_action_send_cancel_response+0x66>
 8019070:	6820      	ldr	r0, [r4, #0]
 8019072:	4632      	mov	r2, r6
 8019074:	4629      	mov	r1, r5
 8019076:	3004      	adds	r0, #4
 8019078:	f7fe f88e 	bl	8017198 <rcl_send_response>
 801907c:	b110      	cbz	r0, 8019084 <rcl_action_send_cancel_response+0x54>
 801907e:	2802      	cmp	r0, #2
 8019080:	bf18      	it	ne
 8019082:	2001      	movne	r0, #1
 8019084:	bd70      	pop	{r4, r5, r6, pc}
 8019086:	f7f6 f88b 	bl	800f1a0 <rcutils_reset_error>
 801908a:	f640 0098 	movw	r0, #2200	@ 0x898
 801908e:	bd70      	pop	{r4, r5, r6, pc}
 8019090:	f640 0098 	movw	r0, #2200	@ 0x898
 8019094:	bd70      	pop	{r4, r5, r6, pc}
 8019096:	200b      	movs	r0, #11
 8019098:	bd70      	pop	{r4, r5, r6, pc}
 801909a:	f640 0098 	movw	r0, #2200	@ 0x898
 801909e:	4770      	bx	lr

080190a0 <rcl_action_wait_set_add_action_server>:
 80190a0:	2800      	cmp	r0, #0
 80190a2:	d04d      	beq.n	8019140 <rcl_action_wait_set_add_action_server+0xa0>
 80190a4:	b570      	push	{r4, r5, r6, lr}
 80190a6:	460c      	mov	r4, r1
 80190a8:	b159      	cbz	r1, 80190c2 <rcl_action_wait_set_add_action_server+0x22>
 80190aa:	4605      	mov	r5, r0
 80190ac:	6808      	ldr	r0, [r1, #0]
 80190ae:	b140      	cbz	r0, 80190c2 <rcl_action_wait_set_add_action_server+0x22>
 80190b0:	4616      	mov	r6, r2
 80190b2:	f7fe f889 	bl	80171c8 <rcl_service_is_valid>
 80190b6:	b120      	cbz	r0, 80190c2 <rcl_action_wait_set_add_action_server+0x22>
 80190b8:	6820      	ldr	r0, [r4, #0]
 80190ba:	3004      	adds	r0, #4
 80190bc:	f7fe f884 	bl	80171c8 <rcl_service_is_valid>
 80190c0:	b910      	cbnz	r0, 80190c8 <rcl_action_wait_set_add_action_server+0x28>
 80190c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80190c6:	bd70      	pop	{r4, r5, r6, pc}
 80190c8:	6820      	ldr	r0, [r4, #0]
 80190ca:	3008      	adds	r0, #8
 80190cc:	f7fe f87c 	bl	80171c8 <rcl_service_is_valid>
 80190d0:	2800      	cmp	r0, #0
 80190d2:	d0f6      	beq.n	80190c2 <rcl_action_wait_set_add_action_server+0x22>
 80190d4:	6820      	ldr	r0, [r4, #0]
 80190d6:	300c      	adds	r0, #12
 80190d8:	f7f4 ff3c 	bl	800df54 <rcl_publisher_is_valid_except_context>
 80190dc:	2800      	cmp	r0, #0
 80190de:	d0f0      	beq.n	80190c2 <rcl_action_wait_set_add_action_server+0x22>
 80190e0:	6820      	ldr	r0, [r4, #0]
 80190e2:	3010      	adds	r0, #16
 80190e4:	f7f4 ff36 	bl	800df54 <rcl_publisher_is_valid_except_context>
 80190e8:	2800      	cmp	r0, #0
 80190ea:	d0ea      	beq.n	80190c2 <rcl_action_wait_set_add_action_server+0x22>
 80190ec:	6821      	ldr	r1, [r4, #0]
 80190ee:	4628      	mov	r0, r5
 80190f0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80190f4:	f7ff fad0 	bl	8018698 <rcl_wait_set_add_service>
 80190f8:	2800      	cmp	r0, #0
 80190fa:	d1e4      	bne.n	80190c6 <rcl_action_wait_set_add_action_server+0x26>
 80190fc:	6821      	ldr	r1, [r4, #0]
 80190fe:	4628      	mov	r0, r5
 8019100:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8019104:	3104      	adds	r1, #4
 8019106:	f7ff fac7 	bl	8018698 <rcl_wait_set_add_service>
 801910a:	2800      	cmp	r0, #0
 801910c:	d1db      	bne.n	80190c6 <rcl_action_wait_set_add_action_server+0x26>
 801910e:	6821      	ldr	r1, [r4, #0]
 8019110:	4628      	mov	r0, r5
 8019112:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8019116:	3108      	adds	r1, #8
 8019118:	f7ff fabe 	bl	8018698 <rcl_wait_set_add_service>
 801911c:	2800      	cmp	r0, #0
 801911e:	d1d2      	bne.n	80190c6 <rcl_action_wait_set_add_action_server+0x26>
 8019120:	6821      	ldr	r1, [r4, #0]
 8019122:	4628      	mov	r0, r5
 8019124:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8019128:	3114      	adds	r1, #20
 801912a:	f7ff fa59 	bl	80185e0 <rcl_wait_set_add_timer>
 801912e:	2800      	cmp	r0, #0
 8019130:	d1c9      	bne.n	80190c6 <rcl_action_wait_set_add_action_server+0x26>
 8019132:	2e00      	cmp	r6, #0
 8019134:	d0c7      	beq.n	80190c6 <rcl_action_wait_set_add_action_server+0x26>
 8019136:	6823      	ldr	r3, [r4, #0]
 8019138:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801913c:	6033      	str	r3, [r6, #0]
 801913e:	bd70      	pop	{r4, r5, r6, pc}
 8019140:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019144:	4770      	bx	lr
 8019146:	bf00      	nop

08019148 <rcl_action_server_wait_set_get_entities_ready>:
 8019148:	2800      	cmp	r0, #0
 801914a:	d05a      	beq.n	8019202 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801914e:	460c      	mov	r4, r1
 8019150:	b161      	cbz	r1, 801916c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019152:	4605      	mov	r5, r0
 8019154:	6808      	ldr	r0, [r1, #0]
 8019156:	b148      	cbz	r0, 801916c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019158:	4616      	mov	r6, r2
 801915a:	461f      	mov	r7, r3
 801915c:	f7fe f834 	bl	80171c8 <rcl_service_is_valid>
 8019160:	b120      	cbz	r0, 801916c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019162:	6820      	ldr	r0, [r4, #0]
 8019164:	3004      	adds	r0, #4
 8019166:	f7fe f82f 	bl	80171c8 <rcl_service_is_valid>
 801916a:	b910      	cbnz	r0, 8019172 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801916c:	f640 0098 	movw	r0, #2200	@ 0x898
 8019170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019172:	6820      	ldr	r0, [r4, #0]
 8019174:	3008      	adds	r0, #8
 8019176:	f7fe f827 	bl	80171c8 <rcl_service_is_valid>
 801917a:	2800      	cmp	r0, #0
 801917c:	d0f6      	beq.n	801916c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801917e:	6820      	ldr	r0, [r4, #0]
 8019180:	300c      	adds	r0, #12
 8019182:	f7f4 fee7 	bl	800df54 <rcl_publisher_is_valid_except_context>
 8019186:	2800      	cmp	r0, #0
 8019188:	d0f0      	beq.n	801916c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801918a:	6820      	ldr	r0, [r4, #0]
 801918c:	3010      	adds	r0, #16
 801918e:	f7f4 fee1 	bl	800df54 <rcl_publisher_is_valid_except_context>
 8019192:	2800      	cmp	r0, #0
 8019194:	d0ea      	beq.n	801916c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8019196:	b3be      	cbz	r6, 8019208 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8019198:	b3b7      	cbz	r7, 8019208 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801919a:	9b06      	ldr	r3, [sp, #24]
 801919c:	b3a3      	cbz	r3, 8019208 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801919e:	9b07      	ldr	r3, [sp, #28]
 80191a0:	b393      	cbz	r3, 8019208 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80191a2:	6821      	ldr	r1, [r4, #0]
 80191a4:	692a      	ldr	r2, [r5, #16]
 80191a6:	6a2c      	ldr	r4, [r5, #32]
 80191a8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80191ac:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80191b0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80191b4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80191b8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80191bc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80191c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80191c4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80191c8:	1a64      	subs	r4, r4, r1
 80191ca:	fab4 f484 	clz	r4, r4
 80191ce:	0964      	lsrs	r4, r4, #5
 80191d0:	7034      	strb	r4, [r6, #0]
 80191d2:	1d0c      	adds	r4, r1, #4
 80191d4:	1b1b      	subs	r3, r3, r4
 80191d6:	fab3 f383 	clz	r3, r3
 80191da:	095b      	lsrs	r3, r3, #5
 80191dc:	f101 0408 	add.w	r4, r1, #8
 80191e0:	703b      	strb	r3, [r7, #0]
 80191e2:	f101 0314 	add.w	r3, r1, #20
 80191e6:	1b01      	subs	r1, r0, r4
 80191e8:	1ad3      	subs	r3, r2, r3
 80191ea:	fab1 f181 	clz	r1, r1
 80191ee:	9a06      	ldr	r2, [sp, #24]
 80191f0:	0949      	lsrs	r1, r1, #5
 80191f2:	7011      	strb	r1, [r2, #0]
 80191f4:	fab3 f383 	clz	r3, r3
 80191f8:	9a07      	ldr	r2, [sp, #28]
 80191fa:	095b      	lsrs	r3, r3, #5
 80191fc:	2000      	movs	r0, #0
 80191fe:	7013      	strb	r3, [r2, #0]
 8019200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019202:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019206:	4770      	bx	lr
 8019208:	200b      	movs	r0, #11
 801920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801920c <_execute_event_handler>:
 801920c:	2002      	movs	r0, #2
 801920e:	4770      	bx	lr

08019210 <_cancel_goal_event_handler>:
 8019210:	2003      	movs	r0, #3
 8019212:	4770      	bx	lr

08019214 <_succeed_event_handler>:
 8019214:	2004      	movs	r0, #4
 8019216:	4770      	bx	lr

08019218 <_abort_event_handler>:
 8019218:	2006      	movs	r0, #6
 801921a:	4770      	bx	lr

0801921c <_canceled_event_handler>:
 801921c:	2005      	movs	r0, #5
 801921e:	4770      	bx	lr

08019220 <rcl_action_transition_goal_state>:
 8019220:	b2c2      	uxtb	r2, r0
 8019222:	2a06      	cmp	r2, #6
 8019224:	d80c      	bhi.n	8019240 <rcl_action_transition_goal_state+0x20>
 8019226:	2904      	cmp	r1, #4
 8019228:	d80a      	bhi.n	8019240 <rcl_action_transition_goal_state+0x20>
 801922a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801922e:	b410      	push	{r4}
 8019230:	1853      	adds	r3, r2, r1
 8019232:	4c06      	ldr	r4, [pc, #24]	@ (801924c <rcl_action_transition_goal_state+0x2c>)
 8019234:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019238:	b123      	cbz	r3, 8019244 <rcl_action_transition_goal_state+0x24>
 801923a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801923e:	4718      	bx	r3
 8019240:	2000      	movs	r0, #0
 8019242:	4770      	bx	lr
 8019244:	2000      	movs	r0, #0
 8019246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801924a:	4770      	bx	lr
 801924c:	0801f368 	.word	0x0801f368

08019250 <rcl_action_get_zero_initialized_cancel_response>:
 8019250:	b510      	push	{r4, lr}
 8019252:	4c07      	ldr	r4, [pc, #28]	@ (8019270 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8019254:	4686      	mov	lr, r0
 8019256:	4684      	mov	ip, r0
 8019258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801925a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801925e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019260:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019264:	6823      	ldr	r3, [r4, #0]
 8019266:	f8cc 3000 	str.w	r3, [ip]
 801926a:	4670      	mov	r0, lr
 801926c:	bd10      	pop	{r4, pc}
 801926e:	bf00      	nop
 8019270:	0801f3f4 	.word	0x0801f3f4

08019274 <rclc_action_send_result_request>:
 8019274:	b1d0      	cbz	r0, 80192ac <rclc_action_send_result_request+0x38>
 8019276:	b500      	push	{lr}
 8019278:	4684      	mov	ip, r0
 801927a:	b087      	sub	sp, #28
 801927c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8019280:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8019284:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8019288:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801928c:	f10d 0e08 	add.w	lr, sp, #8
 8019290:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019294:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019298:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801929c:	a902      	add	r1, sp, #8
 801929e:	3010      	adds	r0, #16
 80192a0:	f7ff fbda 	bl	8018a58 <rcl_action_send_result_request>
 80192a4:	b920      	cbnz	r0, 80192b0 <rclc_action_send_result_request+0x3c>
 80192a6:	b007      	add	sp, #28
 80192a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80192ac:	200b      	movs	r0, #11
 80192ae:	4770      	bx	lr
 80192b0:	9001      	str	r0, [sp, #4]
 80192b2:	f7f5 ff75 	bl	800f1a0 <rcutils_reset_error>
 80192b6:	9801      	ldr	r0, [sp, #4]
 80192b8:	b007      	add	sp, #28
 80192ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80192be:	bf00      	nop

080192c0 <rclc_action_take_goal_handle>:
 80192c0:	b160      	cbz	r0, 80192dc <rclc_action_take_goal_handle+0x1c>
 80192c2:	6883      	ldr	r3, [r0, #8]
 80192c4:	b143      	cbz	r3, 80192d8 <rclc_action_take_goal_handle+0x18>
 80192c6:	6819      	ldr	r1, [r3, #0]
 80192c8:	6081      	str	r1, [r0, #8]
 80192ca:	2200      	movs	r2, #0
 80192cc:	721a      	strb	r2, [r3, #8]
 80192ce:	68c1      	ldr	r1, [r0, #12]
 80192d0:	6019      	str	r1, [r3, #0]
 80192d2:	621a      	str	r2, [r3, #32]
 80192d4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80192d6:	60c3      	str	r3, [r0, #12]
 80192d8:	4618      	mov	r0, r3
 80192da:	4770      	bx	lr
 80192dc:	4603      	mov	r3, r0
 80192de:	e7fb      	b.n	80192d8 <rclc_action_take_goal_handle+0x18>

080192e0 <rclc_action_remove_used_goal_handle>:
 80192e0:	b180      	cbz	r0, 8019304 <rclc_action_remove_used_goal_handle+0x24>
 80192e2:	b179      	cbz	r1, 8019304 <rclc_action_remove_used_goal_handle+0x24>
 80192e4:	68c3      	ldr	r3, [r0, #12]
 80192e6:	4299      	cmp	r1, r3
 80192e8:	d00d      	beq.n	8019306 <rclc_action_remove_used_goal_handle+0x26>
 80192ea:	b12b      	cbz	r3, 80192f8 <rclc_action_remove_used_goal_handle+0x18>
 80192ec:	681a      	ldr	r2, [r3, #0]
 80192ee:	4291      	cmp	r1, r2
 80192f0:	d003      	beq.n	80192fa <rclc_action_remove_used_goal_handle+0x1a>
 80192f2:	4613      	mov	r3, r2
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d1f9      	bne.n	80192ec <rclc_action_remove_used_goal_handle+0xc>
 80192f8:	4770      	bx	lr
 80192fa:	680a      	ldr	r2, [r1, #0]
 80192fc:	601a      	str	r2, [r3, #0]
 80192fe:	6883      	ldr	r3, [r0, #8]
 8019300:	600b      	str	r3, [r1, #0]
 8019302:	6081      	str	r1, [r0, #8]
 8019304:	4770      	bx	lr
 8019306:	680b      	ldr	r3, [r1, #0]
 8019308:	60c3      	str	r3, [r0, #12]
 801930a:	e7f8      	b.n	80192fe <rclc_action_remove_used_goal_handle+0x1e>

0801930c <rclc_action_find_goal_handle_by_uuid>:
 801930c:	b538      	push	{r3, r4, r5, lr}
 801930e:	b180      	cbz	r0, 8019332 <rclc_action_find_goal_handle_by_uuid+0x26>
 8019310:	460d      	mov	r5, r1
 8019312:	b181      	cbz	r1, 8019336 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8019314:	68c4      	ldr	r4, [r0, #12]
 8019316:	b914      	cbnz	r4, 801931e <rclc_action_find_goal_handle_by_uuid+0x12>
 8019318:	e009      	b.n	801932e <rclc_action_find_goal_handle_by_uuid+0x22>
 801931a:	6824      	ldr	r4, [r4, #0]
 801931c:	b13c      	cbz	r4, 801932e <rclc_action_find_goal_handle_by_uuid+0x22>
 801931e:	f104 0009 	add.w	r0, r4, #9
 8019322:	2210      	movs	r2, #16
 8019324:	4629      	mov	r1, r5
 8019326:	f002 f91b 	bl	801b560 <memcmp>
 801932a:	2800      	cmp	r0, #0
 801932c:	d1f5      	bne.n	801931a <rclc_action_find_goal_handle_by_uuid+0xe>
 801932e:	4620      	mov	r0, r4
 8019330:	bd38      	pop	{r3, r4, r5, pc}
 8019332:	4604      	mov	r4, r0
 8019334:	e7fb      	b.n	801932e <rclc_action_find_goal_handle_by_uuid+0x22>
 8019336:	460c      	mov	r4, r1
 8019338:	e7f9      	b.n	801932e <rclc_action_find_goal_handle_by_uuid+0x22>
 801933a:	bf00      	nop

0801933c <rclc_action_find_first_handle_by_status>:
 801933c:	b140      	cbz	r0, 8019350 <rclc_action_find_first_handle_by_status+0x14>
 801933e:	68c0      	ldr	r0, [r0, #12]
 8019340:	b910      	cbnz	r0, 8019348 <rclc_action_find_first_handle_by_status+0xc>
 8019342:	e005      	b.n	8019350 <rclc_action_find_first_handle_by_status+0x14>
 8019344:	6800      	ldr	r0, [r0, #0]
 8019346:	b118      	cbz	r0, 8019350 <rclc_action_find_first_handle_by_status+0x14>
 8019348:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801934c:	428b      	cmp	r3, r1
 801934e:	d1f9      	bne.n	8019344 <rclc_action_find_first_handle_by_status+0x8>
 8019350:	4770      	bx	lr
 8019352:	bf00      	nop

08019354 <rclc_action_find_first_terminated_handle>:
 8019354:	b140      	cbz	r0, 8019368 <rclc_action_find_first_terminated_handle+0x14>
 8019356:	68c0      	ldr	r0, [r0, #12]
 8019358:	b910      	cbnz	r0, 8019360 <rclc_action_find_first_terminated_handle+0xc>
 801935a:	e005      	b.n	8019368 <rclc_action_find_first_terminated_handle+0x14>
 801935c:	6800      	ldr	r0, [r0, #0]
 801935e:	b118      	cbz	r0, 8019368 <rclc_action_find_first_terminated_handle+0x14>
 8019360:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019364:	2b03      	cmp	r3, #3
 8019366:	ddf9      	ble.n	801935c <rclc_action_find_first_terminated_handle+0x8>
 8019368:	4770      	bx	lr
 801936a:	bf00      	nop

0801936c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801936c:	b170      	cbz	r0, 801938c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801936e:	68c0      	ldr	r0, [r0, #12]
 8019370:	b160      	cbz	r0, 801938c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8019372:	b410      	push	{r4}
 8019374:	e001      	b.n	801937a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8019376:	6800      	ldr	r0, [r0, #0]
 8019378:	b128      	cbz	r0, 8019386 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801937a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801937e:	4299      	cmp	r1, r3
 8019380:	bf08      	it	eq
 8019382:	4294      	cmpeq	r4, r2
 8019384:	d1f7      	bne.n	8019376 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8019386:	f85d 4b04 	ldr.w	r4, [sp], #4
 801938a:	4770      	bx	lr
 801938c:	4770      	bx	lr
 801938e:	bf00      	nop

08019390 <rclc_action_find_handle_by_result_request_sequence_number>:
 8019390:	b170      	cbz	r0, 80193b0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8019392:	68c0      	ldr	r0, [r0, #12]
 8019394:	b160      	cbz	r0, 80193b0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8019396:	b410      	push	{r4}
 8019398:	e001      	b.n	801939e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801939a:	6800      	ldr	r0, [r0, #0]
 801939c:	b128      	cbz	r0, 80193aa <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801939e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80193a2:	4299      	cmp	r1, r3
 80193a4:	bf08      	it	eq
 80193a6:	4294      	cmpeq	r4, r2
 80193a8:	d1f7      	bne.n	801939a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80193aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193ae:	4770      	bx	lr
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop

080193b4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80193b4:	b170      	cbz	r0, 80193d4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80193b6:	68c0      	ldr	r0, [r0, #12]
 80193b8:	b160      	cbz	r0, 80193d4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80193ba:	b410      	push	{r4}
 80193bc:	e001      	b.n	80193c2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80193be:	6800      	ldr	r0, [r0, #0]
 80193c0:	b128      	cbz	r0, 80193ce <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80193c2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80193c6:	4299      	cmp	r1, r3
 80193c8:	bf08      	it	eq
 80193ca:	4294      	cmpeq	r4, r2
 80193cc:	d1f7      	bne.n	80193be <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80193ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193d2:	4770      	bx	lr
 80193d4:	4770      	bx	lr
 80193d6:	bf00      	nop

080193d8 <rclc_action_find_first_handle_with_goal_response>:
 80193d8:	b140      	cbz	r0, 80193ec <rclc_action_find_first_handle_with_goal_response+0x14>
 80193da:	68c0      	ldr	r0, [r0, #12]
 80193dc:	b910      	cbnz	r0, 80193e4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80193de:	e005      	b.n	80193ec <rclc_action_find_first_handle_with_goal_response+0x14>
 80193e0:	6800      	ldr	r0, [r0, #0]
 80193e2:	b118      	cbz	r0, 80193ec <rclc_action_find_first_handle_with_goal_response+0x14>
 80193e4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d0f9      	beq.n	80193e0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80193ec:	4770      	bx	lr
 80193ee:	bf00      	nop

080193f0 <rclc_action_find_first_handle_with_result_response>:
 80193f0:	b140      	cbz	r0, 8019404 <rclc_action_find_first_handle_with_result_response+0x14>
 80193f2:	68c0      	ldr	r0, [r0, #12]
 80193f4:	b910      	cbnz	r0, 80193fc <rclc_action_find_first_handle_with_result_response+0xc>
 80193f6:	e005      	b.n	8019404 <rclc_action_find_first_handle_with_result_response+0x14>
 80193f8:	6800      	ldr	r0, [r0, #0]
 80193fa:	b118      	cbz	r0, 8019404 <rclc_action_find_first_handle_with_result_response+0x14>
 80193fc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8019400:	2b00      	cmp	r3, #0
 8019402:	d0f9      	beq.n	80193f8 <rclc_action_find_first_handle_with_result_response+0x8>
 8019404:	4770      	bx	lr
 8019406:	bf00      	nop

08019408 <rclc_action_server_response_goal_request>:
 8019408:	b198      	cbz	r0, 8019432 <rclc_action_server_response_goal_request+0x2a>
 801940a:	b510      	push	{r4, lr}
 801940c:	6844      	ldr	r4, [r0, #4]
 801940e:	b086      	sub	sp, #24
 8019410:	2200      	movs	r2, #0
 8019412:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8019416:	460b      	mov	r3, r1
 8019418:	9205      	str	r2, [sp, #20]
 801941a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801941e:	aa03      	add	r2, sp, #12
 8019420:	f104 0010 	add.w	r0, r4, #16
 8019424:	f88d 300c 	strb.w	r3, [sp, #12]
 8019428:	f7ff fd4a 	bl	8018ec0 <rcl_action_send_goal_response>
 801942c:	b918      	cbnz	r0, 8019436 <rclc_action_server_response_goal_request+0x2e>
 801942e:	b006      	add	sp, #24
 8019430:	bd10      	pop	{r4, pc}
 8019432:	200b      	movs	r0, #11
 8019434:	4770      	bx	lr
 8019436:	9001      	str	r0, [sp, #4]
 8019438:	f7f5 feb2 	bl	800f1a0 <rcutils_reset_error>
 801943c:	9801      	ldr	r0, [sp, #4]
 801943e:	b006      	add	sp, #24
 8019440:	bd10      	pop	{r4, pc}
 8019442:	bf00      	nop
 8019444:	0000      	movs	r0, r0
	...

08019448 <rclc_action_server_goal_cancel_accept>:
 8019448:	b310      	cbz	r0, 8019490 <rclc_action_server_goal_cancel_accept+0x48>
 801944a:	b510      	push	{r4, lr}
 801944c:	b090      	sub	sp, #64	@ 0x40
 801944e:	4604      	mov	r4, r0
 8019450:	a806      	add	r0, sp, #24
 8019452:	f7ff fefd 	bl	8019250 <rcl_action_get_zero_initialized_cancel_response>
 8019456:	2300      	movs	r3, #0
 8019458:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801945c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019460:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8019464:	f88d 3018 	strb.w	r3, [sp, #24]
 8019468:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801946c:	f8cd d01c 	str.w	sp, [sp, #28]
 8019470:	46ec      	mov	ip, sp
 8019472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019476:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019498 <rclc_action_server_goal_cancel_accept+0x50>
 801947a:	6860      	ldr	r0, [r4, #4]
 801947c:	aa06      	add	r2, sp, #24
 801947e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8019482:	3010      	adds	r0, #16
 8019484:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019488:	f7ff fdd2 	bl	8019030 <rcl_action_send_cancel_response>
 801948c:	b010      	add	sp, #64	@ 0x40
 801948e:	bd10      	pop	{r4, pc}
 8019490:	200b      	movs	r0, #11
 8019492:	4770      	bx	lr
 8019494:	f3af 8000 	nop.w
 8019498:	00000001 	.word	0x00000001
 801949c:	00000001 	.word	0x00000001

080194a0 <rclc_action_server_goal_cancel_reject>:
 80194a0:	b082      	sub	sp, #8
 80194a2:	b530      	push	{r4, r5, lr}
 80194a4:	b08b      	sub	sp, #44	@ 0x2c
 80194a6:	ac0e      	add	r4, sp, #56	@ 0x38
 80194a8:	e884 000c 	stmia.w	r4, {r2, r3}
 80194ac:	b188      	cbz	r0, 80194d2 <rclc_action_server_goal_cancel_reject+0x32>
 80194ae:	4604      	mov	r4, r0
 80194b0:	a801      	add	r0, sp, #4
 80194b2:	460d      	mov	r5, r1
 80194b4:	f7ff fecc 	bl	8019250 <rcl_action_get_zero_initialized_cancel_response>
 80194b8:	aa01      	add	r2, sp, #4
 80194ba:	a90e      	add	r1, sp, #56	@ 0x38
 80194bc:	f104 0010 	add.w	r0, r4, #16
 80194c0:	f88d 5004 	strb.w	r5, [sp, #4]
 80194c4:	f7ff fdb4 	bl	8019030 <rcl_action_send_cancel_response>
 80194c8:	b00b      	add	sp, #44	@ 0x2c
 80194ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80194ce:	b002      	add	sp, #8
 80194d0:	4770      	bx	lr
 80194d2:	200b      	movs	r0, #11
 80194d4:	b00b      	add	sp, #44	@ 0x2c
 80194d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80194da:	b002      	add	sp, #8
 80194dc:	4770      	bx	lr
 80194de:	bf00      	nop

080194e0 <rcutils_is_directory>:
 80194e0:	2000      	movs	r0, #0
 80194e2:	4770      	bx	lr

080194e4 <rcutils_join_path>:
 80194e4:	b082      	sub	sp, #8
 80194e6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80194ea:	2000      	movs	r0, #0
 80194ec:	b002      	add	sp, #8
 80194ee:	4770      	bx	lr

080194f0 <rcutils_to_native_path>:
 80194f0:	b084      	sub	sp, #16
 80194f2:	a801      	add	r0, sp, #4
 80194f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80194f8:	b004      	add	sp, #16
 80194fa:	2000      	movs	r0, #0
 80194fc:	4770      	bx	lr
 80194fe:	bf00      	nop

08019500 <rmw_get_zero_initialized_context>:
 8019500:	b510      	push	{r4, lr}
 8019502:	4604      	mov	r4, r0
 8019504:	3010      	adds	r0, #16
 8019506:	f7f6 f93b 	bl	800f780 <rmw_get_zero_initialized_init_options>
 801950a:	2300      	movs	r3, #0
 801950c:	2000      	movs	r0, #0
 801950e:	2100      	movs	r1, #0
 8019510:	e9c4 0100 	strd	r0, r1, [r4]
 8019514:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8019518:	60a3      	str	r3, [r4, #8]
 801951a:	4620      	mov	r0, r4
 801951c:	bd10      	pop	{r4, pc}
 801951e:	bf00      	nop

08019520 <rmw_subscription_content_filter_options_fini>:
 8019520:	b1b0      	cbz	r0, 8019550 <rmw_subscription_content_filter_options_fini+0x30>
 8019522:	b538      	push	{r3, r4, r5, lr}
 8019524:	4604      	mov	r4, r0
 8019526:	4608      	mov	r0, r1
 8019528:	460d      	mov	r5, r1
 801952a:	f7f5 fd57 	bl	800efdc <rcutils_allocator_is_valid>
 801952e:	b168      	cbz	r0, 801954c <rmw_subscription_content_filter_options_fini+0x2c>
 8019530:	6820      	ldr	r0, [r4, #0]
 8019532:	b120      	cbz	r0, 801953e <rmw_subscription_content_filter_options_fini+0x1e>
 8019534:	686b      	ldr	r3, [r5, #4]
 8019536:	6929      	ldr	r1, [r5, #16]
 8019538:	4798      	blx	r3
 801953a:	2300      	movs	r3, #0
 801953c:	6023      	str	r3, [r4, #0]
 801953e:	1d20      	adds	r0, r4, #4
 8019540:	f001 fac8 	bl	801aad4 <rcutils_string_array_fini>
 8019544:	3800      	subs	r0, #0
 8019546:	bf18      	it	ne
 8019548:	2001      	movne	r0, #1
 801954a:	bd38      	pop	{r3, r4, r5, pc}
 801954c:	200b      	movs	r0, #11
 801954e:	bd38      	pop	{r3, r4, r5, pc}
 8019550:	200b      	movs	r0, #11
 8019552:	4770      	bx	lr

08019554 <rmw_get_default_subscription_options>:
 8019554:	2200      	movs	r2, #0
 8019556:	e9c0 2200 	strd	r2, r2, [r0]
 801955a:	6082      	str	r2, [r0, #8]
 801955c:	4770      	bx	lr
 801955e:	bf00      	nop

08019560 <rmw_time_equal>:
 8019560:	b4f0      	push	{r4, r5, r6, r7}
 8019562:	b084      	sub	sp, #16
 8019564:	ac04      	add	r4, sp, #16
 8019566:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801956a:	4603      	mov	r3, r0
 801956c:	4924      	ldr	r1, [pc, #144]	@ (8019600 <rmw_time_equal+0xa0>)
 801956e:	9e03      	ldr	r6, [sp, #12]
 8019570:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8019574:	2202      	movs	r2, #2
 8019576:	4299      	cmp	r1, r3
 8019578:	41aa      	sbcs	r2, r5
 801957a:	d330      	bcc.n	80195de <rmw_time_equal+0x7e>
 801957c:	4c21      	ldr	r4, [pc, #132]	@ (8019604 <rmw_time_equal+0xa4>)
 801957e:	fba3 3204 	umull	r3, r2, r3, r4
 8019582:	fb04 2205 	mla	r2, r4, r5, r2
 8019586:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801958a:	43dd      	mvns	r5, r3
 801958c:	1a8c      	subs	r4, r1, r2
 801958e:	4285      	cmp	r5, r0
 8019590:	41b4      	sbcs	r4, r6
 8019592:	d332      	bcc.n	80195fa <rmw_time_equal+0x9a>
 8019594:	eb10 0c03 	adds.w	ip, r0, r3
 8019598:	eb42 0106 	adc.w	r1, r2, r6
 801959c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80195a0:	4817      	ldr	r0, [pc, #92]	@ (8019600 <rmw_time_equal+0xa0>)
 80195a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80195a4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80195a6:	2202      	movs	r2, #2
 80195a8:	4298      	cmp	r0, r3
 80195aa:	41b2      	sbcs	r2, r6
 80195ac:	d31c      	bcc.n	80195e8 <rmw_time_equal+0x88>
 80195ae:	4c15      	ldr	r4, [pc, #84]	@ (8019604 <rmw_time_equal+0xa4>)
 80195b0:	fba3 3204 	umull	r3, r2, r3, r4
 80195b4:	fb04 2206 	mla	r2, r4, r6, r2
 80195b8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80195bc:	43de      	mvns	r6, r3
 80195be:	1a84      	subs	r4, r0, r2
 80195c0:	42ae      	cmp	r6, r5
 80195c2:	41bc      	sbcs	r4, r7
 80195c4:	d315      	bcc.n	80195f2 <rmw_time_equal+0x92>
 80195c6:	195b      	adds	r3, r3, r5
 80195c8:	eb42 0207 	adc.w	r2, r2, r7
 80195cc:	428a      	cmp	r2, r1
 80195ce:	bf08      	it	eq
 80195d0:	4563      	cmpeq	r3, ip
 80195d2:	bf0c      	ite	eq
 80195d4:	2001      	moveq	r0, #1
 80195d6:	2000      	movne	r0, #0
 80195d8:	b004      	add	sp, #16
 80195da:	bcf0      	pop	{r4, r5, r6, r7}
 80195dc:	4770      	bx	lr
 80195de:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80195e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80195e6:	e7d9      	b.n	801959c <rmw_time_equal+0x3c>
 80195e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195ec:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80195f0:	e7ec      	b.n	80195cc <rmw_time_equal+0x6c>
 80195f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195f6:	4602      	mov	r2, r0
 80195f8:	e7e8      	b.n	80195cc <rmw_time_equal+0x6c>
 80195fa:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80195fe:	e7cd      	b.n	801959c <rmw_time_equal+0x3c>
 8019600:	25c17d04 	.word	0x25c17d04
 8019604:	3b9aca00 	.word	0x3b9aca00

08019608 <rmw_time_total_nsec>:
 8019608:	b470      	push	{r4, r5, r6}
 801960a:	b085      	sub	sp, #20
 801960c:	ac04      	add	r4, sp, #16
 801960e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019612:	4603      	mov	r3, r0
 8019614:	4912      	ldr	r1, [pc, #72]	@ (8019660 <rmw_time_total_nsec+0x58>)
 8019616:	9e03      	ldr	r6, [sp, #12]
 8019618:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801961c:	2202      	movs	r2, #2
 801961e:	4299      	cmp	r1, r3
 8019620:	41aa      	sbcs	r2, r5
 8019622:	d311      	bcc.n	8019648 <rmw_time_total_nsec+0x40>
 8019624:	4c0f      	ldr	r4, [pc, #60]	@ (8019664 <rmw_time_total_nsec+0x5c>)
 8019626:	fba3 3204 	umull	r3, r2, r3, r4
 801962a:	fb04 2205 	mla	r2, r4, r5, r2
 801962e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019632:	43dd      	mvns	r5, r3
 8019634:	1a8c      	subs	r4, r1, r2
 8019636:	4285      	cmp	r5, r0
 8019638:	41b4      	sbcs	r4, r6
 801963a:	d30c      	bcc.n	8019656 <rmw_time_total_nsec+0x4e>
 801963c:	1818      	adds	r0, r3, r0
 801963e:	eb42 0106 	adc.w	r1, r2, r6
 8019642:	b005      	add	sp, #20
 8019644:	bc70      	pop	{r4, r5, r6}
 8019646:	4770      	bx	lr
 8019648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801964c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019650:	b005      	add	sp, #20
 8019652:	bc70      	pop	{r4, r5, r6}
 8019654:	4770      	bx	lr
 8019656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801965a:	b005      	add	sp, #20
 801965c:	bc70      	pop	{r4, r5, r6}
 801965e:	4770      	bx	lr
 8019660:	25c17d04 	.word	0x25c17d04
 8019664:	3b9aca00 	.word	0x3b9aca00

08019668 <rmw_get_zero_initialized_message_info>:
 8019668:	b510      	push	{r4, lr}
 801966a:	2240      	movs	r2, #64	@ 0x40
 801966c:	4604      	mov	r4, r0
 801966e:	2100      	movs	r1, #0
 8019670:	f001 ffa0 	bl	801b5b4 <memset>
 8019674:	4620      	mov	r0, r4
 8019676:	bd10      	pop	{r4, pc}

08019678 <on_status>:
 8019678:	b082      	sub	sp, #8
 801967a:	b002      	add	sp, #8
 801967c:	4770      	bx	lr
 801967e:	bf00      	nop

08019680 <on_topic>:
 8019680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019684:	4a22      	ldr	r2, [pc, #136]	@ (8019710 <on_topic+0x90>)
 8019686:	b094      	sub	sp, #80	@ 0x50
 8019688:	6812      	ldr	r2, [r2, #0]
 801968a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801968c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019690:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019694:	b3c2      	cbz	r2, 8019708 <on_topic+0x88>
 8019696:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801969a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801969e:	e001      	b.n	80196a4 <on_topic+0x24>
 80196a0:	6852      	ldr	r2, [r2, #4]
 80196a2:	b38a      	cbz	r2, 8019708 <on_topic+0x88>
 80196a4:	6894      	ldr	r4, [r2, #8]
 80196a6:	8aa3      	ldrh	r3, [r4, #20]
 80196a8:	428b      	cmp	r3, r1
 80196aa:	d1f9      	bne.n	80196a0 <on_topic+0x20>
 80196ac:	7da3      	ldrb	r3, [r4, #22]
 80196ae:	4283      	cmp	r3, r0
 80196b0:	d1f6      	bne.n	80196a0 <on_topic+0x20>
 80196b2:	2248      	movs	r2, #72	@ 0x48
 80196b4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80196b8:	4668      	mov	r0, sp
 80196ba:	f002 f844 	bl	801b746 <memcpy>
 80196be:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80196c2:	cb0c      	ldmia	r3, {r2, r3}
 80196c4:	4620      	mov	r0, r4
 80196c6:	f7f7 fe1f 	bl	8011308 <rmw_uxrce_get_static_input_buffer_for_entity>
 80196ca:	4607      	mov	r7, r0
 80196cc:	b1e0      	cbz	r0, 8019708 <on_topic+0x88>
 80196ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80196d2:	4632      	mov	r2, r6
 80196d4:	4628      	mov	r0, r5
 80196d6:	f108 0110 	add.w	r1, r8, #16
 80196da:	f7f8 ff8b 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 80196de:	b930      	cbnz	r0, 80196ee <on_topic+0x6e>
 80196e0:	480c      	ldr	r0, [pc, #48]	@ (8019714 <on_topic+0x94>)
 80196e2:	4639      	mov	r1, r7
 80196e4:	b014      	add	sp, #80	@ 0x50
 80196e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196ea:	f000 b8bd 	b.w	8019868 <put_memory>
 80196ee:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80196f2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80196f6:	f7f7 fc05 	bl	8010f04 <rmw_uros_epoch_nanos>
 80196fa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80196fe:	2305      	movs	r3, #5
 8019700:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019704:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019708:	b014      	add	sp, #80	@ 0x50
 801970a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801970e:	bf00      	nop
 8019710:	2000c474 	.word	0x2000c474
 8019714:	2000c464 	.word	0x2000c464

08019718 <on_request>:
 8019718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801971c:	4823      	ldr	r0, [pc, #140]	@ (80197ac <on_request+0x94>)
 801971e:	b094      	sub	sp, #80	@ 0x50
 8019720:	6800      	ldr	r0, [r0, #0]
 8019722:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019724:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019728:	9113      	str	r1, [sp, #76]	@ 0x4c
 801972a:	2800      	cmp	r0, #0
 801972c:	d03b      	beq.n	80197a6 <on_request+0x8e>
 801972e:	461d      	mov	r5, r3
 8019730:	e001      	b.n	8019736 <on_request+0x1e>
 8019732:	6840      	ldr	r0, [r0, #4]
 8019734:	b3b8      	cbz	r0, 80197a6 <on_request+0x8e>
 8019736:	6884      	ldr	r4, [r0, #8]
 8019738:	8b21      	ldrh	r1, [r4, #24]
 801973a:	4291      	cmp	r1, r2
 801973c:	d1f9      	bne.n	8019732 <on_request+0x1a>
 801973e:	2248      	movs	r2, #72	@ 0x48
 8019740:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019744:	4668      	mov	r0, sp
 8019746:	f001 fffe 	bl	801b746 <memcpy>
 801974a:	f104 0320 	add.w	r3, r4, #32
 801974e:	cb0c      	ldmia	r3, {r2, r3}
 8019750:	4620      	mov	r0, r4
 8019752:	f7f7 fdd9 	bl	8011308 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019756:	4680      	mov	r8, r0
 8019758:	b328      	cbz	r0, 80197a6 <on_request+0x8e>
 801975a:	4638      	mov	r0, r7
 801975c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019760:	4632      	mov	r2, r6
 8019762:	f107 0110 	add.w	r1, r7, #16
 8019766:	f7f8 ff45 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 801976a:	b930      	cbnz	r0, 801977a <on_request+0x62>
 801976c:	4810      	ldr	r0, [pc, #64]	@ (80197b0 <on_request+0x98>)
 801976e:	4641      	mov	r1, r8
 8019770:	b014      	add	sp, #80	@ 0x50
 8019772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019776:	f000 b877 	b.w	8019868 <put_memory>
 801977a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801977c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019780:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019784:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019788:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801978c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019790:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019794:	f7f7 fbb6 	bl	8010f04 <rmw_uros_epoch_nanos>
 8019798:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801979c:	2303      	movs	r3, #3
 801979e:	e942 0102 	strd	r0, r1, [r2, #-8]
 80197a2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80197a6:	b014      	add	sp, #80	@ 0x50
 80197a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197ac:	2000c444 	.word	0x2000c444
 80197b0:	2000c464 	.word	0x2000c464

080197b4 <on_reply>:
 80197b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197b8:	4821      	ldr	r0, [pc, #132]	@ (8019840 <on_reply+0x8c>)
 80197ba:	b094      	sub	sp, #80	@ 0x50
 80197bc:	6800      	ldr	r0, [r0, #0]
 80197be:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80197c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80197c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80197c6:	b3b8      	cbz	r0, 8019838 <on_reply+0x84>
 80197c8:	461d      	mov	r5, r3
 80197ca:	e001      	b.n	80197d0 <on_reply+0x1c>
 80197cc:	6840      	ldr	r0, [r0, #4]
 80197ce:	b398      	cbz	r0, 8019838 <on_reply+0x84>
 80197d0:	6884      	ldr	r4, [r0, #8]
 80197d2:	8b21      	ldrh	r1, [r4, #24]
 80197d4:	4291      	cmp	r1, r2
 80197d6:	d1f9      	bne.n	80197cc <on_reply+0x18>
 80197d8:	2248      	movs	r2, #72	@ 0x48
 80197da:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80197de:	4668      	mov	r0, sp
 80197e0:	f001 ffb1 	bl	801b746 <memcpy>
 80197e4:	f104 0320 	add.w	r3, r4, #32
 80197e8:	cb0c      	ldmia	r3, {r2, r3}
 80197ea:	4620      	mov	r0, r4
 80197ec:	f7f7 fd8c 	bl	8011308 <rmw_uxrce_get_static_input_buffer_for_entity>
 80197f0:	4680      	mov	r8, r0
 80197f2:	b308      	cbz	r0, 8019838 <on_reply+0x84>
 80197f4:	4638      	mov	r0, r7
 80197f6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80197fa:	4632      	mov	r2, r6
 80197fc:	f107 0110 	add.w	r1, r7, #16
 8019800:	f7f8 fef8 	bl	80125f4 <ucdr_deserialize_array_uint8_t>
 8019804:	b930      	cbnz	r0, 8019814 <on_reply+0x60>
 8019806:	480f      	ldr	r0, [pc, #60]	@ (8019844 <on_reply+0x90>)
 8019808:	4641      	mov	r1, r8
 801980a:	b014      	add	sp, #80	@ 0x50
 801980c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019810:	f000 b82a 	b.w	8019868 <put_memory>
 8019814:	2200      	movs	r2, #0
 8019816:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801981a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801981e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019822:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8019826:	f7f7 fb6d 	bl	8010f04 <rmw_uros_epoch_nanos>
 801982a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801982e:	2304      	movs	r3, #4
 8019830:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019834:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019838:	b014      	add	sp, #80	@ 0x50
 801983a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801983e:	bf00      	nop
 8019840:	20007a90 	.word	0x20007a90
 8019844:	2000c464 	.word	0x2000c464

08019848 <get_memory>:
 8019848:	4603      	mov	r3, r0
 801984a:	6840      	ldr	r0, [r0, #4]
 801984c:	b158      	cbz	r0, 8019866 <get_memory+0x1e>
 801984e:	6842      	ldr	r2, [r0, #4]
 8019850:	605a      	str	r2, [r3, #4]
 8019852:	b10a      	cbz	r2, 8019858 <get_memory+0x10>
 8019854:	2100      	movs	r1, #0
 8019856:	6011      	str	r1, [r2, #0]
 8019858:	681a      	ldr	r2, [r3, #0]
 801985a:	6042      	str	r2, [r0, #4]
 801985c:	b102      	cbz	r2, 8019860 <get_memory+0x18>
 801985e:	6010      	str	r0, [r2, #0]
 8019860:	2200      	movs	r2, #0
 8019862:	6002      	str	r2, [r0, #0]
 8019864:	6018      	str	r0, [r3, #0]
 8019866:	4770      	bx	lr

08019868 <put_memory>:
 8019868:	680b      	ldr	r3, [r1, #0]
 801986a:	b10b      	cbz	r3, 8019870 <put_memory+0x8>
 801986c:	684a      	ldr	r2, [r1, #4]
 801986e:	605a      	str	r2, [r3, #4]
 8019870:	684a      	ldr	r2, [r1, #4]
 8019872:	b102      	cbz	r2, 8019876 <put_memory+0xe>
 8019874:	6013      	str	r3, [r2, #0]
 8019876:	6803      	ldr	r3, [r0, #0]
 8019878:	428b      	cmp	r3, r1
 801987a:	6843      	ldr	r3, [r0, #4]
 801987c:	bf08      	it	eq
 801987e:	6002      	streq	r2, [r0, #0]
 8019880:	604b      	str	r3, [r1, #4]
 8019882:	b103      	cbz	r3, 8019886 <put_memory+0x1e>
 8019884:	6019      	str	r1, [r3, #0]
 8019886:	2300      	movs	r3, #0
 8019888:	600b      	str	r3, [r1, #0]
 801988a:	6041      	str	r1, [r0, #4]
 801988c:	4770      	bx	lr
 801988e:	bf00      	nop

08019890 <rmw_create_guard_condition>:
 8019890:	b538      	push	{r3, r4, r5, lr}
 8019892:	4605      	mov	r5, r0
 8019894:	4807      	ldr	r0, [pc, #28]	@ (80198b4 <rmw_create_guard_condition+0x24>)
 8019896:	f7ff ffd7 	bl	8019848 <get_memory>
 801989a:	b148      	cbz	r0, 80198b0 <rmw_create_guard_condition+0x20>
 801989c:	6884      	ldr	r4, [r0, #8]
 801989e:	2300      	movs	r3, #0
 80198a0:	7423      	strb	r3, [r4, #16]
 80198a2:	61e5      	str	r5, [r4, #28]
 80198a4:	f7f6 fa10 	bl	800fcc8 <rmw_get_implementation_identifier>
 80198a8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80198ac:	f104 0014 	add.w	r0, r4, #20
 80198b0:	bd38      	pop	{r3, r4, r5, pc}
 80198b2:	bf00      	nop
 80198b4:	2000c404 	.word	0x2000c404

080198b8 <rmw_destroy_guard_condition>:
 80198b8:	b508      	push	{r3, lr}
 80198ba:	4b08      	ldr	r3, [pc, #32]	@ (80198dc <rmw_destroy_guard_condition+0x24>)
 80198bc:	6819      	ldr	r1, [r3, #0]
 80198be:	b911      	cbnz	r1, 80198c6 <rmw_destroy_guard_condition+0xe>
 80198c0:	e00a      	b.n	80198d8 <rmw_destroy_guard_condition+0x20>
 80198c2:	6849      	ldr	r1, [r1, #4]
 80198c4:	b141      	cbz	r1, 80198d8 <rmw_destroy_guard_condition+0x20>
 80198c6:	688b      	ldr	r3, [r1, #8]
 80198c8:	3314      	adds	r3, #20
 80198ca:	4298      	cmp	r0, r3
 80198cc:	d1f9      	bne.n	80198c2 <rmw_destroy_guard_condition+0xa>
 80198ce:	4803      	ldr	r0, [pc, #12]	@ (80198dc <rmw_destroy_guard_condition+0x24>)
 80198d0:	f7ff ffca 	bl	8019868 <put_memory>
 80198d4:	2000      	movs	r0, #0
 80198d6:	bd08      	pop	{r3, pc}
 80198d8:	2001      	movs	r0, #1
 80198da:	bd08      	pop	{r3, pc}
 80198dc:	2000c404 	.word	0x2000c404

080198e0 <create_topic>:
 80198e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198e4:	4605      	mov	r5, r0
 80198e6:	b084      	sub	sp, #16
 80198e8:	4822      	ldr	r0, [pc, #136]	@ (8019974 <create_topic+0x94>)
 80198ea:	460f      	mov	r7, r1
 80198ec:	4616      	mov	r6, r2
 80198ee:	f7ff ffab 	bl	8019848 <get_memory>
 80198f2:	4604      	mov	r4, r0
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d039      	beq.n	801996c <create_topic+0x8c>
 80198f8:	692b      	ldr	r3, [r5, #16]
 80198fa:	6884      	ldr	r4, [r0, #8]
 80198fc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801997c <create_topic+0x9c>
 8019900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019904:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019908:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801990c:	1c42      	adds	r2, r0, #1
 801990e:	2102      	movs	r1, #2
 8019910:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8019914:	f7f9 fb0c 	bl	8012f30 <uxr_object_id>
 8019918:	223c      	movs	r2, #60	@ 0x3c
 801991a:	6120      	str	r0, [r4, #16]
 801991c:	4641      	mov	r1, r8
 801991e:	4638      	mov	r0, r7
 8019920:	f7f7 fee8 	bl	80116f4 <generate_topic_name>
 8019924:	b1f0      	cbz	r0, 8019964 <create_topic+0x84>
 8019926:	4f14      	ldr	r7, [pc, #80]	@ (8019978 <create_topic+0x98>)
 8019928:	4630      	mov	r0, r6
 801992a:	2264      	movs	r2, #100	@ 0x64
 801992c:	4639      	mov	r1, r7
 801992e:	f7f7 feb1 	bl	8011694 <generate_type_name>
 8019932:	b1b8      	cbz	r0, 8019964 <create_topic+0x84>
 8019934:	6928      	ldr	r0, [r5, #16]
 8019936:	2306      	movs	r3, #6
 8019938:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801993c:	f8cd 8000 	str.w	r8, [sp]
 8019940:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8019944:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019948:	6811      	ldr	r1, [r2, #0]
 801994a:	696b      	ldr	r3, [r5, #20]
 801994c:	6922      	ldr	r2, [r4, #16]
 801994e:	f7f9 f835 	bl	80129bc <uxr_buffer_create_topic_bin>
 8019952:	4602      	mov	r2, r0
 8019954:	6928      	ldr	r0, [r5, #16]
 8019956:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801995a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801995e:	f7f7 fdc9 	bl	80114f4 <run_xrce_session>
 8019962:	b918      	cbnz	r0, 801996c <create_topic+0x8c>
 8019964:	4620      	mov	r0, r4
 8019966:	f7f7 fcc3 	bl	80112f0 <rmw_uxrce_fini_topic_memory>
 801996a:	2400      	movs	r4, #0
 801996c:	4620      	mov	r0, r4
 801996e:	b004      	add	sp, #16
 8019970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019974:	2000c484 	.word	0x2000c484
 8019978:	2000c5d4 	.word	0x2000c5d4
 801997c:	2000c598 	.word	0x2000c598

08019980 <destroy_topic>:
 8019980:	b538      	push	{r3, r4, r5, lr}
 8019982:	6985      	ldr	r5, [r0, #24]
 8019984:	b1d5      	cbz	r5, 80199bc <destroy_topic+0x3c>
 8019986:	4604      	mov	r4, r0
 8019988:	6928      	ldr	r0, [r5, #16]
 801998a:	6922      	ldr	r2, [r4, #16]
 801998c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019990:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019994:	6819      	ldr	r1, [r3, #0]
 8019996:	f7f8 ff93 	bl	80128c0 <uxr_buffer_delete_entity>
 801999a:	4602      	mov	r2, r0
 801999c:	6928      	ldr	r0, [r5, #16]
 801999e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80199a2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80199a6:	f7f7 fda5 	bl	80114f4 <run_xrce_session>
 80199aa:	2800      	cmp	r0, #0
 80199ac:	4620      	mov	r0, r4
 80199ae:	bf14      	ite	ne
 80199b0:	2400      	movne	r4, #0
 80199b2:	2402      	moveq	r4, #2
 80199b4:	f7f7 fc9c 	bl	80112f0 <rmw_uxrce_fini_topic_memory>
 80199b8:	4620      	mov	r0, r4
 80199ba:	bd38      	pop	{r3, r4, r5, pc}
 80199bc:	2401      	movs	r4, #1
 80199be:	4620      	mov	r0, r4
 80199c0:	bd38      	pop	{r3, r4, r5, pc}
 80199c2:	bf00      	nop

080199c4 <rmw_take_with_info>:
 80199c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199c6:	4604      	mov	r4, r0
 80199c8:	6800      	ldr	r0, [r0, #0]
 80199ca:	b089      	sub	sp, #36	@ 0x24
 80199cc:	460f      	mov	r7, r1
 80199ce:	4615      	mov	r5, r2
 80199d0:	b128      	cbz	r0, 80199de <rmw_take_with_info+0x1a>
 80199d2:	4b24      	ldr	r3, [pc, #144]	@ (8019a64 <rmw_take_with_info+0xa0>)
 80199d4:	6819      	ldr	r1, [r3, #0]
 80199d6:	f7e6 fc23 	bl	8000220 <strcmp>
 80199da:	2800      	cmp	r0, #0
 80199dc:	d13e      	bne.n	8019a5c <rmw_take_with_info+0x98>
 80199de:	b305      	cbz	r5, 8019a22 <rmw_take_with_info+0x5e>
 80199e0:	6864      	ldr	r4, [r4, #4]
 80199e2:	2300      	movs	r3, #0
 80199e4:	702b      	strb	r3, [r5, #0]
 80199e6:	f7f7 fd07 	bl	80113f8 <rmw_uxrce_clean_expired_static_input_buffer>
 80199ea:	4620      	mov	r0, r4
 80199ec:	f7f7 fcdc 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80199f0:	4606      	mov	r6, r0
 80199f2:	b1f0      	cbz	r0, 8019a32 <rmw_take_with_info+0x6e>
 80199f4:	6881      	ldr	r1, [r0, #8]
 80199f6:	4668      	mov	r0, sp
 80199f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80199fc:	3110      	adds	r1, #16
 80199fe:	f7f3 fc9b 	bl	800d338 <ucdr_init_buffer>
 8019a02:	69a3      	ldr	r3, [r4, #24]
 8019a04:	4639      	mov	r1, r7
 8019a06:	68db      	ldr	r3, [r3, #12]
 8019a08:	4668      	mov	r0, sp
 8019a0a:	4798      	blx	r3
 8019a0c:	4631      	mov	r1, r6
 8019a0e:	4604      	mov	r4, r0
 8019a10:	4815      	ldr	r0, [pc, #84]	@ (8019a68 <rmw_take_with_info+0xa4>)
 8019a12:	f7ff ff29 	bl	8019868 <put_memory>
 8019a16:	702c      	strb	r4, [r5, #0]
 8019a18:	f084 0001 	eor.w	r0, r4, #1
 8019a1c:	b2c0      	uxtb	r0, r0
 8019a1e:	b009      	add	sp, #36	@ 0x24
 8019a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a22:	6864      	ldr	r4, [r4, #4]
 8019a24:	f7f7 fce8 	bl	80113f8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019a28:	4620      	mov	r0, r4
 8019a2a:	f7f7 fcbd 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019a2e:	4605      	mov	r5, r0
 8019a30:	b910      	cbnz	r0, 8019a38 <rmw_take_with_info+0x74>
 8019a32:	2001      	movs	r0, #1
 8019a34:	b009      	add	sp, #36	@ 0x24
 8019a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a38:	68a9      	ldr	r1, [r5, #8]
 8019a3a:	4668      	mov	r0, sp
 8019a3c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019a40:	3110      	adds	r1, #16
 8019a42:	f7f3 fc79 	bl	800d338 <ucdr_init_buffer>
 8019a46:	69a3      	ldr	r3, [r4, #24]
 8019a48:	4639      	mov	r1, r7
 8019a4a:	68db      	ldr	r3, [r3, #12]
 8019a4c:	4668      	mov	r0, sp
 8019a4e:	4798      	blx	r3
 8019a50:	4629      	mov	r1, r5
 8019a52:	4604      	mov	r4, r0
 8019a54:	4804      	ldr	r0, [pc, #16]	@ (8019a68 <rmw_take_with_info+0xa4>)
 8019a56:	f7ff ff07 	bl	8019868 <put_memory>
 8019a5a:	e7dd      	b.n	8019a18 <rmw_take_with_info+0x54>
 8019a5c:	200c      	movs	r0, #12
 8019a5e:	b009      	add	sp, #36	@ 0x24
 8019a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a62:	bf00      	nop
 8019a64:	0801f430 	.word	0x0801f430
 8019a68:	2000c464 	.word	0x2000c464

08019a6c <rmw_trigger_guard_condition>:
 8019a6c:	b160      	cbz	r0, 8019a88 <rmw_trigger_guard_condition+0x1c>
 8019a6e:	b510      	push	{r4, lr}
 8019a70:	4604      	mov	r4, r0
 8019a72:	6800      	ldr	r0, [r0, #0]
 8019a74:	f7f7 fe58 	bl	8011728 <is_uxrce_rmw_identifier_valid>
 8019a78:	b908      	cbnz	r0, 8019a7e <rmw_trigger_guard_condition+0x12>
 8019a7a:	2001      	movs	r0, #1
 8019a7c:	bd10      	pop	{r4, pc}
 8019a7e:	6863      	ldr	r3, [r4, #4]
 8019a80:	2201      	movs	r2, #1
 8019a82:	741a      	strb	r2, [r3, #16]
 8019a84:	2000      	movs	r0, #0
 8019a86:	bd10      	pop	{r4, pc}
 8019a88:	2001      	movs	r0, #1
 8019a8a:	4770      	bx	lr

08019a8c <rmw_wait>:
 8019a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a90:	b089      	sub	sp, #36	@ 0x24
 8019a92:	4605      	mov	r5, r0
 8019a94:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019a96:	460e      	mov	r6, r1
 8019a98:	4698      	mov	r8, r3
 8019a9a:	4691      	mov	r9, r2
 8019a9c:	2a00      	cmp	r2, #0
 8019a9e:	f000 810a 	beq.w	8019cb6 <rmw_wait+0x22a>
 8019aa2:	b16c      	cbz	r4, 8019ac0 <rmw_wait+0x34>
 8019aa4:	4bae      	ldr	r3, [pc, #696]	@ (8019d60 <rmw_wait+0x2d4>)
 8019aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019aa8:	af04      	add	r7, sp, #16
 8019aaa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019aae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019ab2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019ab6:	f7ff fd53 	bl	8019560 <rmw_time_equal>
 8019aba:	2800      	cmp	r0, #0
 8019abc:	f000 8127 	beq.w	8019d0e <rmw_wait+0x282>
 8019ac0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019ac4:	f7f7 fc98 	bl	80113f8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019ac8:	4ba6      	ldr	r3, [pc, #664]	@ (8019d64 <rmw_wait+0x2d8>)
 8019aca:	681c      	ldr	r4, [r3, #0]
 8019acc:	b14c      	cbz	r4, 8019ae2 <rmw_wait+0x56>
 8019ace:	4623      	mov	r3, r4
 8019ad0:	2100      	movs	r1, #0
 8019ad2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019ad6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019ada:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d1f7      	bne.n	8019ad2 <rmw_wait+0x46>
 8019ae2:	f1b9 0f00 	cmp.w	r9, #0
 8019ae6:	d011      	beq.n	8019b0c <rmw_wait+0x80>
 8019ae8:	f8d9 1000 	ldr.w	r1, [r9]
 8019aec:	b171      	cbz	r1, 8019b0c <rmw_wait+0x80>
 8019aee:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019af2:	2300      	movs	r3, #0
 8019af4:	2001      	movs	r0, #1
 8019af6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019afa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019afc:	6912      	ldr	r2, [r2, #16]
 8019afe:	3301      	adds	r3, #1
 8019b00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019b04:	4299      	cmp	r1, r3
 8019b06:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019b0a:	d1f4      	bne.n	8019af6 <rmw_wait+0x6a>
 8019b0c:	f1b8 0f00 	cmp.w	r8, #0
 8019b10:	d011      	beq.n	8019b36 <rmw_wait+0xaa>
 8019b12:	f8d8 1000 	ldr.w	r1, [r8]
 8019b16:	b171      	cbz	r1, 8019b36 <rmw_wait+0xaa>
 8019b18:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	2001      	movs	r0, #1
 8019b20:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019b24:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019b26:	6912      	ldr	r2, [r2, #16]
 8019b28:	3301      	adds	r3, #1
 8019b2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019b2e:	4299      	cmp	r1, r3
 8019b30:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019b34:	d1f4      	bne.n	8019b20 <rmw_wait+0x94>
 8019b36:	b185      	cbz	r5, 8019b5a <rmw_wait+0xce>
 8019b38:	6829      	ldr	r1, [r5, #0]
 8019b3a:	b171      	cbz	r1, 8019b5a <rmw_wait+0xce>
 8019b3c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019b40:	2300      	movs	r3, #0
 8019b42:	2001      	movs	r0, #1
 8019b44:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019b48:	6a12      	ldr	r2, [r2, #32]
 8019b4a:	6912      	ldr	r2, [r2, #16]
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019b52:	4299      	cmp	r1, r3
 8019b54:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019b58:	d1f4      	bne.n	8019b44 <rmw_wait+0xb8>
 8019b5a:	b34c      	cbz	r4, 8019bb0 <rmw_wait+0x124>
 8019b5c:	4622      	mov	r2, r4
 8019b5e:	2300      	movs	r3, #0
 8019b60:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019b64:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019b68:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019b6c:	440b      	add	r3, r1
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	2a00      	cmp	r2, #0
 8019b72:	d1f5      	bne.n	8019b60 <rmw_wait+0xd4>
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	f000 8084 	beq.w	8019c82 <rmw_wait+0x1f6>
 8019b7a:	1c7a      	adds	r2, r7, #1
 8019b7c:	d00d      	beq.n	8019b9a <rmw_wait+0x10e>
 8019b7e:	ee07 7a90 	vmov	s15, r7
 8019b82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019b86:	ee07 3a90 	vmov	s15, r3
 8019b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019b92:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019b96:	ee17 7a90 	vmov	r7, s15
 8019b9a:	68a0      	ldr	r0, [r4, #8]
 8019b9c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019ba0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	f040 8090 	bne.w	8019cca <rmw_wait+0x23e>
 8019baa:	6864      	ldr	r4, [r4, #4]
 8019bac:	2c00      	cmp	r4, #0
 8019bae:	d1f4      	bne.n	8019b9a <rmw_wait+0x10e>
 8019bb0:	f1b9 0f00 	cmp.w	r9, #0
 8019bb4:	f000 80bc 	beq.w	8019d30 <rmw_wait+0x2a4>
 8019bb8:	f8d9 7000 	ldr.w	r7, [r9]
 8019bbc:	2f00      	cmp	r7, #0
 8019bbe:	f000 808e 	beq.w	8019cde <rmw_wait+0x252>
 8019bc2:	2400      	movs	r4, #0
 8019bc4:	4627      	mov	r7, r4
 8019bc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019bca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019bce:	f7f7 fbeb 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019bd2:	2800      	cmp	r0, #0
 8019bd4:	d05f      	beq.n	8019c96 <rmw_wait+0x20a>
 8019bd6:	f8d9 3000 	ldr.w	r3, [r9]
 8019bda:	3401      	adds	r4, #1
 8019bdc:	42a3      	cmp	r3, r4
 8019bde:	f04f 0701 	mov.w	r7, #1
 8019be2:	d8f0      	bhi.n	8019bc6 <rmw_wait+0x13a>
 8019be4:	f1b8 0f00 	cmp.w	r8, #0
 8019be8:	d012      	beq.n	8019c10 <rmw_wait+0x184>
 8019bea:	f8d8 3000 	ldr.w	r3, [r8]
 8019bee:	b17b      	cbz	r3, 8019c10 <rmw_wait+0x184>
 8019bf0:	2400      	movs	r4, #0
 8019bf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019bf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019bfa:	f7f7 fbd5 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	d051      	beq.n	8019ca6 <rmw_wait+0x21a>
 8019c02:	f8d8 3000 	ldr.w	r3, [r8]
 8019c06:	3401      	adds	r4, #1
 8019c08:	42a3      	cmp	r3, r4
 8019c0a:	f04f 0701 	mov.w	r7, #1
 8019c0e:	d8f0      	bhi.n	8019bf2 <rmw_wait+0x166>
 8019c10:	b1dd      	cbz	r5, 8019c4a <rmw_wait+0x1be>
 8019c12:	682b      	ldr	r3, [r5, #0]
 8019c14:	b1cb      	cbz	r3, 8019c4a <rmw_wait+0x1be>
 8019c16:	2400      	movs	r4, #0
 8019c18:	686b      	ldr	r3, [r5, #4]
 8019c1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019c1e:	f7f7 fbc3 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019c22:	b158      	cbz	r0, 8019c3c <rmw_wait+0x1b0>
 8019c24:	682b      	ldr	r3, [r5, #0]
 8019c26:	3401      	adds	r4, #1
 8019c28:	42a3      	cmp	r3, r4
 8019c2a:	d969      	bls.n	8019d00 <rmw_wait+0x274>
 8019c2c:	686b      	ldr	r3, [r5, #4]
 8019c2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019c32:	2701      	movs	r7, #1
 8019c34:	f7f7 fbb8 	bl	80113a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	d1f3      	bne.n	8019c24 <rmw_wait+0x198>
 8019c3c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019c40:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019c44:	3401      	adds	r4, #1
 8019c46:	42a3      	cmp	r3, r4
 8019c48:	d8e6      	bhi.n	8019c18 <rmw_wait+0x18c>
 8019c4a:	b1a6      	cbz	r6, 8019c76 <rmw_wait+0x1ea>
 8019c4c:	6834      	ldr	r4, [r6, #0]
 8019c4e:	b194      	cbz	r4, 8019c76 <rmw_wait+0x1ea>
 8019c50:	2300      	movs	r3, #0
 8019c52:	461d      	mov	r5, r3
 8019c54:	e004      	b.n	8019c60 <rmw_wait+0x1d4>
 8019c56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8019c5a:	3301      	adds	r3, #1
 8019c5c:	42a3      	cmp	r3, r4
 8019c5e:	d00a      	beq.n	8019c76 <rmw_wait+0x1ea>
 8019c60:	6870      	ldr	r0, [r6, #4]
 8019c62:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019c66:	7c0a      	ldrb	r2, [r1, #16]
 8019c68:	2a00      	cmp	r2, #0
 8019c6a:	d0f4      	beq.n	8019c56 <rmw_wait+0x1ca>
 8019c6c:	3301      	adds	r3, #1
 8019c6e:	42a3      	cmp	r3, r4
 8019c70:	740d      	strb	r5, [r1, #16]
 8019c72:	4617      	mov	r7, r2
 8019c74:	d1f4      	bne.n	8019c60 <rmw_wait+0x1d4>
 8019c76:	2f00      	cmp	r7, #0
 8019c78:	d03e      	beq.n	8019cf8 <rmw_wait+0x26c>
 8019c7a:	2000      	movs	r0, #0
 8019c7c:	b009      	add	sp, #36	@ 0x24
 8019c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c82:	68a0      	ldr	r0, [r4, #8]
 8019c84:	2100      	movs	r1, #0
 8019c86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019c8a:	f7f9 ff69 	bl	8013b60 <uxr_run_session_timeout>
 8019c8e:	6864      	ldr	r4, [r4, #4]
 8019c90:	2c00      	cmp	r4, #0
 8019c92:	d1f6      	bne.n	8019c82 <rmw_wait+0x1f6>
 8019c94:	e78c      	b.n	8019bb0 <rmw_wait+0x124>
 8019c96:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019c9a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019c9e:	3401      	adds	r4, #1
 8019ca0:	42a3      	cmp	r3, r4
 8019ca2:	d890      	bhi.n	8019bc6 <rmw_wait+0x13a>
 8019ca4:	e79e      	b.n	8019be4 <rmw_wait+0x158>
 8019ca6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019caa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019cae:	3401      	adds	r4, #1
 8019cb0:	429c      	cmp	r4, r3
 8019cb2:	d39e      	bcc.n	8019bf2 <rmw_wait+0x166>
 8019cb4:	e7ac      	b.n	8019c10 <rmw_wait+0x184>
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	f47f aef3 	bne.w	8019aa2 <rmw_wait+0x16>
 8019cbc:	2800      	cmp	r0, #0
 8019cbe:	f47f aef0 	bne.w	8019aa2 <rmw_wait+0x16>
 8019cc2:	2900      	cmp	r1, #0
 8019cc4:	f47f aeed 	bne.w	8019aa2 <rmw_wait+0x16>
 8019cc8:	e7d7      	b.n	8019c7a <rmw_wait+0x1ee>
 8019cca:	4639      	mov	r1, r7
 8019ccc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019cd0:	f7f9 ff60 	bl	8013b94 <uxr_run_session_until_data>
 8019cd4:	6864      	ldr	r4, [r4, #4]
 8019cd6:	2c00      	cmp	r4, #0
 8019cd8:	f47f af5f 	bne.w	8019b9a <rmw_wait+0x10e>
 8019cdc:	e768      	b.n	8019bb0 <rmw_wait+0x124>
 8019cde:	f1b8 0f00 	cmp.w	r8, #0
 8019ce2:	d032      	beq.n	8019d4a <rmw_wait+0x2be>
 8019ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d181      	bne.n	8019bf0 <rmw_wait+0x164>
 8019cec:	461f      	mov	r7, r3
 8019cee:	2d00      	cmp	r5, #0
 8019cf0:	d18f      	bne.n	8019c12 <rmw_wait+0x186>
 8019cf2:	462f      	mov	r7, r5
 8019cf4:	2e00      	cmp	r6, #0
 8019cf6:	d1a9      	bne.n	8019c4c <rmw_wait+0x1c0>
 8019cf8:	2002      	movs	r0, #2
 8019cfa:	b009      	add	sp, #36	@ 0x24
 8019cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d00:	2e00      	cmp	r6, #0
 8019d02:	d0ba      	beq.n	8019c7a <rmw_wait+0x1ee>
 8019d04:	6834      	ldr	r4, [r6, #0]
 8019d06:	2701      	movs	r7, #1
 8019d08:	2c00      	cmp	r4, #0
 8019d0a:	d1a1      	bne.n	8019c50 <rmw_wait+0x1c4>
 8019d0c:	e7b5      	b.n	8019c7a <rmw_wait+0x1ee>
 8019d0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019d12:	f7ff fc79 	bl	8019608 <rmw_time_total_nsec>
 8019d16:	2300      	movs	r3, #0
 8019d18:	4a13      	ldr	r2, [pc, #76]	@ (8019d68 <rmw_wait+0x2dc>)
 8019d1a:	f7e6 fff5 	bl	8000d08 <__aeabi_uldivmod>
 8019d1e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8019d22:	f171 0300 	sbcs.w	r3, r1, #0
 8019d26:	4607      	mov	r7, r0
 8019d28:	bfa8      	it	ge
 8019d2a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8019d2e:	e6c9      	b.n	8019ac4 <rmw_wait+0x38>
 8019d30:	f1b8 0f00 	cmp.w	r8, #0
 8019d34:	d009      	beq.n	8019d4a <rmw_wait+0x2be>
 8019d36:	f8d8 3000 	ldr.w	r3, [r8]
 8019d3a:	464f      	mov	r7, r9
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	f47f af57 	bne.w	8019bf0 <rmw_wait+0x164>
 8019d42:	2d00      	cmp	r5, #0
 8019d44:	f47f af65 	bne.w	8019c12 <rmw_wait+0x186>
 8019d48:	e7d3      	b.n	8019cf2 <rmw_wait+0x266>
 8019d4a:	b17d      	cbz	r5, 8019d6c <rmw_wait+0x2e0>
 8019d4c:	682b      	ldr	r3, [r5, #0]
 8019d4e:	4647      	mov	r7, r8
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	f47f af60 	bne.w	8019c16 <rmw_wait+0x18a>
 8019d56:	2e00      	cmp	r6, #0
 8019d58:	f47f af78 	bne.w	8019c4c <rmw_wait+0x1c0>
 8019d5c:	e7cc      	b.n	8019cf8 <rmw_wait+0x26c>
 8019d5e:	bf00      	nop
 8019d60:	0801d930 	.word	0x0801d930
 8019d64:	2000c454 	.word	0x2000c454
 8019d68:	000f4240 	.word	0x000f4240
 8019d6c:	2e00      	cmp	r6, #0
 8019d6e:	d0c3      	beq.n	8019cf8 <rmw_wait+0x26c>
 8019d70:	6834      	ldr	r4, [r6, #0]
 8019d72:	462f      	mov	r7, r5
 8019d74:	2c00      	cmp	r4, #0
 8019d76:	f47f af6b 	bne.w	8019c50 <rmw_wait+0x1c4>
 8019d7a:	e7bd      	b.n	8019cf8 <rmw_wait+0x26c>

08019d7c <rmw_create_wait_set>:
 8019d7c:	b508      	push	{r3, lr}
 8019d7e:	4803      	ldr	r0, [pc, #12]	@ (8019d8c <rmw_create_wait_set+0x10>)
 8019d80:	f7ff fd62 	bl	8019848 <get_memory>
 8019d84:	b108      	cbz	r0, 8019d8a <rmw_create_wait_set+0xe>
 8019d86:	6880      	ldr	r0, [r0, #8]
 8019d88:	3010      	adds	r0, #16
 8019d8a:	bd08      	pop	{r3, pc}
 8019d8c:	2000c494 	.word	0x2000c494

08019d90 <rmw_destroy_wait_set>:
 8019d90:	b508      	push	{r3, lr}
 8019d92:	4b08      	ldr	r3, [pc, #32]	@ (8019db4 <rmw_destroy_wait_set+0x24>)
 8019d94:	6819      	ldr	r1, [r3, #0]
 8019d96:	b911      	cbnz	r1, 8019d9e <rmw_destroy_wait_set+0xe>
 8019d98:	e00a      	b.n	8019db0 <rmw_destroy_wait_set+0x20>
 8019d9a:	6849      	ldr	r1, [r1, #4]
 8019d9c:	b141      	cbz	r1, 8019db0 <rmw_destroy_wait_set+0x20>
 8019d9e:	688b      	ldr	r3, [r1, #8]
 8019da0:	3310      	adds	r3, #16
 8019da2:	4298      	cmp	r0, r3
 8019da4:	d1f9      	bne.n	8019d9a <rmw_destroy_wait_set+0xa>
 8019da6:	4803      	ldr	r0, [pc, #12]	@ (8019db4 <rmw_destroy_wait_set+0x24>)
 8019da8:	f7ff fd5e 	bl	8019868 <put_memory>
 8019dac:	2000      	movs	r0, #0
 8019dae:	bd08      	pop	{r3, pc}
 8019db0:	2001      	movs	r0, #1
 8019db2:	bd08      	pop	{r3, pc}
 8019db4:	2000c494 	.word	0x2000c494

08019db8 <sensor_msgs__msg__Imu__init>:
 8019db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dbc:	4605      	mov	r5, r0
 8019dbe:	b3c0      	cbz	r0, 8019e32 <sensor_msgs__msg__Imu__init+0x7a>
 8019dc0:	f000 f86a 	bl	8019e98 <std_msgs__msg__Header__init>
 8019dc4:	4604      	mov	r4, r0
 8019dc6:	b310      	cbz	r0, 8019e0e <sensor_msgs__msg__Imu__init+0x56>
 8019dc8:	f105 0618 	add.w	r6, r5, #24
 8019dcc:	4630      	mov	r0, r6
 8019dce:	f000 f8b7 	bl	8019f40 <geometry_msgs__msg__Quaternion__init>
 8019dd2:	4604      	mov	r4, r0
 8019dd4:	2800      	cmp	r0, #0
 8019dd6:	d040      	beq.n	8019e5a <sensor_msgs__msg__Imu__init+0xa2>
 8019dd8:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8019ddc:	4638      	mov	r0, r7
 8019dde:	f7f8 fa55 	bl	801228c <geometry_msgs__msg__Vector3__init>
 8019de2:	4604      	mov	r4, r0
 8019de4:	b348      	cbz	r0, 8019e3a <sensor_msgs__msg__Imu__init+0x82>
 8019de6:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8019dea:	4640      	mov	r0, r8
 8019dec:	f7f8 fa4e 	bl	801228c <geometry_msgs__msg__Vector3__init>
 8019df0:	4604      	mov	r4, r0
 8019df2:	b9d8      	cbnz	r0, 8019e2c <sensor_msgs__msg__Imu__init+0x74>
 8019df4:	4628      	mov	r0, r5
 8019df6:	f000 f873 	bl	8019ee0 <std_msgs__msg__Header__fini>
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	f000 f8b4 	bl	8019f68 <geometry_msgs__msg__Quaternion__fini>
 8019e00:	4638      	mov	r0, r7
 8019e02:	f7f8 fa47 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e06:	4640      	mov	r0, r8
 8019e08:	f7f8 fa44 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e0c:	e00e      	b.n	8019e2c <sensor_msgs__msg__Imu__init+0x74>
 8019e0e:	4628      	mov	r0, r5
 8019e10:	f000 f866 	bl	8019ee0 <std_msgs__msg__Header__fini>
 8019e14:	f105 0018 	add.w	r0, r5, #24
 8019e18:	f000 f8a6 	bl	8019f68 <geometry_msgs__msg__Quaternion__fini>
 8019e1c:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8019e20:	f7f8 fa38 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e24:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8019e28:	f7f8 fa34 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e2c:	4620      	mov	r0, r4
 8019e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e32:	4604      	mov	r4, r0
 8019e34:	4620      	mov	r0, r4
 8019e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e3a:	4628      	mov	r0, r5
 8019e3c:	f000 f850 	bl	8019ee0 <std_msgs__msg__Header__fini>
 8019e40:	4630      	mov	r0, r6
 8019e42:	f000 f891 	bl	8019f68 <geometry_msgs__msg__Quaternion__fini>
 8019e46:	4638      	mov	r0, r7
 8019e48:	f7f8 fa24 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e4c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8019e50:	f7f8 fa20 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e54:	4620      	mov	r0, r4
 8019e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e5a:	4628      	mov	r0, r5
 8019e5c:	f000 f840 	bl	8019ee0 <std_msgs__msg__Header__fini>
 8019e60:	4630      	mov	r0, r6
 8019e62:	e7d9      	b.n	8019e18 <sensor_msgs__msg__Imu__init+0x60>

08019e64 <sensor_msgs__msg__Imu__fini>:
 8019e64:	b188      	cbz	r0, 8019e8a <sensor_msgs__msg__Imu__fini+0x26>
 8019e66:	b510      	push	{r4, lr}
 8019e68:	4604      	mov	r4, r0
 8019e6a:	f000 f839 	bl	8019ee0 <std_msgs__msg__Header__fini>
 8019e6e:	f104 0018 	add.w	r0, r4, #24
 8019e72:	f000 f879 	bl	8019f68 <geometry_msgs__msg__Quaternion__fini>
 8019e76:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8019e7a:	f7f8 fa0b 	bl	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e7e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e86:	f7f8 ba05 	b.w	8012294 <geometry_msgs__msg__Vector3__fini>
 8019e8a:	4770      	bx	lr

08019e8c <std_msgs__msg__Bool__init>:
 8019e8c:	3800      	subs	r0, #0
 8019e8e:	bf18      	it	ne
 8019e90:	2001      	movne	r0, #1
 8019e92:	4770      	bx	lr

08019e94 <std_msgs__msg__Bool__fini>:
 8019e94:	4770      	bx	lr
 8019e96:	bf00      	nop

08019e98 <std_msgs__msg__Header__init>:
 8019e98:	b570      	push	{r4, r5, r6, lr}
 8019e9a:	4605      	mov	r5, r0
 8019e9c:	b1a8      	cbz	r0, 8019eca <std_msgs__msg__Header__init+0x32>
 8019e9e:	f000 f849 	bl	8019f34 <builtin_interfaces__msg__Time__init>
 8019ea2:	4604      	mov	r4, r0
 8019ea4:	b140      	cbz	r0, 8019eb8 <std_msgs__msg__Header__init+0x20>
 8019ea6:	f105 0608 	add.w	r6, r5, #8
 8019eaa:	4630      	mov	r0, r6
 8019eac:	f000 fe3a 	bl	801ab24 <rosidl_runtime_c__String__init>
 8019eb0:	4604      	mov	r4, r0
 8019eb2:	b168      	cbz	r0, 8019ed0 <std_msgs__msg__Header__init+0x38>
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	bd70      	pop	{r4, r5, r6, pc}
 8019eb8:	4628      	mov	r0, r5
 8019eba:	f000 f83f 	bl	8019f3c <builtin_interfaces__msg__Time__fini>
 8019ebe:	f105 0008 	add.w	r0, r5, #8
 8019ec2:	f000 fe45 	bl	801ab50 <rosidl_runtime_c__String__fini>
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	bd70      	pop	{r4, r5, r6, pc}
 8019eca:	4604      	mov	r4, r0
 8019ecc:	4620      	mov	r0, r4
 8019ece:	bd70      	pop	{r4, r5, r6, pc}
 8019ed0:	4628      	mov	r0, r5
 8019ed2:	f000 f833 	bl	8019f3c <builtin_interfaces__msg__Time__fini>
 8019ed6:	4630      	mov	r0, r6
 8019ed8:	f000 fe3a 	bl	801ab50 <rosidl_runtime_c__String__fini>
 8019edc:	e7ea      	b.n	8019eb4 <std_msgs__msg__Header__init+0x1c>
 8019ede:	bf00      	nop

08019ee0 <std_msgs__msg__Header__fini>:
 8019ee0:	b148      	cbz	r0, 8019ef6 <std_msgs__msg__Header__fini+0x16>
 8019ee2:	b510      	push	{r4, lr}
 8019ee4:	4604      	mov	r4, r0
 8019ee6:	f000 f829 	bl	8019f3c <builtin_interfaces__msg__Time__fini>
 8019eea:	f104 0008 	add.w	r0, r4, #8
 8019eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ef2:	f000 be2d 	b.w	801ab50 <rosidl_runtime_c__String__fini>
 8019ef6:	4770      	bx	lr

08019ef8 <std_srvs__srv__SetBool_Request__init>:
 8019ef8:	3800      	subs	r0, #0
 8019efa:	bf18      	it	ne
 8019efc:	2001      	movne	r0, #1
 8019efe:	4770      	bx	lr

08019f00 <std_srvs__srv__SetBool_Request__fini>:
 8019f00:	4770      	bx	lr
 8019f02:	bf00      	nop

08019f04 <std_srvs__srv__SetBool_Response__init>:
 8019f04:	b538      	push	{r3, r4, r5, lr}
 8019f06:	b138      	cbz	r0, 8019f18 <std_srvs__srv__SetBool_Response__init+0x14>
 8019f08:	1d05      	adds	r5, r0, #4
 8019f0a:	4628      	mov	r0, r5
 8019f0c:	f000 fe0a 	bl	801ab24 <rosidl_runtime_c__String__init>
 8019f10:	4604      	mov	r4, r0
 8019f12:	b120      	cbz	r0, 8019f1e <std_srvs__srv__SetBool_Response__init+0x1a>
 8019f14:	4620      	mov	r0, r4
 8019f16:	bd38      	pop	{r3, r4, r5, pc}
 8019f18:	4604      	mov	r4, r0
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	bd38      	pop	{r3, r4, r5, pc}
 8019f1e:	4628      	mov	r0, r5
 8019f20:	f000 fe16 	bl	801ab50 <rosidl_runtime_c__String__fini>
 8019f24:	4620      	mov	r0, r4
 8019f26:	bd38      	pop	{r3, r4, r5, pc}

08019f28 <std_srvs__srv__SetBool_Response__fini>:
 8019f28:	b110      	cbz	r0, 8019f30 <std_srvs__srv__SetBool_Response__fini+0x8>
 8019f2a:	3004      	adds	r0, #4
 8019f2c:	f000 be10 	b.w	801ab50 <rosidl_runtime_c__String__fini>
 8019f30:	4770      	bx	lr
 8019f32:	bf00      	nop

08019f34 <builtin_interfaces__msg__Time__init>:
 8019f34:	3800      	subs	r0, #0
 8019f36:	bf18      	it	ne
 8019f38:	2001      	movne	r0, #1
 8019f3a:	4770      	bx	lr

08019f3c <builtin_interfaces__msg__Time__fini>:
 8019f3c:	4770      	bx	lr
 8019f3e:	bf00      	nop

08019f40 <geometry_msgs__msg__Quaternion__init>:
 8019f40:	b160      	cbz	r0, 8019f5c <geometry_msgs__msg__Quaternion__init+0x1c>
 8019f42:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8019f60 <geometry_msgs__msg__Quaternion__init+0x20>
 8019f46:	2200      	movs	r2, #0
 8019f48:	2300      	movs	r3, #0
 8019f4a:	e9c0 2300 	strd	r2, r3, [r0]
 8019f4e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019f52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019f56:	ed80 7b06 	vstr	d7, [r0, #24]
 8019f5a:	2001      	movs	r0, #1
 8019f5c:	4770      	bx	lr
 8019f5e:	bf00      	nop
 8019f60:	00000000 	.word	0x00000000
 8019f64:	3ff00000 	.word	0x3ff00000

08019f68 <geometry_msgs__msg__Quaternion__fini>:
 8019f68:	4770      	bx	lr
 8019f6a:	bf00      	nop

08019f6c <ucdr_serialize_string>:
 8019f6c:	b510      	push	{r4, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	4604      	mov	r4, r0
 8019f72:	4608      	mov	r0, r1
 8019f74:	9101      	str	r1, [sp, #4]
 8019f76:	f7e6 f95d 	bl	8000234 <strlen>
 8019f7a:	9901      	ldr	r1, [sp, #4]
 8019f7c:	1c42      	adds	r2, r0, #1
 8019f7e:	4620      	mov	r0, r4
 8019f80:	b002      	add	sp, #8
 8019f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f86:	f7f8 bc43 	b.w	8012810 <ucdr_serialize_sequence_char>
 8019f8a:	bf00      	nop

08019f8c <ucdr_deserialize_string>:
 8019f8c:	b500      	push	{lr}
 8019f8e:	b083      	sub	sp, #12
 8019f90:	ab01      	add	r3, sp, #4
 8019f92:	f7f8 fc4f 	bl	8012834 <ucdr_deserialize_sequence_char>
 8019f96:	b003      	add	sp, #12
 8019f98:	f85d fb04 	ldr.w	pc, [sp], #4

08019f9c <uxr_init_input_best_effort_stream>:
 8019f9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019fa0:	8003      	strh	r3, [r0, #0]
 8019fa2:	4770      	bx	lr

08019fa4 <uxr_reset_input_best_effort_stream>:
 8019fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019fa8:	8003      	strh	r3, [r0, #0]
 8019faa:	4770      	bx	lr

08019fac <uxr_receive_best_effort_message>:
 8019fac:	b538      	push	{r3, r4, r5, lr}
 8019fae:	4604      	mov	r4, r0
 8019fb0:	8800      	ldrh	r0, [r0, #0]
 8019fb2:	460d      	mov	r5, r1
 8019fb4:	f000 fd42 	bl	801aa3c <uxr_seq_num_cmp>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019fc0:	bfb8      	it	lt
 8019fc2:	8025      	strhlt	r5, [r4, #0]
 8019fc4:	bd38      	pop	{r3, r4, r5, pc}
 8019fc6:	bf00      	nop

08019fc8 <on_full_input_buffer>:
 8019fc8:	b570      	push	{r4, r5, r6, lr}
 8019fca:	4605      	mov	r5, r0
 8019fcc:	460c      	mov	r4, r1
 8019fce:	682b      	ldr	r3, [r5, #0]
 8019fd0:	6809      	ldr	r1, [r1, #0]
 8019fd2:	8920      	ldrh	r0, [r4, #8]
 8019fd4:	6862      	ldr	r2, [r4, #4]
 8019fd6:	fbb2 f2f0 	udiv	r2, r2, r0
 8019fda:	eba3 0c01 	sub.w	ip, r3, r1
 8019fde:	fbbc fcf2 	udiv	ip, ip, r2
 8019fe2:	f10c 0c01 	add.w	ip, ip, #1
 8019fe6:	fa1f f38c 	uxth.w	r3, ip
 8019fea:	fbb3 f6f0 	udiv	r6, r3, r0
 8019fee:	fb00 3316 	mls	r3, r0, r6, r3
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	fb02 f303 	mul.w	r3, r2, r3
 8019ff8:	1d18      	adds	r0, r3, #4
 8019ffa:	4408      	add	r0, r1
 8019ffc:	7d26      	ldrb	r6, [r4, #20]
 8019ffe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a002:	b116      	cbz	r6, 801a00a <on_full_input_buffer+0x42>
 801a004:	2600      	movs	r6, #0
 801a006:	f840 6c04 	str.w	r6, [r0, #-4]
 801a00a:	2a03      	cmp	r2, #3
 801a00c:	d801      	bhi.n	801a012 <on_full_input_buffer+0x4a>
 801a00e:	2001      	movs	r0, #1
 801a010:	bd70      	pop	{r4, r5, r6, pc}
 801a012:	3308      	adds	r3, #8
 801a014:	4419      	add	r1, r3
 801a016:	4628      	mov	r0, r5
 801a018:	692b      	ldr	r3, [r5, #16]
 801a01a:	3a04      	subs	r2, #4
 801a01c:	f7f3 f984 	bl	800d328 <ucdr_init_buffer_origin>
 801a020:	4628      	mov	r0, r5
 801a022:	4903      	ldr	r1, [pc, #12]	@ (801a030 <on_full_input_buffer+0x68>)
 801a024:	4622      	mov	r2, r4
 801a026:	f7f3 f95b 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 801a02a:	2000      	movs	r0, #0
 801a02c:	bd70      	pop	{r4, r5, r6, pc}
 801a02e:	bf00      	nop
 801a030:	08019fc9 	.word	0x08019fc9

0801a034 <uxr_init_input_reliable_stream>:
 801a034:	b500      	push	{lr}
 801a036:	e9c0 1200 	strd	r1, r2, [r0]
 801a03a:	f04f 0e00 	mov.w	lr, #0
 801a03e:	9a01      	ldr	r2, [sp, #4]
 801a040:	8103      	strh	r3, [r0, #8]
 801a042:	6102      	str	r2, [r0, #16]
 801a044:	f880 e014 	strb.w	lr, [r0, #20]
 801a048:	b1d3      	cbz	r3, 801a080 <uxr_init_input_reliable_stream+0x4c>
 801a04a:	f8c1 e000 	str.w	lr, [r1]
 801a04e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a052:	f1bc 0f01 	cmp.w	ip, #1
 801a056:	d913      	bls.n	801a080 <uxr_init_input_reliable_stream+0x4c>
 801a058:	2301      	movs	r3, #1
 801a05a:	fbb3 f1fc 	udiv	r1, r3, ip
 801a05e:	fb0c 3111 	mls	r1, ip, r1, r3
 801a062:	b289      	uxth	r1, r1
 801a064:	6842      	ldr	r2, [r0, #4]
 801a066:	fbb2 f2fc 	udiv	r2, r2, ip
 801a06a:	fb01 f202 	mul.w	r2, r1, r2
 801a06e:	6801      	ldr	r1, [r0, #0]
 801a070:	f841 e002 	str.w	lr, [r1, r2]
 801a074:	3301      	adds	r3, #1
 801a076:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	459c      	cmp	ip, r3
 801a07e:	d8ec      	bhi.n	801a05a <uxr_init_input_reliable_stream+0x26>
 801a080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a084:	60c3      	str	r3, [r0, #12]
 801a086:	f85d fb04 	ldr.w	pc, [sp], #4
 801a08a:	bf00      	nop

0801a08c <uxr_reset_input_reliable_stream>:
 801a08c:	8901      	ldrh	r1, [r0, #8]
 801a08e:	b1e9      	cbz	r1, 801a0cc <uxr_reset_input_reliable_stream+0x40>
 801a090:	f04f 0c00 	mov.w	ip, #0
 801a094:	b500      	push	{lr}
 801a096:	4663      	mov	r3, ip
 801a098:	46e6      	mov	lr, ip
 801a09a:	fbb3 f2f1 	udiv	r2, r3, r1
 801a09e:	fb01 3312 	mls	r3, r1, r2, r3
 801a0a2:	b29b      	uxth	r3, r3
 801a0a4:	6842      	ldr	r2, [r0, #4]
 801a0a6:	fbb2 f2f1 	udiv	r2, r2, r1
 801a0aa:	fb02 f303 	mul.w	r3, r2, r3
 801a0ae:	6802      	ldr	r2, [r0, #0]
 801a0b0:	f842 e003 	str.w	lr, [r2, r3]
 801a0b4:	f10c 0c01 	add.w	ip, ip, #1
 801a0b8:	8901      	ldrh	r1, [r0, #8]
 801a0ba:	fa1f f38c 	uxth.w	r3, ip
 801a0be:	4299      	cmp	r1, r3
 801a0c0:	d8eb      	bhi.n	801a09a <uxr_reset_input_reliable_stream+0xe>
 801a0c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a0c6:	60c3      	str	r3, [r0, #12]
 801a0c8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a0cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a0d0:	60c3      	str	r3, [r0, #12]
 801a0d2:	4770      	bx	lr

0801a0d4 <uxr_receive_reliable_message>:
 801a0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0d8:	4604      	mov	r4, r0
 801a0da:	460d      	mov	r5, r1
 801a0dc:	8901      	ldrh	r1, [r0, #8]
 801a0de:	8980      	ldrh	r0, [r0, #12]
 801a0e0:	4690      	mov	r8, r2
 801a0e2:	461f      	mov	r7, r3
 801a0e4:	f000 fca2 	bl	801aa2c <uxr_seq_num_add>
 801a0e8:	4629      	mov	r1, r5
 801a0ea:	4606      	mov	r6, r0
 801a0ec:	89a0      	ldrh	r0, [r4, #12]
 801a0ee:	f000 fca5 	bl	801aa3c <uxr_seq_num_cmp>
 801a0f2:	2800      	cmp	r0, #0
 801a0f4:	db0a      	blt.n	801a10c <uxr_receive_reliable_message+0x38>
 801a0f6:	2600      	movs	r6, #0
 801a0f8:	89e0      	ldrh	r0, [r4, #14]
 801a0fa:	4629      	mov	r1, r5
 801a0fc:	f000 fc9e 	bl	801aa3c <uxr_seq_num_cmp>
 801a100:	2800      	cmp	r0, #0
 801a102:	da00      	bge.n	801a106 <uxr_receive_reliable_message+0x32>
 801a104:	81e5      	strh	r5, [r4, #14]
 801a106:	4630      	mov	r0, r6
 801a108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a10c:	4630      	mov	r0, r6
 801a10e:	4629      	mov	r1, r5
 801a110:	f000 fc94 	bl	801aa3c <uxr_seq_num_cmp>
 801a114:	2800      	cmp	r0, #0
 801a116:	dbee      	blt.n	801a0f6 <uxr_receive_reliable_message+0x22>
 801a118:	6923      	ldr	r3, [r4, #16]
 801a11a:	4640      	mov	r0, r8
 801a11c:	4798      	blx	r3
 801a11e:	2101      	movs	r1, #1
 801a120:	4681      	mov	r9, r0
 801a122:	89a0      	ldrh	r0, [r4, #12]
 801a124:	f000 fc82 	bl	801aa2c <uxr_seq_num_add>
 801a128:	f1b9 0f00 	cmp.w	r9, #0
 801a12c:	d101      	bne.n	801a132 <uxr_receive_reliable_message+0x5e>
 801a12e:	4285      	cmp	r5, r0
 801a130:	d047      	beq.n	801a1c2 <uxr_receive_reliable_message+0xee>
 801a132:	8922      	ldrh	r2, [r4, #8]
 801a134:	fbb5 f0f2 	udiv	r0, r5, r2
 801a138:	fb02 5010 	mls	r0, r2, r0, r5
 801a13c:	b280      	uxth	r0, r0
 801a13e:	6863      	ldr	r3, [r4, #4]
 801a140:	fbb3 f3f2 	udiv	r3, r3, r2
 801a144:	fb00 f303 	mul.w	r3, r0, r3
 801a148:	6820      	ldr	r0, [r4, #0]
 801a14a:	3304      	adds	r3, #4
 801a14c:	4418      	add	r0, r3
 801a14e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d1cf      	bne.n	801a0f6 <uxr_receive_reliable_message+0x22>
 801a156:	4641      	mov	r1, r8
 801a158:	463a      	mov	r2, r7
 801a15a:	f001 faf4 	bl	801b746 <memcpy>
 801a15e:	8921      	ldrh	r1, [r4, #8]
 801a160:	fbb5 f2f1 	udiv	r2, r5, r1
 801a164:	fb01 5212 	mls	r2, r1, r2, r5
 801a168:	b292      	uxth	r2, r2
 801a16a:	6863      	ldr	r3, [r4, #4]
 801a16c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a170:	fb02 f303 	mul.w	r3, r2, r3
 801a174:	6822      	ldr	r2, [r4, #0]
 801a176:	50d7      	str	r7, [r2, r3]
 801a178:	9a08      	ldr	r2, [sp, #32]
 801a17a:	2301      	movs	r3, #1
 801a17c:	7013      	strb	r3, [r2, #0]
 801a17e:	f1b9 0f00 	cmp.w	r9, #0
 801a182:	d0b8      	beq.n	801a0f6 <uxr_receive_reliable_message+0x22>
 801a184:	89a6      	ldrh	r6, [r4, #12]
 801a186:	4630      	mov	r0, r6
 801a188:	2101      	movs	r1, #1
 801a18a:	f000 fc4f 	bl	801aa2c <uxr_seq_num_add>
 801a18e:	8922      	ldrh	r2, [r4, #8]
 801a190:	6863      	ldr	r3, [r4, #4]
 801a192:	fbb3 f3f2 	udiv	r3, r3, r2
 801a196:	4606      	mov	r6, r0
 801a198:	fbb0 f0f2 	udiv	r0, r0, r2
 801a19c:	fb02 6010 	mls	r0, r2, r0, r6
 801a1a0:	b280      	uxth	r0, r0
 801a1a2:	fb00 f303 	mul.w	r3, r0, r3
 801a1a6:	6820      	ldr	r0, [r4, #0]
 801a1a8:	3304      	adds	r3, #4
 801a1aa:	4418      	add	r0, r3
 801a1ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d0a0      	beq.n	801a0f6 <uxr_receive_reliable_message+0x22>
 801a1b4:	6923      	ldr	r3, [r4, #16]
 801a1b6:	4798      	blx	r3
 801a1b8:	2802      	cmp	r0, #2
 801a1ba:	d008      	beq.n	801a1ce <uxr_receive_reliable_message+0xfa>
 801a1bc:	2801      	cmp	r0, #1
 801a1be:	d0e2      	beq.n	801a186 <uxr_receive_reliable_message+0xb2>
 801a1c0:	e799      	b.n	801a0f6 <uxr_receive_reliable_message+0x22>
 801a1c2:	9b08      	ldr	r3, [sp, #32]
 801a1c4:	81a5      	strh	r5, [r4, #12]
 801a1c6:	2601      	movs	r6, #1
 801a1c8:	f883 9000 	strb.w	r9, [r3]
 801a1cc:	e794      	b.n	801a0f8 <uxr_receive_reliable_message+0x24>
 801a1ce:	2601      	movs	r6, #1
 801a1d0:	e792      	b.n	801a0f8 <uxr_receive_reliable_message+0x24>
 801a1d2:	bf00      	nop

0801a1d4 <uxr_next_input_reliable_buffer_available>:
 801a1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1d8:	4604      	mov	r4, r0
 801a1da:	460f      	mov	r7, r1
 801a1dc:	8980      	ldrh	r0, [r0, #12]
 801a1de:	2101      	movs	r1, #1
 801a1e0:	4690      	mov	r8, r2
 801a1e2:	f000 fc23 	bl	801aa2c <uxr_seq_num_add>
 801a1e6:	8922      	ldrh	r2, [r4, #8]
 801a1e8:	fbb0 f6f2 	udiv	r6, r0, r2
 801a1ec:	fb02 0616 	mls	r6, r2, r6, r0
 801a1f0:	b2b6      	uxth	r6, r6
 801a1f2:	6863      	ldr	r3, [r4, #4]
 801a1f4:	fbb3 f3f2 	udiv	r3, r3, r2
 801a1f8:	fb06 f303 	mul.w	r3, r6, r3
 801a1fc:	6826      	ldr	r6, [r4, #0]
 801a1fe:	3304      	adds	r3, #4
 801a200:	441e      	add	r6, r3
 801a202:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a206:	f1b9 0f00 	cmp.w	r9, #0
 801a20a:	d023      	beq.n	801a254 <uxr_next_input_reliable_buffer_available+0x80>
 801a20c:	6923      	ldr	r3, [r4, #16]
 801a20e:	4605      	mov	r5, r0
 801a210:	4630      	mov	r0, r6
 801a212:	4798      	blx	r3
 801a214:	4682      	mov	sl, r0
 801a216:	b300      	cbz	r0, 801a25a <uxr_next_input_reliable_buffer_available+0x86>
 801a218:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a21c:	2101      	movs	r1, #1
 801a21e:	4650      	mov	r0, sl
 801a220:	f000 fc04 	bl	801aa2c <uxr_seq_num_add>
 801a224:	8921      	ldrh	r1, [r4, #8]
 801a226:	fbb0 f2f1 	udiv	r2, r0, r1
 801a22a:	4682      	mov	sl, r0
 801a22c:	fb01 0212 	mls	r2, r1, r2, r0
 801a230:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a234:	b292      	uxth	r2, r2
 801a236:	fbb3 f3f1 	udiv	r3, r3, r1
 801a23a:	fb02 f303 	mul.w	r3, r2, r3
 801a23e:	3304      	adds	r3, #4
 801a240:	4418      	add	r0, r3
 801a242:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a246:	b12b      	cbz	r3, 801a254 <uxr_next_input_reliable_buffer_available+0x80>
 801a248:	6923      	ldr	r3, [r4, #16]
 801a24a:	4798      	blx	r3
 801a24c:	2802      	cmp	r0, #2
 801a24e:	d01b      	beq.n	801a288 <uxr_next_input_reliable_buffer_available+0xb4>
 801a250:	2801      	cmp	r0, #1
 801a252:	d0e3      	beq.n	801a21c <uxr_next_input_reliable_buffer_available+0x48>
 801a254:	2000      	movs	r0, #0
 801a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a25a:	464a      	mov	r2, r9
 801a25c:	4631      	mov	r1, r6
 801a25e:	4638      	mov	r0, r7
 801a260:	f7f3 f86a 	bl	800d338 <ucdr_init_buffer>
 801a264:	8921      	ldrh	r1, [r4, #8]
 801a266:	fbb5 f2f1 	udiv	r2, r5, r1
 801a26a:	fb01 5212 	mls	r2, r1, r2, r5
 801a26e:	b292      	uxth	r2, r2
 801a270:	6863      	ldr	r3, [r4, #4]
 801a272:	fbb3 f3f1 	udiv	r3, r3, r1
 801a276:	fb02 f303 	mul.w	r3, r2, r3
 801a27a:	6822      	ldr	r2, [r4, #0]
 801a27c:	f842 a003 	str.w	sl, [r2, r3]
 801a280:	2001      	movs	r0, #1
 801a282:	81a5      	strh	r5, [r4, #12]
 801a284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a288:	8920      	ldrh	r0, [r4, #8]
 801a28a:	fbb5 f3f0 	udiv	r3, r5, r0
 801a28e:	fb00 5513 	mls	r5, r0, r3, r5
 801a292:	b2ad      	uxth	r5, r5
 801a294:	6863      	ldr	r3, [r4, #4]
 801a296:	fbb3 f3f0 	udiv	r3, r3, r0
 801a29a:	fb03 f505 	mul.w	r5, r3, r5
 801a29e:	6823      	ldr	r3, [r4, #0]
 801a2a0:	2000      	movs	r0, #0
 801a2a2:	5158      	str	r0, [r3, r5]
 801a2a4:	eb06 0108 	add.w	r1, r6, r8
 801a2a8:	eba9 0208 	sub.w	r2, r9, r8
 801a2ac:	4638      	mov	r0, r7
 801a2ae:	f7f3 f843 	bl	800d338 <ucdr_init_buffer>
 801a2b2:	4638      	mov	r0, r7
 801a2b4:	4903      	ldr	r1, [pc, #12]	@ (801a2c4 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a2b6:	4622      	mov	r2, r4
 801a2b8:	f7f3 f812 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 801a2bc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a2c0:	2001      	movs	r0, #1
 801a2c2:	e7c8      	b.n	801a256 <uxr_next_input_reliable_buffer_available+0x82>
 801a2c4:	08019fc9 	.word	0x08019fc9

0801a2c8 <uxr_process_heartbeat>:
 801a2c8:	b538      	push	{r3, r4, r5, lr}
 801a2ca:	4611      	mov	r1, r2
 801a2cc:	4604      	mov	r4, r0
 801a2ce:	89c0      	ldrh	r0, [r0, #14]
 801a2d0:	4615      	mov	r5, r2
 801a2d2:	f000 fbb3 	bl	801aa3c <uxr_seq_num_cmp>
 801a2d6:	2800      	cmp	r0, #0
 801a2d8:	bfb8      	it	lt
 801a2da:	81e5      	strhlt	r5, [r4, #14]
 801a2dc:	bd38      	pop	{r3, r4, r5, pc}
 801a2de:	bf00      	nop

0801a2e0 <uxr_compute_acknack>:
 801a2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2e4:	8903      	ldrh	r3, [r0, #8]
 801a2e6:	8985      	ldrh	r5, [r0, #12]
 801a2e8:	4604      	mov	r4, r0
 801a2ea:	460e      	mov	r6, r1
 801a2ec:	b1d3      	cbz	r3, 801a324 <uxr_compute_acknack+0x44>
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	2701      	movs	r7, #1
 801a2f2:	e003      	b.n	801a2fc <uxr_compute_acknack+0x1c>
 801a2f4:	4567      	cmp	r7, ip
 801a2f6:	d215      	bcs.n	801a324 <uxr_compute_acknack+0x44>
 801a2f8:	89a0      	ldrh	r0, [r4, #12]
 801a2fa:	3701      	adds	r7, #1
 801a2fc:	b2b9      	uxth	r1, r7
 801a2fe:	f000 fb95 	bl	801aa2c <uxr_seq_num_add>
 801a302:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a306:	fbb0 f3fc 	udiv	r3, r0, ip
 801a30a:	fb0c 0313 	mls	r3, ip, r3, r0
 801a30e:	b29a      	uxth	r2, r3
 801a310:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a314:	fbb3 f3fc 	udiv	r3, r3, ip
 801a318:	fb02 f303 	mul.w	r3, r2, r3
 801a31c:	58cb      	ldr	r3, [r1, r3]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d1e8      	bne.n	801a2f4 <uxr_compute_acknack+0x14>
 801a322:	4605      	mov	r5, r0
 801a324:	8035      	strh	r5, [r6, #0]
 801a326:	2101      	movs	r1, #1
 801a328:	4628      	mov	r0, r5
 801a32a:	89e7      	ldrh	r7, [r4, #14]
 801a32c:	f000 fb82 	bl	801aa34 <uxr_seq_num_sub>
 801a330:	4601      	mov	r1, r0
 801a332:	4638      	mov	r0, r7
 801a334:	f000 fb7e 	bl	801aa34 <uxr_seq_num_sub>
 801a338:	4605      	mov	r5, r0
 801a33a:	b318      	cbz	r0, 801a384 <uxr_compute_acknack+0xa4>
 801a33c:	f04f 0900 	mov.w	r9, #0
 801a340:	464f      	mov	r7, r9
 801a342:	f04f 0801 	mov.w	r8, #1
 801a346:	fa1f f189 	uxth.w	r1, r9
 801a34a:	8830      	ldrh	r0, [r6, #0]
 801a34c:	f000 fb6e 	bl	801aa2c <uxr_seq_num_add>
 801a350:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a354:	fbb0 f3fc 	udiv	r3, r0, ip
 801a358:	e9d4 1200 	ldrd	r1, r2, [r4]
 801a35c:	fb03 001c 	mls	r0, r3, ip, r0
 801a360:	b283      	uxth	r3, r0
 801a362:	fbb2 f2fc 	udiv	r2, r2, ip
 801a366:	fb02 f303 	mul.w	r3, r2, r3
 801a36a:	fa08 f209 	lsl.w	r2, r8, r9
 801a36e:	58cb      	ldr	r3, [r1, r3]
 801a370:	f109 0901 	add.w	r9, r9, #1
 801a374:	b90b      	cbnz	r3, 801a37a <uxr_compute_acknack+0x9a>
 801a376:	4317      	orrs	r7, r2
 801a378:	b2bf      	uxth	r7, r7
 801a37a:	454d      	cmp	r5, r9
 801a37c:	d1e3      	bne.n	801a346 <uxr_compute_acknack+0x66>
 801a37e:	4638      	mov	r0, r7
 801a380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a384:	4607      	mov	r7, r0
 801a386:	4638      	mov	r0, r7
 801a388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a38c <uxr_init_output_best_effort_stream>:
 801a38c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a390:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a394:	6001      	str	r1, [r0, #0]
 801a396:	7303      	strb	r3, [r0, #12]
 801a398:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a39c:	4770      	bx	lr
 801a39e:	bf00      	nop

0801a3a0 <uxr_reset_output_best_effort_stream>:
 801a3a0:	7b02      	ldrb	r2, [r0, #12]
 801a3a2:	6042      	str	r2, [r0, #4]
 801a3a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3a8:	81c3      	strh	r3, [r0, #14]
 801a3aa:	4770      	bx	lr

0801a3ac <uxr_prepare_best_effort_buffer_to_write>:
 801a3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3ae:	4604      	mov	r4, r0
 801a3b0:	b083      	sub	sp, #12
 801a3b2:	6840      	ldr	r0, [r0, #4]
 801a3b4:	460d      	mov	r5, r1
 801a3b6:	4616      	mov	r6, r2
 801a3b8:	f7fa fe20 	bl	8014ffc <uxr_submessage_padding>
 801a3bc:	6863      	ldr	r3, [r4, #4]
 801a3be:	4418      	add	r0, r3
 801a3c0:	68a3      	ldr	r3, [r4, #8]
 801a3c2:	1942      	adds	r2, r0, r5
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	bf2c      	ite	cs
 801a3c8:	2701      	movcs	r7, #1
 801a3ca:	2700      	movcc	r7, #0
 801a3cc:	d202      	bcs.n	801a3d4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a3ce:	4638      	mov	r0, r7
 801a3d0:	b003      	add	sp, #12
 801a3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3d4:	9000      	str	r0, [sp, #0]
 801a3d6:	6821      	ldr	r1, [r4, #0]
 801a3d8:	4630      	mov	r0, r6
 801a3da:	2300      	movs	r3, #0
 801a3dc:	f7f2 ff9a 	bl	800d314 <ucdr_init_buffer_origin_offset>
 801a3e0:	6861      	ldr	r1, [r4, #4]
 801a3e2:	4638      	mov	r0, r7
 801a3e4:	4429      	add	r1, r5
 801a3e6:	6061      	str	r1, [r4, #4]
 801a3e8:	b003      	add	sp, #12
 801a3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a3ec <uxr_prepare_best_effort_buffer_to_send>:
 801a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3f0:	4604      	mov	r4, r0
 801a3f2:	461d      	mov	r5, r3
 801a3f4:	6840      	ldr	r0, [r0, #4]
 801a3f6:	7b23      	ldrb	r3, [r4, #12]
 801a3f8:	4298      	cmp	r0, r3
 801a3fa:	bf8c      	ite	hi
 801a3fc:	2601      	movhi	r6, #1
 801a3fe:	2600      	movls	r6, #0
 801a400:	d802      	bhi.n	801a408 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a402:	4630      	mov	r0, r6
 801a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a408:	4688      	mov	r8, r1
 801a40a:	89e0      	ldrh	r0, [r4, #14]
 801a40c:	2101      	movs	r1, #1
 801a40e:	4617      	mov	r7, r2
 801a410:	f000 fb0c 	bl	801aa2c <uxr_seq_num_add>
 801a414:	6823      	ldr	r3, [r4, #0]
 801a416:	81e0      	strh	r0, [r4, #14]
 801a418:	8028      	strh	r0, [r5, #0]
 801a41a:	f8c8 3000 	str.w	r3, [r8]
 801a41e:	6863      	ldr	r3, [r4, #4]
 801a420:	603b      	str	r3, [r7, #0]
 801a422:	7b23      	ldrb	r3, [r4, #12]
 801a424:	6063      	str	r3, [r4, #4]
 801a426:	4630      	mov	r0, r6
 801a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a42c <on_full_output_buffer>:
 801a42c:	b538      	push	{r3, r4, r5, lr}
 801a42e:	6802      	ldr	r2, [r0, #0]
 801a430:	460c      	mov	r4, r1
 801a432:	6809      	ldr	r1, [r1, #0]
 801a434:	8923      	ldrh	r3, [r4, #8]
 801a436:	eba2 0c01 	sub.w	ip, r2, r1
 801a43a:	6862      	ldr	r2, [r4, #4]
 801a43c:	fbb2 f2f3 	udiv	r2, r2, r3
 801a440:	fbbc fcf2 	udiv	ip, ip, r2
 801a444:	f10c 0c01 	add.w	ip, ip, #1
 801a448:	fa1f fc8c 	uxth.w	ip, ip
 801a44c:	fbbc fef3 	udiv	lr, ip, r3
 801a450:	fb03 c31e 	mls	r3, r3, lr, ip
 801a454:	b29b      	uxth	r3, r3
 801a456:	fb02 f303 	mul.w	r3, r2, r3
 801a45a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a45e:	58ca      	ldr	r2, [r1, r3]
 801a460:	4463      	add	r3, ip
 801a462:	eba2 020c 	sub.w	r2, r2, ip
 801a466:	3308      	adds	r3, #8
 801a468:	4605      	mov	r5, r0
 801a46a:	4419      	add	r1, r3
 801a46c:	3a04      	subs	r2, #4
 801a46e:	6903      	ldr	r3, [r0, #16]
 801a470:	f7f2 ff5a 	bl	800d328 <ucdr_init_buffer_origin>
 801a474:	4628      	mov	r0, r5
 801a476:	4903      	ldr	r1, [pc, #12]	@ (801a484 <on_full_output_buffer+0x58>)
 801a478:	4622      	mov	r2, r4
 801a47a:	f7f2 ff31 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 801a47e:	2000      	movs	r0, #0
 801a480:	bd38      	pop	{r3, r4, r5, pc}
 801a482:	bf00      	nop
 801a484:	0801a42d 	.word	0x0801a42d

0801a488 <uxr_init_output_reliable_stream>:
 801a488:	b410      	push	{r4}
 801a48a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a48e:	8103      	strh	r3, [r0, #8]
 801a490:	e9c0 1200 	strd	r1, r2, [r0]
 801a494:	f880 c00c 	strb.w	ip, [r0, #12]
 801a498:	b1d3      	cbz	r3, 801a4d0 <uxr_init_output_reliable_stream+0x48>
 801a49a:	f8c1 c000 	str.w	ip, [r1]
 801a49e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a4a2:	f1bc 0f01 	cmp.w	ip, #1
 801a4a6:	d913      	bls.n	801a4d0 <uxr_init_output_reliable_stream+0x48>
 801a4a8:	2301      	movs	r3, #1
 801a4aa:	fbb3 f1fc 	udiv	r1, r3, ip
 801a4ae:	fb0c 3111 	mls	r1, ip, r1, r3
 801a4b2:	b289      	uxth	r1, r1
 801a4b4:	6842      	ldr	r2, [r0, #4]
 801a4b6:	6804      	ldr	r4, [r0, #0]
 801a4b8:	fbb2 f2fc 	udiv	r2, r2, ip
 801a4bc:	fb01 f202 	mul.w	r2, r1, r2
 801a4c0:	7b01      	ldrb	r1, [r0, #12]
 801a4c2:	50a1      	str	r1, [r4, r2]
 801a4c4:	3301      	adds	r3, #1
 801a4c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	459c      	cmp	ip, r3
 801a4ce:	d8ec      	bhi.n	801a4aa <uxr_init_output_reliable_stream+0x22>
 801a4d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a4d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a4d8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a4dc:	4905      	ldr	r1, [pc, #20]	@ (801a4f4 <uxr_init_output_reliable_stream+0x6c>)
 801a4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a4e2:	f8c0 100e 	str.w	r1, [r0, #14]
 801a4e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	8242      	strh	r2, [r0, #18]
 801a4ee:	8403      	strh	r3, [r0, #32]
 801a4f0:	4770      	bx	lr
 801a4f2:	bf00      	nop
 801a4f4:	ffff0000 	.word	0xffff0000

0801a4f8 <uxr_reset_output_reliable_stream>:
 801a4f8:	8901      	ldrh	r1, [r0, #8]
 801a4fa:	b1b1      	cbz	r1, 801a52a <uxr_reset_output_reliable_stream+0x32>
 801a4fc:	f04f 0c00 	mov.w	ip, #0
 801a500:	4663      	mov	r3, ip
 801a502:	fbb3 f2f1 	udiv	r2, r3, r1
 801a506:	fb01 3312 	mls	r3, r1, r2, r3
 801a50a:	b29b      	uxth	r3, r3
 801a50c:	6842      	ldr	r2, [r0, #4]
 801a50e:	fbb2 f2f1 	udiv	r2, r2, r1
 801a512:	6801      	ldr	r1, [r0, #0]
 801a514:	fb02 f303 	mul.w	r3, r2, r3
 801a518:	7b02      	ldrb	r2, [r0, #12]
 801a51a:	50ca      	str	r2, [r1, r3]
 801a51c:	f10c 0c01 	add.w	ip, ip, #1
 801a520:	8901      	ldrh	r1, [r0, #8]
 801a522:	fa1f f38c 	uxth.w	r3, ip
 801a526:	4299      	cmp	r1, r3
 801a528:	d8eb      	bhi.n	801a502 <uxr_reset_output_reliable_stream+0xa>
 801a52a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a52e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a532:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a536:	4904      	ldr	r1, [pc, #16]	@ (801a548 <uxr_reset_output_reliable_stream+0x50>)
 801a538:	f8c0 100e 	str.w	r1, [r0, #14]
 801a53c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a540:	2300      	movs	r3, #0
 801a542:	8242      	strh	r2, [r0, #18]
 801a544:	8403      	strh	r3, [r0, #32]
 801a546:	4770      	bx	lr
 801a548:	ffff0000 	.word	0xffff0000

0801a54c <uxr_prepare_reliable_buffer_to_write>:
 801a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a550:	4604      	mov	r4, r0
 801a552:	b091      	sub	sp, #68	@ 0x44
 801a554:	8900      	ldrh	r0, [r0, #8]
 801a556:	89e6      	ldrh	r6, [r4, #14]
 801a558:	6823      	ldr	r3, [r4, #0]
 801a55a:	9204      	str	r2, [sp, #16]
 801a55c:	fbb6 f2f0 	udiv	r2, r6, r0
 801a560:	fb00 6212 	mls	r2, r0, r2, r6
 801a564:	b292      	uxth	r2, r2
 801a566:	6865      	ldr	r5, [r4, #4]
 801a568:	fbb5 f5f0 	udiv	r5, r5, r0
 801a56c:	fb05 3202 	mla	r2, r5, r2, r3
 801a570:	3204      	adds	r2, #4
 801a572:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a576:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a57a:	9203      	str	r2, [sp, #12]
 801a57c:	468b      	mov	fp, r1
 801a57e:	1f2f      	subs	r7, r5, #4
 801a580:	2800      	cmp	r0, #0
 801a582:	f000 814c 	beq.w	801a81e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a586:	f04f 0c00 	mov.w	ip, #0
 801a58a:	46e2      	mov	sl, ip
 801a58c:	4661      	mov	r1, ip
 801a58e:	fbb1 f2f0 	udiv	r2, r1, r0
 801a592:	fb00 1212 	mls	r2, r0, r2, r1
 801a596:	b292      	uxth	r2, r2
 801a598:	fb05 f202 	mul.w	r2, r5, r2
 801a59c:	f10c 0c01 	add.w	ip, ip, #1
 801a5a0:	589a      	ldr	r2, [r3, r2]
 801a5a2:	454a      	cmp	r2, r9
 801a5a4:	bf08      	it	eq
 801a5a6:	f10a 0a01 	addeq.w	sl, sl, #1
 801a5aa:	fa1f f18c 	uxth.w	r1, ip
 801a5ae:	bf08      	it	eq
 801a5b0:	fa1f fa8a 	uxtheq.w	sl, sl
 801a5b4:	4281      	cmp	r1, r0
 801a5b6:	d3ea      	bcc.n	801a58e <uxr_prepare_reliable_buffer_to_write+0x42>
 801a5b8:	4640      	mov	r0, r8
 801a5ba:	2104      	movs	r1, #4
 801a5bc:	f8cd a014 	str.w	sl, [sp, #20]
 801a5c0:	f7f2 febe 	bl	800d340 <ucdr_alignment>
 801a5c4:	4480      	add	r8, r0
 801a5c6:	eb08 020b 	add.w	r2, r8, fp
 801a5ca:	42ba      	cmp	r2, r7
 801a5cc:	f240 80cd 	bls.w	801a76a <uxr_prepare_reliable_buffer_to_write+0x21e>
 801a5d0:	7b22      	ldrb	r2, [r4, #12]
 801a5d2:	445a      	add	r2, fp
 801a5d4:	42ba      	cmp	r2, r7
 801a5d6:	f240 80b5 	bls.w	801a744 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801a5da:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801a5de:	33fc      	adds	r3, #252	@ 0xfc
 801a5e0:	b2ba      	uxth	r2, r7
 801a5e2:	4413      	add	r3, r2
 801a5e4:	b29b      	uxth	r3, r3
 801a5e6:	fb0a f903 	mul.w	r9, sl, r3
 801a5ea:	45d9      	cmp	r9, fp
 801a5ec:	9305      	str	r3, [sp, #20]
 801a5ee:	9306      	str	r3, [sp, #24]
 801a5f0:	f0c0 80b7 	bcc.w	801a762 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a5f4:	f108 0304 	add.w	r3, r8, #4
 801a5f8:	42bb      	cmp	r3, r7
 801a5fa:	f080 80db 	bcs.w	801a7b4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801a5fe:	f1a2 0904 	sub.w	r9, r2, #4
 801a602:	eba9 0908 	sub.w	r9, r9, r8
 801a606:	9b05      	ldr	r3, [sp, #20]
 801a608:	fa1f f989 	uxth.w	r9, r9
 801a60c:	ebab 0b09 	sub.w	fp, fp, r9
 801a610:	fbbb f2f3 	udiv	r2, fp, r3
 801a614:	fb03 b312 	mls	r3, r3, r2, fp
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f000 80c8 	beq.w	801a7ae <uxr_prepare_reliable_buffer_to_write+0x262>
 801a61e:	3201      	adds	r2, #1
 801a620:	b292      	uxth	r2, r2
 801a622:	9306      	str	r3, [sp, #24]
 801a624:	4552      	cmp	r2, sl
 801a626:	f200 809c 	bhi.w	801a762 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a62a:	f10d 0b20 	add.w	fp, sp, #32
 801a62e:	2a00      	cmp	r2, #0
 801a630:	d042      	beq.n	801a6b8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801a632:	f8cd 801c 	str.w	r8, [sp, #28]
 801a636:	f04f 0a00 	mov.w	sl, #0
 801a63a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a63e:	9505      	str	r5, [sp, #20]
 801a640:	f10d 0b20 	add.w	fp, sp, #32
 801a644:	4615      	mov	r5, r2
 801a646:	e000      	b.n	801a64a <uxr_prepare_reliable_buffer_to_write+0xfe>
 801a648:	46c1      	mov	r9, r8
 801a64a:	8920      	ldrh	r0, [r4, #8]
 801a64c:	fbb6 f2f0 	udiv	r2, r6, r0
 801a650:	fb00 6112 	mls	r1, r0, r2, r6
 801a654:	b28a      	uxth	r2, r1
 801a656:	6863      	ldr	r3, [r4, #4]
 801a658:	fbb3 f1f0 	udiv	r1, r3, r0
 801a65c:	6823      	ldr	r3, [r4, #0]
 801a65e:	fb02 f101 	mul.w	r1, r2, r1
 801a662:	3104      	adds	r1, #4
 801a664:	4419      	add	r1, r3
 801a666:	4658      	mov	r0, fp
 801a668:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a66c:	9200      	str	r2, [sp, #0]
 801a66e:	2300      	movs	r3, #0
 801a670:	463a      	mov	r2, r7
 801a672:	f7f2 fe4f 	bl	800d314 <ucdr_init_buffer_origin_offset>
 801a676:	464a      	mov	r2, r9
 801a678:	2300      	movs	r3, #0
 801a67a:	210d      	movs	r1, #13
 801a67c:	4658      	mov	r0, fp
 801a67e:	f7fa fc7d 	bl	8014f7c <uxr_buffer_submessage_header>
 801a682:	8921      	ldrh	r1, [r4, #8]
 801a684:	fbb6 f2f1 	udiv	r2, r6, r1
 801a688:	fb01 6212 	mls	r2, r1, r2, r6
 801a68c:	b292      	uxth	r2, r2
 801a68e:	6863      	ldr	r3, [r4, #4]
 801a690:	fbb3 f3f1 	udiv	r3, r3, r1
 801a694:	fb02 f303 	mul.w	r3, r2, r3
 801a698:	6822      	ldr	r2, [r4, #0]
 801a69a:	4630      	mov	r0, r6
 801a69c:	50d7      	str	r7, [r2, r3]
 801a69e:	2101      	movs	r1, #1
 801a6a0:	f000 f9c4 	bl	801aa2c <uxr_seq_num_add>
 801a6a4:	f10a 0a01 	add.w	sl, sl, #1
 801a6a8:	fa1f f38a 	uxth.w	r3, sl
 801a6ac:	429d      	cmp	r5, r3
 801a6ae:	4606      	mov	r6, r0
 801a6b0:	d8ca      	bhi.n	801a648 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801a6b2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a6b6:	9d05      	ldr	r5, [sp, #20]
 801a6b8:	8920      	ldrh	r0, [r4, #8]
 801a6ba:	fbb6 f3f0 	udiv	r3, r6, r0
 801a6be:	fb00 6313 	mls	r3, r0, r3, r6
 801a6c2:	b299      	uxth	r1, r3
 801a6c4:	6863      	ldr	r3, [r4, #4]
 801a6c6:	fbb3 f3f0 	udiv	r3, r3, r0
 801a6ca:	fb01 f303 	mul.w	r3, r1, r3
 801a6ce:	6821      	ldr	r1, [r4, #0]
 801a6d0:	3304      	adds	r3, #4
 801a6d2:	4419      	add	r1, r3
 801a6d4:	463a      	mov	r2, r7
 801a6d6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a6da:	9000      	str	r0, [sp, #0]
 801a6dc:	2300      	movs	r3, #0
 801a6de:	4658      	mov	r0, fp
 801a6e0:	f7f2 fe18 	bl	800d314 <ucdr_init_buffer_origin_offset>
 801a6e4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a6e8:	4658      	mov	r0, fp
 801a6ea:	fa1f f289 	uxth.w	r2, r9
 801a6ee:	2302      	movs	r3, #2
 801a6f0:	210d      	movs	r1, #13
 801a6f2:	f7fa fc43 	bl	8014f7c <uxr_buffer_submessage_header>
 801a6f6:	9b03      	ldr	r3, [sp, #12]
 801a6f8:	8927      	ldrh	r7, [r4, #8]
 801a6fa:	7b20      	ldrb	r0, [r4, #12]
 801a6fc:	f108 0104 	add.w	r1, r8, #4
 801a700:	440b      	add	r3, r1
 801a702:	4619      	mov	r1, r3
 801a704:	fbb6 f3f7 	udiv	r3, r6, r7
 801a708:	fb07 6313 	mls	r3, r7, r3, r6
 801a70c:	f1a5 0208 	sub.w	r2, r5, #8
 801a710:	b29d      	uxth	r5, r3
 801a712:	3004      	adds	r0, #4
 801a714:	6863      	ldr	r3, [r4, #4]
 801a716:	fbb3 f3f7 	udiv	r3, r3, r7
 801a71a:	fb05 f303 	mul.w	r3, r5, r3
 801a71e:	6825      	ldr	r5, [r4, #0]
 801a720:	4448      	add	r0, r9
 801a722:	50e8      	str	r0, [r5, r3]
 801a724:	9d04      	ldr	r5, [sp, #16]
 801a726:	eba2 0208 	sub.w	r2, r2, r8
 801a72a:	4628      	mov	r0, r5
 801a72c:	f7f2 fe04 	bl	800d338 <ucdr_init_buffer>
 801a730:	4628      	mov	r0, r5
 801a732:	493c      	ldr	r1, [pc, #240]	@ (801a824 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a734:	4622      	mov	r2, r4
 801a736:	f7f2 fdd3 	bl	800d2e0 <ucdr_set_on_full_buffer_callback>
 801a73a:	2001      	movs	r0, #1
 801a73c:	81e6      	strh	r6, [r4, #14]
 801a73e:	b011      	add	sp, #68	@ 0x44
 801a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a744:	2101      	movs	r1, #1
 801a746:	89e0      	ldrh	r0, [r4, #14]
 801a748:	f000 f970 	bl	801aa2c <uxr_seq_num_add>
 801a74c:	8921      	ldrh	r1, [r4, #8]
 801a74e:	4605      	mov	r5, r0
 801a750:	8a60      	ldrh	r0, [r4, #18]
 801a752:	f000 f96b 	bl	801aa2c <uxr_seq_num_add>
 801a756:	4601      	mov	r1, r0
 801a758:	4628      	mov	r0, r5
 801a75a:	f000 f96f 	bl	801aa3c <uxr_seq_num_cmp>
 801a75e:	2800      	cmp	r0, #0
 801a760:	dd42      	ble.n	801a7e8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801a762:	2000      	movs	r0, #0
 801a764:	b011      	add	sp, #68	@ 0x44
 801a766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a76a:	8921      	ldrh	r1, [r4, #8]
 801a76c:	8a60      	ldrh	r0, [r4, #18]
 801a76e:	9205      	str	r2, [sp, #20]
 801a770:	f000 f95c 	bl	801aa2c <uxr_seq_num_add>
 801a774:	4601      	mov	r1, r0
 801a776:	4630      	mov	r0, r6
 801a778:	f000 f960 	bl	801aa3c <uxr_seq_num_cmp>
 801a77c:	2800      	cmp	r0, #0
 801a77e:	9a05      	ldr	r2, [sp, #20]
 801a780:	dcef      	bgt.n	801a762 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a782:	8927      	ldrh	r7, [r4, #8]
 801a784:	fbb6 f3f7 	udiv	r3, r6, r7
 801a788:	fb07 6313 	mls	r3, r7, r3, r6
 801a78c:	b29d      	uxth	r5, r3
 801a78e:	6863      	ldr	r3, [r4, #4]
 801a790:	6824      	ldr	r4, [r4, #0]
 801a792:	fbb3 f3f7 	udiv	r3, r3, r7
 801a796:	fb05 f303 	mul.w	r3, r5, r3
 801a79a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a79e:	50e2      	str	r2, [r4, r3]
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	f8cd 8000 	str.w	r8, [sp]
 801a7a6:	f7f2 fdb5 	bl	800d314 <ucdr_init_buffer_origin_offset>
 801a7aa:	2001      	movs	r0, #1
 801a7ac:	e7da      	b.n	801a764 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a7ae:	b293      	uxth	r3, r2
 801a7b0:	461a      	mov	r2, r3
 801a7b2:	e737      	b.n	801a624 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801a7b4:	4630      	mov	r0, r6
 801a7b6:	2101      	movs	r1, #1
 801a7b8:	9207      	str	r2, [sp, #28]
 801a7ba:	f000 f937 	bl	801aa2c <uxr_seq_num_add>
 801a7be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a7c2:	fbb0 f1fc 	udiv	r1, r0, ip
 801a7c6:	fb0c 0111 	mls	r1, ip, r1, r0
 801a7ca:	4606      	mov	r6, r0
 801a7cc:	b288      	uxth	r0, r1
 801a7ce:	6863      	ldr	r3, [r4, #4]
 801a7d0:	fbb3 f1fc 	udiv	r1, r3, ip
 801a7d4:	6823      	ldr	r3, [r4, #0]
 801a7d6:	9a07      	ldr	r2, [sp, #28]
 801a7d8:	fb00 f101 	mul.w	r1, r0, r1
 801a7dc:	3104      	adds	r1, #4
 801a7de:	440b      	add	r3, r1
 801a7e0:	9303      	str	r3, [sp, #12]
 801a7e2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a7e6:	e70a      	b.n	801a5fe <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a7e8:	8921      	ldrh	r1, [r4, #8]
 801a7ea:	fbb5 f3f1 	udiv	r3, r5, r1
 801a7ee:	fb01 5313 	mls	r3, r1, r3, r5
 801a7f2:	b29a      	uxth	r2, r3
 801a7f4:	6863      	ldr	r3, [r4, #4]
 801a7f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a7fa:	6821      	ldr	r1, [r4, #0]
 801a7fc:	9804      	ldr	r0, [sp, #16]
 801a7fe:	fb02 f303 	mul.w	r3, r2, r3
 801a802:	3304      	adds	r3, #4
 801a804:	7b22      	ldrb	r2, [r4, #12]
 801a806:	4419      	add	r1, r3
 801a808:	445a      	add	r2, fp
 801a80a:	f841 2c04 	str.w	r2, [r1, #-4]
 801a80e:	7b23      	ldrb	r3, [r4, #12]
 801a810:	9300      	str	r3, [sp, #0]
 801a812:	2300      	movs	r3, #0
 801a814:	f7f2 fd7e 	bl	800d314 <ucdr_init_buffer_origin_offset>
 801a818:	81e5      	strh	r5, [r4, #14]
 801a81a:	2001      	movs	r0, #1
 801a81c:	e7a2      	b.n	801a764 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a81e:	4682      	mov	sl, r0
 801a820:	e6ca      	b.n	801a5b8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801a822:	bf00      	nop
 801a824:	0801a42d 	.word	0x0801a42d

0801a828 <uxr_prepare_next_reliable_buffer_to_send>:
 801a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a82a:	4604      	mov	r4, r0
 801a82c:	460f      	mov	r7, r1
 801a82e:	8a00      	ldrh	r0, [r0, #16]
 801a830:	2101      	movs	r1, #1
 801a832:	4616      	mov	r6, r2
 801a834:	461d      	mov	r5, r3
 801a836:	f000 f8f9 	bl	801aa2c <uxr_seq_num_add>
 801a83a:	8028      	strh	r0, [r5, #0]
 801a83c:	8922      	ldrh	r2, [r4, #8]
 801a83e:	fbb0 f3f2 	udiv	r3, r0, r2
 801a842:	fb02 0c13 	mls	ip, r2, r3, r0
 801a846:	fa1f fc8c 	uxth.w	ip, ip
 801a84a:	6863      	ldr	r3, [r4, #4]
 801a84c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a850:	fb0c fc03 	mul.w	ip, ip, r3
 801a854:	6823      	ldr	r3, [r4, #0]
 801a856:	89e1      	ldrh	r1, [r4, #14]
 801a858:	f10c 0c04 	add.w	ip, ip, #4
 801a85c:	4463      	add	r3, ip
 801a85e:	603b      	str	r3, [r7, #0]
 801a860:	6823      	ldr	r3, [r4, #0]
 801a862:	449c      	add	ip, r3
 801a864:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a868:	6033      	str	r3, [r6, #0]
 801a86a:	f000 f8e7 	bl	801aa3c <uxr_seq_num_cmp>
 801a86e:	2800      	cmp	r0, #0
 801a870:	dd01      	ble.n	801a876 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a872:	2000      	movs	r0, #0
 801a874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a876:	7b23      	ldrb	r3, [r4, #12]
 801a878:	6832      	ldr	r2, [r6, #0]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d9f9      	bls.n	801a872 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a87e:	8a61      	ldrh	r1, [r4, #18]
 801a880:	8a20      	ldrh	r0, [r4, #16]
 801a882:	f000 f8d7 	bl	801aa34 <uxr_seq_num_sub>
 801a886:	8923      	ldrh	r3, [r4, #8]
 801a888:	4283      	cmp	r3, r0
 801a88a:	d0f2      	beq.n	801a872 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a88c:	8828      	ldrh	r0, [r5, #0]
 801a88e:	89e3      	ldrh	r3, [r4, #14]
 801a890:	8220      	strh	r0, [r4, #16]
 801a892:	4298      	cmp	r0, r3
 801a894:	d001      	beq.n	801a89a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a896:	2001      	movs	r0, #1
 801a898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a89a:	2101      	movs	r1, #1
 801a89c:	f000 f8c6 	bl	801aa2c <uxr_seq_num_add>
 801a8a0:	81e0      	strh	r0, [r4, #14]
 801a8a2:	2001      	movs	r0, #1
 801a8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8a6:	bf00      	nop

0801a8a8 <uxr_update_output_stream_heartbeat_timestamp>:
 801a8a8:	b570      	push	{r4, r5, r6, lr}
 801a8aa:	8a01      	ldrh	r1, [r0, #16]
 801a8ac:	4604      	mov	r4, r0
 801a8ae:	8a40      	ldrh	r0, [r0, #18]
 801a8b0:	4615      	mov	r5, r2
 801a8b2:	461e      	mov	r6, r3
 801a8b4:	f000 f8c2 	bl	801aa3c <uxr_seq_num_cmp>
 801a8b8:	2800      	cmp	r0, #0
 801a8ba:	db07      	blt.n	801a8cc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a8bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a8c0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a8c4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a8c8:	2000      	movs	r0, #0
 801a8ca:	bd70      	pop	{r4, r5, r6, pc}
 801a8cc:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a8d0:	b940      	cbnz	r0, 801a8e4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a8d2:	2301      	movs	r3, #1
 801a8d4:	f884 3020 	strb.w	r3, [r4, #32]
 801a8d8:	3564      	adds	r5, #100	@ 0x64
 801a8da:	f146 0600 	adc.w	r6, r6, #0
 801a8de:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a8e2:	bd70      	pop	{r4, r5, r6, pc}
 801a8e4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a8e8:	4295      	cmp	r5, r2
 801a8ea:	eb76 0303 	sbcs.w	r3, r6, r3
 801a8ee:	bfa5      	ittet	ge
 801a8f0:	3001      	addge	r0, #1
 801a8f2:	f884 0020 	strbge.w	r0, [r4, #32]
 801a8f6:	2000      	movlt	r0, #0
 801a8f8:	2001      	movge	r0, #1
 801a8fa:	e7ed      	b.n	801a8d8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801a8fc <uxr_begin_output_nack_buffer_it>:
 801a8fc:	8a40      	ldrh	r0, [r0, #18]
 801a8fe:	4770      	bx	lr

0801a900 <uxr_next_reliable_nack_buffer_to_send>:
 801a900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a904:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a908:	b082      	sub	sp, #8
 801a90a:	f1b8 0f00 	cmp.w	r8, #0
 801a90e:	d011      	beq.n	801a934 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801a910:	4604      	mov	r4, r0
 801a912:	8818      	ldrh	r0, [r3, #0]
 801a914:	460e      	mov	r6, r1
 801a916:	4617      	mov	r7, r2
 801a918:	461d      	mov	r5, r3
 801a91a:	2101      	movs	r1, #1
 801a91c:	f000 f886 	bl	801aa2c <uxr_seq_num_add>
 801a920:	8028      	strh	r0, [r5, #0]
 801a922:	8a21      	ldrh	r1, [r4, #16]
 801a924:	f000 f88a 	bl	801aa3c <uxr_seq_num_cmp>
 801a928:	2800      	cmp	r0, #0
 801a92a:	dd07      	ble.n	801a93c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801a92c:	f04f 0800 	mov.w	r8, #0
 801a930:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801a934:	4640      	mov	r0, r8
 801a936:	b002      	add	sp, #8
 801a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a93c:	8921      	ldrh	r1, [r4, #8]
 801a93e:	8828      	ldrh	r0, [r5, #0]
 801a940:	6823      	ldr	r3, [r4, #0]
 801a942:	fbb0 f2f1 	udiv	r2, r0, r1
 801a946:	fb01 0c12 	mls	ip, r1, r2, r0
 801a94a:	fa1f f28c 	uxth.w	r2, ip
 801a94e:	9301      	str	r3, [sp, #4]
 801a950:	6863      	ldr	r3, [r4, #4]
 801a952:	fbb3 fcf1 	udiv	ip, r3, r1
 801a956:	9b01      	ldr	r3, [sp, #4]
 801a958:	fb02 fc0c 	mul.w	ip, r2, ip
 801a95c:	f10c 0c04 	add.w	ip, ip, #4
 801a960:	4463      	add	r3, ip
 801a962:	6033      	str	r3, [r6, #0]
 801a964:	6823      	ldr	r3, [r4, #0]
 801a966:	4463      	add	r3, ip
 801a968:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a96c:	603b      	str	r3, [r7, #0]
 801a96e:	7b22      	ldrb	r2, [r4, #12]
 801a970:	429a      	cmp	r2, r3
 801a972:	d0d2      	beq.n	801a91a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801a974:	4640      	mov	r0, r8
 801a976:	b002      	add	sp, #8
 801a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a97c <uxr_process_acknack>:
 801a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a97e:	4604      	mov	r4, r0
 801a980:	460e      	mov	r6, r1
 801a982:	4610      	mov	r0, r2
 801a984:	2101      	movs	r1, #1
 801a986:	f000 f855 	bl	801aa34 <uxr_seq_num_sub>
 801a98a:	8a61      	ldrh	r1, [r4, #18]
 801a98c:	f000 f852 	bl	801aa34 <uxr_seq_num_sub>
 801a990:	b1c0      	cbz	r0, 801a9c4 <uxr_process_acknack+0x48>
 801a992:	4605      	mov	r5, r0
 801a994:	2700      	movs	r7, #0
 801a996:	2101      	movs	r1, #1
 801a998:	8a60      	ldrh	r0, [r4, #18]
 801a99a:	f000 f847 	bl	801aa2c <uxr_seq_num_add>
 801a99e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a9a2:	fbb0 f1fc 	udiv	r1, r0, ip
 801a9a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a9aa:	fb0c 0111 	mls	r1, ip, r1, r0
 801a9ae:	b289      	uxth	r1, r1
 801a9b0:	3701      	adds	r7, #1
 801a9b2:	fbb3 f3fc 	udiv	r3, r3, ip
 801a9b6:	fb01 f303 	mul.w	r3, r1, r3
 801a9ba:	42bd      	cmp	r5, r7
 801a9bc:	7b21      	ldrb	r1, [r4, #12]
 801a9be:	8260      	strh	r0, [r4, #18]
 801a9c0:	50d1      	str	r1, [r2, r3]
 801a9c2:	d1e8      	bne.n	801a996 <uxr_process_acknack+0x1a>
 801a9c4:	3e00      	subs	r6, #0
 801a9c6:	f04f 0300 	mov.w	r3, #0
 801a9ca:	bf18      	it	ne
 801a9cc:	2601      	movne	r6, #1
 801a9ce:	f884 3020 	strb.w	r3, [r4, #32]
 801a9d2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a9d8 <uxr_is_output_up_to_date>:
 801a9d8:	8a01      	ldrh	r1, [r0, #16]
 801a9da:	8a40      	ldrh	r0, [r0, #18]
 801a9dc:	b508      	push	{r3, lr}
 801a9de:	f000 f82d 	bl	801aa3c <uxr_seq_num_cmp>
 801a9e2:	fab0 f080 	clz	r0, r0
 801a9e6:	0940      	lsrs	r0, r0, #5
 801a9e8:	bd08      	pop	{r3, pc}
 801a9ea:	bf00      	nop

0801a9ec <get_available_free_slots>:
 801a9ec:	8902      	ldrh	r2, [r0, #8]
 801a9ee:	b1da      	cbz	r2, 801aa28 <get_available_free_slots+0x3c>
 801a9f0:	b530      	push	{r4, r5, lr}
 801a9f2:	2100      	movs	r1, #0
 801a9f4:	6843      	ldr	r3, [r0, #4]
 801a9f6:	6805      	ldr	r5, [r0, #0]
 801a9f8:	7b04      	ldrb	r4, [r0, #12]
 801a9fa:	fbb3 fef2 	udiv	lr, r3, r2
 801a9fe:	4608      	mov	r0, r1
 801aa00:	460b      	mov	r3, r1
 801aa02:	fbb3 fcf2 	udiv	ip, r3, r2
 801aa06:	fb02 331c 	mls	r3, r2, ip, r3
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	fb0e f303 	mul.w	r3, lr, r3
 801aa10:	3101      	adds	r1, #1
 801aa12:	f855 c003 	ldr.w	ip, [r5, r3]
 801aa16:	4564      	cmp	r4, ip
 801aa18:	bf08      	it	eq
 801aa1a:	3001      	addeq	r0, #1
 801aa1c:	b28b      	uxth	r3, r1
 801aa1e:	bf08      	it	eq
 801aa20:	b280      	uxtheq	r0, r0
 801aa22:	4293      	cmp	r3, r2
 801aa24:	d3ed      	bcc.n	801aa02 <get_available_free_slots+0x16>
 801aa26:	bd30      	pop	{r4, r5, pc}
 801aa28:	4610      	mov	r0, r2
 801aa2a:	4770      	bx	lr

0801aa2c <uxr_seq_num_add>:
 801aa2c:	4408      	add	r0, r1
 801aa2e:	b280      	uxth	r0, r0
 801aa30:	4770      	bx	lr
 801aa32:	bf00      	nop

0801aa34 <uxr_seq_num_sub>:
 801aa34:	1a40      	subs	r0, r0, r1
 801aa36:	b280      	uxth	r0, r0
 801aa38:	4770      	bx	lr
 801aa3a:	bf00      	nop

0801aa3c <uxr_seq_num_cmp>:
 801aa3c:	4288      	cmp	r0, r1
 801aa3e:	d011      	beq.n	801aa64 <uxr_seq_num_cmp+0x28>
 801aa40:	d309      	bcc.n	801aa56 <uxr_seq_num_cmp+0x1a>
 801aa42:	4288      	cmp	r0, r1
 801aa44:	d910      	bls.n	801aa68 <uxr_seq_num_cmp+0x2c>
 801aa46:	1a40      	subs	r0, r0, r1
 801aa48:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801aa4c:	bfd4      	ite	le
 801aa4e:	2001      	movle	r0, #1
 801aa50:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801aa54:	4770      	bx	lr
 801aa56:	1a0b      	subs	r3, r1, r0
 801aa58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801aa5c:	daf1      	bge.n	801aa42 <uxr_seq_num_cmp+0x6>
 801aa5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aa62:	4770      	bx	lr
 801aa64:	2000      	movs	r0, #0
 801aa66:	4770      	bx	lr
 801aa68:	2001      	movs	r0, #1
 801aa6a:	4770      	bx	lr

0801aa6c <rcl_get_default_domain_id>:
 801aa6c:	b530      	push	{r4, r5, lr}
 801aa6e:	b083      	sub	sp, #12
 801aa70:	2300      	movs	r3, #0
 801aa72:	9300      	str	r3, [sp, #0]
 801aa74:	b1d0      	cbz	r0, 801aaac <rcl_get_default_domain_id+0x40>
 801aa76:	4604      	mov	r4, r0
 801aa78:	4669      	mov	r1, sp
 801aa7a:	4815      	ldr	r0, [pc, #84]	@ (801aad0 <rcl_get_default_domain_id+0x64>)
 801aa7c:	f7f4 fb60 	bl	800f140 <rcutils_get_env>
 801aa80:	4602      	mov	r2, r0
 801aa82:	b110      	cbz	r0, 801aa8a <rcl_get_default_domain_id+0x1e>
 801aa84:	2001      	movs	r0, #1
 801aa86:	b003      	add	sp, #12
 801aa88:	bd30      	pop	{r4, r5, pc}
 801aa8a:	9b00      	ldr	r3, [sp, #0]
 801aa8c:	b18b      	cbz	r3, 801aab2 <rcl_get_default_domain_id+0x46>
 801aa8e:	7818      	ldrb	r0, [r3, #0]
 801aa90:	2800      	cmp	r0, #0
 801aa92:	d0f8      	beq.n	801aa86 <rcl_get_default_domain_id+0x1a>
 801aa94:	a901      	add	r1, sp, #4
 801aa96:	4618      	mov	r0, r3
 801aa98:	9201      	str	r2, [sp, #4]
 801aa9a:	f000 fae5 	bl	801b068 <strtoul>
 801aa9e:	4605      	mov	r5, r0
 801aaa0:	b150      	cbz	r0, 801aab8 <rcl_get_default_domain_id+0x4c>
 801aaa2:	1c43      	adds	r3, r0, #1
 801aaa4:	d00d      	beq.n	801aac2 <rcl_get_default_domain_id+0x56>
 801aaa6:	6025      	str	r5, [r4, #0]
 801aaa8:	2000      	movs	r0, #0
 801aaaa:	e7ec      	b.n	801aa86 <rcl_get_default_domain_id+0x1a>
 801aaac:	200b      	movs	r0, #11
 801aaae:	b003      	add	sp, #12
 801aab0:	bd30      	pop	{r4, r5, pc}
 801aab2:	4618      	mov	r0, r3
 801aab4:	b003      	add	sp, #12
 801aab6:	bd30      	pop	{r4, r5, pc}
 801aab8:	9b01      	ldr	r3, [sp, #4]
 801aaba:	781b      	ldrb	r3, [r3, #0]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d0f2      	beq.n	801aaa6 <rcl_get_default_domain_id+0x3a>
 801aac0:	e7e0      	b.n	801aa84 <rcl_get_default_domain_id+0x18>
 801aac2:	f000 fe0b 	bl	801b6dc <__errno>
 801aac6:	6803      	ldr	r3, [r0, #0]
 801aac8:	2b22      	cmp	r3, #34	@ 0x22
 801aaca:	d1ec      	bne.n	801aaa6 <rcl_get_default_domain_id+0x3a>
 801aacc:	e7da      	b.n	801aa84 <rcl_get_default_domain_id+0x18>
 801aace:	bf00      	nop
 801aad0:	0801f434 	.word	0x0801f434

0801aad4 <rcutils_string_array_fini>:
 801aad4:	b320      	cbz	r0, 801ab20 <rcutils_string_array_fini+0x4c>
 801aad6:	b570      	push	{r4, r5, r6, lr}
 801aad8:	4604      	mov	r4, r0
 801aada:	6840      	ldr	r0, [r0, #4]
 801aadc:	b1d8      	cbz	r0, 801ab16 <rcutils_string_array_fini+0x42>
 801aade:	f104 0008 	add.w	r0, r4, #8
 801aae2:	f7f4 fa7b 	bl	800efdc <rcutils_allocator_is_valid>
 801aae6:	b1b8      	cbz	r0, 801ab18 <rcutils_string_array_fini+0x44>
 801aae8:	6823      	ldr	r3, [r4, #0]
 801aaea:	b1bb      	cbz	r3, 801ab1c <rcutils_string_array_fini+0x48>
 801aaec:	2500      	movs	r5, #0
 801aaee:	6860      	ldr	r0, [r4, #4]
 801aaf0:	462e      	mov	r6, r5
 801aaf2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801aaf6:	68e3      	ldr	r3, [r4, #12]
 801aaf8:	69a1      	ldr	r1, [r4, #24]
 801aafa:	4798      	blx	r3
 801aafc:	e9d4 3000 	ldrd	r3, r0, [r4]
 801ab00:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801ab04:	3501      	adds	r5, #1
 801ab06:	429d      	cmp	r5, r3
 801ab08:	d3f3      	bcc.n	801aaf2 <rcutils_string_array_fini+0x1e>
 801ab0a:	68e3      	ldr	r3, [r4, #12]
 801ab0c:	69a1      	ldr	r1, [r4, #24]
 801ab0e:	4798      	blx	r3
 801ab10:	2000      	movs	r0, #0
 801ab12:	e9c4 0000 	strd	r0, r0, [r4]
 801ab16:	bd70      	pop	{r4, r5, r6, pc}
 801ab18:	200b      	movs	r0, #11
 801ab1a:	bd70      	pop	{r4, r5, r6, pc}
 801ab1c:	6860      	ldr	r0, [r4, #4]
 801ab1e:	e7f4      	b.n	801ab0a <rcutils_string_array_fini+0x36>
 801ab20:	200b      	movs	r0, #11
 801ab22:	4770      	bx	lr

0801ab24 <rosidl_runtime_c__String__init>:
 801ab24:	b510      	push	{r4, lr}
 801ab26:	4604      	mov	r4, r0
 801ab28:	b086      	sub	sp, #24
 801ab2a:	b170      	cbz	r0, 801ab4a <rosidl_runtime_c__String__init+0x26>
 801ab2c:	a801      	add	r0, sp, #4
 801ab2e:	f7f4 fa47 	bl	800efc0 <rcutils_get_default_allocator>
 801ab32:	9b01      	ldr	r3, [sp, #4]
 801ab34:	9905      	ldr	r1, [sp, #20]
 801ab36:	2001      	movs	r0, #1
 801ab38:	4798      	blx	r3
 801ab3a:	6020      	str	r0, [r4, #0]
 801ab3c:	b128      	cbz	r0, 801ab4a <rosidl_runtime_c__String__init+0x26>
 801ab3e:	2100      	movs	r1, #0
 801ab40:	2201      	movs	r2, #1
 801ab42:	7001      	strb	r1, [r0, #0]
 801ab44:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801ab48:	4610      	mov	r0, r2
 801ab4a:	b006      	add	sp, #24
 801ab4c:	bd10      	pop	{r4, pc}
 801ab4e:	bf00      	nop

0801ab50 <rosidl_runtime_c__String__fini>:
 801ab50:	b320      	cbz	r0, 801ab9c <rosidl_runtime_c__String__fini+0x4c>
 801ab52:	b510      	push	{r4, lr}
 801ab54:	6803      	ldr	r3, [r0, #0]
 801ab56:	b086      	sub	sp, #24
 801ab58:	4604      	mov	r4, r0
 801ab5a:	b173      	cbz	r3, 801ab7a <rosidl_runtime_c__String__fini+0x2a>
 801ab5c:	6883      	ldr	r3, [r0, #8]
 801ab5e:	b1f3      	cbz	r3, 801ab9e <rosidl_runtime_c__String__fini+0x4e>
 801ab60:	a801      	add	r0, sp, #4
 801ab62:	f7f4 fa2d 	bl	800efc0 <rcutils_get_default_allocator>
 801ab66:	9b02      	ldr	r3, [sp, #8]
 801ab68:	9905      	ldr	r1, [sp, #20]
 801ab6a:	6820      	ldr	r0, [r4, #0]
 801ab6c:	4798      	blx	r3
 801ab6e:	2300      	movs	r3, #0
 801ab70:	e9c4 3300 	strd	r3, r3, [r4]
 801ab74:	60a3      	str	r3, [r4, #8]
 801ab76:	b006      	add	sp, #24
 801ab78:	bd10      	pop	{r4, pc}
 801ab7a:	6843      	ldr	r3, [r0, #4]
 801ab7c:	b9db      	cbnz	r3, 801abb6 <rosidl_runtime_c__String__fini+0x66>
 801ab7e:	6883      	ldr	r3, [r0, #8]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d0f8      	beq.n	801ab76 <rosidl_runtime_c__String__fini+0x26>
 801ab84:	4b12      	ldr	r3, [pc, #72]	@ (801abd0 <rosidl_runtime_c__String__fini+0x80>)
 801ab86:	4813      	ldr	r0, [pc, #76]	@ (801abd4 <rosidl_runtime_c__String__fini+0x84>)
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	2251      	movs	r2, #81	@ 0x51
 801ab8c:	68db      	ldr	r3, [r3, #12]
 801ab8e:	2101      	movs	r1, #1
 801ab90:	f000 fb82 	bl	801b298 <fwrite>
 801ab94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ab98:	f000 f83e 	bl	801ac18 <exit>
 801ab9c:	4770      	bx	lr
 801ab9e:	4b0c      	ldr	r3, [pc, #48]	@ (801abd0 <rosidl_runtime_c__String__fini+0x80>)
 801aba0:	480d      	ldr	r0, [pc, #52]	@ (801abd8 <rosidl_runtime_c__String__fini+0x88>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	224c      	movs	r2, #76	@ 0x4c
 801aba6:	68db      	ldr	r3, [r3, #12]
 801aba8:	2101      	movs	r1, #1
 801abaa:	f000 fb75 	bl	801b298 <fwrite>
 801abae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abb2:	f000 f831 	bl	801ac18 <exit>
 801abb6:	4b06      	ldr	r3, [pc, #24]	@ (801abd0 <rosidl_runtime_c__String__fini+0x80>)
 801abb8:	4808      	ldr	r0, [pc, #32]	@ (801abdc <rosidl_runtime_c__String__fini+0x8c>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	224e      	movs	r2, #78	@ 0x4e
 801abbe:	68db      	ldr	r3, [r3, #12]
 801abc0:	2101      	movs	r1, #1
 801abc2:	f000 fb69 	bl	801b298 <fwrite>
 801abc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abca:	f000 f825 	bl	801ac18 <exit>
 801abce:	bf00      	nop
 801abd0:	20000ba0 	.word	0x20000ba0
 801abd4:	0801f4e4 	.word	0x0801f4e4
 801abd8:	0801f444 	.word	0x0801f444
 801abdc:	0801f494 	.word	0x0801f494

0801abe0 <calloc>:
 801abe0:	4b02      	ldr	r3, [pc, #8]	@ (801abec <calloc+0xc>)
 801abe2:	460a      	mov	r2, r1
 801abe4:	4601      	mov	r1, r0
 801abe6:	6818      	ldr	r0, [r3, #0]
 801abe8:	f000 b802 	b.w	801abf0 <_calloc_r>
 801abec:	20000ba0 	.word	0x20000ba0

0801abf0 <_calloc_r>:
 801abf0:	b570      	push	{r4, r5, r6, lr}
 801abf2:	fba1 5402 	umull	r5, r4, r1, r2
 801abf6:	b93c      	cbnz	r4, 801ac08 <_calloc_r+0x18>
 801abf8:	4629      	mov	r1, r5
 801abfa:	f000 f899 	bl	801ad30 <_malloc_r>
 801abfe:	4606      	mov	r6, r0
 801ac00:	b928      	cbnz	r0, 801ac0e <_calloc_r+0x1e>
 801ac02:	2600      	movs	r6, #0
 801ac04:	4630      	mov	r0, r6
 801ac06:	bd70      	pop	{r4, r5, r6, pc}
 801ac08:	220c      	movs	r2, #12
 801ac0a:	6002      	str	r2, [r0, #0]
 801ac0c:	e7f9      	b.n	801ac02 <_calloc_r+0x12>
 801ac0e:	462a      	mov	r2, r5
 801ac10:	4621      	mov	r1, r4
 801ac12:	f000 fccf 	bl	801b5b4 <memset>
 801ac16:	e7f5      	b.n	801ac04 <_calloc_r+0x14>

0801ac18 <exit>:
 801ac18:	b508      	push	{r3, lr}
 801ac1a:	4b06      	ldr	r3, [pc, #24]	@ (801ac34 <exit+0x1c>)
 801ac1c:	4604      	mov	r4, r0
 801ac1e:	b113      	cbz	r3, 801ac26 <exit+0xe>
 801ac20:	2100      	movs	r1, #0
 801ac22:	f3af 8000 	nop.w
 801ac26:	4b04      	ldr	r3, [pc, #16]	@ (801ac38 <exit+0x20>)
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	b103      	cbz	r3, 801ac2e <exit+0x16>
 801ac2c:	4798      	blx	r3
 801ac2e:	4620      	mov	r0, r4
 801ac30:	f7e7 ffd8 	bl	8002be4 <_exit>
 801ac34:	00000000 	.word	0x00000000
 801ac38:	2000c778 	.word	0x2000c778

0801ac3c <getenv>:
 801ac3c:	b507      	push	{r0, r1, r2, lr}
 801ac3e:	4b04      	ldr	r3, [pc, #16]	@ (801ac50 <getenv+0x14>)
 801ac40:	4601      	mov	r1, r0
 801ac42:	aa01      	add	r2, sp, #4
 801ac44:	6818      	ldr	r0, [r3, #0]
 801ac46:	f000 f805 	bl	801ac54 <_findenv_r>
 801ac4a:	b003      	add	sp, #12
 801ac4c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac50:	20000ba0 	.word	0x20000ba0

0801ac54 <_findenv_r>:
 801ac54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac58:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801acc8 <_findenv_r+0x74>
 801ac5c:	4606      	mov	r6, r0
 801ac5e:	4689      	mov	r9, r1
 801ac60:	4617      	mov	r7, r2
 801ac62:	f000 fd9d 	bl	801b7a0 <__env_lock>
 801ac66:	f8da 4000 	ldr.w	r4, [sl]
 801ac6a:	b134      	cbz	r4, 801ac7a <_findenv_r+0x26>
 801ac6c:	464b      	mov	r3, r9
 801ac6e:	4698      	mov	r8, r3
 801ac70:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac74:	b13a      	cbz	r2, 801ac86 <_findenv_r+0x32>
 801ac76:	2a3d      	cmp	r2, #61	@ 0x3d
 801ac78:	d1f9      	bne.n	801ac6e <_findenv_r+0x1a>
 801ac7a:	4630      	mov	r0, r6
 801ac7c:	f000 fd96 	bl	801b7ac <__env_unlock>
 801ac80:	2000      	movs	r0, #0
 801ac82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac86:	eba8 0809 	sub.w	r8, r8, r9
 801ac8a:	46a3      	mov	fp, r4
 801ac8c:	f854 0b04 	ldr.w	r0, [r4], #4
 801ac90:	2800      	cmp	r0, #0
 801ac92:	d0f2      	beq.n	801ac7a <_findenv_r+0x26>
 801ac94:	4642      	mov	r2, r8
 801ac96:	4649      	mov	r1, r9
 801ac98:	f000 fca1 	bl	801b5de <strncmp>
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	d1f4      	bne.n	801ac8a <_findenv_r+0x36>
 801aca0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801aca4:	eb03 0508 	add.w	r5, r3, r8
 801aca8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801acac:	2b3d      	cmp	r3, #61	@ 0x3d
 801acae:	d1ec      	bne.n	801ac8a <_findenv_r+0x36>
 801acb0:	f8da 3000 	ldr.w	r3, [sl]
 801acb4:	ebab 0303 	sub.w	r3, fp, r3
 801acb8:	109b      	asrs	r3, r3, #2
 801acba:	4630      	mov	r0, r6
 801acbc:	603b      	str	r3, [r7, #0]
 801acbe:	f000 fd75 	bl	801b7ac <__env_unlock>
 801acc2:	1c68      	adds	r0, r5, #1
 801acc4:	e7dd      	b.n	801ac82 <_findenv_r+0x2e>
 801acc6:	bf00      	nop
 801acc8:	20000004 	.word	0x20000004

0801accc <malloc>:
 801accc:	4b02      	ldr	r3, [pc, #8]	@ (801acd8 <malloc+0xc>)
 801acce:	4601      	mov	r1, r0
 801acd0:	6818      	ldr	r0, [r3, #0]
 801acd2:	f000 b82d 	b.w	801ad30 <_malloc_r>
 801acd6:	bf00      	nop
 801acd8:	20000ba0 	.word	0x20000ba0

0801acdc <free>:
 801acdc:	4b02      	ldr	r3, [pc, #8]	@ (801ace8 <free+0xc>)
 801acde:	4601      	mov	r1, r0
 801ace0:	6818      	ldr	r0, [r3, #0]
 801ace2:	f000 bd69 	b.w	801b7b8 <_free_r>
 801ace6:	bf00      	nop
 801ace8:	20000ba0 	.word	0x20000ba0

0801acec <sbrk_aligned>:
 801acec:	b570      	push	{r4, r5, r6, lr}
 801acee:	4e0f      	ldr	r6, [pc, #60]	@ (801ad2c <sbrk_aligned+0x40>)
 801acf0:	460c      	mov	r4, r1
 801acf2:	6831      	ldr	r1, [r6, #0]
 801acf4:	4605      	mov	r5, r0
 801acf6:	b911      	cbnz	r1, 801acfe <sbrk_aligned+0x12>
 801acf8:	f000 fcce 	bl	801b698 <_sbrk_r>
 801acfc:	6030      	str	r0, [r6, #0]
 801acfe:	4621      	mov	r1, r4
 801ad00:	4628      	mov	r0, r5
 801ad02:	f000 fcc9 	bl	801b698 <_sbrk_r>
 801ad06:	1c43      	adds	r3, r0, #1
 801ad08:	d103      	bne.n	801ad12 <sbrk_aligned+0x26>
 801ad0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ad0e:	4620      	mov	r0, r4
 801ad10:	bd70      	pop	{r4, r5, r6, pc}
 801ad12:	1cc4      	adds	r4, r0, #3
 801ad14:	f024 0403 	bic.w	r4, r4, #3
 801ad18:	42a0      	cmp	r0, r4
 801ad1a:	d0f8      	beq.n	801ad0e <sbrk_aligned+0x22>
 801ad1c:	1a21      	subs	r1, r4, r0
 801ad1e:	4628      	mov	r0, r5
 801ad20:	f000 fcba 	bl	801b698 <_sbrk_r>
 801ad24:	3001      	adds	r0, #1
 801ad26:	d1f2      	bne.n	801ad0e <sbrk_aligned+0x22>
 801ad28:	e7ef      	b.n	801ad0a <sbrk_aligned+0x1e>
 801ad2a:	bf00      	nop
 801ad2c:	2000c638 	.word	0x2000c638

0801ad30 <_malloc_r>:
 801ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad34:	1ccd      	adds	r5, r1, #3
 801ad36:	f025 0503 	bic.w	r5, r5, #3
 801ad3a:	3508      	adds	r5, #8
 801ad3c:	2d0c      	cmp	r5, #12
 801ad3e:	bf38      	it	cc
 801ad40:	250c      	movcc	r5, #12
 801ad42:	2d00      	cmp	r5, #0
 801ad44:	4606      	mov	r6, r0
 801ad46:	db01      	blt.n	801ad4c <_malloc_r+0x1c>
 801ad48:	42a9      	cmp	r1, r5
 801ad4a:	d904      	bls.n	801ad56 <_malloc_r+0x26>
 801ad4c:	230c      	movs	r3, #12
 801ad4e:	6033      	str	r3, [r6, #0]
 801ad50:	2000      	movs	r0, #0
 801ad52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ae2c <_malloc_r+0xfc>
 801ad5a:	f000 f869 	bl	801ae30 <__malloc_lock>
 801ad5e:	f8d8 3000 	ldr.w	r3, [r8]
 801ad62:	461c      	mov	r4, r3
 801ad64:	bb44      	cbnz	r4, 801adb8 <_malloc_r+0x88>
 801ad66:	4629      	mov	r1, r5
 801ad68:	4630      	mov	r0, r6
 801ad6a:	f7ff ffbf 	bl	801acec <sbrk_aligned>
 801ad6e:	1c43      	adds	r3, r0, #1
 801ad70:	4604      	mov	r4, r0
 801ad72:	d158      	bne.n	801ae26 <_malloc_r+0xf6>
 801ad74:	f8d8 4000 	ldr.w	r4, [r8]
 801ad78:	4627      	mov	r7, r4
 801ad7a:	2f00      	cmp	r7, #0
 801ad7c:	d143      	bne.n	801ae06 <_malloc_r+0xd6>
 801ad7e:	2c00      	cmp	r4, #0
 801ad80:	d04b      	beq.n	801ae1a <_malloc_r+0xea>
 801ad82:	6823      	ldr	r3, [r4, #0]
 801ad84:	4639      	mov	r1, r7
 801ad86:	4630      	mov	r0, r6
 801ad88:	eb04 0903 	add.w	r9, r4, r3
 801ad8c:	f000 fc84 	bl	801b698 <_sbrk_r>
 801ad90:	4581      	cmp	r9, r0
 801ad92:	d142      	bne.n	801ae1a <_malloc_r+0xea>
 801ad94:	6821      	ldr	r1, [r4, #0]
 801ad96:	1a6d      	subs	r5, r5, r1
 801ad98:	4629      	mov	r1, r5
 801ad9a:	4630      	mov	r0, r6
 801ad9c:	f7ff ffa6 	bl	801acec <sbrk_aligned>
 801ada0:	3001      	adds	r0, #1
 801ada2:	d03a      	beq.n	801ae1a <_malloc_r+0xea>
 801ada4:	6823      	ldr	r3, [r4, #0]
 801ada6:	442b      	add	r3, r5
 801ada8:	6023      	str	r3, [r4, #0]
 801adaa:	f8d8 3000 	ldr.w	r3, [r8]
 801adae:	685a      	ldr	r2, [r3, #4]
 801adb0:	bb62      	cbnz	r2, 801ae0c <_malloc_r+0xdc>
 801adb2:	f8c8 7000 	str.w	r7, [r8]
 801adb6:	e00f      	b.n	801add8 <_malloc_r+0xa8>
 801adb8:	6822      	ldr	r2, [r4, #0]
 801adba:	1b52      	subs	r2, r2, r5
 801adbc:	d420      	bmi.n	801ae00 <_malloc_r+0xd0>
 801adbe:	2a0b      	cmp	r2, #11
 801adc0:	d917      	bls.n	801adf2 <_malloc_r+0xc2>
 801adc2:	1961      	adds	r1, r4, r5
 801adc4:	42a3      	cmp	r3, r4
 801adc6:	6025      	str	r5, [r4, #0]
 801adc8:	bf18      	it	ne
 801adca:	6059      	strne	r1, [r3, #4]
 801adcc:	6863      	ldr	r3, [r4, #4]
 801adce:	bf08      	it	eq
 801add0:	f8c8 1000 	streq.w	r1, [r8]
 801add4:	5162      	str	r2, [r4, r5]
 801add6:	604b      	str	r3, [r1, #4]
 801add8:	4630      	mov	r0, r6
 801adda:	f000 f82f 	bl	801ae3c <__malloc_unlock>
 801adde:	f104 000b 	add.w	r0, r4, #11
 801ade2:	1d23      	adds	r3, r4, #4
 801ade4:	f020 0007 	bic.w	r0, r0, #7
 801ade8:	1ac2      	subs	r2, r0, r3
 801adea:	bf1c      	itt	ne
 801adec:	1a1b      	subne	r3, r3, r0
 801adee:	50a3      	strne	r3, [r4, r2]
 801adf0:	e7af      	b.n	801ad52 <_malloc_r+0x22>
 801adf2:	6862      	ldr	r2, [r4, #4]
 801adf4:	42a3      	cmp	r3, r4
 801adf6:	bf0c      	ite	eq
 801adf8:	f8c8 2000 	streq.w	r2, [r8]
 801adfc:	605a      	strne	r2, [r3, #4]
 801adfe:	e7eb      	b.n	801add8 <_malloc_r+0xa8>
 801ae00:	4623      	mov	r3, r4
 801ae02:	6864      	ldr	r4, [r4, #4]
 801ae04:	e7ae      	b.n	801ad64 <_malloc_r+0x34>
 801ae06:	463c      	mov	r4, r7
 801ae08:	687f      	ldr	r7, [r7, #4]
 801ae0a:	e7b6      	b.n	801ad7a <_malloc_r+0x4a>
 801ae0c:	461a      	mov	r2, r3
 801ae0e:	685b      	ldr	r3, [r3, #4]
 801ae10:	42a3      	cmp	r3, r4
 801ae12:	d1fb      	bne.n	801ae0c <_malloc_r+0xdc>
 801ae14:	2300      	movs	r3, #0
 801ae16:	6053      	str	r3, [r2, #4]
 801ae18:	e7de      	b.n	801add8 <_malloc_r+0xa8>
 801ae1a:	230c      	movs	r3, #12
 801ae1c:	6033      	str	r3, [r6, #0]
 801ae1e:	4630      	mov	r0, r6
 801ae20:	f000 f80c 	bl	801ae3c <__malloc_unlock>
 801ae24:	e794      	b.n	801ad50 <_malloc_r+0x20>
 801ae26:	6005      	str	r5, [r0, #0]
 801ae28:	e7d6      	b.n	801add8 <_malloc_r+0xa8>
 801ae2a:	bf00      	nop
 801ae2c:	2000c63c 	.word	0x2000c63c

0801ae30 <__malloc_lock>:
 801ae30:	4801      	ldr	r0, [pc, #4]	@ (801ae38 <__malloc_lock+0x8>)
 801ae32:	f000 bc7e 	b.w	801b732 <__retarget_lock_acquire_recursive>
 801ae36:	bf00      	nop
 801ae38:	2000c781 	.word	0x2000c781

0801ae3c <__malloc_unlock>:
 801ae3c:	4801      	ldr	r0, [pc, #4]	@ (801ae44 <__malloc_unlock+0x8>)
 801ae3e:	f000 bc79 	b.w	801b734 <__retarget_lock_release_recursive>
 801ae42:	bf00      	nop
 801ae44:	2000c781 	.word	0x2000c781

0801ae48 <srand>:
 801ae48:	b538      	push	{r3, r4, r5, lr}
 801ae4a:	4b10      	ldr	r3, [pc, #64]	@ (801ae8c <srand+0x44>)
 801ae4c:	681d      	ldr	r5, [r3, #0]
 801ae4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ae50:	4604      	mov	r4, r0
 801ae52:	b9b3      	cbnz	r3, 801ae82 <srand+0x3a>
 801ae54:	2018      	movs	r0, #24
 801ae56:	f7ff ff39 	bl	801accc <malloc>
 801ae5a:	4602      	mov	r2, r0
 801ae5c:	6328      	str	r0, [r5, #48]	@ 0x30
 801ae5e:	b920      	cbnz	r0, 801ae6a <srand+0x22>
 801ae60:	4b0b      	ldr	r3, [pc, #44]	@ (801ae90 <srand+0x48>)
 801ae62:	480c      	ldr	r0, [pc, #48]	@ (801ae94 <srand+0x4c>)
 801ae64:	2146      	movs	r1, #70	@ 0x46
 801ae66:	f000 fc7d 	bl	801b764 <__assert_func>
 801ae6a:	490b      	ldr	r1, [pc, #44]	@ (801ae98 <srand+0x50>)
 801ae6c:	4b0b      	ldr	r3, [pc, #44]	@ (801ae9c <srand+0x54>)
 801ae6e:	e9c0 1300 	strd	r1, r3, [r0]
 801ae72:	4b0b      	ldr	r3, [pc, #44]	@ (801aea0 <srand+0x58>)
 801ae74:	6083      	str	r3, [r0, #8]
 801ae76:	230b      	movs	r3, #11
 801ae78:	8183      	strh	r3, [r0, #12]
 801ae7a:	2100      	movs	r1, #0
 801ae7c:	2001      	movs	r0, #1
 801ae7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ae82:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ae84:	2200      	movs	r2, #0
 801ae86:	611c      	str	r4, [r3, #16]
 801ae88:	615a      	str	r2, [r3, #20]
 801ae8a:	bd38      	pop	{r3, r4, r5, pc}
 801ae8c:	20000ba0 	.word	0x20000ba0
 801ae90:	0801f536 	.word	0x0801f536
 801ae94:	0801f54d 	.word	0x0801f54d
 801ae98:	abcd330e 	.word	0xabcd330e
 801ae9c:	e66d1234 	.word	0xe66d1234
 801aea0:	0005deec 	.word	0x0005deec

0801aea4 <rand>:
 801aea4:	4b16      	ldr	r3, [pc, #88]	@ (801af00 <rand+0x5c>)
 801aea6:	b510      	push	{r4, lr}
 801aea8:	681c      	ldr	r4, [r3, #0]
 801aeaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801aeac:	b9b3      	cbnz	r3, 801aedc <rand+0x38>
 801aeae:	2018      	movs	r0, #24
 801aeb0:	f7ff ff0c 	bl	801accc <malloc>
 801aeb4:	4602      	mov	r2, r0
 801aeb6:	6320      	str	r0, [r4, #48]	@ 0x30
 801aeb8:	b920      	cbnz	r0, 801aec4 <rand+0x20>
 801aeba:	4b12      	ldr	r3, [pc, #72]	@ (801af04 <rand+0x60>)
 801aebc:	4812      	ldr	r0, [pc, #72]	@ (801af08 <rand+0x64>)
 801aebe:	2152      	movs	r1, #82	@ 0x52
 801aec0:	f000 fc50 	bl	801b764 <__assert_func>
 801aec4:	4911      	ldr	r1, [pc, #68]	@ (801af0c <rand+0x68>)
 801aec6:	4b12      	ldr	r3, [pc, #72]	@ (801af10 <rand+0x6c>)
 801aec8:	e9c0 1300 	strd	r1, r3, [r0]
 801aecc:	4b11      	ldr	r3, [pc, #68]	@ (801af14 <rand+0x70>)
 801aece:	6083      	str	r3, [r0, #8]
 801aed0:	230b      	movs	r3, #11
 801aed2:	8183      	strh	r3, [r0, #12]
 801aed4:	2100      	movs	r1, #0
 801aed6:	2001      	movs	r0, #1
 801aed8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801aedc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801aede:	480e      	ldr	r0, [pc, #56]	@ (801af18 <rand+0x74>)
 801aee0:	690b      	ldr	r3, [r1, #16]
 801aee2:	694c      	ldr	r4, [r1, #20]
 801aee4:	4a0d      	ldr	r2, [pc, #52]	@ (801af1c <rand+0x78>)
 801aee6:	4358      	muls	r0, r3
 801aee8:	fb02 0004 	mla	r0, r2, r4, r0
 801aeec:	fba3 3202 	umull	r3, r2, r3, r2
 801aef0:	3301      	adds	r3, #1
 801aef2:	eb40 0002 	adc.w	r0, r0, r2
 801aef6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801aefa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801aefe:	bd10      	pop	{r4, pc}
 801af00:	20000ba0 	.word	0x20000ba0
 801af04:	0801f536 	.word	0x0801f536
 801af08:	0801f54d 	.word	0x0801f54d
 801af0c:	abcd330e 	.word	0xabcd330e
 801af10:	e66d1234 	.word	0xe66d1234
 801af14:	0005deec 	.word	0x0005deec
 801af18:	5851f42d 	.word	0x5851f42d
 801af1c:	4c957f2d 	.word	0x4c957f2d

0801af20 <realloc>:
 801af20:	4b02      	ldr	r3, [pc, #8]	@ (801af2c <realloc+0xc>)
 801af22:	460a      	mov	r2, r1
 801af24:	4601      	mov	r1, r0
 801af26:	6818      	ldr	r0, [r3, #0]
 801af28:	f000 b802 	b.w	801af30 <_realloc_r>
 801af2c:	20000ba0 	.word	0x20000ba0

0801af30 <_realloc_r>:
 801af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af34:	4680      	mov	r8, r0
 801af36:	4615      	mov	r5, r2
 801af38:	460c      	mov	r4, r1
 801af3a:	b921      	cbnz	r1, 801af46 <_realloc_r+0x16>
 801af3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af40:	4611      	mov	r1, r2
 801af42:	f7ff bef5 	b.w	801ad30 <_malloc_r>
 801af46:	b92a      	cbnz	r2, 801af54 <_realloc_r+0x24>
 801af48:	f000 fc36 	bl	801b7b8 <_free_r>
 801af4c:	2400      	movs	r4, #0
 801af4e:	4620      	mov	r0, r4
 801af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af54:	f000 fc7a 	bl	801b84c <_malloc_usable_size_r>
 801af58:	4285      	cmp	r5, r0
 801af5a:	4606      	mov	r6, r0
 801af5c:	d802      	bhi.n	801af64 <_realloc_r+0x34>
 801af5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801af62:	d8f4      	bhi.n	801af4e <_realloc_r+0x1e>
 801af64:	4629      	mov	r1, r5
 801af66:	4640      	mov	r0, r8
 801af68:	f7ff fee2 	bl	801ad30 <_malloc_r>
 801af6c:	4607      	mov	r7, r0
 801af6e:	2800      	cmp	r0, #0
 801af70:	d0ec      	beq.n	801af4c <_realloc_r+0x1c>
 801af72:	42b5      	cmp	r5, r6
 801af74:	462a      	mov	r2, r5
 801af76:	4621      	mov	r1, r4
 801af78:	bf28      	it	cs
 801af7a:	4632      	movcs	r2, r6
 801af7c:	f000 fbe3 	bl	801b746 <memcpy>
 801af80:	4621      	mov	r1, r4
 801af82:	4640      	mov	r0, r8
 801af84:	f000 fc18 	bl	801b7b8 <_free_r>
 801af88:	463c      	mov	r4, r7
 801af8a:	e7e0      	b.n	801af4e <_realloc_r+0x1e>

0801af8c <_strtoul_l.constprop.0>:
 801af8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af90:	4e34      	ldr	r6, [pc, #208]	@ (801b064 <_strtoul_l.constprop.0+0xd8>)
 801af92:	4686      	mov	lr, r0
 801af94:	460d      	mov	r5, r1
 801af96:	4628      	mov	r0, r5
 801af98:	f815 4b01 	ldrb.w	r4, [r5], #1
 801af9c:	5d37      	ldrb	r7, [r6, r4]
 801af9e:	f017 0708 	ands.w	r7, r7, #8
 801afa2:	d1f8      	bne.n	801af96 <_strtoul_l.constprop.0+0xa>
 801afa4:	2c2d      	cmp	r4, #45	@ 0x2d
 801afa6:	d12f      	bne.n	801b008 <_strtoul_l.constprop.0+0x7c>
 801afa8:	782c      	ldrb	r4, [r5, #0]
 801afaa:	2701      	movs	r7, #1
 801afac:	1c85      	adds	r5, r0, #2
 801afae:	f033 0010 	bics.w	r0, r3, #16
 801afb2:	d109      	bne.n	801afc8 <_strtoul_l.constprop.0+0x3c>
 801afb4:	2c30      	cmp	r4, #48	@ 0x30
 801afb6:	d12c      	bne.n	801b012 <_strtoul_l.constprop.0+0x86>
 801afb8:	7828      	ldrb	r0, [r5, #0]
 801afba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801afbe:	2858      	cmp	r0, #88	@ 0x58
 801afc0:	d127      	bne.n	801b012 <_strtoul_l.constprop.0+0x86>
 801afc2:	786c      	ldrb	r4, [r5, #1]
 801afc4:	2310      	movs	r3, #16
 801afc6:	3502      	adds	r5, #2
 801afc8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801afcc:	2600      	movs	r6, #0
 801afce:	fbb8 f8f3 	udiv	r8, r8, r3
 801afd2:	fb03 f908 	mul.w	r9, r3, r8
 801afd6:	ea6f 0909 	mvn.w	r9, r9
 801afda:	4630      	mov	r0, r6
 801afdc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801afe0:	f1bc 0f09 	cmp.w	ip, #9
 801afe4:	d81c      	bhi.n	801b020 <_strtoul_l.constprop.0+0x94>
 801afe6:	4664      	mov	r4, ip
 801afe8:	42a3      	cmp	r3, r4
 801afea:	dd2a      	ble.n	801b042 <_strtoul_l.constprop.0+0xb6>
 801afec:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801aff0:	d007      	beq.n	801b002 <_strtoul_l.constprop.0+0x76>
 801aff2:	4580      	cmp	r8, r0
 801aff4:	d322      	bcc.n	801b03c <_strtoul_l.constprop.0+0xb0>
 801aff6:	d101      	bne.n	801affc <_strtoul_l.constprop.0+0x70>
 801aff8:	45a1      	cmp	r9, r4
 801affa:	db1f      	blt.n	801b03c <_strtoul_l.constprop.0+0xb0>
 801affc:	fb00 4003 	mla	r0, r0, r3, r4
 801b000:	2601      	movs	r6, #1
 801b002:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b006:	e7e9      	b.n	801afdc <_strtoul_l.constprop.0+0x50>
 801b008:	2c2b      	cmp	r4, #43	@ 0x2b
 801b00a:	bf04      	itt	eq
 801b00c:	782c      	ldrbeq	r4, [r5, #0]
 801b00e:	1c85      	addeq	r5, r0, #2
 801b010:	e7cd      	b.n	801afae <_strtoul_l.constprop.0+0x22>
 801b012:	2b00      	cmp	r3, #0
 801b014:	d1d8      	bne.n	801afc8 <_strtoul_l.constprop.0+0x3c>
 801b016:	2c30      	cmp	r4, #48	@ 0x30
 801b018:	bf0c      	ite	eq
 801b01a:	2308      	moveq	r3, #8
 801b01c:	230a      	movne	r3, #10
 801b01e:	e7d3      	b.n	801afc8 <_strtoul_l.constprop.0+0x3c>
 801b020:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b024:	f1bc 0f19 	cmp.w	ip, #25
 801b028:	d801      	bhi.n	801b02e <_strtoul_l.constprop.0+0xa2>
 801b02a:	3c37      	subs	r4, #55	@ 0x37
 801b02c:	e7dc      	b.n	801afe8 <_strtoul_l.constprop.0+0x5c>
 801b02e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b032:	f1bc 0f19 	cmp.w	ip, #25
 801b036:	d804      	bhi.n	801b042 <_strtoul_l.constprop.0+0xb6>
 801b038:	3c57      	subs	r4, #87	@ 0x57
 801b03a:	e7d5      	b.n	801afe8 <_strtoul_l.constprop.0+0x5c>
 801b03c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b040:	e7df      	b.n	801b002 <_strtoul_l.constprop.0+0x76>
 801b042:	1c73      	adds	r3, r6, #1
 801b044:	d106      	bne.n	801b054 <_strtoul_l.constprop.0+0xc8>
 801b046:	2322      	movs	r3, #34	@ 0x22
 801b048:	f8ce 3000 	str.w	r3, [lr]
 801b04c:	4630      	mov	r0, r6
 801b04e:	b932      	cbnz	r2, 801b05e <_strtoul_l.constprop.0+0xd2>
 801b050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b054:	b107      	cbz	r7, 801b058 <_strtoul_l.constprop.0+0xcc>
 801b056:	4240      	negs	r0, r0
 801b058:	2a00      	cmp	r2, #0
 801b05a:	d0f9      	beq.n	801b050 <_strtoul_l.constprop.0+0xc4>
 801b05c:	b106      	cbz	r6, 801b060 <_strtoul_l.constprop.0+0xd4>
 801b05e:	1e69      	subs	r1, r5, #1
 801b060:	6011      	str	r1, [r2, #0]
 801b062:	e7f5      	b.n	801b050 <_strtoul_l.constprop.0+0xc4>
 801b064:	0801f5a6 	.word	0x0801f5a6

0801b068 <strtoul>:
 801b068:	4613      	mov	r3, r2
 801b06a:	460a      	mov	r2, r1
 801b06c:	4601      	mov	r1, r0
 801b06e:	4802      	ldr	r0, [pc, #8]	@ (801b078 <strtoul+0x10>)
 801b070:	6800      	ldr	r0, [r0, #0]
 801b072:	f7ff bf8b 	b.w	801af8c <_strtoul_l.constprop.0>
 801b076:	bf00      	nop
 801b078:	20000ba0 	.word	0x20000ba0

0801b07c <std>:
 801b07c:	2300      	movs	r3, #0
 801b07e:	b510      	push	{r4, lr}
 801b080:	4604      	mov	r4, r0
 801b082:	e9c0 3300 	strd	r3, r3, [r0]
 801b086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b08a:	6083      	str	r3, [r0, #8]
 801b08c:	8181      	strh	r1, [r0, #12]
 801b08e:	6643      	str	r3, [r0, #100]	@ 0x64
 801b090:	81c2      	strh	r2, [r0, #14]
 801b092:	6183      	str	r3, [r0, #24]
 801b094:	4619      	mov	r1, r3
 801b096:	2208      	movs	r2, #8
 801b098:	305c      	adds	r0, #92	@ 0x5c
 801b09a:	f000 fa8b 	bl	801b5b4 <memset>
 801b09e:	4b0d      	ldr	r3, [pc, #52]	@ (801b0d4 <std+0x58>)
 801b0a0:	6263      	str	r3, [r4, #36]	@ 0x24
 801b0a2:	4b0d      	ldr	r3, [pc, #52]	@ (801b0d8 <std+0x5c>)
 801b0a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b0a6:	4b0d      	ldr	r3, [pc, #52]	@ (801b0dc <std+0x60>)
 801b0a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b0aa:	4b0d      	ldr	r3, [pc, #52]	@ (801b0e0 <std+0x64>)
 801b0ac:	6323      	str	r3, [r4, #48]	@ 0x30
 801b0ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b0e4 <std+0x68>)
 801b0b0:	6224      	str	r4, [r4, #32]
 801b0b2:	429c      	cmp	r4, r3
 801b0b4:	d006      	beq.n	801b0c4 <std+0x48>
 801b0b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b0ba:	4294      	cmp	r4, r2
 801b0bc:	d002      	beq.n	801b0c4 <std+0x48>
 801b0be:	33d0      	adds	r3, #208	@ 0xd0
 801b0c0:	429c      	cmp	r4, r3
 801b0c2:	d105      	bne.n	801b0d0 <std+0x54>
 801b0c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0cc:	f000 bb30 	b.w	801b730 <__retarget_lock_init_recursive>
 801b0d0:	bd10      	pop	{r4, pc}
 801b0d2:	bf00      	nop
 801b0d4:	0801b341 	.word	0x0801b341
 801b0d8:	0801b363 	.word	0x0801b363
 801b0dc:	0801b39b 	.word	0x0801b39b
 801b0e0:	0801b3bf 	.word	0x0801b3bf
 801b0e4:	2000c640 	.word	0x2000c640

0801b0e8 <stdio_exit_handler>:
 801b0e8:	4a02      	ldr	r2, [pc, #8]	@ (801b0f4 <stdio_exit_handler+0xc>)
 801b0ea:	4903      	ldr	r1, [pc, #12]	@ (801b0f8 <stdio_exit_handler+0x10>)
 801b0ec:	4803      	ldr	r0, [pc, #12]	@ (801b0fc <stdio_exit_handler+0x14>)
 801b0ee:	f000 b869 	b.w	801b1c4 <_fwalk_sglue>
 801b0f2:	bf00      	nop
 801b0f4:	20000b94 	.word	0x20000b94
 801b0f8:	0801c1b5 	.word	0x0801c1b5
 801b0fc:	20000ba4 	.word	0x20000ba4

0801b100 <cleanup_stdio>:
 801b100:	6841      	ldr	r1, [r0, #4]
 801b102:	4b0c      	ldr	r3, [pc, #48]	@ (801b134 <cleanup_stdio+0x34>)
 801b104:	4299      	cmp	r1, r3
 801b106:	b510      	push	{r4, lr}
 801b108:	4604      	mov	r4, r0
 801b10a:	d001      	beq.n	801b110 <cleanup_stdio+0x10>
 801b10c:	f001 f852 	bl	801c1b4 <_fflush_r>
 801b110:	68a1      	ldr	r1, [r4, #8]
 801b112:	4b09      	ldr	r3, [pc, #36]	@ (801b138 <cleanup_stdio+0x38>)
 801b114:	4299      	cmp	r1, r3
 801b116:	d002      	beq.n	801b11e <cleanup_stdio+0x1e>
 801b118:	4620      	mov	r0, r4
 801b11a:	f001 f84b 	bl	801c1b4 <_fflush_r>
 801b11e:	68e1      	ldr	r1, [r4, #12]
 801b120:	4b06      	ldr	r3, [pc, #24]	@ (801b13c <cleanup_stdio+0x3c>)
 801b122:	4299      	cmp	r1, r3
 801b124:	d004      	beq.n	801b130 <cleanup_stdio+0x30>
 801b126:	4620      	mov	r0, r4
 801b128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b12c:	f001 b842 	b.w	801c1b4 <_fflush_r>
 801b130:	bd10      	pop	{r4, pc}
 801b132:	bf00      	nop
 801b134:	2000c640 	.word	0x2000c640
 801b138:	2000c6a8 	.word	0x2000c6a8
 801b13c:	2000c710 	.word	0x2000c710

0801b140 <global_stdio_init.part.0>:
 801b140:	b510      	push	{r4, lr}
 801b142:	4b0b      	ldr	r3, [pc, #44]	@ (801b170 <global_stdio_init.part.0+0x30>)
 801b144:	4c0b      	ldr	r4, [pc, #44]	@ (801b174 <global_stdio_init.part.0+0x34>)
 801b146:	4a0c      	ldr	r2, [pc, #48]	@ (801b178 <global_stdio_init.part.0+0x38>)
 801b148:	601a      	str	r2, [r3, #0]
 801b14a:	4620      	mov	r0, r4
 801b14c:	2200      	movs	r2, #0
 801b14e:	2104      	movs	r1, #4
 801b150:	f7ff ff94 	bl	801b07c <std>
 801b154:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b158:	2201      	movs	r2, #1
 801b15a:	2109      	movs	r1, #9
 801b15c:	f7ff ff8e 	bl	801b07c <std>
 801b160:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b164:	2202      	movs	r2, #2
 801b166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b16a:	2112      	movs	r1, #18
 801b16c:	f7ff bf86 	b.w	801b07c <std>
 801b170:	2000c778 	.word	0x2000c778
 801b174:	2000c640 	.word	0x2000c640
 801b178:	0801b0e9 	.word	0x0801b0e9

0801b17c <__sfp_lock_acquire>:
 801b17c:	4801      	ldr	r0, [pc, #4]	@ (801b184 <__sfp_lock_acquire+0x8>)
 801b17e:	f000 bad8 	b.w	801b732 <__retarget_lock_acquire_recursive>
 801b182:	bf00      	nop
 801b184:	2000c782 	.word	0x2000c782

0801b188 <__sfp_lock_release>:
 801b188:	4801      	ldr	r0, [pc, #4]	@ (801b190 <__sfp_lock_release+0x8>)
 801b18a:	f000 bad3 	b.w	801b734 <__retarget_lock_release_recursive>
 801b18e:	bf00      	nop
 801b190:	2000c782 	.word	0x2000c782

0801b194 <__sinit>:
 801b194:	b510      	push	{r4, lr}
 801b196:	4604      	mov	r4, r0
 801b198:	f7ff fff0 	bl	801b17c <__sfp_lock_acquire>
 801b19c:	6a23      	ldr	r3, [r4, #32]
 801b19e:	b11b      	cbz	r3, 801b1a8 <__sinit+0x14>
 801b1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1a4:	f7ff bff0 	b.w	801b188 <__sfp_lock_release>
 801b1a8:	4b04      	ldr	r3, [pc, #16]	@ (801b1bc <__sinit+0x28>)
 801b1aa:	6223      	str	r3, [r4, #32]
 801b1ac:	4b04      	ldr	r3, [pc, #16]	@ (801b1c0 <__sinit+0x2c>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d1f5      	bne.n	801b1a0 <__sinit+0xc>
 801b1b4:	f7ff ffc4 	bl	801b140 <global_stdio_init.part.0>
 801b1b8:	e7f2      	b.n	801b1a0 <__sinit+0xc>
 801b1ba:	bf00      	nop
 801b1bc:	0801b101 	.word	0x0801b101
 801b1c0:	2000c778 	.word	0x2000c778

0801b1c4 <_fwalk_sglue>:
 801b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1c8:	4607      	mov	r7, r0
 801b1ca:	4688      	mov	r8, r1
 801b1cc:	4614      	mov	r4, r2
 801b1ce:	2600      	movs	r6, #0
 801b1d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1d4:	f1b9 0901 	subs.w	r9, r9, #1
 801b1d8:	d505      	bpl.n	801b1e6 <_fwalk_sglue+0x22>
 801b1da:	6824      	ldr	r4, [r4, #0]
 801b1dc:	2c00      	cmp	r4, #0
 801b1de:	d1f7      	bne.n	801b1d0 <_fwalk_sglue+0xc>
 801b1e0:	4630      	mov	r0, r6
 801b1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1e6:	89ab      	ldrh	r3, [r5, #12]
 801b1e8:	2b01      	cmp	r3, #1
 801b1ea:	d907      	bls.n	801b1fc <_fwalk_sglue+0x38>
 801b1ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1f0:	3301      	adds	r3, #1
 801b1f2:	d003      	beq.n	801b1fc <_fwalk_sglue+0x38>
 801b1f4:	4629      	mov	r1, r5
 801b1f6:	4638      	mov	r0, r7
 801b1f8:	47c0      	blx	r8
 801b1fa:	4306      	orrs	r6, r0
 801b1fc:	3568      	adds	r5, #104	@ 0x68
 801b1fe:	e7e9      	b.n	801b1d4 <_fwalk_sglue+0x10>

0801b200 <_fwrite_r>:
 801b200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b204:	9c08      	ldr	r4, [sp, #32]
 801b206:	468a      	mov	sl, r1
 801b208:	4690      	mov	r8, r2
 801b20a:	fb02 f903 	mul.w	r9, r2, r3
 801b20e:	4606      	mov	r6, r0
 801b210:	b118      	cbz	r0, 801b21a <_fwrite_r+0x1a>
 801b212:	6a03      	ldr	r3, [r0, #32]
 801b214:	b90b      	cbnz	r3, 801b21a <_fwrite_r+0x1a>
 801b216:	f7ff ffbd 	bl	801b194 <__sinit>
 801b21a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b21c:	07dd      	lsls	r5, r3, #31
 801b21e:	d405      	bmi.n	801b22c <_fwrite_r+0x2c>
 801b220:	89a3      	ldrh	r3, [r4, #12]
 801b222:	0598      	lsls	r0, r3, #22
 801b224:	d402      	bmi.n	801b22c <_fwrite_r+0x2c>
 801b226:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b228:	f000 fa83 	bl	801b732 <__retarget_lock_acquire_recursive>
 801b22c:	89a3      	ldrh	r3, [r4, #12]
 801b22e:	0719      	lsls	r1, r3, #28
 801b230:	d516      	bpl.n	801b260 <_fwrite_r+0x60>
 801b232:	6923      	ldr	r3, [r4, #16]
 801b234:	b1a3      	cbz	r3, 801b260 <_fwrite_r+0x60>
 801b236:	2500      	movs	r5, #0
 801b238:	454d      	cmp	r5, r9
 801b23a:	d01f      	beq.n	801b27c <_fwrite_r+0x7c>
 801b23c:	68a7      	ldr	r7, [r4, #8]
 801b23e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b242:	3f01      	subs	r7, #1
 801b244:	2f00      	cmp	r7, #0
 801b246:	60a7      	str	r7, [r4, #8]
 801b248:	da04      	bge.n	801b254 <_fwrite_r+0x54>
 801b24a:	69a3      	ldr	r3, [r4, #24]
 801b24c:	429f      	cmp	r7, r3
 801b24e:	db0f      	blt.n	801b270 <_fwrite_r+0x70>
 801b250:	290a      	cmp	r1, #10
 801b252:	d00d      	beq.n	801b270 <_fwrite_r+0x70>
 801b254:	6823      	ldr	r3, [r4, #0]
 801b256:	1c5a      	adds	r2, r3, #1
 801b258:	6022      	str	r2, [r4, #0]
 801b25a:	7019      	strb	r1, [r3, #0]
 801b25c:	3501      	adds	r5, #1
 801b25e:	e7eb      	b.n	801b238 <_fwrite_r+0x38>
 801b260:	4621      	mov	r1, r4
 801b262:	4630      	mov	r0, r6
 801b264:	f000 f926 	bl	801b4b4 <__swsetup_r>
 801b268:	2800      	cmp	r0, #0
 801b26a:	d0e4      	beq.n	801b236 <_fwrite_r+0x36>
 801b26c:	2500      	movs	r5, #0
 801b26e:	e005      	b.n	801b27c <_fwrite_r+0x7c>
 801b270:	4622      	mov	r2, r4
 801b272:	4630      	mov	r0, r6
 801b274:	f000 f8e0 	bl	801b438 <__swbuf_r>
 801b278:	3001      	adds	r0, #1
 801b27a:	d1ef      	bne.n	801b25c <_fwrite_r+0x5c>
 801b27c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b27e:	07da      	lsls	r2, r3, #31
 801b280:	d405      	bmi.n	801b28e <_fwrite_r+0x8e>
 801b282:	89a3      	ldrh	r3, [r4, #12]
 801b284:	059b      	lsls	r3, r3, #22
 801b286:	d402      	bmi.n	801b28e <_fwrite_r+0x8e>
 801b288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b28a:	f000 fa53 	bl	801b734 <__retarget_lock_release_recursive>
 801b28e:	fbb5 f0f8 	udiv	r0, r5, r8
 801b292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b298 <fwrite>:
 801b298:	b507      	push	{r0, r1, r2, lr}
 801b29a:	9300      	str	r3, [sp, #0]
 801b29c:	4613      	mov	r3, r2
 801b29e:	460a      	mov	r2, r1
 801b2a0:	4601      	mov	r1, r0
 801b2a2:	4803      	ldr	r0, [pc, #12]	@ (801b2b0 <fwrite+0x18>)
 801b2a4:	6800      	ldr	r0, [r0, #0]
 801b2a6:	f7ff ffab 	bl	801b200 <_fwrite_r>
 801b2aa:	b003      	add	sp, #12
 801b2ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801b2b0:	20000ba0 	.word	0x20000ba0

0801b2b4 <iprintf>:
 801b2b4:	b40f      	push	{r0, r1, r2, r3}
 801b2b6:	b507      	push	{r0, r1, r2, lr}
 801b2b8:	4906      	ldr	r1, [pc, #24]	@ (801b2d4 <iprintf+0x20>)
 801b2ba:	ab04      	add	r3, sp, #16
 801b2bc:	6808      	ldr	r0, [r1, #0]
 801b2be:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2c2:	6881      	ldr	r1, [r0, #8]
 801b2c4:	9301      	str	r3, [sp, #4]
 801b2c6:	f000 fc4b 	bl	801bb60 <_vfiprintf_r>
 801b2ca:	b003      	add	sp, #12
 801b2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2d0:	b004      	add	sp, #16
 801b2d2:	4770      	bx	lr
 801b2d4:	20000ba0 	.word	0x20000ba0

0801b2d8 <sniprintf>:
 801b2d8:	b40c      	push	{r2, r3}
 801b2da:	b530      	push	{r4, r5, lr}
 801b2dc:	4b17      	ldr	r3, [pc, #92]	@ (801b33c <sniprintf+0x64>)
 801b2de:	1e0c      	subs	r4, r1, #0
 801b2e0:	681d      	ldr	r5, [r3, #0]
 801b2e2:	b09d      	sub	sp, #116	@ 0x74
 801b2e4:	da08      	bge.n	801b2f8 <sniprintf+0x20>
 801b2e6:	238b      	movs	r3, #139	@ 0x8b
 801b2e8:	602b      	str	r3, [r5, #0]
 801b2ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b2ee:	b01d      	add	sp, #116	@ 0x74
 801b2f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b2f4:	b002      	add	sp, #8
 801b2f6:	4770      	bx	lr
 801b2f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b2fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b300:	bf14      	ite	ne
 801b302:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b306:	4623      	moveq	r3, r4
 801b308:	9304      	str	r3, [sp, #16]
 801b30a:	9307      	str	r3, [sp, #28]
 801b30c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b310:	9002      	str	r0, [sp, #8]
 801b312:	9006      	str	r0, [sp, #24]
 801b314:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b318:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b31a:	ab21      	add	r3, sp, #132	@ 0x84
 801b31c:	a902      	add	r1, sp, #8
 801b31e:	4628      	mov	r0, r5
 801b320:	9301      	str	r3, [sp, #4]
 801b322:	f000 faf7 	bl	801b914 <_svfiprintf_r>
 801b326:	1c43      	adds	r3, r0, #1
 801b328:	bfbc      	itt	lt
 801b32a:	238b      	movlt	r3, #139	@ 0x8b
 801b32c:	602b      	strlt	r3, [r5, #0]
 801b32e:	2c00      	cmp	r4, #0
 801b330:	d0dd      	beq.n	801b2ee <sniprintf+0x16>
 801b332:	9b02      	ldr	r3, [sp, #8]
 801b334:	2200      	movs	r2, #0
 801b336:	701a      	strb	r2, [r3, #0]
 801b338:	e7d9      	b.n	801b2ee <sniprintf+0x16>
 801b33a:	bf00      	nop
 801b33c:	20000ba0 	.word	0x20000ba0

0801b340 <__sread>:
 801b340:	b510      	push	{r4, lr}
 801b342:	460c      	mov	r4, r1
 801b344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b348:	f000 f994 	bl	801b674 <_read_r>
 801b34c:	2800      	cmp	r0, #0
 801b34e:	bfab      	itete	ge
 801b350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b352:	89a3      	ldrhlt	r3, [r4, #12]
 801b354:	181b      	addge	r3, r3, r0
 801b356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b35a:	bfac      	ite	ge
 801b35c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b35e:	81a3      	strhlt	r3, [r4, #12]
 801b360:	bd10      	pop	{r4, pc}

0801b362 <__swrite>:
 801b362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b366:	461f      	mov	r7, r3
 801b368:	898b      	ldrh	r3, [r1, #12]
 801b36a:	05db      	lsls	r3, r3, #23
 801b36c:	4605      	mov	r5, r0
 801b36e:	460c      	mov	r4, r1
 801b370:	4616      	mov	r6, r2
 801b372:	d505      	bpl.n	801b380 <__swrite+0x1e>
 801b374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b378:	2302      	movs	r3, #2
 801b37a:	2200      	movs	r2, #0
 801b37c:	f000 f968 	bl	801b650 <_lseek_r>
 801b380:	89a3      	ldrh	r3, [r4, #12]
 801b382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b38a:	81a3      	strh	r3, [r4, #12]
 801b38c:	4632      	mov	r2, r6
 801b38e:	463b      	mov	r3, r7
 801b390:	4628      	mov	r0, r5
 801b392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b396:	f000 b98f 	b.w	801b6b8 <_write_r>

0801b39a <__sseek>:
 801b39a:	b510      	push	{r4, lr}
 801b39c:	460c      	mov	r4, r1
 801b39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3a2:	f000 f955 	bl	801b650 <_lseek_r>
 801b3a6:	1c43      	adds	r3, r0, #1
 801b3a8:	89a3      	ldrh	r3, [r4, #12]
 801b3aa:	bf15      	itete	ne
 801b3ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b3ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b3b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b3b6:	81a3      	strheq	r3, [r4, #12]
 801b3b8:	bf18      	it	ne
 801b3ba:	81a3      	strhne	r3, [r4, #12]
 801b3bc:	bd10      	pop	{r4, pc}

0801b3be <__sclose>:
 801b3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3c2:	f000 b935 	b.w	801b630 <_close_r>

0801b3c6 <_vsniprintf_r>:
 801b3c6:	b530      	push	{r4, r5, lr}
 801b3c8:	4614      	mov	r4, r2
 801b3ca:	2c00      	cmp	r4, #0
 801b3cc:	b09b      	sub	sp, #108	@ 0x6c
 801b3ce:	4605      	mov	r5, r0
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	da05      	bge.n	801b3e0 <_vsniprintf_r+0x1a>
 801b3d4:	238b      	movs	r3, #139	@ 0x8b
 801b3d6:	6003      	str	r3, [r0, #0]
 801b3d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b3dc:	b01b      	add	sp, #108	@ 0x6c
 801b3de:	bd30      	pop	{r4, r5, pc}
 801b3e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b3e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b3e8:	bf14      	ite	ne
 801b3ea:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b3ee:	4623      	moveq	r3, r4
 801b3f0:	9302      	str	r3, [sp, #8]
 801b3f2:	9305      	str	r3, [sp, #20]
 801b3f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b3f8:	9100      	str	r1, [sp, #0]
 801b3fa:	9104      	str	r1, [sp, #16]
 801b3fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b400:	4669      	mov	r1, sp
 801b402:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b404:	f000 fa86 	bl	801b914 <_svfiprintf_r>
 801b408:	1c43      	adds	r3, r0, #1
 801b40a:	bfbc      	itt	lt
 801b40c:	238b      	movlt	r3, #139	@ 0x8b
 801b40e:	602b      	strlt	r3, [r5, #0]
 801b410:	2c00      	cmp	r4, #0
 801b412:	d0e3      	beq.n	801b3dc <_vsniprintf_r+0x16>
 801b414:	9b00      	ldr	r3, [sp, #0]
 801b416:	2200      	movs	r2, #0
 801b418:	701a      	strb	r2, [r3, #0]
 801b41a:	e7df      	b.n	801b3dc <_vsniprintf_r+0x16>

0801b41c <vsniprintf>:
 801b41c:	b507      	push	{r0, r1, r2, lr}
 801b41e:	9300      	str	r3, [sp, #0]
 801b420:	4613      	mov	r3, r2
 801b422:	460a      	mov	r2, r1
 801b424:	4601      	mov	r1, r0
 801b426:	4803      	ldr	r0, [pc, #12]	@ (801b434 <vsniprintf+0x18>)
 801b428:	6800      	ldr	r0, [r0, #0]
 801b42a:	f7ff ffcc 	bl	801b3c6 <_vsniprintf_r>
 801b42e:	b003      	add	sp, #12
 801b430:	f85d fb04 	ldr.w	pc, [sp], #4
 801b434:	20000ba0 	.word	0x20000ba0

0801b438 <__swbuf_r>:
 801b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b43a:	460e      	mov	r6, r1
 801b43c:	4614      	mov	r4, r2
 801b43e:	4605      	mov	r5, r0
 801b440:	b118      	cbz	r0, 801b44a <__swbuf_r+0x12>
 801b442:	6a03      	ldr	r3, [r0, #32]
 801b444:	b90b      	cbnz	r3, 801b44a <__swbuf_r+0x12>
 801b446:	f7ff fea5 	bl	801b194 <__sinit>
 801b44a:	69a3      	ldr	r3, [r4, #24]
 801b44c:	60a3      	str	r3, [r4, #8]
 801b44e:	89a3      	ldrh	r3, [r4, #12]
 801b450:	071a      	lsls	r2, r3, #28
 801b452:	d501      	bpl.n	801b458 <__swbuf_r+0x20>
 801b454:	6923      	ldr	r3, [r4, #16]
 801b456:	b943      	cbnz	r3, 801b46a <__swbuf_r+0x32>
 801b458:	4621      	mov	r1, r4
 801b45a:	4628      	mov	r0, r5
 801b45c:	f000 f82a 	bl	801b4b4 <__swsetup_r>
 801b460:	b118      	cbz	r0, 801b46a <__swbuf_r+0x32>
 801b462:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b466:	4638      	mov	r0, r7
 801b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b46a:	6823      	ldr	r3, [r4, #0]
 801b46c:	6922      	ldr	r2, [r4, #16]
 801b46e:	1a98      	subs	r0, r3, r2
 801b470:	6963      	ldr	r3, [r4, #20]
 801b472:	b2f6      	uxtb	r6, r6
 801b474:	4283      	cmp	r3, r0
 801b476:	4637      	mov	r7, r6
 801b478:	dc05      	bgt.n	801b486 <__swbuf_r+0x4e>
 801b47a:	4621      	mov	r1, r4
 801b47c:	4628      	mov	r0, r5
 801b47e:	f000 fe99 	bl	801c1b4 <_fflush_r>
 801b482:	2800      	cmp	r0, #0
 801b484:	d1ed      	bne.n	801b462 <__swbuf_r+0x2a>
 801b486:	68a3      	ldr	r3, [r4, #8]
 801b488:	3b01      	subs	r3, #1
 801b48a:	60a3      	str	r3, [r4, #8]
 801b48c:	6823      	ldr	r3, [r4, #0]
 801b48e:	1c5a      	adds	r2, r3, #1
 801b490:	6022      	str	r2, [r4, #0]
 801b492:	701e      	strb	r6, [r3, #0]
 801b494:	6962      	ldr	r2, [r4, #20]
 801b496:	1c43      	adds	r3, r0, #1
 801b498:	429a      	cmp	r2, r3
 801b49a:	d004      	beq.n	801b4a6 <__swbuf_r+0x6e>
 801b49c:	89a3      	ldrh	r3, [r4, #12]
 801b49e:	07db      	lsls	r3, r3, #31
 801b4a0:	d5e1      	bpl.n	801b466 <__swbuf_r+0x2e>
 801b4a2:	2e0a      	cmp	r6, #10
 801b4a4:	d1df      	bne.n	801b466 <__swbuf_r+0x2e>
 801b4a6:	4621      	mov	r1, r4
 801b4a8:	4628      	mov	r0, r5
 801b4aa:	f000 fe83 	bl	801c1b4 <_fflush_r>
 801b4ae:	2800      	cmp	r0, #0
 801b4b0:	d0d9      	beq.n	801b466 <__swbuf_r+0x2e>
 801b4b2:	e7d6      	b.n	801b462 <__swbuf_r+0x2a>

0801b4b4 <__swsetup_r>:
 801b4b4:	b538      	push	{r3, r4, r5, lr}
 801b4b6:	4b29      	ldr	r3, [pc, #164]	@ (801b55c <__swsetup_r+0xa8>)
 801b4b8:	4605      	mov	r5, r0
 801b4ba:	6818      	ldr	r0, [r3, #0]
 801b4bc:	460c      	mov	r4, r1
 801b4be:	b118      	cbz	r0, 801b4c8 <__swsetup_r+0x14>
 801b4c0:	6a03      	ldr	r3, [r0, #32]
 801b4c2:	b90b      	cbnz	r3, 801b4c8 <__swsetup_r+0x14>
 801b4c4:	f7ff fe66 	bl	801b194 <__sinit>
 801b4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4cc:	0719      	lsls	r1, r3, #28
 801b4ce:	d422      	bmi.n	801b516 <__swsetup_r+0x62>
 801b4d0:	06da      	lsls	r2, r3, #27
 801b4d2:	d407      	bmi.n	801b4e4 <__swsetup_r+0x30>
 801b4d4:	2209      	movs	r2, #9
 801b4d6:	602a      	str	r2, [r5, #0]
 801b4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4dc:	81a3      	strh	r3, [r4, #12]
 801b4de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b4e2:	e033      	b.n	801b54c <__swsetup_r+0x98>
 801b4e4:	0758      	lsls	r0, r3, #29
 801b4e6:	d512      	bpl.n	801b50e <__swsetup_r+0x5a>
 801b4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b4ea:	b141      	cbz	r1, 801b4fe <__swsetup_r+0x4a>
 801b4ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b4f0:	4299      	cmp	r1, r3
 801b4f2:	d002      	beq.n	801b4fa <__swsetup_r+0x46>
 801b4f4:	4628      	mov	r0, r5
 801b4f6:	f000 f95f 	bl	801b7b8 <_free_r>
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	6363      	str	r3, [r4, #52]	@ 0x34
 801b4fe:	89a3      	ldrh	r3, [r4, #12]
 801b500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b504:	81a3      	strh	r3, [r4, #12]
 801b506:	2300      	movs	r3, #0
 801b508:	6063      	str	r3, [r4, #4]
 801b50a:	6923      	ldr	r3, [r4, #16]
 801b50c:	6023      	str	r3, [r4, #0]
 801b50e:	89a3      	ldrh	r3, [r4, #12]
 801b510:	f043 0308 	orr.w	r3, r3, #8
 801b514:	81a3      	strh	r3, [r4, #12]
 801b516:	6923      	ldr	r3, [r4, #16]
 801b518:	b94b      	cbnz	r3, 801b52e <__swsetup_r+0x7a>
 801b51a:	89a3      	ldrh	r3, [r4, #12]
 801b51c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b524:	d003      	beq.n	801b52e <__swsetup_r+0x7a>
 801b526:	4621      	mov	r1, r4
 801b528:	4628      	mov	r0, r5
 801b52a:	f000 fea3 	bl	801c274 <__smakebuf_r>
 801b52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b532:	f013 0201 	ands.w	r2, r3, #1
 801b536:	d00a      	beq.n	801b54e <__swsetup_r+0x9a>
 801b538:	2200      	movs	r2, #0
 801b53a:	60a2      	str	r2, [r4, #8]
 801b53c:	6962      	ldr	r2, [r4, #20]
 801b53e:	4252      	negs	r2, r2
 801b540:	61a2      	str	r2, [r4, #24]
 801b542:	6922      	ldr	r2, [r4, #16]
 801b544:	b942      	cbnz	r2, 801b558 <__swsetup_r+0xa4>
 801b546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b54a:	d1c5      	bne.n	801b4d8 <__swsetup_r+0x24>
 801b54c:	bd38      	pop	{r3, r4, r5, pc}
 801b54e:	0799      	lsls	r1, r3, #30
 801b550:	bf58      	it	pl
 801b552:	6962      	ldrpl	r2, [r4, #20]
 801b554:	60a2      	str	r2, [r4, #8]
 801b556:	e7f4      	b.n	801b542 <__swsetup_r+0x8e>
 801b558:	2000      	movs	r0, #0
 801b55a:	e7f7      	b.n	801b54c <__swsetup_r+0x98>
 801b55c:	20000ba0 	.word	0x20000ba0

0801b560 <memcmp>:
 801b560:	b510      	push	{r4, lr}
 801b562:	3901      	subs	r1, #1
 801b564:	4402      	add	r2, r0
 801b566:	4290      	cmp	r0, r2
 801b568:	d101      	bne.n	801b56e <memcmp+0xe>
 801b56a:	2000      	movs	r0, #0
 801b56c:	e005      	b.n	801b57a <memcmp+0x1a>
 801b56e:	7803      	ldrb	r3, [r0, #0]
 801b570:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b574:	42a3      	cmp	r3, r4
 801b576:	d001      	beq.n	801b57c <memcmp+0x1c>
 801b578:	1b18      	subs	r0, r3, r4
 801b57a:	bd10      	pop	{r4, pc}
 801b57c:	3001      	adds	r0, #1
 801b57e:	e7f2      	b.n	801b566 <memcmp+0x6>

0801b580 <memmove>:
 801b580:	4288      	cmp	r0, r1
 801b582:	b510      	push	{r4, lr}
 801b584:	eb01 0402 	add.w	r4, r1, r2
 801b588:	d902      	bls.n	801b590 <memmove+0x10>
 801b58a:	4284      	cmp	r4, r0
 801b58c:	4623      	mov	r3, r4
 801b58e:	d807      	bhi.n	801b5a0 <memmove+0x20>
 801b590:	1e43      	subs	r3, r0, #1
 801b592:	42a1      	cmp	r1, r4
 801b594:	d008      	beq.n	801b5a8 <memmove+0x28>
 801b596:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b59a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b59e:	e7f8      	b.n	801b592 <memmove+0x12>
 801b5a0:	4402      	add	r2, r0
 801b5a2:	4601      	mov	r1, r0
 801b5a4:	428a      	cmp	r2, r1
 801b5a6:	d100      	bne.n	801b5aa <memmove+0x2a>
 801b5a8:	bd10      	pop	{r4, pc}
 801b5aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b5ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b5b2:	e7f7      	b.n	801b5a4 <memmove+0x24>

0801b5b4 <memset>:
 801b5b4:	4402      	add	r2, r0
 801b5b6:	4603      	mov	r3, r0
 801b5b8:	4293      	cmp	r3, r2
 801b5ba:	d100      	bne.n	801b5be <memset+0xa>
 801b5bc:	4770      	bx	lr
 801b5be:	f803 1b01 	strb.w	r1, [r3], #1
 801b5c2:	e7f9      	b.n	801b5b8 <memset+0x4>

0801b5c4 <strchr>:
 801b5c4:	b2c9      	uxtb	r1, r1
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5ce:	b112      	cbz	r2, 801b5d6 <strchr+0x12>
 801b5d0:	428a      	cmp	r2, r1
 801b5d2:	d1f9      	bne.n	801b5c8 <strchr+0x4>
 801b5d4:	4770      	bx	lr
 801b5d6:	2900      	cmp	r1, #0
 801b5d8:	bf18      	it	ne
 801b5da:	2000      	movne	r0, #0
 801b5dc:	4770      	bx	lr

0801b5de <strncmp>:
 801b5de:	b510      	push	{r4, lr}
 801b5e0:	b16a      	cbz	r2, 801b5fe <strncmp+0x20>
 801b5e2:	3901      	subs	r1, #1
 801b5e4:	1884      	adds	r4, r0, r2
 801b5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b5ee:	429a      	cmp	r2, r3
 801b5f0:	d103      	bne.n	801b5fa <strncmp+0x1c>
 801b5f2:	42a0      	cmp	r0, r4
 801b5f4:	d001      	beq.n	801b5fa <strncmp+0x1c>
 801b5f6:	2a00      	cmp	r2, #0
 801b5f8:	d1f5      	bne.n	801b5e6 <strncmp+0x8>
 801b5fa:	1ad0      	subs	r0, r2, r3
 801b5fc:	bd10      	pop	{r4, pc}
 801b5fe:	4610      	mov	r0, r2
 801b600:	e7fc      	b.n	801b5fc <strncmp+0x1e>

0801b602 <strstr>:
 801b602:	780a      	ldrb	r2, [r1, #0]
 801b604:	b570      	push	{r4, r5, r6, lr}
 801b606:	b96a      	cbnz	r2, 801b624 <strstr+0x22>
 801b608:	bd70      	pop	{r4, r5, r6, pc}
 801b60a:	429a      	cmp	r2, r3
 801b60c:	d109      	bne.n	801b622 <strstr+0x20>
 801b60e:	460c      	mov	r4, r1
 801b610:	4605      	mov	r5, r0
 801b612:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b616:	2b00      	cmp	r3, #0
 801b618:	d0f6      	beq.n	801b608 <strstr+0x6>
 801b61a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b61e:	429e      	cmp	r6, r3
 801b620:	d0f7      	beq.n	801b612 <strstr+0x10>
 801b622:	3001      	adds	r0, #1
 801b624:	7803      	ldrb	r3, [r0, #0]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d1ef      	bne.n	801b60a <strstr+0x8>
 801b62a:	4618      	mov	r0, r3
 801b62c:	e7ec      	b.n	801b608 <strstr+0x6>
	...

0801b630 <_close_r>:
 801b630:	b538      	push	{r3, r4, r5, lr}
 801b632:	4d06      	ldr	r5, [pc, #24]	@ (801b64c <_close_r+0x1c>)
 801b634:	2300      	movs	r3, #0
 801b636:	4604      	mov	r4, r0
 801b638:	4608      	mov	r0, r1
 801b63a:	602b      	str	r3, [r5, #0]
 801b63c:	f7e7 fb16 	bl	8002c6c <_close>
 801b640:	1c43      	adds	r3, r0, #1
 801b642:	d102      	bne.n	801b64a <_close_r+0x1a>
 801b644:	682b      	ldr	r3, [r5, #0]
 801b646:	b103      	cbz	r3, 801b64a <_close_r+0x1a>
 801b648:	6023      	str	r3, [r4, #0]
 801b64a:	bd38      	pop	{r3, r4, r5, pc}
 801b64c:	2000c77c 	.word	0x2000c77c

0801b650 <_lseek_r>:
 801b650:	b538      	push	{r3, r4, r5, lr}
 801b652:	4d07      	ldr	r5, [pc, #28]	@ (801b670 <_lseek_r+0x20>)
 801b654:	4604      	mov	r4, r0
 801b656:	4608      	mov	r0, r1
 801b658:	4611      	mov	r1, r2
 801b65a:	2200      	movs	r2, #0
 801b65c:	602a      	str	r2, [r5, #0]
 801b65e:	461a      	mov	r2, r3
 801b660:	f7e7 fb2b 	bl	8002cba <_lseek>
 801b664:	1c43      	adds	r3, r0, #1
 801b666:	d102      	bne.n	801b66e <_lseek_r+0x1e>
 801b668:	682b      	ldr	r3, [r5, #0]
 801b66a:	b103      	cbz	r3, 801b66e <_lseek_r+0x1e>
 801b66c:	6023      	str	r3, [r4, #0]
 801b66e:	bd38      	pop	{r3, r4, r5, pc}
 801b670:	2000c77c 	.word	0x2000c77c

0801b674 <_read_r>:
 801b674:	b538      	push	{r3, r4, r5, lr}
 801b676:	4d07      	ldr	r5, [pc, #28]	@ (801b694 <_read_r+0x20>)
 801b678:	4604      	mov	r4, r0
 801b67a:	4608      	mov	r0, r1
 801b67c:	4611      	mov	r1, r2
 801b67e:	2200      	movs	r2, #0
 801b680:	602a      	str	r2, [r5, #0]
 801b682:	461a      	mov	r2, r3
 801b684:	f7e7 fab9 	bl	8002bfa <_read>
 801b688:	1c43      	adds	r3, r0, #1
 801b68a:	d102      	bne.n	801b692 <_read_r+0x1e>
 801b68c:	682b      	ldr	r3, [r5, #0]
 801b68e:	b103      	cbz	r3, 801b692 <_read_r+0x1e>
 801b690:	6023      	str	r3, [r4, #0]
 801b692:	bd38      	pop	{r3, r4, r5, pc}
 801b694:	2000c77c 	.word	0x2000c77c

0801b698 <_sbrk_r>:
 801b698:	b538      	push	{r3, r4, r5, lr}
 801b69a:	4d06      	ldr	r5, [pc, #24]	@ (801b6b4 <_sbrk_r+0x1c>)
 801b69c:	2300      	movs	r3, #0
 801b69e:	4604      	mov	r4, r0
 801b6a0:	4608      	mov	r0, r1
 801b6a2:	602b      	str	r3, [r5, #0]
 801b6a4:	f7e7 fb16 	bl	8002cd4 <_sbrk>
 801b6a8:	1c43      	adds	r3, r0, #1
 801b6aa:	d102      	bne.n	801b6b2 <_sbrk_r+0x1a>
 801b6ac:	682b      	ldr	r3, [r5, #0]
 801b6ae:	b103      	cbz	r3, 801b6b2 <_sbrk_r+0x1a>
 801b6b0:	6023      	str	r3, [r4, #0]
 801b6b2:	bd38      	pop	{r3, r4, r5, pc}
 801b6b4:	2000c77c 	.word	0x2000c77c

0801b6b8 <_write_r>:
 801b6b8:	b538      	push	{r3, r4, r5, lr}
 801b6ba:	4d07      	ldr	r5, [pc, #28]	@ (801b6d8 <_write_r+0x20>)
 801b6bc:	4604      	mov	r4, r0
 801b6be:	4608      	mov	r0, r1
 801b6c0:	4611      	mov	r1, r2
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	602a      	str	r2, [r5, #0]
 801b6c6:	461a      	mov	r2, r3
 801b6c8:	f7e7 fab4 	bl	8002c34 <_write>
 801b6cc:	1c43      	adds	r3, r0, #1
 801b6ce:	d102      	bne.n	801b6d6 <_write_r+0x1e>
 801b6d0:	682b      	ldr	r3, [r5, #0]
 801b6d2:	b103      	cbz	r3, 801b6d6 <_write_r+0x1e>
 801b6d4:	6023      	str	r3, [r4, #0]
 801b6d6:	bd38      	pop	{r3, r4, r5, pc}
 801b6d8:	2000c77c 	.word	0x2000c77c

0801b6dc <__errno>:
 801b6dc:	4b01      	ldr	r3, [pc, #4]	@ (801b6e4 <__errno+0x8>)
 801b6de:	6818      	ldr	r0, [r3, #0]
 801b6e0:	4770      	bx	lr
 801b6e2:	bf00      	nop
 801b6e4:	20000ba0 	.word	0x20000ba0

0801b6e8 <__libc_init_array>:
 801b6e8:	b570      	push	{r4, r5, r6, lr}
 801b6ea:	4d0d      	ldr	r5, [pc, #52]	@ (801b720 <__libc_init_array+0x38>)
 801b6ec:	4c0d      	ldr	r4, [pc, #52]	@ (801b724 <__libc_init_array+0x3c>)
 801b6ee:	1b64      	subs	r4, r4, r5
 801b6f0:	10a4      	asrs	r4, r4, #2
 801b6f2:	2600      	movs	r6, #0
 801b6f4:	42a6      	cmp	r6, r4
 801b6f6:	d109      	bne.n	801b70c <__libc_init_array+0x24>
 801b6f8:	4d0b      	ldr	r5, [pc, #44]	@ (801b728 <__libc_init_array+0x40>)
 801b6fa:	4c0c      	ldr	r4, [pc, #48]	@ (801b72c <__libc_init_array+0x44>)
 801b6fc:	f002 f854 	bl	801d7a8 <_init>
 801b700:	1b64      	subs	r4, r4, r5
 801b702:	10a4      	asrs	r4, r4, #2
 801b704:	2600      	movs	r6, #0
 801b706:	42a6      	cmp	r6, r4
 801b708:	d105      	bne.n	801b716 <__libc_init_array+0x2e>
 801b70a:	bd70      	pop	{r4, r5, r6, pc}
 801b70c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b710:	4798      	blx	r3
 801b712:	3601      	adds	r6, #1
 801b714:	e7ee      	b.n	801b6f4 <__libc_init_array+0xc>
 801b716:	f855 3b04 	ldr.w	r3, [r5], #4
 801b71a:	4798      	blx	r3
 801b71c:	3601      	adds	r6, #1
 801b71e:	e7f2      	b.n	801b706 <__libc_init_array+0x1e>
 801b720:	0801f7c0 	.word	0x0801f7c0
 801b724:	0801f7c0 	.word	0x0801f7c0
 801b728:	0801f7c0 	.word	0x0801f7c0
 801b72c:	0801f7dc 	.word	0x0801f7dc

0801b730 <__retarget_lock_init_recursive>:
 801b730:	4770      	bx	lr

0801b732 <__retarget_lock_acquire_recursive>:
 801b732:	4770      	bx	lr

0801b734 <__retarget_lock_release_recursive>:
 801b734:	4770      	bx	lr

0801b736 <strcpy>:
 801b736:	4603      	mov	r3, r0
 801b738:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b73c:	f803 2b01 	strb.w	r2, [r3], #1
 801b740:	2a00      	cmp	r2, #0
 801b742:	d1f9      	bne.n	801b738 <strcpy+0x2>
 801b744:	4770      	bx	lr

0801b746 <memcpy>:
 801b746:	440a      	add	r2, r1
 801b748:	4291      	cmp	r1, r2
 801b74a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b74e:	d100      	bne.n	801b752 <memcpy+0xc>
 801b750:	4770      	bx	lr
 801b752:	b510      	push	{r4, lr}
 801b754:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b758:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b75c:	4291      	cmp	r1, r2
 801b75e:	d1f9      	bne.n	801b754 <memcpy+0xe>
 801b760:	bd10      	pop	{r4, pc}
	...

0801b764 <__assert_func>:
 801b764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b766:	4614      	mov	r4, r2
 801b768:	461a      	mov	r2, r3
 801b76a:	4b09      	ldr	r3, [pc, #36]	@ (801b790 <__assert_func+0x2c>)
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	4605      	mov	r5, r0
 801b770:	68d8      	ldr	r0, [r3, #12]
 801b772:	b954      	cbnz	r4, 801b78a <__assert_func+0x26>
 801b774:	4b07      	ldr	r3, [pc, #28]	@ (801b794 <__assert_func+0x30>)
 801b776:	461c      	mov	r4, r3
 801b778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b77c:	9100      	str	r1, [sp, #0]
 801b77e:	462b      	mov	r3, r5
 801b780:	4905      	ldr	r1, [pc, #20]	@ (801b798 <__assert_func+0x34>)
 801b782:	f000 fd3f 	bl	801c204 <fiprintf>
 801b786:	f000 fdd3 	bl	801c330 <abort>
 801b78a:	4b04      	ldr	r3, [pc, #16]	@ (801b79c <__assert_func+0x38>)
 801b78c:	e7f4      	b.n	801b778 <__assert_func+0x14>
 801b78e:	bf00      	nop
 801b790:	20000ba0 	.word	0x20000ba0
 801b794:	0801f6e1 	.word	0x0801f6e1
 801b798:	0801f6b3 	.word	0x0801f6b3
 801b79c:	0801f6a6 	.word	0x0801f6a6

0801b7a0 <__env_lock>:
 801b7a0:	4801      	ldr	r0, [pc, #4]	@ (801b7a8 <__env_lock+0x8>)
 801b7a2:	f7ff bfc6 	b.w	801b732 <__retarget_lock_acquire_recursive>
 801b7a6:	bf00      	nop
 801b7a8:	2000c780 	.word	0x2000c780

0801b7ac <__env_unlock>:
 801b7ac:	4801      	ldr	r0, [pc, #4]	@ (801b7b4 <__env_unlock+0x8>)
 801b7ae:	f7ff bfc1 	b.w	801b734 <__retarget_lock_release_recursive>
 801b7b2:	bf00      	nop
 801b7b4:	2000c780 	.word	0x2000c780

0801b7b8 <_free_r>:
 801b7b8:	b538      	push	{r3, r4, r5, lr}
 801b7ba:	4605      	mov	r5, r0
 801b7bc:	2900      	cmp	r1, #0
 801b7be:	d041      	beq.n	801b844 <_free_r+0x8c>
 801b7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7c4:	1f0c      	subs	r4, r1, #4
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	bfb8      	it	lt
 801b7ca:	18e4      	addlt	r4, r4, r3
 801b7cc:	f7ff fb30 	bl	801ae30 <__malloc_lock>
 801b7d0:	4a1d      	ldr	r2, [pc, #116]	@ (801b848 <_free_r+0x90>)
 801b7d2:	6813      	ldr	r3, [r2, #0]
 801b7d4:	b933      	cbnz	r3, 801b7e4 <_free_r+0x2c>
 801b7d6:	6063      	str	r3, [r4, #4]
 801b7d8:	6014      	str	r4, [r2, #0]
 801b7da:	4628      	mov	r0, r5
 801b7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7e0:	f7ff bb2c 	b.w	801ae3c <__malloc_unlock>
 801b7e4:	42a3      	cmp	r3, r4
 801b7e6:	d908      	bls.n	801b7fa <_free_r+0x42>
 801b7e8:	6820      	ldr	r0, [r4, #0]
 801b7ea:	1821      	adds	r1, r4, r0
 801b7ec:	428b      	cmp	r3, r1
 801b7ee:	bf01      	itttt	eq
 801b7f0:	6819      	ldreq	r1, [r3, #0]
 801b7f2:	685b      	ldreq	r3, [r3, #4]
 801b7f4:	1809      	addeq	r1, r1, r0
 801b7f6:	6021      	streq	r1, [r4, #0]
 801b7f8:	e7ed      	b.n	801b7d6 <_free_r+0x1e>
 801b7fa:	461a      	mov	r2, r3
 801b7fc:	685b      	ldr	r3, [r3, #4]
 801b7fe:	b10b      	cbz	r3, 801b804 <_free_r+0x4c>
 801b800:	42a3      	cmp	r3, r4
 801b802:	d9fa      	bls.n	801b7fa <_free_r+0x42>
 801b804:	6811      	ldr	r1, [r2, #0]
 801b806:	1850      	adds	r0, r2, r1
 801b808:	42a0      	cmp	r0, r4
 801b80a:	d10b      	bne.n	801b824 <_free_r+0x6c>
 801b80c:	6820      	ldr	r0, [r4, #0]
 801b80e:	4401      	add	r1, r0
 801b810:	1850      	adds	r0, r2, r1
 801b812:	4283      	cmp	r3, r0
 801b814:	6011      	str	r1, [r2, #0]
 801b816:	d1e0      	bne.n	801b7da <_free_r+0x22>
 801b818:	6818      	ldr	r0, [r3, #0]
 801b81a:	685b      	ldr	r3, [r3, #4]
 801b81c:	6053      	str	r3, [r2, #4]
 801b81e:	4408      	add	r0, r1
 801b820:	6010      	str	r0, [r2, #0]
 801b822:	e7da      	b.n	801b7da <_free_r+0x22>
 801b824:	d902      	bls.n	801b82c <_free_r+0x74>
 801b826:	230c      	movs	r3, #12
 801b828:	602b      	str	r3, [r5, #0]
 801b82a:	e7d6      	b.n	801b7da <_free_r+0x22>
 801b82c:	6820      	ldr	r0, [r4, #0]
 801b82e:	1821      	adds	r1, r4, r0
 801b830:	428b      	cmp	r3, r1
 801b832:	bf04      	itt	eq
 801b834:	6819      	ldreq	r1, [r3, #0]
 801b836:	685b      	ldreq	r3, [r3, #4]
 801b838:	6063      	str	r3, [r4, #4]
 801b83a:	bf04      	itt	eq
 801b83c:	1809      	addeq	r1, r1, r0
 801b83e:	6021      	streq	r1, [r4, #0]
 801b840:	6054      	str	r4, [r2, #4]
 801b842:	e7ca      	b.n	801b7da <_free_r+0x22>
 801b844:	bd38      	pop	{r3, r4, r5, pc}
 801b846:	bf00      	nop
 801b848:	2000c63c 	.word	0x2000c63c

0801b84c <_malloc_usable_size_r>:
 801b84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b850:	1f18      	subs	r0, r3, #4
 801b852:	2b00      	cmp	r3, #0
 801b854:	bfbc      	itt	lt
 801b856:	580b      	ldrlt	r3, [r1, r0]
 801b858:	18c0      	addlt	r0, r0, r3
 801b85a:	4770      	bx	lr

0801b85c <__ssputs_r>:
 801b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b860:	688e      	ldr	r6, [r1, #8]
 801b862:	461f      	mov	r7, r3
 801b864:	42be      	cmp	r6, r7
 801b866:	680b      	ldr	r3, [r1, #0]
 801b868:	4682      	mov	sl, r0
 801b86a:	460c      	mov	r4, r1
 801b86c:	4690      	mov	r8, r2
 801b86e:	d82d      	bhi.n	801b8cc <__ssputs_r+0x70>
 801b870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b878:	d026      	beq.n	801b8c8 <__ssputs_r+0x6c>
 801b87a:	6965      	ldr	r5, [r4, #20]
 801b87c:	6909      	ldr	r1, [r1, #16]
 801b87e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b882:	eba3 0901 	sub.w	r9, r3, r1
 801b886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b88a:	1c7b      	adds	r3, r7, #1
 801b88c:	444b      	add	r3, r9
 801b88e:	106d      	asrs	r5, r5, #1
 801b890:	429d      	cmp	r5, r3
 801b892:	bf38      	it	cc
 801b894:	461d      	movcc	r5, r3
 801b896:	0553      	lsls	r3, r2, #21
 801b898:	d527      	bpl.n	801b8ea <__ssputs_r+0x8e>
 801b89a:	4629      	mov	r1, r5
 801b89c:	f7ff fa48 	bl	801ad30 <_malloc_r>
 801b8a0:	4606      	mov	r6, r0
 801b8a2:	b360      	cbz	r0, 801b8fe <__ssputs_r+0xa2>
 801b8a4:	6921      	ldr	r1, [r4, #16]
 801b8a6:	464a      	mov	r2, r9
 801b8a8:	f7ff ff4d 	bl	801b746 <memcpy>
 801b8ac:	89a3      	ldrh	r3, [r4, #12]
 801b8ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b8b6:	81a3      	strh	r3, [r4, #12]
 801b8b8:	6126      	str	r6, [r4, #16]
 801b8ba:	6165      	str	r5, [r4, #20]
 801b8bc:	444e      	add	r6, r9
 801b8be:	eba5 0509 	sub.w	r5, r5, r9
 801b8c2:	6026      	str	r6, [r4, #0]
 801b8c4:	60a5      	str	r5, [r4, #8]
 801b8c6:	463e      	mov	r6, r7
 801b8c8:	42be      	cmp	r6, r7
 801b8ca:	d900      	bls.n	801b8ce <__ssputs_r+0x72>
 801b8cc:	463e      	mov	r6, r7
 801b8ce:	6820      	ldr	r0, [r4, #0]
 801b8d0:	4632      	mov	r2, r6
 801b8d2:	4641      	mov	r1, r8
 801b8d4:	f7ff fe54 	bl	801b580 <memmove>
 801b8d8:	68a3      	ldr	r3, [r4, #8]
 801b8da:	1b9b      	subs	r3, r3, r6
 801b8dc:	60a3      	str	r3, [r4, #8]
 801b8de:	6823      	ldr	r3, [r4, #0]
 801b8e0:	4433      	add	r3, r6
 801b8e2:	6023      	str	r3, [r4, #0]
 801b8e4:	2000      	movs	r0, #0
 801b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8ea:	462a      	mov	r2, r5
 801b8ec:	f7ff fb20 	bl	801af30 <_realloc_r>
 801b8f0:	4606      	mov	r6, r0
 801b8f2:	2800      	cmp	r0, #0
 801b8f4:	d1e0      	bne.n	801b8b8 <__ssputs_r+0x5c>
 801b8f6:	6921      	ldr	r1, [r4, #16]
 801b8f8:	4650      	mov	r0, sl
 801b8fa:	f7ff ff5d 	bl	801b7b8 <_free_r>
 801b8fe:	230c      	movs	r3, #12
 801b900:	f8ca 3000 	str.w	r3, [sl]
 801b904:	89a3      	ldrh	r3, [r4, #12]
 801b906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b90a:	81a3      	strh	r3, [r4, #12]
 801b90c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b910:	e7e9      	b.n	801b8e6 <__ssputs_r+0x8a>
	...

0801b914 <_svfiprintf_r>:
 801b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b918:	4698      	mov	r8, r3
 801b91a:	898b      	ldrh	r3, [r1, #12]
 801b91c:	061b      	lsls	r3, r3, #24
 801b91e:	b09d      	sub	sp, #116	@ 0x74
 801b920:	4607      	mov	r7, r0
 801b922:	460d      	mov	r5, r1
 801b924:	4614      	mov	r4, r2
 801b926:	d510      	bpl.n	801b94a <_svfiprintf_r+0x36>
 801b928:	690b      	ldr	r3, [r1, #16]
 801b92a:	b973      	cbnz	r3, 801b94a <_svfiprintf_r+0x36>
 801b92c:	2140      	movs	r1, #64	@ 0x40
 801b92e:	f7ff f9ff 	bl	801ad30 <_malloc_r>
 801b932:	6028      	str	r0, [r5, #0]
 801b934:	6128      	str	r0, [r5, #16]
 801b936:	b930      	cbnz	r0, 801b946 <_svfiprintf_r+0x32>
 801b938:	230c      	movs	r3, #12
 801b93a:	603b      	str	r3, [r7, #0]
 801b93c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b940:	b01d      	add	sp, #116	@ 0x74
 801b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b946:	2340      	movs	r3, #64	@ 0x40
 801b948:	616b      	str	r3, [r5, #20]
 801b94a:	2300      	movs	r3, #0
 801b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b94e:	2320      	movs	r3, #32
 801b950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b954:	f8cd 800c 	str.w	r8, [sp, #12]
 801b958:	2330      	movs	r3, #48	@ 0x30
 801b95a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801baf8 <_svfiprintf_r+0x1e4>
 801b95e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b962:	f04f 0901 	mov.w	r9, #1
 801b966:	4623      	mov	r3, r4
 801b968:	469a      	mov	sl, r3
 801b96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b96e:	b10a      	cbz	r2, 801b974 <_svfiprintf_r+0x60>
 801b970:	2a25      	cmp	r2, #37	@ 0x25
 801b972:	d1f9      	bne.n	801b968 <_svfiprintf_r+0x54>
 801b974:	ebba 0b04 	subs.w	fp, sl, r4
 801b978:	d00b      	beq.n	801b992 <_svfiprintf_r+0x7e>
 801b97a:	465b      	mov	r3, fp
 801b97c:	4622      	mov	r2, r4
 801b97e:	4629      	mov	r1, r5
 801b980:	4638      	mov	r0, r7
 801b982:	f7ff ff6b 	bl	801b85c <__ssputs_r>
 801b986:	3001      	adds	r0, #1
 801b988:	f000 80a7 	beq.w	801bada <_svfiprintf_r+0x1c6>
 801b98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b98e:	445a      	add	r2, fp
 801b990:	9209      	str	r2, [sp, #36]	@ 0x24
 801b992:	f89a 3000 	ldrb.w	r3, [sl]
 801b996:	2b00      	cmp	r3, #0
 801b998:	f000 809f 	beq.w	801bada <_svfiprintf_r+0x1c6>
 801b99c:	2300      	movs	r3, #0
 801b99e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9a6:	f10a 0a01 	add.w	sl, sl, #1
 801b9aa:	9304      	str	r3, [sp, #16]
 801b9ac:	9307      	str	r3, [sp, #28]
 801b9ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9b2:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9b4:	4654      	mov	r4, sl
 801b9b6:	2205      	movs	r2, #5
 801b9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9bc:	484e      	ldr	r0, [pc, #312]	@ (801baf8 <_svfiprintf_r+0x1e4>)
 801b9be:	f7e4 fc47 	bl	8000250 <memchr>
 801b9c2:	9a04      	ldr	r2, [sp, #16]
 801b9c4:	b9d8      	cbnz	r0, 801b9fe <_svfiprintf_r+0xea>
 801b9c6:	06d0      	lsls	r0, r2, #27
 801b9c8:	bf44      	itt	mi
 801b9ca:	2320      	movmi	r3, #32
 801b9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9d0:	0711      	lsls	r1, r2, #28
 801b9d2:	bf44      	itt	mi
 801b9d4:	232b      	movmi	r3, #43	@ 0x2b
 801b9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9da:	f89a 3000 	ldrb.w	r3, [sl]
 801b9de:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9e0:	d015      	beq.n	801ba0e <_svfiprintf_r+0xfa>
 801b9e2:	9a07      	ldr	r2, [sp, #28]
 801b9e4:	4654      	mov	r4, sl
 801b9e6:	2000      	movs	r0, #0
 801b9e8:	f04f 0c0a 	mov.w	ip, #10
 801b9ec:	4621      	mov	r1, r4
 801b9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b9f2:	3b30      	subs	r3, #48	@ 0x30
 801b9f4:	2b09      	cmp	r3, #9
 801b9f6:	d94b      	bls.n	801ba90 <_svfiprintf_r+0x17c>
 801b9f8:	b1b0      	cbz	r0, 801ba28 <_svfiprintf_r+0x114>
 801b9fa:	9207      	str	r2, [sp, #28]
 801b9fc:	e014      	b.n	801ba28 <_svfiprintf_r+0x114>
 801b9fe:	eba0 0308 	sub.w	r3, r0, r8
 801ba02:	fa09 f303 	lsl.w	r3, r9, r3
 801ba06:	4313      	orrs	r3, r2
 801ba08:	9304      	str	r3, [sp, #16]
 801ba0a:	46a2      	mov	sl, r4
 801ba0c:	e7d2      	b.n	801b9b4 <_svfiprintf_r+0xa0>
 801ba0e:	9b03      	ldr	r3, [sp, #12]
 801ba10:	1d19      	adds	r1, r3, #4
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	9103      	str	r1, [sp, #12]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	bfbb      	ittet	lt
 801ba1a:	425b      	neglt	r3, r3
 801ba1c:	f042 0202 	orrlt.w	r2, r2, #2
 801ba20:	9307      	strge	r3, [sp, #28]
 801ba22:	9307      	strlt	r3, [sp, #28]
 801ba24:	bfb8      	it	lt
 801ba26:	9204      	strlt	r2, [sp, #16]
 801ba28:	7823      	ldrb	r3, [r4, #0]
 801ba2a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba2c:	d10a      	bne.n	801ba44 <_svfiprintf_r+0x130>
 801ba2e:	7863      	ldrb	r3, [r4, #1]
 801ba30:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba32:	d132      	bne.n	801ba9a <_svfiprintf_r+0x186>
 801ba34:	9b03      	ldr	r3, [sp, #12]
 801ba36:	1d1a      	adds	r2, r3, #4
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	9203      	str	r2, [sp, #12]
 801ba3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba40:	3402      	adds	r4, #2
 801ba42:	9305      	str	r3, [sp, #20]
 801ba44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bb08 <_svfiprintf_r+0x1f4>
 801ba48:	7821      	ldrb	r1, [r4, #0]
 801ba4a:	2203      	movs	r2, #3
 801ba4c:	4650      	mov	r0, sl
 801ba4e:	f7e4 fbff 	bl	8000250 <memchr>
 801ba52:	b138      	cbz	r0, 801ba64 <_svfiprintf_r+0x150>
 801ba54:	9b04      	ldr	r3, [sp, #16]
 801ba56:	eba0 000a 	sub.w	r0, r0, sl
 801ba5a:	2240      	movs	r2, #64	@ 0x40
 801ba5c:	4082      	lsls	r2, r0
 801ba5e:	4313      	orrs	r3, r2
 801ba60:	3401      	adds	r4, #1
 801ba62:	9304      	str	r3, [sp, #16]
 801ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba68:	4824      	ldr	r0, [pc, #144]	@ (801bafc <_svfiprintf_r+0x1e8>)
 801ba6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba6e:	2206      	movs	r2, #6
 801ba70:	f7e4 fbee 	bl	8000250 <memchr>
 801ba74:	2800      	cmp	r0, #0
 801ba76:	d036      	beq.n	801bae6 <_svfiprintf_r+0x1d2>
 801ba78:	4b21      	ldr	r3, [pc, #132]	@ (801bb00 <_svfiprintf_r+0x1ec>)
 801ba7a:	bb1b      	cbnz	r3, 801bac4 <_svfiprintf_r+0x1b0>
 801ba7c:	9b03      	ldr	r3, [sp, #12]
 801ba7e:	3307      	adds	r3, #7
 801ba80:	f023 0307 	bic.w	r3, r3, #7
 801ba84:	3308      	adds	r3, #8
 801ba86:	9303      	str	r3, [sp, #12]
 801ba88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba8a:	4433      	add	r3, r6
 801ba8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba8e:	e76a      	b.n	801b966 <_svfiprintf_r+0x52>
 801ba90:	fb0c 3202 	mla	r2, ip, r2, r3
 801ba94:	460c      	mov	r4, r1
 801ba96:	2001      	movs	r0, #1
 801ba98:	e7a8      	b.n	801b9ec <_svfiprintf_r+0xd8>
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	3401      	adds	r4, #1
 801ba9e:	9305      	str	r3, [sp, #20]
 801baa0:	4619      	mov	r1, r3
 801baa2:	f04f 0c0a 	mov.w	ip, #10
 801baa6:	4620      	mov	r0, r4
 801baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801baac:	3a30      	subs	r2, #48	@ 0x30
 801baae:	2a09      	cmp	r2, #9
 801bab0:	d903      	bls.n	801baba <_svfiprintf_r+0x1a6>
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d0c6      	beq.n	801ba44 <_svfiprintf_r+0x130>
 801bab6:	9105      	str	r1, [sp, #20]
 801bab8:	e7c4      	b.n	801ba44 <_svfiprintf_r+0x130>
 801baba:	fb0c 2101 	mla	r1, ip, r1, r2
 801babe:	4604      	mov	r4, r0
 801bac0:	2301      	movs	r3, #1
 801bac2:	e7f0      	b.n	801baa6 <_svfiprintf_r+0x192>
 801bac4:	ab03      	add	r3, sp, #12
 801bac6:	9300      	str	r3, [sp, #0]
 801bac8:	462a      	mov	r2, r5
 801baca:	4b0e      	ldr	r3, [pc, #56]	@ (801bb04 <_svfiprintf_r+0x1f0>)
 801bacc:	a904      	add	r1, sp, #16
 801bace:	4638      	mov	r0, r7
 801bad0:	f3af 8000 	nop.w
 801bad4:	1c42      	adds	r2, r0, #1
 801bad6:	4606      	mov	r6, r0
 801bad8:	d1d6      	bne.n	801ba88 <_svfiprintf_r+0x174>
 801bada:	89ab      	ldrh	r3, [r5, #12]
 801badc:	065b      	lsls	r3, r3, #25
 801bade:	f53f af2d 	bmi.w	801b93c <_svfiprintf_r+0x28>
 801bae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bae4:	e72c      	b.n	801b940 <_svfiprintf_r+0x2c>
 801bae6:	ab03      	add	r3, sp, #12
 801bae8:	9300      	str	r3, [sp, #0]
 801baea:	462a      	mov	r2, r5
 801baec:	4b05      	ldr	r3, [pc, #20]	@ (801bb04 <_svfiprintf_r+0x1f0>)
 801baee:	a904      	add	r1, sp, #16
 801baf0:	4638      	mov	r0, r7
 801baf2:	f000 f9bb 	bl	801be6c <_printf_i>
 801baf6:	e7ed      	b.n	801bad4 <_svfiprintf_r+0x1c0>
 801baf8:	0801f6e2 	.word	0x0801f6e2
 801bafc:	0801f6ec 	.word	0x0801f6ec
 801bb00:	00000000 	.word	0x00000000
 801bb04:	0801b85d 	.word	0x0801b85d
 801bb08:	0801f6e8 	.word	0x0801f6e8

0801bb0c <__sfputc_r>:
 801bb0c:	6893      	ldr	r3, [r2, #8]
 801bb0e:	3b01      	subs	r3, #1
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	b410      	push	{r4}
 801bb14:	6093      	str	r3, [r2, #8]
 801bb16:	da08      	bge.n	801bb2a <__sfputc_r+0x1e>
 801bb18:	6994      	ldr	r4, [r2, #24]
 801bb1a:	42a3      	cmp	r3, r4
 801bb1c:	db01      	blt.n	801bb22 <__sfputc_r+0x16>
 801bb1e:	290a      	cmp	r1, #10
 801bb20:	d103      	bne.n	801bb2a <__sfputc_r+0x1e>
 801bb22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb26:	f7ff bc87 	b.w	801b438 <__swbuf_r>
 801bb2a:	6813      	ldr	r3, [r2, #0]
 801bb2c:	1c58      	adds	r0, r3, #1
 801bb2e:	6010      	str	r0, [r2, #0]
 801bb30:	7019      	strb	r1, [r3, #0]
 801bb32:	4608      	mov	r0, r1
 801bb34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb38:	4770      	bx	lr

0801bb3a <__sfputs_r>:
 801bb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb3c:	4606      	mov	r6, r0
 801bb3e:	460f      	mov	r7, r1
 801bb40:	4614      	mov	r4, r2
 801bb42:	18d5      	adds	r5, r2, r3
 801bb44:	42ac      	cmp	r4, r5
 801bb46:	d101      	bne.n	801bb4c <__sfputs_r+0x12>
 801bb48:	2000      	movs	r0, #0
 801bb4a:	e007      	b.n	801bb5c <__sfputs_r+0x22>
 801bb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb50:	463a      	mov	r2, r7
 801bb52:	4630      	mov	r0, r6
 801bb54:	f7ff ffda 	bl	801bb0c <__sfputc_r>
 801bb58:	1c43      	adds	r3, r0, #1
 801bb5a:	d1f3      	bne.n	801bb44 <__sfputs_r+0xa>
 801bb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bb60 <_vfiprintf_r>:
 801bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb64:	460d      	mov	r5, r1
 801bb66:	b09d      	sub	sp, #116	@ 0x74
 801bb68:	4614      	mov	r4, r2
 801bb6a:	4698      	mov	r8, r3
 801bb6c:	4606      	mov	r6, r0
 801bb6e:	b118      	cbz	r0, 801bb78 <_vfiprintf_r+0x18>
 801bb70:	6a03      	ldr	r3, [r0, #32]
 801bb72:	b90b      	cbnz	r3, 801bb78 <_vfiprintf_r+0x18>
 801bb74:	f7ff fb0e 	bl	801b194 <__sinit>
 801bb78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bb7a:	07d9      	lsls	r1, r3, #31
 801bb7c:	d405      	bmi.n	801bb8a <_vfiprintf_r+0x2a>
 801bb7e:	89ab      	ldrh	r3, [r5, #12]
 801bb80:	059a      	lsls	r2, r3, #22
 801bb82:	d402      	bmi.n	801bb8a <_vfiprintf_r+0x2a>
 801bb84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb86:	f7ff fdd4 	bl	801b732 <__retarget_lock_acquire_recursive>
 801bb8a:	89ab      	ldrh	r3, [r5, #12]
 801bb8c:	071b      	lsls	r3, r3, #28
 801bb8e:	d501      	bpl.n	801bb94 <_vfiprintf_r+0x34>
 801bb90:	692b      	ldr	r3, [r5, #16]
 801bb92:	b99b      	cbnz	r3, 801bbbc <_vfiprintf_r+0x5c>
 801bb94:	4629      	mov	r1, r5
 801bb96:	4630      	mov	r0, r6
 801bb98:	f7ff fc8c 	bl	801b4b4 <__swsetup_r>
 801bb9c:	b170      	cbz	r0, 801bbbc <_vfiprintf_r+0x5c>
 801bb9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bba0:	07dc      	lsls	r4, r3, #31
 801bba2:	d504      	bpl.n	801bbae <_vfiprintf_r+0x4e>
 801bba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bba8:	b01d      	add	sp, #116	@ 0x74
 801bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbae:	89ab      	ldrh	r3, [r5, #12]
 801bbb0:	0598      	lsls	r0, r3, #22
 801bbb2:	d4f7      	bmi.n	801bba4 <_vfiprintf_r+0x44>
 801bbb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bbb6:	f7ff fdbd 	bl	801b734 <__retarget_lock_release_recursive>
 801bbba:	e7f3      	b.n	801bba4 <_vfiprintf_r+0x44>
 801bbbc:	2300      	movs	r3, #0
 801bbbe:	9309      	str	r3, [sp, #36]	@ 0x24
 801bbc0:	2320      	movs	r3, #32
 801bbc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bbc6:	f8cd 800c 	str.w	r8, [sp, #12]
 801bbca:	2330      	movs	r3, #48	@ 0x30
 801bbcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bd7c <_vfiprintf_r+0x21c>
 801bbd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bbd4:	f04f 0901 	mov.w	r9, #1
 801bbd8:	4623      	mov	r3, r4
 801bbda:	469a      	mov	sl, r3
 801bbdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbe0:	b10a      	cbz	r2, 801bbe6 <_vfiprintf_r+0x86>
 801bbe2:	2a25      	cmp	r2, #37	@ 0x25
 801bbe4:	d1f9      	bne.n	801bbda <_vfiprintf_r+0x7a>
 801bbe6:	ebba 0b04 	subs.w	fp, sl, r4
 801bbea:	d00b      	beq.n	801bc04 <_vfiprintf_r+0xa4>
 801bbec:	465b      	mov	r3, fp
 801bbee:	4622      	mov	r2, r4
 801bbf0:	4629      	mov	r1, r5
 801bbf2:	4630      	mov	r0, r6
 801bbf4:	f7ff ffa1 	bl	801bb3a <__sfputs_r>
 801bbf8:	3001      	adds	r0, #1
 801bbfa:	f000 80a7 	beq.w	801bd4c <_vfiprintf_r+0x1ec>
 801bbfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bc00:	445a      	add	r2, fp
 801bc02:	9209      	str	r2, [sp, #36]	@ 0x24
 801bc04:	f89a 3000 	ldrb.w	r3, [sl]
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	f000 809f 	beq.w	801bd4c <_vfiprintf_r+0x1ec>
 801bc0e:	2300      	movs	r3, #0
 801bc10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bc14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc18:	f10a 0a01 	add.w	sl, sl, #1
 801bc1c:	9304      	str	r3, [sp, #16]
 801bc1e:	9307      	str	r3, [sp, #28]
 801bc20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bc24:	931a      	str	r3, [sp, #104]	@ 0x68
 801bc26:	4654      	mov	r4, sl
 801bc28:	2205      	movs	r2, #5
 801bc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc2e:	4853      	ldr	r0, [pc, #332]	@ (801bd7c <_vfiprintf_r+0x21c>)
 801bc30:	f7e4 fb0e 	bl	8000250 <memchr>
 801bc34:	9a04      	ldr	r2, [sp, #16]
 801bc36:	b9d8      	cbnz	r0, 801bc70 <_vfiprintf_r+0x110>
 801bc38:	06d1      	lsls	r1, r2, #27
 801bc3a:	bf44      	itt	mi
 801bc3c:	2320      	movmi	r3, #32
 801bc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc42:	0713      	lsls	r3, r2, #28
 801bc44:	bf44      	itt	mi
 801bc46:	232b      	movmi	r3, #43	@ 0x2b
 801bc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 801bc50:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc52:	d015      	beq.n	801bc80 <_vfiprintf_r+0x120>
 801bc54:	9a07      	ldr	r2, [sp, #28]
 801bc56:	4654      	mov	r4, sl
 801bc58:	2000      	movs	r0, #0
 801bc5a:	f04f 0c0a 	mov.w	ip, #10
 801bc5e:	4621      	mov	r1, r4
 801bc60:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc64:	3b30      	subs	r3, #48	@ 0x30
 801bc66:	2b09      	cmp	r3, #9
 801bc68:	d94b      	bls.n	801bd02 <_vfiprintf_r+0x1a2>
 801bc6a:	b1b0      	cbz	r0, 801bc9a <_vfiprintf_r+0x13a>
 801bc6c:	9207      	str	r2, [sp, #28]
 801bc6e:	e014      	b.n	801bc9a <_vfiprintf_r+0x13a>
 801bc70:	eba0 0308 	sub.w	r3, r0, r8
 801bc74:	fa09 f303 	lsl.w	r3, r9, r3
 801bc78:	4313      	orrs	r3, r2
 801bc7a:	9304      	str	r3, [sp, #16]
 801bc7c:	46a2      	mov	sl, r4
 801bc7e:	e7d2      	b.n	801bc26 <_vfiprintf_r+0xc6>
 801bc80:	9b03      	ldr	r3, [sp, #12]
 801bc82:	1d19      	adds	r1, r3, #4
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	9103      	str	r1, [sp, #12]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	bfbb      	ittet	lt
 801bc8c:	425b      	neglt	r3, r3
 801bc8e:	f042 0202 	orrlt.w	r2, r2, #2
 801bc92:	9307      	strge	r3, [sp, #28]
 801bc94:	9307      	strlt	r3, [sp, #28]
 801bc96:	bfb8      	it	lt
 801bc98:	9204      	strlt	r2, [sp, #16]
 801bc9a:	7823      	ldrb	r3, [r4, #0]
 801bc9c:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc9e:	d10a      	bne.n	801bcb6 <_vfiprintf_r+0x156>
 801bca0:	7863      	ldrb	r3, [r4, #1]
 801bca2:	2b2a      	cmp	r3, #42	@ 0x2a
 801bca4:	d132      	bne.n	801bd0c <_vfiprintf_r+0x1ac>
 801bca6:	9b03      	ldr	r3, [sp, #12]
 801bca8:	1d1a      	adds	r2, r3, #4
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	9203      	str	r2, [sp, #12]
 801bcae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bcb2:	3402      	adds	r4, #2
 801bcb4:	9305      	str	r3, [sp, #20]
 801bcb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bd8c <_vfiprintf_r+0x22c>
 801bcba:	7821      	ldrb	r1, [r4, #0]
 801bcbc:	2203      	movs	r2, #3
 801bcbe:	4650      	mov	r0, sl
 801bcc0:	f7e4 fac6 	bl	8000250 <memchr>
 801bcc4:	b138      	cbz	r0, 801bcd6 <_vfiprintf_r+0x176>
 801bcc6:	9b04      	ldr	r3, [sp, #16]
 801bcc8:	eba0 000a 	sub.w	r0, r0, sl
 801bccc:	2240      	movs	r2, #64	@ 0x40
 801bcce:	4082      	lsls	r2, r0
 801bcd0:	4313      	orrs	r3, r2
 801bcd2:	3401      	adds	r4, #1
 801bcd4:	9304      	str	r3, [sp, #16]
 801bcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcda:	4829      	ldr	r0, [pc, #164]	@ (801bd80 <_vfiprintf_r+0x220>)
 801bcdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bce0:	2206      	movs	r2, #6
 801bce2:	f7e4 fab5 	bl	8000250 <memchr>
 801bce6:	2800      	cmp	r0, #0
 801bce8:	d03f      	beq.n	801bd6a <_vfiprintf_r+0x20a>
 801bcea:	4b26      	ldr	r3, [pc, #152]	@ (801bd84 <_vfiprintf_r+0x224>)
 801bcec:	bb1b      	cbnz	r3, 801bd36 <_vfiprintf_r+0x1d6>
 801bcee:	9b03      	ldr	r3, [sp, #12]
 801bcf0:	3307      	adds	r3, #7
 801bcf2:	f023 0307 	bic.w	r3, r3, #7
 801bcf6:	3308      	adds	r3, #8
 801bcf8:	9303      	str	r3, [sp, #12]
 801bcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcfc:	443b      	add	r3, r7
 801bcfe:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd00:	e76a      	b.n	801bbd8 <_vfiprintf_r+0x78>
 801bd02:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd06:	460c      	mov	r4, r1
 801bd08:	2001      	movs	r0, #1
 801bd0a:	e7a8      	b.n	801bc5e <_vfiprintf_r+0xfe>
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	3401      	adds	r4, #1
 801bd10:	9305      	str	r3, [sp, #20]
 801bd12:	4619      	mov	r1, r3
 801bd14:	f04f 0c0a 	mov.w	ip, #10
 801bd18:	4620      	mov	r0, r4
 801bd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd1e:	3a30      	subs	r2, #48	@ 0x30
 801bd20:	2a09      	cmp	r2, #9
 801bd22:	d903      	bls.n	801bd2c <_vfiprintf_r+0x1cc>
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d0c6      	beq.n	801bcb6 <_vfiprintf_r+0x156>
 801bd28:	9105      	str	r1, [sp, #20]
 801bd2a:	e7c4      	b.n	801bcb6 <_vfiprintf_r+0x156>
 801bd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd30:	4604      	mov	r4, r0
 801bd32:	2301      	movs	r3, #1
 801bd34:	e7f0      	b.n	801bd18 <_vfiprintf_r+0x1b8>
 801bd36:	ab03      	add	r3, sp, #12
 801bd38:	9300      	str	r3, [sp, #0]
 801bd3a:	462a      	mov	r2, r5
 801bd3c:	4b12      	ldr	r3, [pc, #72]	@ (801bd88 <_vfiprintf_r+0x228>)
 801bd3e:	a904      	add	r1, sp, #16
 801bd40:	4630      	mov	r0, r6
 801bd42:	f3af 8000 	nop.w
 801bd46:	4607      	mov	r7, r0
 801bd48:	1c78      	adds	r0, r7, #1
 801bd4a:	d1d6      	bne.n	801bcfa <_vfiprintf_r+0x19a>
 801bd4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bd4e:	07d9      	lsls	r1, r3, #31
 801bd50:	d405      	bmi.n	801bd5e <_vfiprintf_r+0x1fe>
 801bd52:	89ab      	ldrh	r3, [r5, #12]
 801bd54:	059a      	lsls	r2, r3, #22
 801bd56:	d402      	bmi.n	801bd5e <_vfiprintf_r+0x1fe>
 801bd58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bd5a:	f7ff fceb 	bl	801b734 <__retarget_lock_release_recursive>
 801bd5e:	89ab      	ldrh	r3, [r5, #12]
 801bd60:	065b      	lsls	r3, r3, #25
 801bd62:	f53f af1f 	bmi.w	801bba4 <_vfiprintf_r+0x44>
 801bd66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd68:	e71e      	b.n	801bba8 <_vfiprintf_r+0x48>
 801bd6a:	ab03      	add	r3, sp, #12
 801bd6c:	9300      	str	r3, [sp, #0]
 801bd6e:	462a      	mov	r2, r5
 801bd70:	4b05      	ldr	r3, [pc, #20]	@ (801bd88 <_vfiprintf_r+0x228>)
 801bd72:	a904      	add	r1, sp, #16
 801bd74:	4630      	mov	r0, r6
 801bd76:	f000 f879 	bl	801be6c <_printf_i>
 801bd7a:	e7e4      	b.n	801bd46 <_vfiprintf_r+0x1e6>
 801bd7c:	0801f6e2 	.word	0x0801f6e2
 801bd80:	0801f6ec 	.word	0x0801f6ec
 801bd84:	00000000 	.word	0x00000000
 801bd88:	0801bb3b 	.word	0x0801bb3b
 801bd8c:	0801f6e8 	.word	0x0801f6e8

0801bd90 <_printf_common>:
 801bd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd94:	4616      	mov	r6, r2
 801bd96:	4698      	mov	r8, r3
 801bd98:	688a      	ldr	r2, [r1, #8]
 801bd9a:	690b      	ldr	r3, [r1, #16]
 801bd9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bda0:	4293      	cmp	r3, r2
 801bda2:	bfb8      	it	lt
 801bda4:	4613      	movlt	r3, r2
 801bda6:	6033      	str	r3, [r6, #0]
 801bda8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bdac:	4607      	mov	r7, r0
 801bdae:	460c      	mov	r4, r1
 801bdb0:	b10a      	cbz	r2, 801bdb6 <_printf_common+0x26>
 801bdb2:	3301      	adds	r3, #1
 801bdb4:	6033      	str	r3, [r6, #0]
 801bdb6:	6823      	ldr	r3, [r4, #0]
 801bdb8:	0699      	lsls	r1, r3, #26
 801bdba:	bf42      	ittt	mi
 801bdbc:	6833      	ldrmi	r3, [r6, #0]
 801bdbe:	3302      	addmi	r3, #2
 801bdc0:	6033      	strmi	r3, [r6, #0]
 801bdc2:	6825      	ldr	r5, [r4, #0]
 801bdc4:	f015 0506 	ands.w	r5, r5, #6
 801bdc8:	d106      	bne.n	801bdd8 <_printf_common+0x48>
 801bdca:	f104 0a19 	add.w	sl, r4, #25
 801bdce:	68e3      	ldr	r3, [r4, #12]
 801bdd0:	6832      	ldr	r2, [r6, #0]
 801bdd2:	1a9b      	subs	r3, r3, r2
 801bdd4:	42ab      	cmp	r3, r5
 801bdd6:	dc26      	bgt.n	801be26 <_printf_common+0x96>
 801bdd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bddc:	6822      	ldr	r2, [r4, #0]
 801bdde:	3b00      	subs	r3, #0
 801bde0:	bf18      	it	ne
 801bde2:	2301      	movne	r3, #1
 801bde4:	0692      	lsls	r2, r2, #26
 801bde6:	d42b      	bmi.n	801be40 <_printf_common+0xb0>
 801bde8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bdec:	4641      	mov	r1, r8
 801bdee:	4638      	mov	r0, r7
 801bdf0:	47c8      	blx	r9
 801bdf2:	3001      	adds	r0, #1
 801bdf4:	d01e      	beq.n	801be34 <_printf_common+0xa4>
 801bdf6:	6823      	ldr	r3, [r4, #0]
 801bdf8:	6922      	ldr	r2, [r4, #16]
 801bdfa:	f003 0306 	and.w	r3, r3, #6
 801bdfe:	2b04      	cmp	r3, #4
 801be00:	bf02      	ittt	eq
 801be02:	68e5      	ldreq	r5, [r4, #12]
 801be04:	6833      	ldreq	r3, [r6, #0]
 801be06:	1aed      	subeq	r5, r5, r3
 801be08:	68a3      	ldr	r3, [r4, #8]
 801be0a:	bf0c      	ite	eq
 801be0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801be10:	2500      	movne	r5, #0
 801be12:	4293      	cmp	r3, r2
 801be14:	bfc4      	itt	gt
 801be16:	1a9b      	subgt	r3, r3, r2
 801be18:	18ed      	addgt	r5, r5, r3
 801be1a:	2600      	movs	r6, #0
 801be1c:	341a      	adds	r4, #26
 801be1e:	42b5      	cmp	r5, r6
 801be20:	d11a      	bne.n	801be58 <_printf_common+0xc8>
 801be22:	2000      	movs	r0, #0
 801be24:	e008      	b.n	801be38 <_printf_common+0xa8>
 801be26:	2301      	movs	r3, #1
 801be28:	4652      	mov	r2, sl
 801be2a:	4641      	mov	r1, r8
 801be2c:	4638      	mov	r0, r7
 801be2e:	47c8      	blx	r9
 801be30:	3001      	adds	r0, #1
 801be32:	d103      	bne.n	801be3c <_printf_common+0xac>
 801be34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801be38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be3c:	3501      	adds	r5, #1
 801be3e:	e7c6      	b.n	801bdce <_printf_common+0x3e>
 801be40:	18e1      	adds	r1, r4, r3
 801be42:	1c5a      	adds	r2, r3, #1
 801be44:	2030      	movs	r0, #48	@ 0x30
 801be46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801be4a:	4422      	add	r2, r4
 801be4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801be50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801be54:	3302      	adds	r3, #2
 801be56:	e7c7      	b.n	801bde8 <_printf_common+0x58>
 801be58:	2301      	movs	r3, #1
 801be5a:	4622      	mov	r2, r4
 801be5c:	4641      	mov	r1, r8
 801be5e:	4638      	mov	r0, r7
 801be60:	47c8      	blx	r9
 801be62:	3001      	adds	r0, #1
 801be64:	d0e6      	beq.n	801be34 <_printf_common+0xa4>
 801be66:	3601      	adds	r6, #1
 801be68:	e7d9      	b.n	801be1e <_printf_common+0x8e>
	...

0801be6c <_printf_i>:
 801be6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801be70:	7e0f      	ldrb	r7, [r1, #24]
 801be72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801be74:	2f78      	cmp	r7, #120	@ 0x78
 801be76:	4691      	mov	r9, r2
 801be78:	4680      	mov	r8, r0
 801be7a:	460c      	mov	r4, r1
 801be7c:	469a      	mov	sl, r3
 801be7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801be82:	d807      	bhi.n	801be94 <_printf_i+0x28>
 801be84:	2f62      	cmp	r7, #98	@ 0x62
 801be86:	d80a      	bhi.n	801be9e <_printf_i+0x32>
 801be88:	2f00      	cmp	r7, #0
 801be8a:	f000 80d2 	beq.w	801c032 <_printf_i+0x1c6>
 801be8e:	2f58      	cmp	r7, #88	@ 0x58
 801be90:	f000 80b9 	beq.w	801c006 <_printf_i+0x19a>
 801be94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801be98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801be9c:	e03a      	b.n	801bf14 <_printf_i+0xa8>
 801be9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bea2:	2b15      	cmp	r3, #21
 801bea4:	d8f6      	bhi.n	801be94 <_printf_i+0x28>
 801bea6:	a101      	add	r1, pc, #4	@ (adr r1, 801beac <_printf_i+0x40>)
 801bea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801beac:	0801bf05 	.word	0x0801bf05
 801beb0:	0801bf19 	.word	0x0801bf19
 801beb4:	0801be95 	.word	0x0801be95
 801beb8:	0801be95 	.word	0x0801be95
 801bebc:	0801be95 	.word	0x0801be95
 801bec0:	0801be95 	.word	0x0801be95
 801bec4:	0801bf19 	.word	0x0801bf19
 801bec8:	0801be95 	.word	0x0801be95
 801becc:	0801be95 	.word	0x0801be95
 801bed0:	0801be95 	.word	0x0801be95
 801bed4:	0801be95 	.word	0x0801be95
 801bed8:	0801c019 	.word	0x0801c019
 801bedc:	0801bf43 	.word	0x0801bf43
 801bee0:	0801bfd3 	.word	0x0801bfd3
 801bee4:	0801be95 	.word	0x0801be95
 801bee8:	0801be95 	.word	0x0801be95
 801beec:	0801c03b 	.word	0x0801c03b
 801bef0:	0801be95 	.word	0x0801be95
 801bef4:	0801bf43 	.word	0x0801bf43
 801bef8:	0801be95 	.word	0x0801be95
 801befc:	0801be95 	.word	0x0801be95
 801bf00:	0801bfdb 	.word	0x0801bfdb
 801bf04:	6833      	ldr	r3, [r6, #0]
 801bf06:	1d1a      	adds	r2, r3, #4
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	6032      	str	r2, [r6, #0]
 801bf0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bf10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bf14:	2301      	movs	r3, #1
 801bf16:	e09d      	b.n	801c054 <_printf_i+0x1e8>
 801bf18:	6833      	ldr	r3, [r6, #0]
 801bf1a:	6820      	ldr	r0, [r4, #0]
 801bf1c:	1d19      	adds	r1, r3, #4
 801bf1e:	6031      	str	r1, [r6, #0]
 801bf20:	0606      	lsls	r6, r0, #24
 801bf22:	d501      	bpl.n	801bf28 <_printf_i+0xbc>
 801bf24:	681d      	ldr	r5, [r3, #0]
 801bf26:	e003      	b.n	801bf30 <_printf_i+0xc4>
 801bf28:	0645      	lsls	r5, r0, #25
 801bf2a:	d5fb      	bpl.n	801bf24 <_printf_i+0xb8>
 801bf2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bf30:	2d00      	cmp	r5, #0
 801bf32:	da03      	bge.n	801bf3c <_printf_i+0xd0>
 801bf34:	232d      	movs	r3, #45	@ 0x2d
 801bf36:	426d      	negs	r5, r5
 801bf38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf3c:	4859      	ldr	r0, [pc, #356]	@ (801c0a4 <_printf_i+0x238>)
 801bf3e:	230a      	movs	r3, #10
 801bf40:	e011      	b.n	801bf66 <_printf_i+0xfa>
 801bf42:	6821      	ldr	r1, [r4, #0]
 801bf44:	6833      	ldr	r3, [r6, #0]
 801bf46:	0608      	lsls	r0, r1, #24
 801bf48:	f853 5b04 	ldr.w	r5, [r3], #4
 801bf4c:	d402      	bmi.n	801bf54 <_printf_i+0xe8>
 801bf4e:	0649      	lsls	r1, r1, #25
 801bf50:	bf48      	it	mi
 801bf52:	b2ad      	uxthmi	r5, r5
 801bf54:	2f6f      	cmp	r7, #111	@ 0x6f
 801bf56:	4853      	ldr	r0, [pc, #332]	@ (801c0a4 <_printf_i+0x238>)
 801bf58:	6033      	str	r3, [r6, #0]
 801bf5a:	bf14      	ite	ne
 801bf5c:	230a      	movne	r3, #10
 801bf5e:	2308      	moveq	r3, #8
 801bf60:	2100      	movs	r1, #0
 801bf62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bf66:	6866      	ldr	r6, [r4, #4]
 801bf68:	60a6      	str	r6, [r4, #8]
 801bf6a:	2e00      	cmp	r6, #0
 801bf6c:	bfa2      	ittt	ge
 801bf6e:	6821      	ldrge	r1, [r4, #0]
 801bf70:	f021 0104 	bicge.w	r1, r1, #4
 801bf74:	6021      	strge	r1, [r4, #0]
 801bf76:	b90d      	cbnz	r5, 801bf7c <_printf_i+0x110>
 801bf78:	2e00      	cmp	r6, #0
 801bf7a:	d04b      	beq.n	801c014 <_printf_i+0x1a8>
 801bf7c:	4616      	mov	r6, r2
 801bf7e:	fbb5 f1f3 	udiv	r1, r5, r3
 801bf82:	fb03 5711 	mls	r7, r3, r1, r5
 801bf86:	5dc7      	ldrb	r7, [r0, r7]
 801bf88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bf8c:	462f      	mov	r7, r5
 801bf8e:	42bb      	cmp	r3, r7
 801bf90:	460d      	mov	r5, r1
 801bf92:	d9f4      	bls.n	801bf7e <_printf_i+0x112>
 801bf94:	2b08      	cmp	r3, #8
 801bf96:	d10b      	bne.n	801bfb0 <_printf_i+0x144>
 801bf98:	6823      	ldr	r3, [r4, #0]
 801bf9a:	07df      	lsls	r7, r3, #31
 801bf9c:	d508      	bpl.n	801bfb0 <_printf_i+0x144>
 801bf9e:	6923      	ldr	r3, [r4, #16]
 801bfa0:	6861      	ldr	r1, [r4, #4]
 801bfa2:	4299      	cmp	r1, r3
 801bfa4:	bfde      	ittt	le
 801bfa6:	2330      	movle	r3, #48	@ 0x30
 801bfa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bfac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801bfb0:	1b92      	subs	r2, r2, r6
 801bfb2:	6122      	str	r2, [r4, #16]
 801bfb4:	f8cd a000 	str.w	sl, [sp]
 801bfb8:	464b      	mov	r3, r9
 801bfba:	aa03      	add	r2, sp, #12
 801bfbc:	4621      	mov	r1, r4
 801bfbe:	4640      	mov	r0, r8
 801bfc0:	f7ff fee6 	bl	801bd90 <_printf_common>
 801bfc4:	3001      	adds	r0, #1
 801bfc6:	d14a      	bne.n	801c05e <_printf_i+0x1f2>
 801bfc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bfcc:	b004      	add	sp, #16
 801bfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfd2:	6823      	ldr	r3, [r4, #0]
 801bfd4:	f043 0320 	orr.w	r3, r3, #32
 801bfd8:	6023      	str	r3, [r4, #0]
 801bfda:	4833      	ldr	r0, [pc, #204]	@ (801c0a8 <_printf_i+0x23c>)
 801bfdc:	2778      	movs	r7, #120	@ 0x78
 801bfde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bfe2:	6823      	ldr	r3, [r4, #0]
 801bfe4:	6831      	ldr	r1, [r6, #0]
 801bfe6:	061f      	lsls	r7, r3, #24
 801bfe8:	f851 5b04 	ldr.w	r5, [r1], #4
 801bfec:	d402      	bmi.n	801bff4 <_printf_i+0x188>
 801bfee:	065f      	lsls	r7, r3, #25
 801bff0:	bf48      	it	mi
 801bff2:	b2ad      	uxthmi	r5, r5
 801bff4:	6031      	str	r1, [r6, #0]
 801bff6:	07d9      	lsls	r1, r3, #31
 801bff8:	bf44      	itt	mi
 801bffa:	f043 0320 	orrmi.w	r3, r3, #32
 801bffe:	6023      	strmi	r3, [r4, #0]
 801c000:	b11d      	cbz	r5, 801c00a <_printf_i+0x19e>
 801c002:	2310      	movs	r3, #16
 801c004:	e7ac      	b.n	801bf60 <_printf_i+0xf4>
 801c006:	4827      	ldr	r0, [pc, #156]	@ (801c0a4 <_printf_i+0x238>)
 801c008:	e7e9      	b.n	801bfde <_printf_i+0x172>
 801c00a:	6823      	ldr	r3, [r4, #0]
 801c00c:	f023 0320 	bic.w	r3, r3, #32
 801c010:	6023      	str	r3, [r4, #0]
 801c012:	e7f6      	b.n	801c002 <_printf_i+0x196>
 801c014:	4616      	mov	r6, r2
 801c016:	e7bd      	b.n	801bf94 <_printf_i+0x128>
 801c018:	6833      	ldr	r3, [r6, #0]
 801c01a:	6825      	ldr	r5, [r4, #0]
 801c01c:	6961      	ldr	r1, [r4, #20]
 801c01e:	1d18      	adds	r0, r3, #4
 801c020:	6030      	str	r0, [r6, #0]
 801c022:	062e      	lsls	r6, r5, #24
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	d501      	bpl.n	801c02c <_printf_i+0x1c0>
 801c028:	6019      	str	r1, [r3, #0]
 801c02a:	e002      	b.n	801c032 <_printf_i+0x1c6>
 801c02c:	0668      	lsls	r0, r5, #25
 801c02e:	d5fb      	bpl.n	801c028 <_printf_i+0x1bc>
 801c030:	8019      	strh	r1, [r3, #0]
 801c032:	2300      	movs	r3, #0
 801c034:	6123      	str	r3, [r4, #16]
 801c036:	4616      	mov	r6, r2
 801c038:	e7bc      	b.n	801bfb4 <_printf_i+0x148>
 801c03a:	6833      	ldr	r3, [r6, #0]
 801c03c:	1d1a      	adds	r2, r3, #4
 801c03e:	6032      	str	r2, [r6, #0]
 801c040:	681e      	ldr	r6, [r3, #0]
 801c042:	6862      	ldr	r2, [r4, #4]
 801c044:	2100      	movs	r1, #0
 801c046:	4630      	mov	r0, r6
 801c048:	f7e4 f902 	bl	8000250 <memchr>
 801c04c:	b108      	cbz	r0, 801c052 <_printf_i+0x1e6>
 801c04e:	1b80      	subs	r0, r0, r6
 801c050:	6060      	str	r0, [r4, #4]
 801c052:	6863      	ldr	r3, [r4, #4]
 801c054:	6123      	str	r3, [r4, #16]
 801c056:	2300      	movs	r3, #0
 801c058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c05c:	e7aa      	b.n	801bfb4 <_printf_i+0x148>
 801c05e:	6923      	ldr	r3, [r4, #16]
 801c060:	4632      	mov	r2, r6
 801c062:	4649      	mov	r1, r9
 801c064:	4640      	mov	r0, r8
 801c066:	47d0      	blx	sl
 801c068:	3001      	adds	r0, #1
 801c06a:	d0ad      	beq.n	801bfc8 <_printf_i+0x15c>
 801c06c:	6823      	ldr	r3, [r4, #0]
 801c06e:	079b      	lsls	r3, r3, #30
 801c070:	d413      	bmi.n	801c09a <_printf_i+0x22e>
 801c072:	68e0      	ldr	r0, [r4, #12]
 801c074:	9b03      	ldr	r3, [sp, #12]
 801c076:	4298      	cmp	r0, r3
 801c078:	bfb8      	it	lt
 801c07a:	4618      	movlt	r0, r3
 801c07c:	e7a6      	b.n	801bfcc <_printf_i+0x160>
 801c07e:	2301      	movs	r3, #1
 801c080:	4632      	mov	r2, r6
 801c082:	4649      	mov	r1, r9
 801c084:	4640      	mov	r0, r8
 801c086:	47d0      	blx	sl
 801c088:	3001      	adds	r0, #1
 801c08a:	d09d      	beq.n	801bfc8 <_printf_i+0x15c>
 801c08c:	3501      	adds	r5, #1
 801c08e:	68e3      	ldr	r3, [r4, #12]
 801c090:	9903      	ldr	r1, [sp, #12]
 801c092:	1a5b      	subs	r3, r3, r1
 801c094:	42ab      	cmp	r3, r5
 801c096:	dcf2      	bgt.n	801c07e <_printf_i+0x212>
 801c098:	e7eb      	b.n	801c072 <_printf_i+0x206>
 801c09a:	2500      	movs	r5, #0
 801c09c:	f104 0619 	add.w	r6, r4, #25
 801c0a0:	e7f5      	b.n	801c08e <_printf_i+0x222>
 801c0a2:	bf00      	nop
 801c0a4:	0801f6f3 	.word	0x0801f6f3
 801c0a8:	0801f704 	.word	0x0801f704

0801c0ac <__sflush_r>:
 801c0ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0b4:	0716      	lsls	r6, r2, #28
 801c0b6:	4605      	mov	r5, r0
 801c0b8:	460c      	mov	r4, r1
 801c0ba:	d454      	bmi.n	801c166 <__sflush_r+0xba>
 801c0bc:	684b      	ldr	r3, [r1, #4]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	dc02      	bgt.n	801c0c8 <__sflush_r+0x1c>
 801c0c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	dd48      	ble.n	801c15a <__sflush_r+0xae>
 801c0c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c0ca:	2e00      	cmp	r6, #0
 801c0cc:	d045      	beq.n	801c15a <__sflush_r+0xae>
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c0d4:	682f      	ldr	r7, [r5, #0]
 801c0d6:	6a21      	ldr	r1, [r4, #32]
 801c0d8:	602b      	str	r3, [r5, #0]
 801c0da:	d030      	beq.n	801c13e <__sflush_r+0x92>
 801c0dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c0de:	89a3      	ldrh	r3, [r4, #12]
 801c0e0:	0759      	lsls	r1, r3, #29
 801c0e2:	d505      	bpl.n	801c0f0 <__sflush_r+0x44>
 801c0e4:	6863      	ldr	r3, [r4, #4]
 801c0e6:	1ad2      	subs	r2, r2, r3
 801c0e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c0ea:	b10b      	cbz	r3, 801c0f0 <__sflush_r+0x44>
 801c0ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c0ee:	1ad2      	subs	r2, r2, r3
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c0f4:	6a21      	ldr	r1, [r4, #32]
 801c0f6:	4628      	mov	r0, r5
 801c0f8:	47b0      	blx	r6
 801c0fa:	1c43      	adds	r3, r0, #1
 801c0fc:	89a3      	ldrh	r3, [r4, #12]
 801c0fe:	d106      	bne.n	801c10e <__sflush_r+0x62>
 801c100:	6829      	ldr	r1, [r5, #0]
 801c102:	291d      	cmp	r1, #29
 801c104:	d82b      	bhi.n	801c15e <__sflush_r+0xb2>
 801c106:	4a2a      	ldr	r2, [pc, #168]	@ (801c1b0 <__sflush_r+0x104>)
 801c108:	410a      	asrs	r2, r1
 801c10a:	07d6      	lsls	r6, r2, #31
 801c10c:	d427      	bmi.n	801c15e <__sflush_r+0xb2>
 801c10e:	2200      	movs	r2, #0
 801c110:	6062      	str	r2, [r4, #4]
 801c112:	04d9      	lsls	r1, r3, #19
 801c114:	6922      	ldr	r2, [r4, #16]
 801c116:	6022      	str	r2, [r4, #0]
 801c118:	d504      	bpl.n	801c124 <__sflush_r+0x78>
 801c11a:	1c42      	adds	r2, r0, #1
 801c11c:	d101      	bne.n	801c122 <__sflush_r+0x76>
 801c11e:	682b      	ldr	r3, [r5, #0]
 801c120:	b903      	cbnz	r3, 801c124 <__sflush_r+0x78>
 801c122:	6560      	str	r0, [r4, #84]	@ 0x54
 801c124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c126:	602f      	str	r7, [r5, #0]
 801c128:	b1b9      	cbz	r1, 801c15a <__sflush_r+0xae>
 801c12a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c12e:	4299      	cmp	r1, r3
 801c130:	d002      	beq.n	801c138 <__sflush_r+0x8c>
 801c132:	4628      	mov	r0, r5
 801c134:	f7ff fb40 	bl	801b7b8 <_free_r>
 801c138:	2300      	movs	r3, #0
 801c13a:	6363      	str	r3, [r4, #52]	@ 0x34
 801c13c:	e00d      	b.n	801c15a <__sflush_r+0xae>
 801c13e:	2301      	movs	r3, #1
 801c140:	4628      	mov	r0, r5
 801c142:	47b0      	blx	r6
 801c144:	4602      	mov	r2, r0
 801c146:	1c50      	adds	r0, r2, #1
 801c148:	d1c9      	bne.n	801c0de <__sflush_r+0x32>
 801c14a:	682b      	ldr	r3, [r5, #0]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d0c6      	beq.n	801c0de <__sflush_r+0x32>
 801c150:	2b1d      	cmp	r3, #29
 801c152:	d001      	beq.n	801c158 <__sflush_r+0xac>
 801c154:	2b16      	cmp	r3, #22
 801c156:	d11e      	bne.n	801c196 <__sflush_r+0xea>
 801c158:	602f      	str	r7, [r5, #0]
 801c15a:	2000      	movs	r0, #0
 801c15c:	e022      	b.n	801c1a4 <__sflush_r+0xf8>
 801c15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c162:	b21b      	sxth	r3, r3
 801c164:	e01b      	b.n	801c19e <__sflush_r+0xf2>
 801c166:	690f      	ldr	r7, [r1, #16]
 801c168:	2f00      	cmp	r7, #0
 801c16a:	d0f6      	beq.n	801c15a <__sflush_r+0xae>
 801c16c:	0793      	lsls	r3, r2, #30
 801c16e:	680e      	ldr	r6, [r1, #0]
 801c170:	bf08      	it	eq
 801c172:	694b      	ldreq	r3, [r1, #20]
 801c174:	600f      	str	r7, [r1, #0]
 801c176:	bf18      	it	ne
 801c178:	2300      	movne	r3, #0
 801c17a:	eba6 0807 	sub.w	r8, r6, r7
 801c17e:	608b      	str	r3, [r1, #8]
 801c180:	f1b8 0f00 	cmp.w	r8, #0
 801c184:	dde9      	ble.n	801c15a <__sflush_r+0xae>
 801c186:	6a21      	ldr	r1, [r4, #32]
 801c188:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c18a:	4643      	mov	r3, r8
 801c18c:	463a      	mov	r2, r7
 801c18e:	4628      	mov	r0, r5
 801c190:	47b0      	blx	r6
 801c192:	2800      	cmp	r0, #0
 801c194:	dc08      	bgt.n	801c1a8 <__sflush_r+0xfc>
 801c196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c19e:	81a3      	strh	r3, [r4, #12]
 801c1a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1a8:	4407      	add	r7, r0
 801c1aa:	eba8 0800 	sub.w	r8, r8, r0
 801c1ae:	e7e7      	b.n	801c180 <__sflush_r+0xd4>
 801c1b0:	dfbffffe 	.word	0xdfbffffe

0801c1b4 <_fflush_r>:
 801c1b4:	b538      	push	{r3, r4, r5, lr}
 801c1b6:	690b      	ldr	r3, [r1, #16]
 801c1b8:	4605      	mov	r5, r0
 801c1ba:	460c      	mov	r4, r1
 801c1bc:	b913      	cbnz	r3, 801c1c4 <_fflush_r+0x10>
 801c1be:	2500      	movs	r5, #0
 801c1c0:	4628      	mov	r0, r5
 801c1c2:	bd38      	pop	{r3, r4, r5, pc}
 801c1c4:	b118      	cbz	r0, 801c1ce <_fflush_r+0x1a>
 801c1c6:	6a03      	ldr	r3, [r0, #32]
 801c1c8:	b90b      	cbnz	r3, 801c1ce <_fflush_r+0x1a>
 801c1ca:	f7fe ffe3 	bl	801b194 <__sinit>
 801c1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d0f3      	beq.n	801c1be <_fflush_r+0xa>
 801c1d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c1d8:	07d0      	lsls	r0, r2, #31
 801c1da:	d404      	bmi.n	801c1e6 <_fflush_r+0x32>
 801c1dc:	0599      	lsls	r1, r3, #22
 801c1de:	d402      	bmi.n	801c1e6 <_fflush_r+0x32>
 801c1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1e2:	f7ff faa6 	bl	801b732 <__retarget_lock_acquire_recursive>
 801c1e6:	4628      	mov	r0, r5
 801c1e8:	4621      	mov	r1, r4
 801c1ea:	f7ff ff5f 	bl	801c0ac <__sflush_r>
 801c1ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c1f0:	07da      	lsls	r2, r3, #31
 801c1f2:	4605      	mov	r5, r0
 801c1f4:	d4e4      	bmi.n	801c1c0 <_fflush_r+0xc>
 801c1f6:	89a3      	ldrh	r3, [r4, #12]
 801c1f8:	059b      	lsls	r3, r3, #22
 801c1fa:	d4e1      	bmi.n	801c1c0 <_fflush_r+0xc>
 801c1fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1fe:	f7ff fa99 	bl	801b734 <__retarget_lock_release_recursive>
 801c202:	e7dd      	b.n	801c1c0 <_fflush_r+0xc>

0801c204 <fiprintf>:
 801c204:	b40e      	push	{r1, r2, r3}
 801c206:	b503      	push	{r0, r1, lr}
 801c208:	4601      	mov	r1, r0
 801c20a:	ab03      	add	r3, sp, #12
 801c20c:	4805      	ldr	r0, [pc, #20]	@ (801c224 <fiprintf+0x20>)
 801c20e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c212:	6800      	ldr	r0, [r0, #0]
 801c214:	9301      	str	r3, [sp, #4]
 801c216:	f7ff fca3 	bl	801bb60 <_vfiprintf_r>
 801c21a:	b002      	add	sp, #8
 801c21c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c220:	b003      	add	sp, #12
 801c222:	4770      	bx	lr
 801c224:	20000ba0 	.word	0x20000ba0

0801c228 <__swhatbuf_r>:
 801c228:	b570      	push	{r4, r5, r6, lr}
 801c22a:	460c      	mov	r4, r1
 801c22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c230:	2900      	cmp	r1, #0
 801c232:	b096      	sub	sp, #88	@ 0x58
 801c234:	4615      	mov	r5, r2
 801c236:	461e      	mov	r6, r3
 801c238:	da0d      	bge.n	801c256 <__swhatbuf_r+0x2e>
 801c23a:	89a3      	ldrh	r3, [r4, #12]
 801c23c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c240:	f04f 0100 	mov.w	r1, #0
 801c244:	bf14      	ite	ne
 801c246:	2340      	movne	r3, #64	@ 0x40
 801c248:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c24c:	2000      	movs	r0, #0
 801c24e:	6031      	str	r1, [r6, #0]
 801c250:	602b      	str	r3, [r5, #0]
 801c252:	b016      	add	sp, #88	@ 0x58
 801c254:	bd70      	pop	{r4, r5, r6, pc}
 801c256:	466a      	mov	r2, sp
 801c258:	f000 f848 	bl	801c2ec <_fstat_r>
 801c25c:	2800      	cmp	r0, #0
 801c25e:	dbec      	blt.n	801c23a <__swhatbuf_r+0x12>
 801c260:	9901      	ldr	r1, [sp, #4]
 801c262:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c266:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c26a:	4259      	negs	r1, r3
 801c26c:	4159      	adcs	r1, r3
 801c26e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c272:	e7eb      	b.n	801c24c <__swhatbuf_r+0x24>

0801c274 <__smakebuf_r>:
 801c274:	898b      	ldrh	r3, [r1, #12]
 801c276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c278:	079d      	lsls	r5, r3, #30
 801c27a:	4606      	mov	r6, r0
 801c27c:	460c      	mov	r4, r1
 801c27e:	d507      	bpl.n	801c290 <__smakebuf_r+0x1c>
 801c280:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c284:	6023      	str	r3, [r4, #0]
 801c286:	6123      	str	r3, [r4, #16]
 801c288:	2301      	movs	r3, #1
 801c28a:	6163      	str	r3, [r4, #20]
 801c28c:	b003      	add	sp, #12
 801c28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c290:	ab01      	add	r3, sp, #4
 801c292:	466a      	mov	r2, sp
 801c294:	f7ff ffc8 	bl	801c228 <__swhatbuf_r>
 801c298:	9f00      	ldr	r7, [sp, #0]
 801c29a:	4605      	mov	r5, r0
 801c29c:	4639      	mov	r1, r7
 801c29e:	4630      	mov	r0, r6
 801c2a0:	f7fe fd46 	bl	801ad30 <_malloc_r>
 801c2a4:	b948      	cbnz	r0, 801c2ba <__smakebuf_r+0x46>
 801c2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2aa:	059a      	lsls	r2, r3, #22
 801c2ac:	d4ee      	bmi.n	801c28c <__smakebuf_r+0x18>
 801c2ae:	f023 0303 	bic.w	r3, r3, #3
 801c2b2:	f043 0302 	orr.w	r3, r3, #2
 801c2b6:	81a3      	strh	r3, [r4, #12]
 801c2b8:	e7e2      	b.n	801c280 <__smakebuf_r+0xc>
 801c2ba:	89a3      	ldrh	r3, [r4, #12]
 801c2bc:	6020      	str	r0, [r4, #0]
 801c2be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c2c2:	81a3      	strh	r3, [r4, #12]
 801c2c4:	9b01      	ldr	r3, [sp, #4]
 801c2c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c2ca:	b15b      	cbz	r3, 801c2e4 <__smakebuf_r+0x70>
 801c2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2d0:	4630      	mov	r0, r6
 801c2d2:	f000 f81d 	bl	801c310 <_isatty_r>
 801c2d6:	b128      	cbz	r0, 801c2e4 <__smakebuf_r+0x70>
 801c2d8:	89a3      	ldrh	r3, [r4, #12]
 801c2da:	f023 0303 	bic.w	r3, r3, #3
 801c2de:	f043 0301 	orr.w	r3, r3, #1
 801c2e2:	81a3      	strh	r3, [r4, #12]
 801c2e4:	89a3      	ldrh	r3, [r4, #12]
 801c2e6:	431d      	orrs	r5, r3
 801c2e8:	81a5      	strh	r5, [r4, #12]
 801c2ea:	e7cf      	b.n	801c28c <__smakebuf_r+0x18>

0801c2ec <_fstat_r>:
 801c2ec:	b538      	push	{r3, r4, r5, lr}
 801c2ee:	4d07      	ldr	r5, [pc, #28]	@ (801c30c <_fstat_r+0x20>)
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	4604      	mov	r4, r0
 801c2f4:	4608      	mov	r0, r1
 801c2f6:	4611      	mov	r1, r2
 801c2f8:	602b      	str	r3, [r5, #0]
 801c2fa:	f7e6 fcc3 	bl	8002c84 <_fstat>
 801c2fe:	1c43      	adds	r3, r0, #1
 801c300:	d102      	bne.n	801c308 <_fstat_r+0x1c>
 801c302:	682b      	ldr	r3, [r5, #0]
 801c304:	b103      	cbz	r3, 801c308 <_fstat_r+0x1c>
 801c306:	6023      	str	r3, [r4, #0]
 801c308:	bd38      	pop	{r3, r4, r5, pc}
 801c30a:	bf00      	nop
 801c30c:	2000c77c 	.word	0x2000c77c

0801c310 <_isatty_r>:
 801c310:	b538      	push	{r3, r4, r5, lr}
 801c312:	4d06      	ldr	r5, [pc, #24]	@ (801c32c <_isatty_r+0x1c>)
 801c314:	2300      	movs	r3, #0
 801c316:	4604      	mov	r4, r0
 801c318:	4608      	mov	r0, r1
 801c31a:	602b      	str	r3, [r5, #0]
 801c31c:	f7e6 fcc2 	bl	8002ca4 <_isatty>
 801c320:	1c43      	adds	r3, r0, #1
 801c322:	d102      	bne.n	801c32a <_isatty_r+0x1a>
 801c324:	682b      	ldr	r3, [r5, #0]
 801c326:	b103      	cbz	r3, 801c32a <_isatty_r+0x1a>
 801c328:	6023      	str	r3, [r4, #0]
 801c32a:	bd38      	pop	{r3, r4, r5, pc}
 801c32c:	2000c77c 	.word	0x2000c77c

0801c330 <abort>:
 801c330:	b508      	push	{r3, lr}
 801c332:	2006      	movs	r0, #6
 801c334:	f000 f82c 	bl	801c390 <raise>
 801c338:	2001      	movs	r0, #1
 801c33a:	f7e6 fc53 	bl	8002be4 <_exit>

0801c33e <_raise_r>:
 801c33e:	291f      	cmp	r1, #31
 801c340:	b538      	push	{r3, r4, r5, lr}
 801c342:	4605      	mov	r5, r0
 801c344:	460c      	mov	r4, r1
 801c346:	d904      	bls.n	801c352 <_raise_r+0x14>
 801c348:	2316      	movs	r3, #22
 801c34a:	6003      	str	r3, [r0, #0]
 801c34c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c350:	bd38      	pop	{r3, r4, r5, pc}
 801c352:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c354:	b112      	cbz	r2, 801c35c <_raise_r+0x1e>
 801c356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c35a:	b94b      	cbnz	r3, 801c370 <_raise_r+0x32>
 801c35c:	4628      	mov	r0, r5
 801c35e:	f000 f831 	bl	801c3c4 <_getpid_r>
 801c362:	4622      	mov	r2, r4
 801c364:	4601      	mov	r1, r0
 801c366:	4628      	mov	r0, r5
 801c368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c36c:	f000 b818 	b.w	801c3a0 <_kill_r>
 801c370:	2b01      	cmp	r3, #1
 801c372:	d00a      	beq.n	801c38a <_raise_r+0x4c>
 801c374:	1c59      	adds	r1, r3, #1
 801c376:	d103      	bne.n	801c380 <_raise_r+0x42>
 801c378:	2316      	movs	r3, #22
 801c37a:	6003      	str	r3, [r0, #0]
 801c37c:	2001      	movs	r0, #1
 801c37e:	e7e7      	b.n	801c350 <_raise_r+0x12>
 801c380:	2100      	movs	r1, #0
 801c382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c386:	4620      	mov	r0, r4
 801c388:	4798      	blx	r3
 801c38a:	2000      	movs	r0, #0
 801c38c:	e7e0      	b.n	801c350 <_raise_r+0x12>
	...

0801c390 <raise>:
 801c390:	4b02      	ldr	r3, [pc, #8]	@ (801c39c <raise+0xc>)
 801c392:	4601      	mov	r1, r0
 801c394:	6818      	ldr	r0, [r3, #0]
 801c396:	f7ff bfd2 	b.w	801c33e <_raise_r>
 801c39a:	bf00      	nop
 801c39c:	20000ba0 	.word	0x20000ba0

0801c3a0 <_kill_r>:
 801c3a0:	b538      	push	{r3, r4, r5, lr}
 801c3a2:	4d07      	ldr	r5, [pc, #28]	@ (801c3c0 <_kill_r+0x20>)
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	4604      	mov	r4, r0
 801c3a8:	4608      	mov	r0, r1
 801c3aa:	4611      	mov	r1, r2
 801c3ac:	602b      	str	r3, [r5, #0]
 801c3ae:	f7e6 fc09 	bl	8002bc4 <_kill>
 801c3b2:	1c43      	adds	r3, r0, #1
 801c3b4:	d102      	bne.n	801c3bc <_kill_r+0x1c>
 801c3b6:	682b      	ldr	r3, [r5, #0]
 801c3b8:	b103      	cbz	r3, 801c3bc <_kill_r+0x1c>
 801c3ba:	6023      	str	r3, [r4, #0]
 801c3bc:	bd38      	pop	{r3, r4, r5, pc}
 801c3be:	bf00      	nop
 801c3c0:	2000c77c 	.word	0x2000c77c

0801c3c4 <_getpid_r>:
 801c3c4:	f7e6 bbf6 	b.w	8002bb4 <_getpid>

0801c3c8 <atan2>:
 801c3c8:	f000 bb26 	b.w	801ca18 <__ieee754_atan2>

0801c3cc <pow>:
 801c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ce:	ed2d 8b02 	vpush	{d8}
 801c3d2:	eeb0 8a40 	vmov.f32	s16, s0
 801c3d6:	eef0 8a60 	vmov.f32	s17, s1
 801c3da:	ec55 4b11 	vmov	r4, r5, d1
 801c3de:	f000 fbe3 	bl	801cba8 <__ieee754_pow>
 801c3e2:	4622      	mov	r2, r4
 801c3e4:	462b      	mov	r3, r5
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	4629      	mov	r1, r5
 801c3ea:	ec57 6b10 	vmov	r6, r7, d0
 801c3ee:	f7e4 fbd5 	bl	8000b9c <__aeabi_dcmpun>
 801c3f2:	2800      	cmp	r0, #0
 801c3f4:	d13b      	bne.n	801c46e <pow+0xa2>
 801c3f6:	ec51 0b18 	vmov	r0, r1, d8
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	2300      	movs	r3, #0
 801c3fe:	f7e4 fb9b 	bl	8000b38 <__aeabi_dcmpeq>
 801c402:	b1b8      	cbz	r0, 801c434 <pow+0x68>
 801c404:	2200      	movs	r2, #0
 801c406:	2300      	movs	r3, #0
 801c408:	4620      	mov	r0, r4
 801c40a:	4629      	mov	r1, r5
 801c40c:	f7e4 fb94 	bl	8000b38 <__aeabi_dcmpeq>
 801c410:	2800      	cmp	r0, #0
 801c412:	d146      	bne.n	801c4a2 <pow+0xd6>
 801c414:	ec45 4b10 	vmov	d0, r4, r5
 801c418:	f000 fa16 	bl	801c848 <finite>
 801c41c:	b338      	cbz	r0, 801c46e <pow+0xa2>
 801c41e:	2200      	movs	r2, #0
 801c420:	2300      	movs	r3, #0
 801c422:	4620      	mov	r0, r4
 801c424:	4629      	mov	r1, r5
 801c426:	f7e4 fb91 	bl	8000b4c <__aeabi_dcmplt>
 801c42a:	b300      	cbz	r0, 801c46e <pow+0xa2>
 801c42c:	f7ff f956 	bl	801b6dc <__errno>
 801c430:	2322      	movs	r3, #34	@ 0x22
 801c432:	e01b      	b.n	801c46c <pow+0xa0>
 801c434:	ec47 6b10 	vmov	d0, r6, r7
 801c438:	f000 fa06 	bl	801c848 <finite>
 801c43c:	b9e0      	cbnz	r0, 801c478 <pow+0xac>
 801c43e:	eeb0 0a48 	vmov.f32	s0, s16
 801c442:	eef0 0a68 	vmov.f32	s1, s17
 801c446:	f000 f9ff 	bl	801c848 <finite>
 801c44a:	b1a8      	cbz	r0, 801c478 <pow+0xac>
 801c44c:	ec45 4b10 	vmov	d0, r4, r5
 801c450:	f000 f9fa 	bl	801c848 <finite>
 801c454:	b180      	cbz	r0, 801c478 <pow+0xac>
 801c456:	4632      	mov	r2, r6
 801c458:	463b      	mov	r3, r7
 801c45a:	4630      	mov	r0, r6
 801c45c:	4639      	mov	r1, r7
 801c45e:	f7e4 fb9d 	bl	8000b9c <__aeabi_dcmpun>
 801c462:	2800      	cmp	r0, #0
 801c464:	d0e2      	beq.n	801c42c <pow+0x60>
 801c466:	f7ff f939 	bl	801b6dc <__errno>
 801c46a:	2321      	movs	r3, #33	@ 0x21
 801c46c:	6003      	str	r3, [r0, #0]
 801c46e:	ecbd 8b02 	vpop	{d8}
 801c472:	ec47 6b10 	vmov	d0, r6, r7
 801c476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c478:	2200      	movs	r2, #0
 801c47a:	2300      	movs	r3, #0
 801c47c:	4630      	mov	r0, r6
 801c47e:	4639      	mov	r1, r7
 801c480:	f7e4 fb5a 	bl	8000b38 <__aeabi_dcmpeq>
 801c484:	2800      	cmp	r0, #0
 801c486:	d0f2      	beq.n	801c46e <pow+0xa2>
 801c488:	eeb0 0a48 	vmov.f32	s0, s16
 801c48c:	eef0 0a68 	vmov.f32	s1, s17
 801c490:	f000 f9da 	bl	801c848 <finite>
 801c494:	2800      	cmp	r0, #0
 801c496:	d0ea      	beq.n	801c46e <pow+0xa2>
 801c498:	ec45 4b10 	vmov	d0, r4, r5
 801c49c:	f000 f9d4 	bl	801c848 <finite>
 801c4a0:	e7c3      	b.n	801c42a <pow+0x5e>
 801c4a2:	4f01      	ldr	r7, [pc, #4]	@ (801c4a8 <pow+0xdc>)
 801c4a4:	2600      	movs	r6, #0
 801c4a6:	e7e2      	b.n	801c46e <pow+0xa2>
 801c4a8:	3ff00000 	.word	0x3ff00000

0801c4ac <sqrt>:
 801c4ac:	b538      	push	{r3, r4, r5, lr}
 801c4ae:	ed2d 8b02 	vpush	{d8}
 801c4b2:	ec55 4b10 	vmov	r4, r5, d0
 801c4b6:	f000 f9d3 	bl	801c860 <__ieee754_sqrt>
 801c4ba:	4622      	mov	r2, r4
 801c4bc:	462b      	mov	r3, r5
 801c4be:	4620      	mov	r0, r4
 801c4c0:	4629      	mov	r1, r5
 801c4c2:	eeb0 8a40 	vmov.f32	s16, s0
 801c4c6:	eef0 8a60 	vmov.f32	s17, s1
 801c4ca:	f7e4 fb67 	bl	8000b9c <__aeabi_dcmpun>
 801c4ce:	b990      	cbnz	r0, 801c4f6 <sqrt+0x4a>
 801c4d0:	2200      	movs	r2, #0
 801c4d2:	2300      	movs	r3, #0
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	4629      	mov	r1, r5
 801c4d8:	f7e4 fb38 	bl	8000b4c <__aeabi_dcmplt>
 801c4dc:	b158      	cbz	r0, 801c4f6 <sqrt+0x4a>
 801c4de:	f7ff f8fd 	bl	801b6dc <__errno>
 801c4e2:	2321      	movs	r3, #33	@ 0x21
 801c4e4:	6003      	str	r3, [r0, #0]
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	4610      	mov	r0, r2
 801c4ec:	4619      	mov	r1, r3
 801c4ee:	f7e4 f9e5 	bl	80008bc <__aeabi_ddiv>
 801c4f2:	ec41 0b18 	vmov	d8, r0, r1
 801c4f6:	eeb0 0a48 	vmov.f32	s0, s16
 801c4fa:	eef0 0a68 	vmov.f32	s1, s17
 801c4fe:	ecbd 8b02 	vpop	{d8}
 801c502:	bd38      	pop	{r3, r4, r5, pc}
 801c504:	0000      	movs	r0, r0
	...

0801c508 <atan>:
 801c508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c50c:	ec55 4b10 	vmov	r4, r5, d0
 801c510:	4bbf      	ldr	r3, [pc, #764]	@ (801c810 <atan+0x308>)
 801c512:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801c516:	429e      	cmp	r6, r3
 801c518:	46ab      	mov	fp, r5
 801c51a:	d918      	bls.n	801c54e <atan+0x46>
 801c51c:	4bbd      	ldr	r3, [pc, #756]	@ (801c814 <atan+0x30c>)
 801c51e:	429e      	cmp	r6, r3
 801c520:	d801      	bhi.n	801c526 <atan+0x1e>
 801c522:	d109      	bne.n	801c538 <atan+0x30>
 801c524:	b144      	cbz	r4, 801c538 <atan+0x30>
 801c526:	4622      	mov	r2, r4
 801c528:	462b      	mov	r3, r5
 801c52a:	4620      	mov	r0, r4
 801c52c:	4629      	mov	r1, r5
 801c52e:	f7e3 fee5 	bl	80002fc <__adddf3>
 801c532:	4604      	mov	r4, r0
 801c534:	460d      	mov	r5, r1
 801c536:	e006      	b.n	801c546 <atan+0x3e>
 801c538:	f1bb 0f00 	cmp.w	fp, #0
 801c53c:	f340 812b 	ble.w	801c796 <atan+0x28e>
 801c540:	a597      	add	r5, pc, #604	@ (adr r5, 801c7a0 <atan+0x298>)
 801c542:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c546:	ec45 4b10 	vmov	d0, r4, r5
 801c54a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c54e:	4bb2      	ldr	r3, [pc, #712]	@ (801c818 <atan+0x310>)
 801c550:	429e      	cmp	r6, r3
 801c552:	d813      	bhi.n	801c57c <atan+0x74>
 801c554:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801c558:	429e      	cmp	r6, r3
 801c55a:	d80c      	bhi.n	801c576 <atan+0x6e>
 801c55c:	a392      	add	r3, pc, #584	@ (adr r3, 801c7a8 <atan+0x2a0>)
 801c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c562:	4620      	mov	r0, r4
 801c564:	4629      	mov	r1, r5
 801c566:	f7e3 fec9 	bl	80002fc <__adddf3>
 801c56a:	4bac      	ldr	r3, [pc, #688]	@ (801c81c <atan+0x314>)
 801c56c:	2200      	movs	r2, #0
 801c56e:	f7e4 fb0b 	bl	8000b88 <__aeabi_dcmpgt>
 801c572:	2800      	cmp	r0, #0
 801c574:	d1e7      	bne.n	801c546 <atan+0x3e>
 801c576:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c57a:	e029      	b.n	801c5d0 <atan+0xc8>
 801c57c:	f000 f95c 	bl	801c838 <fabs>
 801c580:	4ba7      	ldr	r3, [pc, #668]	@ (801c820 <atan+0x318>)
 801c582:	429e      	cmp	r6, r3
 801c584:	ec55 4b10 	vmov	r4, r5, d0
 801c588:	f200 80bc 	bhi.w	801c704 <atan+0x1fc>
 801c58c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801c590:	429e      	cmp	r6, r3
 801c592:	f200 809e 	bhi.w	801c6d2 <atan+0x1ca>
 801c596:	4622      	mov	r2, r4
 801c598:	462b      	mov	r3, r5
 801c59a:	4620      	mov	r0, r4
 801c59c:	4629      	mov	r1, r5
 801c59e:	f7e3 fead 	bl	80002fc <__adddf3>
 801c5a2:	4b9e      	ldr	r3, [pc, #632]	@ (801c81c <atan+0x314>)
 801c5a4:	2200      	movs	r2, #0
 801c5a6:	f7e3 fea7 	bl	80002f8 <__aeabi_dsub>
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	4606      	mov	r6, r0
 801c5ae:	460f      	mov	r7, r1
 801c5b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c5b4:	4620      	mov	r0, r4
 801c5b6:	4629      	mov	r1, r5
 801c5b8:	f7e3 fea0 	bl	80002fc <__adddf3>
 801c5bc:	4602      	mov	r2, r0
 801c5be:	460b      	mov	r3, r1
 801c5c0:	4630      	mov	r0, r6
 801c5c2:	4639      	mov	r1, r7
 801c5c4:	f7e4 f97a 	bl	80008bc <__aeabi_ddiv>
 801c5c8:	f04f 0a00 	mov.w	sl, #0
 801c5cc:	4604      	mov	r4, r0
 801c5ce:	460d      	mov	r5, r1
 801c5d0:	4622      	mov	r2, r4
 801c5d2:	462b      	mov	r3, r5
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	4629      	mov	r1, r5
 801c5d8:	f7e4 f846 	bl	8000668 <__aeabi_dmul>
 801c5dc:	4602      	mov	r2, r0
 801c5de:	460b      	mov	r3, r1
 801c5e0:	4680      	mov	r8, r0
 801c5e2:	4689      	mov	r9, r1
 801c5e4:	f7e4 f840 	bl	8000668 <__aeabi_dmul>
 801c5e8:	a371      	add	r3, pc, #452	@ (adr r3, 801c7b0 <atan+0x2a8>)
 801c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5ee:	4606      	mov	r6, r0
 801c5f0:	460f      	mov	r7, r1
 801c5f2:	f7e4 f839 	bl	8000668 <__aeabi_dmul>
 801c5f6:	a370      	add	r3, pc, #448	@ (adr r3, 801c7b8 <atan+0x2b0>)
 801c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5fc:	f7e3 fe7e 	bl	80002fc <__adddf3>
 801c600:	4632      	mov	r2, r6
 801c602:	463b      	mov	r3, r7
 801c604:	f7e4 f830 	bl	8000668 <__aeabi_dmul>
 801c608:	a36d      	add	r3, pc, #436	@ (adr r3, 801c7c0 <atan+0x2b8>)
 801c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c60e:	f7e3 fe75 	bl	80002fc <__adddf3>
 801c612:	4632      	mov	r2, r6
 801c614:	463b      	mov	r3, r7
 801c616:	f7e4 f827 	bl	8000668 <__aeabi_dmul>
 801c61a:	a36b      	add	r3, pc, #428	@ (adr r3, 801c7c8 <atan+0x2c0>)
 801c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c620:	f7e3 fe6c 	bl	80002fc <__adddf3>
 801c624:	4632      	mov	r2, r6
 801c626:	463b      	mov	r3, r7
 801c628:	f7e4 f81e 	bl	8000668 <__aeabi_dmul>
 801c62c:	a368      	add	r3, pc, #416	@ (adr r3, 801c7d0 <atan+0x2c8>)
 801c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c632:	f7e3 fe63 	bl	80002fc <__adddf3>
 801c636:	4632      	mov	r2, r6
 801c638:	463b      	mov	r3, r7
 801c63a:	f7e4 f815 	bl	8000668 <__aeabi_dmul>
 801c63e:	a366      	add	r3, pc, #408	@ (adr r3, 801c7d8 <atan+0x2d0>)
 801c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c644:	f7e3 fe5a 	bl	80002fc <__adddf3>
 801c648:	4642      	mov	r2, r8
 801c64a:	464b      	mov	r3, r9
 801c64c:	f7e4 f80c 	bl	8000668 <__aeabi_dmul>
 801c650:	a363      	add	r3, pc, #396	@ (adr r3, 801c7e0 <atan+0x2d8>)
 801c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c656:	4680      	mov	r8, r0
 801c658:	4689      	mov	r9, r1
 801c65a:	4630      	mov	r0, r6
 801c65c:	4639      	mov	r1, r7
 801c65e:	f7e4 f803 	bl	8000668 <__aeabi_dmul>
 801c662:	a361      	add	r3, pc, #388	@ (adr r3, 801c7e8 <atan+0x2e0>)
 801c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c668:	f7e3 fe46 	bl	80002f8 <__aeabi_dsub>
 801c66c:	4632      	mov	r2, r6
 801c66e:	463b      	mov	r3, r7
 801c670:	f7e3 fffa 	bl	8000668 <__aeabi_dmul>
 801c674:	a35e      	add	r3, pc, #376	@ (adr r3, 801c7f0 <atan+0x2e8>)
 801c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c67a:	f7e3 fe3d 	bl	80002f8 <__aeabi_dsub>
 801c67e:	4632      	mov	r2, r6
 801c680:	463b      	mov	r3, r7
 801c682:	f7e3 fff1 	bl	8000668 <__aeabi_dmul>
 801c686:	a35c      	add	r3, pc, #368	@ (adr r3, 801c7f8 <atan+0x2f0>)
 801c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c68c:	f7e3 fe34 	bl	80002f8 <__aeabi_dsub>
 801c690:	4632      	mov	r2, r6
 801c692:	463b      	mov	r3, r7
 801c694:	f7e3 ffe8 	bl	8000668 <__aeabi_dmul>
 801c698:	a359      	add	r3, pc, #356	@ (adr r3, 801c800 <atan+0x2f8>)
 801c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c69e:	f7e3 fe2b 	bl	80002f8 <__aeabi_dsub>
 801c6a2:	4632      	mov	r2, r6
 801c6a4:	463b      	mov	r3, r7
 801c6a6:	f7e3 ffdf 	bl	8000668 <__aeabi_dmul>
 801c6aa:	4602      	mov	r2, r0
 801c6ac:	460b      	mov	r3, r1
 801c6ae:	4640      	mov	r0, r8
 801c6b0:	4649      	mov	r1, r9
 801c6b2:	f7e3 fe23 	bl	80002fc <__adddf3>
 801c6b6:	4622      	mov	r2, r4
 801c6b8:	462b      	mov	r3, r5
 801c6ba:	f7e3 ffd5 	bl	8000668 <__aeabi_dmul>
 801c6be:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801c6c2:	4602      	mov	r2, r0
 801c6c4:	460b      	mov	r3, r1
 801c6c6:	d148      	bne.n	801c75a <atan+0x252>
 801c6c8:	4620      	mov	r0, r4
 801c6ca:	4629      	mov	r1, r5
 801c6cc:	f7e3 fe14 	bl	80002f8 <__aeabi_dsub>
 801c6d0:	e72f      	b.n	801c532 <atan+0x2a>
 801c6d2:	4b52      	ldr	r3, [pc, #328]	@ (801c81c <atan+0x314>)
 801c6d4:	2200      	movs	r2, #0
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	4629      	mov	r1, r5
 801c6da:	f7e3 fe0d 	bl	80002f8 <__aeabi_dsub>
 801c6de:	4b4f      	ldr	r3, [pc, #316]	@ (801c81c <atan+0x314>)
 801c6e0:	4606      	mov	r6, r0
 801c6e2:	460f      	mov	r7, r1
 801c6e4:	2200      	movs	r2, #0
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	4629      	mov	r1, r5
 801c6ea:	f7e3 fe07 	bl	80002fc <__adddf3>
 801c6ee:	4602      	mov	r2, r0
 801c6f0:	460b      	mov	r3, r1
 801c6f2:	4630      	mov	r0, r6
 801c6f4:	4639      	mov	r1, r7
 801c6f6:	f7e4 f8e1 	bl	80008bc <__aeabi_ddiv>
 801c6fa:	f04f 0a01 	mov.w	sl, #1
 801c6fe:	4604      	mov	r4, r0
 801c700:	460d      	mov	r5, r1
 801c702:	e765      	b.n	801c5d0 <atan+0xc8>
 801c704:	4b47      	ldr	r3, [pc, #284]	@ (801c824 <atan+0x31c>)
 801c706:	429e      	cmp	r6, r3
 801c708:	d21c      	bcs.n	801c744 <atan+0x23c>
 801c70a:	4b47      	ldr	r3, [pc, #284]	@ (801c828 <atan+0x320>)
 801c70c:	2200      	movs	r2, #0
 801c70e:	4620      	mov	r0, r4
 801c710:	4629      	mov	r1, r5
 801c712:	f7e3 fdf1 	bl	80002f8 <__aeabi_dsub>
 801c716:	4b44      	ldr	r3, [pc, #272]	@ (801c828 <atan+0x320>)
 801c718:	4606      	mov	r6, r0
 801c71a:	460f      	mov	r7, r1
 801c71c:	2200      	movs	r2, #0
 801c71e:	4620      	mov	r0, r4
 801c720:	4629      	mov	r1, r5
 801c722:	f7e3 ffa1 	bl	8000668 <__aeabi_dmul>
 801c726:	4b3d      	ldr	r3, [pc, #244]	@ (801c81c <atan+0x314>)
 801c728:	2200      	movs	r2, #0
 801c72a:	f7e3 fde7 	bl	80002fc <__adddf3>
 801c72e:	4602      	mov	r2, r0
 801c730:	460b      	mov	r3, r1
 801c732:	4630      	mov	r0, r6
 801c734:	4639      	mov	r1, r7
 801c736:	f7e4 f8c1 	bl	80008bc <__aeabi_ddiv>
 801c73a:	f04f 0a02 	mov.w	sl, #2
 801c73e:	4604      	mov	r4, r0
 801c740:	460d      	mov	r5, r1
 801c742:	e745      	b.n	801c5d0 <atan+0xc8>
 801c744:	4622      	mov	r2, r4
 801c746:	462b      	mov	r3, r5
 801c748:	4938      	ldr	r1, [pc, #224]	@ (801c82c <atan+0x324>)
 801c74a:	2000      	movs	r0, #0
 801c74c:	f7e4 f8b6 	bl	80008bc <__aeabi_ddiv>
 801c750:	f04f 0a03 	mov.w	sl, #3
 801c754:	4604      	mov	r4, r0
 801c756:	460d      	mov	r5, r1
 801c758:	e73a      	b.n	801c5d0 <atan+0xc8>
 801c75a:	4b35      	ldr	r3, [pc, #212]	@ (801c830 <atan+0x328>)
 801c75c:	4e35      	ldr	r6, [pc, #212]	@ (801c834 <atan+0x32c>)
 801c75e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c766:	f7e3 fdc7 	bl	80002f8 <__aeabi_dsub>
 801c76a:	4622      	mov	r2, r4
 801c76c:	462b      	mov	r3, r5
 801c76e:	f7e3 fdc3 	bl	80002f8 <__aeabi_dsub>
 801c772:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c776:	4602      	mov	r2, r0
 801c778:	460b      	mov	r3, r1
 801c77a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c77e:	f7e3 fdbb 	bl	80002f8 <__aeabi_dsub>
 801c782:	f1bb 0f00 	cmp.w	fp, #0
 801c786:	4604      	mov	r4, r0
 801c788:	460d      	mov	r5, r1
 801c78a:	f6bf aedc 	bge.w	801c546 <atan+0x3e>
 801c78e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c792:	461d      	mov	r5, r3
 801c794:	e6d7      	b.n	801c546 <atan+0x3e>
 801c796:	a51c      	add	r5, pc, #112	@ (adr r5, 801c808 <atan+0x300>)
 801c798:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c79c:	e6d3      	b.n	801c546 <atan+0x3e>
 801c79e:	bf00      	nop
 801c7a0:	54442d18 	.word	0x54442d18
 801c7a4:	3ff921fb 	.word	0x3ff921fb
 801c7a8:	8800759c 	.word	0x8800759c
 801c7ac:	7e37e43c 	.word	0x7e37e43c
 801c7b0:	e322da11 	.word	0xe322da11
 801c7b4:	3f90ad3a 	.word	0x3f90ad3a
 801c7b8:	24760deb 	.word	0x24760deb
 801c7bc:	3fa97b4b 	.word	0x3fa97b4b
 801c7c0:	a0d03d51 	.word	0xa0d03d51
 801c7c4:	3fb10d66 	.word	0x3fb10d66
 801c7c8:	c54c206e 	.word	0xc54c206e
 801c7cc:	3fb745cd 	.word	0x3fb745cd
 801c7d0:	920083ff 	.word	0x920083ff
 801c7d4:	3fc24924 	.word	0x3fc24924
 801c7d8:	5555550d 	.word	0x5555550d
 801c7dc:	3fd55555 	.word	0x3fd55555
 801c7e0:	2c6a6c2f 	.word	0x2c6a6c2f
 801c7e4:	bfa2b444 	.word	0xbfa2b444
 801c7e8:	52defd9a 	.word	0x52defd9a
 801c7ec:	3fadde2d 	.word	0x3fadde2d
 801c7f0:	af749a6d 	.word	0xaf749a6d
 801c7f4:	3fb3b0f2 	.word	0x3fb3b0f2
 801c7f8:	fe231671 	.word	0xfe231671
 801c7fc:	3fbc71c6 	.word	0x3fbc71c6
 801c800:	9998ebc4 	.word	0x9998ebc4
 801c804:	3fc99999 	.word	0x3fc99999
 801c808:	54442d18 	.word	0x54442d18
 801c80c:	bff921fb 	.word	0xbff921fb
 801c810:	440fffff 	.word	0x440fffff
 801c814:	7ff00000 	.word	0x7ff00000
 801c818:	3fdbffff 	.word	0x3fdbffff
 801c81c:	3ff00000 	.word	0x3ff00000
 801c820:	3ff2ffff 	.word	0x3ff2ffff
 801c824:	40038000 	.word	0x40038000
 801c828:	3ff80000 	.word	0x3ff80000
 801c82c:	bff00000 	.word	0xbff00000
 801c830:	0801f718 	.word	0x0801f718
 801c834:	0801f738 	.word	0x0801f738

0801c838 <fabs>:
 801c838:	ec51 0b10 	vmov	r0, r1, d0
 801c83c:	4602      	mov	r2, r0
 801c83e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c842:	ec43 2b10 	vmov	d0, r2, r3
 801c846:	4770      	bx	lr

0801c848 <finite>:
 801c848:	b082      	sub	sp, #8
 801c84a:	ed8d 0b00 	vstr	d0, [sp]
 801c84e:	9801      	ldr	r0, [sp, #4]
 801c850:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801c854:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801c858:	0fc0      	lsrs	r0, r0, #31
 801c85a:	b002      	add	sp, #8
 801c85c:	4770      	bx	lr
	...

0801c860 <__ieee754_sqrt>:
 801c860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c864:	4a68      	ldr	r2, [pc, #416]	@ (801ca08 <__ieee754_sqrt+0x1a8>)
 801c866:	ec55 4b10 	vmov	r4, r5, d0
 801c86a:	43aa      	bics	r2, r5
 801c86c:	462b      	mov	r3, r5
 801c86e:	4621      	mov	r1, r4
 801c870:	d110      	bne.n	801c894 <__ieee754_sqrt+0x34>
 801c872:	4622      	mov	r2, r4
 801c874:	4620      	mov	r0, r4
 801c876:	4629      	mov	r1, r5
 801c878:	f7e3 fef6 	bl	8000668 <__aeabi_dmul>
 801c87c:	4602      	mov	r2, r0
 801c87e:	460b      	mov	r3, r1
 801c880:	4620      	mov	r0, r4
 801c882:	4629      	mov	r1, r5
 801c884:	f7e3 fd3a 	bl	80002fc <__adddf3>
 801c888:	4604      	mov	r4, r0
 801c88a:	460d      	mov	r5, r1
 801c88c:	ec45 4b10 	vmov	d0, r4, r5
 801c890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c894:	2d00      	cmp	r5, #0
 801c896:	dc0e      	bgt.n	801c8b6 <__ieee754_sqrt+0x56>
 801c898:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801c89c:	4322      	orrs	r2, r4
 801c89e:	d0f5      	beq.n	801c88c <__ieee754_sqrt+0x2c>
 801c8a0:	b19d      	cbz	r5, 801c8ca <__ieee754_sqrt+0x6a>
 801c8a2:	4622      	mov	r2, r4
 801c8a4:	4620      	mov	r0, r4
 801c8a6:	4629      	mov	r1, r5
 801c8a8:	f7e3 fd26 	bl	80002f8 <__aeabi_dsub>
 801c8ac:	4602      	mov	r2, r0
 801c8ae:	460b      	mov	r3, r1
 801c8b0:	f7e4 f804 	bl	80008bc <__aeabi_ddiv>
 801c8b4:	e7e8      	b.n	801c888 <__ieee754_sqrt+0x28>
 801c8b6:	152a      	asrs	r2, r5, #20
 801c8b8:	d115      	bne.n	801c8e6 <__ieee754_sqrt+0x86>
 801c8ba:	2000      	movs	r0, #0
 801c8bc:	e009      	b.n	801c8d2 <__ieee754_sqrt+0x72>
 801c8be:	0acb      	lsrs	r3, r1, #11
 801c8c0:	3a15      	subs	r2, #21
 801c8c2:	0549      	lsls	r1, r1, #21
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d0fa      	beq.n	801c8be <__ieee754_sqrt+0x5e>
 801c8c8:	e7f7      	b.n	801c8ba <__ieee754_sqrt+0x5a>
 801c8ca:	462a      	mov	r2, r5
 801c8cc:	e7fa      	b.n	801c8c4 <__ieee754_sqrt+0x64>
 801c8ce:	005b      	lsls	r3, r3, #1
 801c8d0:	3001      	adds	r0, #1
 801c8d2:	02dc      	lsls	r4, r3, #11
 801c8d4:	d5fb      	bpl.n	801c8ce <__ieee754_sqrt+0x6e>
 801c8d6:	1e44      	subs	r4, r0, #1
 801c8d8:	1b12      	subs	r2, r2, r4
 801c8da:	f1c0 0420 	rsb	r4, r0, #32
 801c8de:	fa21 f404 	lsr.w	r4, r1, r4
 801c8e2:	4323      	orrs	r3, r4
 801c8e4:	4081      	lsls	r1, r0
 801c8e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c8ea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801c8ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c8f2:	07d2      	lsls	r2, r2, #31
 801c8f4:	bf5c      	itt	pl
 801c8f6:	005b      	lslpl	r3, r3, #1
 801c8f8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801c8fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c900:	bf58      	it	pl
 801c902:	0049      	lslpl	r1, r1, #1
 801c904:	2600      	movs	r6, #0
 801c906:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801c90a:	106d      	asrs	r5, r5, #1
 801c90c:	0049      	lsls	r1, r1, #1
 801c90e:	2016      	movs	r0, #22
 801c910:	4632      	mov	r2, r6
 801c912:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801c916:	1917      	adds	r7, r2, r4
 801c918:	429f      	cmp	r7, r3
 801c91a:	bfde      	ittt	le
 801c91c:	193a      	addle	r2, r7, r4
 801c91e:	1bdb      	suble	r3, r3, r7
 801c920:	1936      	addle	r6, r6, r4
 801c922:	0fcf      	lsrs	r7, r1, #31
 801c924:	3801      	subs	r0, #1
 801c926:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801c92a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c92e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c932:	d1f0      	bne.n	801c916 <__ieee754_sqrt+0xb6>
 801c934:	4604      	mov	r4, r0
 801c936:	2720      	movs	r7, #32
 801c938:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801c93c:	429a      	cmp	r2, r3
 801c93e:	eb00 0e0c 	add.w	lr, r0, ip
 801c942:	db02      	blt.n	801c94a <__ieee754_sqrt+0xea>
 801c944:	d113      	bne.n	801c96e <__ieee754_sqrt+0x10e>
 801c946:	458e      	cmp	lr, r1
 801c948:	d811      	bhi.n	801c96e <__ieee754_sqrt+0x10e>
 801c94a:	f1be 0f00 	cmp.w	lr, #0
 801c94e:	eb0e 000c 	add.w	r0, lr, ip
 801c952:	da42      	bge.n	801c9da <__ieee754_sqrt+0x17a>
 801c954:	2800      	cmp	r0, #0
 801c956:	db40      	blt.n	801c9da <__ieee754_sqrt+0x17a>
 801c958:	f102 0801 	add.w	r8, r2, #1
 801c95c:	1a9b      	subs	r3, r3, r2
 801c95e:	458e      	cmp	lr, r1
 801c960:	bf88      	it	hi
 801c962:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801c966:	eba1 010e 	sub.w	r1, r1, lr
 801c96a:	4464      	add	r4, ip
 801c96c:	4642      	mov	r2, r8
 801c96e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801c972:	3f01      	subs	r7, #1
 801c974:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801c978:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c97c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801c980:	d1dc      	bne.n	801c93c <__ieee754_sqrt+0xdc>
 801c982:	4319      	orrs	r1, r3
 801c984:	d01b      	beq.n	801c9be <__ieee754_sqrt+0x15e>
 801c986:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801ca0c <__ieee754_sqrt+0x1ac>
 801c98a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801ca10 <__ieee754_sqrt+0x1b0>
 801c98e:	e9da 0100 	ldrd	r0, r1, [sl]
 801c992:	e9db 2300 	ldrd	r2, r3, [fp]
 801c996:	f7e3 fcaf 	bl	80002f8 <__aeabi_dsub>
 801c99a:	e9da 8900 	ldrd	r8, r9, [sl]
 801c99e:	4602      	mov	r2, r0
 801c9a0:	460b      	mov	r3, r1
 801c9a2:	4640      	mov	r0, r8
 801c9a4:	4649      	mov	r1, r9
 801c9a6:	f7e4 f8db 	bl	8000b60 <__aeabi_dcmple>
 801c9aa:	b140      	cbz	r0, 801c9be <__ieee754_sqrt+0x15e>
 801c9ac:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801c9b0:	e9da 0100 	ldrd	r0, r1, [sl]
 801c9b4:	e9db 2300 	ldrd	r2, r3, [fp]
 801c9b8:	d111      	bne.n	801c9de <__ieee754_sqrt+0x17e>
 801c9ba:	3601      	adds	r6, #1
 801c9bc:	463c      	mov	r4, r7
 801c9be:	1072      	asrs	r2, r6, #1
 801c9c0:	0863      	lsrs	r3, r4, #1
 801c9c2:	07f1      	lsls	r1, r6, #31
 801c9c4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801c9c8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801c9cc:	bf48      	it	mi
 801c9ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801c9d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	e756      	b.n	801c888 <__ieee754_sqrt+0x28>
 801c9da:	4690      	mov	r8, r2
 801c9dc:	e7be      	b.n	801c95c <__ieee754_sqrt+0xfc>
 801c9de:	f7e3 fc8d 	bl	80002fc <__adddf3>
 801c9e2:	e9da 8900 	ldrd	r8, r9, [sl]
 801c9e6:	4602      	mov	r2, r0
 801c9e8:	460b      	mov	r3, r1
 801c9ea:	4640      	mov	r0, r8
 801c9ec:	4649      	mov	r1, r9
 801c9ee:	f7e4 f8ad 	bl	8000b4c <__aeabi_dcmplt>
 801c9f2:	b120      	cbz	r0, 801c9fe <__ieee754_sqrt+0x19e>
 801c9f4:	1ca0      	adds	r0, r4, #2
 801c9f6:	bf08      	it	eq
 801c9f8:	3601      	addeq	r6, #1
 801c9fa:	3402      	adds	r4, #2
 801c9fc:	e7df      	b.n	801c9be <__ieee754_sqrt+0x15e>
 801c9fe:	1c63      	adds	r3, r4, #1
 801ca00:	f023 0401 	bic.w	r4, r3, #1
 801ca04:	e7db      	b.n	801c9be <__ieee754_sqrt+0x15e>
 801ca06:	bf00      	nop
 801ca08:	7ff00000 	.word	0x7ff00000
 801ca0c:	20000bf8 	.word	0x20000bf8
 801ca10:	20000bf0 	.word	0x20000bf0
 801ca14:	00000000 	.word	0x00000000

0801ca18 <__ieee754_atan2>:
 801ca18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca1c:	ec57 6b11 	vmov	r6, r7, d1
 801ca20:	4273      	negs	r3, r6
 801ca22:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801cba0 <__ieee754_atan2+0x188>
 801ca26:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801ca2a:	4333      	orrs	r3, r6
 801ca2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ca30:	4543      	cmp	r3, r8
 801ca32:	ec51 0b10 	vmov	r0, r1, d0
 801ca36:	4635      	mov	r5, r6
 801ca38:	d809      	bhi.n	801ca4e <__ieee754_atan2+0x36>
 801ca3a:	4244      	negs	r4, r0
 801ca3c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ca40:	4304      	orrs	r4, r0
 801ca42:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ca46:	4544      	cmp	r4, r8
 801ca48:	468e      	mov	lr, r1
 801ca4a:	4681      	mov	r9, r0
 801ca4c:	d907      	bls.n	801ca5e <__ieee754_atan2+0x46>
 801ca4e:	4632      	mov	r2, r6
 801ca50:	463b      	mov	r3, r7
 801ca52:	f7e3 fc53 	bl	80002fc <__adddf3>
 801ca56:	ec41 0b10 	vmov	d0, r0, r1
 801ca5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca5e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801ca62:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801ca66:	4334      	orrs	r4, r6
 801ca68:	d103      	bne.n	801ca72 <__ieee754_atan2+0x5a>
 801ca6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca6e:	f7ff bd4b 	b.w	801c508 <atan>
 801ca72:	17bc      	asrs	r4, r7, #30
 801ca74:	f004 0402 	and.w	r4, r4, #2
 801ca78:	ea53 0909 	orrs.w	r9, r3, r9
 801ca7c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ca80:	d107      	bne.n	801ca92 <__ieee754_atan2+0x7a>
 801ca82:	2c02      	cmp	r4, #2
 801ca84:	d05f      	beq.n	801cb46 <__ieee754_atan2+0x12e>
 801ca86:	2c03      	cmp	r4, #3
 801ca88:	d1e5      	bne.n	801ca56 <__ieee754_atan2+0x3e>
 801ca8a:	a141      	add	r1, pc, #260	@ (adr r1, 801cb90 <__ieee754_atan2+0x178>)
 801ca8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca90:	e7e1      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801ca92:	4315      	orrs	r5, r2
 801ca94:	d106      	bne.n	801caa4 <__ieee754_atan2+0x8c>
 801ca96:	f1be 0f00 	cmp.w	lr, #0
 801ca9a:	da5f      	bge.n	801cb5c <__ieee754_atan2+0x144>
 801ca9c:	a13e      	add	r1, pc, #248	@ (adr r1, 801cb98 <__ieee754_atan2+0x180>)
 801ca9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801caa2:	e7d8      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801caa4:	4542      	cmp	r2, r8
 801caa6:	d10f      	bne.n	801cac8 <__ieee754_atan2+0xb0>
 801caa8:	4293      	cmp	r3, r2
 801caaa:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801caae:	d107      	bne.n	801cac0 <__ieee754_atan2+0xa8>
 801cab0:	2c02      	cmp	r4, #2
 801cab2:	d84c      	bhi.n	801cb4e <__ieee754_atan2+0x136>
 801cab4:	4b34      	ldr	r3, [pc, #208]	@ (801cb88 <__ieee754_atan2+0x170>)
 801cab6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801caba:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cabe:	e7ca      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801cac0:	2c02      	cmp	r4, #2
 801cac2:	d848      	bhi.n	801cb56 <__ieee754_atan2+0x13e>
 801cac4:	4b31      	ldr	r3, [pc, #196]	@ (801cb8c <__ieee754_atan2+0x174>)
 801cac6:	e7f6      	b.n	801cab6 <__ieee754_atan2+0x9e>
 801cac8:	4543      	cmp	r3, r8
 801caca:	d0e4      	beq.n	801ca96 <__ieee754_atan2+0x7e>
 801cacc:	1a9b      	subs	r3, r3, r2
 801cace:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801cad2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801cad6:	da1e      	bge.n	801cb16 <__ieee754_atan2+0xfe>
 801cad8:	2f00      	cmp	r7, #0
 801cada:	da01      	bge.n	801cae0 <__ieee754_atan2+0xc8>
 801cadc:	323c      	adds	r2, #60	@ 0x3c
 801cade:	db1e      	blt.n	801cb1e <__ieee754_atan2+0x106>
 801cae0:	4632      	mov	r2, r6
 801cae2:	463b      	mov	r3, r7
 801cae4:	f7e3 feea 	bl	80008bc <__aeabi_ddiv>
 801cae8:	ec41 0b10 	vmov	d0, r0, r1
 801caec:	f7ff fea4 	bl	801c838 <fabs>
 801caf0:	f7ff fd0a 	bl	801c508 <atan>
 801caf4:	ec51 0b10 	vmov	r0, r1, d0
 801caf8:	2c01      	cmp	r4, #1
 801cafa:	d013      	beq.n	801cb24 <__ieee754_atan2+0x10c>
 801cafc:	2c02      	cmp	r4, #2
 801cafe:	d015      	beq.n	801cb2c <__ieee754_atan2+0x114>
 801cb00:	2c00      	cmp	r4, #0
 801cb02:	d0a8      	beq.n	801ca56 <__ieee754_atan2+0x3e>
 801cb04:	a318      	add	r3, pc, #96	@ (adr r3, 801cb68 <__ieee754_atan2+0x150>)
 801cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb0a:	f7e3 fbf5 	bl	80002f8 <__aeabi_dsub>
 801cb0e:	a318      	add	r3, pc, #96	@ (adr r3, 801cb70 <__ieee754_atan2+0x158>)
 801cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb14:	e014      	b.n	801cb40 <__ieee754_atan2+0x128>
 801cb16:	a118      	add	r1, pc, #96	@ (adr r1, 801cb78 <__ieee754_atan2+0x160>)
 801cb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb1c:	e7ec      	b.n	801caf8 <__ieee754_atan2+0xe0>
 801cb1e:	2000      	movs	r0, #0
 801cb20:	2100      	movs	r1, #0
 801cb22:	e7e9      	b.n	801caf8 <__ieee754_atan2+0xe0>
 801cb24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cb28:	4619      	mov	r1, r3
 801cb2a:	e794      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801cb2c:	a30e      	add	r3, pc, #56	@ (adr r3, 801cb68 <__ieee754_atan2+0x150>)
 801cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb32:	f7e3 fbe1 	bl	80002f8 <__aeabi_dsub>
 801cb36:	4602      	mov	r2, r0
 801cb38:	460b      	mov	r3, r1
 801cb3a:	a10d      	add	r1, pc, #52	@ (adr r1, 801cb70 <__ieee754_atan2+0x158>)
 801cb3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb40:	f7e3 fbda 	bl	80002f8 <__aeabi_dsub>
 801cb44:	e787      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801cb46:	a10a      	add	r1, pc, #40	@ (adr r1, 801cb70 <__ieee754_atan2+0x158>)
 801cb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb4c:	e783      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801cb4e:	a10c      	add	r1, pc, #48	@ (adr r1, 801cb80 <__ieee754_atan2+0x168>)
 801cb50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb54:	e77f      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801cb56:	2000      	movs	r0, #0
 801cb58:	2100      	movs	r1, #0
 801cb5a:	e77c      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801cb5c:	a106      	add	r1, pc, #24	@ (adr r1, 801cb78 <__ieee754_atan2+0x160>)
 801cb5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb62:	e778      	b.n	801ca56 <__ieee754_atan2+0x3e>
 801cb64:	f3af 8000 	nop.w
 801cb68:	33145c07 	.word	0x33145c07
 801cb6c:	3ca1a626 	.word	0x3ca1a626
 801cb70:	54442d18 	.word	0x54442d18
 801cb74:	400921fb 	.word	0x400921fb
 801cb78:	54442d18 	.word	0x54442d18
 801cb7c:	3ff921fb 	.word	0x3ff921fb
 801cb80:	54442d18 	.word	0x54442d18
 801cb84:	3fe921fb 	.word	0x3fe921fb
 801cb88:	0801f770 	.word	0x0801f770
 801cb8c:	0801f758 	.word	0x0801f758
 801cb90:	54442d18 	.word	0x54442d18
 801cb94:	c00921fb 	.word	0xc00921fb
 801cb98:	54442d18 	.word	0x54442d18
 801cb9c:	bff921fb 	.word	0xbff921fb
 801cba0:	7ff00000 	.word	0x7ff00000
 801cba4:	00000000 	.word	0x00000000

0801cba8 <__ieee754_pow>:
 801cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbac:	b091      	sub	sp, #68	@ 0x44
 801cbae:	ed8d 1b00 	vstr	d1, [sp]
 801cbb2:	e9dd 1900 	ldrd	r1, r9, [sp]
 801cbb6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801cbba:	ea5a 0001 	orrs.w	r0, sl, r1
 801cbbe:	ec57 6b10 	vmov	r6, r7, d0
 801cbc2:	d113      	bne.n	801cbec <__ieee754_pow+0x44>
 801cbc4:	19b3      	adds	r3, r6, r6
 801cbc6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801cbca:	4152      	adcs	r2, r2
 801cbcc:	4298      	cmp	r0, r3
 801cbce:	4b98      	ldr	r3, [pc, #608]	@ (801ce30 <__ieee754_pow+0x288>)
 801cbd0:	4193      	sbcs	r3, r2
 801cbd2:	f080 84ea 	bcs.w	801d5aa <__ieee754_pow+0xa02>
 801cbd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cbda:	4630      	mov	r0, r6
 801cbdc:	4639      	mov	r1, r7
 801cbde:	f7e3 fb8d 	bl	80002fc <__adddf3>
 801cbe2:	ec41 0b10 	vmov	d0, r0, r1
 801cbe6:	b011      	add	sp, #68	@ 0x44
 801cbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbec:	4a91      	ldr	r2, [pc, #580]	@ (801ce34 <__ieee754_pow+0x28c>)
 801cbee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801cbf2:	4590      	cmp	r8, r2
 801cbf4:	463d      	mov	r5, r7
 801cbf6:	4633      	mov	r3, r6
 801cbf8:	d806      	bhi.n	801cc08 <__ieee754_pow+0x60>
 801cbfa:	d101      	bne.n	801cc00 <__ieee754_pow+0x58>
 801cbfc:	2e00      	cmp	r6, #0
 801cbfe:	d1ea      	bne.n	801cbd6 <__ieee754_pow+0x2e>
 801cc00:	4592      	cmp	sl, r2
 801cc02:	d801      	bhi.n	801cc08 <__ieee754_pow+0x60>
 801cc04:	d10e      	bne.n	801cc24 <__ieee754_pow+0x7c>
 801cc06:	b169      	cbz	r1, 801cc24 <__ieee754_pow+0x7c>
 801cc08:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801cc0c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801cc10:	431d      	orrs	r5, r3
 801cc12:	d1e0      	bne.n	801cbd6 <__ieee754_pow+0x2e>
 801cc14:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cc18:	18db      	adds	r3, r3, r3
 801cc1a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801cc1e:	4152      	adcs	r2, r2
 801cc20:	429d      	cmp	r5, r3
 801cc22:	e7d4      	b.n	801cbce <__ieee754_pow+0x26>
 801cc24:	2d00      	cmp	r5, #0
 801cc26:	46c3      	mov	fp, r8
 801cc28:	da3a      	bge.n	801cca0 <__ieee754_pow+0xf8>
 801cc2a:	4a83      	ldr	r2, [pc, #524]	@ (801ce38 <__ieee754_pow+0x290>)
 801cc2c:	4592      	cmp	sl, r2
 801cc2e:	d84d      	bhi.n	801cccc <__ieee754_pow+0x124>
 801cc30:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801cc34:	4592      	cmp	sl, r2
 801cc36:	f240 84c7 	bls.w	801d5c8 <__ieee754_pow+0xa20>
 801cc3a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801cc3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801cc42:	2a14      	cmp	r2, #20
 801cc44:	dd0f      	ble.n	801cc66 <__ieee754_pow+0xbe>
 801cc46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801cc4a:	fa21 f402 	lsr.w	r4, r1, r2
 801cc4e:	fa04 f202 	lsl.w	r2, r4, r2
 801cc52:	428a      	cmp	r2, r1
 801cc54:	f040 84b8 	bne.w	801d5c8 <__ieee754_pow+0xa20>
 801cc58:	f004 0401 	and.w	r4, r4, #1
 801cc5c:	f1c4 0402 	rsb	r4, r4, #2
 801cc60:	2900      	cmp	r1, #0
 801cc62:	d158      	bne.n	801cd16 <__ieee754_pow+0x16e>
 801cc64:	e00e      	b.n	801cc84 <__ieee754_pow+0xdc>
 801cc66:	2900      	cmp	r1, #0
 801cc68:	d154      	bne.n	801cd14 <__ieee754_pow+0x16c>
 801cc6a:	f1c2 0214 	rsb	r2, r2, #20
 801cc6e:	fa4a f402 	asr.w	r4, sl, r2
 801cc72:	fa04 f202 	lsl.w	r2, r4, r2
 801cc76:	4552      	cmp	r2, sl
 801cc78:	f040 84a3 	bne.w	801d5c2 <__ieee754_pow+0xa1a>
 801cc7c:	f004 0401 	and.w	r4, r4, #1
 801cc80:	f1c4 0402 	rsb	r4, r4, #2
 801cc84:	4a6d      	ldr	r2, [pc, #436]	@ (801ce3c <__ieee754_pow+0x294>)
 801cc86:	4592      	cmp	sl, r2
 801cc88:	d12e      	bne.n	801cce8 <__ieee754_pow+0x140>
 801cc8a:	f1b9 0f00 	cmp.w	r9, #0
 801cc8e:	f280 8494 	bge.w	801d5ba <__ieee754_pow+0xa12>
 801cc92:	496a      	ldr	r1, [pc, #424]	@ (801ce3c <__ieee754_pow+0x294>)
 801cc94:	4632      	mov	r2, r6
 801cc96:	463b      	mov	r3, r7
 801cc98:	2000      	movs	r0, #0
 801cc9a:	f7e3 fe0f 	bl	80008bc <__aeabi_ddiv>
 801cc9e:	e7a0      	b.n	801cbe2 <__ieee754_pow+0x3a>
 801cca0:	2400      	movs	r4, #0
 801cca2:	bbc1      	cbnz	r1, 801cd16 <__ieee754_pow+0x16e>
 801cca4:	4a63      	ldr	r2, [pc, #396]	@ (801ce34 <__ieee754_pow+0x28c>)
 801cca6:	4592      	cmp	sl, r2
 801cca8:	d1ec      	bne.n	801cc84 <__ieee754_pow+0xdc>
 801ccaa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801ccae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801ccb2:	431a      	orrs	r2, r3
 801ccb4:	f000 8479 	beq.w	801d5aa <__ieee754_pow+0xa02>
 801ccb8:	4b61      	ldr	r3, [pc, #388]	@ (801ce40 <__ieee754_pow+0x298>)
 801ccba:	4598      	cmp	r8, r3
 801ccbc:	d908      	bls.n	801ccd0 <__ieee754_pow+0x128>
 801ccbe:	f1b9 0f00 	cmp.w	r9, #0
 801ccc2:	f2c0 8476 	blt.w	801d5b2 <__ieee754_pow+0xa0a>
 801ccc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ccca:	e78a      	b.n	801cbe2 <__ieee754_pow+0x3a>
 801cccc:	2402      	movs	r4, #2
 801ccce:	e7e8      	b.n	801cca2 <__ieee754_pow+0xfa>
 801ccd0:	f1b9 0f00 	cmp.w	r9, #0
 801ccd4:	f04f 0000 	mov.w	r0, #0
 801ccd8:	f04f 0100 	mov.w	r1, #0
 801ccdc:	da81      	bge.n	801cbe2 <__ieee754_pow+0x3a>
 801ccde:	e9dd 0300 	ldrd	r0, r3, [sp]
 801cce2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801cce6:	e77c      	b.n	801cbe2 <__ieee754_pow+0x3a>
 801cce8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801ccec:	d106      	bne.n	801ccfc <__ieee754_pow+0x154>
 801ccee:	4632      	mov	r2, r6
 801ccf0:	463b      	mov	r3, r7
 801ccf2:	4630      	mov	r0, r6
 801ccf4:	4639      	mov	r1, r7
 801ccf6:	f7e3 fcb7 	bl	8000668 <__aeabi_dmul>
 801ccfa:	e772      	b.n	801cbe2 <__ieee754_pow+0x3a>
 801ccfc:	4a51      	ldr	r2, [pc, #324]	@ (801ce44 <__ieee754_pow+0x29c>)
 801ccfe:	4591      	cmp	r9, r2
 801cd00:	d109      	bne.n	801cd16 <__ieee754_pow+0x16e>
 801cd02:	2d00      	cmp	r5, #0
 801cd04:	db07      	blt.n	801cd16 <__ieee754_pow+0x16e>
 801cd06:	ec47 6b10 	vmov	d0, r6, r7
 801cd0a:	b011      	add	sp, #68	@ 0x44
 801cd0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd10:	f7ff bda6 	b.w	801c860 <__ieee754_sqrt>
 801cd14:	2400      	movs	r4, #0
 801cd16:	ec47 6b10 	vmov	d0, r6, r7
 801cd1a:	9302      	str	r3, [sp, #8]
 801cd1c:	f7ff fd8c 	bl	801c838 <fabs>
 801cd20:	9b02      	ldr	r3, [sp, #8]
 801cd22:	ec51 0b10 	vmov	r0, r1, d0
 801cd26:	bb53      	cbnz	r3, 801cd7e <__ieee754_pow+0x1d6>
 801cd28:	4b44      	ldr	r3, [pc, #272]	@ (801ce3c <__ieee754_pow+0x294>)
 801cd2a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801cd2e:	429a      	cmp	r2, r3
 801cd30:	d002      	beq.n	801cd38 <__ieee754_pow+0x190>
 801cd32:	f1b8 0f00 	cmp.w	r8, #0
 801cd36:	d122      	bne.n	801cd7e <__ieee754_pow+0x1d6>
 801cd38:	f1b9 0f00 	cmp.w	r9, #0
 801cd3c:	da05      	bge.n	801cd4a <__ieee754_pow+0x1a2>
 801cd3e:	4602      	mov	r2, r0
 801cd40:	460b      	mov	r3, r1
 801cd42:	2000      	movs	r0, #0
 801cd44:	493d      	ldr	r1, [pc, #244]	@ (801ce3c <__ieee754_pow+0x294>)
 801cd46:	f7e3 fdb9 	bl	80008bc <__aeabi_ddiv>
 801cd4a:	2d00      	cmp	r5, #0
 801cd4c:	f6bf af49 	bge.w	801cbe2 <__ieee754_pow+0x3a>
 801cd50:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801cd54:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801cd58:	ea58 0804 	orrs.w	r8, r8, r4
 801cd5c:	d108      	bne.n	801cd70 <__ieee754_pow+0x1c8>
 801cd5e:	4602      	mov	r2, r0
 801cd60:	460b      	mov	r3, r1
 801cd62:	4610      	mov	r0, r2
 801cd64:	4619      	mov	r1, r3
 801cd66:	f7e3 fac7 	bl	80002f8 <__aeabi_dsub>
 801cd6a:	4602      	mov	r2, r0
 801cd6c:	460b      	mov	r3, r1
 801cd6e:	e794      	b.n	801cc9a <__ieee754_pow+0xf2>
 801cd70:	2c01      	cmp	r4, #1
 801cd72:	f47f af36 	bne.w	801cbe2 <__ieee754_pow+0x3a>
 801cd76:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cd7a:	4619      	mov	r1, r3
 801cd7c:	e731      	b.n	801cbe2 <__ieee754_pow+0x3a>
 801cd7e:	0feb      	lsrs	r3, r5, #31
 801cd80:	3b01      	subs	r3, #1
 801cd82:	ea53 0204 	orrs.w	r2, r3, r4
 801cd86:	d102      	bne.n	801cd8e <__ieee754_pow+0x1e6>
 801cd88:	4632      	mov	r2, r6
 801cd8a:	463b      	mov	r3, r7
 801cd8c:	e7e9      	b.n	801cd62 <__ieee754_pow+0x1ba>
 801cd8e:	3c01      	subs	r4, #1
 801cd90:	431c      	orrs	r4, r3
 801cd92:	d016      	beq.n	801cdc2 <__ieee754_pow+0x21a>
 801cd94:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801ce20 <__ieee754_pow+0x278>
 801cd98:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801cd9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cda0:	f240 8112 	bls.w	801cfc8 <__ieee754_pow+0x420>
 801cda4:	4b28      	ldr	r3, [pc, #160]	@ (801ce48 <__ieee754_pow+0x2a0>)
 801cda6:	459a      	cmp	sl, r3
 801cda8:	4b25      	ldr	r3, [pc, #148]	@ (801ce40 <__ieee754_pow+0x298>)
 801cdaa:	d916      	bls.n	801cdda <__ieee754_pow+0x232>
 801cdac:	4598      	cmp	r8, r3
 801cdae:	d80b      	bhi.n	801cdc8 <__ieee754_pow+0x220>
 801cdb0:	f1b9 0f00 	cmp.w	r9, #0
 801cdb4:	da0b      	bge.n	801cdce <__ieee754_pow+0x226>
 801cdb6:	2000      	movs	r0, #0
 801cdb8:	b011      	add	sp, #68	@ 0x44
 801cdba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdbe:	f000 bceb 	b.w	801d798 <__math_oflow>
 801cdc2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801ce28 <__ieee754_pow+0x280>
 801cdc6:	e7e7      	b.n	801cd98 <__ieee754_pow+0x1f0>
 801cdc8:	f1b9 0f00 	cmp.w	r9, #0
 801cdcc:	dcf3      	bgt.n	801cdb6 <__ieee754_pow+0x20e>
 801cdce:	2000      	movs	r0, #0
 801cdd0:	b011      	add	sp, #68	@ 0x44
 801cdd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdd6:	f000 bcd7 	b.w	801d788 <__math_uflow>
 801cdda:	4598      	cmp	r8, r3
 801cddc:	d20c      	bcs.n	801cdf8 <__ieee754_pow+0x250>
 801cdde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cde2:	2200      	movs	r2, #0
 801cde4:	2300      	movs	r3, #0
 801cde6:	f7e3 feb1 	bl	8000b4c <__aeabi_dcmplt>
 801cdea:	3800      	subs	r0, #0
 801cdec:	bf18      	it	ne
 801cdee:	2001      	movne	r0, #1
 801cdf0:	f1b9 0f00 	cmp.w	r9, #0
 801cdf4:	daec      	bge.n	801cdd0 <__ieee754_pow+0x228>
 801cdf6:	e7df      	b.n	801cdb8 <__ieee754_pow+0x210>
 801cdf8:	4b10      	ldr	r3, [pc, #64]	@ (801ce3c <__ieee754_pow+0x294>)
 801cdfa:	4598      	cmp	r8, r3
 801cdfc:	f04f 0200 	mov.w	r2, #0
 801ce00:	d924      	bls.n	801ce4c <__ieee754_pow+0x2a4>
 801ce02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ce06:	2300      	movs	r3, #0
 801ce08:	f7e3 fea0 	bl	8000b4c <__aeabi_dcmplt>
 801ce0c:	3800      	subs	r0, #0
 801ce0e:	bf18      	it	ne
 801ce10:	2001      	movne	r0, #1
 801ce12:	f1b9 0f00 	cmp.w	r9, #0
 801ce16:	dccf      	bgt.n	801cdb8 <__ieee754_pow+0x210>
 801ce18:	e7da      	b.n	801cdd0 <__ieee754_pow+0x228>
 801ce1a:	bf00      	nop
 801ce1c:	f3af 8000 	nop.w
 801ce20:	00000000 	.word	0x00000000
 801ce24:	3ff00000 	.word	0x3ff00000
 801ce28:	00000000 	.word	0x00000000
 801ce2c:	bff00000 	.word	0xbff00000
 801ce30:	fff00000 	.word	0xfff00000
 801ce34:	7ff00000 	.word	0x7ff00000
 801ce38:	433fffff 	.word	0x433fffff
 801ce3c:	3ff00000 	.word	0x3ff00000
 801ce40:	3fefffff 	.word	0x3fefffff
 801ce44:	3fe00000 	.word	0x3fe00000
 801ce48:	43f00000 	.word	0x43f00000
 801ce4c:	4b5a      	ldr	r3, [pc, #360]	@ (801cfb8 <__ieee754_pow+0x410>)
 801ce4e:	f7e3 fa53 	bl	80002f8 <__aeabi_dsub>
 801ce52:	a351      	add	r3, pc, #324	@ (adr r3, 801cf98 <__ieee754_pow+0x3f0>)
 801ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce58:	4604      	mov	r4, r0
 801ce5a:	460d      	mov	r5, r1
 801ce5c:	f7e3 fc04 	bl	8000668 <__aeabi_dmul>
 801ce60:	a34f      	add	r3, pc, #316	@ (adr r3, 801cfa0 <__ieee754_pow+0x3f8>)
 801ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce66:	4606      	mov	r6, r0
 801ce68:	460f      	mov	r7, r1
 801ce6a:	4620      	mov	r0, r4
 801ce6c:	4629      	mov	r1, r5
 801ce6e:	f7e3 fbfb 	bl	8000668 <__aeabi_dmul>
 801ce72:	4b52      	ldr	r3, [pc, #328]	@ (801cfbc <__ieee754_pow+0x414>)
 801ce74:	4682      	mov	sl, r0
 801ce76:	468b      	mov	fp, r1
 801ce78:	2200      	movs	r2, #0
 801ce7a:	4620      	mov	r0, r4
 801ce7c:	4629      	mov	r1, r5
 801ce7e:	f7e3 fbf3 	bl	8000668 <__aeabi_dmul>
 801ce82:	4602      	mov	r2, r0
 801ce84:	460b      	mov	r3, r1
 801ce86:	a148      	add	r1, pc, #288	@ (adr r1, 801cfa8 <__ieee754_pow+0x400>)
 801ce88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ce8c:	f7e3 fa34 	bl	80002f8 <__aeabi_dsub>
 801ce90:	4622      	mov	r2, r4
 801ce92:	462b      	mov	r3, r5
 801ce94:	f7e3 fbe8 	bl	8000668 <__aeabi_dmul>
 801ce98:	4602      	mov	r2, r0
 801ce9a:	460b      	mov	r3, r1
 801ce9c:	2000      	movs	r0, #0
 801ce9e:	4948      	ldr	r1, [pc, #288]	@ (801cfc0 <__ieee754_pow+0x418>)
 801cea0:	f7e3 fa2a 	bl	80002f8 <__aeabi_dsub>
 801cea4:	4622      	mov	r2, r4
 801cea6:	4680      	mov	r8, r0
 801cea8:	4689      	mov	r9, r1
 801ceaa:	462b      	mov	r3, r5
 801ceac:	4620      	mov	r0, r4
 801ceae:	4629      	mov	r1, r5
 801ceb0:	f7e3 fbda 	bl	8000668 <__aeabi_dmul>
 801ceb4:	4602      	mov	r2, r0
 801ceb6:	460b      	mov	r3, r1
 801ceb8:	4640      	mov	r0, r8
 801ceba:	4649      	mov	r1, r9
 801cebc:	f7e3 fbd4 	bl	8000668 <__aeabi_dmul>
 801cec0:	a33b      	add	r3, pc, #236	@ (adr r3, 801cfb0 <__ieee754_pow+0x408>)
 801cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec6:	f7e3 fbcf 	bl	8000668 <__aeabi_dmul>
 801ceca:	4602      	mov	r2, r0
 801cecc:	460b      	mov	r3, r1
 801cece:	4650      	mov	r0, sl
 801ced0:	4659      	mov	r1, fp
 801ced2:	f7e3 fa11 	bl	80002f8 <__aeabi_dsub>
 801ced6:	4602      	mov	r2, r0
 801ced8:	460b      	mov	r3, r1
 801ceda:	4680      	mov	r8, r0
 801cedc:	4689      	mov	r9, r1
 801cede:	4630      	mov	r0, r6
 801cee0:	4639      	mov	r1, r7
 801cee2:	f7e3 fa0b 	bl	80002fc <__adddf3>
 801cee6:	2400      	movs	r4, #0
 801cee8:	4632      	mov	r2, r6
 801ceea:	463b      	mov	r3, r7
 801ceec:	4620      	mov	r0, r4
 801ceee:	460d      	mov	r5, r1
 801cef0:	f7e3 fa02 	bl	80002f8 <__aeabi_dsub>
 801cef4:	4602      	mov	r2, r0
 801cef6:	460b      	mov	r3, r1
 801cef8:	4640      	mov	r0, r8
 801cefa:	4649      	mov	r1, r9
 801cefc:	f7e3 f9fc 	bl	80002f8 <__aeabi_dsub>
 801cf00:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cf04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cf08:	2300      	movs	r3, #0
 801cf0a:	9304      	str	r3, [sp, #16]
 801cf0c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801cf10:	4606      	mov	r6, r0
 801cf12:	460f      	mov	r7, r1
 801cf14:	4652      	mov	r2, sl
 801cf16:	465b      	mov	r3, fp
 801cf18:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cf1c:	f7e3 f9ec 	bl	80002f8 <__aeabi_dsub>
 801cf20:	4622      	mov	r2, r4
 801cf22:	462b      	mov	r3, r5
 801cf24:	f7e3 fba0 	bl	8000668 <__aeabi_dmul>
 801cf28:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cf2c:	4680      	mov	r8, r0
 801cf2e:	4689      	mov	r9, r1
 801cf30:	4630      	mov	r0, r6
 801cf32:	4639      	mov	r1, r7
 801cf34:	f7e3 fb98 	bl	8000668 <__aeabi_dmul>
 801cf38:	4602      	mov	r2, r0
 801cf3a:	460b      	mov	r3, r1
 801cf3c:	4640      	mov	r0, r8
 801cf3e:	4649      	mov	r1, r9
 801cf40:	f7e3 f9dc 	bl	80002fc <__adddf3>
 801cf44:	4652      	mov	r2, sl
 801cf46:	465b      	mov	r3, fp
 801cf48:	4606      	mov	r6, r0
 801cf4a:	460f      	mov	r7, r1
 801cf4c:	4620      	mov	r0, r4
 801cf4e:	4629      	mov	r1, r5
 801cf50:	f7e3 fb8a 	bl	8000668 <__aeabi_dmul>
 801cf54:	460b      	mov	r3, r1
 801cf56:	4602      	mov	r2, r0
 801cf58:	4680      	mov	r8, r0
 801cf5a:	4689      	mov	r9, r1
 801cf5c:	4630      	mov	r0, r6
 801cf5e:	4639      	mov	r1, r7
 801cf60:	f7e3 f9cc 	bl	80002fc <__adddf3>
 801cf64:	4b17      	ldr	r3, [pc, #92]	@ (801cfc4 <__ieee754_pow+0x41c>)
 801cf66:	4299      	cmp	r1, r3
 801cf68:	4604      	mov	r4, r0
 801cf6a:	460d      	mov	r5, r1
 801cf6c:	468a      	mov	sl, r1
 801cf6e:	468b      	mov	fp, r1
 801cf70:	f340 82ef 	ble.w	801d552 <__ieee754_pow+0x9aa>
 801cf74:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801cf78:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801cf7c:	4303      	orrs	r3, r0
 801cf7e:	f000 81e8 	beq.w	801d352 <__ieee754_pow+0x7aa>
 801cf82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf86:	2200      	movs	r2, #0
 801cf88:	2300      	movs	r3, #0
 801cf8a:	f7e3 fddf 	bl	8000b4c <__aeabi_dcmplt>
 801cf8e:	3800      	subs	r0, #0
 801cf90:	bf18      	it	ne
 801cf92:	2001      	movne	r0, #1
 801cf94:	e710      	b.n	801cdb8 <__ieee754_pow+0x210>
 801cf96:	bf00      	nop
 801cf98:	60000000 	.word	0x60000000
 801cf9c:	3ff71547 	.word	0x3ff71547
 801cfa0:	f85ddf44 	.word	0xf85ddf44
 801cfa4:	3e54ae0b 	.word	0x3e54ae0b
 801cfa8:	55555555 	.word	0x55555555
 801cfac:	3fd55555 	.word	0x3fd55555
 801cfb0:	652b82fe 	.word	0x652b82fe
 801cfb4:	3ff71547 	.word	0x3ff71547
 801cfb8:	3ff00000 	.word	0x3ff00000
 801cfbc:	3fd00000 	.word	0x3fd00000
 801cfc0:	3fe00000 	.word	0x3fe00000
 801cfc4:	408fffff 	.word	0x408fffff
 801cfc8:	4bd5      	ldr	r3, [pc, #852]	@ (801d320 <__ieee754_pow+0x778>)
 801cfca:	402b      	ands	r3, r5
 801cfcc:	2200      	movs	r2, #0
 801cfce:	b92b      	cbnz	r3, 801cfdc <__ieee754_pow+0x434>
 801cfd0:	4bd4      	ldr	r3, [pc, #848]	@ (801d324 <__ieee754_pow+0x77c>)
 801cfd2:	f7e3 fb49 	bl	8000668 <__aeabi_dmul>
 801cfd6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801cfda:	468b      	mov	fp, r1
 801cfdc:	ea4f 532b 	mov.w	r3, fp, asr #20
 801cfe0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801cfe4:	4413      	add	r3, r2
 801cfe6:	930a      	str	r3, [sp, #40]	@ 0x28
 801cfe8:	4bcf      	ldr	r3, [pc, #828]	@ (801d328 <__ieee754_pow+0x780>)
 801cfea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801cfee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801cff2:	459b      	cmp	fp, r3
 801cff4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801cff8:	dd08      	ble.n	801d00c <__ieee754_pow+0x464>
 801cffa:	4bcc      	ldr	r3, [pc, #816]	@ (801d32c <__ieee754_pow+0x784>)
 801cffc:	459b      	cmp	fp, r3
 801cffe:	f340 81a5 	ble.w	801d34c <__ieee754_pow+0x7a4>
 801d002:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d004:	3301      	adds	r3, #1
 801d006:	930a      	str	r3, [sp, #40]	@ 0x28
 801d008:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801d00c:	f04f 0a00 	mov.w	sl, #0
 801d010:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801d014:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d016:	4bc6      	ldr	r3, [pc, #792]	@ (801d330 <__ieee754_pow+0x788>)
 801d018:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d01c:	ed93 7b00 	vldr	d7, [r3]
 801d020:	4629      	mov	r1, r5
 801d022:	ec53 2b17 	vmov	r2, r3, d7
 801d026:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d02a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d02e:	f7e3 f963 	bl	80002f8 <__aeabi_dsub>
 801d032:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d036:	4606      	mov	r6, r0
 801d038:	460f      	mov	r7, r1
 801d03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d03e:	f7e3 f95d 	bl	80002fc <__adddf3>
 801d042:	4602      	mov	r2, r0
 801d044:	460b      	mov	r3, r1
 801d046:	2000      	movs	r0, #0
 801d048:	49ba      	ldr	r1, [pc, #744]	@ (801d334 <__ieee754_pow+0x78c>)
 801d04a:	f7e3 fc37 	bl	80008bc <__aeabi_ddiv>
 801d04e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801d052:	4602      	mov	r2, r0
 801d054:	460b      	mov	r3, r1
 801d056:	4630      	mov	r0, r6
 801d058:	4639      	mov	r1, r7
 801d05a:	f7e3 fb05 	bl	8000668 <__aeabi_dmul>
 801d05e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d062:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801d066:	106d      	asrs	r5, r5, #1
 801d068:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801d06c:	f04f 0b00 	mov.w	fp, #0
 801d070:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801d074:	4661      	mov	r1, ip
 801d076:	2200      	movs	r2, #0
 801d078:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801d07c:	4658      	mov	r0, fp
 801d07e:	46e1      	mov	r9, ip
 801d080:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801d084:	4614      	mov	r4, r2
 801d086:	461d      	mov	r5, r3
 801d088:	f7e3 faee 	bl	8000668 <__aeabi_dmul>
 801d08c:	4602      	mov	r2, r0
 801d08e:	460b      	mov	r3, r1
 801d090:	4630      	mov	r0, r6
 801d092:	4639      	mov	r1, r7
 801d094:	f7e3 f930 	bl	80002f8 <__aeabi_dsub>
 801d098:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d09c:	4606      	mov	r6, r0
 801d09e:	460f      	mov	r7, r1
 801d0a0:	4620      	mov	r0, r4
 801d0a2:	4629      	mov	r1, r5
 801d0a4:	f7e3 f928 	bl	80002f8 <__aeabi_dsub>
 801d0a8:	4602      	mov	r2, r0
 801d0aa:	460b      	mov	r3, r1
 801d0ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d0b0:	f7e3 f922 	bl	80002f8 <__aeabi_dsub>
 801d0b4:	465a      	mov	r2, fp
 801d0b6:	464b      	mov	r3, r9
 801d0b8:	f7e3 fad6 	bl	8000668 <__aeabi_dmul>
 801d0bc:	4602      	mov	r2, r0
 801d0be:	460b      	mov	r3, r1
 801d0c0:	4630      	mov	r0, r6
 801d0c2:	4639      	mov	r1, r7
 801d0c4:	f7e3 f918 	bl	80002f8 <__aeabi_dsub>
 801d0c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801d0cc:	f7e3 facc 	bl	8000668 <__aeabi_dmul>
 801d0d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d0d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d0d8:	4610      	mov	r0, r2
 801d0da:	4619      	mov	r1, r3
 801d0dc:	f7e3 fac4 	bl	8000668 <__aeabi_dmul>
 801d0e0:	a37d      	add	r3, pc, #500	@ (adr r3, 801d2d8 <__ieee754_pow+0x730>)
 801d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e6:	4604      	mov	r4, r0
 801d0e8:	460d      	mov	r5, r1
 801d0ea:	f7e3 fabd 	bl	8000668 <__aeabi_dmul>
 801d0ee:	a37c      	add	r3, pc, #496	@ (adr r3, 801d2e0 <__ieee754_pow+0x738>)
 801d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0f4:	f7e3 f902 	bl	80002fc <__adddf3>
 801d0f8:	4622      	mov	r2, r4
 801d0fa:	462b      	mov	r3, r5
 801d0fc:	f7e3 fab4 	bl	8000668 <__aeabi_dmul>
 801d100:	a379      	add	r3, pc, #484	@ (adr r3, 801d2e8 <__ieee754_pow+0x740>)
 801d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d106:	f7e3 f8f9 	bl	80002fc <__adddf3>
 801d10a:	4622      	mov	r2, r4
 801d10c:	462b      	mov	r3, r5
 801d10e:	f7e3 faab 	bl	8000668 <__aeabi_dmul>
 801d112:	a377      	add	r3, pc, #476	@ (adr r3, 801d2f0 <__ieee754_pow+0x748>)
 801d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d118:	f7e3 f8f0 	bl	80002fc <__adddf3>
 801d11c:	4622      	mov	r2, r4
 801d11e:	462b      	mov	r3, r5
 801d120:	f7e3 faa2 	bl	8000668 <__aeabi_dmul>
 801d124:	a374      	add	r3, pc, #464	@ (adr r3, 801d2f8 <__ieee754_pow+0x750>)
 801d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d12a:	f7e3 f8e7 	bl	80002fc <__adddf3>
 801d12e:	4622      	mov	r2, r4
 801d130:	462b      	mov	r3, r5
 801d132:	f7e3 fa99 	bl	8000668 <__aeabi_dmul>
 801d136:	a372      	add	r3, pc, #456	@ (adr r3, 801d300 <__ieee754_pow+0x758>)
 801d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13c:	f7e3 f8de 	bl	80002fc <__adddf3>
 801d140:	4622      	mov	r2, r4
 801d142:	4606      	mov	r6, r0
 801d144:	460f      	mov	r7, r1
 801d146:	462b      	mov	r3, r5
 801d148:	4620      	mov	r0, r4
 801d14a:	4629      	mov	r1, r5
 801d14c:	f7e3 fa8c 	bl	8000668 <__aeabi_dmul>
 801d150:	4602      	mov	r2, r0
 801d152:	460b      	mov	r3, r1
 801d154:	4630      	mov	r0, r6
 801d156:	4639      	mov	r1, r7
 801d158:	f7e3 fa86 	bl	8000668 <__aeabi_dmul>
 801d15c:	465a      	mov	r2, fp
 801d15e:	4604      	mov	r4, r0
 801d160:	460d      	mov	r5, r1
 801d162:	464b      	mov	r3, r9
 801d164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d168:	f7e3 f8c8 	bl	80002fc <__adddf3>
 801d16c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d170:	f7e3 fa7a 	bl	8000668 <__aeabi_dmul>
 801d174:	4622      	mov	r2, r4
 801d176:	462b      	mov	r3, r5
 801d178:	f7e3 f8c0 	bl	80002fc <__adddf3>
 801d17c:	465a      	mov	r2, fp
 801d17e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d182:	464b      	mov	r3, r9
 801d184:	4658      	mov	r0, fp
 801d186:	4649      	mov	r1, r9
 801d188:	f7e3 fa6e 	bl	8000668 <__aeabi_dmul>
 801d18c:	4b6a      	ldr	r3, [pc, #424]	@ (801d338 <__ieee754_pow+0x790>)
 801d18e:	2200      	movs	r2, #0
 801d190:	4606      	mov	r6, r0
 801d192:	460f      	mov	r7, r1
 801d194:	f7e3 f8b2 	bl	80002fc <__adddf3>
 801d198:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d19c:	f7e3 f8ae 	bl	80002fc <__adddf3>
 801d1a0:	46d8      	mov	r8, fp
 801d1a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801d1a6:	460d      	mov	r5, r1
 801d1a8:	465a      	mov	r2, fp
 801d1aa:	460b      	mov	r3, r1
 801d1ac:	4640      	mov	r0, r8
 801d1ae:	4649      	mov	r1, r9
 801d1b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801d1b4:	f7e3 fa58 	bl	8000668 <__aeabi_dmul>
 801d1b8:	465c      	mov	r4, fp
 801d1ba:	4680      	mov	r8, r0
 801d1bc:	4689      	mov	r9, r1
 801d1be:	4b5e      	ldr	r3, [pc, #376]	@ (801d338 <__ieee754_pow+0x790>)
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	4620      	mov	r0, r4
 801d1c4:	4629      	mov	r1, r5
 801d1c6:	f7e3 f897 	bl	80002f8 <__aeabi_dsub>
 801d1ca:	4632      	mov	r2, r6
 801d1cc:	463b      	mov	r3, r7
 801d1ce:	f7e3 f893 	bl	80002f8 <__aeabi_dsub>
 801d1d2:	4602      	mov	r2, r0
 801d1d4:	460b      	mov	r3, r1
 801d1d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d1da:	f7e3 f88d 	bl	80002f8 <__aeabi_dsub>
 801d1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d1e2:	f7e3 fa41 	bl	8000668 <__aeabi_dmul>
 801d1e6:	4622      	mov	r2, r4
 801d1e8:	4606      	mov	r6, r0
 801d1ea:	460f      	mov	r7, r1
 801d1ec:	462b      	mov	r3, r5
 801d1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d1f2:	f7e3 fa39 	bl	8000668 <__aeabi_dmul>
 801d1f6:	4602      	mov	r2, r0
 801d1f8:	460b      	mov	r3, r1
 801d1fa:	4630      	mov	r0, r6
 801d1fc:	4639      	mov	r1, r7
 801d1fe:	f7e3 f87d 	bl	80002fc <__adddf3>
 801d202:	4606      	mov	r6, r0
 801d204:	460f      	mov	r7, r1
 801d206:	4602      	mov	r2, r0
 801d208:	460b      	mov	r3, r1
 801d20a:	4640      	mov	r0, r8
 801d20c:	4649      	mov	r1, r9
 801d20e:	f7e3 f875 	bl	80002fc <__adddf3>
 801d212:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801d216:	a33c      	add	r3, pc, #240	@ (adr r3, 801d308 <__ieee754_pow+0x760>)
 801d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d21c:	4658      	mov	r0, fp
 801d21e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801d222:	460d      	mov	r5, r1
 801d224:	f7e3 fa20 	bl	8000668 <__aeabi_dmul>
 801d228:	465c      	mov	r4, fp
 801d22a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d22e:	4642      	mov	r2, r8
 801d230:	464b      	mov	r3, r9
 801d232:	4620      	mov	r0, r4
 801d234:	4629      	mov	r1, r5
 801d236:	f7e3 f85f 	bl	80002f8 <__aeabi_dsub>
 801d23a:	4602      	mov	r2, r0
 801d23c:	460b      	mov	r3, r1
 801d23e:	4630      	mov	r0, r6
 801d240:	4639      	mov	r1, r7
 801d242:	f7e3 f859 	bl	80002f8 <__aeabi_dsub>
 801d246:	a332      	add	r3, pc, #200	@ (adr r3, 801d310 <__ieee754_pow+0x768>)
 801d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d24c:	f7e3 fa0c 	bl	8000668 <__aeabi_dmul>
 801d250:	a331      	add	r3, pc, #196	@ (adr r3, 801d318 <__ieee754_pow+0x770>)
 801d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d256:	4606      	mov	r6, r0
 801d258:	460f      	mov	r7, r1
 801d25a:	4620      	mov	r0, r4
 801d25c:	4629      	mov	r1, r5
 801d25e:	f7e3 fa03 	bl	8000668 <__aeabi_dmul>
 801d262:	4602      	mov	r2, r0
 801d264:	460b      	mov	r3, r1
 801d266:	4630      	mov	r0, r6
 801d268:	4639      	mov	r1, r7
 801d26a:	f7e3 f847 	bl	80002fc <__adddf3>
 801d26e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d270:	4b32      	ldr	r3, [pc, #200]	@ (801d33c <__ieee754_pow+0x794>)
 801d272:	4413      	add	r3, r2
 801d274:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d278:	f7e3 f840 	bl	80002fc <__adddf3>
 801d27c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d280:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d282:	f7e3 f987 	bl	8000594 <__aeabi_i2d>
 801d286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d288:	4b2d      	ldr	r3, [pc, #180]	@ (801d340 <__ieee754_pow+0x798>)
 801d28a:	4413      	add	r3, r2
 801d28c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d290:	4606      	mov	r6, r0
 801d292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d296:	460f      	mov	r7, r1
 801d298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d29c:	f7e3 f82e 	bl	80002fc <__adddf3>
 801d2a0:	4642      	mov	r2, r8
 801d2a2:	464b      	mov	r3, r9
 801d2a4:	f7e3 f82a 	bl	80002fc <__adddf3>
 801d2a8:	4632      	mov	r2, r6
 801d2aa:	463b      	mov	r3, r7
 801d2ac:	f7e3 f826 	bl	80002fc <__adddf3>
 801d2b0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801d2b4:	4632      	mov	r2, r6
 801d2b6:	463b      	mov	r3, r7
 801d2b8:	4658      	mov	r0, fp
 801d2ba:	460d      	mov	r5, r1
 801d2bc:	f7e3 f81c 	bl	80002f8 <__aeabi_dsub>
 801d2c0:	4642      	mov	r2, r8
 801d2c2:	464b      	mov	r3, r9
 801d2c4:	f7e3 f818 	bl	80002f8 <__aeabi_dsub>
 801d2c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d2cc:	f7e3 f814 	bl	80002f8 <__aeabi_dsub>
 801d2d0:	465c      	mov	r4, fp
 801d2d2:	4602      	mov	r2, r0
 801d2d4:	e036      	b.n	801d344 <__ieee754_pow+0x79c>
 801d2d6:	bf00      	nop
 801d2d8:	4a454eef 	.word	0x4a454eef
 801d2dc:	3fca7e28 	.word	0x3fca7e28
 801d2e0:	93c9db65 	.word	0x93c9db65
 801d2e4:	3fcd864a 	.word	0x3fcd864a
 801d2e8:	a91d4101 	.word	0xa91d4101
 801d2ec:	3fd17460 	.word	0x3fd17460
 801d2f0:	518f264d 	.word	0x518f264d
 801d2f4:	3fd55555 	.word	0x3fd55555
 801d2f8:	db6fabff 	.word	0xdb6fabff
 801d2fc:	3fdb6db6 	.word	0x3fdb6db6
 801d300:	33333303 	.word	0x33333303
 801d304:	3fe33333 	.word	0x3fe33333
 801d308:	e0000000 	.word	0xe0000000
 801d30c:	3feec709 	.word	0x3feec709
 801d310:	dc3a03fd 	.word	0xdc3a03fd
 801d314:	3feec709 	.word	0x3feec709
 801d318:	145b01f5 	.word	0x145b01f5
 801d31c:	be3e2fe0 	.word	0xbe3e2fe0
 801d320:	7ff00000 	.word	0x7ff00000
 801d324:	43400000 	.word	0x43400000
 801d328:	0003988e 	.word	0x0003988e
 801d32c:	000bb679 	.word	0x000bb679
 801d330:	0801f7a8 	.word	0x0801f7a8
 801d334:	3ff00000 	.word	0x3ff00000
 801d338:	40080000 	.word	0x40080000
 801d33c:	0801f788 	.word	0x0801f788
 801d340:	0801f798 	.word	0x0801f798
 801d344:	460b      	mov	r3, r1
 801d346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d34a:	e5d7      	b.n	801cefc <__ieee754_pow+0x354>
 801d34c:	f04f 0a01 	mov.w	sl, #1
 801d350:	e65e      	b.n	801d010 <__ieee754_pow+0x468>
 801d352:	a3b4      	add	r3, pc, #720	@ (adr r3, 801d624 <__ieee754_pow+0xa7c>)
 801d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d358:	4630      	mov	r0, r6
 801d35a:	4639      	mov	r1, r7
 801d35c:	f7e2 ffce 	bl	80002fc <__adddf3>
 801d360:	4642      	mov	r2, r8
 801d362:	e9cd 0100 	strd	r0, r1, [sp]
 801d366:	464b      	mov	r3, r9
 801d368:	4620      	mov	r0, r4
 801d36a:	4629      	mov	r1, r5
 801d36c:	f7e2 ffc4 	bl	80002f8 <__aeabi_dsub>
 801d370:	4602      	mov	r2, r0
 801d372:	460b      	mov	r3, r1
 801d374:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d378:	f7e3 fc06 	bl	8000b88 <__aeabi_dcmpgt>
 801d37c:	2800      	cmp	r0, #0
 801d37e:	f47f ae00 	bne.w	801cf82 <__ieee754_pow+0x3da>
 801d382:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801d386:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801d38a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801d38e:	fa43 fa0a 	asr.w	sl, r3, sl
 801d392:	44da      	add	sl, fp
 801d394:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801d398:	489d      	ldr	r0, [pc, #628]	@ (801d610 <__ieee754_pow+0xa68>)
 801d39a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801d39e:	4108      	asrs	r0, r1
 801d3a0:	ea00 030a 	and.w	r3, r0, sl
 801d3a4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801d3a8:	f1c1 0114 	rsb	r1, r1, #20
 801d3ac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801d3b0:	fa4a fa01 	asr.w	sl, sl, r1
 801d3b4:	f1bb 0f00 	cmp.w	fp, #0
 801d3b8:	4640      	mov	r0, r8
 801d3ba:	4649      	mov	r1, r9
 801d3bc:	f04f 0200 	mov.w	r2, #0
 801d3c0:	bfb8      	it	lt
 801d3c2:	f1ca 0a00 	rsblt	sl, sl, #0
 801d3c6:	f7e2 ff97 	bl	80002f8 <__aeabi_dsub>
 801d3ca:	4680      	mov	r8, r0
 801d3cc:	4689      	mov	r9, r1
 801d3ce:	4632      	mov	r2, r6
 801d3d0:	463b      	mov	r3, r7
 801d3d2:	4640      	mov	r0, r8
 801d3d4:	4649      	mov	r1, r9
 801d3d6:	f7e2 ff91 	bl	80002fc <__adddf3>
 801d3da:	2400      	movs	r4, #0
 801d3dc:	a37c      	add	r3, pc, #496	@ (adr r3, 801d5d0 <__ieee754_pow+0xa28>)
 801d3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3e2:	4620      	mov	r0, r4
 801d3e4:	460d      	mov	r5, r1
 801d3e6:	f7e3 f93f 	bl	8000668 <__aeabi_dmul>
 801d3ea:	4642      	mov	r2, r8
 801d3ec:	e9cd 0100 	strd	r0, r1, [sp]
 801d3f0:	464b      	mov	r3, r9
 801d3f2:	4620      	mov	r0, r4
 801d3f4:	4629      	mov	r1, r5
 801d3f6:	f7e2 ff7f 	bl	80002f8 <__aeabi_dsub>
 801d3fa:	4602      	mov	r2, r0
 801d3fc:	460b      	mov	r3, r1
 801d3fe:	4630      	mov	r0, r6
 801d400:	4639      	mov	r1, r7
 801d402:	f7e2 ff79 	bl	80002f8 <__aeabi_dsub>
 801d406:	a374      	add	r3, pc, #464	@ (adr r3, 801d5d8 <__ieee754_pow+0xa30>)
 801d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d40c:	f7e3 f92c 	bl	8000668 <__aeabi_dmul>
 801d410:	a373      	add	r3, pc, #460	@ (adr r3, 801d5e0 <__ieee754_pow+0xa38>)
 801d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d416:	4680      	mov	r8, r0
 801d418:	4689      	mov	r9, r1
 801d41a:	4620      	mov	r0, r4
 801d41c:	4629      	mov	r1, r5
 801d41e:	f7e3 f923 	bl	8000668 <__aeabi_dmul>
 801d422:	4602      	mov	r2, r0
 801d424:	460b      	mov	r3, r1
 801d426:	4640      	mov	r0, r8
 801d428:	4649      	mov	r1, r9
 801d42a:	f7e2 ff67 	bl	80002fc <__adddf3>
 801d42e:	4604      	mov	r4, r0
 801d430:	460d      	mov	r5, r1
 801d432:	4602      	mov	r2, r0
 801d434:	460b      	mov	r3, r1
 801d436:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d43a:	f7e2 ff5f 	bl	80002fc <__adddf3>
 801d43e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d442:	4680      	mov	r8, r0
 801d444:	4689      	mov	r9, r1
 801d446:	f7e2 ff57 	bl	80002f8 <__aeabi_dsub>
 801d44a:	4602      	mov	r2, r0
 801d44c:	460b      	mov	r3, r1
 801d44e:	4620      	mov	r0, r4
 801d450:	4629      	mov	r1, r5
 801d452:	f7e2 ff51 	bl	80002f8 <__aeabi_dsub>
 801d456:	4642      	mov	r2, r8
 801d458:	4606      	mov	r6, r0
 801d45a:	460f      	mov	r7, r1
 801d45c:	464b      	mov	r3, r9
 801d45e:	4640      	mov	r0, r8
 801d460:	4649      	mov	r1, r9
 801d462:	f7e3 f901 	bl	8000668 <__aeabi_dmul>
 801d466:	a360      	add	r3, pc, #384	@ (adr r3, 801d5e8 <__ieee754_pow+0xa40>)
 801d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d46c:	4604      	mov	r4, r0
 801d46e:	460d      	mov	r5, r1
 801d470:	f7e3 f8fa 	bl	8000668 <__aeabi_dmul>
 801d474:	a35e      	add	r3, pc, #376	@ (adr r3, 801d5f0 <__ieee754_pow+0xa48>)
 801d476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d47a:	f7e2 ff3d 	bl	80002f8 <__aeabi_dsub>
 801d47e:	4622      	mov	r2, r4
 801d480:	462b      	mov	r3, r5
 801d482:	f7e3 f8f1 	bl	8000668 <__aeabi_dmul>
 801d486:	a35c      	add	r3, pc, #368	@ (adr r3, 801d5f8 <__ieee754_pow+0xa50>)
 801d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d48c:	f7e2 ff36 	bl	80002fc <__adddf3>
 801d490:	4622      	mov	r2, r4
 801d492:	462b      	mov	r3, r5
 801d494:	f7e3 f8e8 	bl	8000668 <__aeabi_dmul>
 801d498:	a359      	add	r3, pc, #356	@ (adr r3, 801d600 <__ieee754_pow+0xa58>)
 801d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d49e:	f7e2 ff2b 	bl	80002f8 <__aeabi_dsub>
 801d4a2:	4622      	mov	r2, r4
 801d4a4:	462b      	mov	r3, r5
 801d4a6:	f7e3 f8df 	bl	8000668 <__aeabi_dmul>
 801d4aa:	a357      	add	r3, pc, #348	@ (adr r3, 801d608 <__ieee754_pow+0xa60>)
 801d4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4b0:	f7e2 ff24 	bl	80002fc <__adddf3>
 801d4b4:	4622      	mov	r2, r4
 801d4b6:	462b      	mov	r3, r5
 801d4b8:	f7e3 f8d6 	bl	8000668 <__aeabi_dmul>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	460b      	mov	r3, r1
 801d4c0:	4640      	mov	r0, r8
 801d4c2:	4649      	mov	r1, r9
 801d4c4:	f7e2 ff18 	bl	80002f8 <__aeabi_dsub>
 801d4c8:	4604      	mov	r4, r0
 801d4ca:	460d      	mov	r5, r1
 801d4cc:	4602      	mov	r2, r0
 801d4ce:	460b      	mov	r3, r1
 801d4d0:	4640      	mov	r0, r8
 801d4d2:	4649      	mov	r1, r9
 801d4d4:	f7e3 f8c8 	bl	8000668 <__aeabi_dmul>
 801d4d8:	2200      	movs	r2, #0
 801d4da:	e9cd 0100 	strd	r0, r1, [sp]
 801d4de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d4e2:	4620      	mov	r0, r4
 801d4e4:	4629      	mov	r1, r5
 801d4e6:	f7e2 ff07 	bl	80002f8 <__aeabi_dsub>
 801d4ea:	4602      	mov	r2, r0
 801d4ec:	460b      	mov	r3, r1
 801d4ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d4f2:	f7e3 f9e3 	bl	80008bc <__aeabi_ddiv>
 801d4f6:	4632      	mov	r2, r6
 801d4f8:	4604      	mov	r4, r0
 801d4fa:	460d      	mov	r5, r1
 801d4fc:	463b      	mov	r3, r7
 801d4fe:	4640      	mov	r0, r8
 801d500:	4649      	mov	r1, r9
 801d502:	f7e3 f8b1 	bl	8000668 <__aeabi_dmul>
 801d506:	4632      	mov	r2, r6
 801d508:	463b      	mov	r3, r7
 801d50a:	f7e2 fef7 	bl	80002fc <__adddf3>
 801d50e:	4602      	mov	r2, r0
 801d510:	460b      	mov	r3, r1
 801d512:	4620      	mov	r0, r4
 801d514:	4629      	mov	r1, r5
 801d516:	f7e2 feef 	bl	80002f8 <__aeabi_dsub>
 801d51a:	4642      	mov	r2, r8
 801d51c:	464b      	mov	r3, r9
 801d51e:	f7e2 feeb 	bl	80002f8 <__aeabi_dsub>
 801d522:	460b      	mov	r3, r1
 801d524:	4602      	mov	r2, r0
 801d526:	493b      	ldr	r1, [pc, #236]	@ (801d614 <__ieee754_pow+0xa6c>)
 801d528:	2000      	movs	r0, #0
 801d52a:	f7e2 fee5 	bl	80002f8 <__aeabi_dsub>
 801d52e:	ec41 0b10 	vmov	d0, r0, r1
 801d532:	ee10 3a90 	vmov	r3, s1
 801d536:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d53a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d53e:	da30      	bge.n	801d5a2 <__ieee754_pow+0x9fa>
 801d540:	4650      	mov	r0, sl
 801d542:	f000 f875 	bl	801d630 <scalbn>
 801d546:	ec51 0b10 	vmov	r0, r1, d0
 801d54a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d54e:	f7ff bbd2 	b.w	801ccf6 <__ieee754_pow+0x14e>
 801d552:	4c31      	ldr	r4, [pc, #196]	@ (801d618 <__ieee754_pow+0xa70>)
 801d554:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d558:	42a3      	cmp	r3, r4
 801d55a:	d91a      	bls.n	801d592 <__ieee754_pow+0x9ea>
 801d55c:	4b2f      	ldr	r3, [pc, #188]	@ (801d61c <__ieee754_pow+0xa74>)
 801d55e:	440b      	add	r3, r1
 801d560:	4303      	orrs	r3, r0
 801d562:	d009      	beq.n	801d578 <__ieee754_pow+0x9d0>
 801d564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d568:	2200      	movs	r2, #0
 801d56a:	2300      	movs	r3, #0
 801d56c:	f7e3 faee 	bl	8000b4c <__aeabi_dcmplt>
 801d570:	3800      	subs	r0, #0
 801d572:	bf18      	it	ne
 801d574:	2001      	movne	r0, #1
 801d576:	e42b      	b.n	801cdd0 <__ieee754_pow+0x228>
 801d578:	4642      	mov	r2, r8
 801d57a:	464b      	mov	r3, r9
 801d57c:	f7e2 febc 	bl	80002f8 <__aeabi_dsub>
 801d580:	4632      	mov	r2, r6
 801d582:	463b      	mov	r3, r7
 801d584:	f7e3 faf6 	bl	8000b74 <__aeabi_dcmpge>
 801d588:	2800      	cmp	r0, #0
 801d58a:	d1eb      	bne.n	801d564 <__ieee754_pow+0x9bc>
 801d58c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801d62c <__ieee754_pow+0xa84>
 801d590:	e6f7      	b.n	801d382 <__ieee754_pow+0x7da>
 801d592:	469a      	mov	sl, r3
 801d594:	4b22      	ldr	r3, [pc, #136]	@ (801d620 <__ieee754_pow+0xa78>)
 801d596:	459a      	cmp	sl, r3
 801d598:	f63f aef3 	bhi.w	801d382 <__ieee754_pow+0x7da>
 801d59c:	f8dd a010 	ldr.w	sl, [sp, #16]
 801d5a0:	e715      	b.n	801d3ce <__ieee754_pow+0x826>
 801d5a2:	ec51 0b10 	vmov	r0, r1, d0
 801d5a6:	4619      	mov	r1, r3
 801d5a8:	e7cf      	b.n	801d54a <__ieee754_pow+0x9a2>
 801d5aa:	491a      	ldr	r1, [pc, #104]	@ (801d614 <__ieee754_pow+0xa6c>)
 801d5ac:	2000      	movs	r0, #0
 801d5ae:	f7ff bb18 	b.w	801cbe2 <__ieee754_pow+0x3a>
 801d5b2:	2000      	movs	r0, #0
 801d5b4:	2100      	movs	r1, #0
 801d5b6:	f7ff bb14 	b.w	801cbe2 <__ieee754_pow+0x3a>
 801d5ba:	4630      	mov	r0, r6
 801d5bc:	4639      	mov	r1, r7
 801d5be:	f7ff bb10 	b.w	801cbe2 <__ieee754_pow+0x3a>
 801d5c2:	460c      	mov	r4, r1
 801d5c4:	f7ff bb5e 	b.w	801cc84 <__ieee754_pow+0xdc>
 801d5c8:	2400      	movs	r4, #0
 801d5ca:	f7ff bb49 	b.w	801cc60 <__ieee754_pow+0xb8>
 801d5ce:	bf00      	nop
 801d5d0:	00000000 	.word	0x00000000
 801d5d4:	3fe62e43 	.word	0x3fe62e43
 801d5d8:	fefa39ef 	.word	0xfefa39ef
 801d5dc:	3fe62e42 	.word	0x3fe62e42
 801d5e0:	0ca86c39 	.word	0x0ca86c39
 801d5e4:	be205c61 	.word	0xbe205c61
 801d5e8:	72bea4d0 	.word	0x72bea4d0
 801d5ec:	3e663769 	.word	0x3e663769
 801d5f0:	c5d26bf1 	.word	0xc5d26bf1
 801d5f4:	3ebbbd41 	.word	0x3ebbbd41
 801d5f8:	af25de2c 	.word	0xaf25de2c
 801d5fc:	3f11566a 	.word	0x3f11566a
 801d600:	16bebd93 	.word	0x16bebd93
 801d604:	3f66c16c 	.word	0x3f66c16c
 801d608:	5555553e 	.word	0x5555553e
 801d60c:	3fc55555 	.word	0x3fc55555
 801d610:	fff00000 	.word	0xfff00000
 801d614:	3ff00000 	.word	0x3ff00000
 801d618:	4090cbff 	.word	0x4090cbff
 801d61c:	3f6f3400 	.word	0x3f6f3400
 801d620:	3fe00000 	.word	0x3fe00000
 801d624:	652b82fe 	.word	0x652b82fe
 801d628:	3c971547 	.word	0x3c971547
 801d62c:	4090cc00 	.word	0x4090cc00

0801d630 <scalbn>:
 801d630:	b570      	push	{r4, r5, r6, lr}
 801d632:	ec55 4b10 	vmov	r4, r5, d0
 801d636:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801d63a:	4606      	mov	r6, r0
 801d63c:	462b      	mov	r3, r5
 801d63e:	b991      	cbnz	r1, 801d666 <scalbn+0x36>
 801d640:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801d644:	4323      	orrs	r3, r4
 801d646:	d03d      	beq.n	801d6c4 <scalbn+0x94>
 801d648:	4b35      	ldr	r3, [pc, #212]	@ (801d720 <scalbn+0xf0>)
 801d64a:	4620      	mov	r0, r4
 801d64c:	4629      	mov	r1, r5
 801d64e:	2200      	movs	r2, #0
 801d650:	f7e3 f80a 	bl	8000668 <__aeabi_dmul>
 801d654:	4b33      	ldr	r3, [pc, #204]	@ (801d724 <scalbn+0xf4>)
 801d656:	429e      	cmp	r6, r3
 801d658:	4604      	mov	r4, r0
 801d65a:	460d      	mov	r5, r1
 801d65c:	da0f      	bge.n	801d67e <scalbn+0x4e>
 801d65e:	a328      	add	r3, pc, #160	@ (adr r3, 801d700 <scalbn+0xd0>)
 801d660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d664:	e01e      	b.n	801d6a4 <scalbn+0x74>
 801d666:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d66a:	4291      	cmp	r1, r2
 801d66c:	d10b      	bne.n	801d686 <scalbn+0x56>
 801d66e:	4622      	mov	r2, r4
 801d670:	4620      	mov	r0, r4
 801d672:	4629      	mov	r1, r5
 801d674:	f7e2 fe42 	bl	80002fc <__adddf3>
 801d678:	4604      	mov	r4, r0
 801d67a:	460d      	mov	r5, r1
 801d67c:	e022      	b.n	801d6c4 <scalbn+0x94>
 801d67e:	460b      	mov	r3, r1
 801d680:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801d684:	3936      	subs	r1, #54	@ 0x36
 801d686:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d68a:	4296      	cmp	r6, r2
 801d68c:	dd0d      	ble.n	801d6aa <scalbn+0x7a>
 801d68e:	2d00      	cmp	r5, #0
 801d690:	a11d      	add	r1, pc, #116	@ (adr r1, 801d708 <scalbn+0xd8>)
 801d692:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d696:	da02      	bge.n	801d69e <scalbn+0x6e>
 801d698:	a11d      	add	r1, pc, #116	@ (adr r1, 801d710 <scalbn+0xe0>)
 801d69a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d69e:	a31a      	add	r3, pc, #104	@ (adr r3, 801d708 <scalbn+0xd8>)
 801d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a4:	f7e2 ffe0 	bl	8000668 <__aeabi_dmul>
 801d6a8:	e7e6      	b.n	801d678 <scalbn+0x48>
 801d6aa:	1872      	adds	r2, r6, r1
 801d6ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801d6b0:	428a      	cmp	r2, r1
 801d6b2:	dcec      	bgt.n	801d68e <scalbn+0x5e>
 801d6b4:	2a00      	cmp	r2, #0
 801d6b6:	dd08      	ble.n	801d6ca <scalbn+0x9a>
 801d6b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801d6bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801d6c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d6c4:	ec45 4b10 	vmov	d0, r4, r5
 801d6c8:	bd70      	pop	{r4, r5, r6, pc}
 801d6ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801d6ce:	da08      	bge.n	801d6e2 <scalbn+0xb2>
 801d6d0:	2d00      	cmp	r5, #0
 801d6d2:	a10b      	add	r1, pc, #44	@ (adr r1, 801d700 <scalbn+0xd0>)
 801d6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d6d8:	dac1      	bge.n	801d65e <scalbn+0x2e>
 801d6da:	a10f      	add	r1, pc, #60	@ (adr r1, 801d718 <scalbn+0xe8>)
 801d6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d6e0:	e7bd      	b.n	801d65e <scalbn+0x2e>
 801d6e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801d6e6:	3236      	adds	r2, #54	@ 0x36
 801d6e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801d6ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d6f0:	4620      	mov	r0, r4
 801d6f2:	4b0d      	ldr	r3, [pc, #52]	@ (801d728 <scalbn+0xf8>)
 801d6f4:	4629      	mov	r1, r5
 801d6f6:	2200      	movs	r2, #0
 801d6f8:	e7d4      	b.n	801d6a4 <scalbn+0x74>
 801d6fa:	bf00      	nop
 801d6fc:	f3af 8000 	nop.w
 801d700:	c2f8f359 	.word	0xc2f8f359
 801d704:	01a56e1f 	.word	0x01a56e1f
 801d708:	8800759c 	.word	0x8800759c
 801d70c:	7e37e43c 	.word	0x7e37e43c
 801d710:	8800759c 	.word	0x8800759c
 801d714:	fe37e43c 	.word	0xfe37e43c
 801d718:	c2f8f359 	.word	0xc2f8f359
 801d71c:	81a56e1f 	.word	0x81a56e1f
 801d720:	43500000 	.word	0x43500000
 801d724:	ffff3cb0 	.word	0xffff3cb0
 801d728:	3c900000 	.word	0x3c900000

0801d72c <with_errno>:
 801d72c:	b510      	push	{r4, lr}
 801d72e:	ed2d 8b02 	vpush	{d8}
 801d732:	eeb0 8a40 	vmov.f32	s16, s0
 801d736:	eef0 8a60 	vmov.f32	s17, s1
 801d73a:	4604      	mov	r4, r0
 801d73c:	f7fd ffce 	bl	801b6dc <__errno>
 801d740:	eeb0 0a48 	vmov.f32	s0, s16
 801d744:	eef0 0a68 	vmov.f32	s1, s17
 801d748:	ecbd 8b02 	vpop	{d8}
 801d74c:	6004      	str	r4, [r0, #0]
 801d74e:	bd10      	pop	{r4, pc}

0801d750 <xflow>:
 801d750:	4603      	mov	r3, r0
 801d752:	b507      	push	{r0, r1, r2, lr}
 801d754:	ec51 0b10 	vmov	r0, r1, d0
 801d758:	b183      	cbz	r3, 801d77c <xflow+0x2c>
 801d75a:	4602      	mov	r2, r0
 801d75c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d760:	e9cd 2300 	strd	r2, r3, [sp]
 801d764:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d768:	f7e2 ff7e 	bl	8000668 <__aeabi_dmul>
 801d76c:	ec41 0b10 	vmov	d0, r0, r1
 801d770:	2022      	movs	r0, #34	@ 0x22
 801d772:	b003      	add	sp, #12
 801d774:	f85d eb04 	ldr.w	lr, [sp], #4
 801d778:	f7ff bfd8 	b.w	801d72c <with_errno>
 801d77c:	4602      	mov	r2, r0
 801d77e:	460b      	mov	r3, r1
 801d780:	e7ee      	b.n	801d760 <xflow+0x10>
 801d782:	0000      	movs	r0, r0
 801d784:	0000      	movs	r0, r0
	...

0801d788 <__math_uflow>:
 801d788:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d790 <__math_uflow+0x8>
 801d78c:	f7ff bfe0 	b.w	801d750 <xflow>
 801d790:	00000000 	.word	0x00000000
 801d794:	10000000 	.word	0x10000000

0801d798 <__math_oflow>:
 801d798:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d7a0 <__math_oflow+0x8>
 801d79c:	f7ff bfd8 	b.w	801d750 <xflow>
 801d7a0:	00000000 	.word	0x00000000
 801d7a4:	70000000 	.word	0x70000000

0801d7a8 <_init>:
 801d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7aa:	bf00      	nop
 801d7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7ae:	bc08      	pop	{r3}
 801d7b0:	469e      	mov	lr, r3
 801d7b2:	4770      	bx	lr

0801d7b4 <_fini>:
 801d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7b6:	bf00      	nop
 801d7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7ba:	bc08      	pop	{r3}
 801d7bc:	469e      	mov	lr, r3
 801d7be:	4770      	bx	lr
