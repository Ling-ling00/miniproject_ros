
mpu6050_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c5d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a80  0801c7b8  0801c7b8  0001d7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e238  0801e238  00020a28  2**0
                  CONTENTS
  4 .ARM          00000008  0801e238  0801e238  0001f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e240  0801e240  00020a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801e240  0801e240  0001f240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e254  0801e254  0001f254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a28  20000000  0801e258  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b96c  20000a28  0801ec80  00020a28  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c394  0801ec80  00021394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e79  00000000  00000000  00020a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea0  00000000  00000000  000468d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e30  00000000  00000000  0004b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001771  00000000  00000000  0004d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c969  00000000  00000000  0004ed19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260ac  00000000  00000000  0007b682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116b6b  00000000  00000000  000a172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b8299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009370  00000000  00000000  001b8310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001c1680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a28 	.word	0x20000a28
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801c7a0 	.word	0x0801c7a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a2c 	.word	0x20000a2c
 800021c:	0801c7a0 	.word	0x0801c7a0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <init_matrix>:
 */

#include "KalmanSensorFusion.h"
#include <math.h>

void init_matrix(matrix_instance* mat, int rows, int cols, float* values) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
    mat->numRows = rows;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	641a      	str	r2, [r3, #64]	@ 0x40
    mat->numCols = cols;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rows; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e01e      	b.n	8001056 <init_matrix+0x5e>
        for (int j = 0; j < cols; j++) {
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e014      	b.n	8001048 <init_matrix+0x50>
            mat->data[i][j] = values[i * cols + j];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fb03 f202 	mul.w	r2, r3, r2
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	0098      	lsls	r0, r3, #2
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4403      	add	r3, r0
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < cols; j++) {
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbe6      	blt.n	800101e <init_matrix+0x26>
    for (int i = 0; i < rows; i++) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	429a      	cmp	r2, r3
 800105c:	dbdc      	blt.n	8001018 <init_matrix+0x20>
        }
    }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <matrix_add>:

void matrix_add(matrix_instance* a, matrix_instance* b, matrix_instance* result) {
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < a->numRows; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e02a      	b.n	80010d4 <matrix_add+0x68>
        for (int j = 0; j < a->numCols; j++) {
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	e01f      	b.n	80010c4 <matrix_add+0x58>
            result->data[i][j] = a->data[i][j] + b->data[i][j];
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	0099      	lsls	r1, r3, #2
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	440b      	add	r3, r1
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	0099      	lsls	r1, r3, #2
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	440b      	add	r3, r1
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	0099      	lsls	r1, r3, #2
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	440b      	add	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < a->numCols; j++) {
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	3301      	adds	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbda      	blt.n	8001084 <matrix_add+0x18>
    for (int i = 0; i < a->numRows; i++) {
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbcf      	blt.n	800107e <matrix_add+0x12>
        }
    }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <matrix_subtract>:

void matrix_subtract(matrix_instance* a, matrix_instance* b, matrix_instance* result) {
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < a->numRows; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e02a      	b.n	8001154 <matrix_subtract+0x68>
        for (int j = 0; j < a->numCols; j++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	e01f      	b.n	8001144 <matrix_subtract+0x58>
            result->data[i][j] = a->data[i][j] - b->data[i][j];
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	0099      	lsls	r1, r3, #2
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	440b      	add	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	ed93 7a00 	vldr	s14, [r3]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	0099      	lsls	r1, r3, #2
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	440b      	add	r3, r1
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	0099      	lsls	r1, r3, #2
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	440b      	add	r3, r1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < a->numCols; j++) {
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	429a      	cmp	r2, r3
 800114c:	dbda      	blt.n	8001104 <matrix_subtract+0x18>
    for (int i = 0; i < a->numRows; i++) {
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	429a      	cmp	r2, r3
 800115c:	dbcf      	blt.n	80010fe <matrix_subtract+0x12>
        }
    }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <matrix_multiply>:

void matrix_multiply(matrix_instance* a, matrix_instance* b, matrix_instance* result) {
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < a->numRows; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e04a      	b.n	8001214 <matrix_multiply+0xa8>
        for (int j = 0; j < b->numCols; j++) {
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	e03f      	b.n	8001204 <matrix_multiply+0x98>
            result->data[i][j] = 0; // Initialize to zero
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	0099      	lsls	r1, r3, #2
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	440b      	add	r3, r1
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < a->numCols; k++) {
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e02a      	b.n	80011f4 <matrix_multiply+0x88>
                result->data[i][j] += a->data[i][k] * b->data[k][j];
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	0099      	lsls	r1, r3, #2
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	440b      	add	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	ed93 7a00 	vldr	s14, [r3]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	0099      	lsls	r1, r3, #2
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	440b      	add	r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	edd3 6a00 	vldr	s13, [r3]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	0099      	lsls	r1, r3, #2
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	440b      	add	r3, r1
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	0099      	lsls	r1, r3, #2
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	440b      	add	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < a->numCols; k++) {
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbcf      	blt.n	800119e <matrix_multiply+0x32>
        for (int j = 0; j < b->numCols; j++) {
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3301      	adds	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	429a      	cmp	r2, r3
 800120c:	dbba      	blt.n	8001184 <matrix_multiply+0x18>
    for (int i = 0; i < a->numRows; i++) {
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbaf      	blt.n	800117e <matrix_multiply+0x12>
            }
        }
    }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3724      	adds	r7, #36	@ 0x24
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <matrix_transpose>:

void matrix_transpose(matrix_instance* mat, matrix_instance* result) {
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < mat->numRows; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e01d      	b.n	8001278 <matrix_transpose+0x4c>
        for (int j = 0; j < mat->numCols; j++) {
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	e012      	b.n	8001268 <matrix_transpose+0x3c>
            result->data[j][i] = mat->data[i][j];
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	0099      	lsls	r1, r3, #2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	440b      	add	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	0098      	lsls	r0, r3, #2
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4403      	add	r3, r0
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < mat->numCols; j++) {
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3301      	adds	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbe7      	blt.n	8001242 <matrix_transpose+0x16>
    for (int i = 0; i < mat->numRows; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbdc      	blt.n	800123c <matrix_transpose+0x10>
        }
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <matrix_inverse_2x2>:

void matrix_inverse_2x2(matrix_instance* mat, matrix_instance* inv) {
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    float det = mat->data[0][0] * mat->data[1][1] - mat->data[0][1] * mat->data[1][0];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	edc7 7a03 	vstr	s15, [r7, #12]
    if (det != 0) {
 80012c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d02b      	beq.n	8001328 <matrix_inverse_2x2+0x98>
        inv->data[0][0] = mat->data[1][1] / det;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 6a05 	vldr	s13, [r3, #20]
 80012d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]
        inv->data[0][1] = -mat->data[0][1] / det;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ea:	eef1 6a67 	vneg.f32	s13, s15
 80012ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	edc3 7a01 	vstr	s15, [r3, #4]
        inv->data[1][0] = -mat->data[1][0] / det;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001302:	eef1 6a67 	vneg.f32	s13, s15
 8001306:	ed97 7a03 	vldr	s14, [r7, #12]
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	edc3 7a04 	vstr	s15, [r3, #16]
        inv->data[1][1] = mat->data[0][0] / det;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edd3 6a00 	vldr	s13, [r3]
 800131a:	ed97 7a03 	vldr	s14, [r7, #12]
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	edc3 7a05 	vstr	s15, [r3, #20]
    }
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	0000      	movs	r0, r0
	...

08001338 <InitSensorFusion>:

void InitSensorFusion(SensorFusion* SF, double q[9], double r[9], float dt) {
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b0c8      	sub	sp, #288	@ 0x120
 800133c:	af00      	add	r7, sp, #0
 800133e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001342:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001346:	6018      	str	r0, [r3, #0]
 8001348:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800134c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001350:	6019      	str	r1, [r3, #0]
 8001352:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001356:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001360:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001364:	ed83 0a00 	vstr	s0, [r3]
    SF->Yp.numRows = 2;
 8001368:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800136c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2202      	movs	r2, #2
 8001374:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    SF->Yp.numCols = 1;
 8001378:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800137c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c

    SF->Xp.numRows = 4;
 8001388:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800138c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2204      	movs	r2, #4
 8001394:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
    SF->Xp.numCols = 1;
 8001398:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800139c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c

    SF->Xc.numRows = 4;
 80013a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2204      	movs	r2, #4
 80013b4:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
    SF->Xc.numCols = 1;
 80013b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

    SF->Pp.numRows = 4;
 80013c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2204      	movs	r2, #4
 80013d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
    SF->Pp.numCols = 4;
 80013d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2204      	movs	r2, #4
 80013e4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

    SF->Pc.numRows = 4;
 80013e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2204      	movs	r2, #4
 80013f4:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
    SF->Pc.numCols = 4;
 80013f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2204      	movs	r2, #4
 8001404:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

    SF->K.numRows = 4;
 8001408:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800140c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2204      	movs	r2, #4
 8001414:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
    SF->K.numCols = 2;
 8001418:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800141c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2202      	movs	r2, #2
 8001424:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4

    SF->e.numRows = 2;
 8001428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800142c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2202      	movs	r2, #2
 8001434:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
    SF->e.numCols = 1;
 8001438:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800143c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4

    float A[16] = {
 8001448:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800144c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        1, 0, -dt, 0,
 8001458:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800145c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	eef1 7a67 	vneg.f32	s15, s15
    float A[16] = {
 8001468:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800147c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001480:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        0, 1, 0, -dt,
 800148c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001490:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eef1 7a67 	vneg.f32	s15, s15
    float A[16] = {
 800149c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014b0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80014d8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        0, 0, 1, 0,
        0, 0, 0, 1
    };

    float B[8] = {
 80014e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80014fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001502:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        0, dt,
        0, 0,
        0, 0
    };

    float C[8] = {
 800152c:	4bdc      	ldr	r3, [pc, #880]	@ (80018a0 <InitSensorFusion+0x568>)
 800152e:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8001532:	461d      	mov	r5, r3
 8001534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001538:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800153c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        1, 0, 0, 0,
        0, 1, 0, 0
    };

    float I[16] = {
 8001540:	4bd8      	ldr	r3, [pc, #864]	@ (80018a4 <InitSensorFusion+0x56c>)
 8001542:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001546:	461d      	mov	r5, r3
 8001548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    };

    float Q[16] = {
 800155c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001560:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001564:	4ad0      	ldr	r2, [pc, #832]	@ (80018a8 <InitSensorFusion+0x570>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800156c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800157a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001588:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001596:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015a8:	4abf      	ldr	r2, [pc, #764]	@ (80018a8 <InitSensorFusion+0x570>)
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
 80015ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
 80015d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
        0.01, 0, 0, 0,
        0, 0.01, 0, 0,
        0, 0, q[0], q[1],
 80015e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fae7 	bl	8000bc8 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
    float Q[16] = {
 80015fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001600:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001604:	629a      	str	r2, [r3, #40]	@ 0x28
        0, 0, q[0], q[1],
 8001606:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800160a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3308      	adds	r3, #8
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fad5 	bl	8000bc8 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
    float Q[16] = {
 8001620:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001624:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001628:	62da      	str	r2, [r3, #44]	@ 0x2c
 800162a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800162e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
 8001638:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800163c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
        0, 0, q[3], q[4]
 8001646:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800164a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3318      	adds	r3, #24
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fab5 	bl	8000bc8 <__aeabi_d2f>
 800165e:	4602      	mov	r2, r0
    float Q[16] = {
 8001660:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001664:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38
        0, 0, q[3], q[4]
 800166a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800166e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3320      	adds	r3, #32
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff faa3 	bl	8000bc8 <__aeabi_d2f>
 8001682:	4602      	mov	r2, r0
    float Q[16] = {
 8001684:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001688:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800168c:	63da      	str	r2, [r3, #60]	@ 0x3c
    };

    float R[4] = {
        (pow(r[4], 2) + pow(r[8], 2)) / 2, 0,
 800168e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001692:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3320      	adds	r3, #32
 800169a:	ed93 7b00 	vldr	d7, [r3]
 800169e:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 8001898 <InitSensorFusion+0x560>
 80016a2:	eeb0 0a47 	vmov.f32	s0, s14
 80016a6:	eef0 0a67 	vmov.f32	s1, s15
 80016aa:	f019 fe8b 	bl	801b3c4 <pow>
 80016ae:	ec55 4b10 	vmov	r4, r5, d0
 80016b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3340      	adds	r3, #64	@ 0x40
 80016be:	ed93 7b00 	vldr	d7, [r3]
 80016c2:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001898 <InitSensorFusion+0x560>
 80016c6:	eeb0 0a47 	vmov.f32	s0, s14
 80016ca:	eef0 0a67 	vmov.f32	s1, s15
 80016ce:	f019 fe79 	bl	801b3c4 <pow>
 80016d2:	ec53 2b10 	vmov	r2, r3, d0
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7fe fe0f 	bl	80002fc <__adddf3>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016ee:	f7ff f8e5 	bl	80008bc <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa65 	bl	8000bc8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
    float R[4] = {
 8001700:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001704:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800170e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800171c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
        0, (pow(r[0], 2) + pow(r[4], 2) + pow(r[8], 2)) / 3
 8001726:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800172a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	ed93 7b00 	vldr	d7, [r3]
 8001734:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8001898 <InitSensorFusion+0x560>
 8001738:	eeb0 0a47 	vmov.f32	s0, s14
 800173c:	eef0 0a67 	vmov.f32	s1, s15
 8001740:	f019 fe40 	bl	801b3c4 <pow>
 8001744:	ec55 4b10 	vmov	r4, r5, d0
 8001748:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800174c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3320      	adds	r3, #32
 8001754:	ed93 7b00 	vldr	d7, [r3]
 8001758:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001898 <InitSensorFusion+0x560>
 800175c:	eeb0 0a47 	vmov.f32	s0, s14
 8001760:	eef0 0a67 	vmov.f32	s1, s15
 8001764:	f019 fe2e 	bl	801b3c4 <pow>
 8001768:	ec53 2b10 	vmov	r2, r3, d0
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7fe fdc4 	bl	80002fc <__adddf3>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4614      	mov	r4, r2
 800177a:	461d      	mov	r5, r3
 800177c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001780:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3340      	adds	r3, #64	@ 0x40
 8001788:	ed93 7b00 	vldr	d7, [r3]
 800178c:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8001898 <InitSensorFusion+0x560>
 8001790:	eeb0 0a47 	vmov.f32	s0, s14
 8001794:	eef0 0a67 	vmov.f32	s1, s15
 8001798:	f019 fe14 	bl	801b3c4 <pow>
 800179c:	ec53 2b10 	vmov	r2, r3, d0
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fdaa 	bl	80002fc <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <InitSensorFusion+0x574>)
 80017b6:	f7ff f881 	bl	80008bc <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff fa01 	bl	8000bc8 <__aeabi_d2f>
 80017c6:	4602      	mov	r2, r0
    float R[4] = {
 80017c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017d0:	60da      	str	r2, [r3, #12]
    };

    init_matrix(&SF->A, 4, 4, A);
 80017d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80017e0:	2204      	movs	r2, #4
 80017e2:	2104      	movs	r1, #4
 80017e4:	f7ff fc08 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->B, 4, 2, B);
 80017e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80017f6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80017fa:	2202      	movs	r2, #2
 80017fc:	2104      	movs	r1, #4
 80017fe:	f7ff fbfb 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->C, 2, 4, C);
 8001802:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001806:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8001810:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001814:	2204      	movs	r2, #4
 8001816:	2102      	movs	r1, #2
 8001818:	f7ff fbee 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->I, 4, 4, I);
 800181c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001820:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 800182a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800182e:	2204      	movs	r2, #4
 8001830:	2104      	movs	r1, #4
 8001832:	f7ff fbe1 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->Q, 4, 4, Q);
 8001836:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800183a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	2204      	movs	r2, #4
 800184a:	2104      	movs	r1, #4
 800184c:	f7ff fbd4 	bl	8000ff8 <init_matrix>
    init_matrix(&SF->R, 2, 2, R);
 8001850:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001854:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2202      	movs	r2, #2
 8001864:	2102      	movs	r1, #2
 8001866:	f7ff fbc7 	bl	8000ff8 <init_matrix>

	SF->temp4x1A.numRows = 4;
 800186a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800186e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2204      	movs	r2, #4
 8001876:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
	SF->temp4x1A.numCols = 1;
 800187a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800187e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	SF->temp4x1B.numRows = 4;
 800188a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800188e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2204      	movs	r2, #4
 8001896:	e00b      	b.n	80018b0 <InitSensorFusion+0x578>
 8001898:	00000000 	.word	0x00000000
 800189c:	40000000 	.word	0x40000000
 80018a0:	0801c7b8 	.word	0x0801c7b8
 80018a4:	0801c7d8 	.word	0x0801c7d8
 80018a8:	3c23d70a 	.word	0x3c23d70a
 80018ac:	40080000 	.word	0x40080000
 80018b0:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
	SF->temp4x1B.numCols = 1;
 80018b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

	SF->temp2x4.numRows = 2;
 80018c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478
	SF->temp2x4.numCols = 4;
 80018d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2204      	movs	r2, #4
 80018e0:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c

	SF->temp4x2A.numRows = 4;
 80018e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2204      	movs	r2, #4
 80018f0:	f8c3 24c0 	str.w	r2, [r3, #1216]	@ 0x4c0
	SF->temp4x2A.numCols = 2;
 80018f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
	SF->temp4x2B.numRows = 4;
 8001904:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001908:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2204      	movs	r2, #4
 8001910:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
	SF->temp4x2B.numCols = 2;
 8001914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001918:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2202      	movs	r2, #2
 8001920:	f8c3 250c 	str.w	r2, [r3, #1292]	@ 0x50c

	SF->temp2x2A.numRows = 2;
 8001924:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001928:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2202      	movs	r2, #2
 8001930:	f8c3 2550 	str.w	r2, [r3, #1360]	@ 0x550
	SF->temp2x2A.numCols = 2;
 8001934:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001938:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2202      	movs	r2, #2
 8001940:	f8c3 2554 	str.w	r2, [r3, #1364]	@ 0x554
	SF->temp2x2B.numRows = 2;
 8001944:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001948:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2202      	movs	r2, #2
 8001950:	f8c3 2598 	str.w	r2, [r3, #1432]	@ 0x598
	SF->temp2x2B.numCols = 2;
 8001954:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001958:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	f8c3 259c 	str.w	r2, [r3, #1436]	@ 0x59c
	SF->temp2x2C.numRows = 2;
 8001964:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001968:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2202      	movs	r2, #2
 8001970:	f8c3 25e0 	str.w	r2, [r3, #1504]	@ 0x5e0
	SF->temp2x2C.numCols = 2;
 8001974:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001978:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2202      	movs	r2, #2
 8001980:	f8c3 25e4 	str.w	r2, [r3, #1508]	@ 0x5e4

	SF->temp4x4A.numRows = 4;
 8001984:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001988:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2204      	movs	r2, #4
 8001990:	f8c3 2628 	str.w	r2, [r3, #1576]	@ 0x628
	SF->temp4x4A.numCols = 4;
 8001994:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001998:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	f8c3 262c 	str.w	r2, [r3, #1580]	@ 0x62c
	SF->temp4x4B.numRows = 4;
 80019a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	f8c3 2670 	str.w	r2, [r3, #1648]	@ 0x670
	SF->temp4x4B.numCols = 4;
 80019b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	f8c3 2674 	str.w	r2, [r3, #1652]	@ 0x674
	SF->temp4x4C.numRows = 4;
 80019c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2204      	movs	r2, #4
 80019d0:	f8c3 26b8 	str.w	r2, [r3, #1720]	@ 0x6b8
	SF->temp4x4C.numCols = 4;
 80019d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2204      	movs	r2, #4
 80019e0:	f8c3 26bc 	str.w	r2, [r3, #1724]	@ 0x6bc
}
 80019e4:	bf00      	nop
 80019e6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop

080019f0 <sensor_fusion>:

void sensor_fusion(SensorFusion* SF, matrix_instance* u, matrix_instance* y) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]

    // Calculate Kalman gain
    matrix_transpose(&SF->C, &SF->temp4x2A);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f7ff fc0e 	bl	800122c <matrix_transpose>
    matrix_multiply(&SF->C, &SF->Pp, &SF->temp2x4);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f503 7122 	add.w	r1, r3, #648	@ 0x288
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 8001a22:	461a      	mov	r2, r3
 8001a24:	f7ff fba2 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->temp2x4, &SF->temp4x2A, &SF->temp2x2A);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f503 6087 	add.w	r0, r3, #1080	@ 0x438
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7ff fb96 	bl	800116c <matrix_multiply>
    matrix_add(&SF->temp2x2A, &SF->R, &SF->temp2x2B);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8001a52:	461a      	mov	r2, r3
 8001a54:	f7ff fb0a 	bl	800106c <matrix_add>
    matrix_inverse_2x2(&SF->temp2x2B, &SF->temp2x2C);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f503 62ab 	add.w	r2, r3, #1368	@ 0x558
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7ff fc12 	bl	8001290 <matrix_inverse_2x2>
    matrix_multiply(&SF->Pp, &SF->temp4x2A, &SF->temp4x2B);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f503 7022 	add.w	r0, r3, #648	@ 0x288
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f7ff fb74 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->temp4x2B, &SF->temp2x2C, &SF->K);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f503 6099 	add.w	r0, r3, #1224	@ 0x4c8
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f503 61b4 	add.w	r1, r3, #1440	@ 0x5a0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fb68 	bl	800116c <matrix_multiply>

    // Predict the measurement
    matrix_multiply(&SF->C, &SF->Xp, &SF->Yp);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f503 71fc 	add.w	r1, r3, #504	@ 0x1f8
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f7ff fb5c 	bl	800116c <matrix_multiply>

    // Calculate error
    matrix_subtract(y, &SF->Yp, &SF->e);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f503 7146 	add.w	r1, r3, #792	@ 0x318
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fb12 	bl	80010ec <matrix_subtract>

    // Corrected state
    matrix_multiply(&SF->K, &SF->e, &SF->temp4x1A);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7ff fb46 	bl	800116c <matrix_multiply>
    matrix_add(&SF->Xp, &SF->temp4x1A, &SF->Xc);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f503 70fc 	add.w	r0, r3, #504	@ 0x1f8
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f503 716a 	add.w	r1, r3, #936	@ 0x3a8
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001af2:	461a      	mov	r2, r3
 8001af4:	f7ff faba 	bl	800106c <matrix_add>

    // Update covariance P
    matrix_multiply(&SF->K, &SF->C, &SF->temp4x4A);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f503 63bd 	add.w	r3, r3, #1512	@ 0x5e8
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f7ff fb2e 	bl	800116c <matrix_multiply>
    matrix_subtract(&SF->I, &SF->temp4x4A, &SF->temp4x4B);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f503 61bd 	add.w	r1, r3, #1512	@ 0x5e8
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8001b22:	461a      	mov	r2, r3
 8001b24:	f7ff fae2 	bl	80010ec <matrix_subtract>
    matrix_multiply(&SF->temp4x4B, &SF->Pp, &SF->Pc);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f503 60c6 	add.w	r0, r3, #1584	@ 0x630
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f503 7122 	add.w	r1, r3, #648	@ 0x288
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f7ff fb16 	bl	800116c <matrix_multiply>

    // Prediction step
    matrix_multiply(&SF->A, &SF->Xc, &SF->temp4x1A);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f503 7110 	add.w	r1, r3, #576	@ 0x240
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f7ff fb0c 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->B, u, &SF->temp4x1B);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8001b60:	461a      	mov	r2, r3
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	f7ff fb02 	bl	800116c <matrix_multiply>
    matrix_add(&SF->temp4x1A, &SF->temp4x1B, &SF->Xp);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f503 717c 	add.w	r1, r3, #1008	@ 0x3f0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff fa76 	bl	800106c <matrix_add>

    // Update covariance Pp
    matrix_transpose(&SF->A, &SF->temp4x4A);
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f503 63bd 	add.w	r3, r3, #1512	@ 0x5e8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f7ff fb4e 	bl	800122c <matrix_transpose>
    matrix_multiply(&SF->A, &SF->Pc, &SF->temp4x4B);
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f7ff fae4 	bl	800116c <matrix_multiply>
    matrix_multiply(&SF->temp4x4B, &SF->temp4x4A, &SF->temp4x4C);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f503 60c6 	add.w	r0, r3, #1584	@ 0x630
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f503 61bd 	add.w	r1, r3, #1512	@ 0x5e8
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff fad8 	bl	800116c <matrix_multiply>
    matrix_add(&SF->temp4x4C, &SF->Q, &SF->Pp);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f503 60cf 	add.w	r0, r3, #1656	@ 0x678
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff fa4c 	bl	800106c <matrix_add>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be0:	f001 fce7 	bl	80035b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be4:	f000 f828 	bl	8001c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be8:	f000 f94e 	bl	8001e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bec:	f000 f91a 	bl	8001e24 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001bf0:	f000 f8ce 	bl	8001d90 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001bf4:	f000 f86e 	bl	8001cd4 <MX_I2C1_Init>
  MX_IWDG_Init();
 8001bf8:	f000 f8ac 	bl	8001d54 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001bfc:	bf00      	nop
 8001bfe:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <main+0x4c>)
 8001c00:	f006 fc4c 	bl	800849c <MPU6050_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d0f9      	beq.n	8001bfe <main+0x22>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c0a:	f007 f827 	bl	8008c5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c0e:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <main+0x50>)
 8001c10:	2100      	movs	r1, #0
 8001c12:	4807      	ldr	r0, [pc, #28]	@ (8001c30 <main+0x54>)
 8001c14:	f007 f86c 	bl	8008cf0 <osThreadNew>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <main+0x58>)
 8001c1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c1e:	f007 f841 	bl	8008ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c22:	bf00      	nop
 8001c24:	e7fd      	b.n	8001c22 <main+0x46>
 8001c26:	bf00      	nop
 8001c28:	20000a44 	.word	0x20000a44
 8001c2c:	0801c918 	.word	0x0801c918
 8001c30:	08002401 	.word	0x08002401
 8001c34:	20000bfc 	.word	0x20000bfc

08001c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b094      	sub	sp, #80	@ 0x50
 8001c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	2238      	movs	r2, #56	@ 0x38
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fcb0 	bl	801a5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f003 fa8c 	bl	8005178 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c60:	230a      	movs	r3, #10
 8001c62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c6a:	2340      	movs	r3, #64	@ 0x40
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c72:	2302      	movs	r3, #2
 8001c74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c76:	2302      	movs	r3, #2
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c7e:	2355      	movs	r3, #85	@ 0x55
 8001c80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c86:	2302      	movs	r3, #2
 8001c88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8e:	f107 0318 	add.w	r3, r7, #24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fb24 	bl	80052e0 <HAL_RCC_OscConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c9e:	f000 fd01 	bl	80026a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fe22 	bl	8005904 <HAL_RCC_ClockConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001cc6:	f000 fced 	bl	80026a4 <Error_Handler>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3750      	adds	r7, #80	@ 0x50
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cda:	4a1c      	ldr	r2, [pc, #112]	@ (8001d4c <MX_I2C1_Init+0x78>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d50 <MX_I2C1_Init+0x7c>)
 8001ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d0e:	480e      	ldr	r0, [pc, #56]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d10:	f002 fb75 	bl	80043fe <HAL_I2C_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d1a:	f000 fcc3 	bl	80026a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d22:	f003 f933 	bl	8004f8c <HAL_I2CEx_ConfigAnalogFilter>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d2c:	f000 fcba 	bl	80026a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d30:	2100      	movs	r1, #0
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <MX_I2C1_Init+0x74>)
 8001d34:	f003 f975 	bl	8005022 <HAL_I2CEx_ConfigDigitalFilter>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 fcb1 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000a44 	.word	0x20000a44
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	40621236 	.word	0x40621236

08001d54 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <MX_IWDG_Init+0x38>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d66:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001d6a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d6e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001d72:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <MX_IWDG_Init+0x34>)
 8001d76:	f003 f9a0 	bl	80050ba <HAL_IWDG_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001d80:	f000 fc90 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000a98 	.word	0x20000a98
 8001d8c:	40003000 	.word	0x40003000

08001d90 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001d96:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <MX_LPUART1_UART_Init+0x8c>)
 8001d98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <MX_LPUART1_UART_Init+0x90>)
 8001d9e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001db4:	220c      	movs	r2, #12
 8001db6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db8:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001dd0:	4811      	ldr	r0, [pc, #68]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001dd2:	f004 fd7f 	bl	80068d4 <HAL_UART_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001ddc:	f000 fc62 	bl	80026a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de0:	2100      	movs	r1, #0
 8001de2:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001de4:	f006 fa8f 	bl	8008306 <HAL_UARTEx_SetTxFifoThreshold>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001dee:	f000 fc59 	bl	80026a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001df6:	f006 fac4 	bl	8008382 <HAL_UARTEx_SetRxFifoThreshold>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001e00:	f000 fc50 	bl	80026a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <MX_LPUART1_UART_Init+0x88>)
 8001e06:	f006 fa45 	bl	8008294 <HAL_UARTEx_DisableFifoMode>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001e10:	f000 fc48 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000aa8 	.word	0x20000aa8
 8001e1c:	40008000 	.word	0x40008000
 8001e20:	001e8480 	.word	0x001e8480

08001e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e2e:	4a15      	ldr	r2, [pc, #84]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e46:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <MX_DMA_Init+0x60>)
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2105      	movs	r1, #5
 8001e5e:	200b      	movs	r0, #11
 8001e60:	f001 fc96 	bl	8003790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e64:	200b      	movs	r0, #11
 8001e66:	f001 fcad 	bl	80037c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	200c      	movs	r0, #12
 8001e70:	f001 fc8e 	bl	8003790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e74:	200c      	movs	r0, #12
 8001e76:	f001 fca5 	bl	80037c4 <HAL_NVIC_EnableIRQ>

}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000

08001e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	@ 0x28
 8001e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb6:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ebc:	f043 0320 	orr.w	r3, r3, #32
 8001ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec2:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	4a22      	ldr	r2, [pc, #136]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <MX_GPIO_Init+0xd4>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2120      	movs	r1, #32
 8001f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f06:	f002 fa25 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480f      	ldr	r0, [pc, #60]	@ (8001f60 <MX_GPIO_Init+0xd8>)
 8001f22:	f001 ff9b 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f26:	2320      	movs	r3, #32
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f40:	f001 ff8c 	bl	8003e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2105      	movs	r1, #5
 8001f48:	2028      	movs	r0, #40	@ 0x28
 8001f4a:	f001 fc21 	bl	8003790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f4e:	2028      	movs	r0, #40	@ 0x28
 8001f50:	f001 fc38 	bl	80037c4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f54:	bf00      	nop
 8001f56:	3728      	adds	r7, #40	@ 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000800 	.word	0x48000800
 8001f64:	00000000 	.word	0x00000000

08001f68 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_IWDG_Refresh(&hiwdg);
 8001f76:	48b6      	ldr	r0, [pc, #728]	@ (8002250 <timer_callback+0x2e8>)
 8001f78:	f003 f8ee 	bl	8005158 <HAL_IWDG_Refresh>
	if (timer != NULL) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8152 	beq.w	8002228 <timer_callback+0x2c0>
		static float temp = 0;
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001f84:	49b3      	ldr	r1, [pc, #716]	@ (8002254 <timer_callback+0x2ec>)
 8001f86:	48b4      	ldr	r0, [pc, #720]	@ (8002258 <timer_callback+0x2f0>)
 8001f88:	f006 fae2 	bl	8008550 <MPU6050_Read_All>

		mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis()/1000;
 8001f8c:	f00d fb14 	bl	800f5b8 <rmw_uros_epoch_millis>
 8001f90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	f7fe fe66 	bl	8000c68 <__aeabi_ldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4bae      	ldr	r3, [pc, #696]	@ (800225c <timer_callback+0x2f4>)
 8001fa2:	601a      	str	r2, [r3, #0]
		mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8001fa4:	f00d fb16 	bl	800f5d4 <rmw_uros_epoch_nanos>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4bab      	ldr	r3, [pc, #684]	@ (800225c <timer_callback+0x2f4>)
 8001fae:	605a      	str	r2, [r3, #4]

		mpu6050_msg.linear_acceleration.x = (G2M_S2 * MPU6050.Ax) - accel_offset.x;
 8001fb0:	4ba8      	ldr	r3, [pc, #672]	@ (8002254 <timer_callback+0x2ec>)
 8001fb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001fb6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8002238 <timer_callback+0x2d0>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb54 	bl	8000668 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4ba5      	ldr	r3, [pc, #660]	@ (8002260 <timer_callback+0x2f8>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe f993 	bl	80002f8 <__aeabi_dsub>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	49a1      	ldr	r1, [pc, #644]	@ (800225c <timer_callback+0x2f4>)
 8001fd8:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
		mpu6050_msg.linear_acceleration.y = (G2M_S2 * MPU6050.Ay) - accel_offset.y;
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	@ (8002254 <timer_callback+0x2ec>)
 8001fde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001fe2:	a395      	add	r3, pc, #596	@ (adr r3, 8002238 <timer_callback+0x2d0>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb3e 	bl	8000668 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b9a      	ldr	r3, [pc, #616]	@ (8002260 <timer_callback+0x2f8>)
 8001ff6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ffa:	f7fe f97d 	bl	80002f8 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4996      	ldr	r1, [pc, #600]	@ (800225c <timer_callback+0x2f4>)
 8002004:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
		mpu6050_msg.linear_acceleration.z = (G2M_S2 * MPU6050.Az) - accel_offset.z;
 8002008:	4b92      	ldr	r3, [pc, #584]	@ (8002254 <timer_callback+0x2ec>)
 800200a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800200e:	a38a      	add	r3, pc, #552	@ (adr r3, 8002238 <timer_callback+0x2d0>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fb28 	bl	8000668 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	4b8f      	ldr	r3, [pc, #572]	@ (8002260 <timer_callback+0x2f8>)
 8002022:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002026:	f7fe f967 	bl	80002f8 <__aeabi_dsub>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	498b      	ldr	r1, [pc, #556]	@ (800225c <timer_callback+0x2f4>)
 8002030:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
		mpu6050_msg.angular_velocity.x = (DEG2RAD * MPU6050.Gx) - gyro_offset.x;
 8002034:	4b87      	ldr	r3, [pc, #540]	@ (8002254 <timer_callback+0x2ec>)
 8002036:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800203a:	a381      	add	r3, pc, #516	@ (adr r3, 8002240 <timer_callback+0x2d8>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fb12 	bl	8000668 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	4b85      	ldr	r3, [pc, #532]	@ (8002264 <timer_callback+0x2fc>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe f951 	bl	80002f8 <__aeabi_dsub>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4980      	ldr	r1, [pc, #512]	@ (800225c <timer_callback+0x2f4>)
 800205c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		mpu6050_msg.angular_velocity.y = (DEG2RAD * MPU6050.Gy) - gyro_offset.y;
 8002060:	4b7c      	ldr	r3, [pc, #496]	@ (8002254 <timer_callback+0x2ec>)
 8002062:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002066:	a376      	add	r3, pc, #472	@ (adr r3, 8002240 <timer_callback+0x2d8>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fafc 	bl	8000668 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	4b7a      	ldr	r3, [pc, #488]	@ (8002264 <timer_callback+0x2fc>)
 800207a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800207e:	f7fe f93b 	bl	80002f8 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4975      	ldr	r1, [pc, #468]	@ (800225c <timer_callback+0x2f4>)
 8002088:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		mpu6050_msg.angular_velocity.z = (DEG2RAD * MPU6050.Gz) - gyro_offset.z;
 800208c:	4b71      	ldr	r3, [pc, #452]	@ (8002254 <timer_callback+0x2ec>)
 800208e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002092:	a36b      	add	r3, pc, #428	@ (adr r3, 8002240 <timer_callback+0x2d8>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe fae6 	bl	8000668 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002264 <timer_callback+0x2fc>)
 80020a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020aa:	f7fe f925 	bl	80002f8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	496a      	ldr	r1, [pc, #424]	@ (800225c <timer_callback+0x2f4>)
 80020b4:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

		RCSOFTCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 80020b8:	2200      	movs	r2, #0
 80020ba:	4968      	ldr	r1, [pc, #416]	@ (800225c <timer_callback+0x2f4>)
 80020bc:	486a      	ldr	r0, [pc, #424]	@ (8002268 <timer_callback+0x300>)
 80020be:	f00b fb13 	bl	800d6e8 <rcl_publish>

		U[0] = mpu6050_msg.angular_velocity.x;
 80020c2:	4b66      	ldr	r3, [pc, #408]	@ (800225c <timer_callback+0x2f4>)
 80020c4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fd7c 	bl	8000bc8 <__aeabi_d2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a66      	ldr	r2, [pc, #408]	@ (800226c <timer_callback+0x304>)
 80020d4:	6013      	str	r3, [r2, #0]
		U[1] = mpu6050_msg.angular_velocity.y;
 80020d6:	4b61      	ldr	r3, [pc, #388]	@ (800225c <timer_callback+0x2f4>)
 80020d8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fd72 	bl	8000bc8 <__aeabi_d2f>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4a61      	ldr	r2, [pc, #388]	@ (800226c <timer_callback+0x304>)
 80020e8:	6053      	str	r3, [r2, #4]
		Y[0] = atan2(mpu6050_msg.linear_acceleration.y, mpu6050_msg.linear_acceleration.z);
 80020ea:	4b5c      	ldr	r3, [pc, #368]	@ (800225c <timer_callback+0x2f4>)
 80020ec:	ed93 7b3a 	vldr	d7, [r3, #232]	@ 0xe8
 80020f0:	4b5a      	ldr	r3, [pc, #360]	@ (800225c <timer_callback+0x2f4>)
 80020f2:	ed93 6b3c 	vldr	d6, [r3, #240]	@ 0xf0
 80020f6:	eeb0 1a46 	vmov.f32	s2, s12
 80020fa:	eef0 1a66 	vmov.f32	s3, s13
 80020fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002102:	eef0 0a67 	vmov.f32	s1, s15
 8002106:	f019 f95b 	bl	801b3c0 <atan2>
 800210a:	ec53 2b10 	vmov	r2, r3, d0
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd59 	bl	8000bc8 <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
 8002118:	4a55      	ldr	r2, [pc, #340]	@ (8002270 <timer_callback+0x308>)
 800211a:	6013      	str	r3, [r2, #0]
		temp = sqrt(pow(mpu6050_msg.linear_acceleration.y, 2)+pow(mpu6050_msg.linear_acceleration.z, 2));
 800211c:	4b4f      	ldr	r3, [pc, #316]	@ (800225c <timer_callback+0x2f4>)
 800211e:	ed93 7b3a 	vldr	d7, [r3, #232]	@ 0xe8
 8002122:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8002248 <timer_callback+0x2e0>
 8002126:	eeb0 0a47 	vmov.f32	s0, s14
 800212a:	eef0 0a67 	vmov.f32	s1, s15
 800212e:	f019 f949 	bl	801b3c4 <pow>
 8002132:	ec59 8b10 	vmov	r8, r9, d0
 8002136:	4b49      	ldr	r3, [pc, #292]	@ (800225c <timer_callback+0x2f4>)
 8002138:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800213c:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8002248 <timer_callback+0x2e0>
 8002140:	eeb0 0a47 	vmov.f32	s0, s14
 8002144:	eef0 0a67 	vmov.f32	s1, s15
 8002148:	f019 f93c 	bl	801b3c4 <pow>
 800214c:	ec53 2b10 	vmov	r2, r3, d0
 8002150:	4640      	mov	r0, r8
 8002152:	4649      	mov	r1, r9
 8002154:	f7fe f8d2 	bl	80002fc <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	ec43 2b17 	vmov	d7, r2, r3
 8002160:	eeb0 0a47 	vmov.f32	s0, s14
 8002164:	eef0 0a67 	vmov.f32	s1, s15
 8002168:	f019 f99c 	bl	801b4a4 <sqrt>
 800216c:	ec53 2b10 	vmov	r2, r3, d0
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fd28 	bl	8000bc8 <__aeabi_d2f>
 8002178:	4603      	mov	r3, r0
 800217a:	4a3e      	ldr	r2, [pc, #248]	@ (8002274 <timer_callback+0x30c>)
 800217c:	6013      	str	r3, [r2, #0]
		Y[1] = atan2(-mpu6050_msg.linear_acceleration.x, temp);
 800217e:	4b37      	ldr	r3, [pc, #220]	@ (800225c <timer_callback+0x2f4>)
 8002180:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002184:	4614      	mov	r4, r2
 8002186:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800218a:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <timer_callback+0x30c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fa12 	bl	80005b8 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	ec43 2b11 	vmov	d1, r2, r3
 800219c:	ec45 4b10 	vmov	d0, r4, r5
 80021a0:	f019 f90e 	bl	801b3c0 <atan2>
 80021a4:	ec53 2b10 	vmov	r2, r3, d0
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fd0c 	bl	8000bc8 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002270 <timer_callback+0x308>)
 80021b4:	6053      	str	r3, [r2, #4]
		init_matrix(&u, 2, 1, U);
 80021b6:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <timer_callback+0x304>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	2102      	movs	r1, #2
 80021bc:	482e      	ldr	r0, [pc, #184]	@ (8002278 <timer_callback+0x310>)
 80021be:	f7fe ff1b 	bl	8000ff8 <init_matrix>
		init_matrix(&y, 2, 1, Y);
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <timer_callback+0x308>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	2102      	movs	r1, #2
 80021c8:	482c      	ldr	r0, [pc, #176]	@ (800227c <timer_callback+0x314>)
 80021ca:	f7fe ff15 	bl	8000ff8 <init_matrix>
		sensor_fusion(&imu, &u, &y);
 80021ce:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <timer_callback+0x314>)
 80021d0:	4929      	ldr	r1, [pc, #164]	@ (8002278 <timer_callback+0x310>)
 80021d2:	482b      	ldr	r0, [pc, #172]	@ (8002280 <timer_callback+0x318>)
 80021d4:	f7ff fc0c 	bl	80019f0 <sensor_fusion>
		angle[0] = imu.Xc.data[0][0];
 80021d8:	4b29      	ldr	r3, [pc, #164]	@ (8002280 <timer_callback+0x318>)
 80021da:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
 80021de:	4a29      	ldr	r2, [pc, #164]	@ (8002284 <timer_callback+0x31c>)
 80021e0:	6013      	str	r3, [r2, #0]
		angle[1] = imu.Xc.data[1][0];
 80021e2:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <timer_callback+0x318>)
 80021e4:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
 80021e8:	4a26      	ldr	r2, [pc, #152]	@ (8002284 <timer_callback+0x31c>)
 80021ea:	6053      	str	r3, [r2, #4]

		cmdvel_msg.linear.x = angle[1];
 80021ec:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <timer_callback+0x31c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9e1 	bl	80005b8 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4923      	ldr	r1, [pc, #140]	@ (8002288 <timer_callback+0x320>)
 80021fc:	e9c1 2300 	strd	r2, r3, [r1]
		cmdvel_msg.angular.z = -angle[0];
 8002200:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <timer_callback+0x31c>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	eef1 7a67 	vneg.f32	s15, s15
 800220a:	ee17 3a90 	vmov	r3, s15
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f9d2 	bl	80005b8 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	491b      	ldr	r1, [pc, #108]	@ (8002288 <timer_callback+0x320>)
 800221a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

		RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &cmdvel_msg, NULL));
 800221e:	2200      	movs	r2, #0
 8002220:	4919      	ldr	r1, [pc, #100]	@ (8002288 <timer_callback+0x320>)
 8002222:	481a      	ldr	r0, [pc, #104]	@ (800228c <timer_callback+0x324>)
 8002224:	f00b fa60 	bl	800d6e8 <rcl_publish>
	}
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002232:	bf00      	nop
 8002234:	f3af 8000 	nop.w
 8002238:	51eb851f 	.word	0x51eb851f
 800223c:	40239eb8 	.word	0x40239eb8
 8002240:	a2529d39 	.word	0xa2529d39
 8002244:	3f91df46 	.word	0x3f91df46
 8002248:	00000000 	.word	0x00000000
 800224c:	40000000 	.word	0x40000000
 8002250:	20000a98 	.word	0x20000a98
 8002254:	20003d98 	.word	0x20003d98
 8002258:	20000a44 	.word	0x20000a44
 800225c:	20003c20 	.word	0x20003c20
 8002260:	20003f50 	.word	0x20003f50
 8002264:	20003f68 	.word	0x20003f68
 8002268:	20003c1c 	.word	0x20003c1c
 800226c:	200046d4 	.word	0x200046d4
 8002270:	200046dc 	.word	0x200046dc
 8002274:	200046ec 	.word	0x200046ec
 8002278:	20004644 	.word	0x20004644
 800227c:	2000468c 	.word	0x2000468c
 8002280:	20003f84 	.word	0x20003f84
 8002284:	200046e4 	.word	0x200046e4
 8002288:	20003d68 	.word	0x20003d68
 800228c:	20003d60 	.word	0x20003d60

08002290 <service_callback>:

void service_callback(const void * request_msg, void * response_msg)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	  imu_interfaces__srv__ImuCalibration_Request * req_in = (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	613b      	str	r3, [r7, #16]
	  imu_interfaces__srv__ImuCalibration_Response * res_in = (imu_interfaces__srv__ImuCalibration_Response *) response_msg;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	60fb      	str	r3, [r7, #12]

	  for(int i = 0; i < 9; i++){
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e01e      	b.n	80022e6 <service_callback+0x56>
		  mpu6050_msg.linear_acceleration_covariance[i] = req_in->imu_calib.linear_acceleration_covariance[i];
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	331f      	adds	r3, #31
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	482c      	ldr	r0, [pc, #176]	@ (8002368 <service_callback+0xd8>)
 80022b8:	6979      	ldr	r1, [r7, #20]
 80022ba:	311f      	adds	r1, #31
 80022bc:	00c9      	lsls	r1, r1, #3
 80022be:	4401      	add	r1, r0
 80022c0:	e9c1 2300 	strd	r2, r3, [r1]
		  mpu6050_msg.angular_velocity_covariance[i] = req_in->imu_calib.angular_velocity_covariance[i];
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3313      	adds	r3, #19
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	4825      	ldr	r0, [pc, #148]	@ (8002368 <service_callback+0xd8>)
 80022d4:	6979      	ldr	r1, [r7, #20]
 80022d6:	3113      	adds	r1, #19
 80022d8:	00c9      	lsls	r1, r1, #3
 80022da:	4401      	add	r1, r0
 80022dc:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int i = 0; i < 9; i++){
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	dddd      	ble.n	80022a8 <service_callback+0x18>
	  }

	  accel_offset.x = req_in->imu_calib.linear_acceleration.x;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80022f2:	491e      	ldr	r1, [pc, #120]	@ (800236c <service_callback+0xdc>)
 80022f4:	e9c1 2300 	strd	r2, r3, [r1]
	  accel_offset.y = req_in->imu_calib.linear_acceleration.y;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80022fe:	491b      	ldr	r1, [pc, #108]	@ (800236c <service_callback+0xdc>)
 8002300:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  accel_offset.z = req_in->imu_calib.linear_acceleration.z;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800230a:	4918      	ldr	r1, [pc, #96]	@ (800236c <service_callback+0xdc>)
 800230c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002316:	4916      	ldr	r1, [pc, #88]	@ (8002370 <service_callback+0xe0>)
 8002318:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002322:	4913      	ldr	r1, [pc, #76]	@ (8002370 <service_callback+0xe0>)
 8002324:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800232e:	4910      	ldr	r1, [pc, #64]	@ (8002370 <service_callback+0xe0>)
 8002330:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  is_calib = true;
 8002334:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <service_callback+0xe4>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
	  InitSensorFusion(&imu, mpu6050_msg.angular_velocity_covariance, mpu6050_msg.linear_acceleration_covariance, dt);
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <service_callback+0xe8>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <service_callback+0xec>)
 8002346:	490e      	ldr	r1, [pc, #56]	@ (8002380 <service_callback+0xf0>)
 8002348:	480e      	ldr	r0, [pc, #56]	@ (8002384 <service_callback+0xf4>)
 800234a:	f7fe fff5 	bl	8001338 <InitSensorFusion>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800234e:	2120      	movs	r1, #32
 8002350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002354:	f002 f816 	bl	8004384 <HAL_GPIO_TogglePin>
	  res_in->success = true;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20003c20 	.word	0x20003c20
 800236c:	20003f50 	.word	0x20003f50
 8002370:	20003f68 	.word	0x20003f68
 8002374:	20003f80 	.word	0x20003f80
 8002378:	20000000 	.word	0x20000000
 800237c:	20003d18 	.word	0x20003d18
 8002380:	20003cb8 	.word	0x20003cb8
 8002384:	20003f84 	.word	0x20003f84

08002388 <imu_service_callback>:

void imu_service_callback(const void * request_msg, void * response_msg)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	  std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]
	  std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	60bb      	str	r3, [r7, #8]

	  if (req_in->data){
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01c      	beq.n	80023dc <imu_service_callback+0x54>
		  if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_NONE){
 80023a2:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <imu_service_callback+0x68>)
 80023a4:	f002 fb24 	bl	80049f0 <HAL_I2C_GetError>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <imu_service_callback+0x34>
			  res_in->success = true;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
			  res_in->message.data = "Imu is connected";
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4a0f      	ldr	r2, [pc, #60]	@ (80023f4 <imu_service_callback+0x6c>)
 80023b8:	605a      	str	r2, [r3, #4]
	  }
	  else {
		  res_in->success = false;
		  res_in->message.data = "Request is False";
	  }
}
 80023ba:	e015      	b.n	80023e8 <imu_service_callback+0x60>
			  res_in->success = false;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
			  res_in->message.data = "Imu is not connect";
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	@ (80023f8 <imu_service_callback+0x70>)
 80023c6:	605a      	str	r2, [r3, #4]
			  HAL_I2C_DeInit(&hi2c1);
 80023c8:	4809      	ldr	r0, [pc, #36]	@ (80023f0 <imu_service_callback+0x68>)
 80023ca:	f002 f8b3 	bl	8004534 <HAL_I2C_DeInit>
			  HAL_I2C_Init(&hi2c1);
 80023ce:	4808      	ldr	r0, [pc, #32]	@ (80023f0 <imu_service_callback+0x68>)
 80023d0:	f002 f815 	bl	80043fe <HAL_I2C_Init>
			  MPU6050_Init(&hi2c1);
 80023d4:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <imu_service_callback+0x68>)
 80023d6:	f006 f861 	bl	800849c <MPU6050_Init>
}
 80023da:	e005      	b.n	80023e8 <imu_service_callback+0x60>
		  res_in->success = false;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
		  res_in->message.data = "Request is False";
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4a05      	ldr	r2, [pc, #20]	@ (80023fc <imu_service_callback+0x74>)
 80023e6:	605a      	str	r2, [r3, #4]
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000a44 	.word	0x20000a44
 80023f4:	0801c824 	.word	0x0801c824
 80023f8:	0801c838 	.word	0x0801c838
 80023fc:	0801c84c 	.word	0x0801c84c

08002400 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b0b2      	sub	sp, #200	@ 0xc8
 8002404:	af02      	add	r7, sp, #8
 8002406:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

	// micro-ROS configuration

	  rmw_uros_set_custom_transport(
 800240a:	4b73      	ldr	r3, [pc, #460]	@ (80025d8 <StartDefaultTask+0x1d8>)
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <StartDefaultTask+0x1dc>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <StartDefaultTask+0x1e0>)
 8002414:	4a73      	ldr	r2, [pc, #460]	@ (80025e4 <StartDefaultTask+0x1e4>)
 8002416:	4974      	ldr	r1, [pc, #464]	@ (80025e8 <StartDefaultTask+0x1e8>)
 8002418:	2001      	movs	r0, #1
 800241a:	f00c f9f1 	bl	800e800 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800241e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002422:	4618      	mov	r0, r3
 8002424:	f00c f908 	bl	800e638 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8002428:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <StartDefaultTask+0x1ec>)
 800242a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800242e:	4b70      	ldr	r3, [pc, #448]	@ (80025f0 <StartDefaultTask+0x1f0>)
 8002430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8002434:	4b6f      	ldr	r3, [pc, #444]	@ (80025f4 <StartDefaultTask+0x1f4>)
 8002436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800243a:	4b6f      	ldr	r3, [pc, #444]	@ (80025f8 <StartDefaultTask+0x1f8>)
 800243c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002440:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002444:	4618      	mov	r0, r3
 8002446:	f00c f905 	bl	800e654 <rcutils_set_default_allocator>
 800244a:	4603      	mov	r3, r0
 800244c:	f083 0301 	eor.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <StartDefaultTask+0x60>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8002456:	f240 2146 	movw	r1, #582	@ 0x246
 800245a:	4868      	ldr	r0, [pc, #416]	@ (80025fc <StartDefaultTask+0x1fc>)
 800245c:	f017 ff26 	bl	801a2ac <iprintf>
	  }

	  GPIO_PinState button = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002464:	4866      	ldr	r0, [pc, #408]	@ (8002600 <StartDefaultTask+0x200>)
 8002466:	f001 ff5d 	bl	8004324 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
	  uint8_t executor_num = 2;
 8002470:	2302      	movs	r3, #2
 8002472:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

	  // micro-ROS app

	  // Initialize micro-ROS allocator
	  allocator = rcl_get_default_allocator();
 8002476:	4c63      	ldr	r4, [pc, #396]	@ (8002604 <StartDefaultTask+0x204>)
 8002478:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800247c:	4618      	mov	r0, r3
 800247e:	f00c f907 	bl	800e690 <rcutils_get_default_allocator>
 8002482:	4625      	mov	r5, r4
 8002484:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8002488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	602b      	str	r3, [r5, #0]

	  //create init_options
	  // Initialize and modify options (Set DOMAIN ID to 1)
	  init_options = rcl_get_zero_initialized_init_options();
 8002490:	f00a ff5a 	bl	800d348 <rcl_get_zero_initialized_init_options>
 8002494:	4603      	mov	r3, r0
 8002496:	4a5c      	ldr	r2, [pc, #368]	@ (8002608 <StartDefaultTask+0x208>)
 8002498:	6013      	str	r3, [r2, #0]
	  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800249a:	4b5a      	ldr	r3, [pc, #360]	@ (8002604 <StartDefaultTask+0x204>)
 800249c:	466c      	mov	r4, sp
 800249e:	f103 020c 	add.w	r2, r3, #12
 80024a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80024aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ac:	4856      	ldr	r0, [pc, #344]	@ (8002608 <StartDefaultTask+0x208>)
 80024ae:	f00a ff4d 	bl	800d34c <rcl_init_options_init>
	  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 1));
 80024b2:	2101      	movs	r1, #1
 80024b4:	4854      	ldr	r0, [pc, #336]	@ (8002608 <StartDefaultTask+0x208>)
 80024b6:	f00b f845 	bl	800d544 <rcl_init_options_set_domain_id>
	  // Initialize rclc support object with custom options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80024ba:	4b52      	ldr	r3, [pc, #328]	@ (8002604 <StartDefaultTask+0x204>)
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4b52      	ldr	r3, [pc, #328]	@ (8002608 <StartDefaultTask+0x208>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	4851      	ldr	r0, [pc, #324]	@ (800260c <StartDefaultTask+0x20c>)
 80024c6:	f00b ffa7 	bl	800e418 <rclc_support_init_with_options>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80024ca:	4b50      	ldr	r3, [pc, #320]	@ (800260c <StartDefaultTask+0x20c>)
 80024cc:	4a50      	ldr	r2, [pc, #320]	@ (8002610 <StartDefaultTask+0x210>)
 80024ce:	4951      	ldr	r1, [pc, #324]	@ (8002614 <StartDefaultTask+0x214>)
 80024d0:	4851      	ldr	r0, [pc, #324]	@ (8002618 <StartDefaultTask+0x218>)
 80024d2:	f00b ffd5 	bl	800e480 <rclc_node_init_default>

	  //time sync
	  rmw_uros_sync_session(1000);
 80024d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024da:	f00d f889 	bl	800f5f0 <rmw_uros_sync_session>

	  //create timer
	  rclc_timer_init_default(&mpu6050_timer, &support, RCL_MS_TO_NS(10), timer_callback);
 80024de:	4b4f      	ldr	r3, [pc, #316]	@ (800261c <StartDefaultTask+0x21c>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002620 <StartDefaultTask+0x220>)
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	4948      	ldr	r1, [pc, #288]	@ (800260c <StartDefaultTask+0x20c>)
 80024ea:	484e      	ldr	r0, [pc, #312]	@ (8002624 <StartDefaultTask+0x224>)
 80024ec:	f00c f86c 	bl	800e5c8 <rclc_timer_init_default>

	  //create publisher
	  rclc_publisher_init_default(
 80024f0:	f00d fd04 	bl	800fefc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002628 <StartDefaultTask+0x228>)
 80024f8:	4947      	ldr	r1, [pc, #284]	@ (8002618 <StartDefaultTask+0x218>)
 80024fa:	484c      	ldr	r0, [pc, #304]	@ (800262c <StartDefaultTask+0x22c>)
 80024fc:	f00b fffc 	bl	800e4f8 <rclc_publisher_init_default>
			  &mpu6050_publisher,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "mpu6050_publisher"
	  );
	  rclc_publisher_init_default(
 8002500:	f009 f952 	bl	800b7a8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002504:	4602      	mov	r2, r0
 8002506:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <StartDefaultTask+0x230>)
 8002508:	4943      	ldr	r1, [pc, #268]	@ (8002618 <StartDefaultTask+0x218>)
 800250a:	484a      	ldr	r0, [pc, #296]	@ (8002634 <StartDefaultTask+0x234>)
 800250c:	f00b fff4 	bl	800e4f8 <rclc_publisher_init_default>
			  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			  "cmd_vel"
	  );

	  //create service
	  if(button == GPIO_PIN_RESET){
 8002510:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10d      	bne.n	8002534 <StartDefaultTask+0x134>
		  rclc_service_init_default(
 8002518:	f009 fa82 	bl	800ba20 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 800251c:	4602      	mov	r2, r0
 800251e:	4b46      	ldr	r3, [pc, #280]	@ (8002638 <StartDefaultTask+0x238>)
 8002520:	493d      	ldr	r1, [pc, #244]	@ (8002618 <StartDefaultTask+0x218>)
 8002522:	4846      	ldr	r0, [pc, #280]	@ (800263c <StartDefaultTask+0x23c>)
 8002524:	f00c f81c 	bl	800e560 <rclc_service_init_default>
				  &mpu6050_service,
				  &node,
				  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration),
				  "mpu6050_calibration"
		  );
		  executor_num++;
 8002528:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800252c:	3301      	adds	r3, #1
 800252e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002532:	e00c      	b.n	800254e <StartDefaultTask+0x14e>
	  }
	  else {
		  is_calib = true;
 8002534:	4b42      	ldr	r3, [pc, #264]	@ (8002640 <StartDefaultTask+0x240>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
		  InitSensorFusion(&imu, mpu6050_msg.angular_velocity_covariance, mpu6050_msg.linear_acceleration_covariance, dt);
 800253a:	4b42      	ldr	r3, [pc, #264]	@ (8002644 <StartDefaultTask+0x244>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb0 0a67 	vmov.f32	s0, s15
 8002544:	4a40      	ldr	r2, [pc, #256]	@ (8002648 <StartDefaultTask+0x248>)
 8002546:	4941      	ldr	r1, [pc, #260]	@ (800264c <StartDefaultTask+0x24c>)
 8002548:	4841      	ldr	r0, [pc, #260]	@ (8002650 <StartDefaultTask+0x250>)
 800254a:	f7fe fef5 	bl	8001338 <InitSensorFusion>
	  }

	  rclc_service_init_default(
 800254e:	f00d fefb 	bl	8010348 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 8002552:	4602      	mov	r2, r0
 8002554:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <StartDefaultTask+0x254>)
 8002556:	4930      	ldr	r1, [pc, #192]	@ (8002618 <StartDefaultTask+0x218>)
 8002558:	483f      	ldr	r0, [pc, #252]	@ (8002658 <StartDefaultTask+0x258>)
 800255a:	f00c f801 	bl	800e560 <rclc_service_init_default>
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool),
			  "imu/status"
	  );

	  //create executer
	  executor = rclc_executor_get_zero_initialized_executor();
 800255e:	4c3f      	ldr	r4, [pc, #252]	@ (800265c <StartDefaultTask+0x25c>)
 8002560:	463b      	mov	r3, r7
 8002562:	4618      	mov	r0, r3
 8002564:	f00b fc4e 	bl	800de04 <rclc_executor_get_zero_initialized_executor>
 8002568:	4620      	mov	r0, r4
 800256a:	463b      	mov	r3, r7
 800256c:	2288      	movs	r2, #136	@ 0x88
 800256e:	4619      	mov	r1, r3
 8002570:	f018 f8e5 	bl	801a73e <memcpy>
	  rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8002574:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8002578:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <StartDefaultTask+0x204>)
 800257a:	4924      	ldr	r1, [pc, #144]	@ (800260c <StartDefaultTask+0x20c>)
 800257c:	4837      	ldr	r0, [pc, #220]	@ (800265c <StartDefaultTask+0x25c>)
 800257e:	f00b fc4b 	bl	800de18 <rclc_executor_init>
	  rclc_executor_add_timer(&executor, &mpu6050_timer);
 8002582:	4928      	ldr	r1, [pc, #160]	@ (8002624 <StartDefaultTask+0x224>)
 8002584:	4835      	ldr	r0, [pc, #212]	@ (800265c <StartDefaultTask+0x25c>)
 8002586:	f00b fcb7 	bl	800def8 <rclc_executor_add_timer>
	  if(button == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &mpu6050_service, &mpu6050_request, &mpu6050_response, service_callback);
 800258a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <StartDefaultTask+0x1a2>
 8002592:	4b33      	ldr	r3, [pc, #204]	@ (8002660 <StartDefaultTask+0x260>)
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <StartDefaultTask+0x264>)
 8002598:	4a33      	ldr	r2, [pc, #204]	@ (8002668 <StartDefaultTask+0x268>)
 800259a:	4928      	ldr	r1, [pc, #160]	@ (800263c <StartDefaultTask+0x23c>)
 800259c:	482f      	ldr	r0, [pc, #188]	@ (800265c <StartDefaultTask+0x25c>)
 800259e:	f00b fcd5 	bl	800df4c <rclc_executor_add_service>
	  rclc_executor_add_service(&executor, &imustatus_service, &imustatus_request, &imustatus_response, imu_service_callback);
 80025a2:	4b32      	ldr	r3, [pc, #200]	@ (800266c <StartDefaultTask+0x26c>)
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4b32      	ldr	r3, [pc, #200]	@ (8002670 <StartDefaultTask+0x270>)
 80025a8:	4a32      	ldr	r2, [pc, #200]	@ (8002674 <StartDefaultTask+0x274>)
 80025aa:	492b      	ldr	r1, [pc, #172]	@ (8002658 <StartDefaultTask+0x258>)
 80025ac:	482b      	ldr	r0, [pc, #172]	@ (800265c <StartDefaultTask+0x25c>)
 80025ae:	f00b fccd 	bl	800df4c <rclc_executor_add_service>
	  rclc_executor_spin(&executor);
 80025b2:	482a      	ldr	r0, [pc, #168]	@ (800265c <StartDefaultTask+0x25c>)
 80025b4:	f00b fef0 	bl	800e398 <rclc_executor_spin>

	  //create message
	  mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 80025b8:	4c2f      	ldr	r4, [pc, #188]	@ (8002678 <StartDefaultTask+0x278>)
 80025ba:	463b      	mov	r3, r7
 80025bc:	492f      	ldr	r1, [pc, #188]	@ (800267c <StartDefaultTask+0x27c>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f009 fb1e 	bl	800bc00 <micro_ros_string_utilities_init>
 80025c4:	f104 0308 	add.w	r3, r4, #8
 80025c8:	463a      	mov	r2, r7
 80025ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80025cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	  for(;;)
	  {
		osDelay(10);
 80025d0:	200a      	movs	r0, #10
 80025d2:	f006 fc1f 	bl	8008e14 <osDelay>
 80025d6:	e7fb      	b.n	80025d0 <StartDefaultTask+0x1d0>
 80025d8:	080034b9 	.word	0x080034b9
 80025dc:	08003455 	.word	0x08003455
 80025e0:	08003435 	.word	0x08003435
 80025e4:	08003409 	.word	0x08003409
 80025e8:	20000aa8 	.word	0x20000aa8
 80025ec:	0800313d 	.word	0x0800313d
 80025f0:	08003181 	.word	0x08003181
 80025f4:	080031b9 	.word	0x080031b9
 80025f8:	08003225 	.word	0x08003225
 80025fc:	0801c860 	.word	0x0801c860
 8002600:	48000800 	.word	0x48000800
 8002604:	20003b70 	.word	0x20003b70
 8002608:	20003b8c 	.word	0x20003b8c
 800260c:	20003b3c 	.word	0x20003b3c
 8002610:	0801c888 	.word	0x0801c888
 8002614:	0801c88c 	.word	0x0801c88c
 8002618:	20003b84 	.word	0x20003b84
 800261c:	08001f69 	.word	0x08001f69
 8002620:	00989680 	.word	0x00989680
 8002624:	20003c18 	.word	0x20003c18
 8002628:	0801c898 	.word	0x0801c898
 800262c:	20003c1c 	.word	0x20003c1c
 8002630:	0801c8ac 	.word	0x0801c8ac
 8002634:	20003d60 	.word	0x20003d60
 8002638:	0801c8b4 	.word	0x0801c8b4
 800263c:	20003df0 	.word	0x20003df0
 8002640:	20003f80 	.word	0x20003f80
 8002644:	20000000 	.word	0x20000000
 8002648:	20003d18 	.word	0x20003d18
 800264c:	20003cb8 	.word	0x20003cb8
 8002650:	20003f84 	.word	0x20003f84
 8002654:	0801c8c8 	.word	0x0801c8c8
 8002658:	20003f38 	.word	0x20003f38
 800265c:	20003b90 	.word	0x20003b90
 8002660:	08002291 	.word	0x08002291
 8002664:	20003df4 	.word	0x20003df4
 8002668:	20003df8 	.word	0x20003df8
 800266c:	08002389 	.word	0x08002389
 8002670:	20003f3c 	.word	0x20003f3c
 8002674:	20003f40 	.word	0x20003f40
 8002678:	20003c20 	.word	0x20003c20
 800267c:	0801c8d4 	.word	0x0801c8d4

08002680 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002692:	f000 ffa7 	bl	80035e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40012c00 	.word	0x40012c00

080026a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a8:	b672      	cpsid	i
}
 80026aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <Error_Handler+0x8>

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_MspInit+0x50>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ba:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_MspInit+0x50>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80026c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <HAL_MspInit+0x50>)
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <HAL_MspInit+0x50>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002700 <HAL_MspInit+0x50>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_MspInit+0x50>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	210f      	movs	r1, #15
 80026ea:	f06f 0001 	mvn.w	r0, #1
 80026ee:	f001 f84f 	bl	8003790 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80026f2:	f002 fde5 	bl	80052c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b09e      	sub	sp, #120	@ 0x78
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	2254      	movs	r2, #84	@ 0x54
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f017 ff41 	bl	801a5ac <memset>
  if(hi2c->Instance==I2C1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1f      	ldr	r2, [pc, #124]	@ (80027ac <HAL_I2C_MspInit+0xa8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d136      	bne.n	80027a2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002734:	2340      	movs	r3, #64	@ 0x40
 8002736:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fb2d 	bl	8005da0 <HAL_RCCEx_PeriphCLKConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800274c:	f7ff ffaa 	bl	80026a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002750:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <HAL_I2C_MspInit+0xac>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <HAL_I2C_MspInit+0xac>)
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <HAL_I2C_MspInit+0xac>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002768:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800276c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276e:	2312      	movs	r3, #18
 8002770:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800277a:	2304      	movs	r3, #4
 800277c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002782:	4619      	mov	r1, r3
 8002784:	480b      	ldr	r0, [pc, #44]	@ (80027b4 <HAL_I2C_MspInit+0xb0>)
 8002786:	f001 fb69 	bl	8003e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_I2C_MspInit+0xac>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <HAL_I2C_MspInit+0xac>)
 8002790:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002794:	6593      	str	r3, [r2, #88]	@ 0x58
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_I2C_MspInit+0xac>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027a2:	bf00      	nop
 80027a4:	3778      	adds	r7, #120	@ 0x78
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40005400 	.word	0x40005400
 80027b0:	40021000 	.word	0x40021000
 80027b4:	48000400 	.word	0x48000400

080027b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0b      	ldr	r2, [pc, #44]	@ (80027f4 <HAL_I2C_MspDeInit+0x3c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10f      	bne.n	80027ea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_I2C_MspDeInit+0x40>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <HAL_I2C_MspDeInit+0x40>)
 80027d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027d4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80027d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027da:	4808      	ldr	r0, [pc, #32]	@ (80027fc <HAL_I2C_MspDeInit+0x44>)
 80027dc:	f001 fcc0 	bl	8004160 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80027e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027e4:	4805      	ldr	r0, [pc, #20]	@ (80027fc <HAL_I2C_MspDeInit+0x44>)
 80027e6:	f001 fcbb 	bl	8004160 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40005400 	.word	0x40005400
 80027f8:	40021000 	.word	0x40021000
 80027fc:	48000400 	.word	0x48000400

08002800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b09e      	sub	sp, #120	@ 0x78
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	2254      	movs	r2, #84	@ 0x54
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f017 fec3 	bl	801a5ac <memset>
  if(huart->Instance==LPUART1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a4e      	ldr	r2, [pc, #312]	@ (8002964 <HAL_UART_MspInit+0x164>)
 800282c:	4293      	cmp	r3, r2
 800282e:	f040 8094 	bne.w	800295a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002832:	2320      	movs	r3, #32
 8002834:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f003 faae 	bl	8005da0 <HAL_RCCEx_PeriphCLKConfig>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800284a:	f7ff ff2b 	bl	80026a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800284e:	4b46      	ldr	r3, [pc, #280]	@ (8002968 <HAL_UART_MspInit+0x168>)
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	4a45      	ldr	r2, [pc, #276]	@ (8002968 <HAL_UART_MspInit+0x168>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800285a:	4b43      	ldr	r3, [pc, #268]	@ (8002968 <HAL_UART_MspInit+0x168>)
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	4b40      	ldr	r3, [pc, #256]	@ (8002968 <HAL_UART_MspInit+0x168>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	4a3f      	ldr	r2, [pc, #252]	@ (8002968 <HAL_UART_MspInit+0x168>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002872:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <HAL_UART_MspInit+0x168>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800287e:	230c      	movs	r3, #12
 8002880:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800288e:	230c      	movs	r3, #12
 8002890:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002896:	4619      	mov	r1, r3
 8002898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289c:	f001 fade 	bl	8003e5c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80028a0:	4b32      	ldr	r3, [pc, #200]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028a2:	4a33      	ldr	r2, [pc, #204]	@ (8002970 <HAL_UART_MspInit+0x170>)
 80028a4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80028a6:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028a8:	2222      	movs	r2, #34	@ 0x22
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ac:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b2:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028be:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c4:	4b29      	ldr	r3, [pc, #164]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80028ca:	4b28      	ldr	r3, [pc, #160]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028cc:	2220      	movs	r2, #32
 80028ce:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028d2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80028d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80028d8:	4824      	ldr	r0, [pc, #144]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028da:	f000 ff81 	bl	80037e0 <HAL_DMA_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80028e4:	f7ff fede 	bl	80026a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a20      	ldr	r2, [pc, #128]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80028f0:	4a1e      	ldr	r2, [pc, #120]	@ (800296c <HAL_UART_MspInit+0x16c>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80028f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002974 <HAL_UART_MspInit+0x174>)
 80028f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <HAL_UART_MspInit+0x178>)
 80028fa:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <HAL_UART_MspInit+0x174>)
 80028fe:	2223      	movs	r2, #35	@ 0x23
 8002900:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002902:	4b1c      	ldr	r3, [pc, #112]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002904:	2210      	movs	r2, #16
 8002906:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002908:	4b1a      	ldr	r3, [pc, #104]	@ (8002974 <HAL_UART_MspInit+0x174>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800290e:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002914:	4b17      	ldr	r3, [pc, #92]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800291a:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <HAL_UART_MspInit+0x174>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002920:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002926:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002928:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800292c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800292e:	4811      	ldr	r0, [pc, #68]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002930:	f000 ff56 	bl	80037e0 <HAL_DMA_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800293a:	f7ff feb3 	bl	80026a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a0c      	ldr	r2, [pc, #48]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002942:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002944:	4a0b      	ldr	r2, [pc, #44]	@ (8002974 <HAL_UART_MspInit+0x174>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2105      	movs	r1, #5
 800294e:	205b      	movs	r0, #91	@ 0x5b
 8002950:	f000 ff1e 	bl	8003790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002954:	205b      	movs	r0, #91	@ 0x5b
 8002956:	f000 ff35 	bl	80037c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800295a:	bf00      	nop
 800295c:	3778      	adds	r7, #120	@ 0x78
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40008000 	.word	0x40008000
 8002968:	40021000 	.word	0x40021000
 800296c:	20000b3c 	.word	0x20000b3c
 8002970:	40020008 	.word	0x40020008
 8002974:	20000b9c 	.word	0x20000b9c
 8002978:	4002001c 	.word	0x4002001c

0800297c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	@ 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800298c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a40 <HAL_InitTick+0xc4>)
 800298e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002990:	4a2b      	ldr	r2, [pc, #172]	@ (8002a40 <HAL_InitTick+0xc4>)
 8002992:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002996:	6613      	str	r3, [r2, #96]	@ 0x60
 8002998:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <HAL_InitTick+0xc4>)
 800299a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a4:	f107 020c 	add.w	r2, r7, #12
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 f97e 	bl	8005cb0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80029b4:	f003 f966 	bl	8005c84 <HAL_RCC_GetPCLK2Freq>
 80029b8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	4a21      	ldr	r2, [pc, #132]	@ (8002a44 <HAL_InitTick+0xc8>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	3b01      	subs	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <HAL_InitTick+0xcc>)
 80029ca:	4a20      	ldr	r2, [pc, #128]	@ (8002a4c <HAL_InitTick+0xd0>)
 80029cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <HAL_InitTick+0xcc>)
 80029d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a48 <HAL_InitTick+0xcc>)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <HAL_InitTick+0xcc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_InitTick+0xcc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80029e8:	4817      	ldr	r0, [pc, #92]	@ (8002a48 <HAL_InitTick+0xcc>)
 80029ea:	f003 fc27 	bl	800623c <HAL_TIM_Base_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80029f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11b      	bne.n	8002a34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80029fc:	4812      	ldr	r0, [pc, #72]	@ (8002a48 <HAL_InitTick+0xcc>)
 80029fe:	f003 fc7f 	bl	8006300 <HAL_TIM_Base_Start_IT>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002a08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a10:	2019      	movs	r0, #25
 8002a12:	f000 fed7 	bl	80037c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b0f      	cmp	r3, #15
 8002a1a:	d808      	bhi.n	8002a2e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	2019      	movs	r0, #25
 8002a22:	f000 feb5 	bl	8003790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_InitTick+0xd4>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	e002      	b.n	8002a34 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	@ 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	431bde83 	.word	0x431bde83
 8002a48:	200046f0 	.word	0x200046f0
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	2000000c 	.word	0x2000000c

08002a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <NMI_Handler+0x4>

08002a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <HardFault_Handler+0x4>

08002a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <MemManage_Handler+0x4>

08002a6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <BusFault_Handler+0x4>

08002a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <UsageFault_Handler+0x4>

08002a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002a90:	4802      	ldr	r0, [pc, #8]	@ (8002a9c <DMA1_Channel1_IRQHandler+0x10>)
 8002a92:	f001 f888 	bl	8003ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000b3c 	.word	0x20000b3c

08002aa0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002aa4:	4802      	ldr	r0, [pc, #8]	@ (8002ab0 <DMA1_Channel2_IRQHandler+0x10>)
 8002aa6:	f001 f87e 	bl	8003ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000b9c 	.word	0x20000b9c

08002ab4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ab8:	4802      	ldr	r0, [pc, #8]	@ (8002ac4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002aba:	f003 fc99 	bl	80063f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200046f0 	.word	0x200046f0

08002ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002acc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ad0:	f001 fc72 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002adc:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <LPUART1_IRQHandler+0x10>)
 8002ade:	f004 f8ab 	bl	8006c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000aa8 	.word	0x20000aa8

08002aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return 1;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_kill>:

int _kill(int pid, int sig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b06:	f017 fde5 	bl	801a6d4 <__errno>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2216      	movs	r2, #22
 8002b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_exit>:

void _exit (int status)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe7 	bl	8002afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b2e:	bf00      	nop
 8002b30:	e7fd      	b.n	8002b2e <_exit+0x12>

08002b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e00a      	b.n	8002b5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b44:	f3af 8000 	nop.w
 8002b48:	4601      	mov	r1, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	b2ca      	uxtb	r2, r1
 8002b52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	dbf0      	blt.n	8002b44 <_read+0x12>
  }

  return len;
 8002b62:	687b      	ldr	r3, [r7, #4]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e009      	b.n	8002b92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbf1      	blt.n	8002b7e <_write+0x12>
  }
  return len;
 8002b9a:	687b      	ldr	r3, [r7, #4]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_close>:

int _close(int file)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bcc:	605a      	str	r2, [r3, #4]
  return 0;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_isatty>:

int _isatty(int file)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <_sbrk+0x5c>)
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <_sbrk+0x60>)
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c20:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c28:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <_sbrk+0x64>)
 8002c2a:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <_sbrk+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c3c:	f017 fd4a 	bl	801a6d4 <__errno>
 8002c40:	4603      	mov	r3, r0
 8002c42:	220c      	movs	r2, #12
 8002c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c4a:	e009      	b.n	8002c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <_sbrk+0x64>)
 8002c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20020000 	.word	0x20020000
 8002c6c:	00000400 	.word	0x00000400
 8002c70:	20004740 	.word	0x20004740
 8002c74:	2000c398 	.word	0x2000c398

08002c78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <SystemInit+0x20>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <SystemInit+0x20>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ca8:	f007 f8f6 	bl	8009e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002cac:	4b5a      	ldr	r3, [pc, #360]	@ (8002e18 <pvPortMallocMicroROS+0x17c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002cb4:	f000 f986 	bl	8002fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cb8:	4b58      	ldr	r3, [pc, #352]	@ (8002e1c <pvPortMallocMicroROS+0x180>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 8090 	bne.w	8002de6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01e      	beq.n	8002d0a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002ccc:	2208      	movs	r2, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f023 0307 	bic.w	r3, r3, #7
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06a      	beq.n	8002de6 <pvPortMallocMicroROS+0x14a>
 8002d10:	4b43      	ldr	r3, [pc, #268]	@ (8002e20 <pvPortMallocMicroROS+0x184>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d865      	bhi.n	8002de6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002d1a:	4b42      	ldr	r3, [pc, #264]	@ (8002e24 <pvPortMallocMicroROS+0x188>)
 8002d1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002d1e:	4b41      	ldr	r3, [pc, #260]	@ (8002e24 <pvPortMallocMicroROS+0x188>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d24:	e004      	b.n	8002d30 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d903      	bls.n	8002d42 <pvPortMallocMicroROS+0xa6>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f1      	bne.n	8002d26 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d42:	4b35      	ldr	r3, [pc, #212]	@ (8002e18 <pvPortMallocMicroROS+0x17c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d04c      	beq.n	8002de6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	4413      	add	r3, r2
 8002d54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1ad2      	subs	r2, r2, r3
 8002d66:	2308      	movs	r3, #8
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d920      	bls.n	8002db0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	613b      	str	r3, [r7, #16]
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	1ad2      	subs	r2, r2, r3
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002daa:	69b8      	ldr	r0, [r7, #24]
 8002dac:	f000 f96c 	bl	8003088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <pvPortMallocMicroROS+0x184>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	4a19      	ldr	r2, [pc, #100]	@ (8002e20 <pvPortMallocMicroROS+0x184>)
 8002dbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dbe:	4b18      	ldr	r3, [pc, #96]	@ (8002e20 <pvPortMallocMicroROS+0x184>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <pvPortMallocMicroROS+0x18c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d203      	bcs.n	8002dd2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <pvPortMallocMicroROS+0x184>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a16      	ldr	r2, [pc, #88]	@ (8002e28 <pvPortMallocMicroROS+0x18c>)
 8002dd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <pvPortMallocMicroROS+0x180>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002de6:	f007 f865 	bl	8009eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3728      	adds	r7, #40	@ 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000534c 	.word	0x2000534c
 8002e1c:	20005358 	.word	0x20005358
 8002e20:	20005350 	.word	0x20005350
 8002e24:	20005344 	.word	0x20005344
 8002e28:	20005354 	.word	0x20005354

08002e2c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04a      	beq.n	8002ed4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e3e:	2308      	movs	r3, #8
 8002e40:	425b      	negs	r3, r3
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4413      	add	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4b22      	ldr	r3, [pc, #136]	@ (8002edc <vPortFreeMicroROS+0xb0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <vPortFreeMicroROS+0x46>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	60fb      	str	r3, [r7, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <vPortFreeMicroROS+0x66>
	__asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	60bb      	str	r3, [r7, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	e7fd      	b.n	8002e8e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <vPortFreeMicroROS+0xb0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d019      	beq.n	8002ed4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d115      	bne.n	8002ed4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <vPortFreeMicroROS+0xb0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002eb8:	f006 ffee 	bl	8009e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <vPortFreeMicroROS+0xb4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4a06      	ldr	r2, [pc, #24]	@ (8002ee0 <vPortFreeMicroROS+0xb4>)
 8002ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002eca:	6938      	ldr	r0, [r7, #16]
 8002ecc:	f000 f8dc 	bl	8003088 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ed0:	f006 fff0 	bl	8009eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20005358 	.word	0x20005358
 8002ee0:	20005350 	.word	0x20005350

08002ee4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	425b      	negs	r3, r3
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <getBlockSize+0x38>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

	return count;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20005358 	.word	0x20005358

08002f20 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002f2a:	f006 ffb5 	bl	8009e98 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002f2e:	6838      	ldr	r0, [r7, #0]
 8002f30:	f7ff feb4 	bl	8002c9c <pvPortMallocMicroROS>
 8002f34:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d017      	beq.n	8002f6c <pvPortReallocMicroROS+0x4c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d014      	beq.n	8002f6c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ffce 	bl	8002ee4 <getBlockSize>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d201      	bcs.n	8002f5c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	68b8      	ldr	r0, [r7, #8]
 8002f62:	f017 fbec 	bl	801a73e <memcpy>

		vPortFreeMicroROS(pv);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff60 	bl	8002e2c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002f6c:	f006 ffa2 	bl	8009eb4 <xTaskResumeAll>

	return newmem;
 8002f70:	68bb      	ldr	r3, [r7, #8]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002f84:	f006 ff88 	bl	8009e98 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff fe82 	bl	8002c9c <pvPortMallocMicroROS>
 8002f98:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002f9e:	e004      	b.n	8002faa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	613a      	str	r2, [r7, #16]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1e5a      	subs	r2, r3, #1
 8002fae:	617a      	str	r2, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f5      	bne.n	8002fa0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002fb4:	f006 ff7e 	bl	8009eb4 <xTaskResumeAll>
  	return mem;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fd0:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <prvHeapInit+0xac>)
 8002fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3307      	adds	r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0307 	bic.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <prvHeapInit+0xac>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <prvHeapInit+0xb0>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003002:	4b1c      	ldr	r3, [pc, #112]	@ (8003074 <prvHeapInit+0xb0>)
 8003004:	2200      	movs	r2, #0
 8003006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4413      	add	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003010:	2208      	movs	r2, #8
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <prvHeapInit+0xb4>)
 8003024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003026:	4b14      	ldr	r3, [pc, #80]	@ (8003078 <prvHeapInit+0xb4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800302e:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <prvHeapInit+0xb4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	1ad2      	subs	r2, r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <prvHeapInit+0xb4>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <prvHeapInit+0xb8>)
 8003052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <prvHeapInit+0xbc>)
 800305a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800305c:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <prvHeapInit+0xc0>)
 800305e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	20004744 	.word	0x20004744
 8003074:	20005344 	.word	0x20005344
 8003078:	2000534c 	.word	0x2000534c
 800307c:	20005354 	.word	0x20005354
 8003080:	20005350 	.word	0x20005350
 8003084:	20005358 	.word	0x20005358

08003088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003090:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <prvInsertBlockIntoFreeList+0xac>)
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e002      	b.n	800309c <prvInsertBlockIntoFreeList+0x14>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d8f7      	bhi.n	8003096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	4413      	add	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d108      	bne.n	80030ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	441a      	add	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d118      	bne.n	8003110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <prvInsertBlockIntoFreeList+0xb0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d00d      	beq.n	8003106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e008      	b.n	8003118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <prvInsertBlockIntoFreeList+0xb0>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e003      	b.n	8003118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d002      	beq.n	8003126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20005344 	.word	0x20005344
 8003138:	2000534c 	.word	0x2000534c

0800313c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003146:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <microros_allocate+0x3c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <microros_allocate+0x3c>)
 8003154:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <microros_allocate+0x40>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <microros_allocate+0x40>)
 8003164:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fd98 	bl	8002c9c <pvPortMallocMicroROS>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2000535c 	.word	0x2000535c
 800317c:	20005360 	.word	0x20005360

08003180 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fea7 	bl	8002ee4 <getBlockSize>
 8003196:	4603      	mov	r3, r0
 8003198:	4a06      	ldr	r2, [pc, #24]	@ (80031b4 <microros_deallocate+0x34>)
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <microros_deallocate+0x34>)
 80031a2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fe41 	bl	8002e2c <vPortFreeMicroROS>
  }
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20005360 	.word	0x20005360

080031b8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80031c4:	4b15      	ldr	r3, [pc, #84]	@ (800321c <microros_reallocate+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4413      	add	r3, r2
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b12      	ldr	r3, [pc, #72]	@ (800321c <microros_reallocate+0x64>)
 80031d2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031d4:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <microros_reallocate+0x68>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4413      	add	r3, r2
 80031de:	461a      	mov	r2, r3
 80031e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <microros_reallocate+0x68>)
 80031e2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f7ff fd56 	bl	8002c9c <pvPortMallocMicroROS>
 80031f0:	4603      	mov	r3, r0
 80031f2:	e00e      	b.n	8003212 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff fe75 	bl	8002ee4 <getBlockSize>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4a08      	ldr	r2, [pc, #32]	@ (8003220 <microros_reallocate+0x68>)
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	461a      	mov	r2, r3
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <microros_reallocate+0x68>)
 8003206:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fe88 	bl	8002f20 <pvPortReallocMicroROS>
 8003210:	4603      	mov	r3, r0
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2000535c 	.word	0x2000535c
 8003220:	20005360 	.word	0x20005360

08003224 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	4a0c      	ldr	r2, [pc, #48]	@ (800326c <microros_zero_allocate+0x48>)
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	4413      	add	r3, r2
 800323e:	461a      	mov	r2, r3
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <microros_zero_allocate+0x48>)
 8003242:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <microros_zero_allocate+0x4c>)
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	4413      	add	r3, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <microros_zero_allocate+0x4c>)
 8003256:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff fe8d 	bl	8002f7a <pvPortCallocMicroROS>
 8003260:	4603      	mov	r3, r0
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000535c 	.word	0x2000535c
 8003270:	20005360 	.word	0x20005360
 8003274:	00000000 	.word	0x00000000

08003278 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003278:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800328a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800328e:	a320      	add	r3, pc, #128	@ (adr r3, 8003310 <UTILS_NanosecondsToTimespec+0x98>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fd fce8 	bl	8000c68 <__aeabi_ldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80032a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003310 <UTILS_NanosecondsToTimespec+0x98>)
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f7fd fcdc 	bl	8000c68 <__aeabi_ldivmod>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da20      	bge.n	80032fe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <UTILS_NanosecondsToTimespec+0x90>)
 80032c2:	fb82 1203 	smull	r1, r2, r2, r3
 80032c6:	1712      	asrs	r2, r2, #28
 80032c8:	17db      	asrs	r3, r3, #31
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	6979      	ldr	r1, [r7, #20]
 80032d8:	17c8      	asrs	r0, r1, #31
 80032da:	460c      	mov	r4, r1
 80032dc:	4605      	mov	r5, r0
 80032de:	ebb2 0804 	subs.w	r8, r2, r4
 80032e2:	eb63 0905 	sbc.w	r9, r3, r5
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4906      	ldr	r1, [pc, #24]	@ (800330c <UTILS_NanosecondsToTimespec+0x94>)
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	609a      	str	r2, [r3, #8]
    }
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003308:	44b82fa1 	.word	0x44b82fa1
 800330c:	3b9aca00 	.word	0x3b9aca00
 8003310:	3b9aca00 	.word	0x3b9aca00
 8003314:	00000000 	.word	0x00000000

08003318 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b08e      	sub	sp, #56	@ 0x38
 800331e:	af00      	add	r7, sp, #0
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24
 8003322:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003324:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003328:	2300      	movs	r3, #0
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800333a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800333e:	4618      	mov	r0, r3
 8003340:	f007 f834 	bl	800a3ac <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	17da      	asrs	r2, r3, #31
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	61fa      	str	r2, [r7, #28]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	69b9      	ldr	r1, [r7, #24]
 8003356:	000b      	movs	r3, r1
 8003358:	2200      	movs	r2, #0
 800335a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003360:	2200      	movs	r2, #0
 8003362:	461c      	mov	r4, r3
 8003364:	4615      	mov	r5, r2
 8003366:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800336a:	1911      	adds	r1, r2, r4
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	416b      	adcs	r3, r5
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003376:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800337a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	f04f 0400 	mov.w	r4, #0
 8003386:	f04f 0500 	mov.w	r5, #0
 800338a:	015d      	lsls	r5, r3, #5
 800338c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003390:	0154      	lsls	r4, r2, #5
 8003392:	4622      	mov	r2, r4
 8003394:	462b      	mov	r3, r5
 8003396:	ebb2 0800 	subs.w	r8, r2, r0
 800339a:	eb63 0901 	sbc.w	r9, r3, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80033aa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80033ae:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80033b2:	4690      	mov	r8, r2
 80033b4:	4699      	mov	r9, r3
 80033b6:	eb18 0a00 	adds.w	sl, r8, r0
 80033ba:	eb49 0b01 	adc.w	fp, r9, r1
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033ca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033ce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033d2:	ebb2 040a 	subs.w	r4, r2, sl
 80033d6:	603c      	str	r4, [r7, #0]
 80033d8:	eb63 030b 	sbc.w	r3, r3, fp
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e2:	4623      	mov	r3, r4
 80033e4:	181b      	adds	r3, r3, r0
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	462b      	mov	r3, r5
 80033ea:	eb41 0303 	adc.w	r3, r1, r3
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033f6:	f7ff ff3f 	bl	8003278 <UTILS_NanosecondsToTimespec>

    return 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	3738      	adds	r7, #56	@ 0x38
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003408 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003416:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8003418:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800341c:	4904      	ldr	r1, [pc, #16]	@ (8003430 <cubemx_transport_open+0x28>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f003 fb28 	bl	8006a74 <HAL_UART_Receive_DMA>
    return true;
 8003424:	2301      	movs	r3, #1
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20005364 	.word	0x20005364

08003434 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003442:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f003 fb61 	bl	8006b0c <HAL_UART_DMAStop>
    return true;
 800344a:	2301      	movs	r3, #1
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003468:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003470:	2b20      	cmp	r3, #32
 8003472:	d11b      	bne.n	80034ac <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	6978      	ldr	r0, [r7, #20]
 800347e:	f003 fa79 	bl	8006974 <HAL_UART_Transmit_DMA>
 8003482:	4603      	mov	r3, r0
 8003484:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003486:	e002      	b.n	800348e <cubemx_transport_write+0x3a>
            osDelay(1);
 8003488:	2001      	movs	r0, #1
 800348a:	f005 fcc3 	bl	8008e14 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <cubemx_transport_write+0x4a>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349a:	2b20      	cmp	r3, #32
 800349c:	d1f4      	bne.n	8003488 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <cubemx_transport_write+0x54>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	e002      	b.n	80034ae <cubemx_transport_write+0x5a>
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80034ac:	2300      	movs	r3, #0
    }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80034cc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80034d2:	b672      	cpsid	i
}
 80034d4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80034e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003554 <cubemx_transport_read+0x9c>)
 80034e6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034e8:	b662      	cpsie	i
}
 80034ea:	bf00      	nop
        __enable_irq();
        ms_used++;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f005 fc8e 	bl	8008e14 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80034f8:	4b17      	ldr	r3, [pc, #92]	@ (8003558 <cubemx_transport_read+0xa0>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <cubemx_transport_read+0x9c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d103      	bne.n	800350c <cubemx_transport_read+0x54>
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	dbe2      	blt.n	80034d2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003510:	e011      	b.n	8003536 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <cubemx_transport_read+0xa0>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	440b      	add	r3, r1
 800351c:	490f      	ldr	r1, [pc, #60]	@ (800355c <cubemx_transport_read+0xa4>)
 800351e:	5c8a      	ldrb	r2, [r1, r2]
 8003520:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8003522:	4b0d      	ldr	r3, [pc, #52]	@ (8003558 <cubemx_transport_read+0xa0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352c:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <cubemx_transport_read+0xa0>)
 800352e:	6013      	str	r3, [r2, #0]
        wrote++;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	3301      	adds	r3, #1
 8003534:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003536:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <cubemx_transport_read+0xa0>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <cubemx_transport_read+0x9c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d003      	beq.n	800354a <cubemx_transport_read+0x92>
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d3e3      	bcc.n	8003512 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 800354a:	69bb      	ldr	r3, [r7, #24]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20005b68 	.word	0x20005b68
 8003558:	20005b64 	.word	0x20005b64
 800355c:	20005364 	.word	0x20005364

08003560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003560:	480d      	ldr	r0, [pc, #52]	@ (8003598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003562:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003564:	f7ff fb88 	bl	8002c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003568:	480c      	ldr	r0, [pc, #48]	@ (800359c <LoopForever+0x6>)
  ldr r1, =_edata
 800356a:	490d      	ldr	r1, [pc, #52]	@ (80035a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800356c:	4a0d      	ldr	r2, [pc, #52]	@ (80035a4 <LoopForever+0xe>)
  movs r3, #0
 800356e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003570:	e002      	b.n	8003578 <LoopCopyDataInit>

08003572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003576:	3304      	adds	r3, #4

08003578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800357a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800357c:	d3f9      	bcc.n	8003572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357e:	4a0a      	ldr	r2, [pc, #40]	@ (80035a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003580:	4c0a      	ldr	r4, [pc, #40]	@ (80035ac <LoopForever+0x16>)
  movs r3, #0
 8003582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003584:	e001      	b.n	800358a <LoopFillZerobss>

08003586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003588:	3204      	adds	r2, #4

0800358a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800358a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800358c:	d3fb      	bcc.n	8003586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800358e:	f017 f8a7 	bl	801a6e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003592:	f7fe fb23 	bl	8001bdc <main>

08003596 <LoopForever>:

LoopForever:
    b LoopForever
 8003596:	e7fe      	b.n	8003596 <LoopForever>
  ldr   r0, =_estack
 8003598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800359c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a0:	20000a28 	.word	0x20000a28
  ldr r2, =_sidata
 80035a4:	0801e258 	.word	0x0801e258
  ldr r2, =_sbss
 80035a8:	20000a28 	.word	0x20000a28
  ldr r4, =_ebss
 80035ac:	2000c394 	.word	0x2000c394

080035b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035b0:	e7fe      	b.n	80035b0 <ADC1_2_IRQHandler>

080035b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035bc:	2003      	movs	r0, #3
 80035be:	f000 f8dc 	bl	800377a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035c2:	200f      	movs	r0, #15
 80035c4:	f7ff f9da 	bl	800297c <HAL_InitTick>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	e001      	b.n	80035d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035d4:	f7ff f86c 	bl	80026b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035d8:	79fb      	ldrb	r3, [r7, #7]

}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <HAL_IncTick+0x1c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_IncTick+0x20>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a03      	ldr	r2, [pc, #12]	@ (8003600 <HAL_IncTick+0x1c>)
 80035f4:	6013      	str	r3, [r2, #0]
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20005b6c 	.word	0x20005b6c
 8003604:	20000010 	.word	0x20000010

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	@ (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20005b6c 	.word	0x20005b6c

08003620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800363c:	4013      	ands	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800364c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003652:	4a04      	ldr	r2, [pc, #16]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	60d3      	str	r3, [r2, #12]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <__NVIC_GetPriorityGrouping+0x18>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	f003 0307 	and.w	r3, r3, #7
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db0b      	blt.n	80036ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	4907      	ldr	r1, [pc, #28]	@ (80036bc <__NVIC_EnableIRQ+0x38>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0a      	blt.n	80036ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	490c      	ldr	r1, [pc, #48]	@ (800370c <__NVIC_SetPriority+0x4c>)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	440b      	add	r3, r1
 80036e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e8:	e00a      	b.n	8003700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4908      	ldr	r1, [pc, #32]	@ (8003710 <__NVIC_SetPriority+0x50>)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3b04      	subs	r3, #4
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	440b      	add	r3, r1
 80036fe:	761a      	strb	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	@ 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf28      	it	cs
 8003732:	2304      	movcs	r3, #4
 8003734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3304      	adds	r3, #4
 800373a:	2b06      	cmp	r3, #6
 800373c:	d902      	bls.n	8003744 <NVIC_EncodePriority+0x30>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3b03      	subs	r3, #3
 8003742:	e000      	b.n	8003746 <NVIC_EncodePriority+0x32>
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	401a      	ands	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800375c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	43d9      	mvns	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	4313      	orrs	r3, r2
         );
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff4c 	bl	8003620 <__NVIC_SetPriorityGrouping>
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800379e:	f7ff ff63 	bl	8003668 <__NVIC_GetPriorityGrouping>
 80037a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	6978      	ldr	r0, [r7, #20]
 80037aa:	f7ff ffb3 	bl	8003714 <NVIC_EncodePriority>
 80037ae:	4602      	mov	r2, r0
 80037b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff82 	bl	80036c0 <__NVIC_SetPriority>
}
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff ff56 	bl	8003684 <__NVIC_EnableIRQ>
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e08d      	b.n	800390e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	4b47      	ldr	r3, [pc, #284]	@ (8003918 <HAL_DMA_Init+0x138>)
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d80f      	bhi.n	800381e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	4b45      	ldr	r3, [pc, #276]	@ (800391c <HAL_DMA_Init+0x13c>)
 8003806:	4413      	add	r3, r2
 8003808:	4a45      	ldr	r2, [pc, #276]	@ (8003920 <HAL_DMA_Init+0x140>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	009a      	lsls	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a42      	ldr	r2, [pc, #264]	@ (8003924 <HAL_DMA_Init+0x144>)
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40
 800381c:	e00e      	b.n	800383c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	4b40      	ldr	r3, [pc, #256]	@ (8003928 <HAL_DMA_Init+0x148>)
 8003826:	4413      	add	r3, r2
 8003828:	4a3d      	ldr	r2, [pc, #244]	@ (8003920 <HAL_DMA_Init+0x140>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	009a      	lsls	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a3c      	ldr	r2, [pc, #240]	@ (800392c <HAL_DMA_Init+0x14c>)
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fa82 	bl	8003d98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800389c:	d102      	bne.n	80038a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d010      	beq.n	80038e4 <HAL_DMA_Init+0x104>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d80c      	bhi.n	80038e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 faa2 	bl	8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e008      	b.n	80038f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40020407 	.word	0x40020407
 800391c:	bffdfff8 	.word	0xbffdfff8
 8003920:	cccccccd 	.word	0xcccccccd
 8003924:	40020000 	.word	0x40020000
 8003928:	bffdfbf8 	.word	0xbffdfbf8
 800392c:	40020400 	.word	0x40020400

08003930 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_DMA_Start_IT+0x20>
 800394c:	2302      	movs	r3, #2
 800394e:	e066      	b.n	8003a1e <HAL_DMA_Start_IT+0xee>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d155      	bne.n	8003a10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f9c7 	bl	8003d1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 020e 	orr.w	r2, r2, #14
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e00f      	b.n	80039c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 020a 	orr.w	r2, r2, #10
 80039c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e005      	b.n	8003a1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d005      	beq.n	8003a4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2204      	movs	r2, #4
 8003a42:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	e037      	b.n	8003aba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 020e 	bic.w	r2, r2, #14
 8003a58:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a68:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f003 021f 	and.w	r2, r3, #31
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2101      	movs	r1, #1
 8003a88:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a96:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ab8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d00d      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
 8003b0a:	e047      	b.n	8003b9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 020e 	bic.w	r2, r2, #14
 8003b1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	2101      	movs	r1, #1
 8003b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
    }
  }
  return status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d026      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x7a>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d021      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0204 	bic.w	r2, r2, #4
 8003bf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	f003 021f 	and.w	r2, r3, #31
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	2104      	movs	r1, #4
 8003c08:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d071      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c1e:	e06c      	b.n	8003cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2202      	movs	r2, #2
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d02e      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d029      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 020a 	bic.w	r2, r2, #10
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	2102      	movs	r1, #2
 8003c72:	fa01 f202 	lsl.w	r2, r1, r2
 8003c76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d038      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c90:	e033      	b.n	8003cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02a      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d025      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 020e 	bic.w	r2, r2, #14
 8003cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
}
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f003 021f 	and.w	r2, r3, #31
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d108      	bne.n	8003d7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d7a:	e007      	b.n	8003d8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	60da      	str	r2, [r3, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d802      	bhi.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003dac:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e001      	b.n	8003db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003db4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	3b08      	subs	r3, #8
 8003dc2:	4a12      	ldr	r2, [pc, #72]	@ (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003de2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2201      	movs	r2, #1
 8003dec:	409a      	lsls	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40020407 	.word	0x40020407
 8003e04:	40020800 	.word	0x40020800
 8003e08:	40020820 	.word	0x40020820
 8003e0c:	cccccccd 	.word	0xcccccccd
 8003e10:	40020880 	.word	0x40020880

08003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a08      	ldr	r2, [pc, #32]	@ (8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e36:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	1000823f 	.word	0x1000823f
 8003e58:	40020940 	.word	0x40020940

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e6a:	e15a      	b.n	8004122 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 814c 	beq.w	800411c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d005      	beq.n	8003e9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d130      	bne.n	8003efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 0201 	and.w	r2, r3, #1
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d017      	beq.n	8003f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d123      	bne.n	8003f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	08da      	lsrs	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	08da      	lsrs	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3208      	adds	r2, #8
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	2203      	movs	r2, #3
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0203 	and.w	r2, r3, #3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80a6 	beq.w	800411c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8004140 <HAL_GPIO_Init+0x2e4>)
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8004140 <HAL_GPIO_Init+0x2e4>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fdc:	4b58      	ldr	r3, [pc, #352]	@ (8004140 <HAL_GPIO_Init+0x2e4>)
 8003fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe8:	4a56      	ldr	r2, [pc, #344]	@ (8004144 <HAL_GPIO_Init+0x2e8>)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	3302      	adds	r3, #2
 8003ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004012:	d01f      	beq.n	8004054 <HAL_GPIO_Init+0x1f8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a4c      	ldr	r2, [pc, #304]	@ (8004148 <HAL_GPIO_Init+0x2ec>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d019      	beq.n	8004050 <HAL_GPIO_Init+0x1f4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a4b      	ldr	r2, [pc, #300]	@ (800414c <HAL_GPIO_Init+0x2f0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d013      	beq.n	800404c <HAL_GPIO_Init+0x1f0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a4a      	ldr	r2, [pc, #296]	@ (8004150 <HAL_GPIO_Init+0x2f4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00d      	beq.n	8004048 <HAL_GPIO_Init+0x1ec>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a49      	ldr	r2, [pc, #292]	@ (8004154 <HAL_GPIO_Init+0x2f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <HAL_GPIO_Init+0x1e8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a48      	ldr	r2, [pc, #288]	@ (8004158 <HAL_GPIO_Init+0x2fc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_GPIO_Init+0x1e4>
 800403c:	2305      	movs	r3, #5
 800403e:	e00a      	b.n	8004056 <HAL_GPIO_Init+0x1fa>
 8004040:	2306      	movs	r3, #6
 8004042:	e008      	b.n	8004056 <HAL_GPIO_Init+0x1fa>
 8004044:	2304      	movs	r3, #4
 8004046:	e006      	b.n	8004056 <HAL_GPIO_Init+0x1fa>
 8004048:	2303      	movs	r3, #3
 800404a:	e004      	b.n	8004056 <HAL_GPIO_Init+0x1fa>
 800404c:	2302      	movs	r3, #2
 800404e:	e002      	b.n	8004056 <HAL_GPIO_Init+0x1fa>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_GPIO_Init+0x1fa>
 8004054:	2300      	movs	r3, #0
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	f002 0203 	and.w	r2, r2, #3
 800405c:	0092      	lsls	r2, r2, #2
 800405e:	4093      	lsls	r3, r2
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004066:	4937      	ldr	r1, [pc, #220]	@ (8004144 <HAL_GPIO_Init+0x2e8>)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	3302      	adds	r3, #2
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004074:	4b39      	ldr	r3, [pc, #228]	@ (800415c <HAL_GPIO_Init+0x300>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43db      	mvns	r3, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004098:	4a30      	ldr	r2, [pc, #192]	@ (800415c <HAL_GPIO_Init+0x300>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800409e:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <HAL_GPIO_Init+0x300>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040c2:	4a26      	ldr	r2, [pc, #152]	@ (800415c <HAL_GPIO_Init+0x300>)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040c8:	4b24      	ldr	r3, [pc, #144]	@ (800415c <HAL_GPIO_Init+0x300>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ec:	4a1b      	ldr	r2, [pc, #108]	@ (800415c <HAL_GPIO_Init+0x300>)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040f2:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_GPIO_Init+0x300>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004116:	4a11      	ldr	r2, [pc, #68]	@ (800415c <HAL_GPIO_Init+0x300>)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	3301      	adds	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	f47f ae9d 	bne.w	8003e6c <HAL_GPIO_Init+0x10>
  }
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40021000 	.word	0x40021000
 8004144:	40010000 	.word	0x40010000
 8004148:	48000400 	.word	0x48000400
 800414c:	48000800 	.word	0x48000800
 8004150:	48000c00 	.word	0x48000c00
 8004154:	48001000 	.word	0x48001000
 8004158:	48001400 	.word	0x48001400
 800415c:	40010400 	.word	0x40010400

08004160 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800416e:	e0bd      	b.n	80042ec <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004170:	2201      	movs	r2, #1
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80b0 	beq.w	80042e6 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004186:	4a60      	ldr	r2, [pc, #384]	@ (8004308 <HAL_GPIO_DeInit+0x1a8>)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	3302      	adds	r3, #2
 800418e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004192:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	220f      	movs	r2, #15
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041ae:	d01f      	beq.n	80041f0 <HAL_GPIO_DeInit+0x90>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a56      	ldr	r2, [pc, #344]	@ (800430c <HAL_GPIO_DeInit+0x1ac>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d019      	beq.n	80041ec <HAL_GPIO_DeInit+0x8c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a55      	ldr	r2, [pc, #340]	@ (8004310 <HAL_GPIO_DeInit+0x1b0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <HAL_GPIO_DeInit+0x88>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a54      	ldr	r2, [pc, #336]	@ (8004314 <HAL_GPIO_DeInit+0x1b4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00d      	beq.n	80041e4 <HAL_GPIO_DeInit+0x84>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a53      	ldr	r2, [pc, #332]	@ (8004318 <HAL_GPIO_DeInit+0x1b8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <HAL_GPIO_DeInit+0x80>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a52      	ldr	r2, [pc, #328]	@ (800431c <HAL_GPIO_DeInit+0x1bc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_GPIO_DeInit+0x7c>
 80041d8:	2305      	movs	r3, #5
 80041da:	e00a      	b.n	80041f2 <HAL_GPIO_DeInit+0x92>
 80041dc:	2306      	movs	r3, #6
 80041de:	e008      	b.n	80041f2 <HAL_GPIO_DeInit+0x92>
 80041e0:	2304      	movs	r3, #4
 80041e2:	e006      	b.n	80041f2 <HAL_GPIO_DeInit+0x92>
 80041e4:	2303      	movs	r3, #3
 80041e6:	e004      	b.n	80041f2 <HAL_GPIO_DeInit+0x92>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e002      	b.n	80041f2 <HAL_GPIO_DeInit+0x92>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_GPIO_DeInit+0x92>
 80041f0:	2300      	movs	r3, #0
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	f002 0203 	and.w	r2, r2, #3
 80041f8:	0092      	lsls	r2, r2, #2
 80041fa:	4093      	lsls	r3, r2
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d132      	bne.n	8004268 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004202:	4b47      	ldr	r3, [pc, #284]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	4945      	ldr	r1, [pc, #276]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 800420c:	4013      	ands	r3, r2
 800420e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004210:	4b43      	ldr	r3, [pc, #268]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	43db      	mvns	r3, r3
 8004218:	4941      	ldr	r1, [pc, #260]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 800421a:	4013      	ands	r3, r2
 800421c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800421e:	4b40      	ldr	r3, [pc, #256]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	43db      	mvns	r3, r3
 8004226:	493e      	ldr	r1, [pc, #248]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 8004228:	4013      	ands	r3, r2
 800422a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800422c:	4b3c      	ldr	r3, [pc, #240]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	43db      	mvns	r3, r3
 8004234:	493a      	ldr	r1, [pc, #232]	@ (8004320 <HAL_GPIO_DeInit+0x1c0>)
 8004236:	4013      	ands	r3, r2
 8004238:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	220f      	movs	r2, #15
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800424a:	4a2f      	ldr	r2, [pc, #188]	@ (8004308 <HAL_GPIO_DeInit+0x1a8>)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	3302      	adds	r3, #2
 8004252:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	43da      	mvns	r2, r3
 800425a:	482b      	ldr	r0, [pc, #172]	@ (8004308 <HAL_GPIO_DeInit+0x1a8>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	400a      	ands	r2, r1
 8004262:	3302      	adds	r3, #2
 8004264:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2103      	movs	r1, #3
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	08da      	lsrs	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3208      	adds	r2, #8
 8004284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	08d2      	lsrs	r2, r2, #3
 800429c:	4019      	ands	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3208      	adds	r2, #8
 80042a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	2103      	movs	r1, #3
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	2101      	movs	r1, #1
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2103      	movs	r1, #3
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	401a      	ands	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3301      	adds	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f af3b 	bne.w	8004170 <HAL_GPIO_DeInit+0x10>
  }
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40010000 	.word	0x40010000
 800430c:	48000400 	.word	0x48000400
 8004310:	48000800 	.word	0x48000800
 8004314:	48000c00 	.word	0x48000c00
 8004318:	48001000 	.word	0x48001000
 800431c:	48001400 	.word	0x48001400
 8004320:	40010400 	.word	0x40010400

08004324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	887b      	ldrh	r3, [r7, #2]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	e001      	b.n	8004346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
 8004360:	4613      	mov	r3, r2
 8004362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004364:	787b      	ldrb	r3, [r7, #1]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004370:	e002      	b.n	8004378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4013      	ands	r3, r2
 800439c:	041a      	lsls	r2, r3, #16
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	43d9      	mvns	r1, r3
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	400b      	ands	r3, r1
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043c2:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ce:	4a05      	ldr	r2, [pc, #20]	@ (80043e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f806 	bl	80043e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40010400 	.word	0x40010400

080043e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e08d      	b.n	800452c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fe f96d 	bl	8002704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2224      	movs	r2, #36	@ 0x24
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0201 	bic.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800444e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800445e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	e006      	b.n	8004486 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004484:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d108      	bne.n	80044a0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e007      	b.n	80044b0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69d9      	ldr	r1, [r3, #28]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e021      	b.n	800458a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2224      	movs	r2, #36	@ 0x24
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fe f92a 	bl	80027b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	817b      	strh	r3, [r7, #10]
 80045a6:	460b      	mov	r3, r1
 80045a8:	813b      	strh	r3, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	f040 80f9 	bne.w	80047ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x34>
 80045c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0ed      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Mem_Write+0x4e>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0e6      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045ea:	f7ff f80d 	bl	8003608 <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2319      	movs	r3, #25
 80045f6:	2201      	movs	r2, #1
 80045f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 facf 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0d1      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2221      	movs	r2, #33	@ 0x21
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2240      	movs	r2, #64	@ 0x40
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800462c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004634:	88f8      	ldrh	r0, [r7, #6]
 8004636:	893a      	ldrh	r2, [r7, #8]
 8004638:	8979      	ldrh	r1, [r7, #10]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4603      	mov	r3, r0
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f9df 	bl	8004a08 <I2C_RequestMemoryWrite>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0a9      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2bff      	cmp	r3, #255	@ 0xff
 8004664:	d90e      	bls.n	8004684 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	22ff      	movs	r2, #255	@ 0xff
 800466a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004670:	b2da      	uxtb	r2, r3
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fc53 	bl	8004f28 <I2C_TransferConfig>
 8004682:	e00f      	b.n	80046a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004692:	b2da      	uxtb	r2, r3
 8004694:	8979      	ldrh	r1, [r7, #10]
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fc42 	bl	8004f28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fad2 	bl	8004c52 <I2C_WaitOnTXISFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e07b      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d034      	beq.n	800475c <HAL_I2C_Mem_Write+0x1c8>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d130      	bne.n	800475c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	@ 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fa4b 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e04d      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2bff      	cmp	r3, #255	@ 0xff
 800471c:	d90e      	bls.n	800473c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	22ff      	movs	r2, #255	@ 0xff
 8004722:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004728:	b2da      	uxtb	r2, r3
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	2300      	movs	r3, #0
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fbf7 	bl	8004f28 <I2C_TransferConfig>
 800473a:	e00f      	b.n	800475c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	b2da      	uxtb	r2, r3
 800474c:	8979      	ldrh	r1, [r7, #10]
 800474e:	2300      	movs	r3, #0
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fbe6 	bl	8004f28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d19e      	bne.n	80046a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fab8 	bl	8004ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e01a      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2220      	movs	r2, #32
 8004780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <HAL_I2C_Mem_Write+0x224>)
 800478e:	400b      	ands	r3, r1
 8004790:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	fe00e800 	.word	0xfe00e800

080047bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	f040 80fd 	bne.w	80049de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_I2C_Mem_Read+0x34>
 80047ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0f1      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_I2C_Mem_Read+0x4e>
 8004806:	2302      	movs	r3, #2
 8004808:	e0ea      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004812:	f7fe fef9 	bl	8003608 <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2319      	movs	r3, #25
 800481e:	2201      	movs	r2, #1
 8004820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f9bb 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0d5      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2222      	movs	r2, #34	@ 0x22
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2240      	movs	r2, #64	@ 0x40
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800485c:	88f8      	ldrh	r0, [r7, #6]
 800485e:	893a      	ldrh	r2, [r7, #8]
 8004860:	8979      	ldrh	r1, [r7, #10]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	4603      	mov	r3, r0
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f91f 	bl	8004ab0 <I2C_RequestMemoryRead>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0ad      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2bff      	cmp	r3, #255	@ 0xff
 800488c:	d90e      	bls.n	80048ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	22ff      	movs	r2, #255	@ 0xff
 8004892:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	b2da      	uxtb	r2, r3
 800489a:	8979      	ldrh	r1, [r7, #10]
 800489c:	4b52      	ldr	r3, [pc, #328]	@ (80049e8 <HAL_I2C_Mem_Read+0x22c>)
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fb3f 	bl	8004f28 <I2C_TransferConfig>
 80048aa:	e00f      	b.n	80048cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	8979      	ldrh	r1, [r7, #10]
 80048be:	4b4a      	ldr	r3, [pc, #296]	@ (80049e8 <HAL_I2C_Mem_Read+0x22c>)
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 fb2e 	bl	8004f28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	2200      	movs	r2, #0
 80048d4:	2104      	movs	r1, #4
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f962 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07c      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d034      	beq.n	800498c <HAL_I2C_Mem_Read+0x1d0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d130      	bne.n	800498c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	2200      	movs	r2, #0
 8004932:	2180      	movs	r1, #128	@ 0x80
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f933 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04d      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2bff      	cmp	r3, #255	@ 0xff
 800494c:	d90e      	bls.n	800496c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22ff      	movs	r2, #255	@ 0xff
 8004952:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	b2da      	uxtb	r2, r3
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fadf 	bl	8004f28 <I2C_TransferConfig>
 800496a:	e00f      	b.n	800498c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	b2da      	uxtb	r2, r3
 800497c:	8979      	ldrh	r1, [r7, #10]
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 face 	bl	8004f28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d19a      	bne.n	80048cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f9a0 	bl	8004ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e01a      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2220      	movs	r2, #32
 80049b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_I2C_Mem_Read+0x230>)
 80049be:	400b      	ands	r3, r1
 80049c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	80002400 	.word	0x80002400
 80049ec:	fe00e800 	.word	0xfe00e800

080049f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	4608      	mov	r0, r1
 8004a12:	4611      	mov	r1, r2
 8004a14:	461a      	mov	r2, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	817b      	strh	r3, [r7, #10]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	813b      	strh	r3, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	8979      	ldrh	r1, [r7, #10]
 8004a28:	4b20      	ldr	r3, [pc, #128]	@ (8004aac <I2C_RequestMemoryWrite+0xa4>)
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fa79 	bl	8004f28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f909 	bl	8004c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e02c      	b.n	8004aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a5a:	e015      	b.n	8004a88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a5c:	893b      	ldrh	r3, [r7, #8]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f8ef 	bl	8004c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e012      	b.n	8004aa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a7e:	893b      	ldrh	r3, [r7, #8]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2180      	movs	r1, #128	@ 0x80
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f884 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	80002000 	.word	0x80002000

08004ab0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	817b      	strh	r3, [r7, #10]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	813b      	strh	r3, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	8979      	ldrh	r1, [r7, #10]
 8004ad0:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <I2C_RequestMemoryRead+0xa4>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fa26 	bl	8004f28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f8b6 	bl	8004c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e02c      	b.n	8004b4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b00:	e015      	b.n	8004b2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b02:	893b      	ldrh	r3, [r7, #8]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	69b9      	ldr	r1, [r7, #24]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f89c 	bl	8004c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e012      	b.n	8004b4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2140      	movs	r1, #64	@ 0x40
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f831 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	80002000 	.word	0x80002000

08004b58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d103      	bne.n	8004b76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d007      	beq.n	8004b94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	619a      	str	r2, [r3, #24]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb0:	e03b      	b.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f8d6 	bl	8004d68 <I2C_IsErrorOccurred>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e041      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bcc:	d02d      	beq.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f7fe fd1b 	bl	8003608 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d122      	bne.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4013      	ands	r3, r2
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d113      	bne.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e00f      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d0b4      	beq.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c5e:	e033      	b.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f87f 	bl	8004d68 <I2C_IsErrorOccurred>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e031      	b.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c7a:	d025      	beq.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7c:	f7fe fcc4 	bl	8003608 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11a      	bne.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d013      	beq.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d1c4      	bne.n	8004c60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cec:	e02f      	b.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f838 	bl	8004d68 <I2C_IsErrorOccurred>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e02d      	b.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7fe fc81 	bl	8003608 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11a      	bne.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d013      	beq.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d1c8      	bne.n	8004cee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	@ 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d068      	beq.n	8004e66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2210      	movs	r2, #16
 8004d9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d9c:	e049      	b.n	8004e32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da4:	d045      	beq.n	8004e32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fe fc2f 	bl	8003608 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <I2C_IsErrorOccurred+0x54>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d13a      	bne.n	8004e32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dde:	d121      	bne.n	8004e24 <I2C_IsErrorOccurred+0xbc>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004de6:	d01d      	beq.n	8004e24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d01a      	beq.n	8004e24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dfe:	f7fe fc03 	bl	8003608 <HAL_GetTick>
 8004e02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e04:	e00e      	b.n	8004e24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e06:	f7fe fbff 	bl	8003608 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b19      	cmp	r3, #25
 8004e12:	d907      	bls.n	8004e24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f043 0320 	orr.w	r3, r3, #32
 8004e1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e22:	e006      	b.n	8004e32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d1e9      	bne.n	8004e06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d003      	beq.n	8004e48 <I2C_IsErrorOccurred+0xe0>
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0aa      	beq.n	8004d9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2220      	movs	r2, #32
 8004e56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f043 0308 	orr.w	r3, r3, #8
 8004ea0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f043 0302 	orr.w	r3, r3, #2
 8004ec2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01c      	beq.n	8004f16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fe3b 	bl	8004b58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <I2C_IsErrorOccurred+0x1bc>)
 8004eee:	400b      	ands	r3, r1
 8004ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	@ 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	fe00e800 	.word	0xfe00e800

08004f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	460b      	mov	r3, r1
 8004f34:	817b      	strh	r3, [r7, #10]
 8004f36:	4613      	mov	r3, r2
 8004f38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f3a:	897b      	ldrh	r3, [r7, #10]
 8004f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f40:	7a7b      	ldrb	r3, [r7, #9]
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	0d5b      	lsrs	r3, r3, #21
 8004f62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f66:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <I2C_TransferConfig+0x60>)
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	ea02 0103 	and.w	r1, r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	03ff63ff 	.word	0x03ff63ff

08004f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d138      	bne.n	8005014 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e032      	b.n	8005016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	@ 0x24
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b20      	cmp	r3, #32
 8005036:	d139      	bne.n	80050ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005042:	2302      	movs	r3, #2
 8005044:	e033      	b.n	80050ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2224      	movs	r2, #36	@ 0x24
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005074:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e041      	b.n	8005150 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80050d4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f245 5255 	movw	r2, #21845	@ 0x5555
 80050de:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6852      	ldr	r2, [r2, #4]
 80050e8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6892      	ldr	r2, [r2, #8]
 80050f2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80050f4:	f7fe fa88 	bl	8003608 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80050fa:	e00f      	b.n	800511c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80050fc:	f7fe fa84 	bl	8003608 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b31      	cmp	r3, #49	@ 0x31
 8005108:	d908      	bls.n	800511c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e019      	b.n	8005150 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e8      	bne.n	80050fc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	429a      	cmp	r2, r3
 8005136:	d005      	beq.n	8005144 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	68d2      	ldr	r2, [r2, #12]
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	e004      	b.n	800514e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800514c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005168:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d141      	bne.n	800520a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005186:	4b4b      	ldr	r3, [pc, #300]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005192:	d131      	bne.n	80051f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005194:	4b47      	ldr	r3, [pc, #284]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800519a:	4a46      	ldr	r2, [pc, #280]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a4:	4b43      	ldr	r3, [pc, #268]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051ac:	4a41      	ldr	r2, [pc, #260]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051b4:	4b40      	ldr	r3, [pc, #256]	@ (80052b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2232      	movs	r2, #50	@ 0x32
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	4a3f      	ldr	r2, [pc, #252]	@ (80052bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	0c9b      	lsrs	r3, r3, #18
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ca:	e002      	b.n	80051d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051d2:	4b38      	ldr	r3, [pc, #224]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051de:	d102      	bne.n	80051e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f2      	bne.n	80051cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051e6:	4b33      	ldr	r3, [pc, #204]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f2:	d158      	bne.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e057      	b.n	80052a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051f8:	4b2e      	ldr	r3, [pc, #184]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051fe:	4a2d      	ldr	r2, [pc, #180]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005204:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005208:	e04d      	b.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005210:	d141      	bne.n	8005296 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005212:	4b28      	ldr	r3, [pc, #160]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521e:	d131      	bne.n	8005284 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005220:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005226:	4a23      	ldr	r2, [pc, #140]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800522c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005230:	4b20      	ldr	r3, [pc, #128]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005238:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800523e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2232      	movs	r2, #50	@ 0x32
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	0c9b      	lsrs	r3, r3, #18
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005256:	e002      	b.n	800525e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3b01      	subs	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800525e:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526a:	d102      	bne.n	8005272 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f2      	bne.n	8005258 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005272:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527e:	d112      	bne.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e011      	b.n	80052a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005284:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800528a:	4a0a      	ldr	r2, [pc, #40]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005290:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005294:	e007      	b.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800529e:	4a05      	ldr	r2, [pc, #20]	@ (80052b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40007000 	.word	0x40007000
 80052b8:	20000008 	.word	0x20000008
 80052bc:	431bde83 	.word	0x431bde83

080052c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a04      	ldr	r2, [pc, #16]	@ (80052dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052ce:	6093      	str	r3, [r2, #8]
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40007000 	.word	0x40007000

080052e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e2fe      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d075      	beq.n	80053ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fe:	4b97      	ldr	r3, [pc, #604]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005308:	4b94      	ldr	r3, [pc, #592]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b0c      	cmp	r3, #12
 8005316:	d102      	bne.n	800531e <HAL_RCC_OscConfig+0x3e>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d002      	beq.n	8005324 <HAL_RCC_OscConfig+0x44>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d10b      	bne.n	800533c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005324:	4b8d      	ldr	r3, [pc, #564]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d05b      	beq.n	80053e8 <HAL_RCC_OscConfig+0x108>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d157      	bne.n	80053e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e2d9      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005344:	d106      	bne.n	8005354 <HAL_RCC_OscConfig+0x74>
 8005346:	4b85      	ldr	r3, [pc, #532]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a84      	ldr	r2, [pc, #528]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e01d      	b.n	8005390 <HAL_RCC_OscConfig+0xb0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800535c:	d10c      	bne.n	8005378 <HAL_RCC_OscConfig+0x98>
 800535e:	4b7f      	ldr	r3, [pc, #508]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a7e      	ldr	r2, [pc, #504]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b7c      	ldr	r3, [pc, #496]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a7b      	ldr	r2, [pc, #492]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e00b      	b.n	8005390 <HAL_RCC_OscConfig+0xb0>
 8005378:	4b78      	ldr	r3, [pc, #480]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a77      	ldr	r2, [pc, #476]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800537e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4b75      	ldr	r3, [pc, #468]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a74      	ldr	r2, [pc, #464]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800538a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800538e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fe f936 	bl	8003608 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a0:	f7fe f932 	bl	8003608 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	@ 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e29e      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053b2:	4b6a      	ldr	r3, [pc, #424]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f0      	beq.n	80053a0 <HAL_RCC_OscConfig+0xc0>
 80053be:	e014      	b.n	80053ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fe f922 	bl	8003608 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c8:	f7fe f91e 	bl	8003608 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b64      	cmp	r3, #100	@ 0x64
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e28a      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053da:	4b60      	ldr	r3, [pc, #384]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0xe8>
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d075      	beq.n	80054e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f6:	4b59      	ldr	r3, [pc, #356]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005400:	4b56      	ldr	r3, [pc, #344]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b0c      	cmp	r3, #12
 800540e:	d102      	bne.n	8005416 <HAL_RCC_OscConfig+0x136>
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d002      	beq.n	800541c <HAL_RCC_OscConfig+0x13c>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b04      	cmp	r3, #4
 800541a:	d11f      	bne.n	800545c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800541c:	4b4f      	ldr	r3, [pc, #316]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCC_OscConfig+0x154>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e25d      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005434:	4b49      	ldr	r3, [pc, #292]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	4946      	ldr	r1, [pc, #280]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005448:	4b45      	ldr	r3, [pc, #276]	@ (8005560 <HAL_RCC_OscConfig+0x280>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f7fd fa95 	bl	800297c <HAL_InitTick>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d043      	beq.n	80054e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e249      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d023      	beq.n	80054ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005464:	4b3d      	ldr	r3, [pc, #244]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a3c      	ldr	r2, [pc, #240]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800546a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fe f8ca 	bl	8003608 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005478:	f7fe f8c6 	bl	8003608 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e232      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800548a:	4b34      	ldr	r3, [pc, #208]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005496:	4b31      	ldr	r3, [pc, #196]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	492d      	ldr	r1, [pc, #180]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
 80054aa:	e01a      	b.n	80054e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ac:	4b2b      	ldr	r3, [pc, #172]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2a      	ldr	r2, [pc, #168]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80054b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fe f8a6 	bl	8003608 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c0:	f7fe f8a2 	bl	8003608 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e20e      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054d2:	4b22      	ldr	r3, [pc, #136]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0x1e0>
 80054de:	e000      	b.n	80054e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d041      	beq.n	8005572 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01c      	beq.n	8005530 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054f6:	4b19      	ldr	r3, [pc, #100]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80054f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054fc:	4a17      	ldr	r2, [pc, #92]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005506:	f7fe f87f 	bl	8003608 <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800550e:	f7fe f87b 	bl	8003608 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e1e7      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005520:	4b0e      	ldr	r3, [pc, #56]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0ef      	beq.n	800550e <HAL_RCC_OscConfig+0x22e>
 800552e:	e020      	b.n	8005572 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005530:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005536:	4a09      	ldr	r2, [pc, #36]	@ (800555c <HAL_RCC_OscConfig+0x27c>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005540:	f7fe f862 	bl	8003608 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005546:	e00d      	b.n	8005564 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005548:	f7fe f85e 	bl	8003608 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d906      	bls.n	8005564 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e1ca      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000
 8005560:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005564:	4b8c      	ldr	r3, [pc, #560]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ea      	bne.n	8005548 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80a6 	beq.w	80056cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005580:	2300      	movs	r3, #0
 8005582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005584:	4b84      	ldr	r3, [pc, #528]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_RCC_OscConfig+0x2b4>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x2b6>
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800559a:	4b7f      	ldr	r3, [pc, #508]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559e:	4a7e      	ldr	r2, [pc, #504]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055b6:	4b79      	ldr	r3, [pc, #484]	@ (800579c <HAL_RCC_OscConfig+0x4bc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d118      	bne.n	80055f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055c2:	4b76      	ldr	r3, [pc, #472]	@ (800579c <HAL_RCC_OscConfig+0x4bc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a75      	ldr	r2, [pc, #468]	@ (800579c <HAL_RCC_OscConfig+0x4bc>)
 80055c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ce:	f7fe f81b 	bl	8003608 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d6:	f7fe f817 	bl	8003608 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e183      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e8:	4b6c      	ldr	r3, [pc, #432]	@ (800579c <HAL_RCC_OscConfig+0x4bc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d108      	bne.n	800560e <HAL_RCC_OscConfig+0x32e>
 80055fc:	4b66      	ldr	r3, [pc, #408]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005602:	4a65      	ldr	r2, [pc, #404]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800560c:	e024      	b.n	8005658 <HAL_RCC_OscConfig+0x378>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b05      	cmp	r3, #5
 8005614:	d110      	bne.n	8005638 <HAL_RCC_OscConfig+0x358>
 8005616:	4b60      	ldr	r3, [pc, #384]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561c:	4a5e      	ldr	r2, [pc, #376]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800561e:	f043 0304 	orr.w	r3, r3, #4
 8005622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005626:	4b5c      	ldr	r3, [pc, #368]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562c:	4a5a      	ldr	r2, [pc, #360]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005636:	e00f      	b.n	8005658 <HAL_RCC_OscConfig+0x378>
 8005638:	4b57      	ldr	r3, [pc, #348]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563e:	4a56      	ldr	r2, [pc, #344]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005648:	4b53      	ldr	r3, [pc, #332]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	4a52      	ldr	r2, [pc, #328]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d016      	beq.n	800568e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fd ffd2 	bl	8003608 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005666:	e00a      	b.n	800567e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005668:	f7fd ffce 	bl	8003608 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e138      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567e:	4b46      	ldr	r3, [pc, #280]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ed      	beq.n	8005668 <HAL_RCC_OscConfig+0x388>
 800568c:	e015      	b.n	80056ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568e:	f7fd ffbb 	bl	8003608 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005694:	e00a      	b.n	80056ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fd ffb7 	bl	8003608 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e121      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ed      	bne.n	8005696 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c0:	4b35      	ldr	r3, [pc, #212]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	4a34      	ldr	r2, [pc, #208]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d03c      	beq.n	8005752 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01c      	beq.n	800571a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80056e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fd ff8a 	bl	8003608 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f8:	f7fd ff86 	bl	8003608 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e0f2      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800570a:	4b23      	ldr	r3, [pc, #140]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800570c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <HAL_RCC_OscConfig+0x418>
 8005718:	e01b      	b.n	8005752 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800571a:	4b1f      	ldr	r3, [pc, #124]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800571c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005720:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fd ff6d 	bl	8003608 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005732:	f7fd ff69 	bl	8003608 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0d5      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005744:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1ef      	bne.n	8005732 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80c9 	beq.w	80058ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800575c:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 030c 	and.w	r3, r3, #12
 8005764:	2b0c      	cmp	r3, #12
 8005766:	f000 8083 	beq.w	8005870 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d15e      	bne.n	8005830 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a08      	ldr	r2, [pc, #32]	@ (8005798 <HAL_RCC_OscConfig+0x4b8>)
 8005778:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800577c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fd ff43 	bl	8003608 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005784:	e00c      	b.n	80057a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005786:	f7fd ff3f 	bl	8003608 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d905      	bls.n	80057a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0ab      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
 8005798:	40021000 	.word	0x40021000
 800579c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a0:	4b55      	ldr	r3, [pc, #340]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ec      	bne.n	8005786 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ac:	4b52      	ldr	r3, [pc, #328]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	4b52      	ldr	r3, [pc, #328]	@ (80058fc <HAL_RCC_OscConfig+0x61c>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6a11      	ldr	r1, [r2, #32]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057bc:	3a01      	subs	r2, #1
 80057be:	0112      	lsls	r2, r2, #4
 80057c0:	4311      	orrs	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80057c6:	0212      	lsls	r2, r2, #8
 80057c8:	4311      	orrs	r1, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057ce:	0852      	lsrs	r2, r2, #1
 80057d0:	3a01      	subs	r2, #1
 80057d2:	0552      	lsls	r2, r2, #21
 80057d4:	4311      	orrs	r1, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057da:	0852      	lsrs	r2, r2, #1
 80057dc:	3a01      	subs	r2, #1
 80057de:	0652      	lsls	r2, r2, #25
 80057e0:	4311      	orrs	r1, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057e6:	06d2      	lsls	r2, r2, #27
 80057e8:	430a      	orrs	r2, r1
 80057ea:	4943      	ldr	r1, [pc, #268]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f0:	4b41      	ldr	r3, [pc, #260]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a40      	ldr	r2, [pc, #256]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 80057f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057fc:	4b3e      	ldr	r3, [pc, #248]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a3d      	ldr	r2, [pc, #244]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 8005802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005806:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fd fefe 	bl	8003608 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005810:	f7fd fefa 	bl	8003608 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e066      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005822:	4b35      	ldr	r3, [pc, #212]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x530>
 800582e:	e05e      	b.n	80058ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005830:	4b31      	ldr	r3, [pc, #196]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a30      	ldr	r2, [pc, #192]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 8005836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800583a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fd fee4 	bl	8003608 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005844:	f7fd fee0 	bl	8003608 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e04c      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005856:	4b28      	ldr	r3, [pc, #160]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005862:	4b25      	ldr	r3, [pc, #148]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	4924      	ldr	r1, [pc, #144]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 8005868:	4b25      	ldr	r3, [pc, #148]	@ (8005900 <HAL_RCC_OscConfig+0x620>)
 800586a:	4013      	ands	r3, r2
 800586c:	60cb      	str	r3, [r1, #12]
 800586e:	e03e      	b.n	80058ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e039      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800587c:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <HAL_RCC_OscConfig+0x618>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 0203 	and.w	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	429a      	cmp	r2, r3
 800588e:	d12c      	bne.n	80058ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	3b01      	subs	r3, #1
 800589c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d123      	bne.n	80058ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d11b      	bne.n	80058ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d113      	bne.n	80058ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	3b01      	subs	r3, #1
 80058d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	3b01      	subs	r3, #1
 80058e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d001      	beq.n	80058ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	019f800c 	.word	0x019f800c
 8005900:	feeefffc 	.word	0xfeeefffc

08005904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e11e      	b.n	8005b5a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b91      	ldr	r3, [pc, #580]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d910      	bls.n	800594c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b8e      	ldr	r3, [pc, #568]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 020f 	bic.w	r2, r3, #15
 8005932:	498c      	ldr	r1, [pc, #560]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	4313      	orrs	r3, r2
 8005938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800593a:	4b8a      	ldr	r3, [pc, #552]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e106      	b.n	8005b5a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d073      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d129      	bne.n	80059b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005960:	4b81      	ldr	r3, [pc, #516]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0f4      	b.n	8005b5a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005970:	f000 f9d0 	bl	8005d14 <RCC_GetSysClockFreqFromPLLSource>
 8005974:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4a7c      	ldr	r2, [pc, #496]	@ (8005b6c <HAL_RCC_ClockConfig+0x268>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d93f      	bls.n	80059fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800597e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005992:	2b00      	cmp	r3, #0
 8005994:	d033      	beq.n	80059fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800599a:	2b00      	cmp	r3, #0
 800599c:	d12f      	bne.n	80059fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800599e:	4b72      	ldr	r3, [pc, #456]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059a6:	4a70      	ldr	r2, [pc, #448]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 80059a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059ae:	2380      	movs	r3, #128	@ 0x80
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e024      	b.n	80059fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0c6      	b.n	8005b5a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059cc:	4b66      	ldr	r3, [pc, #408]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0be      	b.n	8005b5a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059dc:	f000 f8ce 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4a61      	ldr	r2, [pc, #388]	@ (8005b6c <HAL_RCC_ClockConfig+0x268>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d909      	bls.n	80059fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059f2:	4a5d      	ldr	r2, [pc, #372]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 80059f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059fa:	2380      	movs	r3, #128	@ 0x80
 80059fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059fe:	4b5a      	ldr	r3, [pc, #360]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f023 0203 	bic.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4957      	ldr	r1, [pc, #348]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a10:	f7fd fdfa 	bl	8003608 <HAL_GetTick>
 8005a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a18:	f7fd fdf6 	bl	8003608 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e095      	b.n	8005b5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 020c 	and.w	r2, r3, #12
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d1eb      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d023      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a58:	4b43      	ldr	r3, [pc, #268]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a42      	ldr	r2, [pc, #264]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a70:	4b3d      	ldr	r3, [pc, #244]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a78:	4a3b      	ldr	r2, [pc, #236]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a80:	4b39      	ldr	r3, [pc, #228]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4936      	ldr	r1, [pc, #216]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b80      	cmp	r3, #128	@ 0x80
 8005a98:	d105      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a9a:	4b33      	ldr	r3, [pc, #204]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	4a32      	ldr	r2, [pc, #200]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005aa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aa4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d21d      	bcs.n	8005af0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f023 020f 	bic.w	r2, r3, #15
 8005abc:	4929      	ldr	r1, [pc, #164]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ac4:	f7fd fda0 	bl	8003608 <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005acc:	f7fd fd9c 	bl	8003608 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e03b      	b.n	8005b5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae2:	4b20      	ldr	r3, [pc, #128]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d1ed      	bne.n	8005acc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005afc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4917      	ldr	r1, [pc, #92]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b1a:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	490f      	ldr	r1, [pc, #60]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b2e:	f000 f825 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005b32:	4602      	mov	r2, r0
 8005b34:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	091b      	lsrs	r3, r3, #4
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	490c      	ldr	r1, [pc, #48]	@ (8005b70 <HAL_RCC_ClockConfig+0x26c>)
 8005b40:	5ccb      	ldrb	r3, [r1, r3]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b74 <HAL_RCC_ClockConfig+0x270>)
 8005b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <HAL_RCC_ClockConfig+0x274>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fc ff12 	bl	800297c <HAL_InitTick>
 8005b58:	4603      	mov	r3, r0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40022000 	.word	0x40022000
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	04c4b400 	.word	0x04c4b400
 8005b70:	0801c93c 	.word	0x0801c93c
 8005b74:	20000008 	.word	0x20000008
 8005b78:	2000000c 	.word	0x2000000c

08005b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b82:	4b2c      	ldr	r3, [pc, #176]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d102      	bne.n	8005b94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	e047      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b94:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d102      	bne.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ba0:	4b26      	ldr	r3, [pc, #152]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	e03e      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005ba6:	4b23      	ldr	r3, [pc, #140]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	2b0c      	cmp	r3, #12
 8005bb0:	d136      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bb2:	4b20      	ldr	r3, [pc, #128]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d10c      	bne.n	8005bea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	4a16      	ldr	r2, [pc, #88]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bda:	68d2      	ldr	r2, [r2, #12]
 8005bdc:	0a12      	lsrs	r2, r2, #8
 8005bde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	617b      	str	r3, [r7, #20]
      break;
 8005be8:	e00c      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bea:	4a13      	ldr	r2, [pc, #76]	@ (8005c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	4a10      	ldr	r2, [pc, #64]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bf4:	68d2      	ldr	r2, [r2, #12]
 8005bf6:	0a12      	lsrs	r2, r2, #8
 8005bf8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]
      break;
 8005c02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c04:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	0e5b      	lsrs	r3, r3, #25
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	e001      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c24:	693b      	ldr	r3, [r7, #16]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
 8005c38:	00f42400 	.word	0x00f42400
 8005c3c:	016e3600 	.word	0x016e3600

08005c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c44:	4b03      	ldr	r3, [pc, #12]	@ (8005c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c46:	681b      	ldr	r3, [r3, #0]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000008 	.word	0x20000008

08005c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c5c:	f7ff fff0 	bl	8005c40 <HAL_RCC_GetHCLKFreq>
 8005c60:	4602      	mov	r2, r0
 8005c62:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	4904      	ldr	r1, [pc, #16]	@ (8005c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c6e:	5ccb      	ldrb	r3, [r1, r3]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	0801c94c 	.word	0x0801c94c

08005c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c88:	f7ff ffda 	bl	8005c40 <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0adb      	lsrs	r3, r3, #11
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4904      	ldr	r1, [pc, #16]	@ (8005cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	0801c94c 	.word	0x0801c94c

08005cb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	220f      	movs	r2, #15
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005cc0:	4b12      	ldr	r3, [pc, #72]	@ (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0203 	and.w	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ce4:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <HAL_RCC_GetClockConfig+0x60>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	601a      	str	r2, [r3, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	40022000 	.word	0x40022000

08005d14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d24:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d10c      	bne.n	8005d52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	4a14      	ldr	r2, [pc, #80]	@ (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d42:	68d2      	ldr	r2, [r2, #12]
 8005d44:	0a12      	lsrs	r2, r2, #8
 8005d46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	617b      	str	r3, [r7, #20]
    break;
 8005d50:	e00c      	b.n	8005d6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d52:	4a12      	ldr	r2, [pc, #72]	@ (8005d9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d5c:	68d2      	ldr	r2, [r2, #12]
 8005d5e:	0a12      	lsrs	r2, r2, #8
 8005d60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	617b      	str	r3, [r7, #20]
    break;
 8005d6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d6c:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	0e5b      	lsrs	r3, r3, #25
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	3301      	adds	r3, #1
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d86:	687b      	ldr	r3, [r7, #4]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	40021000 	.word	0x40021000
 8005d98:	016e3600 	.word	0x016e3600
 8005d9c:	00f42400 	.word	0x00f42400

08005da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da8:	2300      	movs	r3, #0
 8005daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dac:	2300      	movs	r3, #0
 8005dae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 8098 	beq.w	8005eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc2:	4b43      	ldr	r3, [pc, #268]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dce:	4b40      	ldr	r3, [pc, #256]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dda:	4b3d      	ldr	r3, [pc, #244]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de6:	2301      	movs	r3, #1
 8005de8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dea:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a39      	ldr	r2, [pc, #228]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df6:	f7fd fc07 	bl	8003608 <HAL_GetTick>
 8005dfa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dfc:	e009      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfe:	f7fd fc03 	bl	8003608 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d902      	bls.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	74fb      	strb	r3, [r7, #19]
        break;
 8005e10:	e005      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e12:	4b30      	ldr	r3, [pc, #192]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0ef      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e1e:	7cfb      	ldrb	r3, [r7, #19]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d159      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e24:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01e      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d019      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e40:	4b23      	ldr	r3, [pc, #140]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e4c:	4b20      	ldr	r3, [pc, #128]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e52:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e62:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e6c:	4a18      	ldr	r2, [pc, #96]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fd fbc3 	bl	8003608 <HAL_GetTick>
 8005e82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e84:	e00b      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fd fbbf 	bl	8003608 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d902      	bls.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e9c:	e006      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0ec      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10b      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb2:	4b07      	ldr	r3, [pc, #28]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec0:	4903      	ldr	r1, [pc, #12]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ec8:	e008      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eca:	7cfb      	ldrb	r3, [r7, #19]
 8005ecc:	74bb      	strb	r3, [r7, #18]
 8005ece:	e005      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005edc:	7c7b      	ldrb	r3, [r7, #17]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d105      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee2:	4ba7      	ldr	r3, [pc, #668]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee6:	4aa6      	ldr	r2, [pc, #664]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005efa:	4ba1      	ldr	r3, [pc, #644]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f00:	f023 0203 	bic.w	r2, r3, #3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	499d      	ldr	r1, [pc, #628]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f1c:	4b98      	ldr	r3, [pc, #608]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f22:	f023 020c 	bic.w	r2, r3, #12
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	4995      	ldr	r1, [pc, #596]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f3e:	4b90      	ldr	r3, [pc, #576]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	498c      	ldr	r1, [pc, #560]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f60:	4b87      	ldr	r3, [pc, #540]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	4984      	ldr	r1, [pc, #528]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f82:	4b7f      	ldr	r3, [pc, #508]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	497b      	ldr	r1, [pc, #492]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fa4:	4b76      	ldr	r3, [pc, #472]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005faa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	4973      	ldr	r1, [pc, #460]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	496a      	ldr	r1, [pc, #424]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fe8:	4b65      	ldr	r3, [pc, #404]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4962      	ldr	r1, [pc, #392]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800600a:	4b5d      	ldr	r3, [pc, #372]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006010:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	4959      	ldr	r1, [pc, #356]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800602c:	4b54      	ldr	r3, [pc, #336]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006032:	f023 0203 	bic.w	r2, r3, #3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	4951      	ldr	r1, [pc, #324]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800604e:	4b4c      	ldr	r3, [pc, #304]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006054:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	4948      	ldr	r1, [pc, #288]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800606c:	2b00      	cmp	r3, #0
 800606e:	d015      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006070:	4b43      	ldr	r3, [pc, #268]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607e:	4940      	ldr	r1, [pc, #256]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800608e:	d105      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006090:	4b3b      	ldr	r3, [pc, #236]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4a3a      	ldr	r2, [pc, #232]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800609a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d015      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060a8:	4b35      	ldr	r3, [pc, #212]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b6:	4932      	ldr	r1, [pc, #200]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060c6:	d105      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d015      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060e0:	4b27      	ldr	r3, [pc, #156]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ee:	4924      	ldr	r1, [pc, #144]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060fe:	d105      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006100:	4b1f      	ldr	r3, [pc, #124]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4a1e      	ldr	r2, [pc, #120]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800610a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d015      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006118:	4b19      	ldr	r3, [pc, #100]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006126:	4916      	ldr	r1, [pc, #88]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006136:	d105      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006138:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4a10      	ldr	r2, [pc, #64]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006142:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d019      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006156:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	4908      	ldr	r1, [pc, #32]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800616e:	d109      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006170:	4b03      	ldr	r3, [pc, #12]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4a02      	ldr	r2, [pc, #8]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800617a:	60d3      	str	r3, [r2, #12]
 800617c:	e002      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006190:	4b29      	ldr	r3, [pc, #164]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619e:	4926      	ldr	r1, [pc, #152]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ae:	d105      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061b0:	4b21      	ldr	r3, [pc, #132]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4a20      	ldr	r2, [pc, #128]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d015      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80061c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d6:	4918      	ldr	r1, [pc, #96]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d105      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061e8:	4b13      	ldr	r3, [pc, #76]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4a12      	ldr	r2, [pc, #72]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d015      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006200:	4b0d      	ldr	r3, [pc, #52]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006206:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620e:	490a      	ldr	r1, [pc, #40]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800621e:	d105      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006220:	4b05      	ldr	r3, [pc, #20]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	4a04      	ldr	r2, [pc, #16]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800622a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800622c:	7cbb      	ldrb	r3, [r7, #18]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000

0800623c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e049      	b.n	80062e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f841 	bl	80062ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f000 fa30 	bl	80066e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d001      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e054      	b.n	80063c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a26      	ldr	r2, [pc, #152]	@ (80063d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d022      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x80>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006342:	d01d      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x80>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x80>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x80>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <HAL_TIM_Base_Start_IT+0xdc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x80>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1e      	ldr	r2, [pc, #120]	@ (80063e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x80>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1c      	ldr	r2, [pc, #112]	@ (80063e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x80>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d115      	bne.n	80063ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	4b19      	ldr	r3, [pc, #100]	@ (80063ec <HAL_TIM_Base_Start_IT+0xec>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d015      	beq.n	80063be <HAL_TIM_Base_Start_IT+0xbe>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006398:	d011      	beq.n	80063be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063aa:	e008      	b.n	80063be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800
 80063dc:	40000c00 	.word	0x40000c00
 80063e0:	40013400 	.word	0x40013400
 80063e4:	40014000 	.word	0x40014000
 80063e8:	40015000 	.word	0x40015000
 80063ec:	00010007 	.word	0x00010007

080063f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d020      	beq.n	8006454 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01b      	beq.n	8006454 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0202 	mvn.w	r2, #2
 8006424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f931 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 8006440:	e005      	b.n	800644e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f923 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f934 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d020      	beq.n	80064a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01b      	beq.n	80064a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0204 	mvn.w	r2, #4
 8006470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f90b 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 800648c:	e005      	b.n	800649a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8fd 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f90e 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d020      	beq.n	80064ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0208 	mvn.w	r2, #8
 80064bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2204      	movs	r2, #4
 80064c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8e5 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 80064d8:	e005      	b.n	80064e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8d7 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f8e8 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d020      	beq.n	8006538 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0210 	mvn.w	r2, #16
 8006508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2208      	movs	r2, #8
 800650e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f8bf 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8b1 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8c2 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0201 	mvn.w	r2, #1
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fc f892 	bl	8002680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00c      	beq.n	800658a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f969 	bl	800685c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00c      	beq.n	80065ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f961 	bl	8006870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00c      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f87c 	bl	80066ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00c      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0220 	mvn.w	r2, #32
 80065ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f929 	bl	8006848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00c      	beq.n	800661a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f935 	bl	8006884 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00c      	beq.n	800663e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f92d 	bl	8006898 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00c      	beq.n	8006662 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800665a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f925 	bl	80068ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00c      	beq.n	8006686 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800667e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f91d 	bl	80068c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a4c      	ldr	r2, [pc, #304]	@ (8006824 <TIM_Base_SetConfig+0x144>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d017      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fe:	d013      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a49      	ldr	r2, [pc, #292]	@ (8006828 <TIM_Base_SetConfig+0x148>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a48      	ldr	r2, [pc, #288]	@ (800682c <TIM_Base_SetConfig+0x14c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a47      	ldr	r2, [pc, #284]	@ (8006830 <TIM_Base_SetConfig+0x150>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a46      	ldr	r2, [pc, #280]	@ (8006834 <TIM_Base_SetConfig+0x154>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a45      	ldr	r2, [pc, #276]	@ (8006838 <TIM_Base_SetConfig+0x158>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a39      	ldr	r2, [pc, #228]	@ (8006824 <TIM_Base_SetConfig+0x144>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d023      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006748:	d01f      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a36      	ldr	r2, [pc, #216]	@ (8006828 <TIM_Base_SetConfig+0x148>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01b      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a35      	ldr	r2, [pc, #212]	@ (800682c <TIM_Base_SetConfig+0x14c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d017      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a34      	ldr	r2, [pc, #208]	@ (8006830 <TIM_Base_SetConfig+0x150>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a33      	ldr	r2, [pc, #204]	@ (8006834 <TIM_Base_SetConfig+0x154>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a33      	ldr	r2, [pc, #204]	@ (800683c <TIM_Base_SetConfig+0x15c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a32      	ldr	r2, [pc, #200]	@ (8006840 <TIM_Base_SetConfig+0x160>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a31      	ldr	r2, [pc, #196]	@ (8006844 <TIM_Base_SetConfig+0x164>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2c      	ldr	r2, [pc, #176]	@ (8006838 <TIM_Base_SetConfig+0x158>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <TIM_Base_SetConfig+0x144>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006834 <TIM_Base_SetConfig+0x154>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a1a      	ldr	r2, [pc, #104]	@ (800683c <TIM_Base_SetConfig+0x15c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a19      	ldr	r2, [pc, #100]	@ (8006840 <TIM_Base_SetConfig+0x160>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <TIM_Base_SetConfig+0x164>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a13      	ldr	r2, [pc, #76]	@ (8006838 <TIM_Base_SetConfig+0x158>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d103      	bne.n	80067f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	d105      	bne.n	8006816 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f023 0201 	bic.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	611a      	str	r2, [r3, #16]
  }
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40015000 	.word	0x40015000
 800683c:	40014000 	.word	0x40014000
 8006840:	40014400 	.word	0x40014400
 8006844:	40014800 	.word	0x40014800

08006848 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e042      	b.n	800696c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fb ff81 	bl	8002800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2224      	movs	r2, #36	@ 0x24
 8006902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f806 	bl	8007930 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fd07 	bl	8007338 <UART_SetConfig>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e01b      	b.n	800696c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f885 	bl	8007a74 <UART_CheckIdleState>
 800696a:	4603      	mov	r3, r0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	@ 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006988:	2b20      	cmp	r3, #32
 800698a:	d167      	bne.n	8006a5c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_UART_Transmit_DMA+0x24>
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e060      	b.n	8006a5e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2221      	movs	r2, #33	@ 0x21
 80069be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d028      	beq.n	8006a1c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ce:	4a26      	ldr	r2, [pc, #152]	@ (8006a68 <HAL_UART_Transmit_DMA+0xf4>)
 80069d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d6:	4a25      	ldr	r2, [pc, #148]	@ (8006a6c <HAL_UART_Transmit_DMA+0xf8>)
 80069d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069de:	4a24      	ldr	r2, [pc, #144]	@ (8006a70 <HAL_UART_Transmit_DMA+0xfc>)
 80069e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069e6:	2200      	movs	r2, #0
 80069e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f2:	4619      	mov	r1, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3328      	adds	r3, #40	@ 0x28
 80069fa:	461a      	mov	r2, r3
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	f7fc ff97 	bl	8003930 <HAL_DMA_Start_IT>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e020      	b.n	8006a5e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2240      	movs	r2, #64	@ 0x40
 8006a22:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	613b      	str	r3, [r7, #16]
   return(result);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3308      	adds	r3, #8
 8006a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a44:	623a      	str	r2, [r7, #32]
 8006a46:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	69f9      	ldr	r1, [r7, #28]
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e5      	bne.n	8006a24 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e000      	b.n	8006a5e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3728      	adds	r7, #40	@ 0x28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08007f3f 	.word	0x08007f3f
 8006a6c:	08007fd9 	.word	0x08007fd9
 8006a70:	0800815f 	.word	0x0800815f

08006a74 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	@ 0x28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d137      	bne.n	8006afc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_UART_Receive_DMA+0x24>
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e030      	b.n	8006afe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	@ (8006b08 <HAL_UART_Receive_DMA+0x94>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d01f      	beq.n	8006aec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d018      	beq.n	8006aec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	623b      	str	r3, [r7, #32]
 8006ada:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	69f9      	ldr	r1, [r7, #28]
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	461a      	mov	r2, r3
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f001 f8d6 	bl	8007ca4 <UART_Start_Receive_DMA>
 8006af8:	4603      	mov	r3, r0
 8006afa:	e000      	b.n	8006afe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	@ 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40008000 	.word	0x40008000

08006b0c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b090      	sub	sp, #64	@ 0x40
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2e:	2b80      	cmp	r3, #128	@ 0x80
 8006b30:	d139      	bne.n	8006ba6 <HAL_UART_DMAStop+0x9a>
 8006b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b34:	2b21      	cmp	r3, #33	@ 0x21
 8006b36:	d136      	bne.n	8006ba6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3308      	adds	r3, #8
 8006b56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fc ff54 	bl	8003a26 <HAL_DMA_Abort>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fd f8bb 	bl	8003d04 <HAL_DMA_GetError>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d105      	bne.n	8006ba0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2210      	movs	r2, #16
 8006b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e047      	b.n	8006c30 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f925 	bl	8007df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb0:	2b40      	cmp	r3, #64	@ 0x40
 8006bb2:	d13c      	bne.n	8006c2e <HAL_UART_DMAStop+0x122>
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	2b22      	cmp	r3, #34	@ 0x22
 8006bb8:	d139      	bne.n	8006c2e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bda:	61ba      	str	r2, [r7, #24]
 8006bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6979      	ldr	r1, [r7, #20]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d017      	beq.n	8006c28 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fc ff11 	bl	8003a26 <HAL_DMA_Abort>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fd f877 	bl	8003d04 <HAL_DMA_GetError>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d105      	bne.n	8006c28 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2210      	movs	r2, #16
 8006c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e003      	b.n	8006c30 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 f922 	bl	8007e72 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3740      	adds	r7, #64	@ 0x40
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c66:	4013      	ands	r3, r2
 8006c68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11b      	bne.n	8006cac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d015      	beq.n	8006cac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d105      	bne.n	8006c98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8300 	beq.w	80072a2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
      }
      return;
 8006caa:	e2fa      	b.n	80072a2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8123 	beq.w	8006efc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006cba:	4b8d      	ldr	r3, [pc, #564]	@ (8006ef0 <HAL_UART_IRQHandler+0x2b8>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ef4 <HAL_UART_IRQHandler+0x2bc>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8116 	beq.w	8006efc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d011      	beq.n	8006d00 <HAL_UART_IRQHandler+0xc8>
 8006cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2201      	movs	r2, #1
 8006cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf6:	f043 0201 	orr.w	r2, r3, #1
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d011      	beq.n	8006d30 <HAL_UART_IRQHandler+0xf8>
 8006d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d26:	f043 0204 	orr.w	r2, r3, #4
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d011      	beq.n	8006d60 <HAL_UART_IRQHandler+0x128>
 8006d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d56:	f043 0202 	orr.w	r2, r3, #2
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d017      	beq.n	8006d9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d105      	bne.n	8006d84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ef0 <HAL_UART_IRQHandler+0x2b8>)
 8006d7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00b      	beq.n	8006d9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d92:	f043 0208 	orr.w	r2, r3, #8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d012      	beq.n	8006dce <HAL_UART_IRQHandler+0x196>
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00c      	beq.n	8006dce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc4:	f043 0220 	orr.w	r2, r3, #32
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8266 	beq.w	80072a6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d013      	beq.n	8006e0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d007      	beq.n	8006e0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e22:	2b40      	cmp	r3, #64	@ 0x40
 8006e24:	d005      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d054      	beq.n	8006edc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 f81d 	bl	8007e72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	d146      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1d9      	bne.n	8006e46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d017      	beq.n	8006ecc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ea2:	4a15      	ldr	r2, [pc, #84]	@ (8006ef8 <HAL_UART_IRQHandler+0x2c0>)
 8006ea4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fc fe13 	bl	8003ad8 <HAL_DMA_Abort_IT>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d019      	beq.n	8006eec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eca:	e00f      	b.n	8006eec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa1d 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed2:	e00b      	b.n	8006eec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fa19 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eda:	e007      	b.n	8006eec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa15 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006eea:	e1dc      	b.n	80072a6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	bf00      	nop
    return;
 8006eee:	e1da      	b.n	80072a6 <HAL_UART_IRQHandler+0x66e>
 8006ef0:	10000001 	.word	0x10000001
 8006ef4:	04000120 	.word	0x04000120
 8006ef8:	080081df 	.word	0x080081df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	f040 8170 	bne.w	80071e6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8169 	beq.w	80071e6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8162 	beq.w	80071e6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2210      	movs	r2, #16
 8006f28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b40      	cmp	r3, #64	@ 0x40
 8006f36:	f040 80d8 	bne.w	80070ea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80af 	beq.w	80070b0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	f080 80a7 	bcs.w	80070b0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 8087 	bne.w	800708e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006faa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1da      	bne.n	8006f80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e1      	bne.n	8006fca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800701c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3308      	adds	r3, #8
 8007026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800702a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800702c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e3      	bne.n	8007006 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800705a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800705c:	f023 0310 	bic.w	r3, r3, #16
 8007060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800706e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007070:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800707c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e4      	bne.n	800704c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007088:	4618      	mov	r0, r3
 800708a:	f7fc fccc 	bl	8003a26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f939 	bl	8007320 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80070ae:	e0fc      	b.n	80072aa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f040 80f5 	bne.w	80072aa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	f040 80eb 	bne.w	80072aa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f91c 	bl	8007320 <HAL_UARTEx_RxEventCallback>
      return;
 80070e8:	e0df      	b.n	80072aa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80d1 	beq.w	80072ae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800710c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80cc 	beq.w	80072ae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800712a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007138:	647b      	str	r3, [r7, #68]	@ 0x44
 800713a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800713e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e4      	bne.n	8007116 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	623b      	str	r3, [r7, #32]
   return(result);
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007174:	633a      	str	r2, [r7, #48]	@ 0x30
 8007176:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800717a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e1      	bne.n	800714c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f023 0310 	bic.w	r3, r3, #16
 80071b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	69b9      	ldr	r1, [r7, #24]
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	617b      	str	r3, [r7, #20]
   return(result);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e4      	bne.n	800719c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f89e 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071e4:	e063      	b.n	80072ae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00e      	beq.n	8007210 <HAL_UART_IRQHandler+0x5d8>
 80071f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d008      	beq.n	8007210 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f825 	bl	8008258 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800720e:	e051      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007218:	2b00      	cmp	r3, #0
 800721a:	d014      	beq.n	8007246 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800722c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007238:	2b00      	cmp	r3, #0
 800723a:	d03a      	beq.n	80072b2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
    }
    return;
 8007244:	e035      	b.n	80072b2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <HAL_UART_IRQHandler+0x62e>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 ffcf 	bl	8008202 <UART_EndTransmit_IT>
    return;
 8007264:	e026      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <HAL_UART_IRQHandler+0x64e>
 8007272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007276:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fffe 	bl	8008280 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007284:	e016      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800728a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d010      	beq.n	80072b4 <HAL_UART_IRQHandler+0x67c>
 8007292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007296:	2b00      	cmp	r3, #0
 8007298:	da0c      	bge.n	80072b4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 ffe6 	bl	800826c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072a0:	e008      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80072a2:	bf00      	nop
 80072a4:	e006      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80072a6:	bf00      	nop
 80072a8:	e004      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80072aa:	bf00      	nop
 80072ac:	e002      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80072ae:	bf00      	nop
 80072b0:	e000      	b.n	80072b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80072b2:	bf00      	nop
  }
}
 80072b4:	37e8      	adds	r7, #232	@ 0xe8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop

080072bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b08c      	sub	sp, #48	@ 0x30
 800733e:	af00      	add	r7, sp, #0
 8007340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	431a      	orrs	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	431a      	orrs	r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	4313      	orrs	r3, r2
 800735e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4baa      	ldr	r3, [pc, #680]	@ (8007610 <UART_SetConfig+0x2d8>)
 8007368:	4013      	ands	r3, r2
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007370:	430b      	orrs	r3, r1
 8007372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a9f      	ldr	r2, [pc, #636]	@ (8007614 <UART_SetConfig+0x2dc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a0:	4313      	orrs	r3, r2
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80073ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c2:	f023 010f 	bic.w	r1, r3, #15
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a90      	ldr	r2, [pc, #576]	@ (8007618 <UART_SetConfig+0x2e0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d125      	bne.n	8007428 <UART_SetConfig+0xf0>
 80073dc:	4b8f      	ldr	r3, [pc, #572]	@ (800761c <UART_SetConfig+0x2e4>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d81a      	bhi.n	8007420 <UART_SetConfig+0xe8>
 80073ea:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <UART_SetConfig+0xb8>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007401 	.word	0x08007401
 80073f4:	08007411 	.word	0x08007411
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007419 	.word	0x08007419
 8007400:	2301      	movs	r3, #1
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007406:	e116      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740e:	e112      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007416:	e10e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e10a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007426:	e106      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a7c      	ldr	r2, [pc, #496]	@ (8007620 <UART_SetConfig+0x2e8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d138      	bne.n	80074a4 <UART_SetConfig+0x16c>
 8007432:	4b7a      	ldr	r3, [pc, #488]	@ (800761c <UART_SetConfig+0x2e4>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007438:	f003 030c 	and.w	r3, r3, #12
 800743c:	2b0c      	cmp	r3, #12
 800743e:	d82d      	bhi.n	800749c <UART_SetConfig+0x164>
 8007440:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <UART_SetConfig+0x110>)
 8007442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007446:	bf00      	nop
 8007448:	0800747d 	.word	0x0800747d
 800744c:	0800749d 	.word	0x0800749d
 8007450:	0800749d 	.word	0x0800749d
 8007454:	0800749d 	.word	0x0800749d
 8007458:	0800748d 	.word	0x0800748d
 800745c:	0800749d 	.word	0x0800749d
 8007460:	0800749d 	.word	0x0800749d
 8007464:	0800749d 	.word	0x0800749d
 8007468:	08007485 	.word	0x08007485
 800746c:	0800749d 	.word	0x0800749d
 8007470:	0800749d 	.word	0x0800749d
 8007474:	0800749d 	.word	0x0800749d
 8007478:	08007495 	.word	0x08007495
 800747c:	2300      	movs	r3, #0
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007482:	e0d8      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007484:	2302      	movs	r3, #2
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748a:	e0d4      	b.n	8007636 <UART_SetConfig+0x2fe>
 800748c:	2304      	movs	r3, #4
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007492:	e0d0      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007494:	2308      	movs	r3, #8
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749a:	e0cc      	b.n	8007636 <UART_SetConfig+0x2fe>
 800749c:	2310      	movs	r3, #16
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a2:	e0c8      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a5e      	ldr	r2, [pc, #376]	@ (8007624 <UART_SetConfig+0x2ec>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d125      	bne.n	80074fa <UART_SetConfig+0x1c2>
 80074ae:	4b5b      	ldr	r3, [pc, #364]	@ (800761c <UART_SetConfig+0x2e4>)
 80074b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074b8:	2b30      	cmp	r3, #48	@ 0x30
 80074ba:	d016      	beq.n	80074ea <UART_SetConfig+0x1b2>
 80074bc:	2b30      	cmp	r3, #48	@ 0x30
 80074be:	d818      	bhi.n	80074f2 <UART_SetConfig+0x1ba>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d00a      	beq.n	80074da <UART_SetConfig+0x1a2>
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d814      	bhi.n	80074f2 <UART_SetConfig+0x1ba>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <UART_SetConfig+0x19a>
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d008      	beq.n	80074e2 <UART_SetConfig+0x1aa>
 80074d0:	e00f      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d8:	e0ad      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074da:	2302      	movs	r3, #2
 80074dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e0:	e0a9      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074e2:	2304      	movs	r3, #4
 80074e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e8:	e0a5      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074ea:	2308      	movs	r3, #8
 80074ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f0:	e0a1      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074f2:	2310      	movs	r3, #16
 80074f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f8:	e09d      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007628 <UART_SetConfig+0x2f0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d125      	bne.n	8007550 <UART_SetConfig+0x218>
 8007504:	4b45      	ldr	r3, [pc, #276]	@ (800761c <UART_SetConfig+0x2e4>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800750e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007510:	d016      	beq.n	8007540 <UART_SetConfig+0x208>
 8007512:	2bc0      	cmp	r3, #192	@ 0xc0
 8007514:	d818      	bhi.n	8007548 <UART_SetConfig+0x210>
 8007516:	2b80      	cmp	r3, #128	@ 0x80
 8007518:	d00a      	beq.n	8007530 <UART_SetConfig+0x1f8>
 800751a:	2b80      	cmp	r3, #128	@ 0x80
 800751c:	d814      	bhi.n	8007548 <UART_SetConfig+0x210>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <UART_SetConfig+0x1f0>
 8007522:	2b40      	cmp	r3, #64	@ 0x40
 8007524:	d008      	beq.n	8007538 <UART_SetConfig+0x200>
 8007526:	e00f      	b.n	8007548 <UART_SetConfig+0x210>
 8007528:	2300      	movs	r3, #0
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752e:	e082      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007530:	2302      	movs	r3, #2
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007536:	e07e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e07a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e076      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754e:	e072      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a35      	ldr	r2, [pc, #212]	@ (800762c <UART_SetConfig+0x2f4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d12a      	bne.n	80075b0 <UART_SetConfig+0x278>
 800755a:	4b30      	ldr	r3, [pc, #192]	@ (800761c <UART_SetConfig+0x2e4>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007568:	d01a      	beq.n	80075a0 <UART_SetConfig+0x268>
 800756a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800756e:	d81b      	bhi.n	80075a8 <UART_SetConfig+0x270>
 8007570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007574:	d00c      	beq.n	8007590 <UART_SetConfig+0x258>
 8007576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800757a:	d815      	bhi.n	80075a8 <UART_SetConfig+0x270>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <UART_SetConfig+0x250>
 8007580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007584:	d008      	beq.n	8007598 <UART_SetConfig+0x260>
 8007586:	e00f      	b.n	80075a8 <UART_SetConfig+0x270>
 8007588:	2300      	movs	r3, #0
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758e:	e052      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007590:	2302      	movs	r3, #2
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007596:	e04e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007598:	2304      	movs	r3, #4
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759e:	e04a      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075a0:	2308      	movs	r3, #8
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a6:	e046      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ae:	e042      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a17      	ldr	r2, [pc, #92]	@ (8007614 <UART_SetConfig+0x2dc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d13a      	bne.n	8007630 <UART_SetConfig+0x2f8>
 80075ba:	4b18      	ldr	r3, [pc, #96]	@ (800761c <UART_SetConfig+0x2e4>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075c8:	d01a      	beq.n	8007600 <UART_SetConfig+0x2c8>
 80075ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075ce:	d81b      	bhi.n	8007608 <UART_SetConfig+0x2d0>
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075d4:	d00c      	beq.n	80075f0 <UART_SetConfig+0x2b8>
 80075d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075da:	d815      	bhi.n	8007608 <UART_SetConfig+0x2d0>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <UART_SetConfig+0x2b0>
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e4:	d008      	beq.n	80075f8 <UART_SetConfig+0x2c0>
 80075e6:	e00f      	b.n	8007608 <UART_SetConfig+0x2d0>
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ee:	e022      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075f0:	2302      	movs	r3, #2
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f6:	e01e      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fe:	e01a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007606:	e016      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800760e:	e012      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007610:	cfff69f3 	.word	0xcfff69f3
 8007614:	40008000 	.word	0x40008000
 8007618:	40013800 	.word	0x40013800
 800761c:	40021000 	.word	0x40021000
 8007620:	40004400 	.word	0x40004400
 8007624:	40004800 	.word	0x40004800
 8007628:	40004c00 	.word	0x40004c00
 800762c:	40005000 	.word	0x40005000
 8007630:	2310      	movs	r3, #16
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4aae      	ldr	r2, [pc, #696]	@ (80078f4 <UART_SetConfig+0x5bc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	f040 8097 	bne.w	8007770 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007642:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007646:	2b08      	cmp	r3, #8
 8007648:	d823      	bhi.n	8007692 <UART_SetConfig+0x35a>
 800764a:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <UART_SetConfig+0x318>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007675 	.word	0x08007675
 8007654:	08007693 	.word	0x08007693
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007693 	.word	0x08007693
 8007660:	08007683 	.word	0x08007683
 8007664:	08007693 	.word	0x08007693
 8007668:	08007693 	.word	0x08007693
 800766c:	08007693 	.word	0x08007693
 8007670:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007674:	f7fe faf0 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 8007678:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767a:	e010      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b9e      	ldr	r3, [pc, #632]	@ (80078f8 <UART_SetConfig+0x5c0>)
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007680:	e00d      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fe fa7b 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007686:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007688:	e009      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007690:	e005      	b.n	800769e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800769c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8130 	beq.w	8007906 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076aa:	4a94      	ldr	r2, [pc, #592]	@ (80078fc <UART_SetConfig+0x5c4>)
 80076ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d305      	bcc.n	80076d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d903      	bls.n	80076de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076dc:	e113      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	2200      	movs	r2, #0
 80076e2:	60bb      	str	r3, [r7, #8]
 80076e4:	60fa      	str	r2, [r7, #12]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ea:	4a84      	ldr	r2, [pc, #528]	@ (80078fc <UART_SetConfig+0x5c4>)
 80076ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2200      	movs	r2, #0
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007700:	f7f9 fb02 	bl	8000d08 <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4610      	mov	r0, r2
 800770a:	4619      	mov	r1, r3
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	020b      	lsls	r3, r1, #8
 8007716:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800771a:	0202      	lsls	r2, r0, #8
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	6849      	ldr	r1, [r1, #4]
 8007720:	0849      	lsrs	r1, r1, #1
 8007722:	2000      	movs	r0, #0
 8007724:	460c      	mov	r4, r1
 8007726:	4605      	mov	r5, r0
 8007728:	eb12 0804 	adds.w	r8, r2, r4
 800772c:	eb43 0905 	adc.w	r9, r3, r5
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	469a      	mov	sl, r3
 8007738:	4693      	mov	fp, r2
 800773a:	4652      	mov	r2, sl
 800773c:	465b      	mov	r3, fp
 800773e:	4640      	mov	r0, r8
 8007740:	4649      	mov	r1, r9
 8007742:	f7f9 fae1 	bl	8000d08 <__aeabi_uldivmod>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4613      	mov	r3, r2
 800774c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007754:	d308      	bcc.n	8007768 <UART_SetConfig+0x430>
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800775c:	d204      	bcs.n	8007768 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6a3a      	ldr	r2, [r7, #32]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	e0ce      	b.n	8007906 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800776e:	e0ca      	b.n	8007906 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007778:	d166      	bne.n	8007848 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800777a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800777e:	2b08      	cmp	r3, #8
 8007780:	d827      	bhi.n	80077d2 <UART_SetConfig+0x49a>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <UART_SetConfig+0x450>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	080077d3 	.word	0x080077d3
 8007798:	080077c3 	.word	0x080077c3
 800779c:	080077d3 	.word	0x080077d3
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077d3 	.word	0x080077d3
 80077a8:	080077cb 	.word	0x080077cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fe fa54 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 80077b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077b2:	e014      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b4:	f7fe fa66 	bl	8005c84 <HAL_RCC_GetPCLK2Freq>
 80077b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077ba:	e010      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b4e      	ldr	r3, [pc, #312]	@ (80078f8 <UART_SetConfig+0x5c0>)
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077c0:	e00d      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fe f9db 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 80077c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077c8:	e009      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077d0:	e005      	b.n	80077de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8090 	beq.w	8007906 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	4a44      	ldr	r2, [pc, #272]	@ (80078fc <UART_SetConfig+0x5c4>)
 80077ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	441a      	add	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	2b0f      	cmp	r3, #15
 8007810:	d916      	bls.n	8007840 <UART_SetConfig+0x508>
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007818:	d212      	bcs.n	8007840 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f023 030f 	bic.w	r3, r3, #15
 8007822:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	b29a      	uxth	r2, r3
 8007830:	8bfb      	ldrh	r3, [r7, #30]
 8007832:	4313      	orrs	r3, r2
 8007834:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	8bfa      	ldrh	r2, [r7, #30]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	e062      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007846:	e05e      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007848:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800784c:	2b08      	cmp	r3, #8
 800784e:	d828      	bhi.n	80078a2 <UART_SetConfig+0x56a>
 8007850:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <UART_SetConfig+0x520>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	080078a3 	.word	0x080078a3
 8007868:	08007893 	.word	0x08007893
 800786c:	080078a3 	.word	0x080078a3
 8007870:	080078a3 	.word	0x080078a3
 8007874:	080078a3 	.word	0x080078a3
 8007878:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fe f9ec 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 8007880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007882:	e014      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007884:	f7fe f9fe 	bl	8005c84 <HAL_RCC_GetPCLK2Freq>
 8007888:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800788a:	e010      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b1a      	ldr	r3, [pc, #104]	@ (80078f8 <UART_SetConfig+0x5c0>)
 800788e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007890:	e00d      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fe f973 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8007896:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007898:	e009      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800789e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078a0:	e005      	b.n	80078ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078ac:	bf00      	nop
    }

    if (pclk != 0U)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d028      	beq.n	8007906 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	4a10      	ldr	r2, [pc, #64]	@ (80078fc <UART_SetConfig+0x5c4>)
 80078ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078be:	461a      	mov	r2, r3
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	441a      	add	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2b0f      	cmp	r3, #15
 80078dc:	d910      	bls.n	8007900 <UART_SetConfig+0x5c8>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e4:	d20c      	bcs.n	8007900 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60da      	str	r2, [r3, #12]
 80078f0:	e009      	b.n	8007906 <UART_SetConfig+0x5ce>
 80078f2:	bf00      	nop
 80078f4:	40008000 	.word	0x40008000
 80078f8:	00f42400 	.word	0x00f42400
 80078fc:	0801c954 	.word	0x0801c954
      }
      else
      {
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2201      	movs	r2, #1
 800790a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2201      	movs	r2, #1
 8007912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2200      	movs	r2, #0
 800791a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007922:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007926:	4618      	mov	r0, r3
 8007928:	3730      	adds	r7, #48	@ 0x30
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01a      	beq.n	8007a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a2e:	d10a      	bne.n	8007a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	605a      	str	r2, [r3, #4]
  }
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b098      	sub	sp, #96	@ 0x60
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a84:	f7fb fdc0 	bl	8003608 <HAL_GetTick>
 8007a88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d12f      	bne.n	8007af8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f88e 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d022      	beq.n	8007af8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ad2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e6      	bne.n	8007ab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e063      	b.n	8007bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d149      	bne.n	8007b9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f857 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d03c      	beq.n	8007b9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b72:	61fa      	str	r2, [r7, #28]
 8007b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	69b9      	ldr	r1, [r7, #24]
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e012      	b.n	8007bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3758      	adds	r7, #88	@ 0x58
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd8:	e04f      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007be0:	d04b      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be2:	f7fb fd11 	bl	8003608 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e04e      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d037      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b80      	cmp	r3, #128	@ 0x80
 8007c0e:	d034      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b40      	cmp	r3, #64	@ 0x40
 8007c14:	d031      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d110      	bne.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2208      	movs	r2, #8
 8007c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f920 	bl	8007e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2208      	movs	r2, #8
 8007c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e029      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c54:	d111      	bne.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f906 	bl	8007e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e00f      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4013      	ands	r3, r2
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	bf0c      	ite	eq
 8007c8a:	2301      	moveq	r3, #1
 8007c8c:	2300      	movne	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d0a0      	beq.n	8007bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b096      	sub	sp, #88	@ 0x58
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2222      	movs	r2, #34	@ 0x22
 8007ccc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02d      	beq.n	8007d36 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce0:	4a40      	ldr	r2, [pc, #256]	@ (8007de4 <UART_Start_Receive_DMA+0x140>)
 8007ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cea:	4a3f      	ldr	r2, [pc, #252]	@ (8007de8 <UART_Start_Receive_DMA+0x144>)
 8007cec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8007dec <UART_Start_Receive_DMA+0x148>)
 8007cf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cfe:	2200      	movs	r2, #0
 8007d00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3324      	adds	r3, #36	@ 0x24
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d14:	461a      	mov	r2, r3
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	f7fb fe0a 	bl	8003930 <HAL_DMA_Start_IT>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2210      	movs	r2, #16
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e051      	b.n	8007dda <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d018      	beq.n	8007d70 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d5e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d90:	637a      	str	r2, [r7, #52]	@ 0x34
 8007d92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	613b      	str	r3, [r7, #16]
   return(result);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dc4:	623a      	str	r2, [r7, #32]
 8007dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3758      	adds	r7, #88	@ 0x58
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	08007ff5 	.word	0x08007ff5
 8007de8:	08008121 	.word	0x08008121
 8007dec:	0800815f 	.word	0x0800815f

08007df0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b08f      	sub	sp, #60	@ 0x3c
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e18:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e6      	bne.n	8007df8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3308      	adds	r3, #8
 8007e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4a:	61ba      	str	r2, [r7, #24]
 8007e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e5      	bne.n	8007e2a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007e66:	bf00      	nop
 8007e68:	373c      	adds	r7, #60	@ 0x3c
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b095      	sub	sp, #84	@ 0x54
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e3      	bne.n	8007eac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d118      	bne.n	8007f1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f023 0310 	bic.w	r3, r3, #16
 8007f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6979      	ldr	r1, [r7, #20]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	613b      	str	r3, [r7, #16]
   return(result);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e6      	bne.n	8007eec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f32:	bf00      	nop
 8007f34:	3754      	adds	r7, #84	@ 0x54
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b090      	sub	sp, #64	@ 0x40
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d137      	bne.n	8007fca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	623b      	str	r3, [r7, #32]
   return(result);
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f82:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e5      	bne.n	8007f62 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	69b9      	ldr	r1, [r7, #24]
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e6      	bne.n	8007f96 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fc8:	e002      	b.n	8007fd0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007fca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007fcc:	f7ff f976 	bl	80072bc <HAL_UART_TxCpltCallback>
}
 8007fd0:	bf00      	nop
 8007fd2:	3740      	adds	r7, #64	@ 0x40
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff f972 	bl	80072d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b09c      	sub	sp, #112	@ 0x70
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b00      	cmp	r3, #0
 800800e:	d171      	bne.n	80080f4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008012:	2200      	movs	r2, #0
 8008014:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800802c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800802e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008036:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008038:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800803c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e6      	bne.n	8008018 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800805a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	667b      	str	r3, [r7, #100]	@ 0x64
 8008062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800806a:	647a      	str	r2, [r7, #68]	@ 0x44
 800806c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008070:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800807e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	623b      	str	r3, [r7, #32]
   return(result);
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008094:	663b      	str	r3, [r7, #96]	@ 0x60
 8008096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3308      	adds	r3, #8
 800809c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800809e:	633a      	str	r2, [r7, #48]	@ 0x30
 80080a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e5      	bne.n	800807e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d118      	bne.n	80080f4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	69b9      	ldr	r1, [r7, #24]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	617b      	str	r3, [r7, #20]
   return(result);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080f6:	2200      	movs	r2, #0
 80080f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d107      	bne.n	8008112 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008108:	4619      	mov	r1, r3
 800810a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800810c:	f7ff f908 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008110:	e002      	b.n	8008118 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008112:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008114:	f7ff f8e6 	bl	80072e4 <HAL_UART_RxCpltCallback>
}
 8008118:	bf00      	nop
 800811a:	3770      	adds	r7, #112	@ 0x70
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d109      	bne.n	8008150 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	b29b      	uxth	r3, r3
 8008146:	4619      	mov	r1, r3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff f8e9 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800814e:	e002      	b.n	8008156 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff f8d1 	bl	80072f8 <HAL_UART_RxHalfCpltCallback>
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b086      	sub	sp, #24
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008172:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800817a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008186:	2b80      	cmp	r3, #128	@ 0x80
 8008188:	d109      	bne.n	800819e <UART_DMAError+0x40>
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b21      	cmp	r3, #33	@ 0x21
 800818e:	d106      	bne.n	800819e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2200      	movs	r2, #0
 8008194:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008198:	6978      	ldr	r0, [r7, #20]
 800819a:	f7ff fe29 	bl	8007df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a8:	2b40      	cmp	r3, #64	@ 0x40
 80081aa:	d109      	bne.n	80081c0 <UART_DMAError+0x62>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b22      	cmp	r3, #34	@ 0x22
 80081b0:	d106      	bne.n	80081c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80081ba:	6978      	ldr	r0, [r7, #20]
 80081bc:	f7ff fe59 	bl	8007e72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c6:	f043 0210 	orr.w	r2, r3, #16
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081d0:	6978      	ldr	r0, [r7, #20]
 80081d2:	f7ff f89b 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081d6:	bf00      	nop
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff f889 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b088      	sub	sp, #32
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	e853 3f00 	ldrex	r3, [r3]
 8008216:	60bb      	str	r3, [r7, #8]
   return(result);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	461a      	mov	r2, r3
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6979      	ldr	r1, [r7, #20]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	613b      	str	r3, [r7, #16]
   return(result);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e6      	bne.n	800820a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff f836 	bl	80072bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008250:	bf00      	nop
 8008252:	3720      	adds	r7, #32
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_UARTEx_DisableFifoMode+0x16>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e027      	b.n	80082fa <HAL_UARTEx_DisableFifoMode+0x66>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2224      	movs	r2, #36	@ 0x24
 80082b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0201 	bic.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80082d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800831a:	2302      	movs	r3, #2
 800831c:	e02d      	b.n	800837a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2224      	movs	r2, #36	@ 0x24
 800832a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0201 	bic.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f850 	bl	8008400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2220      	movs	r2, #32
 800836c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008396:	2302      	movs	r3, #2
 8008398:	e02d      	b.n	80083f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2224      	movs	r2, #36	@ 0x24
 80083a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0201 	bic.w	r2, r2, #1
 80083c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f812 	bl	8008400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800840c:	2b00      	cmp	r3, #0
 800840e:	d108      	bne.n	8008422 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008420:	e031      	b.n	8008486 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008422:	2308      	movs	r3, #8
 8008424:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008426:	2308      	movs	r3, #8
 8008428:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	0e5b      	lsrs	r3, r3, #25
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	0f5b      	lsrs	r3, r3, #29
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 0307 	and.w	r3, r3, #7
 8008448:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	7b3a      	ldrb	r2, [r7, #12]
 800844e:	4911      	ldr	r1, [pc, #68]	@ (8008494 <UARTEx_SetNbDataToProcess+0x94>)
 8008450:	5c8a      	ldrb	r2, [r1, r2]
 8008452:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008456:	7b3a      	ldrb	r2, [r7, #12]
 8008458:	490f      	ldr	r1, [pc, #60]	@ (8008498 <UARTEx_SetNbDataToProcess+0x98>)
 800845a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800845c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	7b7a      	ldrb	r2, [r7, #13]
 800846c:	4909      	ldr	r1, [pc, #36]	@ (8008494 <UARTEx_SetNbDataToProcess+0x94>)
 800846e:	5c8a      	ldrb	r2, [r1, r2]
 8008470:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008474:	7b7a      	ldrb	r2, [r7, #13]
 8008476:	4908      	ldr	r1, [pc, #32]	@ (8008498 <UARTEx_SetNbDataToProcess+0x98>)
 8008478:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800847a:	fb93 f3f2 	sdiv	r3, r3, r2
 800847e:	b29a      	uxth	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	0801c96c 	.word	0x0801c96c
 8008498:	0801c974 	.word	0x0801c974

0800849c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af04      	add	r7, sp, #16
 80084a2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80084a4:	2364      	movs	r3, #100	@ 0x64
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	2301      	movs	r3, #1
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	f107 030f 	add.w	r3, r7, #15
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	2301      	movs	r3, #1
 80084b4:	2275      	movs	r2, #117	@ 0x75
 80084b6:	21d0      	movs	r1, #208	@ 0xd0
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7fc f97f 	bl	80047bc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b68      	cmp	r3, #104	@ 0x68
 80084c2:	d13d      	bne.n	8008540 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80084c8:	2364      	movs	r3, #100	@ 0x64
 80084ca:	9302      	str	r3, [sp, #8]
 80084cc:	2301      	movs	r3, #1
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	f107 030e 	add.w	r3, r7, #14
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2301      	movs	r3, #1
 80084d8:	226b      	movs	r2, #107	@ 0x6b
 80084da:	21d0      	movs	r1, #208	@ 0xd0
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7fc f859 	bl	8004594 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80084e2:	2307      	movs	r3, #7
 80084e4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80084e6:	2364      	movs	r3, #100	@ 0x64
 80084e8:	9302      	str	r3, [sp, #8]
 80084ea:	2301      	movs	r3, #1
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	f107 030e 	add.w	r3, r7, #14
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	2301      	movs	r3, #1
 80084f6:	2219      	movs	r2, #25
 80084f8:	21d0      	movs	r1, #208	@ 0xd0
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fc f84a 	bl	8004594 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8008500:	2300      	movs	r3, #0
 8008502:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8008504:	2364      	movs	r3, #100	@ 0x64
 8008506:	9302      	str	r3, [sp, #8]
 8008508:	2301      	movs	r3, #1
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	f107 030e 	add.w	r3, r7, #14
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	2301      	movs	r3, #1
 8008514:	221c      	movs	r2, #28
 8008516:	21d0      	movs	r1, #208	@ 0xd0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7fc f83b 	bl	8004594 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800851e:	2300      	movs	r3, #0
 8008520:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8008522:	2364      	movs	r3, #100	@ 0x64
 8008524:	9302      	str	r3, [sp, #8]
 8008526:	2301      	movs	r3, #1
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	f107 030e 	add.w	r3, r7, #14
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	2301      	movs	r3, #1
 8008532:	221b      	movs	r2, #27
 8008534:	21d0      	movs	r1, #208	@ 0xd0
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7fc f82c 	bl	8004594 <HAL_I2C_Mem_Write>
        return 0;
 800853c:	2300      	movs	r3, #0
 800853e:	e000      	b.n	8008542 <MPU6050_Init+0xa6>
    }
    return 1;
 8008540:	2301      	movs	r3, #1
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	0000      	movs	r0, r0
 800854c:	0000      	movs	r0, r0
	...

08008550 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8008550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008554:	b094      	sub	sp, #80	@ 0x50
 8008556:	af04      	add	r7, sp, #16
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800855c:	2364      	movs	r3, #100	@ 0x64
 800855e:	9302      	str	r3, [sp, #8]
 8008560:	230e      	movs	r3, #14
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	f107 0308 	add.w	r3, r7, #8
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	2301      	movs	r3, #1
 800856c:	223b      	movs	r2, #59	@ 0x3b
 800856e:	21d0      	movs	r1, #208	@ 0xd0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7fc f923 	bl	80047bc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8008576:	7a3b      	ldrb	r3, [r7, #8]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	b21a      	sxth	r2, r3
 800857c:	7a7b      	ldrb	r3, [r7, #9]
 800857e:	b21b      	sxth	r3, r3
 8008580:	4313      	orrs	r3, r2
 8008582:	b21a      	sxth	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8008588:	7abb      	ldrb	r3, [r7, #10]
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	b21a      	sxth	r2, r3
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	b21b      	sxth	r3, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	b21a      	sxth	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800859a:	7b3b      	ldrb	r3, [r7, #12]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	b21a      	sxth	r2, r3
 80085a0:	7b7b      	ldrb	r3, [r7, #13]
 80085a2:	b21b      	sxth	r3, r3
 80085a4:	4313      	orrs	r3, r2
 80085a6:	b21a      	sxth	r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	b21a      	sxth	r2, r3
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	b21b      	sxth	r3, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80085ba:	7c3b      	ldrb	r3, [r7, #16]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	b21a      	sxth	r2, r3
 80085c0:	7c7b      	ldrb	r3, [r7, #17]
 80085c2:	b21b      	sxth	r3, r3
 80085c4:	4313      	orrs	r3, r2
 80085c6:	b21a      	sxth	r2, r3
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80085cc:	7cbb      	ldrb	r3, [r7, #18]
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	b21a      	sxth	r2, r3
 80085d2:	7cfb      	ldrb	r3, [r7, #19]
 80085d4:	b21b      	sxth	r3, r3
 80085d6:	4313      	orrs	r3, r2
 80085d8:	b21a      	sxth	r2, r3
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80085de:	7d3b      	ldrb	r3, [r7, #20]
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	b21a      	sxth	r2, r3
 80085e4:	7d7b      	ldrb	r3, [r7, #21]
 80085e6:	b21b      	sxth	r3, r3
 80085e8:	4313      	orrs	r3, r2
 80085ea:	b21a      	sxth	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f7 ffcc 	bl	8000594 <__aeabi_i2d>
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	4bbd      	ldr	r3, [pc, #756]	@ (80088f8 <MPU6050_Read_All+0x3a8>)
 8008602:	f7f8 f95b 	bl	80008bc <__aeabi_ddiv>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008616:	4618      	mov	r0, r3
 8008618:	f7f7 ffbc 	bl	8000594 <__aeabi_i2d>
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	4bb5      	ldr	r3, [pc, #724]	@ (80088f8 <MPU6050_Read_All+0x3a8>)
 8008622:	f7f8 f94b 	bl	80008bc <__aeabi_ddiv>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008636:	4618      	mov	r0, r3
 8008638:	f7f7 ffac 	bl	8000594 <__aeabi_i2d>
 800863c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80088e0 <MPU6050_Read_All+0x390>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f8 f93b 	bl	80008bc <__aeabi_ddiv>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8008650:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8008654:	ee07 3a90 	vmov	s15, r3
 8008658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800865c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80088fc <MPU6050_Read_All+0x3ac>
 8008660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008664:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8008900 <MPU6050_Read_All+0x3b0>
 8008668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008678:	4618      	mov	r0, r3
 800867a:	f7f7 ff8b 	bl	8000594 <__aeabi_i2d>
 800867e:	a39a      	add	r3, pc, #616	@ (adr r3, 80088e8 <MPU6050_Read_All+0x398>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f8 f91a 	bl	80008bc <__aeabi_ddiv>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8008698:	4618      	mov	r0, r3
 800869a:	f7f7 ff7b 	bl	8000594 <__aeabi_i2d>
 800869e:	a392      	add	r3, pc, #584	@ (adr r3, 80088e8 <MPU6050_Read_All+0x398>)
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f7f8 f90a 	bl	80008bc <__aeabi_ddiv>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7f7 ff6b 	bl	8000594 <__aeabi_i2d>
 80086be:	a38a      	add	r3, pc, #552	@ (adr r3, 80088e8 <MPU6050_Read_All+0x398>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	f7f8 f8fa 	bl	80008bc <__aeabi_ddiv>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80086d2:	f7fa ff99 	bl	8003608 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	4b8a      	ldr	r3, [pc, #552]	@ (8008904 <MPU6050_Read_All+0x3b4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	4618      	mov	r0, r3
 80086e0:	f7f7 ff48 	bl	8000574 <__aeabi_ui2d>
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	4b87      	ldr	r3, [pc, #540]	@ (8008908 <MPU6050_Read_All+0x3b8>)
 80086ea:	f7f8 f8e7 	bl	80008bc <__aeabi_ddiv>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80086f6:	f7fa ff87 	bl	8003608 <HAL_GetTick>
 80086fa:	4603      	mov	r3, r0
 80086fc:	4a81      	ldr	r2, [pc, #516]	@ (8008904 <MPU6050_Read_All+0x3b4>)
 80086fe:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008706:	461a      	mov	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800870e:	fb03 f202 	mul.w	r2, r3, r2
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008718:	4619      	mov	r1, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8008726:	4618      	mov	r0, r3
 8008728:	f7f7 ff34 	bl	8000594 <__aeabi_i2d>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	ec43 2b10 	vmov	d0, r2, r3
 8008734:	f012 feb6 	bl	801b4a4 <sqrt>
 8008738:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008748:	f7f8 f9f6 	bl	8000b38 <__aeabi_dcmpeq>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d11f      	bne.n	8008792 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008758:	4618      	mov	r0, r3
 800875a:	f7f7 ff1b 	bl	8000594 <__aeabi_i2d>
 800875e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008762:	f7f8 f8ab 	bl	80008bc <__aeabi_ddiv>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	ec43 2b17 	vmov	d7, r2, r3
 800876e:	eeb0 0a47 	vmov.f32	s0, s14
 8008772:	eef0 0a67 	vmov.f32	s1, s15
 8008776:	f012 fec3 	bl	801b500 <atan>
 800877a:	ec51 0b10 	vmov	r0, r1, d0
 800877e:	a35c      	add	r3, pc, #368	@ (adr r3, 80088f0 <MPU6050_Read_All+0x3a0>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f7 ff70 	bl	8000668 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8008790:	e005      	b.n	800879e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087a4:	425b      	negs	r3, r3
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f7 fef4 	bl	8000594 <__aeabi_i2d>
 80087ac:	4682      	mov	sl, r0
 80087ae:	468b      	mov	fp, r1
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f7 feec 	bl	8000594 <__aeabi_i2d>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	ec43 2b11 	vmov	d1, r2, r3
 80087c4:	ec4b ab10 	vmov	d0, sl, fp
 80087c8:	f012 fdfa 	bl	801b3c0 <atan2>
 80087cc:	ec51 0b10 	vmov	r0, r1, d0
 80087d0:	a347      	add	r3, pc, #284	@ (adr r3, 80088f0 <MPU6050_Read_All+0x3a0>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 ff47 	bl	8000668 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	4b49      	ldr	r3, [pc, #292]	@ (800890c <MPU6050_Read_All+0x3bc>)
 80087e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087ec:	f7f8 f9ae 	bl	8000b4c <__aeabi_dcmplt>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <MPU6050_Read_All+0x2bc>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	4b43      	ldr	r3, [pc, #268]	@ (8008910 <MPU6050_Read_All+0x3c0>)
 8008802:	f7f8 f9c1 	bl	8000b88 <__aeabi_dcmpgt>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d114      	bne.n	8008836 <MPU6050_Read_All+0x2e6>
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	4b3f      	ldr	r3, [pc, #252]	@ (8008910 <MPU6050_Read_All+0x3c0>)
 8008812:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008816:	f7f8 f9b7 	bl	8000b88 <__aeabi_dcmpgt>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d015      	beq.n	800884c <MPU6050_Read_All+0x2fc>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008826:	f04f 0200 	mov.w	r2, #0
 800882a:	4b38      	ldr	r3, [pc, #224]	@ (800890c <MPU6050_Read_All+0x3bc>)
 800882c:	f7f8 f98e 	bl	8000b4c <__aeabi_dcmplt>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8008836:	4937      	ldr	r1, [pc, #220]	@ (8008914 <MPU6050_Read_All+0x3c4>)
 8008838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800883c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008846:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800884a:	e014      	b.n	8008876 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8008852:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8008856:	eeb0 1a47 	vmov.f32	s2, s14
 800885a:	eef0 1a67 	vmov.f32	s3, s15
 800885e:	ed97 0b06 	vldr	d0, [r7, #24]
 8008862:	482c      	ldr	r0, [pc, #176]	@ (8008914 <MPU6050_Read_All+0x3c4>)
 8008864:	f000 f85a 	bl	800891c <Kalman_getAngle>
 8008868:	eeb0 7a40 	vmov.f32	s14, s0
 800886c:	eef0 7a60 	vmov.f32	s15, s1
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800887c:	4690      	mov	r8, r2
 800887e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8008882:	f04f 0200 	mov.w	r2, #0
 8008886:	4b22      	ldr	r3, [pc, #136]	@ (8008910 <MPU6050_Read_All+0x3c0>)
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f8 f97c 	bl	8000b88 <__aeabi_dcmpgt>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d008      	beq.n	80088a8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800889c:	4614      	mov	r4, r2
 800889e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80088ae:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80088b2:	eeb0 1a47 	vmov.f32	s2, s14
 80088b6:	eef0 1a67 	vmov.f32	s3, s15
 80088ba:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80088be:	4816      	ldr	r0, [pc, #88]	@ (8008918 <MPU6050_Read_All+0x3c8>)
 80088c0:	f000 f82c 	bl	800891c <Kalman_getAngle>
 80088c4:	eeb0 7a40 	vmov.f32	s14, s0
 80088c8:	eef0 7a60 	vmov.f32	s15, s1
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 80088d2:	bf00      	nop
 80088d4:	3740      	adds	r7, #64	@ 0x40
 80088d6:	46bd      	mov	sp, r7
 80088d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088dc:	f3af 8000 	nop.w
 80088e0:	00000000 	.word	0x00000000
 80088e4:	40cc2900 	.word	0x40cc2900
 80088e8:	00000000 	.word	0x00000000
 80088ec:	40606000 	.word	0x40606000
 80088f0:	1a63c1f8 	.word	0x1a63c1f8
 80088f4:	404ca5dc 	.word	0x404ca5dc
 80088f8:	40d00000 	.word	0x40d00000
 80088fc:	43aa0000 	.word	0x43aa0000
 8008900:	42121eb8 	.word	0x42121eb8
 8008904:	20005b70 	.word	0x20005b70
 8008908:	408f4000 	.word	0x408f4000
 800890c:	c0568000 	.word	0xc0568000
 8008910:	40568000 	.word	0x40568000
 8008914:	20000060 	.word	0x20000060
 8008918:	20000018 	.word	0x20000018

0800891c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800891c:	b5b0      	push	{r4, r5, r7, lr}
 800891e:	b096      	sub	sp, #88	@ 0x58
 8008920:	af00      	add	r7, sp, #0
 8008922:	61f8      	str	r0, [r7, #28]
 8008924:	ed87 0b04 	vstr	d0, [r7, #16]
 8008928:	ed87 1b02 	vstr	d1, [r7, #8]
 800892c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800893a:	f7f7 fcdd 	bl	80002f8 <__aeabi_dsub>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800894c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008954:	f7f7 fe88 	bl	8000668 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4620      	mov	r0, r4
 800895e:	4629      	mov	r1, r5
 8008960:	f7f7 fccc 	bl	80002fc <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	69f9      	ldr	r1, [r7, #28]
 800896a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800897a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897e:	f7f7 fe73 	bl	8000668 <__aeabi_dmul>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4610      	mov	r0, r2
 8008988:	4619      	mov	r1, r3
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008990:	f7f7 fcb2 	bl	80002f8 <__aeabi_dsub>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4610      	mov	r0, r2
 800899a:	4619      	mov	r1, r3
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80089a2:	f7f7 fca9 	bl	80002f8 <__aeabi_dsub>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4610      	mov	r0, r2
 80089ac:	4619      	mov	r1, r3
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f7f7 fca2 	bl	80002fc <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4610      	mov	r0, r2
 80089be:	4619      	mov	r1, r3
 80089c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c4:	f7f7 fe50 	bl	8000668 <__aeabi_dmul>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	f7f7 fc94 	bl	80002fc <__adddf3>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	69f9      	ldr	r1, [r7, #28]
 80089da:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80089ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ee:	f7f7 fe3b 	bl	8000668 <__aeabi_dmul>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4620      	mov	r0, r4
 80089f8:	4629      	mov	r1, r5
 80089fa:	f7f7 fc7d 	bl	80002f8 <__aeabi_dsub>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	69f9      	ldr	r1, [r7, #28]
 8008a04:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a18:	f7f7 fe26 	bl	8000668 <__aeabi_dmul>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4620      	mov	r0, r4
 8008a22:	4629      	mov	r1, r5
 8008a24:	f7f7 fc68 	bl	80002f8 <__aeabi_dsub>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	69f9      	ldr	r1, [r7, #28]
 8008a2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a42:	f7f7 fe11 	bl	8000668 <__aeabi_dmul>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	f7f7 fc55 	bl	80002fc <__adddf3>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	69f9      	ldr	r1, [r7, #28]
 8008a58:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008a68:	f7f7 fc48 	bl	80002fc <__adddf3>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008a7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a7e:	f7f7 ff1d 	bl	80008bc <__aeabi_ddiv>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a94:	f7f7 ff12 	bl	80008bc <__aeabi_ddiv>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008aa6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008aaa:	f7f7 fc25 	bl	80002f8 <__aeabi_dsub>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008abc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ac0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ac4:	f7f7 fdd0 	bl	8000668 <__aeabi_dmul>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4620      	mov	r0, r4
 8008ace:	4629      	mov	r1, r5
 8008ad0:	f7f7 fc14 	bl	80002fc <__adddf3>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	69f9      	ldr	r1, [r7, #28]
 8008ada:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8008ae4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ae8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008aec:	f7f7 fdbc 	bl	8000668 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 fc00 	bl	80002fc <__adddf3>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008b0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008b16:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008b20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b28:	f7f7 fd9e 	bl	8000668 <__aeabi_dmul>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4620      	mov	r0, r4
 8008b32:	4629      	mov	r1, r5
 8008b34:	f7f7 fbe0 	bl	80002f8 <__aeabi_dsub>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	69f9      	ldr	r1, [r7, #28]
 8008b3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008b48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008b50:	f7f7 fd8a 	bl	8000668 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	f7f7 fbcc 	bl	80002f8 <__aeabi_dsub>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	69f9      	ldr	r1, [r7, #28]
 8008b66:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008b70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b78:	f7f7 fd76 	bl	8000668 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7f7 fbb8 	bl	80002f8 <__aeabi_dsub>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	69f9      	ldr	r1, [r7, #28]
 8008b8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008b98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008ba0:	f7f7 fd62 	bl	8000668 <__aeabi_dmul>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4620      	mov	r0, r4
 8008baa:	4629      	mov	r1, r5
 8008bac:	f7f7 fba4 	bl	80002f8 <__aeabi_dsub>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	69f9      	ldr	r1, [r7, #28]
 8008bb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008bc0:	ec43 2b17 	vmov	d7, r2, r3
};
 8008bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8008bc8:	eef0 0a67 	vmov.f32	s1, s15
 8008bcc:	3758      	adds	r7, #88	@ 0x58
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008bd4 <__NVIC_SetPriority>:
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	db0a      	blt.n	8008bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	490c      	ldr	r1, [pc, #48]	@ (8008c20 <__NVIC_SetPriority+0x4c>)
 8008bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf2:	0112      	lsls	r2, r2, #4
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	440b      	add	r3, r1
 8008bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008bfc:	e00a      	b.n	8008c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4908      	ldr	r1, [pc, #32]	@ (8008c24 <__NVIC_SetPriority+0x50>)
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	3b04      	subs	r3, #4
 8008c0c:	0112      	lsls	r2, r2, #4
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	440b      	add	r3, r1
 8008c12:	761a      	strb	r2, [r3, #24]
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	e000e100 	.word	0xe000e100
 8008c24:	e000ed00 	.word	0xe000ed00

08008c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c2c:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <SysTick_Handler+0x1c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c30:	f001 fd40 	bl	800a6b4 <xTaskGetSchedulerState>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d001      	beq.n	8008c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c3a:	f002 fb35 	bl	800b2a8 <xPortSysTickHandler>
  }
}
 8008c3e:	bf00      	nop
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	e000e010 	.word	0xe000e010

08008c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f06f 0004 	mvn.w	r0, #4
 8008c52:	f7ff ffbf 	bl	8008bd4 <__NVIC_SetPriority>
#endif
}
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}
	...

08008c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c62:	f3ef 8305 	mrs	r3, IPSR
 8008c66:	603b      	str	r3, [r7, #0]
  return(result);
 8008c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c6e:	f06f 0305 	mvn.w	r3, #5
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	e00c      	b.n	8008c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c76:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca0 <osKernelInitialize+0x44>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c7e:	4b08      	ldr	r3, [pc, #32]	@ (8008ca0 <osKernelInitialize+0x44>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	e002      	b.n	8008c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c90:	687b      	ldr	r3, [r7, #4]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20005b74 	.word	0x20005b74

08008ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008caa:	f3ef 8305 	mrs	r3, IPSR
 8008cae:	603b      	str	r3, [r7, #0]
  return(result);
 8008cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cb6:	f06f 0305 	mvn.w	r3, #5
 8008cba:	607b      	str	r3, [r7, #4]
 8008cbc:	e010      	b.n	8008ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008cec <osKernelStart+0x48>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d109      	bne.n	8008cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008cc6:	f7ff ffbf 	bl	8008c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cca:	4b08      	ldr	r3, [pc, #32]	@ (8008cec <osKernelStart+0x48>)
 8008ccc:	2202      	movs	r2, #2
 8008cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cd0:	f001 f87a 	bl	8009dc8 <vTaskStartScheduler>
      stat = osOK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	e002      	b.n	8008ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ce0:	687b      	ldr	r3, [r7, #4]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20005b74 	.word	0x20005b74

08008cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08e      	sub	sp, #56	@ 0x38
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d00:	f3ef 8305 	mrs	r3, IPSR
 8008d04:	617b      	str	r3, [r7, #20]
  return(result);
 8008d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d17e      	bne.n	8008e0a <osThreadNew+0x11a>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d07b      	beq.n	8008e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d12:	2380      	movs	r3, #128	@ 0x80
 8008d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d16:	2318      	movs	r3, #24
 8008d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d045      	beq.n	8008db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <osThreadNew+0x48>
        name = attr->name;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d008      	beq.n	8008d5e <osThreadNew+0x6e>
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b38      	cmp	r3, #56	@ 0x38
 8008d50:	d805      	bhi.n	8008d5e <osThreadNew+0x6e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <osThreadNew+0x72>
        return (NULL);
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e054      	b.n	8008e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	089b      	lsrs	r3, r3, #2
 8008d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <osThreadNew+0xa8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008d80:	d90a      	bls.n	8008d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <osThreadNew+0xa8>
        mem = 1;
 8008d92:	2301      	movs	r3, #1
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	e010      	b.n	8008dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10c      	bne.n	8008dba <osThreadNew+0xca>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d108      	bne.n	8008dba <osThreadNew+0xca>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <osThreadNew+0xca>
          mem = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
 8008db4:	e001      	b.n	8008dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d110      	bne.n	8008de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6a3a      	ldr	r2, [r7, #32]
 8008dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fe1a 	bl	8009a10 <xTaskCreateStatic>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	e013      	b.n	8008e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d110      	bne.n	8008e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	f107 0310 	add.w	r3, r7, #16
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 fe68 	bl	8009ad0 <xTaskCreate>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d001      	beq.n	8008e0a <osThreadNew+0x11a>
            hTask = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e0a:	693b      	ldr	r3, [r7, #16]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3728      	adds	r7, #40	@ 0x28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e1c:	f3ef 8305 	mrs	r3, IPSR
 8008e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <osDelay+0x1c>
    stat = osErrorISR;
 8008e28:	f06f 0305 	mvn.w	r3, #5
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e007      	b.n	8008e40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 ff8e 	bl	8009d5c <vTaskDelay>
    }
  }

  return (stat);
 8008e40:	68fb      	ldr	r3, [r7, #12]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
	...

08008e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a07      	ldr	r2, [pc, #28]	@ (8008e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4a06      	ldr	r2, [pc, #24]	@ (8008e7c <vApplicationGetIdleTaskMemory+0x30>)
 8008e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2280      	movs	r2, #128	@ 0x80
 8008e68:	601a      	str	r2, [r3, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20005b78 	.word	0x20005b78
 8008e7c:	20005bd4 	.word	0x20005bd4

08008e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a07      	ldr	r2, [pc, #28]	@ (8008eac <vApplicationGetTimerTaskMemory+0x2c>)
 8008e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4a06      	ldr	r2, [pc, #24]	@ (8008eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8008e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e9e:	601a      	str	r2, [r3, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	20005dd4 	.word	0x20005dd4
 8008eb0:	20005e30 	.word	0x20005e30

08008eb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f103 0208 	add.w	r2, r3, #8
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ecc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f103 0208 	add.w	r2, r3, #8
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f103 0208 	add.w	r2, r3, #8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	601a      	str	r2, [r3, #0]
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f56:	b480      	push	{r7}
 8008f58:	b085      	sub	sp, #20
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f6c:	d103      	bne.n	8008f76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e00c      	b.n	8008f90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	e002      	b.n	8008f84 <vListInsert+0x2e>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d2f6      	bcs.n	8008f7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	601a      	str	r2, [r3, #0]
}
 8008fbc:	bf00      	nop
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6892      	ldr	r2, [r2, #8]
 8008fde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6852      	ldr	r2, [r2, #4]
 8008fe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d103      	bne.n	8008ffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	1e5a      	subs	r2, r3, #1
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10b      	bne.n	8009048 <xQueueGenericReset+0x2c>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60bb      	str	r3, [r7, #8]
}
 8009042:	bf00      	nop
 8009044:	bf00      	nop
 8009046:	e7fd      	b.n	8009044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009048:	f002 f89e 	bl	800b188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009054:	68f9      	ldr	r1, [r7, #12]
 8009056:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009058:	fb01 f303 	mul.w	r3, r1, r3
 800905c:	441a      	add	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009078:	3b01      	subs	r3, #1
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	441a      	add	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	22ff      	movs	r2, #255	@ 0xff
 800908c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	22ff      	movs	r2, #255	@ 0xff
 8009094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d114      	bne.n	80090c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01a      	beq.n	80090dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3310      	adds	r3, #16
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f91a 	bl	800a2e4 <xTaskRemoveFromEventList>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d012      	beq.n	80090dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090b6:	4b0d      	ldr	r3, [pc, #52]	@ (80090ec <xQueueGenericReset+0xd0>)
 80090b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	e009      	b.n	80090dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3310      	adds	r3, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff fef1 	bl	8008eb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3324      	adds	r3, #36	@ 0x24
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff feec 	bl	8008eb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090dc:	f002 f886 	bl	800b1ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090e0:	2301      	movs	r3, #1
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	e000ed04 	.word	0xe000ed04

080090f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08e      	sub	sp, #56	@ 0x38
 80090f4:	af02      	add	r7, sp, #8
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10b      	bne.n	800911c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009116:	bf00      	nop
 8009118:	bf00      	nop
 800911a:	e7fd      	b.n	8009118 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10b      	bne.n	800913a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop
 8009138:	e7fd      	b.n	8009136 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <xQueueGenericCreateStatic+0x56>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <xQueueGenericCreateStatic+0x5a>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <xQueueGenericCreateStatic+0x5c>
 800914a:	2300      	movs	r3, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	623b      	str	r3, [r7, #32]
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	e7fd      	b.n	8009164 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <xQueueGenericCreateStatic+0x84>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <xQueueGenericCreateStatic+0x88>
 8009174:	2301      	movs	r3, #1
 8009176:	e000      	b.n	800917a <xQueueGenericCreateStatic+0x8a>
 8009178:	2300      	movs	r3, #0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	61fb      	str	r3, [r7, #28]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009196:	2350      	movs	r3, #80	@ 0x50
 8009198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b50      	cmp	r3, #80	@ 0x50
 800919e:	d00b      	beq.n	80091b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	61bb      	str	r3, [r7, #24]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80091be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00d      	beq.n	80091e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f805 	bl	80091ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3730      	adds	r7, #48	@ 0x30
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d103      	bne.n	8009206 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e002      	b.n	800920c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009218:	2101      	movs	r1, #1
 800921a:	69b8      	ldr	r0, [r7, #24]
 800921c:	f7ff fefe 	bl	800901c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08e      	sub	sp, #56	@ 0x38
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800923e:	2300      	movs	r3, #0
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10b      	bne.n	8009264 <xQueueGenericSend+0x34>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <xQueueGenericSend+0x42>
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <xQueueGenericSend+0x46>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <xQueueGenericSend+0x48>
 8009276:	2300      	movs	r3, #0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10b      	bne.n	8009294 <xQueueGenericSend+0x64>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800928e:	bf00      	nop
 8009290:	bf00      	nop
 8009292:	e7fd      	b.n	8009290 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d103      	bne.n	80092a2 <xQueueGenericSend+0x72>
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <xQueueGenericSend+0x76>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <xQueueGenericSend+0x78>
 80092a6:	2300      	movs	r3, #0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10b      	bne.n	80092c4 <xQueueGenericSend+0x94>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	623b      	str	r3, [r7, #32]
}
 80092be:	bf00      	nop
 80092c0:	bf00      	nop
 80092c2:	e7fd      	b.n	80092c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092c4:	f001 f9f6 	bl	800a6b4 <xTaskGetSchedulerState>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <xQueueGenericSend+0xa4>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <xQueueGenericSend+0xa8>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <xQueueGenericSend+0xaa>
 80092d8:	2300      	movs	r3, #0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	61fb      	str	r3, [r7, #28]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092f6:	f001 ff47 	bl	800b188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009302:	429a      	cmp	r2, r3
 8009304:	d302      	bcc.n	800930c <xQueueGenericSend+0xdc>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d129      	bne.n	8009360 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009312:	f000 fa0f 	bl	8009734 <prvCopyDataToQueue>
 8009316:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	2b00      	cmp	r3, #0
 800931e:	d010      	beq.n	8009342 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	3324      	adds	r3, #36	@ 0x24
 8009324:	4618      	mov	r0, r3
 8009326:	f000 ffdd 	bl	800a2e4 <xTaskRemoveFromEventList>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d013      	beq.n	8009358 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009330:	4b3f      	ldr	r3, [pc, #252]	@ (8009430 <xQueueGenericSend+0x200>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	e00a      	b.n	8009358 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009348:	4b39      	ldr	r3, [pc, #228]	@ (8009430 <xQueueGenericSend+0x200>)
 800934a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009358:	f001 ff48 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 800935c:	2301      	movs	r3, #1
 800935e:	e063      	b.n	8009428 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d103      	bne.n	800936e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009366:	f001 ff41 	bl	800b1ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800936a:	2300      	movs	r3, #0
 800936c:	e05c      	b.n	8009428 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800936e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009374:	f107 0314 	add.w	r3, r7, #20
 8009378:	4618      	mov	r0, r3
 800937a:	f001 f83f 	bl	800a3fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800937e:	2301      	movs	r3, #1
 8009380:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009382:	f001 ff33 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009386:	f000 fd87 	bl	8009e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800938a:	f001 fefd 	bl	800b188 <vPortEnterCritical>
 800938e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009394:	b25b      	sxtb	r3, r3
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800939a:	d103      	bne.n	80093a4 <xQueueGenericSend+0x174>
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093aa:	b25b      	sxtb	r3, r3
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093b0:	d103      	bne.n	80093ba <xQueueGenericSend+0x18a>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093ba:	f001 ff17 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093be:	1d3a      	adds	r2, r7, #4
 80093c0:	f107 0314 	add.w	r3, r7, #20
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 f82e 	bl	800a428 <xTaskCheckForTimeOut>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d124      	bne.n	800941c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093d4:	f000 faa6 	bl	8009924 <prvIsQueueFull>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d018      	beq.n	8009410 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	3310      	adds	r3, #16
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 ff2a 	bl	800a240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093ee:	f000 fa31 	bl	8009854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093f2:	f000 fd5f 	bl	8009eb4 <xTaskResumeAll>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f af7c 	bne.w	80092f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80093fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009430 <xQueueGenericSend+0x200>)
 8009400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	e772      	b.n	80092f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009412:	f000 fa1f 	bl	8009854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009416:	f000 fd4d 	bl	8009eb4 <xTaskResumeAll>
 800941a:	e76c      	b.n	80092f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800941c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800941e:	f000 fa19 	bl	8009854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009422:	f000 fd47 	bl	8009eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009428:	4618      	mov	r0, r3
 800942a:	3738      	adds	r7, #56	@ 0x38
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b090      	sub	sp, #64	@ 0x40
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10b      	bne.n	8009464 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800945e:	bf00      	nop
 8009460:	bf00      	nop
 8009462:	e7fd      	b.n	8009460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d103      	bne.n	8009472 <xQueueGenericSendFromISR+0x3e>
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <xQueueGenericSendFromISR+0x42>
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <xQueueGenericSendFromISR+0x44>
 8009476:	2300      	movs	r3, #0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	e7fd      	b.n	8009490 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d103      	bne.n	80094a2 <xQueueGenericSendFromISR+0x6e>
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <xQueueGenericSendFromISR+0x72>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <xQueueGenericSendFromISR+0x74>
 80094a6:	2300      	movs	r3, #0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	623b      	str	r3, [r7, #32]
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	e7fd      	b.n	80094c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094c4:	f001 ff40 	bl	800b348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094c8:	f3ef 8211 	mrs	r2, BASEPRI
 80094cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	61fa      	str	r2, [r7, #28]
 80094de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d302      	bcc.n	80094f6 <xQueueGenericSendFromISR+0xc2>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d12f      	bne.n	8009556 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009504:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800950c:	f000 f912 	bl	8009734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009510:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009518:	d112      	bne.n	8009540 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800951a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d016      	beq.n	8009550 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009524:	3324      	adds	r3, #36	@ 0x24
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fedc 	bl	800a2e4 <xTaskRemoveFromEventList>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00e      	beq.n	8009550 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e007      	b.n	8009550 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009540:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009544:	3301      	adds	r3, #1
 8009546:	b2db      	uxtb	r3, r3
 8009548:	b25a      	sxtb	r2, r3
 800954a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009550:	2301      	movs	r3, #1
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009554:	e001      	b.n	800955a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800955a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009564:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009568:	4618      	mov	r0, r3
 800956a:	3740      	adds	r7, #64	@ 0x40
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08c      	sub	sp, #48	@ 0x30
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800957c:	2300      	movs	r3, #0
 800957e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10b      	bne.n	80095a2 <xQueueReceive+0x32>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	623b      	str	r3, [r7, #32]
}
 800959c:	bf00      	nop
 800959e:	bf00      	nop
 80095a0:	e7fd      	b.n	800959e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d103      	bne.n	80095b0 <xQueueReceive+0x40>
 80095a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <xQueueReceive+0x44>
 80095b0:	2301      	movs	r3, #1
 80095b2:	e000      	b.n	80095b6 <xQueueReceive+0x46>
 80095b4:	2300      	movs	r3, #0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10b      	bne.n	80095d2 <xQueueReceive+0x62>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	61fb      	str	r3, [r7, #28]
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	e7fd      	b.n	80095ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095d2:	f001 f86f 	bl	800a6b4 <xTaskGetSchedulerState>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <xQueueReceive+0x72>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <xQueueReceive+0x76>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e000      	b.n	80095e8 <xQueueReceive+0x78>
 80095e6:	2300      	movs	r3, #0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10b      	bne.n	8009604 <xQueueReceive+0x94>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	61bb      	str	r3, [r7, #24]
}
 80095fe:	bf00      	nop
 8009600:	bf00      	nop
 8009602:	e7fd      	b.n	8009600 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009604:	f001 fdc0 	bl	800b188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	2b00      	cmp	r3, #0
 8009612:	d01f      	beq.n	8009654 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009618:	f000 f8f6 	bl	8009808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00f      	beq.n	800964c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	3310      	adds	r3, #16
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fe57 	bl	800a2e4 <xTaskRemoveFromEventList>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d007      	beq.n	800964c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800963c:	4b3c      	ldr	r3, [pc, #240]	@ (8009730 <xQueueReceive+0x1c0>)
 800963e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800964c:	f001 fdce 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 8009650:	2301      	movs	r3, #1
 8009652:	e069      	b.n	8009728 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d103      	bne.n	8009662 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800965a:	f001 fdc7 	bl	800b1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800965e:	2300      	movs	r3, #0
 8009660:	e062      	b.n	8009728 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d106      	bne.n	8009676 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009668:	f107 0310 	add.w	r3, r7, #16
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fec5 	bl	800a3fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009676:	f001 fdb9 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800967a:	f000 fc0d 	bl	8009e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800967e:	f001 fd83 	bl	800b188 <vPortEnterCritical>
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009688:	b25b      	sxtb	r3, r3
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800968e:	d103      	bne.n	8009698 <xQueueReceive+0x128>
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800969e:	b25b      	sxtb	r3, r3
 80096a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096a4:	d103      	bne.n	80096ae <xQueueReceive+0x13e>
 80096a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096ae:	f001 fd9d 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096b2:	1d3a      	adds	r2, r7, #4
 80096b4:	f107 0310 	add.w	r3, r7, #16
 80096b8:	4611      	mov	r1, r2
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 feb4 	bl	800a428 <xTaskCheckForTimeOut>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d123      	bne.n	800970e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096c8:	f000 f916 	bl	80098f8 <prvIsQueueEmpty>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d017      	beq.n	8009702 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	3324      	adds	r3, #36	@ 0x24
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	4611      	mov	r1, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fdb0 	bl	800a240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096e2:	f000 f8b7 	bl	8009854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096e6:	f000 fbe5 	bl	8009eb4 <xTaskResumeAll>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d189      	bne.n	8009604 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80096f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009730 <xQueueReceive+0x1c0>)
 80096f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	e780      	b.n	8009604 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009704:	f000 f8a6 	bl	8009854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009708:	f000 fbd4 	bl	8009eb4 <xTaskResumeAll>
 800970c:	e77a      	b.n	8009604 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800970e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009710:	f000 f8a0 	bl	8009854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009714:	f000 fbce 	bl	8009eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800971a:	f000 f8ed 	bl	80098f8 <prvIsQueueEmpty>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	f43f af6f 	beq.w	8009604 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009726:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009728:	4618      	mov	r0, r3
 800972a:	3730      	adds	r7, #48	@ 0x30
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10d      	bne.n	800976e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d14d      	bne.n	80097f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 ffc6 	bl	800a6f0 <xTaskPriorityDisinherit>
 8009764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	609a      	str	r2, [r3, #8]
 800976c:	e043      	b.n	80097f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d119      	bne.n	80097a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6858      	ldr	r0, [r3, #4]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977c:	461a      	mov	r2, r3
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	f010 ffdd 	bl	801a73e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978c:	441a      	add	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	429a      	cmp	r2, r3
 800979c:	d32b      	bcc.n	80097f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	605a      	str	r2, [r3, #4]
 80097a6:	e026      	b.n	80097f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	68d8      	ldr	r0, [r3, #12]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b0:	461a      	mov	r2, r3
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	f010 ffc3 	bl	801a73e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c0:	425b      	negs	r3, r3
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d207      	bcs.n	80097e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689a      	ldr	r2, [r3, #8]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	425b      	negs	r3, r3
 80097de:	441a      	add	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d105      	bne.n	80097f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80097fe:	697b      	ldr	r3, [r7, #20]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d018      	beq.n	800984c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009822:	441a      	add	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	d303      	bcc.n	800983c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68d9      	ldr	r1, [r3, #12]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009844:	461a      	mov	r2, r3
 8009846:	6838      	ldr	r0, [r7, #0]
 8009848:	f010 ff79 	bl	801a73e <memcpy>
	}
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800985c:	f001 fc94 	bl	800b188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009868:	e011      	b.n	800988e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	d012      	beq.n	8009898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	3324      	adds	r3, #36	@ 0x24
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fd34 	bl	800a2e4 <xTaskRemoveFromEventList>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009882:	f000 fe35 	bl	800a4f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	3b01      	subs	r3, #1
 800988a:	b2db      	uxtb	r3, r3
 800988c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800988e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	dce9      	bgt.n	800986a <prvUnlockQueue+0x16>
 8009896:	e000      	b.n	800989a <prvUnlockQueue+0x46>
					break;
 8009898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	22ff      	movs	r2, #255	@ 0xff
 800989e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80098a2:	f001 fca3 	bl	800b1ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098a6:	f001 fc6f 	bl	800b188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098b2:	e011      	b.n	80098d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d012      	beq.n	80098e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3310      	adds	r3, #16
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fd0f 	bl	800a2e4 <xTaskRemoveFromEventList>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098cc:	f000 fe10 	bl	800a4f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dce9      	bgt.n	80098b4 <prvUnlockQueue+0x60>
 80098e0:	e000      	b.n	80098e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	22ff      	movs	r2, #255	@ 0xff
 80098e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80098ec:	f001 fc7e 	bl	800b1ec <vPortExitCritical>
}
 80098f0:	bf00      	nop
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009900:	f001 fc42 	bl	800b188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	e001      	b.n	8009916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009916:	f001 fc69 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 800991a:	68fb      	ldr	r3, [r7, #12]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800992c:	f001 fc2c 	bl	800b188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009938:	429a      	cmp	r2, r3
 800993a:	d102      	bne.n	8009942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e001      	b.n	8009946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009946:	f001 fc51 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 800994a:	68fb      	ldr	r3, [r7, #12]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800995e:	2300      	movs	r3, #0
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e014      	b.n	800998e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009964:	4a0f      	ldr	r2, [pc, #60]	@ (80099a4 <vQueueAddToRegistry+0x50>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10b      	bne.n	8009988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009970:	490c      	ldr	r1, [pc, #48]	@ (80099a4 <vQueueAddToRegistry+0x50>)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800997a:	4a0a      	ldr	r2, [pc, #40]	@ (80099a4 <vQueueAddToRegistry+0x50>)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	4413      	add	r3, r2
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009986:	e006      	b.n	8009996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b07      	cmp	r3, #7
 8009992:	d9e7      	bls.n	8009964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	20006230 	.word	0x20006230

080099a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099b8:	f001 fbe6 	bl	800b188 <vPortEnterCritical>
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099c2:	b25b      	sxtb	r3, r3
 80099c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099c8:	d103      	bne.n	80099d2 <vQueueWaitForMessageRestricted+0x2a>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099d8:	b25b      	sxtb	r3, r3
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099de:	d103      	bne.n	80099e8 <vQueueWaitForMessageRestricted+0x40>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099e8:	f001 fc00 	bl	800b1ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3324      	adds	r3, #36	@ 0x24
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fc45 	bl	800a28c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a02:	6978      	ldr	r0, [r7, #20]
 8009a04:	f7ff ff26 	bl	8009854 <prvUnlockQueue>
	}
 8009a08:	bf00      	nop
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08e      	sub	sp, #56	@ 0x38
 8009a14:	af04      	add	r7, sp, #16
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10b      	bne.n	8009a3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	623b      	str	r3, [r7, #32]
}
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	e7fd      	b.n	8009a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	61fb      	str	r3, [r7, #28]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a5a:	235c      	movs	r3, #92	@ 0x5c
 8009a5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a62:	d00b      	beq.n	8009a7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	61bb      	str	r3, [r7, #24]
}
 8009a76:	bf00      	nop
 8009a78:	bf00      	nop
 8009a7a:	e7fd      	b.n	8009a78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01e      	beq.n	8009ac2 <xTaskCreateStatic+0xb2>
 8009a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01b      	beq.n	8009ac2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9303      	str	r3, [sp, #12]
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	9302      	str	r3, [sp, #8]
 8009aa4:	f107 0314 	add.w	r3, r7, #20
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 f850 	bl	8009b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009abc:	f000 f8de 	bl	8009c7c <prvAddNewTaskToReadyList>
 8009ac0:	e001      	b.n	8009ac6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ac6:	697b      	ldr	r3, [r7, #20]
	}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3728      	adds	r7, #40	@ 0x28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08c      	sub	sp, #48	@ 0x30
 8009ad4:	af04      	add	r7, sp, #16
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ae0:	88fb      	ldrh	r3, [r7, #6]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 fc71 	bl	800b3cc <pvPortMalloc>
 8009aea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00e      	beq.n	8009b10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009af2:	205c      	movs	r0, #92	@ 0x5c
 8009af4:	f001 fc6a 	bl	800b3cc <pvPortMalloc>
 8009af8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b06:	e005      	b.n	8009b14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f001 fd2d 	bl	800b568 <vPortFree>
 8009b0e:	e001      	b.n	8009b14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d017      	beq.n	8009b4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b22:	88fa      	ldrh	r2, [r7, #6]
 8009b24:	2300      	movs	r3, #0
 8009b26:	9303      	str	r3, [sp, #12]
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	9302      	str	r3, [sp, #8]
 8009b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f80e 	bl	8009b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b3e:	69f8      	ldr	r0, [r7, #28]
 8009b40:	f000 f89c 	bl	8009c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b44:	2301      	movs	r3, #1
 8009b46:	61bb      	str	r3, [r7, #24]
 8009b48:	e002      	b.n	8009b50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b50:	69bb      	ldr	r3, [r7, #24]
	}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3720      	adds	r7, #32
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b088      	sub	sp, #32
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	461a      	mov	r2, r3
 8009b72:	21a5      	movs	r1, #165	@ 0xa5
 8009b74:	f010 fd1a 	bl	801a5ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009b82:	3b01      	subs	r3, #1
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f023 0307 	bic.w	r3, r3, #7
 8009b90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00b      	beq.n	8009bb4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	617b      	str	r3, [r7, #20]
}
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	e7fd      	b.n	8009bb0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01f      	beq.n	8009bfa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bba:	2300      	movs	r3, #0
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	e012      	b.n	8009be6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	7819      	ldrb	r1, [r3, #0]
 8009bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	4413      	add	r3, r2
 8009bce:	3334      	adds	r3, #52	@ 0x34
 8009bd0:	460a      	mov	r2, r1
 8009bd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	4413      	add	r3, r2
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d006      	beq.n	8009bee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	3301      	adds	r3, #1
 8009be4:	61fb      	str	r3, [r7, #28]
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	2b0f      	cmp	r3, #15
 8009bea:	d9e9      	bls.n	8009bc0 <prvInitialiseNewTask+0x66>
 8009bec:	e000      	b.n	8009bf0 <prvInitialiseNewTask+0x96>
			{
				break;
 8009bee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009bf8:	e003      	b.n	8009c02 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	2b37      	cmp	r3, #55	@ 0x37
 8009c06:	d901      	bls.n	8009c0c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c08:	2337      	movs	r3, #55	@ 0x37
 8009c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c16:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	3304      	adds	r3, #4
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff f966 	bl	8008ef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	3318      	adds	r3, #24
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7ff f961 	bl	8008ef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	68f9      	ldr	r1, [r7, #12]
 8009c5a:	69b8      	ldr	r0, [r7, #24]
 8009c5c:	f001 f966 	bl	800af2c <pxPortInitialiseStack>
 8009c60:	4602      	mov	r2, r0
 8009c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c72:	bf00      	nop
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c84:	f001 fa80 	bl	800b188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c88:	4b2d      	ldr	r3, [pc, #180]	@ (8009d40 <prvAddNewTaskToReadyList+0xc4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009d40 <prvAddNewTaskToReadyList+0xc4>)
 8009c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c92:	4b2c      	ldr	r3, [pc, #176]	@ (8009d44 <prvAddNewTaskToReadyList+0xc8>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8009d44 <prvAddNewTaskToReadyList+0xc8>)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ca0:	4b27      	ldr	r3, [pc, #156]	@ (8009d40 <prvAddNewTaskToReadyList+0xc4>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d110      	bne.n	8009cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ca8:	f000 fc46 	bl	800a538 <prvInitialiseTaskLists>
 8009cac:	e00d      	b.n	8009cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cae:	4b26      	ldr	r3, [pc, #152]	@ (8009d48 <prvAddNewTaskToReadyList+0xcc>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cb6:	4b23      	ldr	r3, [pc, #140]	@ (8009d44 <prvAddNewTaskToReadyList+0xc8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d802      	bhi.n	8009cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d44 <prvAddNewTaskToReadyList+0xc8>)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cca:	4b20      	ldr	r3, [pc, #128]	@ (8009d4c <prvAddNewTaskToReadyList+0xd0>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8009d4c <prvAddNewTaskToReadyList+0xd0>)
 8009cd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d4c <prvAddNewTaskToReadyList+0xd0>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d50 <prvAddNewTaskToReadyList+0xd4>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d903      	bls.n	8009cf0 <prvAddNewTaskToReadyList+0x74>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cec:	4a18      	ldr	r2, [pc, #96]	@ (8009d50 <prvAddNewTaskToReadyList+0xd4>)
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4a15      	ldr	r2, [pc, #84]	@ (8009d54 <prvAddNewTaskToReadyList+0xd8>)
 8009cfe:	441a      	add	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	f7ff f901 	bl	8008f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d0c:	f001 fa6e 	bl	800b1ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d10:	4b0d      	ldr	r3, [pc, #52]	@ (8009d48 <prvAddNewTaskToReadyList+0xcc>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00e      	beq.n	8009d36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d18:	4b0a      	ldr	r3, [pc, #40]	@ (8009d44 <prvAddNewTaskToReadyList+0xc8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d207      	bcs.n	8009d36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d26:	4b0c      	ldr	r3, [pc, #48]	@ (8009d58 <prvAddNewTaskToReadyList+0xdc>)
 8009d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20006744 	.word	0x20006744
 8009d44:	20006270 	.word	0x20006270
 8009d48:	20006750 	.word	0x20006750
 8009d4c:	20006760 	.word	0x20006760
 8009d50:	2000674c 	.word	0x2000674c
 8009d54:	20006274 	.word	0x20006274
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d018      	beq.n	8009da0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d6e:	4b14      	ldr	r3, [pc, #80]	@ (8009dc0 <vTaskDelay+0x64>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00b      	beq.n	8009d8e <vTaskDelay+0x32>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60bb      	str	r3, [r7, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d8e:	f000 f883 	bl	8009e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d92:	2100      	movs	r1, #0
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fd1b 	bl	800a7d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d9a:	f000 f88b 	bl	8009eb4 <xTaskResumeAll>
 8009d9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d107      	bne.n	8009db6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009da6:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <vTaskDelay+0x68>)
 8009da8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	2000676c 	.word	0x2000676c
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	@ 0x28
 8009dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dd6:	463a      	mov	r2, r7
 8009dd8:	1d39      	adds	r1, r7, #4
 8009dda:	f107 0308 	add.w	r3, r7, #8
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff f834 	bl	8008e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	9202      	str	r2, [sp, #8]
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	2300      	movs	r3, #0
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	2300      	movs	r3, #0
 8009df4:	460a      	mov	r2, r1
 8009df6:	4922      	ldr	r1, [pc, #136]	@ (8009e80 <vTaskStartScheduler+0xb8>)
 8009df8:	4822      	ldr	r0, [pc, #136]	@ (8009e84 <vTaskStartScheduler+0xbc>)
 8009dfa:	f7ff fe09 	bl	8009a10 <xTaskCreateStatic>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4a21      	ldr	r2, [pc, #132]	@ (8009e88 <vTaskStartScheduler+0xc0>)
 8009e02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e04:	4b20      	ldr	r3, [pc, #128]	@ (8009e88 <vTaskStartScheduler+0xc0>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	e001      	b.n	8009e16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d102      	bne.n	8009e22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e1c:	f000 fd2c 	bl	800a878 <xTimerCreateTimerTask>
 8009e20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d116      	bne.n	8009e56 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	613b      	str	r3, [r7, #16]
}
 8009e3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e3c:	4b13      	ldr	r3, [pc, #76]	@ (8009e8c <vTaskStartScheduler+0xc4>)
 8009e3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e44:	4b12      	ldr	r3, [pc, #72]	@ (8009e90 <vTaskStartScheduler+0xc8>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e4a:	4b12      	ldr	r3, [pc, #72]	@ (8009e94 <vTaskStartScheduler+0xcc>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e50:	f001 f8f6 	bl	800b040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e54:	e00f      	b.n	8009e76 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e5c:	d10b      	bne.n	8009e76 <vTaskStartScheduler+0xae>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	60fb      	str	r3, [r7, #12]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <vTaskStartScheduler+0xaa>
}
 8009e76:	bf00      	nop
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	0801c8e0 	.word	0x0801c8e0
 8009e84:	0800a509 	.word	0x0800a509
 8009e88:	20006768 	.word	0x20006768
 8009e8c:	20006764 	.word	0x20006764
 8009e90:	20006750 	.word	0x20006750
 8009e94:	20006748 	.word	0x20006748

08009e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e9c:	4b04      	ldr	r3, [pc, #16]	@ (8009eb0 <vTaskSuspendAll+0x18>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a03      	ldr	r2, [pc, #12]	@ (8009eb0 <vTaskSuspendAll+0x18>)
 8009ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ea6:	bf00      	nop
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	2000676c 	.word	0x2000676c

08009eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ec2:	4b42      	ldr	r3, [pc, #264]	@ (8009fcc <xTaskResumeAll+0x118>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10b      	bne.n	8009ee2 <xTaskResumeAll+0x2e>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	603b      	str	r3, [r7, #0]
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	e7fd      	b.n	8009ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ee2:	f001 f951 	bl	800b188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ee6:	4b39      	ldr	r3, [pc, #228]	@ (8009fcc <xTaskResumeAll+0x118>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	4a37      	ldr	r2, [pc, #220]	@ (8009fcc <xTaskResumeAll+0x118>)
 8009eee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ef0:	4b36      	ldr	r3, [pc, #216]	@ (8009fcc <xTaskResumeAll+0x118>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d162      	bne.n	8009fbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ef8:	4b35      	ldr	r3, [pc, #212]	@ (8009fd0 <xTaskResumeAll+0x11c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05e      	beq.n	8009fbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f00:	e02f      	b.n	8009f62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f02:	4b34      	ldr	r3, [pc, #208]	@ (8009fd4 <xTaskResumeAll+0x120>)
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3318      	adds	r3, #24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff f85a 	bl	8008fc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3304      	adds	r3, #4
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff f855 	bl	8008fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f22:	4b2d      	ldr	r3, [pc, #180]	@ (8009fd8 <xTaskResumeAll+0x124>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d903      	bls.n	8009f32 <xTaskResumeAll+0x7e>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8009fd8 <xTaskResumeAll+0x124>)
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4a27      	ldr	r2, [pc, #156]	@ (8009fdc <xTaskResumeAll+0x128>)
 8009f40:	441a      	add	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3304      	adds	r3, #4
 8009f46:	4619      	mov	r1, r3
 8009f48:	4610      	mov	r0, r2
 8009f4a:	f7fe ffe0 	bl	8008f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f52:	4b23      	ldr	r3, [pc, #140]	@ (8009fe0 <xTaskResumeAll+0x12c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d302      	bcc.n	8009f62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009f5c:	4b21      	ldr	r3, [pc, #132]	@ (8009fe4 <xTaskResumeAll+0x130>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f62:	4b1c      	ldr	r3, [pc, #112]	@ (8009fd4 <xTaskResumeAll+0x120>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1cb      	bne.n	8009f02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f70:	f000 fb80 	bl	800a674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f74:	4b1c      	ldr	r3, [pc, #112]	@ (8009fe8 <xTaskResumeAll+0x134>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d010      	beq.n	8009fa2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f80:	f000 f846 	bl	800a010 <xTaskIncrementTick>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009f8a:	4b16      	ldr	r3, [pc, #88]	@ (8009fe4 <xTaskResumeAll+0x130>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1f1      	bne.n	8009f80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009f9c:	4b12      	ldr	r3, [pc, #72]	@ (8009fe8 <xTaskResumeAll+0x134>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <xTaskResumeAll+0x130>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009faa:	2301      	movs	r3, #1
 8009fac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fae:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <xTaskResumeAll+0x138>)
 8009fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fbe:	f001 f915 	bl	800b1ec <vPortExitCritical>

	return xAlreadyYielded;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	2000676c 	.word	0x2000676c
 8009fd0:	20006744 	.word	0x20006744
 8009fd4:	20006704 	.word	0x20006704
 8009fd8:	2000674c 	.word	0x2000674c
 8009fdc:	20006274 	.word	0x20006274
 8009fe0:	20006270 	.word	0x20006270
 8009fe4:	20006758 	.word	0x20006758
 8009fe8:	20006754 	.word	0x20006754
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ff6:	4b05      	ldr	r3, [pc, #20]	@ (800a00c <xTaskGetTickCount+0x1c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ffc:	687b      	ldr	r3, [r7, #4]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20006748 	.word	0x20006748

0800a010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a01a:	4b4f      	ldr	r3, [pc, #316]	@ (800a158 <xTaskIncrementTick+0x148>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f040 8090 	bne.w	800a144 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a024:	4b4d      	ldr	r3, [pc, #308]	@ (800a15c <xTaskIncrementTick+0x14c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3301      	adds	r3, #1
 800a02a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a02c:	4a4b      	ldr	r2, [pc, #300]	@ (800a15c <xTaskIncrementTick+0x14c>)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d121      	bne.n	800a07c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a038:	4b49      	ldr	r3, [pc, #292]	@ (800a160 <xTaskIncrementTick+0x150>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	603b      	str	r3, [r7, #0]
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	e7fd      	b.n	800a056 <xTaskIncrementTick+0x46>
 800a05a:	4b41      	ldr	r3, [pc, #260]	@ (800a160 <xTaskIncrementTick+0x150>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	4b40      	ldr	r3, [pc, #256]	@ (800a164 <xTaskIncrementTick+0x154>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a3e      	ldr	r2, [pc, #248]	@ (800a160 <xTaskIncrementTick+0x150>)
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	4a3e      	ldr	r2, [pc, #248]	@ (800a164 <xTaskIncrementTick+0x154>)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	4b3e      	ldr	r3, [pc, #248]	@ (800a168 <xTaskIncrementTick+0x158>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3301      	adds	r3, #1
 800a074:	4a3c      	ldr	r2, [pc, #240]	@ (800a168 <xTaskIncrementTick+0x158>)
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	f000 fafc 	bl	800a674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a07c:	4b3b      	ldr	r3, [pc, #236]	@ (800a16c <xTaskIncrementTick+0x15c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	429a      	cmp	r2, r3
 800a084:	d349      	bcc.n	800a11a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a086:	4b36      	ldr	r3, [pc, #216]	@ (800a160 <xTaskIncrementTick+0x150>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d104      	bne.n	800a09a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a090:	4b36      	ldr	r3, [pc, #216]	@ (800a16c <xTaskIncrementTick+0x15c>)
 800a092:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a096:	601a      	str	r2, [r3, #0]
					break;
 800a098:	e03f      	b.n	800a11a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a09a:	4b31      	ldr	r3, [pc, #196]	@ (800a160 <xTaskIncrementTick+0x150>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d203      	bcs.n	800a0ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0b2:	4a2e      	ldr	r2, [pc, #184]	@ (800a16c <xTaskIncrementTick+0x15c>)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0b8:	e02f      	b.n	800a11a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe ff82 	bl	8008fc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d004      	beq.n	800a0d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	3318      	adds	r3, #24
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe ff79 	bl	8008fc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0da:	4b25      	ldr	r3, [pc, #148]	@ (800a170 <xTaskIncrementTick+0x160>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d903      	bls.n	800a0ea <xTaskIncrementTick+0xda>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e6:	4a22      	ldr	r2, [pc, #136]	@ (800a170 <xTaskIncrementTick+0x160>)
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4a1f      	ldr	r2, [pc, #124]	@ (800a174 <xTaskIncrementTick+0x164>)
 800a0f8:	441a      	add	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7fe ff04 	bl	8008f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a10a:	4b1b      	ldr	r3, [pc, #108]	@ (800a178 <xTaskIncrementTick+0x168>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a110:	429a      	cmp	r2, r3
 800a112:	d3b8      	bcc.n	800a086 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a114:	2301      	movs	r3, #1
 800a116:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a118:	e7b5      	b.n	800a086 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a11a:	4b17      	ldr	r3, [pc, #92]	@ (800a178 <xTaskIncrementTick+0x168>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a120:	4914      	ldr	r1, [pc, #80]	@ (800a174 <xTaskIncrementTick+0x164>)
 800a122:	4613      	mov	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d901      	bls.n	800a136 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a132:	2301      	movs	r3, #1
 800a134:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a136:	4b11      	ldr	r3, [pc, #68]	@ (800a17c <xTaskIncrementTick+0x16c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a13e:	2301      	movs	r3, #1
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e004      	b.n	800a14e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a144:	4b0e      	ldr	r3, [pc, #56]	@ (800a180 <xTaskIncrementTick+0x170>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	4a0d      	ldr	r2, [pc, #52]	@ (800a180 <xTaskIncrementTick+0x170>)
 800a14c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a14e:	697b      	ldr	r3, [r7, #20]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	2000676c 	.word	0x2000676c
 800a15c:	20006748 	.word	0x20006748
 800a160:	200066fc 	.word	0x200066fc
 800a164:	20006700 	.word	0x20006700
 800a168:	2000675c 	.word	0x2000675c
 800a16c:	20006764 	.word	0x20006764
 800a170:	2000674c 	.word	0x2000674c
 800a174:	20006274 	.word	0x20006274
 800a178:	20006270 	.word	0x20006270
 800a17c:	20006758 	.word	0x20006758
 800a180:	20006754 	.word	0x20006754

0800a184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a18a:	4b28      	ldr	r3, [pc, #160]	@ (800a22c <vTaskSwitchContext+0xa8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a192:	4b27      	ldr	r3, [pc, #156]	@ (800a230 <vTaskSwitchContext+0xac>)
 800a194:	2201      	movs	r2, #1
 800a196:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a198:	e042      	b.n	800a220 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a19a:	4b25      	ldr	r3, [pc, #148]	@ (800a230 <vTaskSwitchContext+0xac>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a0:	4b24      	ldr	r3, [pc, #144]	@ (800a234 <vTaskSwitchContext+0xb0>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	e011      	b.n	800a1cc <vTaskSwitchContext+0x48>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10b      	bne.n	800a1c6 <vTaskSwitchContext+0x42>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	e7fd      	b.n	800a1c2 <vTaskSwitchContext+0x3e>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	491a      	ldr	r1, [pc, #104]	@ (800a238 <vTaskSwitchContext+0xb4>)
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0e3      	beq.n	800a1a8 <vTaskSwitchContext+0x24>
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4a13      	ldr	r2, [pc, #76]	@ (800a238 <vTaskSwitchContext+0xb4>)
 800a1ec:	4413      	add	r3, r2
 800a1ee:	60bb      	str	r3, [r7, #8]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	605a      	str	r2, [r3, #4]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	3308      	adds	r3, #8
 800a202:	429a      	cmp	r2, r3
 800a204:	d104      	bne.n	800a210 <vTaskSwitchContext+0x8c>
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	605a      	str	r2, [r3, #4]
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	4a09      	ldr	r2, [pc, #36]	@ (800a23c <vTaskSwitchContext+0xb8>)
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	4a06      	ldr	r2, [pc, #24]	@ (800a234 <vTaskSwitchContext+0xb0>)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6013      	str	r3, [r2, #0]
}
 800a220:	bf00      	nop
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	2000676c 	.word	0x2000676c
 800a230:	20006758 	.word	0x20006758
 800a234:	2000674c 	.word	0x2000674c
 800a238:	20006274 	.word	0x20006274
 800a23c:	20006270 	.word	0x20006270

0800a240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10b      	bne.n	800a268 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	60fb      	str	r3, [r7, #12]
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	e7fd      	b.n	800a264 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a268:	4b07      	ldr	r3, [pc, #28]	@ (800a288 <vTaskPlaceOnEventList+0x48>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3318      	adds	r3, #24
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7fe fe70 	bl	8008f56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a276:	2101      	movs	r1, #1
 800a278:	6838      	ldr	r0, [r7, #0]
 800a27a:	f000 faa9 	bl	800a7d0 <prvAddCurrentTaskToDelayedList>
}
 800a27e:	bf00      	nop
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20006270 	.word	0x20006270

0800a28c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10b      	bne.n	800a2b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	617b      	str	r3, [r7, #20]
}
 800a2b0:	bf00      	nop
 800a2b2:	bf00      	nop
 800a2b4:	e7fd      	b.n	800a2b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3318      	adds	r3, #24
 800a2bc:	4619      	mov	r1, r3
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7fe fe25 	bl	8008f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	68b8      	ldr	r0, [r7, #8]
 800a2d4:	f000 fa7c 	bl	800a7d0 <prvAddCurrentTaskToDelayedList>
	}
 800a2d8:	bf00      	nop
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20006270 	.word	0x20006270

0800a2e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10b      	bne.n	800a312 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	60fb      	str	r3, [r7, #12]
}
 800a30c:	bf00      	nop
 800a30e:	bf00      	nop
 800a310:	e7fd      	b.n	800a30e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	3318      	adds	r3, #24
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe fe56 	bl	8008fc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a31c:	4b1d      	ldr	r3, [pc, #116]	@ (800a394 <xTaskRemoveFromEventList+0xb0>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d11d      	bne.n	800a360 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	3304      	adds	r3, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fe4d 	bl	8008fc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a332:	4b19      	ldr	r3, [pc, #100]	@ (800a398 <xTaskRemoveFromEventList+0xb4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d903      	bls.n	800a342 <xTaskRemoveFromEventList+0x5e>
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33e:	4a16      	ldr	r2, [pc, #88]	@ (800a398 <xTaskRemoveFromEventList+0xb4>)
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4a13      	ldr	r2, [pc, #76]	@ (800a39c <xTaskRemoveFromEventList+0xb8>)
 800a350:	441a      	add	r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3304      	adds	r3, #4
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f7fe fdd8 	bl	8008f0e <vListInsertEnd>
 800a35e:	e005      	b.n	800a36c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	3318      	adds	r3, #24
 800a364:	4619      	mov	r1, r3
 800a366:	480e      	ldr	r0, [pc, #56]	@ (800a3a0 <xTaskRemoveFromEventList+0xbc>)
 800a368:	f7fe fdd1 	bl	8008f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a370:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a4 <xTaskRemoveFromEventList+0xc0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a376:	429a      	cmp	r2, r3
 800a378:	d905      	bls.n	800a386 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a37a:	2301      	movs	r3, #1
 800a37c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a37e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <xTaskRemoveFromEventList+0xc4>)
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	e001      	b.n	800a38a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a38a:	697b      	ldr	r3, [r7, #20]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	2000676c 	.word	0x2000676c
 800a398:	2000674c 	.word	0x2000674c
 800a39c:	20006274 	.word	0x20006274
 800a3a0:	20006704 	.word	0x20006704
 800a3a4:	20006270 	.word	0x20006270
 800a3a8:	20006758 	.word	0x20006758

0800a3ac <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10b      	bne.n	800a3d2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	60fb      	str	r3, [r7, #12]
}
 800a3cc:	bf00      	nop
 800a3ce:	bf00      	nop
 800a3d0:	e7fd      	b.n	800a3ce <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a3d2:	f000 fed9 	bl	800b188 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3d6:	4b07      	ldr	r3, [pc, #28]	@ (800a3f4 <vTaskSetTimeOutState+0x48>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a3de:	4b06      	ldr	r3, [pc, #24]	@ (800a3f8 <vTaskSetTimeOutState+0x4c>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a3e6:	f000 ff01 	bl	800b1ec <vPortExitCritical>
}
 800a3ea:	bf00      	nop
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	2000675c 	.word	0x2000675c
 800a3f8:	20006748 	.word	0x20006748

0800a3fc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a404:	4b06      	ldr	r3, [pc, #24]	@ (800a420 <vTaskInternalSetTimeOutState+0x24>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a40c:	4b05      	ldr	r3, [pc, #20]	@ (800a424 <vTaskInternalSetTimeOutState+0x28>)
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	605a      	str	r2, [r3, #4]
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	2000675c 	.word	0x2000675c
 800a424:	20006748 	.word	0x20006748

0800a428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10b      	bne.n	800a450 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	613b      	str	r3, [r7, #16]
}
 800a44a:	bf00      	nop
 800a44c:	bf00      	nop
 800a44e:	e7fd      	b.n	800a44c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10b      	bne.n	800a46e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60fb      	str	r3, [r7, #12]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a46e:	f000 fe8b 	bl	800b188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a472:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e8 <xTaskCheckForTimeOut+0xc0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a48a:	d102      	bne.n	800a492 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61fb      	str	r3, [r7, #28]
 800a490:	e023      	b.n	800a4da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	4b15      	ldr	r3, [pc, #84]	@ (800a4ec <xTaskCheckForTimeOut+0xc4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d007      	beq.n	800a4ae <xTaskCheckForTimeOut+0x86>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d302      	bcc.n	800a4ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	61fb      	str	r3, [r7, #28]
 800a4ac:	e015      	b.n	800a4da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d20b      	bcs.n	800a4d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff ff99 	bl	800a3fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	61fb      	str	r3, [r7, #28]
 800a4ce:	e004      	b.n	800a4da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4da:	f000 fe87 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 800a4de:	69fb      	ldr	r3, [r7, #28]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3720      	adds	r7, #32
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20006748 	.word	0x20006748
 800a4ec:	2000675c 	.word	0x2000675c

0800a4f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4f4:	4b03      	ldr	r3, [pc, #12]	@ (800a504 <vTaskMissedYield+0x14>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]
}
 800a4fa:	bf00      	nop
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	20006758 	.word	0x20006758

0800a508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a510:	f000 f852 	bl	800a5b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a514:	4b06      	ldr	r3, [pc, #24]	@ (800a530 <prvIdleTask+0x28>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d9f9      	bls.n	800a510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a51c:	4b05      	ldr	r3, [pc, #20]	@ (800a534 <prvIdleTask+0x2c>)
 800a51e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a52c:	e7f0      	b.n	800a510 <prvIdleTask+0x8>
 800a52e:	bf00      	nop
 800a530:	20006274 	.word	0x20006274
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a53e:	2300      	movs	r3, #0
 800a540:	607b      	str	r3, [r7, #4]
 800a542:	e00c      	b.n	800a55e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4a12      	ldr	r2, [pc, #72]	@ (800a598 <prvInitialiseTaskLists+0x60>)
 800a550:	4413      	add	r3, r2
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe fcae 	bl	8008eb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3301      	adds	r3, #1
 800a55c:	607b      	str	r3, [r7, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b37      	cmp	r3, #55	@ 0x37
 800a562:	d9ef      	bls.n	800a544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a564:	480d      	ldr	r0, [pc, #52]	@ (800a59c <prvInitialiseTaskLists+0x64>)
 800a566:	f7fe fca5 	bl	8008eb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a56a:	480d      	ldr	r0, [pc, #52]	@ (800a5a0 <prvInitialiseTaskLists+0x68>)
 800a56c:	f7fe fca2 	bl	8008eb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a570:	480c      	ldr	r0, [pc, #48]	@ (800a5a4 <prvInitialiseTaskLists+0x6c>)
 800a572:	f7fe fc9f 	bl	8008eb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a576:	480c      	ldr	r0, [pc, #48]	@ (800a5a8 <prvInitialiseTaskLists+0x70>)
 800a578:	f7fe fc9c 	bl	8008eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a57c:	480b      	ldr	r0, [pc, #44]	@ (800a5ac <prvInitialiseTaskLists+0x74>)
 800a57e:	f7fe fc99 	bl	8008eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a582:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b0 <prvInitialiseTaskLists+0x78>)
 800a584:	4a05      	ldr	r2, [pc, #20]	@ (800a59c <prvInitialiseTaskLists+0x64>)
 800a586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a588:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b4 <prvInitialiseTaskLists+0x7c>)
 800a58a:	4a05      	ldr	r2, [pc, #20]	@ (800a5a0 <prvInitialiseTaskLists+0x68>)
 800a58c:	601a      	str	r2, [r3, #0]
}
 800a58e:	bf00      	nop
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	20006274 	.word	0x20006274
 800a59c:	200066d4 	.word	0x200066d4
 800a5a0:	200066e8 	.word	0x200066e8
 800a5a4:	20006704 	.word	0x20006704
 800a5a8:	20006718 	.word	0x20006718
 800a5ac:	20006730 	.word	0x20006730
 800a5b0:	200066fc 	.word	0x200066fc
 800a5b4:	20006700 	.word	0x20006700

0800a5b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5be:	e019      	b.n	800a5f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5c0:	f000 fde2 	bl	800b188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c4:	4b10      	ldr	r3, [pc, #64]	@ (800a608 <prvCheckTasksWaitingTermination+0x50>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fe fcf9 	bl	8008fc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a60c <prvCheckTasksWaitingTermination+0x54>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	4a0b      	ldr	r2, [pc, #44]	@ (800a60c <prvCheckTasksWaitingTermination+0x54>)
 800a5de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a610 <prvCheckTasksWaitingTermination+0x58>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	4a0a      	ldr	r2, [pc, #40]	@ (800a610 <prvCheckTasksWaitingTermination+0x58>)
 800a5e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5ea:	f000 fdff 	bl	800b1ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f810 	bl	800a614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5f4:	4b06      	ldr	r3, [pc, #24]	@ (800a610 <prvCheckTasksWaitingTermination+0x58>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e1      	bne.n	800a5c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5fc:	bf00      	nop
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20006718 	.word	0x20006718
 800a60c:	20006744 	.word	0x20006744
 800a610:	2000672c 	.word	0x2000672c

0800a614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a622:	2b00      	cmp	r3, #0
 800a624:	d108      	bne.n	800a638 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 ff9c 	bl	800b568 <vPortFree>
				vPortFree( pxTCB );
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 ff99 	bl	800b568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a636:	e019      	b.n	800a66c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d103      	bne.n	800a64a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 ff90 	bl	800b568 <vPortFree>
	}
 800a648:	e010      	b.n	800a66c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a650:	2b02      	cmp	r3, #2
 800a652:	d00b      	beq.n	800a66c <prvDeleteTCB+0x58>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	60fb      	str	r3, [r7, #12]
}
 800a666:	bf00      	nop
 800a668:	bf00      	nop
 800a66a:	e7fd      	b.n	800a668 <prvDeleteTCB+0x54>
	}
 800a66c:	bf00      	nop
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a67a:	4b0c      	ldr	r3, [pc, #48]	@ (800a6ac <prvResetNextTaskUnblockTime+0x38>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d104      	bne.n	800a68e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a684:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a686:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a68a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a68c:	e008      	b.n	800a6a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68e:	4b07      	ldr	r3, [pc, #28]	@ (800a6ac <prvResetNextTaskUnblockTime+0x38>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	4a04      	ldr	r2, [pc, #16]	@ (800a6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a69e:	6013      	str	r3, [r2, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	200066fc 	.word	0x200066fc
 800a6b0:	20006764 	.word	0x20006764

0800a6b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e8 <xTaskGetSchedulerState+0x34>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d102      	bne.n	800a6c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	607b      	str	r3, [r7, #4]
 800a6c6:	e008      	b.n	800a6da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c8:	4b08      	ldr	r3, [pc, #32]	@ (800a6ec <xTaskGetSchedulerState+0x38>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d102      	bne.n	800a6d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	607b      	str	r3, [r7, #4]
 800a6d4:	e001      	b.n	800a6da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6da:	687b      	ldr	r3, [r7, #4]
	}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	20006750 	.word	0x20006750
 800a6ec:	2000676c 	.word	0x2000676c

0800a6f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d058      	beq.n	800a7b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a706:	4b2f      	ldr	r3, [pc, #188]	@ (800a7c4 <xTaskPriorityDisinherit+0xd4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d00b      	beq.n	800a728 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	60fb      	str	r3, [r7, #12]
}
 800a722:	bf00      	nop
 800a724:	bf00      	nop
 800a726:	e7fd      	b.n	800a724 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10b      	bne.n	800a748 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	60bb      	str	r3, [r7, #8]
}
 800a742:	bf00      	nop
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74c:	1e5a      	subs	r2, r3, #1
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d02c      	beq.n	800a7b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a762:	2b00      	cmp	r3, #0
 800a764:	d128      	bne.n	800a7b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	3304      	adds	r3, #4
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe fc2c 	bl	8008fc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a788:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c8 <xTaskPriorityDisinherit+0xd8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d903      	bls.n	800a798 <xTaskPriorityDisinherit+0xa8>
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a794:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c8 <xTaskPriorityDisinherit+0xd8>)
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4a09      	ldr	r2, [pc, #36]	@ (800a7cc <xTaskPriorityDisinherit+0xdc>)
 800a7a6:	441a      	add	r2, r3
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	f7fe fbad 	bl	8008f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7b8:	697b      	ldr	r3, [r7, #20]
	}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20006270 	.word	0x20006270
 800a7c8:	2000674c 	.word	0x2000674c
 800a7cc:	20006274 	.word	0x20006274

0800a7d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7da:	4b21      	ldr	r3, [pc, #132]	@ (800a860 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7e0:	4b20      	ldr	r3, [pc, #128]	@ (800a864 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fbee 	bl	8008fc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7f2:	d10a      	bne.n	800a80a <prvAddCurrentTaskToDelayedList+0x3a>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d007      	beq.n	800a80a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a864 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3304      	adds	r3, #4
 800a800:	4619      	mov	r1, r3
 800a802:	4819      	ldr	r0, [pc, #100]	@ (800a868 <prvAddCurrentTaskToDelayedList+0x98>)
 800a804:	f7fe fb83 	bl	8008f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a808:	e026      	b.n	800a858 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4413      	add	r3, r2
 800a810:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a812:	4b14      	ldr	r3, [pc, #80]	@ (800a864 <prvAddCurrentTaskToDelayedList+0x94>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d209      	bcs.n	800a836 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a822:	4b12      	ldr	r3, [pc, #72]	@ (800a86c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4b0f      	ldr	r3, [pc, #60]	@ (800a864 <prvAddCurrentTaskToDelayedList+0x94>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f7fe fb91 	bl	8008f56 <vListInsert>
}
 800a834:	e010      	b.n	800a858 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a836:	4b0e      	ldr	r3, [pc, #56]	@ (800a870 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	4b0a      	ldr	r3, [pc, #40]	@ (800a864 <prvAddCurrentTaskToDelayedList+0x94>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3304      	adds	r3, #4
 800a840:	4619      	mov	r1, r3
 800a842:	4610      	mov	r0, r2
 800a844:	f7fe fb87 	bl	8008f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a848:	4b0a      	ldr	r3, [pc, #40]	@ (800a874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d202      	bcs.n	800a858 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a852:	4a08      	ldr	r2, [pc, #32]	@ (800a874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	6013      	str	r3, [r2, #0]
}
 800a858:	bf00      	nop
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20006748 	.word	0x20006748
 800a864:	20006270 	.word	0x20006270
 800a868:	20006730 	.word	0x20006730
 800a86c:	20006700 	.word	0x20006700
 800a870:	200066fc 	.word	0x200066fc
 800a874:	20006764 	.word	0x20006764

0800a878 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08a      	sub	sp, #40	@ 0x28
 800a87c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a87e:	2300      	movs	r3, #0
 800a880:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a882:	f000 fb13 	bl	800aeac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a886:	4b1d      	ldr	r3, [pc, #116]	@ (800a8fc <xTimerCreateTimerTask+0x84>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d021      	beq.n	800a8d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a896:	1d3a      	adds	r2, r7, #4
 800a898:	f107 0108 	add.w	r1, r7, #8
 800a89c:	f107 030c 	add.w	r3, r7, #12
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fe faed 	bl	8008e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	9202      	str	r2, [sp, #8]
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	460a      	mov	r2, r1
 800a8b8:	4911      	ldr	r1, [pc, #68]	@ (800a900 <xTimerCreateTimerTask+0x88>)
 800a8ba:	4812      	ldr	r0, [pc, #72]	@ (800a904 <xTimerCreateTimerTask+0x8c>)
 800a8bc:	f7ff f8a8 	bl	8009a10 <xTaskCreateStatic>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	4a11      	ldr	r2, [pc, #68]	@ (800a908 <xTimerCreateTimerTask+0x90>)
 800a8c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8c6:	4b10      	ldr	r3, [pc, #64]	@ (800a908 <xTimerCreateTimerTask+0x90>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10b      	bne.n	800a8f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	613b      	str	r3, [r7, #16]
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	e7fd      	b.n	800a8ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8f0:	697b      	ldr	r3, [r7, #20]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200067a0 	.word	0x200067a0
 800a900:	0801c8e8 	.word	0x0801c8e8
 800a904:	0800aa45 	.word	0x0800aa45
 800a908:	200067a4 	.word	0x200067a4

0800a90c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08a      	sub	sp, #40	@ 0x28
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10b      	bne.n	800a93c <xTimerGenericCommand+0x30>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	623b      	str	r3, [r7, #32]
}
 800a936:	bf00      	nop
 800a938:	bf00      	nop
 800a93a:	e7fd      	b.n	800a938 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a93c:	4b19      	ldr	r3, [pc, #100]	@ (800a9a4 <xTimerGenericCommand+0x98>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d02a      	beq.n	800a99a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	2b05      	cmp	r3, #5
 800a954:	dc18      	bgt.n	800a988 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a956:	f7ff fead 	bl	800a6b4 <xTaskGetSchedulerState>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d109      	bne.n	800a974 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a960:	4b10      	ldr	r3, [pc, #64]	@ (800a9a4 <xTimerGenericCommand+0x98>)
 800a962:	6818      	ldr	r0, [r3, #0]
 800a964:	f107 0110 	add.w	r1, r7, #16
 800a968:	2300      	movs	r3, #0
 800a96a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a96c:	f7fe fc60 	bl	8009230 <xQueueGenericSend>
 800a970:	6278      	str	r0, [r7, #36]	@ 0x24
 800a972:	e012      	b.n	800a99a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a974:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <xTimerGenericCommand+0x98>)
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	f107 0110 	add.w	r1, r7, #16
 800a97c:	2300      	movs	r3, #0
 800a97e:	2200      	movs	r2, #0
 800a980:	f7fe fc56 	bl	8009230 <xQueueGenericSend>
 800a984:	6278      	str	r0, [r7, #36]	@ 0x24
 800a986:	e008      	b.n	800a99a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a988:	4b06      	ldr	r3, [pc, #24]	@ (800a9a4 <xTimerGenericCommand+0x98>)
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	f107 0110 	add.w	r1, r7, #16
 800a990:	2300      	movs	r3, #0
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	f7fe fd4e 	bl	8009434 <xQueueGenericSendFromISR>
 800a998:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3728      	adds	r7, #40	@ 0x28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	200067a0 	.word	0x200067a0

0800a9a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af02      	add	r7, sp, #8
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9b2:	4b23      	ldr	r3, [pc, #140]	@ (800aa40 <prvProcessExpiredTimer+0x98>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe fb01 	bl	8008fc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9cc:	f003 0304 	and.w	r3, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d023      	beq.n	800aa1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	18d1      	adds	r1, r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	6978      	ldr	r0, [r7, #20]
 800a9e2:	f000 f8d5 	bl	800ab90 <prvInsertTimerInActiveList>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d020      	beq.n	800aa2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6978      	ldr	r0, [r7, #20]
 800a9f8:	f7ff ff88 	bl	800a90c <xTimerGenericCommand>
 800a9fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d114      	bne.n	800aa2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	60fb      	str	r3, [r7, #12]
}
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	e7fd      	b.n	800aa18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa22:	f023 0301 	bic.w	r3, r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	6978      	ldr	r0, [r7, #20]
 800aa34:	4798      	blx	r3
}
 800aa36:	bf00      	nop
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20006798 	.word	0x20006798

0800aa44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 f859 	bl	800ab08 <prvGetNextExpireTime>
 800aa56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 f805 	bl	800aa6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa62:	f000 f8d7 	bl	800ac14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa66:	bf00      	nop
 800aa68:	e7f0      	b.n	800aa4c <prvTimerTask+0x8>
	...

0800aa6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa76:	f7ff fa0f 	bl	8009e98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa7a:	f107 0308 	add.w	r3, r7, #8
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 f866 	bl	800ab50 <prvSampleTimeNow>
 800aa84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d130      	bne.n	800aaee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10a      	bne.n	800aaa8 <prvProcessTimerOrBlockTask+0x3c>
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d806      	bhi.n	800aaa8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa9a:	f7ff fa0b 	bl	8009eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa9e:	68f9      	ldr	r1, [r7, #12]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff ff81 	bl	800a9a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aaa6:	e024      	b.n	800aaf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d008      	beq.n	800aac0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aaae:	4b13      	ldr	r3, [pc, #76]	@ (800aafc <prvProcessTimerOrBlockTask+0x90>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <prvProcessTimerOrBlockTask+0x50>
 800aab8:	2301      	movs	r3, #1
 800aaba:	e000      	b.n	800aabe <prvProcessTimerOrBlockTask+0x52>
 800aabc:	2300      	movs	r3, #0
 800aabe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aac0:	4b0f      	ldr	r3, [pc, #60]	@ (800ab00 <prvProcessTimerOrBlockTask+0x94>)
 800aac2:	6818      	ldr	r0, [r3, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	4619      	mov	r1, r3
 800aace:	f7fe ff6b 	bl	80099a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aad2:	f7ff f9ef 	bl	8009eb4 <xTaskResumeAll>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aadc:	4b09      	ldr	r3, [pc, #36]	@ (800ab04 <prvProcessTimerOrBlockTask+0x98>)
 800aade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	f3bf 8f6f 	isb	sy
}
 800aaec:	e001      	b.n	800aaf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aaee:	f7ff f9e1 	bl	8009eb4 <xTaskResumeAll>
}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	2000679c 	.word	0x2000679c
 800ab00:	200067a0 	.word	0x200067a0
 800ab04:	e000ed04 	.word	0xe000ed04

0800ab08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab10:	4b0e      	ldr	r3, [pc, #56]	@ (800ab4c <prvGetNextExpireTime+0x44>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <prvGetNextExpireTime+0x16>
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	e000      	b.n	800ab20 <prvGetNextExpireTime+0x18>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d105      	bne.n	800ab38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab2c:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <prvGetNextExpireTime+0x44>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	e001      	b.n	800ab3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	20006798 	.word	0x20006798

0800ab50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab58:	f7ff fa4a 	bl	8009ff0 <xTaskGetTickCount>
 800ab5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab8c <prvSampleTimeNow+0x3c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d205      	bcs.n	800ab74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab68:	f000 f93a 	bl	800ade0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e002      	b.n	800ab7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab7a:	4a04      	ldr	r2, [pc, #16]	@ (800ab8c <prvSampleTimeNow+0x3c>)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab80:	68fb      	ldr	r3, [r7, #12]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	200067a8 	.word	0x200067a8

0800ab90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d812      	bhi.n	800abdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	1ad2      	subs	r2, r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d302      	bcc.n	800abca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800abc4:	2301      	movs	r3, #1
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	e01b      	b.n	800ac02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800abca:	4b10      	ldr	r3, [pc, #64]	@ (800ac0c <prvInsertTimerInActiveList+0x7c>)
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3304      	adds	r3, #4
 800abd2:	4619      	mov	r1, r3
 800abd4:	4610      	mov	r0, r2
 800abd6:	f7fe f9be 	bl	8008f56 <vListInsert>
 800abda:	e012      	b.n	800ac02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d206      	bcs.n	800abf2 <prvInsertTimerInActiveList+0x62>
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d302      	bcc.n	800abf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800abec:	2301      	movs	r3, #1
 800abee:	617b      	str	r3, [r7, #20]
 800abf0:	e007      	b.n	800ac02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abf2:	4b07      	ldr	r3, [pc, #28]	@ (800ac10 <prvInsertTimerInActiveList+0x80>)
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3304      	adds	r3, #4
 800abfa:	4619      	mov	r1, r3
 800abfc:	4610      	mov	r0, r2
 800abfe:	f7fe f9aa 	bl	8008f56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac02:	697b      	ldr	r3, [r7, #20]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	2000679c 	.word	0x2000679c
 800ac10:	20006798 	.word	0x20006798

0800ac14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08e      	sub	sp, #56	@ 0x38
 800ac18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac1a:	e0ce      	b.n	800adba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da19      	bge.n	800ac56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac22:	1d3b      	adds	r3, r7, #4
 800ac24:	3304      	adds	r3, #4
 800ac26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10b      	bne.n	800ac46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	61fb      	str	r3, [r7, #28]
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	e7fd      	b.n	800ac42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac4c:	6850      	ldr	r0, [r2, #4]
 800ac4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac50:	6892      	ldr	r2, [r2, #8]
 800ac52:	4611      	mov	r1, r2
 800ac54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f2c0 80ae 	blt.w	800adba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d004      	beq.n	800ac74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe f9aa 	bl	8008fc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac74:	463b      	mov	r3, r7
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7ff ff6a 	bl	800ab50 <prvSampleTimeNow>
 800ac7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	f200 8097 	bhi.w	800adb4 <prvProcessReceivedCommands+0x1a0>
 800ac86:	a201      	add	r2, pc, #4	@ (adr r2, 800ac8c <prvProcessReceivedCommands+0x78>)
 800ac88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8c:	0800acb5 	.word	0x0800acb5
 800ac90:	0800acb5 	.word	0x0800acb5
 800ac94:	0800acb5 	.word	0x0800acb5
 800ac98:	0800ad2b 	.word	0x0800ad2b
 800ac9c:	0800ad3f 	.word	0x0800ad3f
 800aca0:	0800ad8b 	.word	0x0800ad8b
 800aca4:	0800acb5 	.word	0x0800acb5
 800aca8:	0800acb5 	.word	0x0800acb5
 800acac:	0800ad2b 	.word	0x0800ad2b
 800acb0:	0800ad3f 	.word	0x0800ad3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acba:	f043 0301 	orr.w	r3, r3, #1
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	18d1      	adds	r1, r2, r3
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acd4:	f7ff ff5c 	bl	800ab90 <prvInsertTimerInActiveList>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d06c      	beq.n	800adb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ace4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ace6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acec:	f003 0304 	and.w	r3, r3, #4
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d061      	beq.n	800adb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	441a      	add	r2, r3
 800acfc:	2300      	movs	r3, #0
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2300      	movs	r3, #0
 800ad02:	2100      	movs	r1, #0
 800ad04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad06:	f7ff fe01 	bl	800a90c <xTimerGenericCommand>
 800ad0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d152      	bne.n	800adb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	61bb      	str	r3, [r7, #24]
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
 800ad28:	e7fd      	b.n	800ad26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ad3c:	e03d      	b.n	800adba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10b      	bne.n	800ad76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	617b      	str	r3, [r7, #20]
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	e7fd      	b.n	800ad72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	699a      	ldr	r2, [r3, #24]
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	18d1      	adds	r1, r2, r3
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad84:	f7ff ff04 	bl	800ab90 <prvInsertTimerInActiveList>
					break;
 800ad88:	e017      	b.n	800adba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ad98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad9a:	f000 fbe5 	bl	800b568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad9e:	e00c      	b.n	800adba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800adb2:	e002      	b.n	800adba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800adb4:	bf00      	nop
 800adb6:	e000      	b.n	800adba <prvProcessReceivedCommands+0x1a6>
					break;
 800adb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adba:	4b08      	ldr	r3, [pc, #32]	@ (800addc <prvProcessReceivedCommands+0x1c8>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	1d39      	adds	r1, r7, #4
 800adc0:	2200      	movs	r2, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fbd4 	bl	8009570 <xQueueReceive>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f47f af26 	bne.w	800ac1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	3730      	adds	r7, #48	@ 0x30
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	200067a0 	.word	0x200067a0

0800ade0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ade6:	e049      	b.n	800ae7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ade8:	4b2e      	ldr	r3, [pc, #184]	@ (800aea4 <prvSwitchTimerLists+0xc4>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf2:	4b2c      	ldr	r3, [pc, #176]	@ (800aea4 <prvSwitchTimerLists+0xc4>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fe f8e1 	bl	8008fc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d02f      	beq.n	800ae7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	4413      	add	r3, r2
 800ae24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d90e      	bls.n	800ae4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aea4 <prvSwitchTimerLists+0xc4>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3304      	adds	r3, #4
 800ae42:	4619      	mov	r1, r3
 800ae44:	4610      	mov	r0, r2
 800ae46:	f7fe f886 	bl	8008f56 <vListInsert>
 800ae4a:	e017      	b.n	800ae7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	2300      	movs	r3, #0
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	2100      	movs	r1, #0
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7ff fd58 	bl	800a90c <xTimerGenericCommand>
 800ae5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10b      	bne.n	800ae7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	603b      	str	r3, [r7, #0]
}
 800ae76:	bf00      	nop
 800ae78:	bf00      	nop
 800ae7a:	e7fd      	b.n	800ae78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae7c:	4b09      	ldr	r3, [pc, #36]	@ (800aea4 <prvSwitchTimerLists+0xc4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1b0      	bne.n	800ade8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae86:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <prvSwitchTimerLists+0xc4>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae8c:	4b06      	ldr	r3, [pc, #24]	@ (800aea8 <prvSwitchTimerLists+0xc8>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a04      	ldr	r2, [pc, #16]	@ (800aea4 <prvSwitchTimerLists+0xc4>)
 800ae92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae94:	4a04      	ldr	r2, [pc, #16]	@ (800aea8 <prvSwitchTimerLists+0xc8>)
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	6013      	str	r3, [r2, #0]
}
 800ae9a:	bf00      	nop
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20006798 	.word	0x20006798
 800aea8:	2000679c 	.word	0x2000679c

0800aeac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aeb2:	f000 f969 	bl	800b188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aeb6:	4b15      	ldr	r3, [pc, #84]	@ (800af0c <prvCheckForValidListAndQueue+0x60>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d120      	bne.n	800af00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aebe:	4814      	ldr	r0, [pc, #80]	@ (800af10 <prvCheckForValidListAndQueue+0x64>)
 800aec0:	f7fd fff8 	bl	8008eb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aec4:	4813      	ldr	r0, [pc, #76]	@ (800af14 <prvCheckForValidListAndQueue+0x68>)
 800aec6:	f7fd fff5 	bl	8008eb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aeca:	4b13      	ldr	r3, [pc, #76]	@ (800af18 <prvCheckForValidListAndQueue+0x6c>)
 800aecc:	4a10      	ldr	r2, [pc, #64]	@ (800af10 <prvCheckForValidListAndQueue+0x64>)
 800aece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aed0:	4b12      	ldr	r3, [pc, #72]	@ (800af1c <prvCheckForValidListAndQueue+0x70>)
 800aed2:	4a10      	ldr	r2, [pc, #64]	@ (800af14 <prvCheckForValidListAndQueue+0x68>)
 800aed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aed6:	2300      	movs	r3, #0
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	4b11      	ldr	r3, [pc, #68]	@ (800af20 <prvCheckForValidListAndQueue+0x74>)
 800aedc:	4a11      	ldr	r2, [pc, #68]	@ (800af24 <prvCheckForValidListAndQueue+0x78>)
 800aede:	2110      	movs	r1, #16
 800aee0:	200a      	movs	r0, #10
 800aee2:	f7fe f905 	bl	80090f0 <xQueueGenericCreateStatic>
 800aee6:	4603      	mov	r3, r0
 800aee8:	4a08      	ldr	r2, [pc, #32]	@ (800af0c <prvCheckForValidListAndQueue+0x60>)
 800aeea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aeec:	4b07      	ldr	r3, [pc, #28]	@ (800af0c <prvCheckForValidListAndQueue+0x60>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aef4:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <prvCheckForValidListAndQueue+0x60>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	490b      	ldr	r1, [pc, #44]	@ (800af28 <prvCheckForValidListAndQueue+0x7c>)
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe fd2a 	bl	8009954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af00:	f000 f974 	bl	800b1ec <vPortExitCritical>
}
 800af04:	bf00      	nop
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200067a0 	.word	0x200067a0
 800af10:	20006770 	.word	0x20006770
 800af14:	20006784 	.word	0x20006784
 800af18:	20006798 	.word	0x20006798
 800af1c:	2000679c 	.word	0x2000679c
 800af20:	2000684c 	.word	0x2000684c
 800af24:	200067ac 	.word	0x200067ac
 800af28:	0801c8f0 	.word	0x0801c8f0

0800af2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3b04      	subs	r3, #4
 800af3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800af44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3b04      	subs	r3, #4
 800af4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	f023 0201 	bic.w	r2, r3, #1
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3b04      	subs	r3, #4
 800af5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af5c:	4a0c      	ldr	r2, [pc, #48]	@ (800af90 <pxPortInitialiseStack+0x64>)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3b14      	subs	r3, #20
 800af66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3b04      	subs	r3, #4
 800af72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f06f 0202 	mvn.w	r2, #2
 800af7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3b20      	subs	r3, #32
 800af80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af82:	68fb      	ldr	r3, [r7, #12]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	0800af95 	.word	0x0800af95

0800af94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af9e:	4b13      	ldr	r3, [pc, #76]	@ (800afec <prvTaskExitError+0x58>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afa6:	d00b      	beq.n	800afc0 <prvTaskExitError+0x2c>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	60fb      	str	r3, [r7, #12]
}
 800afba:	bf00      	nop
 800afbc:	bf00      	nop
 800afbe:	e7fd      	b.n	800afbc <prvTaskExitError+0x28>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	60bb      	str	r3, [r7, #8]
}
 800afd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800afd4:	bf00      	nop
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0fc      	beq.n	800afd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	200000a8 	.word	0x200000a8

0800aff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aff0:	4b07      	ldr	r3, [pc, #28]	@ (800b010 <pxCurrentTCBConst2>)
 800aff2:	6819      	ldr	r1, [r3, #0]
 800aff4:	6808      	ldr	r0, [r1, #0]
 800aff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affa:	f380 8809 	msr	PSP, r0
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f04f 0000 	mov.w	r0, #0
 800b006:	f380 8811 	msr	BASEPRI, r0
 800b00a:	4770      	bx	lr
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst2>:
 800b010:	20006270 	.word	0x20006270
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b018:	4808      	ldr	r0, [pc, #32]	@ (800b03c <prvPortStartFirstTask+0x24>)
 800b01a:	6800      	ldr	r0, [r0, #0]
 800b01c:	6800      	ldr	r0, [r0, #0]
 800b01e:	f380 8808 	msr	MSP, r0
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f380 8814 	msr	CONTROL, r0
 800b02a:	b662      	cpsie	i
 800b02c:	b661      	cpsie	f
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	df00      	svc	0
 800b038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b03a:	bf00      	nop
 800b03c:	e000ed08 	.word	0xe000ed08

0800b040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b046:	4b47      	ldr	r3, [pc, #284]	@ (800b164 <xPortStartScheduler+0x124>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a47      	ldr	r2, [pc, #284]	@ (800b168 <xPortStartScheduler+0x128>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d10b      	bne.n	800b068 <xPortStartScheduler+0x28>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	613b      	str	r3, [r7, #16]
}
 800b062:	bf00      	nop
 800b064:	bf00      	nop
 800b066:	e7fd      	b.n	800b064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b068:	4b3e      	ldr	r3, [pc, #248]	@ (800b164 <xPortStartScheduler+0x124>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a3f      	ldr	r2, [pc, #252]	@ (800b16c <xPortStartScheduler+0x12c>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d10b      	bne.n	800b08a <xPortStartScheduler+0x4a>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	60fb      	str	r3, [r7, #12]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b08a:	4b39      	ldr	r3, [pc, #228]	@ (800b170 <xPortStartScheduler+0x130>)
 800b08c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	22ff      	movs	r2, #255	@ 0xff
 800b09a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0a4:	78fb      	ldrb	r3, [r7, #3]
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	4b31      	ldr	r3, [pc, #196]	@ (800b174 <xPortStartScheduler+0x134>)
 800b0b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0b2:	4b31      	ldr	r3, [pc, #196]	@ (800b178 <xPortStartScheduler+0x138>)
 800b0b4:	2207      	movs	r2, #7
 800b0b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0b8:	e009      	b.n	800b0ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b178 <xPortStartScheduler+0x138>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b178 <xPortStartScheduler+0x138>)
 800b0c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0ce:	78fb      	ldrb	r3, [r7, #3]
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0d6:	2b80      	cmp	r3, #128	@ 0x80
 800b0d8:	d0ef      	beq.n	800b0ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0da:	4b27      	ldr	r3, [pc, #156]	@ (800b178 <xPortStartScheduler+0x138>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f1c3 0307 	rsb	r3, r3, #7
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d00b      	beq.n	800b0fe <xPortStartScheduler+0xbe>
	__asm volatile
 800b0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	60bb      	str	r3, [r7, #8]
}
 800b0f8:	bf00      	nop
 800b0fa:	bf00      	nop
 800b0fc:	e7fd      	b.n	800b0fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b178 <xPortStartScheduler+0x138>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	021b      	lsls	r3, r3, #8
 800b104:	4a1c      	ldr	r2, [pc, #112]	@ (800b178 <xPortStartScheduler+0x138>)
 800b106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b108:	4b1b      	ldr	r3, [pc, #108]	@ (800b178 <xPortStartScheduler+0x138>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b110:	4a19      	ldr	r2, [pc, #100]	@ (800b178 <xPortStartScheduler+0x138>)
 800b112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	b2da      	uxtb	r2, r3
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b11c:	4b17      	ldr	r3, [pc, #92]	@ (800b17c <xPortStartScheduler+0x13c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a16      	ldr	r2, [pc, #88]	@ (800b17c <xPortStartScheduler+0x13c>)
 800b122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b128:	4b14      	ldr	r3, [pc, #80]	@ (800b17c <xPortStartScheduler+0x13c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a13      	ldr	r2, [pc, #76]	@ (800b17c <xPortStartScheduler+0x13c>)
 800b12e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b134:	f000 f8da 	bl	800b2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b138:	4b11      	ldr	r3, [pc, #68]	@ (800b180 <xPortStartScheduler+0x140>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b13e:	f000 f8f9 	bl	800b334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b142:	4b10      	ldr	r3, [pc, #64]	@ (800b184 <xPortStartScheduler+0x144>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a0f      	ldr	r2, [pc, #60]	@ (800b184 <xPortStartScheduler+0x144>)
 800b148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b14c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b14e:	f7ff ff63 	bl	800b018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b152:	f7ff f817 	bl	800a184 <vTaskSwitchContext>
	prvTaskExitError();
 800b156:	f7ff ff1d 	bl	800af94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	e000ed00 	.word	0xe000ed00
 800b168:	410fc271 	.word	0x410fc271
 800b16c:	410fc270 	.word	0x410fc270
 800b170:	e000e400 	.word	0xe000e400
 800b174:	2000689c 	.word	0x2000689c
 800b178:	200068a0 	.word	0x200068a0
 800b17c:	e000ed20 	.word	0xe000ed20
 800b180:	200000a8 	.word	0x200000a8
 800b184:	e000ef34 	.word	0xe000ef34

0800b188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	607b      	str	r3, [r7, #4]
}
 800b1a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1a2:	4b10      	ldr	r3, [pc, #64]	@ (800b1e4 <vPortEnterCritical+0x5c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b1e4 <vPortEnterCritical+0x5c>)
 800b1aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e4 <vPortEnterCritical+0x5c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d110      	bne.n	800b1d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b1e8 <vPortEnterCritical+0x60>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00b      	beq.n	800b1d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	603b      	str	r3, [r7, #0]
}
 800b1d0:	bf00      	nop
 800b1d2:	bf00      	nop
 800b1d4:	e7fd      	b.n	800b1d2 <vPortEnterCritical+0x4a>
	}
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	200000a8 	.word	0x200000a8
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1f2:	4b12      	ldr	r3, [pc, #72]	@ (800b23c <vPortExitCritical+0x50>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10b      	bne.n	800b212 <vPortExitCritical+0x26>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	607b      	str	r3, [r7, #4]
}
 800b20c:	bf00      	nop
 800b20e:	bf00      	nop
 800b210:	e7fd      	b.n	800b20e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b212:	4b0a      	ldr	r3, [pc, #40]	@ (800b23c <vPortExitCritical+0x50>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3b01      	subs	r3, #1
 800b218:	4a08      	ldr	r2, [pc, #32]	@ (800b23c <vPortExitCritical+0x50>)
 800b21a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b21c:	4b07      	ldr	r3, [pc, #28]	@ (800b23c <vPortExitCritical+0x50>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d105      	bne.n	800b230 <vPortExitCritical+0x44>
 800b224:	2300      	movs	r3, #0
 800b226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	f383 8811 	msr	BASEPRI, r3
}
 800b22e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200000a8 	.word	0x200000a8

0800b240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b240:	f3ef 8009 	mrs	r0, PSP
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4b15      	ldr	r3, [pc, #84]	@ (800b2a0 <pxCurrentTCBConst>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	f01e 0f10 	tst.w	lr, #16
 800b250:	bf08      	it	eq
 800b252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	6010      	str	r0, [r2, #0]
 800b25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b264:	f380 8811 	msr	BASEPRI, r0
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f7fe ff88 	bl	800a184 <vTaskSwitchContext>
 800b274:	f04f 0000 	mov.w	r0, #0
 800b278:	f380 8811 	msr	BASEPRI, r0
 800b27c:	bc09      	pop	{r0, r3}
 800b27e:	6819      	ldr	r1, [r3, #0]
 800b280:	6808      	ldr	r0, [r1, #0]
 800b282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b286:	f01e 0f10 	tst.w	lr, #16
 800b28a:	bf08      	it	eq
 800b28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b290:	f380 8809 	msr	PSP, r0
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	f3af 8000 	nop.w

0800b2a0 <pxCurrentTCBConst>:
 800b2a0:	20006270 	.word	0x20006270
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop

0800b2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	607b      	str	r3, [r7, #4]
}
 800b2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2c2:	f7fe fea5 	bl	800a010 <xTaskIncrementTick>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2cc:	4b06      	ldr	r3, [pc, #24]	@ (800b2e8 <xPortSysTickHandler+0x40>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	f383 8811 	msr	BASEPRI, r3
}
 800b2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b324 <vPortSetupTimerInterrupt+0x38>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b328 <vPortSetupTimerInterrupt+0x3c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0a      	ldr	r2, [pc, #40]	@ (800b32c <vPortSetupTimerInterrupt+0x40>)
 800b302:	fba2 2303 	umull	r2, r3, r2, r3
 800b306:	099b      	lsrs	r3, r3, #6
 800b308:	4a09      	ldr	r2, [pc, #36]	@ (800b330 <vPortSetupTimerInterrupt+0x44>)
 800b30a:	3b01      	subs	r3, #1
 800b30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b30e:	4b04      	ldr	r3, [pc, #16]	@ (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b310:	2207      	movs	r2, #7
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	e000e010 	.word	0xe000e010
 800b324:	e000e018 	.word	0xe000e018
 800b328:	20000008 	.word	0x20000008
 800b32c:	10624dd3 	.word	0x10624dd3
 800b330:	e000e014 	.word	0xe000e014

0800b334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b344 <vPortEnableVFP+0x10>
 800b338:	6801      	ldr	r1, [r0, #0]
 800b33a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b33e:	6001      	str	r1, [r0, #0]
 800b340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b342:	bf00      	nop
 800b344:	e000ed88 	.word	0xe000ed88

0800b348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b34e:	f3ef 8305 	mrs	r3, IPSR
 800b352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b0f      	cmp	r3, #15
 800b358:	d915      	bls.n	800b386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b35a:	4a18      	ldr	r2, [pc, #96]	@ (800b3bc <vPortValidateInterruptPriority+0x74>)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b364:	4b16      	ldr	r3, [pc, #88]	@ (800b3c0 <vPortValidateInterruptPriority+0x78>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	7afa      	ldrb	r2, [r7, #11]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d20b      	bcs.n	800b386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	607b      	str	r3, [r7, #4]
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	e7fd      	b.n	800b382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b386:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c4 <vPortValidateInterruptPriority+0x7c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b38e:	4b0e      	ldr	r3, [pc, #56]	@ (800b3c8 <vPortValidateInterruptPriority+0x80>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d90b      	bls.n	800b3ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	603b      	str	r3, [r7, #0]
}
 800b3a8:	bf00      	nop
 800b3aa:	bf00      	nop
 800b3ac:	e7fd      	b.n	800b3aa <vPortValidateInterruptPriority+0x62>
	}
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	e000e3f0 	.word	0xe000e3f0
 800b3c0:	2000689c 	.word	0x2000689c
 800b3c4:	e000ed0c 	.word	0xe000ed0c
 800b3c8:	200068a0 	.word	0x200068a0

0800b3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08a      	sub	sp, #40	@ 0x28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3d8:	f7fe fd5e 	bl	8009e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b550 <pvPortMalloc+0x184>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3e4:	f000 f924 	bl	800b630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3e8:	4b5a      	ldr	r3, [pc, #360]	@ (800b554 <pvPortMalloc+0x188>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f040 8095 	bne.w	800b520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d01e      	beq.n	800b43a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4413      	add	r3, r2
 800b402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d015      	beq.n	800b43a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f023 0307 	bic.w	r3, r3, #7
 800b414:	3308      	adds	r3, #8
 800b416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f003 0307 	and.w	r3, r3, #7
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00b      	beq.n	800b43a <pvPortMalloc+0x6e>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	617b      	str	r3, [r7, #20]
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	e7fd      	b.n	800b436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d06f      	beq.n	800b520 <pvPortMalloc+0x154>
 800b440:	4b45      	ldr	r3, [pc, #276]	@ (800b558 <pvPortMalloc+0x18c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d86a      	bhi.n	800b520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b44a:	4b44      	ldr	r3, [pc, #272]	@ (800b55c <pvPortMalloc+0x190>)
 800b44c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b44e:	4b43      	ldr	r3, [pc, #268]	@ (800b55c <pvPortMalloc+0x190>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b454:	e004      	b.n	800b460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d903      	bls.n	800b472 <pvPortMalloc+0xa6>
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1f1      	bne.n	800b456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b472:	4b37      	ldr	r3, [pc, #220]	@ (800b550 <pvPortMalloc+0x184>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b478:	429a      	cmp	r2, r3
 800b47a:	d051      	beq.n	800b520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2208      	movs	r2, #8
 800b482:	4413      	add	r3, r2
 800b484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	1ad2      	subs	r2, r2, r3
 800b496:	2308      	movs	r3, #8
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d920      	bls.n	800b4e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00b      	beq.n	800b4c8 <pvPortMalloc+0xfc>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	613b      	str	r3, [r7, #16]
}
 800b4c2:	bf00      	nop
 800b4c4:	bf00      	nop
 800b4c6:	e7fd      	b.n	800b4c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4da:	69b8      	ldr	r0, [r7, #24]
 800b4dc:	f000 f90a 	bl	800b6f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b558 <pvPortMalloc+0x18c>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800b558 <pvPortMalloc+0x18c>)
 800b4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b558 <pvPortMalloc+0x18c>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b560 <pvPortMalloc+0x194>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d203      	bcs.n	800b502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4fa:	4b17      	ldr	r3, [pc, #92]	@ (800b558 <pvPortMalloc+0x18c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a18      	ldr	r2, [pc, #96]	@ (800b560 <pvPortMalloc+0x194>)
 800b500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	4b13      	ldr	r3, [pc, #76]	@ (800b554 <pvPortMalloc+0x188>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b516:	4b13      	ldr	r3, [pc, #76]	@ (800b564 <pvPortMalloc+0x198>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3301      	adds	r3, #1
 800b51c:	4a11      	ldr	r2, [pc, #68]	@ (800b564 <pvPortMalloc+0x198>)
 800b51e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b520:	f7fe fcc8 	bl	8009eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00b      	beq.n	800b546 <pvPortMalloc+0x17a>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	60fb      	str	r3, [r7, #12]
}
 800b540:	bf00      	nop
 800b542:	bf00      	nop
 800b544:	e7fd      	b.n	800b542 <pvPortMalloc+0x176>
	return pvReturn;
 800b546:	69fb      	ldr	r3, [r7, #28]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3728      	adds	r7, #40	@ 0x28
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	200074ac 	.word	0x200074ac
 800b554:	200074c0 	.word	0x200074c0
 800b558:	200074b0 	.word	0x200074b0
 800b55c:	200074a4 	.word	0x200074a4
 800b560:	200074b4 	.word	0x200074b4
 800b564:	200074b8 	.word	0x200074b8

0800b568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d04f      	beq.n	800b61a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b57a:	2308      	movs	r3, #8
 800b57c:	425b      	negs	r3, r3
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	4413      	add	r3, r2
 800b582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	4b25      	ldr	r3, [pc, #148]	@ (800b624 <vPortFree+0xbc>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4013      	ands	r3, r2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <vPortFree+0x46>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	60fb      	str	r3, [r7, #12]
}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	e7fd      	b.n	800b5aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00b      	beq.n	800b5ce <vPortFree+0x66>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	60bb      	str	r3, [r7, #8]
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	e7fd      	b.n	800b5ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	4b14      	ldr	r3, [pc, #80]	@ (800b624 <vPortFree+0xbc>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d01e      	beq.n	800b61a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d11a      	bne.n	800b61a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b624 <vPortFree+0xbc>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	43db      	mvns	r3, r3
 800b5ee:	401a      	ands	r2, r3
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5f4:	f7fe fc50 	bl	8009e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b628 <vPortFree+0xc0>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4413      	add	r3, r2
 800b602:	4a09      	ldr	r2, [pc, #36]	@ (800b628 <vPortFree+0xc0>)
 800b604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b606:	6938      	ldr	r0, [r7, #16]
 800b608:	f000 f874 	bl	800b6f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b60c:	4b07      	ldr	r3, [pc, #28]	@ (800b62c <vPortFree+0xc4>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3301      	adds	r3, #1
 800b612:	4a06      	ldr	r2, [pc, #24]	@ (800b62c <vPortFree+0xc4>)
 800b614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b616:	f7fe fc4d 	bl	8009eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b61a:	bf00      	nop
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	200074c0 	.word	0x200074c0
 800b628:	200074b0 	.word	0x200074b0
 800b62c:	200074bc 	.word	0x200074bc

0800b630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b636:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b63a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b63c:	4b27      	ldr	r3, [pc, #156]	@ (800b6dc <prvHeapInit+0xac>)
 800b63e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00c      	beq.n	800b664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3307      	adds	r3, #7
 800b64e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f023 0307 	bic.w	r3, r3, #7
 800b656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6dc <prvHeapInit+0xac>)
 800b660:	4413      	add	r3, r2
 800b662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b668:	4a1d      	ldr	r2, [pc, #116]	@ (800b6e0 <prvHeapInit+0xb0>)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b66e:	4b1c      	ldr	r3, [pc, #112]	@ (800b6e0 <prvHeapInit+0xb0>)
 800b670:	2200      	movs	r2, #0
 800b672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	4413      	add	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b67c:	2208      	movs	r2, #8
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	1a9b      	subs	r3, r3, r2
 800b682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 0307 	bic.w	r3, r3, #7
 800b68a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4a15      	ldr	r2, [pc, #84]	@ (800b6e4 <prvHeapInit+0xb4>)
 800b690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b692:	4b14      	ldr	r3, [pc, #80]	@ (800b6e4 <prvHeapInit+0xb4>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2200      	movs	r2, #0
 800b698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b69a:	4b12      	ldr	r3, [pc, #72]	@ (800b6e4 <prvHeapInit+0xb4>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	1ad2      	subs	r2, r2, r3
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e4 <prvHeapInit+0xb4>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b6e8 <prvHeapInit+0xb8>)
 800b6be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	4a09      	ldr	r2, [pc, #36]	@ (800b6ec <prvHeapInit+0xbc>)
 800b6c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6c8:	4b09      	ldr	r3, [pc, #36]	@ (800b6f0 <prvHeapInit+0xc0>)
 800b6ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b6ce:	601a      	str	r2, [r3, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	200068a4 	.word	0x200068a4
 800b6e0:	200074a4 	.word	0x200074a4
 800b6e4:	200074ac 	.word	0x200074ac
 800b6e8:	200074b4 	.word	0x200074b4
 800b6ec:	200074b0 	.word	0x200074b0
 800b6f0:	200074c0 	.word	0x200074c0

0800b6f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6fc:	4b28      	ldr	r3, [pc, #160]	@ (800b7a0 <prvInsertBlockIntoFreeList+0xac>)
 800b6fe:	60fb      	str	r3, [r7, #12]
 800b700:	e002      	b.n	800b708 <prvInsertBlockIntoFreeList+0x14>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d8f7      	bhi.n	800b702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	4413      	add	r3, r2
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	429a      	cmp	r2, r3
 800b722:	d108      	bne.n	800b736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	441a      	add	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	441a      	add	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	d118      	bne.n	800b77c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	4b15      	ldr	r3, [pc, #84]	@ (800b7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d00d      	beq.n	800b772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	441a      	add	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	e008      	b.n	800b784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b772:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	e003      	b.n	800b784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d002      	beq.n	800b792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b792:	bf00      	nop
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	200074a4 	.word	0x200074a4
 800b7a4:	200074ac 	.word	0x200074ac

0800b7a8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b7a8:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	b10a      	cbz	r2, 800b7b2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800b7ae:	4803      	ldr	r0, [pc, #12]	@ (800b7bc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b7b0:	4770      	bx	lr
 800b7b2:	4a03      	ldr	r2, [pc, #12]	@ (800b7c0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800b7b4:	4801      	ldr	r0, [pc, #4]	@ (800b7bc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b7b6:	6812      	ldr	r2, [r2, #0]
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	4770      	bx	lr
 800b7bc:	200000b4 	.word	0x200000b4
 800b7c0:	200003bc 	.word	0x200003bc

0800b7c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b7c4:	4a02      	ldr	r2, [pc, #8]	@ (800b7d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800b7c6:	4b03      	ldr	r3, [pc, #12]	@ (800b7d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800b7c8:	6812      	ldr	r2, [r2, #0]
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	200003bc 	.word	0x200003bc
 800b7d4:	200000b4 	.word	0x200000b4

0800b7d8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800b7d8:	f004 bf58 	b.w	801068c <geometry_msgs__msg__Twist__init>

0800b7dc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800b7dc:	f004 bf7a 	b.w	80106d4 <geometry_msgs__msg__Twist__fini>

0800b7e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	f000 f819 	bl	800b818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b7e6:	4c07      	ldr	r4, [pc, #28]	@ (800b804 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800b7e8:	60e0      	str	r0, [r4, #12]
 800b7ea:	f000 f815 	bl	800b818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b7ee:	4b06      	ldr	r3, [pc, #24]	@ (800b808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800b7f0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	b10a      	cbz	r2, 800b7fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800b7f6:	4804      	ldr	r0, [pc, #16]	@ (800b808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800b7f8:	bd10      	pop	{r4, pc}
 800b7fa:	4a04      	ldr	r2, [pc, #16]	@ (800b80c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800b7fc:	4802      	ldr	r0, [pc, #8]	@ (800b808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	bd10      	pop	{r4, pc}
 800b804:	200000c0 	.word	0x200000c0
 800b808:	20000138 	.word	0x20000138
 800b80c:	200003c0 	.word	0x200003c0

0800b810 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800b810:	f004 bf6c 	b.w	80106ec <geometry_msgs__msg__Vector3__init>

0800b814 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800b814:	f004 bf6e 	b.w	80106f4 <geometry_msgs__msg__Vector3__fini>

0800b818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800b818:	4b04      	ldr	r3, [pc, #16]	@ (800b82c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	b10a      	cbz	r2, 800b822 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800b81e:	4803      	ldr	r0, [pc, #12]	@ (800b82c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800b820:	4770      	bx	lr
 800b822:	4a03      	ldr	r2, [pc, #12]	@ (800b830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800b824:	4801      	ldr	r0, [pc, #4]	@ (800b82c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800b826:	6812      	ldr	r2, [r2, #0]
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	4770      	bx	lr
 800b82c:	200001f8 	.word	0x200001f8
 800b830:	200003c0 	.word	0x200003c0

0800b834 <get_serialized_size_geometry_msgs__msg__Twist>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4604      	mov	r4, r0
 800b838:	b148      	cbz	r0, 800b84e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800b83a:	460d      	mov	r5, r1
 800b83c:	f000 f860 	bl	800b900 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b840:	4606      	mov	r6, r0
 800b842:	1829      	adds	r1, r5, r0
 800b844:	f104 0018 	add.w	r0, r4, #24
 800b848:	f000 f85a 	bl	800b900 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b84c:	4430      	add	r0, r6
 800b84e:	bd70      	pop	{r4, r5, r6, pc}

0800b850 <_Twist__cdr_deserialize>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	460c      	mov	r4, r1
 800b854:	b189      	cbz	r1, 800b87a <_Twist__cdr_deserialize+0x2a>
 800b856:	4605      	mov	r5, r0
 800b858:	f000 f8de 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b85c:	6843      	ldr	r3, [r0, #4]
 800b85e:	4621      	mov	r1, r4
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	4628      	mov	r0, r5
 800b864:	4798      	blx	r3
 800b866:	f000 f8d7 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b86a:	6843      	ldr	r3, [r0, #4]
 800b86c:	f104 0118 	add.w	r1, r4, #24
 800b870:	4628      	mov	r0, r5
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b878:	4718      	bx	r3
 800b87a:	4608      	mov	r0, r1
 800b87c:	bd70      	pop	{r4, r5, r6, pc}
 800b87e:	bf00      	nop

0800b880 <_Twist__cdr_serialize>:
 800b880:	b510      	push	{r4, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	9101      	str	r1, [sp, #4]
 800b886:	b190      	cbz	r0, 800b8ae <_Twist__cdr_serialize+0x2e>
 800b888:	4604      	mov	r4, r0
 800b88a:	f000 f8c5 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b88e:	6843      	ldr	r3, [r0, #4]
 800b890:	9901      	ldr	r1, [sp, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	4620      	mov	r0, r4
 800b896:	4798      	blx	r3
 800b898:	f000 f8be 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b89c:	6843      	ldr	r3, [r0, #4]
 800b89e:	9901      	ldr	r1, [sp, #4]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f104 0018 	add.w	r0, r4, #24
 800b8a6:	b002      	add	sp, #8
 800b8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ac:	4718      	bx	r3
 800b8ae:	b002      	add	sp, #8
 800b8b0:	bd10      	pop	{r4, pc}
 800b8b2:	bf00      	nop

0800b8b4 <_Twist__get_serialized_size>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	b148      	cbz	r0, 800b8ce <_Twist__get_serialized_size+0x1a>
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	f000 f820 	bl	800b900 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	4601      	mov	r1, r0
 800b8c4:	f104 0018 	add.w	r0, r4, #24
 800b8c8:	f000 f81a 	bl	800b900 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b8cc:	4428      	add	r0, r5
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}

0800b8d0 <_Twist__max_serialized_size>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	f10d 0007 	add.w	r0, sp, #7
 800b8dc:	f88d 3007 	strb.w	r3, [sp, #7]
 800b8e0:	f000 f87e 	bl	800b9e0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	f10d 0007 	add.w	r0, sp, #7
 800b8ec:	f000 f878 	bl	800b9e0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b8f0:	4420      	add	r0, r4
 800b8f2:	b002      	add	sp, #8
 800b8f4:	bd10      	pop	{r4, pc}
 800b8f6:	bf00      	nop

0800b8f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b8f8:	4800      	ldr	r0, [pc, #0]	@ (800b8fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800b8fa:	4770      	bx	lr
 800b8fc:	20000204 	.word	0x20000204

0800b900 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800b900:	b1b8      	cbz	r0, 800b932 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800b902:	b538      	push	{r3, r4, r5, lr}
 800b904:	460d      	mov	r5, r1
 800b906:	4628      	mov	r0, r5
 800b908:	2108      	movs	r1, #8
 800b90a:	f001 fcb1 	bl	800d270 <ucdr_alignment>
 800b90e:	f105 0308 	add.w	r3, r5, #8
 800b912:	181c      	adds	r4, r3, r0
 800b914:	2108      	movs	r1, #8
 800b916:	4620      	mov	r0, r4
 800b918:	f001 fcaa 	bl	800d270 <ucdr_alignment>
 800b91c:	3008      	adds	r0, #8
 800b91e:	4404      	add	r4, r0
 800b920:	2108      	movs	r1, #8
 800b922:	4620      	mov	r0, r4
 800b924:	f001 fca4 	bl	800d270 <ucdr_alignment>
 800b928:	f1c5 0508 	rsb	r5, r5, #8
 800b92c:	4428      	add	r0, r5
 800b92e:	4420      	add	r0, r4
 800b930:	bd38      	pop	{r3, r4, r5, pc}
 800b932:	4770      	bx	lr

0800b934 <_Vector3__cdr_deserialize>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	460c      	mov	r4, r1
 800b938:	b171      	cbz	r1, 800b958 <_Vector3__cdr_deserialize+0x24>
 800b93a:	4605      	mov	r5, r0
 800b93c:	f001 faac 	bl	800ce98 <ucdr_deserialize_double>
 800b940:	f104 0108 	add.w	r1, r4, #8
 800b944:	4628      	mov	r0, r5
 800b946:	f001 faa7 	bl	800ce98 <ucdr_deserialize_double>
 800b94a:	f104 0110 	add.w	r1, r4, #16
 800b94e:	4628      	mov	r0, r5
 800b950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b954:	f001 baa0 	b.w	800ce98 <ucdr_deserialize_double>
 800b958:	4608      	mov	r0, r1
 800b95a:	bd38      	pop	{r3, r4, r5, pc}

0800b95c <_Vector3__cdr_serialize>:
 800b95c:	b198      	cbz	r0, 800b986 <_Vector3__cdr_serialize+0x2a>
 800b95e:	b538      	push	{r3, r4, r5, lr}
 800b960:	ed90 0b00 	vldr	d0, [r0]
 800b964:	460d      	mov	r5, r1
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	f001 f8f3 	bl	800cb54 <ucdr_serialize_double>
 800b96e:	ed94 0b02 	vldr	d0, [r4, #8]
 800b972:	4628      	mov	r0, r5
 800b974:	f001 f8ee 	bl	800cb54 <ucdr_serialize_double>
 800b978:	ed94 0b04 	vldr	d0, [r4, #16]
 800b97c:	4628      	mov	r0, r5
 800b97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b982:	f001 b8e7 	b.w	800cb54 <ucdr_serialize_double>
 800b986:	4770      	bx	lr

0800b988 <_Vector3__get_serialized_size>:
 800b988:	b198      	cbz	r0, 800b9b2 <_Vector3__get_serialized_size+0x2a>
 800b98a:	b510      	push	{r4, lr}
 800b98c:	2108      	movs	r1, #8
 800b98e:	2000      	movs	r0, #0
 800b990:	f001 fc6e 	bl	800d270 <ucdr_alignment>
 800b994:	f100 0408 	add.w	r4, r0, #8
 800b998:	2108      	movs	r1, #8
 800b99a:	4620      	mov	r0, r4
 800b99c:	f001 fc68 	bl	800d270 <ucdr_alignment>
 800b9a0:	3008      	adds	r0, #8
 800b9a2:	4404      	add	r4, r0
 800b9a4:	2108      	movs	r1, #8
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f001 fc62 	bl	800d270 <ucdr_alignment>
 800b9ac:	3008      	adds	r0, #8
 800b9ae:	4420      	add	r0, r4
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	4770      	bx	lr

0800b9b4 <_Vector3__max_serialized_size>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	2108      	movs	r1, #8
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f001 fc59 	bl	800d270 <ucdr_alignment>
 800b9be:	f100 0508 	add.w	r5, r0, #8
 800b9c2:	2108      	movs	r1, #8
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f001 fc53 	bl	800d270 <ucdr_alignment>
 800b9ca:	f100 0408 	add.w	r4, r0, #8
 800b9ce:	442c      	add	r4, r5
 800b9d0:	2108      	movs	r1, #8
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f001 fc4c 	bl	800d270 <ucdr_alignment>
 800b9d8:	3008      	adds	r0, #8
 800b9da:	4420      	add	r0, r4
 800b9dc:	bd38      	pop	{r3, r4, r5, pc}
 800b9de:	bf00      	nop

0800b9e0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	7003      	strb	r3, [r0, #0]
 800b9e8:	2108      	movs	r1, #8
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f001 fc40 	bl	800d270 <ucdr_alignment>
 800b9f0:	f104 0508 	add.w	r5, r4, #8
 800b9f4:	1946      	adds	r6, r0, r5
 800b9f6:	2108      	movs	r1, #8
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f001 fc39 	bl	800d270 <ucdr_alignment>
 800b9fe:	f100 0508 	add.w	r5, r0, #8
 800ba02:	4435      	add	r5, r6
 800ba04:	2108      	movs	r1, #8
 800ba06:	4628      	mov	r0, r5
 800ba08:	f001 fc32 	bl	800d270 <ucdr_alignment>
 800ba0c:	f1c4 0408 	rsb	r4, r4, #8
 800ba10:	4420      	add	r0, r4
 800ba12:	4428      	add	r0, r5
 800ba14:	bd70      	pop	{r4, r5, r6, pc}
 800ba16:	bf00      	nop

0800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ba18:	4800      	ldr	r0, [pc, #0]	@ (800ba1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800ba1a:	4770      	bx	lr
 800ba1c:	2000022c 	.word	0x2000022c

0800ba20 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800ba20:	4b04      	ldr	r3, [pc, #16]	@ (800ba34 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	b10a      	cbz	r2, 800ba2a <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800ba26:	4803      	ldr	r0, [pc, #12]	@ (800ba34 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800ba28:	4770      	bx	lr
 800ba2a:	4a03      	ldr	r2, [pc, #12]	@ (800ba38 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800ba2c:	4801      	ldr	r0, [pc, #4]	@ (800ba34 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800ba2e:	6812      	ldr	r2, [r2, #0]
 800ba30:	601a      	str	r2, [r3, #0]
 800ba32:	4770      	bx	lr
 800ba34:	2000025c 	.word	0x2000025c
 800ba38:	200003bc 	.word	0x200003bc

0800ba3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800ba3c:	4b04      	ldr	r3, [pc, #16]	@ (800ba50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800ba3e:	4805      	ldr	r0, [pc, #20]	@ (800ba54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800ba40:	4905      	ldr	r1, [pc, #20]	@ (800ba58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800ba42:	4a06      	ldr	r2, [pc, #24]	@ (800ba5c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6003      	str	r3, [r0, #0]
 800ba48:	600b      	str	r3, [r1, #0]
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	200003bc 	.word	0x200003bc
 800ba54:	20000278 	.word	0x20000278
 800ba58:	20000284 	.word	0x20000284
 800ba5c:	2000025c 	.word	0x2000025c

0800ba60 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800ba60:	f004 bf14 	b.w	801088c <imu_interfaces__srv__ImuCalibration_Request__init>

0800ba64 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800ba64:	f004 bf24 	b.w	80108b0 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800ba68 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800ba68:	f004 bf26 	b.w	80108b8 <imu_interfaces__srv__ImuCalibration_Response__init>

0800ba6c <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800ba6c:	f004 bf28 	b.w	80108c0 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800ba70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800ba70:	b508      	push	{r3, lr}
 800ba72:	f004 faad 	bl	800ffd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800ba76:	4b06      	ldr	r3, [pc, #24]	@ (800ba90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ba78:	4906      	ldr	r1, [pc, #24]	@ (800ba94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	60c8      	str	r0, [r1, #12]
 800ba7e:	b10a      	cbz	r2, 800ba84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800ba80:	4803      	ldr	r0, [pc, #12]	@ (800ba90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ba82:	bd08      	pop	{r3, pc}
 800ba84:	4a04      	ldr	r2, [pc, #16]	@ (800ba98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800ba86:	4802      	ldr	r0, [pc, #8]	@ (800ba90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ba88:	6812      	ldr	r2, [r2, #0]
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	bd08      	pop	{r3, pc}
 800ba8e:	bf00      	nop
 800ba90:	200002cc 	.word	0x200002cc
 800ba94:	20000290 	.word	0x20000290
 800ba98:	200003c0 	.word	0x200003c0

0800ba9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800ba9c:	4b04      	ldr	r3, [pc, #16]	@ (800bab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	b10a      	cbz	r2, 800baa6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800baa2:	4803      	ldr	r0, [pc, #12]	@ (800bab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800baa4:	4770      	bx	lr
 800baa6:	4a03      	ldr	r2, [pc, #12]	@ (800bab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800baa8:	4801      	ldr	r0, [pc, #4]	@ (800bab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800baaa:	6812      	ldr	r2, [r2, #0]
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	4770      	bx	lr
 800bab0:	20000314 	.word	0x20000314
 800bab4:	200003c0 	.word	0x200003c0

0800bab8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800bab8:	4b16      	ldr	r3, [pc, #88]	@ (800bb14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	b510      	push	{r4, lr}
 800babe:	b132      	cbz	r2, 800bace <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800bac0:	685c      	ldr	r4, [r3, #4]
 800bac2:	68a3      	ldr	r3, [r4, #8]
 800bac4:	b153      	cbz	r3, 800badc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	b1a3      	cbz	r3, 800baf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800baca:	4812      	ldr	r0, [pc, #72]	@ (800bb14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800bacc:	bd10      	pop	{r4, pc}
 800bace:	4a12      	ldr	r2, [pc, #72]	@ (800bb18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800bad0:	685c      	ldr	r4, [r3, #4]
 800bad2:	6812      	ldr	r2, [r2, #0]
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	68a3      	ldr	r3, [r4, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1f4      	bne.n	800bac6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800badc:	f004 fa78 	bl	800ffd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800bae0:	4b0e      	ldr	r3, [pc, #56]	@ (800bb1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800bae2:	490f      	ldr	r1, [pc, #60]	@ (800bb20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	60c8      	str	r0, [r1, #12]
 800bae8:	b17a      	cbz	r2, 800bb0a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	60a3      	str	r3, [r4, #8]
 800baee:	68e3      	ldr	r3, [r4, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1ea      	bne.n	800baca <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800baf4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	b11a      	cbz	r2, 800bb02 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	4805      	ldr	r0, [pc, #20]	@ (800bb14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800bafe:	60e3      	str	r3, [r4, #12]
 800bb00:	bd10      	pop	{r4, pc}
 800bb02:	4a05      	ldr	r2, [pc, #20]	@ (800bb18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800bb04:	6812      	ldr	r2, [r2, #0]
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	e7f7      	b.n	800bafa <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800bb0a:	4a03      	ldr	r2, [pc, #12]	@ (800bb18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800bb0c:	6812      	ldr	r2, [r2, #0]
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	e7eb      	b.n	800baea <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800bb12:	bf00      	nop
 800bb14:	20000330 	.word	0x20000330
 800bb18:	200003c0 	.word	0x200003c0
 800bb1c:	200002cc 	.word	0x200002cc
 800bb20:	20000290 	.word	0x20000290
 800bb24:	20000314 	.word	0x20000314

0800bb28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800bb28:	4800      	ldr	r0, [pc, #0]	@ (800bb2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800bb2a:	4770      	bx	lr
 800bb2c:	20000358 	.word	0x20000358

0800bb30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800bb30:	4800      	ldr	r0, [pc, #0]	@ (800bb34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800bb32:	4770      	bx	lr
 800bb34:	20000364 	.word	0x20000364

0800bb38 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800bb38:	b108      	cbz	r0, 800bb3e <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800bb3a:	f004 ba9b 	b.w	8010074 <get_serialized_size_sensor_msgs__msg__Imu>
 800bb3e:	4770      	bx	lr

0800bb40 <_ImuCalibration_Request__max_serialized_size>:
 800bb40:	b500      	push	{lr}
 800bb42:	b083      	sub	sp, #12
 800bb44:	2301      	movs	r3, #1
 800bb46:	2100      	movs	r1, #0
 800bb48:	f10d 0007 	add.w	r0, sp, #7
 800bb4c:	f88d 3007 	strb.w	r3, [sp, #7]
 800bb50:	f004 fb0e 	bl	8010170 <max_serialized_size_sensor_msgs__msg__Imu>
 800bb54:	b003      	add	sp, #12
 800bb56:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb5a:	bf00      	nop

0800bb5c <_ImuCalibration_Response__max_serialized_size>:
 800bb5c:	b508      	push	{r3, lr}
 800bb5e:	2101      	movs	r1, #1
 800bb60:	2000      	movs	r0, #0
 800bb62:	f001 fb85 	bl	800d270 <ucdr_alignment>
 800bb66:	3001      	adds	r0, #1
 800bb68:	bd08      	pop	{r3, pc}
 800bb6a:	bf00      	nop

0800bb6c <_ImuCalibration_Response__cdr_deserialize>:
 800bb6c:	b109      	cbz	r1, 800bb72 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800bb6e:	f000 b881 	b.w	800bc74 <ucdr_deserialize_bool>
 800bb72:	4608      	mov	r0, r1
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop

0800bb78 <_ImuCalibration_Request__get_serialized_size>:
 800bb78:	b110      	cbz	r0, 800bb80 <_ImuCalibration_Request__get_serialized_size+0x8>
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	f004 ba7a 	b.w	8010074 <get_serialized_size_sensor_msgs__msg__Imu>
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop

0800bb84 <_ImuCalibration_Request__cdr_deserialize>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	460c      	mov	r4, r1
 800bb88:	b149      	cbz	r1, 800bb9e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	f004 fb2a 	bl	80101e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800bb90:	6843      	ldr	r3, [r0, #4]
 800bb92:	4621      	mov	r1, r4
 800bb94:	4628      	mov	r0, r5
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb9c:	4718      	bx	r3
 800bb9e:	4608      	mov	r0, r1
 800bba0:	bd70      	pop	{r4, r5, r6, pc}
 800bba2:	bf00      	nop

0800bba4 <_ImuCalibration_Request__cdr_serialize>:
 800bba4:	b158      	cbz	r0, 800bbbe <_ImuCalibration_Request__cdr_serialize+0x1a>
 800bba6:	b570      	push	{r4, r5, r6, lr}
 800bba8:	460d      	mov	r5, r1
 800bbaa:	4604      	mov	r4, r0
 800bbac:	f004 fb1a 	bl	80101e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800bbb0:	6843      	ldr	r3, [r0, #4]
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbbc:	4718      	bx	r3
 800bbbe:	4770      	bx	lr

0800bbc0 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800bbc0:	b138      	cbz	r0, 800bbd2 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800bbc2:	b508      	push	{r3, lr}
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	2101      	movs	r1, #1
 800bbca:	f001 fb51 	bl	800d270 <ucdr_alignment>
 800bbce:	3001      	adds	r0, #1
 800bbd0:	bd08      	pop	{r3, pc}
 800bbd2:	4770      	bx	lr

0800bbd4 <_ImuCalibration_Response__cdr_serialize>:
 800bbd4:	460a      	mov	r2, r1
 800bbd6:	b118      	cbz	r0, 800bbe0 <_ImuCalibration_Response__cdr_serialize+0xc>
 800bbd8:	7801      	ldrb	r1, [r0, #0]
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f000 b834 	b.w	800bc48 <ucdr_serialize_bool>
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop

0800bbe4 <_ImuCalibration_Response__get_serialized_size>:
 800bbe4:	b130      	cbz	r0, 800bbf4 <_ImuCalibration_Response__get_serialized_size+0x10>
 800bbe6:	b508      	push	{r3, lr}
 800bbe8:	2101      	movs	r1, #1
 800bbea:	2000      	movs	r0, #0
 800bbec:	f001 fb40 	bl	800d270 <ucdr_alignment>
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	bd08      	pop	{r3, pc}
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop

0800bbf8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800bbf8:	4800      	ldr	r0, [pc, #0]	@ (800bbfc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800bbfa:	4770      	bx	lr
 800bbfc:	2000034c 	.word	0x2000034c

0800bc00 <micro_ros_string_utilities_init>:
 800bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc04:	b086      	sub	sp, #24
 800bc06:	460f      	mov	r7, r1
 800bc08:	4604      	mov	r4, r0
 800bc0a:	a801      	add	r0, sp, #4
 800bc0c:	f002 fd40 	bl	800e690 <rcutils_get_default_allocator>
 800bc10:	4638      	mov	r0, r7
 800bc12:	f7f4 fb0f 	bl	8000234 <strlen>
 800bc16:	f100 0801 	add.w	r8, r0, #1
 800bc1a:	9b01      	ldr	r3, [sp, #4]
 800bc1c:	9905      	ldr	r1, [sp, #20]
 800bc1e:	4605      	mov	r5, r0
 800bc20:	4640      	mov	r0, r8
 800bc22:	4798      	blx	r3
 800bc24:	4642      	mov	r2, r8
 800bc26:	4606      	mov	r6, r0
 800bc28:	2100      	movs	r1, #0
 800bc2a:	f00e fcbf 	bl	801a5ac <memset>
 800bc2e:	462a      	mov	r2, r5
 800bc30:	4639      	mov	r1, r7
 800bc32:	4630      	mov	r0, r6
 800bc34:	f00e fd83 	bl	801a73e <memcpy>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	e9c4 6500 	strd	r6, r5, [r4]
 800bc3e:	f8c4 8008 	str.w	r8, [r4, #8]
 800bc42:	b006      	add	sp, #24
 800bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bc48 <ucdr_serialize_bool>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	4604      	mov	r4, r0
 800bc50:	f001 fac2 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bc54:	b148      	cbz	r0, 800bc6a <ucdr_serialize_bool+0x22>
 800bc56:	68a3      	ldr	r3, [r4, #8]
 800bc58:	701d      	strb	r5, [r3, #0]
 800bc5a:	68a2      	ldr	r2, [r4, #8]
 800bc5c:	6923      	ldr	r3, [r4, #16]
 800bc5e:	2101      	movs	r1, #1
 800bc60:	440a      	add	r2, r1
 800bc62:	440b      	add	r3, r1
 800bc64:	60a2      	str	r2, [r4, #8]
 800bc66:	6123      	str	r3, [r4, #16]
 800bc68:	7561      	strb	r1, [r4, #21]
 800bc6a:	7da0      	ldrb	r0, [r4, #22]
 800bc6c:	f080 0001 	eor.w	r0, r0, #1
 800bc70:	bd38      	pop	{r3, r4, r5, pc}
 800bc72:	bf00      	nop

0800bc74 <ucdr_deserialize_bool>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	460d      	mov	r5, r1
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	f001 faac 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bc80:	b160      	cbz	r0, 800bc9c <ucdr_deserialize_bool+0x28>
 800bc82:	68a2      	ldr	r2, [r4, #8]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bc8a:	3900      	subs	r1, #0
 800bc8c:	bf18      	it	ne
 800bc8e:	2101      	movne	r1, #1
 800bc90:	7029      	strb	r1, [r5, #0]
 800bc92:	3301      	adds	r3, #1
 800bc94:	2101      	movs	r1, #1
 800bc96:	60a2      	str	r2, [r4, #8]
 800bc98:	6123      	str	r3, [r4, #16]
 800bc9a:	7561      	strb	r1, [r4, #21]
 800bc9c:	7da0      	ldrb	r0, [r4, #22]
 800bc9e:	f080 0001 	eor.w	r0, r0, #1
 800bca2:	bd38      	pop	{r3, r4, r5, pc}

0800bca4 <ucdr_serialize_uint8_t>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	460d      	mov	r5, r1
 800bca8:	2101      	movs	r1, #1
 800bcaa:	4604      	mov	r4, r0
 800bcac:	f001 fa94 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bcb0:	b148      	cbz	r0, 800bcc6 <ucdr_serialize_uint8_t+0x22>
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	701d      	strb	r5, [r3, #0]
 800bcb6:	68a2      	ldr	r2, [r4, #8]
 800bcb8:	6923      	ldr	r3, [r4, #16]
 800bcba:	2101      	movs	r1, #1
 800bcbc:	440a      	add	r2, r1
 800bcbe:	440b      	add	r3, r1
 800bcc0:	60a2      	str	r2, [r4, #8]
 800bcc2:	6123      	str	r3, [r4, #16]
 800bcc4:	7561      	strb	r1, [r4, #21]
 800bcc6:	7da0      	ldrb	r0, [r4, #22]
 800bcc8:	f080 0001 	eor.w	r0, r0, #1
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	bf00      	nop

0800bcd0 <ucdr_deserialize_uint8_t>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	f001 fa7e 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bcdc:	b150      	cbz	r0, 800bcf4 <ucdr_deserialize_uint8_t+0x24>
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	702b      	strb	r3, [r5, #0]
 800bce4:	68a2      	ldr	r2, [r4, #8]
 800bce6:	6923      	ldr	r3, [r4, #16]
 800bce8:	2101      	movs	r1, #1
 800bcea:	440a      	add	r2, r1
 800bcec:	440b      	add	r3, r1
 800bcee:	60a2      	str	r2, [r4, #8]
 800bcf0:	6123      	str	r3, [r4, #16]
 800bcf2:	7561      	strb	r1, [r4, #21]
 800bcf4:	7da0      	ldrb	r0, [r4, #22]
 800bcf6:	f080 0001 	eor.w	r0, r0, #1
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}

0800bcfc <ucdr_serialize_uint16_t>:
 800bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	460b      	mov	r3, r1
 800bd04:	2102      	movs	r1, #2
 800bd06:	4604      	mov	r4, r0
 800bd08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bd0c:	f001 fab8 	bl	800d280 <ucdr_buffer_alignment>
 800bd10:	4601      	mov	r1, r0
 800bd12:	4620      	mov	r0, r4
 800bd14:	7d67      	ldrb	r7, [r4, #21]
 800bd16:	f001 faf7 	bl	800d308 <ucdr_advance_buffer>
 800bd1a:	2102      	movs	r1, #2
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f001 fa4f 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800bd22:	bb78      	cbnz	r0, 800bd84 <ucdr_serialize_uint16_t+0x88>
 800bd24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bd28:	42ab      	cmp	r3, r5
 800bd2a:	d926      	bls.n	800bd7a <ucdr_serialize_uint16_t+0x7e>
 800bd2c:	1b5e      	subs	r6, r3, r5
 800bd2e:	60a3      	str	r3, [r4, #8]
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	f1c6 0802 	rsb	r8, r6, #2
 800bd36:	4433      	add	r3, r6
 800bd38:	6123      	str	r3, [r4, #16]
 800bd3a:	4641      	mov	r1, r8
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f001 fa4b 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d03b      	beq.n	800bdbe <ucdr_serialize_uint16_t+0xc2>
 800bd46:	7d23      	ldrb	r3, [r4, #20]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d04a      	beq.n	800bde2 <ucdr_serialize_uint16_t+0xe6>
 800bd4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd50:	702b      	strb	r3, [r5, #0]
 800bd52:	2e00      	cmp	r6, #0
 800bd54:	d040      	beq.n	800bdd8 <ucdr_serialize_uint16_t+0xdc>
 800bd56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd5a:	706b      	strb	r3, [r5, #1]
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	68a2      	ldr	r2, [r4, #8]
 800bd60:	7da0      	ldrb	r0, [r4, #22]
 800bd62:	3302      	adds	r3, #2
 800bd64:	1b9e      	subs	r6, r3, r6
 800bd66:	4442      	add	r2, r8
 800bd68:	2302      	movs	r3, #2
 800bd6a:	f080 0001 	eor.w	r0, r0, #1
 800bd6e:	60a2      	str	r2, [r4, #8]
 800bd70:	6126      	str	r6, [r4, #16]
 800bd72:	7563      	strb	r3, [r4, #21]
 800bd74:	b002      	add	sp, #8
 800bd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd7a:	2102      	movs	r1, #2
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f001 fa2b 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bd82:	b190      	cbz	r0, 800bdaa <ucdr_serialize_uint16_t+0xae>
 800bd84:	7d23      	ldrb	r3, [r4, #20]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	68a3      	ldr	r3, [r4, #8]
 800bd8a:	d014      	beq.n	800bdb6 <ucdr_serialize_uint16_t+0xba>
 800bd8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd98:	705a      	strb	r2, [r3, #1]
 800bd9a:	68a2      	ldr	r2, [r4, #8]
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	3202      	adds	r2, #2
 800bda0:	3302      	adds	r3, #2
 800bda2:	2102      	movs	r1, #2
 800bda4:	60a2      	str	r2, [r4, #8]
 800bda6:	6123      	str	r3, [r4, #16]
 800bda8:	7561      	strb	r1, [r4, #21]
 800bdaa:	7da0      	ldrb	r0, [r4, #22]
 800bdac:	f080 0001 	eor.w	r0, r0, #1
 800bdb0:	b002      	add	sp, #8
 800bdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bdba:	801a      	strh	r2, [r3, #0]
 800bdbc:	e7ed      	b.n	800bd9a <ucdr_serialize_uint16_t+0x9e>
 800bdbe:	68a2      	ldr	r2, [r4, #8]
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	7da0      	ldrb	r0, [r4, #22]
 800bdc4:	7567      	strb	r7, [r4, #21]
 800bdc6:	1b92      	subs	r2, r2, r6
 800bdc8:	1b9b      	subs	r3, r3, r6
 800bdca:	f080 0001 	eor.w	r0, r0, #1
 800bdce:	60a2      	str	r2, [r4, #8]
 800bdd0:	6123      	str	r3, [r4, #16]
 800bdd2:	b002      	add	sp, #8
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd8:	68a3      	ldr	r3, [r4, #8]
 800bdda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	e7bc      	b.n	800bd5c <ucdr_serialize_uint16_t+0x60>
 800bde2:	4628      	mov	r0, r5
 800bde4:	f10d 0506 	add.w	r5, sp, #6
 800bde8:	4629      	mov	r1, r5
 800bdea:	4632      	mov	r2, r6
 800bdec:	f00e fca7 	bl	801a73e <memcpy>
 800bdf0:	68a0      	ldr	r0, [r4, #8]
 800bdf2:	4642      	mov	r2, r8
 800bdf4:	19a9      	adds	r1, r5, r6
 800bdf6:	f00e fca2 	bl	801a73e <memcpy>
 800bdfa:	e7af      	b.n	800bd5c <ucdr_serialize_uint16_t+0x60>

0800bdfc <ucdr_serialize_endian_uint16_t>:
 800bdfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be00:	b083      	sub	sp, #12
 800be02:	460d      	mov	r5, r1
 800be04:	2102      	movs	r1, #2
 800be06:	4604      	mov	r4, r0
 800be08:	f8ad 2006 	strh.w	r2, [sp, #6]
 800be0c:	f001 fa38 	bl	800d280 <ucdr_buffer_alignment>
 800be10:	4601      	mov	r1, r0
 800be12:	4620      	mov	r0, r4
 800be14:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be18:	f001 fa76 	bl	800d308 <ucdr_advance_buffer>
 800be1c:	2102      	movs	r1, #2
 800be1e:	4620      	mov	r0, r4
 800be20:	f001 f9ce 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800be24:	bb70      	cbnz	r0, 800be84 <ucdr_serialize_endian_uint16_t+0x88>
 800be26:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800be2a:	42be      	cmp	r6, r7
 800be2c:	d925      	bls.n	800be7a <ucdr_serialize_endian_uint16_t+0x7e>
 800be2e:	6923      	ldr	r3, [r4, #16]
 800be30:	60a6      	str	r6, [r4, #8]
 800be32:	1bf6      	subs	r6, r6, r7
 800be34:	4433      	add	r3, r6
 800be36:	f1c6 0902 	rsb	r9, r6, #2
 800be3a:	6123      	str	r3, [r4, #16]
 800be3c:	4649      	mov	r1, r9
 800be3e:	4620      	mov	r0, r4
 800be40:	f001 f9ca 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800be44:	2800      	cmp	r0, #0
 800be46:	d039      	beq.n	800bebc <ucdr_serialize_endian_uint16_t+0xc0>
 800be48:	2d01      	cmp	r5, #1
 800be4a:	d04a      	beq.n	800bee2 <ucdr_serialize_endian_uint16_t+0xe6>
 800be4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be50:	703b      	strb	r3, [r7, #0]
 800be52:	2e00      	cmp	r6, #0
 800be54:	d040      	beq.n	800bed8 <ucdr_serialize_endian_uint16_t+0xdc>
 800be56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be5a:	707b      	strb	r3, [r7, #1]
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	68a2      	ldr	r2, [r4, #8]
 800be60:	7da0      	ldrb	r0, [r4, #22]
 800be62:	3302      	adds	r3, #2
 800be64:	444a      	add	r2, r9
 800be66:	1b9b      	subs	r3, r3, r6
 800be68:	2102      	movs	r1, #2
 800be6a:	f080 0001 	eor.w	r0, r0, #1
 800be6e:	60a2      	str	r2, [r4, #8]
 800be70:	6123      	str	r3, [r4, #16]
 800be72:	7561      	strb	r1, [r4, #21]
 800be74:	b003      	add	sp, #12
 800be76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be7a:	2102      	movs	r1, #2
 800be7c:	4620      	mov	r0, r4
 800be7e:	f001 f9ab 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800be82:	b188      	cbz	r0, 800bea8 <ucdr_serialize_endian_uint16_t+0xac>
 800be84:	2d01      	cmp	r5, #1
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	d014      	beq.n	800beb4 <ucdr_serialize_endian_uint16_t+0xb8>
 800be8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be96:	705a      	strb	r2, [r3, #1]
 800be98:	68a2      	ldr	r2, [r4, #8]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	3202      	adds	r2, #2
 800be9e:	3302      	adds	r3, #2
 800bea0:	2102      	movs	r1, #2
 800bea2:	60a2      	str	r2, [r4, #8]
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	7561      	strb	r1, [r4, #21]
 800bea8:	7da0      	ldrb	r0, [r4, #22]
 800beaa:	f080 0001 	eor.w	r0, r0, #1
 800beae:	b003      	add	sp, #12
 800beb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800beb8:	801a      	strh	r2, [r3, #0]
 800beba:	e7ed      	b.n	800be98 <ucdr_serialize_endian_uint16_t+0x9c>
 800bebc:	68a2      	ldr	r2, [r4, #8]
 800bebe:	6923      	ldr	r3, [r4, #16]
 800bec0:	7da0      	ldrb	r0, [r4, #22]
 800bec2:	f884 8015 	strb.w	r8, [r4, #21]
 800bec6:	1b92      	subs	r2, r2, r6
 800bec8:	1b9b      	subs	r3, r3, r6
 800beca:	f080 0001 	eor.w	r0, r0, #1
 800bece:	60a2      	str	r2, [r4, #8]
 800bed0:	6123      	str	r3, [r4, #16]
 800bed2:	b003      	add	sp, #12
 800bed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bed8:	68a3      	ldr	r3, [r4, #8]
 800beda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e7bc      	b.n	800be5c <ucdr_serialize_endian_uint16_t+0x60>
 800bee2:	f10d 0506 	add.w	r5, sp, #6
 800bee6:	4629      	mov	r1, r5
 800bee8:	4632      	mov	r2, r6
 800beea:	4638      	mov	r0, r7
 800beec:	f00e fc27 	bl	801a73e <memcpy>
 800bef0:	68a0      	ldr	r0, [r4, #8]
 800bef2:	464a      	mov	r2, r9
 800bef4:	19a9      	adds	r1, r5, r6
 800bef6:	f00e fc22 	bl	801a73e <memcpy>
 800befa:	e7af      	b.n	800be5c <ucdr_serialize_endian_uint16_t+0x60>

0800befc <ucdr_deserialize_uint16_t>:
 800befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf00:	460d      	mov	r5, r1
 800bf02:	2102      	movs	r1, #2
 800bf04:	4604      	mov	r4, r0
 800bf06:	f001 f9bb 	bl	800d280 <ucdr_buffer_alignment>
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf12:	f001 f9f9 	bl	800d308 <ucdr_advance_buffer>
 800bf16:	2102      	movs	r1, #2
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f001 f951 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800bf1e:	bb60      	cbnz	r0, 800bf7a <ucdr_deserialize_uint16_t+0x7e>
 800bf20:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bf24:	42be      	cmp	r6, r7
 800bf26:	d923      	bls.n	800bf70 <ucdr_deserialize_uint16_t+0x74>
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	60a6      	str	r6, [r4, #8]
 800bf2c:	1bf6      	subs	r6, r6, r7
 800bf2e:	4433      	add	r3, r6
 800bf30:	f1c6 0902 	rsb	r9, r6, #2
 800bf34:	6123      	str	r3, [r4, #16]
 800bf36:	4649      	mov	r1, r9
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f001 f94d 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d034      	beq.n	800bfac <ucdr_deserialize_uint16_t+0xb0>
 800bf42:	7d23      	ldrb	r3, [r4, #20]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d042      	beq.n	800bfce <ucdr_deserialize_uint16_t+0xd2>
 800bf48:	787b      	ldrb	r3, [r7, #1]
 800bf4a:	702b      	strb	r3, [r5, #0]
 800bf4c:	2e00      	cmp	r6, #0
 800bf4e:	d03a      	beq.n	800bfc6 <ucdr_deserialize_uint16_t+0xca>
 800bf50:	783b      	ldrb	r3, [r7, #0]
 800bf52:	706b      	strb	r3, [r5, #1]
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	68a2      	ldr	r2, [r4, #8]
 800bf58:	7da0      	ldrb	r0, [r4, #22]
 800bf5a:	2102      	movs	r1, #2
 800bf5c:	3302      	adds	r3, #2
 800bf5e:	444a      	add	r2, r9
 800bf60:	1b9b      	subs	r3, r3, r6
 800bf62:	7561      	strb	r1, [r4, #21]
 800bf64:	60a2      	str	r2, [r4, #8]
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	f080 0001 	eor.w	r0, r0, #1
 800bf6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf70:	2102      	movs	r1, #2
 800bf72:	4620      	mov	r0, r4
 800bf74:	f001 f930 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800bf78:	b180      	cbz	r0, 800bf9c <ucdr_deserialize_uint16_t+0xa0>
 800bf7a:	7d23      	ldrb	r3, [r4, #20]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	d011      	beq.n	800bfa6 <ucdr_deserialize_uint16_t+0xaa>
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	702b      	strb	r3, [r5, #0]
 800bf86:	68a3      	ldr	r3, [r4, #8]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	706b      	strb	r3, [r5, #1]
 800bf8c:	68a2      	ldr	r2, [r4, #8]
 800bf8e:	6923      	ldr	r3, [r4, #16]
 800bf90:	3202      	adds	r2, #2
 800bf92:	3302      	adds	r3, #2
 800bf94:	2102      	movs	r1, #2
 800bf96:	60a2      	str	r2, [r4, #8]
 800bf98:	6123      	str	r3, [r4, #16]
 800bf9a:	7561      	strb	r1, [r4, #21]
 800bf9c:	7da0      	ldrb	r0, [r4, #22]
 800bf9e:	f080 0001 	eor.w	r0, r0, #1
 800bfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	802b      	strh	r3, [r5, #0]
 800bfaa:	e7ef      	b.n	800bf8c <ucdr_deserialize_uint16_t+0x90>
 800bfac:	68a2      	ldr	r2, [r4, #8]
 800bfae:	6923      	ldr	r3, [r4, #16]
 800bfb0:	7da0      	ldrb	r0, [r4, #22]
 800bfb2:	f884 8015 	strb.w	r8, [r4, #21]
 800bfb6:	1b92      	subs	r2, r2, r6
 800bfb8:	1b9b      	subs	r3, r3, r6
 800bfba:	60a2      	str	r2, [r4, #8]
 800bfbc:	6123      	str	r3, [r4, #16]
 800bfbe:	f080 0001 	eor.w	r0, r0, #1
 800bfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc6:	68a3      	ldr	r3, [r4, #8]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	706b      	strb	r3, [r5, #1]
 800bfcc:	e7c2      	b.n	800bf54 <ucdr_deserialize_uint16_t+0x58>
 800bfce:	4639      	mov	r1, r7
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f00e fbb3 	bl	801a73e <memcpy>
 800bfd8:	68a1      	ldr	r1, [r4, #8]
 800bfda:	464a      	mov	r2, r9
 800bfdc:	19a8      	adds	r0, r5, r6
 800bfde:	f00e fbae 	bl	801a73e <memcpy>
 800bfe2:	e7b7      	b.n	800bf54 <ucdr_deserialize_uint16_t+0x58>

0800bfe4 <ucdr_deserialize_endian_uint16_t>:
 800bfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe8:	460e      	mov	r6, r1
 800bfea:	2102      	movs	r1, #2
 800bfec:	4604      	mov	r4, r0
 800bfee:	4615      	mov	r5, r2
 800bff0:	f001 f946 	bl	800d280 <ucdr_buffer_alignment>
 800bff4:	4601      	mov	r1, r0
 800bff6:	4620      	mov	r0, r4
 800bff8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bffc:	f001 f984 	bl	800d308 <ucdr_advance_buffer>
 800c000:	2102      	movs	r1, #2
 800c002:	4620      	mov	r0, r4
 800c004:	f001 f8dc 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c008:	bb70      	cbnz	r0, 800c068 <ucdr_deserialize_endian_uint16_t+0x84>
 800c00a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c00e:	4547      	cmp	r7, r8
 800c010:	d925      	bls.n	800c05e <ucdr_deserialize_endian_uint16_t+0x7a>
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	60a7      	str	r7, [r4, #8]
 800c016:	eba7 0708 	sub.w	r7, r7, r8
 800c01a:	443b      	add	r3, r7
 800c01c:	f1c7 0a02 	rsb	sl, r7, #2
 800c020:	6123      	str	r3, [r4, #16]
 800c022:	4651      	mov	r1, sl
 800c024:	4620      	mov	r0, r4
 800c026:	f001 f8d7 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	d034      	beq.n	800c098 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c02e:	2e01      	cmp	r6, #1
 800c030:	d043      	beq.n	800c0ba <ucdr_deserialize_endian_uint16_t+0xd6>
 800c032:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c036:	702b      	strb	r3, [r5, #0]
 800c038:	2f00      	cmp	r7, #0
 800c03a:	d03a      	beq.n	800c0b2 <ucdr_deserialize_endian_uint16_t+0xce>
 800c03c:	f898 3000 	ldrb.w	r3, [r8]
 800c040:	706b      	strb	r3, [r5, #1]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	68a2      	ldr	r2, [r4, #8]
 800c046:	7da0      	ldrb	r0, [r4, #22]
 800c048:	2102      	movs	r1, #2
 800c04a:	3302      	adds	r3, #2
 800c04c:	4452      	add	r2, sl
 800c04e:	1bdb      	subs	r3, r3, r7
 800c050:	7561      	strb	r1, [r4, #21]
 800c052:	60a2      	str	r2, [r4, #8]
 800c054:	6123      	str	r3, [r4, #16]
 800c056:	f080 0001 	eor.w	r0, r0, #1
 800c05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05e:	2102      	movs	r1, #2
 800c060:	4620      	mov	r0, r4
 800c062:	f001 f8b9 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c066:	b178      	cbz	r0, 800c088 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c068:	2e01      	cmp	r6, #1
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	d011      	beq.n	800c092 <ucdr_deserialize_endian_uint16_t+0xae>
 800c06e:	785b      	ldrb	r3, [r3, #1]
 800c070:	702b      	strb	r3, [r5, #0]
 800c072:	68a3      	ldr	r3, [r4, #8]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	706b      	strb	r3, [r5, #1]
 800c078:	68a2      	ldr	r2, [r4, #8]
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	3202      	adds	r2, #2
 800c07e:	3302      	adds	r3, #2
 800c080:	2102      	movs	r1, #2
 800c082:	60a2      	str	r2, [r4, #8]
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	7561      	strb	r1, [r4, #21]
 800c088:	7da0      	ldrb	r0, [r4, #22]
 800c08a:	f080 0001 	eor.w	r0, r0, #1
 800c08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	802b      	strh	r3, [r5, #0]
 800c096:	e7ef      	b.n	800c078 <ucdr_deserialize_endian_uint16_t+0x94>
 800c098:	68a2      	ldr	r2, [r4, #8]
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	7da0      	ldrb	r0, [r4, #22]
 800c09e:	f884 9015 	strb.w	r9, [r4, #21]
 800c0a2:	1bd2      	subs	r2, r2, r7
 800c0a4:	1bdb      	subs	r3, r3, r7
 800c0a6:	60a2      	str	r2, [r4, #8]
 800c0a8:	6123      	str	r3, [r4, #16]
 800c0aa:	f080 0001 	eor.w	r0, r0, #1
 800c0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b2:	68a3      	ldr	r3, [r4, #8]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	706b      	strb	r3, [r5, #1]
 800c0b8:	e7c3      	b.n	800c042 <ucdr_deserialize_endian_uint16_t+0x5e>
 800c0ba:	4641      	mov	r1, r8
 800c0bc:	463a      	mov	r2, r7
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f00e fb3d 	bl	801a73e <memcpy>
 800c0c4:	68a1      	ldr	r1, [r4, #8]
 800c0c6:	4652      	mov	r2, sl
 800c0c8:	19e8      	adds	r0, r5, r7
 800c0ca:	f00e fb38 	bl	801a73e <memcpy>
 800c0ce:	e7b8      	b.n	800c042 <ucdr_deserialize_endian_uint16_t+0x5e>

0800c0d0 <ucdr_serialize_uint32_t>:
 800c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	9101      	str	r1, [sp, #4]
 800c0da:	2104      	movs	r1, #4
 800c0dc:	f001 f8d0 	bl	800d280 <ucdr_buffer_alignment>
 800c0e0:	4601      	mov	r1, r0
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	7d67      	ldrb	r7, [r4, #21]
 800c0e6:	f001 f90f 	bl	800d308 <ucdr_advance_buffer>
 800c0ea:	2104      	movs	r1, #4
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f001 f867 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d139      	bne.n	800c16a <ucdr_serialize_uint32_t+0x9a>
 800c0f6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c0fa:	42ab      	cmp	r3, r5
 800c0fc:	d930      	bls.n	800c160 <ucdr_serialize_uint32_t+0x90>
 800c0fe:	1b5e      	subs	r6, r3, r5
 800c100:	60a3      	str	r3, [r4, #8]
 800c102:	6923      	ldr	r3, [r4, #16]
 800c104:	f1c6 0804 	rsb	r8, r6, #4
 800c108:	4433      	add	r3, r6
 800c10a:	6123      	str	r3, [r4, #16]
 800c10c:	4641      	mov	r1, r8
 800c10e:	4620      	mov	r0, r4
 800c110:	f001 f862 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c114:	2800      	cmp	r0, #0
 800c116:	d04c      	beq.n	800c1b2 <ucdr_serialize_uint32_t+0xe2>
 800c118:	7d23      	ldrb	r3, [r4, #20]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d063      	beq.n	800c1e6 <ucdr_serialize_uint32_t+0x116>
 800c11e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c122:	702b      	strb	r3, [r5, #0]
 800c124:	2e00      	cmp	r6, #0
 800c126:	d051      	beq.n	800c1cc <ucdr_serialize_uint32_t+0xfc>
 800c128:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c12c:	706b      	strb	r3, [r5, #1]
 800c12e:	2e01      	cmp	r6, #1
 800c130:	d050      	beq.n	800c1d4 <ucdr_serialize_uint32_t+0x104>
 800c132:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c136:	70ab      	strb	r3, [r5, #2]
 800c138:	2e02      	cmp	r6, #2
 800c13a:	d04f      	beq.n	800c1dc <ucdr_serialize_uint32_t+0x10c>
 800c13c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c140:	70eb      	strb	r3, [r5, #3]
 800c142:	6923      	ldr	r3, [r4, #16]
 800c144:	68a2      	ldr	r2, [r4, #8]
 800c146:	7da0      	ldrb	r0, [r4, #22]
 800c148:	3304      	adds	r3, #4
 800c14a:	1b9e      	subs	r6, r3, r6
 800c14c:	4442      	add	r2, r8
 800c14e:	2304      	movs	r3, #4
 800c150:	f080 0001 	eor.w	r0, r0, #1
 800c154:	60a2      	str	r2, [r4, #8]
 800c156:	6126      	str	r6, [r4, #16]
 800c158:	7563      	strb	r3, [r4, #21]
 800c15a:	b002      	add	sp, #8
 800c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c160:	2104      	movs	r1, #4
 800c162:	4620      	mov	r0, r4
 800c164:	f001 f838 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c168:	b1d0      	cbz	r0, 800c1a0 <ucdr_serialize_uint32_t+0xd0>
 800c16a:	7d23      	ldrb	r3, [r4, #20]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	68a3      	ldr	r3, [r4, #8]
 800c170:	d01c      	beq.n	800c1ac <ucdr_serialize_uint32_t+0xdc>
 800c172:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c176:	701a      	strb	r2, [r3, #0]
 800c178:	68a3      	ldr	r3, [r4, #8]
 800c17a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c17e:	705a      	strb	r2, [r3, #1]
 800c180:	68a3      	ldr	r3, [r4, #8]
 800c182:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c186:	709a      	strb	r2, [r3, #2]
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c18e:	70da      	strb	r2, [r3, #3]
 800c190:	68a2      	ldr	r2, [r4, #8]
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	3204      	adds	r2, #4
 800c196:	3304      	adds	r3, #4
 800c198:	2104      	movs	r1, #4
 800c19a:	60a2      	str	r2, [r4, #8]
 800c19c:	6123      	str	r3, [r4, #16]
 800c19e:	7561      	strb	r1, [r4, #21]
 800c1a0:	7da0      	ldrb	r0, [r4, #22]
 800c1a2:	f080 0001 	eor.w	r0, r0, #1
 800c1a6:	b002      	add	sp, #8
 800c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ac:	9a01      	ldr	r2, [sp, #4]
 800c1ae:	601a      	str	r2, [r3, #0]
 800c1b0:	e7ee      	b.n	800c190 <ucdr_serialize_uint32_t+0xc0>
 800c1b2:	68a2      	ldr	r2, [r4, #8]
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	7da0      	ldrb	r0, [r4, #22]
 800c1b8:	7567      	strb	r7, [r4, #21]
 800c1ba:	1b92      	subs	r2, r2, r6
 800c1bc:	1b9b      	subs	r3, r3, r6
 800c1be:	f080 0001 	eor.w	r0, r0, #1
 800c1c2:	60a2      	str	r2, [r4, #8]
 800c1c4:	6123      	str	r3, [r4, #16]
 800c1c6:	b002      	add	sp, #8
 800c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1cc:	68a3      	ldr	r3, [r4, #8]
 800c1ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1d2:	701a      	strb	r2, [r3, #0]
 800c1d4:	68a3      	ldr	r3, [r4, #8]
 800c1d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1da:	701a      	strb	r2, [r3, #0]
 800c1dc:	68a3      	ldr	r3, [r4, #8]
 800c1de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1e2:	701a      	strb	r2, [r3, #0]
 800c1e4:	e7ad      	b.n	800c142 <ucdr_serialize_uint32_t+0x72>
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	ad01      	add	r5, sp, #4
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	f00e faa6 	bl	801a73e <memcpy>
 800c1f2:	68a0      	ldr	r0, [r4, #8]
 800c1f4:	4642      	mov	r2, r8
 800c1f6:	19a9      	adds	r1, r5, r6
 800c1f8:	f00e faa1 	bl	801a73e <memcpy>
 800c1fc:	e7a1      	b.n	800c142 <ucdr_serialize_uint32_t+0x72>
 800c1fe:	bf00      	nop

0800c200 <ucdr_serialize_endian_uint32_t>:
 800c200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c204:	b083      	sub	sp, #12
 800c206:	460d      	mov	r5, r1
 800c208:	2104      	movs	r1, #4
 800c20a:	4604      	mov	r4, r0
 800c20c:	9201      	str	r2, [sp, #4]
 800c20e:	f001 f837 	bl	800d280 <ucdr_buffer_alignment>
 800c212:	4601      	mov	r1, r0
 800c214:	4620      	mov	r0, r4
 800c216:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c21a:	f001 f875 	bl	800d308 <ucdr_advance_buffer>
 800c21e:	2104      	movs	r1, #4
 800c220:	4620      	mov	r0, r4
 800c222:	f000 ffcd 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c226:	2800      	cmp	r0, #0
 800c228:	d138      	bne.n	800c29c <ucdr_serialize_endian_uint32_t+0x9c>
 800c22a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c22e:	42b7      	cmp	r7, r6
 800c230:	d92f      	bls.n	800c292 <ucdr_serialize_endian_uint32_t+0x92>
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	60a7      	str	r7, [r4, #8]
 800c236:	1bbf      	subs	r7, r7, r6
 800c238:	443b      	add	r3, r7
 800c23a:	f1c7 0904 	rsb	r9, r7, #4
 800c23e:	6123      	str	r3, [r4, #16]
 800c240:	4649      	mov	r1, r9
 800c242:	4620      	mov	r0, r4
 800c244:	f000 ffc8 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d04a      	beq.n	800c2e2 <ucdr_serialize_endian_uint32_t+0xe2>
 800c24c:	2d01      	cmp	r5, #1
 800c24e:	d063      	beq.n	800c318 <ucdr_serialize_endian_uint32_t+0x118>
 800c250:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c254:	7033      	strb	r3, [r6, #0]
 800c256:	2f00      	cmp	r7, #0
 800c258:	d051      	beq.n	800c2fe <ucdr_serialize_endian_uint32_t+0xfe>
 800c25a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c25e:	7073      	strb	r3, [r6, #1]
 800c260:	2f01      	cmp	r7, #1
 800c262:	d050      	beq.n	800c306 <ucdr_serialize_endian_uint32_t+0x106>
 800c264:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c268:	70b3      	strb	r3, [r6, #2]
 800c26a:	2f02      	cmp	r7, #2
 800c26c:	d04f      	beq.n	800c30e <ucdr_serialize_endian_uint32_t+0x10e>
 800c26e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c272:	70f3      	strb	r3, [r6, #3]
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	68a2      	ldr	r2, [r4, #8]
 800c278:	7da0      	ldrb	r0, [r4, #22]
 800c27a:	3304      	adds	r3, #4
 800c27c:	444a      	add	r2, r9
 800c27e:	1bdb      	subs	r3, r3, r7
 800c280:	2104      	movs	r1, #4
 800c282:	f080 0001 	eor.w	r0, r0, #1
 800c286:	60a2      	str	r2, [r4, #8]
 800c288:	6123      	str	r3, [r4, #16]
 800c28a:	7561      	strb	r1, [r4, #21]
 800c28c:	b003      	add	sp, #12
 800c28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c292:	2104      	movs	r1, #4
 800c294:	4620      	mov	r0, r4
 800c296:	f000 ff9f 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c29a:	b1c8      	cbz	r0, 800c2d0 <ucdr_serialize_endian_uint32_t+0xd0>
 800c29c:	2d01      	cmp	r5, #1
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	d01c      	beq.n	800c2dc <ucdr_serialize_endian_uint32_t+0xdc>
 800c2a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c2a6:	701a      	strb	r2, [r3, #0]
 800c2a8:	68a3      	ldr	r3, [r4, #8]
 800c2aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2ae:	705a      	strb	r2, [r3, #1]
 800c2b0:	68a3      	ldr	r3, [r4, #8]
 800c2b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2b6:	709a      	strb	r2, [r3, #2]
 800c2b8:	68a3      	ldr	r3, [r4, #8]
 800c2ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2be:	70da      	strb	r2, [r3, #3]
 800c2c0:	68a2      	ldr	r2, [r4, #8]
 800c2c2:	6923      	ldr	r3, [r4, #16]
 800c2c4:	3204      	adds	r2, #4
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	2104      	movs	r1, #4
 800c2ca:	60a2      	str	r2, [r4, #8]
 800c2cc:	6123      	str	r3, [r4, #16]
 800c2ce:	7561      	strb	r1, [r4, #21]
 800c2d0:	7da0      	ldrb	r0, [r4, #22]
 800c2d2:	f080 0001 	eor.w	r0, r0, #1
 800c2d6:	b003      	add	sp, #12
 800c2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2dc:	9a01      	ldr	r2, [sp, #4]
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	e7ee      	b.n	800c2c0 <ucdr_serialize_endian_uint32_t+0xc0>
 800c2e2:	68a2      	ldr	r2, [r4, #8]
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	7da0      	ldrb	r0, [r4, #22]
 800c2e8:	f884 8015 	strb.w	r8, [r4, #21]
 800c2ec:	1bd2      	subs	r2, r2, r7
 800c2ee:	1bdb      	subs	r3, r3, r7
 800c2f0:	f080 0001 	eor.w	r0, r0, #1
 800c2f4:	60a2      	str	r2, [r4, #8]
 800c2f6:	6123      	str	r3, [r4, #16]
 800c2f8:	b003      	add	sp, #12
 800c2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2fe:	68a3      	ldr	r3, [r4, #8]
 800c300:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c30c:	701a      	strb	r2, [r3, #0]
 800c30e:	68a3      	ldr	r3, [r4, #8]
 800c310:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c314:	701a      	strb	r2, [r3, #0]
 800c316:	e7ad      	b.n	800c274 <ucdr_serialize_endian_uint32_t+0x74>
 800c318:	ad01      	add	r5, sp, #4
 800c31a:	4629      	mov	r1, r5
 800c31c:	463a      	mov	r2, r7
 800c31e:	4630      	mov	r0, r6
 800c320:	f00e fa0d 	bl	801a73e <memcpy>
 800c324:	68a0      	ldr	r0, [r4, #8]
 800c326:	464a      	mov	r2, r9
 800c328:	19e9      	adds	r1, r5, r7
 800c32a:	f00e fa08 	bl	801a73e <memcpy>
 800c32e:	e7a1      	b.n	800c274 <ucdr_serialize_endian_uint32_t+0x74>

0800c330 <ucdr_deserialize_uint32_t>:
 800c330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c334:	460d      	mov	r5, r1
 800c336:	2104      	movs	r1, #4
 800c338:	4604      	mov	r4, r0
 800c33a:	f000 ffa1 	bl	800d280 <ucdr_buffer_alignment>
 800c33e:	4601      	mov	r1, r0
 800c340:	4620      	mov	r0, r4
 800c342:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c346:	f000 ffdf 	bl	800d308 <ucdr_advance_buffer>
 800c34a:	2104      	movs	r1, #4
 800c34c:	4620      	mov	r0, r4
 800c34e:	f000 ff37 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c352:	2800      	cmp	r0, #0
 800c354:	d138      	bne.n	800c3c8 <ucdr_deserialize_uint32_t+0x98>
 800c356:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c35a:	42b7      	cmp	r7, r6
 800c35c:	d92f      	bls.n	800c3be <ucdr_deserialize_uint32_t+0x8e>
 800c35e:	6923      	ldr	r3, [r4, #16]
 800c360:	60a7      	str	r7, [r4, #8]
 800c362:	1bbf      	subs	r7, r7, r6
 800c364:	443b      	add	r3, r7
 800c366:	f1c7 0904 	rsb	r9, r7, #4
 800c36a:	6123      	str	r3, [r4, #16]
 800c36c:	4649      	mov	r1, r9
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 ff32 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c374:	2800      	cmp	r0, #0
 800c376:	d046      	beq.n	800c406 <ucdr_deserialize_uint32_t+0xd6>
 800c378:	7d23      	ldrb	r3, [r4, #20]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d05c      	beq.n	800c438 <ucdr_deserialize_uint32_t+0x108>
 800c37e:	78f3      	ldrb	r3, [r6, #3]
 800c380:	702b      	strb	r3, [r5, #0]
 800c382:	2f00      	cmp	r7, #0
 800c384:	d04c      	beq.n	800c420 <ucdr_deserialize_uint32_t+0xf0>
 800c386:	78b3      	ldrb	r3, [r6, #2]
 800c388:	706b      	strb	r3, [r5, #1]
 800c38a:	2f01      	cmp	r7, #1
 800c38c:	f105 0302 	add.w	r3, r5, #2
 800c390:	d04a      	beq.n	800c428 <ucdr_deserialize_uint32_t+0xf8>
 800c392:	7873      	ldrb	r3, [r6, #1]
 800c394:	70ab      	strb	r3, [r5, #2]
 800c396:	2f02      	cmp	r7, #2
 800c398:	f105 0303 	add.w	r3, r5, #3
 800c39c:	d048      	beq.n	800c430 <ucdr_deserialize_uint32_t+0x100>
 800c39e:	7833      	ldrb	r3, [r6, #0]
 800c3a0:	70eb      	strb	r3, [r5, #3]
 800c3a2:	6923      	ldr	r3, [r4, #16]
 800c3a4:	68a2      	ldr	r2, [r4, #8]
 800c3a6:	7da0      	ldrb	r0, [r4, #22]
 800c3a8:	2104      	movs	r1, #4
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	444a      	add	r2, r9
 800c3ae:	1bdb      	subs	r3, r3, r7
 800c3b0:	7561      	strb	r1, [r4, #21]
 800c3b2:	60a2      	str	r2, [r4, #8]
 800c3b4:	6123      	str	r3, [r4, #16]
 800c3b6:	f080 0001 	eor.w	r0, r0, #1
 800c3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3be:	2104      	movs	r1, #4
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 ff09 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c3c6:	b1b0      	cbz	r0, 800c3f6 <ucdr_deserialize_uint32_t+0xc6>
 800c3c8:	7d23      	ldrb	r3, [r4, #20]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	68a3      	ldr	r3, [r4, #8]
 800c3ce:	d017      	beq.n	800c400 <ucdr_deserialize_uint32_t+0xd0>
 800c3d0:	78db      	ldrb	r3, [r3, #3]
 800c3d2:	702b      	strb	r3, [r5, #0]
 800c3d4:	68a3      	ldr	r3, [r4, #8]
 800c3d6:	789b      	ldrb	r3, [r3, #2]
 800c3d8:	706b      	strb	r3, [r5, #1]
 800c3da:	68a3      	ldr	r3, [r4, #8]
 800c3dc:	785b      	ldrb	r3, [r3, #1]
 800c3de:	70ab      	strb	r3, [r5, #2]
 800c3e0:	68a3      	ldr	r3, [r4, #8]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	70eb      	strb	r3, [r5, #3]
 800c3e6:	68a2      	ldr	r2, [r4, #8]
 800c3e8:	6923      	ldr	r3, [r4, #16]
 800c3ea:	3204      	adds	r2, #4
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	2104      	movs	r1, #4
 800c3f0:	60a2      	str	r2, [r4, #8]
 800c3f2:	6123      	str	r3, [r4, #16]
 800c3f4:	7561      	strb	r1, [r4, #21]
 800c3f6:	7da0      	ldrb	r0, [r4, #22]
 800c3f8:	f080 0001 	eor.w	r0, r0, #1
 800c3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	602b      	str	r3, [r5, #0]
 800c404:	e7ef      	b.n	800c3e6 <ucdr_deserialize_uint32_t+0xb6>
 800c406:	68a2      	ldr	r2, [r4, #8]
 800c408:	6923      	ldr	r3, [r4, #16]
 800c40a:	7da0      	ldrb	r0, [r4, #22]
 800c40c:	f884 8015 	strb.w	r8, [r4, #21]
 800c410:	1bd2      	subs	r2, r2, r7
 800c412:	1bdb      	subs	r3, r3, r7
 800c414:	60a2      	str	r2, [r4, #8]
 800c416:	6123      	str	r3, [r4, #16]
 800c418:	f080 0001 	eor.w	r0, r0, #1
 800c41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c420:	68a3      	ldr	r3, [r4, #8]
 800c422:	789b      	ldrb	r3, [r3, #2]
 800c424:	706b      	strb	r3, [r5, #1]
 800c426:	1cab      	adds	r3, r5, #2
 800c428:	68a2      	ldr	r2, [r4, #8]
 800c42a:	7852      	ldrb	r2, [r2, #1]
 800c42c:	f803 2b01 	strb.w	r2, [r3], #1
 800c430:	68a2      	ldr	r2, [r4, #8]
 800c432:	7812      	ldrb	r2, [r2, #0]
 800c434:	701a      	strb	r2, [r3, #0]
 800c436:	e7b4      	b.n	800c3a2 <ucdr_deserialize_uint32_t+0x72>
 800c438:	4631      	mov	r1, r6
 800c43a:	463a      	mov	r2, r7
 800c43c:	4628      	mov	r0, r5
 800c43e:	f00e f97e 	bl	801a73e <memcpy>
 800c442:	68a1      	ldr	r1, [r4, #8]
 800c444:	464a      	mov	r2, r9
 800c446:	19e8      	adds	r0, r5, r7
 800c448:	f00e f979 	bl	801a73e <memcpy>
 800c44c:	e7a9      	b.n	800c3a2 <ucdr_deserialize_uint32_t+0x72>
 800c44e:	bf00      	nop

0800c450 <ucdr_deserialize_endian_uint32_t>:
 800c450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c454:	460e      	mov	r6, r1
 800c456:	2104      	movs	r1, #4
 800c458:	4604      	mov	r4, r0
 800c45a:	4615      	mov	r5, r2
 800c45c:	f000 ff10 	bl	800d280 <ucdr_buffer_alignment>
 800c460:	4601      	mov	r1, r0
 800c462:	4620      	mov	r0, r4
 800c464:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c468:	f000 ff4e 	bl	800d308 <ucdr_advance_buffer>
 800c46c:	2104      	movs	r1, #4
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 fea6 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c474:	2800      	cmp	r0, #0
 800c476:	d13c      	bne.n	800c4f2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800c478:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c47c:	42bb      	cmp	r3, r7
 800c47e:	d933      	bls.n	800c4e8 <ucdr_deserialize_endian_uint32_t+0x98>
 800c480:	eba3 0807 	sub.w	r8, r3, r7
 800c484:	60a3      	str	r3, [r4, #8]
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	f1c8 0a04 	rsb	sl, r8, #4
 800c48c:	4443      	add	r3, r8
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	4651      	mov	r1, sl
 800c492:	4620      	mov	r0, r4
 800c494:	f000 fea0 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c498:	2800      	cmp	r0, #0
 800c49a:	d048      	beq.n	800c52e <ucdr_deserialize_endian_uint32_t+0xde>
 800c49c:	2e01      	cmp	r6, #1
 800c49e:	d061      	beq.n	800c564 <ucdr_deserialize_endian_uint32_t+0x114>
 800c4a0:	78fb      	ldrb	r3, [r7, #3]
 800c4a2:	702b      	strb	r3, [r5, #0]
 800c4a4:	f1b8 0f00 	cmp.w	r8, #0
 800c4a8:	d050      	beq.n	800c54c <ucdr_deserialize_endian_uint32_t+0xfc>
 800c4aa:	78bb      	ldrb	r3, [r7, #2]
 800c4ac:	706b      	strb	r3, [r5, #1]
 800c4ae:	f1b8 0f01 	cmp.w	r8, #1
 800c4b2:	f105 0302 	add.w	r3, r5, #2
 800c4b6:	d04d      	beq.n	800c554 <ucdr_deserialize_endian_uint32_t+0x104>
 800c4b8:	787b      	ldrb	r3, [r7, #1]
 800c4ba:	70ab      	strb	r3, [r5, #2]
 800c4bc:	f1b8 0f02 	cmp.w	r8, #2
 800c4c0:	f105 0303 	add.w	r3, r5, #3
 800c4c4:	d04a      	beq.n	800c55c <ucdr_deserialize_endian_uint32_t+0x10c>
 800c4c6:	783b      	ldrb	r3, [r7, #0]
 800c4c8:	70eb      	strb	r3, [r5, #3]
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	68a2      	ldr	r2, [r4, #8]
 800c4ce:	7da0      	ldrb	r0, [r4, #22]
 800c4d0:	2104      	movs	r1, #4
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	4452      	add	r2, sl
 800c4d6:	eba3 0308 	sub.w	r3, r3, r8
 800c4da:	7561      	strb	r1, [r4, #21]
 800c4dc:	60a2      	str	r2, [r4, #8]
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	f080 0001 	eor.w	r0, r0, #1
 800c4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e8:	2104      	movs	r1, #4
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 fe74 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c4f0:	b1a8      	cbz	r0, 800c51e <ucdr_deserialize_endian_uint32_t+0xce>
 800c4f2:	2e01      	cmp	r6, #1
 800c4f4:	68a3      	ldr	r3, [r4, #8]
 800c4f6:	d017      	beq.n	800c528 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c4f8:	78db      	ldrb	r3, [r3, #3]
 800c4fa:	702b      	strb	r3, [r5, #0]
 800c4fc:	68a3      	ldr	r3, [r4, #8]
 800c4fe:	789b      	ldrb	r3, [r3, #2]
 800c500:	706b      	strb	r3, [r5, #1]
 800c502:	68a3      	ldr	r3, [r4, #8]
 800c504:	785b      	ldrb	r3, [r3, #1]
 800c506:	70ab      	strb	r3, [r5, #2]
 800c508:	68a3      	ldr	r3, [r4, #8]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	70eb      	strb	r3, [r5, #3]
 800c50e:	68a2      	ldr	r2, [r4, #8]
 800c510:	6923      	ldr	r3, [r4, #16]
 800c512:	3204      	adds	r2, #4
 800c514:	3304      	adds	r3, #4
 800c516:	2104      	movs	r1, #4
 800c518:	60a2      	str	r2, [r4, #8]
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	7561      	strb	r1, [r4, #21]
 800c51e:	7da0      	ldrb	r0, [r4, #22]
 800c520:	f080 0001 	eor.w	r0, r0, #1
 800c524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	602b      	str	r3, [r5, #0]
 800c52c:	e7ef      	b.n	800c50e <ucdr_deserialize_endian_uint32_t+0xbe>
 800c52e:	68a2      	ldr	r2, [r4, #8]
 800c530:	6923      	ldr	r3, [r4, #16]
 800c532:	7da0      	ldrb	r0, [r4, #22]
 800c534:	f884 9015 	strb.w	r9, [r4, #21]
 800c538:	eba2 0208 	sub.w	r2, r2, r8
 800c53c:	eba3 0308 	sub.w	r3, r3, r8
 800c540:	60a2      	str	r2, [r4, #8]
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	f080 0001 	eor.w	r0, r0, #1
 800c548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54c:	68a3      	ldr	r3, [r4, #8]
 800c54e:	789b      	ldrb	r3, [r3, #2]
 800c550:	706b      	strb	r3, [r5, #1]
 800c552:	1cab      	adds	r3, r5, #2
 800c554:	68a2      	ldr	r2, [r4, #8]
 800c556:	7852      	ldrb	r2, [r2, #1]
 800c558:	f803 2b01 	strb.w	r2, [r3], #1
 800c55c:	68a2      	ldr	r2, [r4, #8]
 800c55e:	7812      	ldrb	r2, [r2, #0]
 800c560:	701a      	strb	r2, [r3, #0]
 800c562:	e7b2      	b.n	800c4ca <ucdr_deserialize_endian_uint32_t+0x7a>
 800c564:	4639      	mov	r1, r7
 800c566:	4642      	mov	r2, r8
 800c568:	4628      	mov	r0, r5
 800c56a:	f00e f8e8 	bl	801a73e <memcpy>
 800c56e:	68a1      	ldr	r1, [r4, #8]
 800c570:	4652      	mov	r2, sl
 800c572:	eb05 0008 	add.w	r0, r5, r8
 800c576:	f00e f8e2 	bl	801a73e <memcpy>
 800c57a:	e7a6      	b.n	800c4ca <ucdr_deserialize_endian_uint32_t+0x7a>

0800c57c <ucdr_serialize_uint64_t>:
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	2108      	movs	r1, #8
 800c582:	b082      	sub	sp, #8
 800c584:	4604      	mov	r4, r0
 800c586:	e9cd 2300 	strd	r2, r3, [sp]
 800c58a:	f000 fe79 	bl	800d280 <ucdr_buffer_alignment>
 800c58e:	4601      	mov	r1, r0
 800c590:	4620      	mov	r0, r4
 800c592:	7d67      	ldrb	r7, [r4, #21]
 800c594:	f000 feb8 	bl	800d308 <ucdr_advance_buffer>
 800c598:	2108      	movs	r1, #8
 800c59a:	4620      	mov	r0, r4
 800c59c:	f000 fe10 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d14e      	bne.n	800c642 <ucdr_serialize_uint64_t+0xc6>
 800c5a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c5a8:	42ab      	cmp	r3, r5
 800c5aa:	d945      	bls.n	800c638 <ucdr_serialize_uint64_t+0xbc>
 800c5ac:	1b5e      	subs	r6, r3, r5
 800c5ae:	60a3      	str	r3, [r4, #8]
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	f1c6 0808 	rsb	r8, r6, #8
 800c5b6:	4433      	add	r3, r6
 800c5b8:	6123      	str	r3, [r4, #16]
 800c5ba:	4641      	mov	r1, r8
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 fe0b 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d074      	beq.n	800c6b0 <ucdr_serialize_uint64_t+0x134>
 800c5c6:	7d23      	ldrb	r3, [r4, #20]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	f000 809b 	beq.w	800c704 <ucdr_serialize_uint64_t+0x188>
 800c5ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5d2:	702b      	strb	r3, [r5, #0]
 800c5d4:	2e00      	cmp	r6, #0
 800c5d6:	d078      	beq.n	800c6ca <ucdr_serialize_uint64_t+0x14e>
 800c5d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5dc:	706b      	strb	r3, [r5, #1]
 800c5de:	2e01      	cmp	r6, #1
 800c5e0:	d077      	beq.n	800c6d2 <ucdr_serialize_uint64_t+0x156>
 800c5e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c5e6:	70ab      	strb	r3, [r5, #2]
 800c5e8:	2e02      	cmp	r6, #2
 800c5ea:	d076      	beq.n	800c6da <ucdr_serialize_uint64_t+0x15e>
 800c5ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c5f0:	70eb      	strb	r3, [r5, #3]
 800c5f2:	2e03      	cmp	r6, #3
 800c5f4:	d075      	beq.n	800c6e2 <ucdr_serialize_uint64_t+0x166>
 800c5f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c5fa:	712b      	strb	r3, [r5, #4]
 800c5fc:	2e04      	cmp	r6, #4
 800c5fe:	d074      	beq.n	800c6ea <ucdr_serialize_uint64_t+0x16e>
 800c600:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c604:	716b      	strb	r3, [r5, #5]
 800c606:	2e05      	cmp	r6, #5
 800c608:	d073      	beq.n	800c6f2 <ucdr_serialize_uint64_t+0x176>
 800c60a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c60e:	71ab      	strb	r3, [r5, #6]
 800c610:	2e06      	cmp	r6, #6
 800c612:	d072      	beq.n	800c6fa <ucdr_serialize_uint64_t+0x17e>
 800c614:	f89d 3000 	ldrb.w	r3, [sp]
 800c618:	71eb      	strb	r3, [r5, #7]
 800c61a:	6923      	ldr	r3, [r4, #16]
 800c61c:	68a2      	ldr	r2, [r4, #8]
 800c61e:	7da0      	ldrb	r0, [r4, #22]
 800c620:	3308      	adds	r3, #8
 800c622:	1b9e      	subs	r6, r3, r6
 800c624:	4442      	add	r2, r8
 800c626:	2308      	movs	r3, #8
 800c628:	f080 0001 	eor.w	r0, r0, #1
 800c62c:	60a2      	str	r2, [r4, #8]
 800c62e:	6126      	str	r6, [r4, #16]
 800c630:	7563      	strb	r3, [r4, #21]
 800c632:	b002      	add	sp, #8
 800c634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c638:	2108      	movs	r1, #8
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 fdcc 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c640:	b350      	cbz	r0, 800c698 <ucdr_serialize_uint64_t+0x11c>
 800c642:	7d23      	ldrb	r3, [r4, #20]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d02d      	beq.n	800c6a4 <ucdr_serialize_uint64_t+0x128>
 800c648:	68a3      	ldr	r3, [r4, #8]
 800c64a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c64e:	701a      	strb	r2, [r3, #0]
 800c650:	68a3      	ldr	r3, [r4, #8]
 800c652:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c656:	705a      	strb	r2, [r3, #1]
 800c658:	68a3      	ldr	r3, [r4, #8]
 800c65a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c65e:	709a      	strb	r2, [r3, #2]
 800c660:	68a3      	ldr	r3, [r4, #8]
 800c662:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c666:	70da      	strb	r2, [r3, #3]
 800c668:	68a3      	ldr	r3, [r4, #8]
 800c66a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c66e:	711a      	strb	r2, [r3, #4]
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c676:	715a      	strb	r2, [r3, #5]
 800c678:	68a3      	ldr	r3, [r4, #8]
 800c67a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c67e:	719a      	strb	r2, [r3, #6]
 800c680:	68a3      	ldr	r3, [r4, #8]
 800c682:	f89d 2000 	ldrb.w	r2, [sp]
 800c686:	71da      	strb	r2, [r3, #7]
 800c688:	68a2      	ldr	r2, [r4, #8]
 800c68a:	6923      	ldr	r3, [r4, #16]
 800c68c:	3208      	adds	r2, #8
 800c68e:	3308      	adds	r3, #8
 800c690:	2108      	movs	r1, #8
 800c692:	60a2      	str	r2, [r4, #8]
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	7561      	strb	r1, [r4, #21]
 800c698:	7da0      	ldrb	r0, [r4, #22]
 800c69a:	f080 0001 	eor.w	r0, r0, #1
 800c69e:	b002      	add	sp, #8
 800c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a4:	466b      	mov	r3, sp
 800c6a6:	cb03      	ldmia	r3!, {r0, r1}
 800c6a8:	68a3      	ldr	r3, [r4, #8]
 800c6aa:	6018      	str	r0, [r3, #0]
 800c6ac:	6059      	str	r1, [r3, #4]
 800c6ae:	e7eb      	b.n	800c688 <ucdr_serialize_uint64_t+0x10c>
 800c6b0:	68a2      	ldr	r2, [r4, #8]
 800c6b2:	6923      	ldr	r3, [r4, #16]
 800c6b4:	7da0      	ldrb	r0, [r4, #22]
 800c6b6:	7567      	strb	r7, [r4, #21]
 800c6b8:	1b92      	subs	r2, r2, r6
 800c6ba:	1b9b      	subs	r3, r3, r6
 800c6bc:	f080 0001 	eor.w	r0, r0, #1
 800c6c0:	60a2      	str	r2, [r4, #8]
 800c6c2:	6123      	str	r3, [r4, #16]
 800c6c4:	b002      	add	sp, #8
 800c6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	68a3      	ldr	r3, [r4, #8]
 800c6d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c6d8:	701a      	strb	r2, [r3, #0]
 800c6da:	68a3      	ldr	r3, [r4, #8]
 800c6dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c6e0:	701a      	strb	r2, [r3, #0]
 800c6e2:	68a3      	ldr	r3, [r4, #8]
 800c6e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	68a3      	ldr	r3, [r4, #8]
 800c6ec:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	68a3      	ldr	r3, [r4, #8]
 800c6f4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c6f8:	701a      	strb	r2, [r3, #0]
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	f89d 2000 	ldrb.w	r2, [sp]
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	e78a      	b.n	800c61a <ucdr_serialize_uint64_t+0x9e>
 800c704:	4628      	mov	r0, r5
 800c706:	466d      	mov	r5, sp
 800c708:	4629      	mov	r1, r5
 800c70a:	4632      	mov	r2, r6
 800c70c:	f00e f817 	bl	801a73e <memcpy>
 800c710:	68a0      	ldr	r0, [r4, #8]
 800c712:	4642      	mov	r2, r8
 800c714:	19a9      	adds	r1, r5, r6
 800c716:	f00e f812 	bl	801a73e <memcpy>
 800c71a:	e77e      	b.n	800c61a <ucdr_serialize_uint64_t+0x9e>

0800c71c <ucdr_serialize_int16_t>:
 800c71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	460b      	mov	r3, r1
 800c724:	2102      	movs	r1, #2
 800c726:	4604      	mov	r4, r0
 800c728:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c72c:	f000 fda8 	bl	800d280 <ucdr_buffer_alignment>
 800c730:	4601      	mov	r1, r0
 800c732:	4620      	mov	r0, r4
 800c734:	7d67      	ldrb	r7, [r4, #21]
 800c736:	f000 fde7 	bl	800d308 <ucdr_advance_buffer>
 800c73a:	2102      	movs	r1, #2
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 fd3f 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c742:	bb78      	cbnz	r0, 800c7a4 <ucdr_serialize_int16_t+0x88>
 800c744:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c748:	42ab      	cmp	r3, r5
 800c74a:	d926      	bls.n	800c79a <ucdr_serialize_int16_t+0x7e>
 800c74c:	1b5e      	subs	r6, r3, r5
 800c74e:	60a3      	str	r3, [r4, #8]
 800c750:	6923      	ldr	r3, [r4, #16]
 800c752:	f1c6 0802 	rsb	r8, r6, #2
 800c756:	4433      	add	r3, r6
 800c758:	6123      	str	r3, [r4, #16]
 800c75a:	4641      	mov	r1, r8
 800c75c:	4620      	mov	r0, r4
 800c75e:	f000 fd3b 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c762:	2800      	cmp	r0, #0
 800c764:	d03b      	beq.n	800c7de <ucdr_serialize_int16_t+0xc2>
 800c766:	7d23      	ldrb	r3, [r4, #20]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d04a      	beq.n	800c802 <ucdr_serialize_int16_t+0xe6>
 800c76c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c770:	702b      	strb	r3, [r5, #0]
 800c772:	2e00      	cmp	r6, #0
 800c774:	d040      	beq.n	800c7f8 <ucdr_serialize_int16_t+0xdc>
 800c776:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c77a:	706b      	strb	r3, [r5, #1]
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	68a2      	ldr	r2, [r4, #8]
 800c780:	7da0      	ldrb	r0, [r4, #22]
 800c782:	3302      	adds	r3, #2
 800c784:	1b9e      	subs	r6, r3, r6
 800c786:	4442      	add	r2, r8
 800c788:	2302      	movs	r3, #2
 800c78a:	f080 0001 	eor.w	r0, r0, #1
 800c78e:	60a2      	str	r2, [r4, #8]
 800c790:	6126      	str	r6, [r4, #16]
 800c792:	7563      	strb	r3, [r4, #21]
 800c794:	b002      	add	sp, #8
 800c796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79a:	2102      	movs	r1, #2
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 fd1b 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c7a2:	b190      	cbz	r0, 800c7ca <ucdr_serialize_int16_t+0xae>
 800c7a4:	7d23      	ldrb	r3, [r4, #20]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	d014      	beq.n	800c7d6 <ucdr_serialize_int16_t+0xba>
 800c7ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c7b0:	701a      	strb	r2, [r3, #0]
 800c7b2:	68a3      	ldr	r3, [r4, #8]
 800c7b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7b8:	705a      	strb	r2, [r3, #1]
 800c7ba:	68a2      	ldr	r2, [r4, #8]
 800c7bc:	6923      	ldr	r3, [r4, #16]
 800c7be:	3202      	adds	r2, #2
 800c7c0:	3302      	adds	r3, #2
 800c7c2:	2102      	movs	r1, #2
 800c7c4:	60a2      	str	r2, [r4, #8]
 800c7c6:	6123      	str	r3, [r4, #16]
 800c7c8:	7561      	strb	r1, [r4, #21]
 800c7ca:	7da0      	ldrb	r0, [r4, #22]
 800c7cc:	f080 0001 	eor.w	r0, r0, #1
 800c7d0:	b002      	add	sp, #8
 800c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c7da:	801a      	strh	r2, [r3, #0]
 800c7dc:	e7ed      	b.n	800c7ba <ucdr_serialize_int16_t+0x9e>
 800c7de:	68a2      	ldr	r2, [r4, #8]
 800c7e0:	6923      	ldr	r3, [r4, #16]
 800c7e2:	7da0      	ldrb	r0, [r4, #22]
 800c7e4:	7567      	strb	r7, [r4, #21]
 800c7e6:	1b92      	subs	r2, r2, r6
 800c7e8:	1b9b      	subs	r3, r3, r6
 800c7ea:	f080 0001 	eor.w	r0, r0, #1
 800c7ee:	60a2      	str	r2, [r4, #8]
 800c7f0:	6123      	str	r3, [r4, #16]
 800c7f2:	b002      	add	sp, #8
 800c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f8:	68a3      	ldr	r3, [r4, #8]
 800c7fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	e7bc      	b.n	800c77c <ucdr_serialize_int16_t+0x60>
 800c802:	4628      	mov	r0, r5
 800c804:	f10d 0506 	add.w	r5, sp, #6
 800c808:	4629      	mov	r1, r5
 800c80a:	4632      	mov	r2, r6
 800c80c:	f00d ff97 	bl	801a73e <memcpy>
 800c810:	68a0      	ldr	r0, [r4, #8]
 800c812:	4642      	mov	r2, r8
 800c814:	19a9      	adds	r1, r5, r6
 800c816:	f00d ff92 	bl	801a73e <memcpy>
 800c81a:	e7af      	b.n	800c77c <ucdr_serialize_int16_t+0x60>

0800c81c <ucdr_deserialize_int16_t>:
 800c81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c820:	460d      	mov	r5, r1
 800c822:	2102      	movs	r1, #2
 800c824:	4604      	mov	r4, r0
 800c826:	f000 fd2b 	bl	800d280 <ucdr_buffer_alignment>
 800c82a:	4601      	mov	r1, r0
 800c82c:	4620      	mov	r0, r4
 800c82e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c832:	f000 fd69 	bl	800d308 <ucdr_advance_buffer>
 800c836:	2102      	movs	r1, #2
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 fcc1 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c83e:	bb60      	cbnz	r0, 800c89a <ucdr_deserialize_int16_t+0x7e>
 800c840:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c844:	42be      	cmp	r6, r7
 800c846:	d923      	bls.n	800c890 <ucdr_deserialize_int16_t+0x74>
 800c848:	6923      	ldr	r3, [r4, #16]
 800c84a:	60a6      	str	r6, [r4, #8]
 800c84c:	1bf6      	subs	r6, r6, r7
 800c84e:	4433      	add	r3, r6
 800c850:	f1c6 0902 	rsb	r9, r6, #2
 800c854:	6123      	str	r3, [r4, #16]
 800c856:	4649      	mov	r1, r9
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 fcbd 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d034      	beq.n	800c8cc <ucdr_deserialize_int16_t+0xb0>
 800c862:	7d23      	ldrb	r3, [r4, #20]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d042      	beq.n	800c8ee <ucdr_deserialize_int16_t+0xd2>
 800c868:	787b      	ldrb	r3, [r7, #1]
 800c86a:	702b      	strb	r3, [r5, #0]
 800c86c:	2e00      	cmp	r6, #0
 800c86e:	d03a      	beq.n	800c8e6 <ucdr_deserialize_int16_t+0xca>
 800c870:	783b      	ldrb	r3, [r7, #0]
 800c872:	706b      	strb	r3, [r5, #1]
 800c874:	6923      	ldr	r3, [r4, #16]
 800c876:	68a2      	ldr	r2, [r4, #8]
 800c878:	7da0      	ldrb	r0, [r4, #22]
 800c87a:	2102      	movs	r1, #2
 800c87c:	3302      	adds	r3, #2
 800c87e:	444a      	add	r2, r9
 800c880:	1b9b      	subs	r3, r3, r6
 800c882:	7561      	strb	r1, [r4, #21]
 800c884:	60a2      	str	r2, [r4, #8]
 800c886:	6123      	str	r3, [r4, #16]
 800c888:	f080 0001 	eor.w	r0, r0, #1
 800c88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c890:	2102      	movs	r1, #2
 800c892:	4620      	mov	r0, r4
 800c894:	f000 fca0 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c898:	b180      	cbz	r0, 800c8bc <ucdr_deserialize_int16_t+0xa0>
 800c89a:	7d23      	ldrb	r3, [r4, #20]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	d011      	beq.n	800c8c6 <ucdr_deserialize_int16_t+0xaa>
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	702b      	strb	r3, [r5, #0]
 800c8a6:	68a3      	ldr	r3, [r4, #8]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	706b      	strb	r3, [r5, #1]
 800c8ac:	68a2      	ldr	r2, [r4, #8]
 800c8ae:	6923      	ldr	r3, [r4, #16]
 800c8b0:	3202      	adds	r2, #2
 800c8b2:	3302      	adds	r3, #2
 800c8b4:	2102      	movs	r1, #2
 800c8b6:	60a2      	str	r2, [r4, #8]
 800c8b8:	6123      	str	r3, [r4, #16]
 800c8ba:	7561      	strb	r1, [r4, #21]
 800c8bc:	7da0      	ldrb	r0, [r4, #22]
 800c8be:	f080 0001 	eor.w	r0, r0, #1
 800c8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	802b      	strh	r3, [r5, #0]
 800c8ca:	e7ef      	b.n	800c8ac <ucdr_deserialize_int16_t+0x90>
 800c8cc:	68a2      	ldr	r2, [r4, #8]
 800c8ce:	6923      	ldr	r3, [r4, #16]
 800c8d0:	7da0      	ldrb	r0, [r4, #22]
 800c8d2:	f884 8015 	strb.w	r8, [r4, #21]
 800c8d6:	1b92      	subs	r2, r2, r6
 800c8d8:	1b9b      	subs	r3, r3, r6
 800c8da:	60a2      	str	r2, [r4, #8]
 800c8dc:	6123      	str	r3, [r4, #16]
 800c8de:	f080 0001 	eor.w	r0, r0, #1
 800c8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e6:	68a3      	ldr	r3, [r4, #8]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	706b      	strb	r3, [r5, #1]
 800c8ec:	e7c2      	b.n	800c874 <ucdr_deserialize_int16_t+0x58>
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	4632      	mov	r2, r6
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f00d ff23 	bl	801a73e <memcpy>
 800c8f8:	68a1      	ldr	r1, [r4, #8]
 800c8fa:	464a      	mov	r2, r9
 800c8fc:	19a8      	adds	r0, r5, r6
 800c8fe:	f00d ff1e 	bl	801a73e <memcpy>
 800c902:	e7b7      	b.n	800c874 <ucdr_deserialize_int16_t+0x58>

0800c904 <ucdr_serialize_int32_t>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	4604      	mov	r4, r0
 800c90c:	9101      	str	r1, [sp, #4]
 800c90e:	2104      	movs	r1, #4
 800c910:	f000 fcb6 	bl	800d280 <ucdr_buffer_alignment>
 800c914:	4601      	mov	r1, r0
 800c916:	4620      	mov	r0, r4
 800c918:	7d67      	ldrb	r7, [r4, #21]
 800c91a:	f000 fcf5 	bl	800d308 <ucdr_advance_buffer>
 800c91e:	2104      	movs	r1, #4
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fc4d 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800c926:	2800      	cmp	r0, #0
 800c928:	d139      	bne.n	800c99e <ucdr_serialize_int32_t+0x9a>
 800c92a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c92e:	42ab      	cmp	r3, r5
 800c930:	d930      	bls.n	800c994 <ucdr_serialize_int32_t+0x90>
 800c932:	1b5e      	subs	r6, r3, r5
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	f1c6 0804 	rsb	r8, r6, #4
 800c93c:	4433      	add	r3, r6
 800c93e:	6123      	str	r3, [r4, #16]
 800c940:	4641      	mov	r1, r8
 800c942:	4620      	mov	r0, r4
 800c944:	f000 fc48 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d04c      	beq.n	800c9e6 <ucdr_serialize_int32_t+0xe2>
 800c94c:	7d23      	ldrb	r3, [r4, #20]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d063      	beq.n	800ca1a <ucdr_serialize_int32_t+0x116>
 800c952:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c956:	702b      	strb	r3, [r5, #0]
 800c958:	2e00      	cmp	r6, #0
 800c95a:	d051      	beq.n	800ca00 <ucdr_serialize_int32_t+0xfc>
 800c95c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c960:	706b      	strb	r3, [r5, #1]
 800c962:	2e01      	cmp	r6, #1
 800c964:	d050      	beq.n	800ca08 <ucdr_serialize_int32_t+0x104>
 800c966:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c96a:	70ab      	strb	r3, [r5, #2]
 800c96c:	2e02      	cmp	r6, #2
 800c96e:	d04f      	beq.n	800ca10 <ucdr_serialize_int32_t+0x10c>
 800c970:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c974:	70eb      	strb	r3, [r5, #3]
 800c976:	6923      	ldr	r3, [r4, #16]
 800c978:	68a2      	ldr	r2, [r4, #8]
 800c97a:	7da0      	ldrb	r0, [r4, #22]
 800c97c:	3304      	adds	r3, #4
 800c97e:	1b9e      	subs	r6, r3, r6
 800c980:	4442      	add	r2, r8
 800c982:	2304      	movs	r3, #4
 800c984:	f080 0001 	eor.w	r0, r0, #1
 800c988:	60a2      	str	r2, [r4, #8]
 800c98a:	6126      	str	r6, [r4, #16]
 800c98c:	7563      	strb	r3, [r4, #21]
 800c98e:	b002      	add	sp, #8
 800c990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c994:	2104      	movs	r1, #4
 800c996:	4620      	mov	r0, r4
 800c998:	f000 fc1e 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800c99c:	b1d0      	cbz	r0, 800c9d4 <ucdr_serialize_int32_t+0xd0>
 800c99e:	7d23      	ldrb	r3, [r4, #20]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	68a3      	ldr	r3, [r4, #8]
 800c9a4:	d01c      	beq.n	800c9e0 <ucdr_serialize_int32_t+0xdc>
 800c9a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c9aa:	701a      	strb	r2, [r3, #0]
 800c9ac:	68a3      	ldr	r3, [r4, #8]
 800c9ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c9b2:	705a      	strb	r2, [r3, #1]
 800c9b4:	68a3      	ldr	r3, [r4, #8]
 800c9b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c9ba:	709a      	strb	r2, [r3, #2]
 800c9bc:	68a3      	ldr	r3, [r4, #8]
 800c9be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c9c2:	70da      	strb	r2, [r3, #3]
 800c9c4:	68a2      	ldr	r2, [r4, #8]
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	3204      	adds	r2, #4
 800c9ca:	3304      	adds	r3, #4
 800c9cc:	2104      	movs	r1, #4
 800c9ce:	60a2      	str	r2, [r4, #8]
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	7561      	strb	r1, [r4, #21]
 800c9d4:	7da0      	ldrb	r0, [r4, #22]
 800c9d6:	f080 0001 	eor.w	r0, r0, #1
 800c9da:	b002      	add	sp, #8
 800c9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e0:	9a01      	ldr	r2, [sp, #4]
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	e7ee      	b.n	800c9c4 <ucdr_serialize_int32_t+0xc0>
 800c9e6:	68a2      	ldr	r2, [r4, #8]
 800c9e8:	6923      	ldr	r3, [r4, #16]
 800c9ea:	7da0      	ldrb	r0, [r4, #22]
 800c9ec:	7567      	strb	r7, [r4, #21]
 800c9ee:	1b92      	subs	r2, r2, r6
 800c9f0:	1b9b      	subs	r3, r3, r6
 800c9f2:	f080 0001 	eor.w	r0, r0, #1
 800c9f6:	60a2      	str	r2, [r4, #8]
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	b002      	add	sp, #8
 800c9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca00:	68a3      	ldr	r3, [r4, #8]
 800ca02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca06:	701a      	strb	r2, [r3, #0]
 800ca08:	68a3      	ldr	r3, [r4, #8]
 800ca0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ca0e:	701a      	strb	r2, [r3, #0]
 800ca10:	68a3      	ldr	r3, [r4, #8]
 800ca12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ca16:	701a      	strb	r2, [r3, #0]
 800ca18:	e7ad      	b.n	800c976 <ucdr_serialize_int32_t+0x72>
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	ad01      	add	r5, sp, #4
 800ca1e:	4629      	mov	r1, r5
 800ca20:	4632      	mov	r2, r6
 800ca22:	f00d fe8c 	bl	801a73e <memcpy>
 800ca26:	68a0      	ldr	r0, [r4, #8]
 800ca28:	4642      	mov	r2, r8
 800ca2a:	19a9      	adds	r1, r5, r6
 800ca2c:	f00d fe87 	bl	801a73e <memcpy>
 800ca30:	e7a1      	b.n	800c976 <ucdr_serialize_int32_t+0x72>
 800ca32:	bf00      	nop

0800ca34 <ucdr_deserialize_int32_t>:
 800ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca38:	460d      	mov	r5, r1
 800ca3a:	2104      	movs	r1, #4
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	f000 fc1f 	bl	800d280 <ucdr_buffer_alignment>
 800ca42:	4601      	mov	r1, r0
 800ca44:	4620      	mov	r0, r4
 800ca46:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ca4a:	f000 fc5d 	bl	800d308 <ucdr_advance_buffer>
 800ca4e:	2104      	movs	r1, #4
 800ca50:	4620      	mov	r0, r4
 800ca52:	f000 fbb5 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d138      	bne.n	800cacc <ucdr_deserialize_int32_t+0x98>
 800ca5a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ca5e:	42b7      	cmp	r7, r6
 800ca60:	d92f      	bls.n	800cac2 <ucdr_deserialize_int32_t+0x8e>
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	60a7      	str	r7, [r4, #8]
 800ca66:	1bbf      	subs	r7, r7, r6
 800ca68:	443b      	add	r3, r7
 800ca6a:	f1c7 0904 	rsb	r9, r7, #4
 800ca6e:	6123      	str	r3, [r4, #16]
 800ca70:	4649      	mov	r1, r9
 800ca72:	4620      	mov	r0, r4
 800ca74:	f000 fbb0 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d046      	beq.n	800cb0a <ucdr_deserialize_int32_t+0xd6>
 800ca7c:	7d23      	ldrb	r3, [r4, #20]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d05c      	beq.n	800cb3c <ucdr_deserialize_int32_t+0x108>
 800ca82:	78f3      	ldrb	r3, [r6, #3]
 800ca84:	702b      	strb	r3, [r5, #0]
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	d04c      	beq.n	800cb24 <ucdr_deserialize_int32_t+0xf0>
 800ca8a:	78b3      	ldrb	r3, [r6, #2]
 800ca8c:	706b      	strb	r3, [r5, #1]
 800ca8e:	2f01      	cmp	r7, #1
 800ca90:	f105 0302 	add.w	r3, r5, #2
 800ca94:	d04a      	beq.n	800cb2c <ucdr_deserialize_int32_t+0xf8>
 800ca96:	7873      	ldrb	r3, [r6, #1]
 800ca98:	70ab      	strb	r3, [r5, #2]
 800ca9a:	2f02      	cmp	r7, #2
 800ca9c:	f105 0303 	add.w	r3, r5, #3
 800caa0:	d048      	beq.n	800cb34 <ucdr_deserialize_int32_t+0x100>
 800caa2:	7833      	ldrb	r3, [r6, #0]
 800caa4:	70eb      	strb	r3, [r5, #3]
 800caa6:	6923      	ldr	r3, [r4, #16]
 800caa8:	68a2      	ldr	r2, [r4, #8]
 800caaa:	7da0      	ldrb	r0, [r4, #22]
 800caac:	2104      	movs	r1, #4
 800caae:	3304      	adds	r3, #4
 800cab0:	444a      	add	r2, r9
 800cab2:	1bdb      	subs	r3, r3, r7
 800cab4:	7561      	strb	r1, [r4, #21]
 800cab6:	60a2      	str	r2, [r4, #8]
 800cab8:	6123      	str	r3, [r4, #16]
 800caba:	f080 0001 	eor.w	r0, r0, #1
 800cabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac2:	2104      	movs	r1, #4
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 fb87 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800caca:	b1b0      	cbz	r0, 800cafa <ucdr_deserialize_int32_t+0xc6>
 800cacc:	7d23      	ldrb	r3, [r4, #20]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	68a3      	ldr	r3, [r4, #8]
 800cad2:	d017      	beq.n	800cb04 <ucdr_deserialize_int32_t+0xd0>
 800cad4:	78db      	ldrb	r3, [r3, #3]
 800cad6:	702b      	strb	r3, [r5, #0]
 800cad8:	68a3      	ldr	r3, [r4, #8]
 800cada:	789b      	ldrb	r3, [r3, #2]
 800cadc:	706b      	strb	r3, [r5, #1]
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	70ab      	strb	r3, [r5, #2]
 800cae4:	68a3      	ldr	r3, [r4, #8]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	70eb      	strb	r3, [r5, #3]
 800caea:	68a2      	ldr	r2, [r4, #8]
 800caec:	6923      	ldr	r3, [r4, #16]
 800caee:	3204      	adds	r2, #4
 800caf0:	3304      	adds	r3, #4
 800caf2:	2104      	movs	r1, #4
 800caf4:	60a2      	str	r2, [r4, #8]
 800caf6:	6123      	str	r3, [r4, #16]
 800caf8:	7561      	strb	r1, [r4, #21]
 800cafa:	7da0      	ldrb	r0, [r4, #22]
 800cafc:	f080 0001 	eor.w	r0, r0, #1
 800cb00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	e7ef      	b.n	800caea <ucdr_deserialize_int32_t+0xb6>
 800cb0a:	68a2      	ldr	r2, [r4, #8]
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	7da0      	ldrb	r0, [r4, #22]
 800cb10:	f884 8015 	strb.w	r8, [r4, #21]
 800cb14:	1bd2      	subs	r2, r2, r7
 800cb16:	1bdb      	subs	r3, r3, r7
 800cb18:	60a2      	str	r2, [r4, #8]
 800cb1a:	6123      	str	r3, [r4, #16]
 800cb1c:	f080 0001 	eor.w	r0, r0, #1
 800cb20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb24:	68a3      	ldr	r3, [r4, #8]
 800cb26:	789b      	ldrb	r3, [r3, #2]
 800cb28:	706b      	strb	r3, [r5, #1]
 800cb2a:	1cab      	adds	r3, r5, #2
 800cb2c:	68a2      	ldr	r2, [r4, #8]
 800cb2e:	7852      	ldrb	r2, [r2, #1]
 800cb30:	f803 2b01 	strb.w	r2, [r3], #1
 800cb34:	68a2      	ldr	r2, [r4, #8]
 800cb36:	7812      	ldrb	r2, [r2, #0]
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	e7b4      	b.n	800caa6 <ucdr_deserialize_int32_t+0x72>
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	463a      	mov	r2, r7
 800cb40:	4628      	mov	r0, r5
 800cb42:	f00d fdfc 	bl	801a73e <memcpy>
 800cb46:	68a1      	ldr	r1, [r4, #8]
 800cb48:	464a      	mov	r2, r9
 800cb4a:	19e8      	adds	r0, r5, r7
 800cb4c:	f00d fdf7 	bl	801a73e <memcpy>
 800cb50:	e7a9      	b.n	800caa6 <ucdr_deserialize_int32_t+0x72>
 800cb52:	bf00      	nop

0800cb54 <ucdr_serialize_double>:
 800cb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb58:	2108      	movs	r1, #8
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	ed8d 0b00 	vstr	d0, [sp]
 800cb62:	f000 fb8d 	bl	800d280 <ucdr_buffer_alignment>
 800cb66:	4601      	mov	r1, r0
 800cb68:	4620      	mov	r0, r4
 800cb6a:	7d67      	ldrb	r7, [r4, #21]
 800cb6c:	f000 fbcc 	bl	800d308 <ucdr_advance_buffer>
 800cb70:	2108      	movs	r1, #8
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 fb24 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d14e      	bne.n	800cc1a <ucdr_serialize_double+0xc6>
 800cb7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cb80:	42ab      	cmp	r3, r5
 800cb82:	d945      	bls.n	800cc10 <ucdr_serialize_double+0xbc>
 800cb84:	1b5e      	subs	r6, r3, r5
 800cb86:	60a3      	str	r3, [r4, #8]
 800cb88:	6923      	ldr	r3, [r4, #16]
 800cb8a:	f1c6 0808 	rsb	r8, r6, #8
 800cb8e:	4433      	add	r3, r6
 800cb90:	6123      	str	r3, [r4, #16]
 800cb92:	4641      	mov	r1, r8
 800cb94:	4620      	mov	r0, r4
 800cb96:	f000 fb1f 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d074      	beq.n	800cc88 <ucdr_serialize_double+0x134>
 800cb9e:	7d23      	ldrb	r3, [r4, #20]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	f000 809b 	beq.w	800ccdc <ucdr_serialize_double+0x188>
 800cba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cbaa:	702b      	strb	r3, [r5, #0]
 800cbac:	2e00      	cmp	r6, #0
 800cbae:	d078      	beq.n	800cca2 <ucdr_serialize_double+0x14e>
 800cbb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cbb4:	706b      	strb	r3, [r5, #1]
 800cbb6:	2e01      	cmp	r6, #1
 800cbb8:	d077      	beq.n	800ccaa <ucdr_serialize_double+0x156>
 800cbba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cbbe:	70ab      	strb	r3, [r5, #2]
 800cbc0:	2e02      	cmp	r6, #2
 800cbc2:	d076      	beq.n	800ccb2 <ucdr_serialize_double+0x15e>
 800cbc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cbc8:	70eb      	strb	r3, [r5, #3]
 800cbca:	2e03      	cmp	r6, #3
 800cbcc:	d075      	beq.n	800ccba <ucdr_serialize_double+0x166>
 800cbce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cbd2:	712b      	strb	r3, [r5, #4]
 800cbd4:	2e04      	cmp	r6, #4
 800cbd6:	d074      	beq.n	800ccc2 <ucdr_serialize_double+0x16e>
 800cbd8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cbdc:	716b      	strb	r3, [r5, #5]
 800cbde:	2e05      	cmp	r6, #5
 800cbe0:	d073      	beq.n	800ccca <ucdr_serialize_double+0x176>
 800cbe2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cbe6:	71ab      	strb	r3, [r5, #6]
 800cbe8:	2e06      	cmp	r6, #6
 800cbea:	d072      	beq.n	800ccd2 <ucdr_serialize_double+0x17e>
 800cbec:	f89d 3000 	ldrb.w	r3, [sp]
 800cbf0:	71eb      	strb	r3, [r5, #7]
 800cbf2:	6923      	ldr	r3, [r4, #16]
 800cbf4:	68a2      	ldr	r2, [r4, #8]
 800cbf6:	7da0      	ldrb	r0, [r4, #22]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	1b9e      	subs	r6, r3, r6
 800cbfc:	4442      	add	r2, r8
 800cbfe:	2308      	movs	r3, #8
 800cc00:	f080 0001 	eor.w	r0, r0, #1
 800cc04:	60a2      	str	r2, [r4, #8]
 800cc06:	6126      	str	r6, [r4, #16]
 800cc08:	7563      	strb	r3, [r4, #21]
 800cc0a:	b002      	add	sp, #8
 800cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc10:	2108      	movs	r1, #8
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 fae0 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800cc18:	b350      	cbz	r0, 800cc70 <ucdr_serialize_double+0x11c>
 800cc1a:	7d23      	ldrb	r3, [r4, #20]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d02d      	beq.n	800cc7c <ucdr_serialize_double+0x128>
 800cc20:	68a3      	ldr	r3, [r4, #8]
 800cc22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cc26:	701a      	strb	r2, [r3, #0]
 800cc28:	68a3      	ldr	r3, [r4, #8]
 800cc2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc2e:	705a      	strb	r2, [r3, #1]
 800cc30:	68a3      	ldr	r3, [r4, #8]
 800cc32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cc36:	709a      	strb	r2, [r3, #2]
 800cc38:	68a3      	ldr	r3, [r4, #8]
 800cc3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cc3e:	70da      	strb	r2, [r3, #3]
 800cc40:	68a3      	ldr	r3, [r4, #8]
 800cc42:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cc46:	711a      	strb	r2, [r3, #4]
 800cc48:	68a3      	ldr	r3, [r4, #8]
 800cc4a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cc4e:	715a      	strb	r2, [r3, #5]
 800cc50:	68a3      	ldr	r3, [r4, #8]
 800cc52:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cc56:	719a      	strb	r2, [r3, #6]
 800cc58:	68a3      	ldr	r3, [r4, #8]
 800cc5a:	f89d 2000 	ldrb.w	r2, [sp]
 800cc5e:	71da      	strb	r2, [r3, #7]
 800cc60:	68a2      	ldr	r2, [r4, #8]
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	3208      	adds	r2, #8
 800cc66:	3308      	adds	r3, #8
 800cc68:	2108      	movs	r1, #8
 800cc6a:	60a2      	str	r2, [r4, #8]
 800cc6c:	6123      	str	r3, [r4, #16]
 800cc6e:	7561      	strb	r1, [r4, #21]
 800cc70:	7da0      	ldrb	r0, [r4, #22]
 800cc72:	f080 0001 	eor.w	r0, r0, #1
 800cc76:	b002      	add	sp, #8
 800cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc7c:	466b      	mov	r3, sp
 800cc7e:	cb03      	ldmia	r3!, {r0, r1}
 800cc80:	68a3      	ldr	r3, [r4, #8]
 800cc82:	6018      	str	r0, [r3, #0]
 800cc84:	6059      	str	r1, [r3, #4]
 800cc86:	e7eb      	b.n	800cc60 <ucdr_serialize_double+0x10c>
 800cc88:	68a2      	ldr	r2, [r4, #8]
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	7da0      	ldrb	r0, [r4, #22]
 800cc8e:	7567      	strb	r7, [r4, #21]
 800cc90:	1b92      	subs	r2, r2, r6
 800cc92:	1b9b      	subs	r3, r3, r6
 800cc94:	f080 0001 	eor.w	r0, r0, #1
 800cc98:	60a2      	str	r2, [r4, #8]
 800cc9a:	6123      	str	r3, [r4, #16]
 800cc9c:	b002      	add	sp, #8
 800cc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca2:	68a3      	ldr	r3, [r4, #8]
 800cca4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cca8:	701a      	strb	r2, [r3, #0]
 800ccaa:	68a3      	ldr	r3, [r4, #8]
 800ccac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ccb0:	701a      	strb	r2, [r3, #0]
 800ccb2:	68a3      	ldr	r3, [r4, #8]
 800ccb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ccb8:	701a      	strb	r2, [r3, #0]
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ccc0:	701a      	strb	r2, [r3, #0]
 800ccc2:	68a3      	ldr	r3, [r4, #8]
 800ccc4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	68a3      	ldr	r3, [r4, #8]
 800cccc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ccd0:	701a      	strb	r2, [r3, #0]
 800ccd2:	68a3      	ldr	r3, [r4, #8]
 800ccd4:	f89d 2000 	ldrb.w	r2, [sp]
 800ccd8:	701a      	strb	r2, [r3, #0]
 800ccda:	e78a      	b.n	800cbf2 <ucdr_serialize_double+0x9e>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	466d      	mov	r5, sp
 800cce0:	4629      	mov	r1, r5
 800cce2:	4632      	mov	r2, r6
 800cce4:	f00d fd2b 	bl	801a73e <memcpy>
 800cce8:	68a0      	ldr	r0, [r4, #8]
 800ccea:	4642      	mov	r2, r8
 800ccec:	19a9      	adds	r1, r5, r6
 800ccee:	f00d fd26 	bl	801a73e <memcpy>
 800ccf2:	e77e      	b.n	800cbf2 <ucdr_serialize_double+0x9e>

0800ccf4 <ucdr_serialize_endian_double>:
 800ccf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	460e      	mov	r6, r1
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	2108      	movs	r1, #8
 800ccfe:	4604      	mov	r4, r0
 800cd00:	ed8d 0b00 	vstr	d0, [sp]
 800cd04:	f000 fabc 	bl	800d280 <ucdr_buffer_alignment>
 800cd08:	4601      	mov	r1, r0
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cd10:	f000 fafa 	bl	800d308 <ucdr_advance_buffer>
 800cd14:	2108      	movs	r1, #8
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 fa52 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d14d      	bne.n	800cdbc <ucdr_serialize_endian_double+0xc8>
 800cd20:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800cd24:	42bd      	cmp	r5, r7
 800cd26:	d944      	bls.n	800cdb2 <ucdr_serialize_endian_double+0xbe>
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	60a5      	str	r5, [r4, #8]
 800cd2c:	1bed      	subs	r5, r5, r7
 800cd2e:	442b      	add	r3, r5
 800cd30:	f1c5 0908 	rsb	r9, r5, #8
 800cd34:	6123      	str	r3, [r4, #16]
 800cd36:	4649      	mov	r1, r9
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f000 fa4d 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d072      	beq.n	800ce28 <ucdr_serialize_endian_double+0x134>
 800cd42:	2e01      	cmp	r6, #1
 800cd44:	f000 809b 	beq.w	800ce7e <ucdr_serialize_endian_double+0x18a>
 800cd48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd4c:	703b      	strb	r3, [r7, #0]
 800cd4e:	2d00      	cmp	r5, #0
 800cd50:	d078      	beq.n	800ce44 <ucdr_serialize_endian_double+0x150>
 800cd52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd56:	707b      	strb	r3, [r7, #1]
 800cd58:	2d01      	cmp	r5, #1
 800cd5a:	d077      	beq.n	800ce4c <ucdr_serialize_endian_double+0x158>
 800cd5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cd60:	70bb      	strb	r3, [r7, #2]
 800cd62:	2d02      	cmp	r5, #2
 800cd64:	d076      	beq.n	800ce54 <ucdr_serialize_endian_double+0x160>
 800cd66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cd6a:	70fb      	strb	r3, [r7, #3]
 800cd6c:	2d03      	cmp	r5, #3
 800cd6e:	d075      	beq.n	800ce5c <ucdr_serialize_endian_double+0x168>
 800cd70:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cd74:	713b      	strb	r3, [r7, #4]
 800cd76:	2d04      	cmp	r5, #4
 800cd78:	d074      	beq.n	800ce64 <ucdr_serialize_endian_double+0x170>
 800cd7a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cd7e:	717b      	strb	r3, [r7, #5]
 800cd80:	2d05      	cmp	r5, #5
 800cd82:	d073      	beq.n	800ce6c <ucdr_serialize_endian_double+0x178>
 800cd84:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cd88:	71bb      	strb	r3, [r7, #6]
 800cd8a:	2d06      	cmp	r5, #6
 800cd8c:	d072      	beq.n	800ce74 <ucdr_serialize_endian_double+0x180>
 800cd8e:	f89d 3000 	ldrb.w	r3, [sp]
 800cd92:	71fb      	strb	r3, [r7, #7]
 800cd94:	6923      	ldr	r3, [r4, #16]
 800cd96:	68a2      	ldr	r2, [r4, #8]
 800cd98:	7da0      	ldrb	r0, [r4, #22]
 800cd9a:	3308      	adds	r3, #8
 800cd9c:	1b5d      	subs	r5, r3, r5
 800cd9e:	444a      	add	r2, r9
 800cda0:	2308      	movs	r3, #8
 800cda2:	f080 0001 	eor.w	r0, r0, #1
 800cda6:	60a2      	str	r2, [r4, #8]
 800cda8:	6125      	str	r5, [r4, #16]
 800cdaa:	7563      	strb	r3, [r4, #21]
 800cdac:	b003      	add	sp, #12
 800cdae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdb2:	2108      	movs	r1, #8
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 fa0f 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800cdba:	b348      	cbz	r0, 800ce10 <ucdr_serialize_endian_double+0x11c>
 800cdbc:	2e01      	cmp	r6, #1
 800cdbe:	d02d      	beq.n	800ce1c <ucdr_serialize_endian_double+0x128>
 800cdc0:	68a3      	ldr	r3, [r4, #8]
 800cdc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	68a3      	ldr	r3, [r4, #8]
 800cdca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cdce:	705a      	strb	r2, [r3, #1]
 800cdd0:	68a3      	ldr	r3, [r4, #8]
 800cdd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cdd6:	709a      	strb	r2, [r3, #2]
 800cdd8:	68a3      	ldr	r3, [r4, #8]
 800cdda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cdde:	70da      	strb	r2, [r3, #3]
 800cde0:	68a3      	ldr	r3, [r4, #8]
 800cde2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cde6:	711a      	strb	r2, [r3, #4]
 800cde8:	68a3      	ldr	r3, [r4, #8]
 800cdea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cdee:	715a      	strb	r2, [r3, #5]
 800cdf0:	68a3      	ldr	r3, [r4, #8]
 800cdf2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cdf6:	719a      	strb	r2, [r3, #6]
 800cdf8:	68a3      	ldr	r3, [r4, #8]
 800cdfa:	f89d 2000 	ldrb.w	r2, [sp]
 800cdfe:	71da      	strb	r2, [r3, #7]
 800ce00:	68a2      	ldr	r2, [r4, #8]
 800ce02:	6923      	ldr	r3, [r4, #16]
 800ce04:	3208      	adds	r2, #8
 800ce06:	3308      	adds	r3, #8
 800ce08:	2108      	movs	r1, #8
 800ce0a:	60a2      	str	r2, [r4, #8]
 800ce0c:	6123      	str	r3, [r4, #16]
 800ce0e:	7561      	strb	r1, [r4, #21]
 800ce10:	7da0      	ldrb	r0, [r4, #22]
 800ce12:	f080 0001 	eor.w	r0, r0, #1
 800ce16:	b003      	add	sp, #12
 800ce18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce1c:	466b      	mov	r3, sp
 800ce1e:	cb03      	ldmia	r3!, {r0, r1}
 800ce20:	68a3      	ldr	r3, [r4, #8]
 800ce22:	6018      	str	r0, [r3, #0]
 800ce24:	6059      	str	r1, [r3, #4]
 800ce26:	e7eb      	b.n	800ce00 <ucdr_serialize_endian_double+0x10c>
 800ce28:	68a2      	ldr	r2, [r4, #8]
 800ce2a:	6923      	ldr	r3, [r4, #16]
 800ce2c:	7da0      	ldrb	r0, [r4, #22]
 800ce2e:	f884 8015 	strb.w	r8, [r4, #21]
 800ce32:	1b52      	subs	r2, r2, r5
 800ce34:	1b5b      	subs	r3, r3, r5
 800ce36:	f080 0001 	eor.w	r0, r0, #1
 800ce3a:	60a2      	str	r2, [r4, #8]
 800ce3c:	6123      	str	r3, [r4, #16]
 800ce3e:	b003      	add	sp, #12
 800ce40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce44:	68a3      	ldr	r3, [r4, #8]
 800ce46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce4a:	701a      	strb	r2, [r3, #0]
 800ce4c:	68a3      	ldr	r3, [r4, #8]
 800ce4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce52:	701a      	strb	r2, [r3, #0]
 800ce54:	68a3      	ldr	r3, [r4, #8]
 800ce56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	68a3      	ldr	r3, [r4, #8]
 800ce5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ce62:	701a      	strb	r2, [r3, #0]
 800ce64:	68a3      	ldr	r3, [r4, #8]
 800ce66:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ce6a:	701a      	strb	r2, [r3, #0]
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ce72:	701a      	strb	r2, [r3, #0]
 800ce74:	68a3      	ldr	r3, [r4, #8]
 800ce76:	f89d 2000 	ldrb.w	r2, [sp]
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	e78a      	b.n	800cd94 <ucdr_serialize_endian_double+0xa0>
 800ce7e:	466e      	mov	r6, sp
 800ce80:	4631      	mov	r1, r6
 800ce82:	462a      	mov	r2, r5
 800ce84:	4638      	mov	r0, r7
 800ce86:	f00d fc5a 	bl	801a73e <memcpy>
 800ce8a:	68a0      	ldr	r0, [r4, #8]
 800ce8c:	464a      	mov	r2, r9
 800ce8e:	1971      	adds	r1, r6, r5
 800ce90:	f00d fc55 	bl	801a73e <memcpy>
 800ce94:	e77e      	b.n	800cd94 <ucdr_serialize_endian_double+0xa0>
 800ce96:	bf00      	nop

0800ce98 <ucdr_deserialize_double>:
 800ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce9c:	460d      	mov	r5, r1
 800ce9e:	2108      	movs	r1, #8
 800cea0:	4604      	mov	r4, r0
 800cea2:	f000 f9ed 	bl	800d280 <ucdr_buffer_alignment>
 800cea6:	4601      	mov	r1, r0
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ceae:	f000 fa2b 	bl	800d308 <ucdr_advance_buffer>
 800ceb2:	2108      	movs	r1, #8
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f000 f983 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d151      	bne.n	800cf62 <ucdr_deserialize_double+0xca>
 800cebe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cec2:	42be      	cmp	r6, r7
 800cec4:	d948      	bls.n	800cf58 <ucdr_deserialize_double+0xc0>
 800cec6:	6923      	ldr	r3, [r4, #16]
 800cec8:	60a6      	str	r6, [r4, #8]
 800ceca:	1bf6      	subs	r6, r6, r7
 800cecc:	4433      	add	r3, r6
 800cece:	f1c6 0808 	rsb	r8, r6, #8
 800ced2:	6123      	str	r3, [r4, #16]
 800ced4:	4641      	mov	r1, r8
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 f97e 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d06d      	beq.n	800cfbc <ucdr_deserialize_double+0x124>
 800cee0:	7d23      	ldrb	r3, [r4, #20]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	f000 8093 	beq.w	800d00e <ucdr_deserialize_double+0x176>
 800cee8:	79fb      	ldrb	r3, [r7, #7]
 800ceea:	702b      	strb	r3, [r5, #0]
 800ceec:	2e00      	cmp	r6, #0
 800ceee:	d072      	beq.n	800cfd6 <ucdr_deserialize_double+0x13e>
 800cef0:	79bb      	ldrb	r3, [r7, #6]
 800cef2:	706b      	strb	r3, [r5, #1]
 800cef4:	2e01      	cmp	r6, #1
 800cef6:	f105 0302 	add.w	r3, r5, #2
 800cefa:	d070      	beq.n	800cfde <ucdr_deserialize_double+0x146>
 800cefc:	797b      	ldrb	r3, [r7, #5]
 800cefe:	70ab      	strb	r3, [r5, #2]
 800cf00:	2e02      	cmp	r6, #2
 800cf02:	f105 0303 	add.w	r3, r5, #3
 800cf06:	d06e      	beq.n	800cfe6 <ucdr_deserialize_double+0x14e>
 800cf08:	793b      	ldrb	r3, [r7, #4]
 800cf0a:	70eb      	strb	r3, [r5, #3]
 800cf0c:	2e03      	cmp	r6, #3
 800cf0e:	f105 0304 	add.w	r3, r5, #4
 800cf12:	d06c      	beq.n	800cfee <ucdr_deserialize_double+0x156>
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	712b      	strb	r3, [r5, #4]
 800cf18:	2e04      	cmp	r6, #4
 800cf1a:	f105 0305 	add.w	r3, r5, #5
 800cf1e:	d06a      	beq.n	800cff6 <ucdr_deserialize_double+0x15e>
 800cf20:	78bb      	ldrb	r3, [r7, #2]
 800cf22:	716b      	strb	r3, [r5, #5]
 800cf24:	2e05      	cmp	r6, #5
 800cf26:	f105 0306 	add.w	r3, r5, #6
 800cf2a:	d068      	beq.n	800cffe <ucdr_deserialize_double+0x166>
 800cf2c:	787b      	ldrb	r3, [r7, #1]
 800cf2e:	71ab      	strb	r3, [r5, #6]
 800cf30:	2e06      	cmp	r6, #6
 800cf32:	f105 0307 	add.w	r3, r5, #7
 800cf36:	d066      	beq.n	800d006 <ucdr_deserialize_double+0x16e>
 800cf38:	783b      	ldrb	r3, [r7, #0]
 800cf3a:	71eb      	strb	r3, [r5, #7]
 800cf3c:	6923      	ldr	r3, [r4, #16]
 800cf3e:	68a2      	ldr	r2, [r4, #8]
 800cf40:	7da0      	ldrb	r0, [r4, #22]
 800cf42:	3308      	adds	r3, #8
 800cf44:	1b9e      	subs	r6, r3, r6
 800cf46:	2308      	movs	r3, #8
 800cf48:	4442      	add	r2, r8
 800cf4a:	7563      	strb	r3, [r4, #21]
 800cf4c:	60a2      	str	r2, [r4, #8]
 800cf4e:	6126      	str	r6, [r4, #16]
 800cf50:	f080 0001 	eor.w	r0, r0, #1
 800cf54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf58:	2108      	movs	r1, #8
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 f93c 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800cf60:	b310      	cbz	r0, 800cfa8 <ucdr_deserialize_double+0x110>
 800cf62:	7d23      	ldrb	r3, [r4, #20]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	68a3      	ldr	r3, [r4, #8]
 800cf68:	d023      	beq.n	800cfb2 <ucdr_deserialize_double+0x11a>
 800cf6a:	79db      	ldrb	r3, [r3, #7]
 800cf6c:	702b      	strb	r3, [r5, #0]
 800cf6e:	68a3      	ldr	r3, [r4, #8]
 800cf70:	799b      	ldrb	r3, [r3, #6]
 800cf72:	706b      	strb	r3, [r5, #1]
 800cf74:	68a3      	ldr	r3, [r4, #8]
 800cf76:	795b      	ldrb	r3, [r3, #5]
 800cf78:	70ab      	strb	r3, [r5, #2]
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	791b      	ldrb	r3, [r3, #4]
 800cf7e:	70eb      	strb	r3, [r5, #3]
 800cf80:	68a3      	ldr	r3, [r4, #8]
 800cf82:	78db      	ldrb	r3, [r3, #3]
 800cf84:	712b      	strb	r3, [r5, #4]
 800cf86:	68a3      	ldr	r3, [r4, #8]
 800cf88:	789b      	ldrb	r3, [r3, #2]
 800cf8a:	716b      	strb	r3, [r5, #5]
 800cf8c:	68a3      	ldr	r3, [r4, #8]
 800cf8e:	785b      	ldrb	r3, [r3, #1]
 800cf90:	71ab      	strb	r3, [r5, #6]
 800cf92:	68a3      	ldr	r3, [r4, #8]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	71eb      	strb	r3, [r5, #7]
 800cf98:	68a2      	ldr	r2, [r4, #8]
 800cf9a:	6923      	ldr	r3, [r4, #16]
 800cf9c:	3208      	adds	r2, #8
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	2108      	movs	r1, #8
 800cfa2:	60a2      	str	r2, [r4, #8]
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	7561      	strb	r1, [r4, #21]
 800cfa8:	7da0      	ldrb	r0, [r4, #22]
 800cfaa:	f080 0001 	eor.w	r0, r0, #1
 800cfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	606b      	str	r3, [r5, #4]
 800cfb8:	602a      	str	r2, [r5, #0]
 800cfba:	e7ed      	b.n	800cf98 <ucdr_deserialize_double+0x100>
 800cfbc:	68a2      	ldr	r2, [r4, #8]
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	7da0      	ldrb	r0, [r4, #22]
 800cfc2:	f884 9015 	strb.w	r9, [r4, #21]
 800cfc6:	1b92      	subs	r2, r2, r6
 800cfc8:	1b9b      	subs	r3, r3, r6
 800cfca:	60a2      	str	r2, [r4, #8]
 800cfcc:	6123      	str	r3, [r4, #16]
 800cfce:	f080 0001 	eor.w	r0, r0, #1
 800cfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfd6:	68a3      	ldr	r3, [r4, #8]
 800cfd8:	799b      	ldrb	r3, [r3, #6]
 800cfda:	706b      	strb	r3, [r5, #1]
 800cfdc:	1cab      	adds	r3, r5, #2
 800cfde:	68a2      	ldr	r2, [r4, #8]
 800cfe0:	7952      	ldrb	r2, [r2, #5]
 800cfe2:	f803 2b01 	strb.w	r2, [r3], #1
 800cfe6:	68a2      	ldr	r2, [r4, #8]
 800cfe8:	7912      	ldrb	r2, [r2, #4]
 800cfea:	f803 2b01 	strb.w	r2, [r3], #1
 800cfee:	68a2      	ldr	r2, [r4, #8]
 800cff0:	78d2      	ldrb	r2, [r2, #3]
 800cff2:	f803 2b01 	strb.w	r2, [r3], #1
 800cff6:	68a2      	ldr	r2, [r4, #8]
 800cff8:	7892      	ldrb	r2, [r2, #2]
 800cffa:	f803 2b01 	strb.w	r2, [r3], #1
 800cffe:	68a2      	ldr	r2, [r4, #8]
 800d000:	7852      	ldrb	r2, [r2, #1]
 800d002:	f803 2b01 	strb.w	r2, [r3], #1
 800d006:	68a2      	ldr	r2, [r4, #8]
 800d008:	7812      	ldrb	r2, [r2, #0]
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	e796      	b.n	800cf3c <ucdr_deserialize_double+0xa4>
 800d00e:	4639      	mov	r1, r7
 800d010:	4632      	mov	r2, r6
 800d012:	4628      	mov	r0, r5
 800d014:	f00d fb93 	bl	801a73e <memcpy>
 800d018:	68a1      	ldr	r1, [r4, #8]
 800d01a:	4642      	mov	r2, r8
 800d01c:	19a8      	adds	r0, r5, r6
 800d01e:	f00d fb8e 	bl	801a73e <memcpy>
 800d022:	e78b      	b.n	800cf3c <ucdr_deserialize_double+0xa4>

0800d024 <ucdr_deserialize_endian_double>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	460f      	mov	r7, r1
 800d02a:	2108      	movs	r1, #8
 800d02c:	4604      	mov	r4, r0
 800d02e:	4615      	mov	r5, r2
 800d030:	f000 f926 	bl	800d280 <ucdr_buffer_alignment>
 800d034:	4601      	mov	r1, r0
 800d036:	4620      	mov	r0, r4
 800d038:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d03c:	f000 f964 	bl	800d308 <ucdr_advance_buffer>
 800d040:	2108      	movs	r1, #8
 800d042:	4620      	mov	r0, r4
 800d044:	f000 f8bc 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d159      	bne.n	800d100 <ucdr_deserialize_endian_double+0xdc>
 800d04c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800d050:	4546      	cmp	r6, r8
 800d052:	d950      	bls.n	800d0f6 <ucdr_deserialize_endian_double+0xd2>
 800d054:	6923      	ldr	r3, [r4, #16]
 800d056:	60a6      	str	r6, [r4, #8]
 800d058:	eba6 0608 	sub.w	r6, r6, r8
 800d05c:	4433      	add	r3, r6
 800d05e:	f1c6 0a08 	rsb	sl, r6, #8
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	4651      	mov	r1, sl
 800d066:	4620      	mov	r0, r4
 800d068:	f000 f8b6 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d073      	beq.n	800d158 <ucdr_deserialize_endian_double+0x134>
 800d070:	2f01      	cmp	r7, #1
 800d072:	f000 809a 	beq.w	800d1aa <ucdr_deserialize_endian_double+0x186>
 800d076:	f898 3007 	ldrb.w	r3, [r8, #7]
 800d07a:	702b      	strb	r3, [r5, #0]
 800d07c:	2e00      	cmp	r6, #0
 800d07e:	d078      	beq.n	800d172 <ucdr_deserialize_endian_double+0x14e>
 800d080:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d084:	706b      	strb	r3, [r5, #1]
 800d086:	2e01      	cmp	r6, #1
 800d088:	f105 0302 	add.w	r3, r5, #2
 800d08c:	d075      	beq.n	800d17a <ucdr_deserialize_endian_double+0x156>
 800d08e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800d092:	70ab      	strb	r3, [r5, #2]
 800d094:	2e02      	cmp	r6, #2
 800d096:	f105 0303 	add.w	r3, r5, #3
 800d09a:	d072      	beq.n	800d182 <ucdr_deserialize_endian_double+0x15e>
 800d09c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d0a0:	70eb      	strb	r3, [r5, #3]
 800d0a2:	2e03      	cmp	r6, #3
 800d0a4:	f105 0304 	add.w	r3, r5, #4
 800d0a8:	d06f      	beq.n	800d18a <ucdr_deserialize_endian_double+0x166>
 800d0aa:	f898 3003 	ldrb.w	r3, [r8, #3]
 800d0ae:	712b      	strb	r3, [r5, #4]
 800d0b0:	2e04      	cmp	r6, #4
 800d0b2:	f105 0305 	add.w	r3, r5, #5
 800d0b6:	d06c      	beq.n	800d192 <ucdr_deserialize_endian_double+0x16e>
 800d0b8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d0bc:	716b      	strb	r3, [r5, #5]
 800d0be:	2e05      	cmp	r6, #5
 800d0c0:	f105 0306 	add.w	r3, r5, #6
 800d0c4:	d069      	beq.n	800d19a <ucdr_deserialize_endian_double+0x176>
 800d0c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d0ca:	71ab      	strb	r3, [r5, #6]
 800d0cc:	2e06      	cmp	r6, #6
 800d0ce:	f105 0307 	add.w	r3, r5, #7
 800d0d2:	d066      	beq.n	800d1a2 <ucdr_deserialize_endian_double+0x17e>
 800d0d4:	f898 3000 	ldrb.w	r3, [r8]
 800d0d8:	71eb      	strb	r3, [r5, #7]
 800d0da:	6923      	ldr	r3, [r4, #16]
 800d0dc:	68a2      	ldr	r2, [r4, #8]
 800d0de:	7da0      	ldrb	r0, [r4, #22]
 800d0e0:	3308      	adds	r3, #8
 800d0e2:	1b9e      	subs	r6, r3, r6
 800d0e4:	2308      	movs	r3, #8
 800d0e6:	4452      	add	r2, sl
 800d0e8:	7563      	strb	r3, [r4, #21]
 800d0ea:	60a2      	str	r2, [r4, #8]
 800d0ec:	6126      	str	r6, [r4, #16]
 800d0ee:	f080 0001 	eor.w	r0, r0, #1
 800d0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f6:	2108      	movs	r1, #8
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 f86d 	bl	800d1d8 <ucdr_check_final_buffer_behavior>
 800d0fe:	b308      	cbz	r0, 800d144 <ucdr_deserialize_endian_double+0x120>
 800d100:	2f01      	cmp	r7, #1
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	d023      	beq.n	800d14e <ucdr_deserialize_endian_double+0x12a>
 800d106:	79db      	ldrb	r3, [r3, #7]
 800d108:	702b      	strb	r3, [r5, #0]
 800d10a:	68a3      	ldr	r3, [r4, #8]
 800d10c:	799b      	ldrb	r3, [r3, #6]
 800d10e:	706b      	strb	r3, [r5, #1]
 800d110:	68a3      	ldr	r3, [r4, #8]
 800d112:	795b      	ldrb	r3, [r3, #5]
 800d114:	70ab      	strb	r3, [r5, #2]
 800d116:	68a3      	ldr	r3, [r4, #8]
 800d118:	791b      	ldrb	r3, [r3, #4]
 800d11a:	70eb      	strb	r3, [r5, #3]
 800d11c:	68a3      	ldr	r3, [r4, #8]
 800d11e:	78db      	ldrb	r3, [r3, #3]
 800d120:	712b      	strb	r3, [r5, #4]
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	789b      	ldrb	r3, [r3, #2]
 800d126:	716b      	strb	r3, [r5, #5]
 800d128:	68a3      	ldr	r3, [r4, #8]
 800d12a:	785b      	ldrb	r3, [r3, #1]
 800d12c:	71ab      	strb	r3, [r5, #6]
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	71eb      	strb	r3, [r5, #7]
 800d134:	68a2      	ldr	r2, [r4, #8]
 800d136:	6923      	ldr	r3, [r4, #16]
 800d138:	3208      	adds	r2, #8
 800d13a:	3308      	adds	r3, #8
 800d13c:	2108      	movs	r1, #8
 800d13e:	60a2      	str	r2, [r4, #8]
 800d140:	6123      	str	r3, [r4, #16]
 800d142:	7561      	strb	r1, [r4, #21]
 800d144:	7da0      	ldrb	r0, [r4, #22]
 800d146:	f080 0001 	eor.w	r0, r0, #1
 800d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	606b      	str	r3, [r5, #4]
 800d154:	602a      	str	r2, [r5, #0]
 800d156:	e7ed      	b.n	800d134 <ucdr_deserialize_endian_double+0x110>
 800d158:	68a2      	ldr	r2, [r4, #8]
 800d15a:	6923      	ldr	r3, [r4, #16]
 800d15c:	7da0      	ldrb	r0, [r4, #22]
 800d15e:	f884 9015 	strb.w	r9, [r4, #21]
 800d162:	1b92      	subs	r2, r2, r6
 800d164:	1b9b      	subs	r3, r3, r6
 800d166:	60a2      	str	r2, [r4, #8]
 800d168:	6123      	str	r3, [r4, #16]
 800d16a:	f080 0001 	eor.w	r0, r0, #1
 800d16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	799b      	ldrb	r3, [r3, #6]
 800d176:	706b      	strb	r3, [r5, #1]
 800d178:	1cab      	adds	r3, r5, #2
 800d17a:	68a2      	ldr	r2, [r4, #8]
 800d17c:	7952      	ldrb	r2, [r2, #5]
 800d17e:	f803 2b01 	strb.w	r2, [r3], #1
 800d182:	68a2      	ldr	r2, [r4, #8]
 800d184:	7912      	ldrb	r2, [r2, #4]
 800d186:	f803 2b01 	strb.w	r2, [r3], #1
 800d18a:	68a2      	ldr	r2, [r4, #8]
 800d18c:	78d2      	ldrb	r2, [r2, #3]
 800d18e:	f803 2b01 	strb.w	r2, [r3], #1
 800d192:	68a2      	ldr	r2, [r4, #8]
 800d194:	7892      	ldrb	r2, [r2, #2]
 800d196:	f803 2b01 	strb.w	r2, [r3], #1
 800d19a:	68a2      	ldr	r2, [r4, #8]
 800d19c:	7852      	ldrb	r2, [r2, #1]
 800d19e:	f803 2b01 	strb.w	r2, [r3], #1
 800d1a2:	68a2      	ldr	r2, [r4, #8]
 800d1a4:	7812      	ldrb	r2, [r2, #0]
 800d1a6:	701a      	strb	r2, [r3, #0]
 800d1a8:	e797      	b.n	800d0da <ucdr_deserialize_endian_double+0xb6>
 800d1aa:	4641      	mov	r1, r8
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f00d fac5 	bl	801a73e <memcpy>
 800d1b4:	68a1      	ldr	r1, [r4, #8]
 800d1b6:	4652      	mov	r2, sl
 800d1b8:	19a8      	adds	r0, r5, r6
 800d1ba:	f00d fac0 	bl	801a73e <memcpy>
 800d1be:	e78c      	b.n	800d0da <ucdr_deserialize_endian_double+0xb6>

0800d1c0 <ucdr_check_buffer_available_for>:
 800d1c0:	7d83      	ldrb	r3, [r0, #22]
 800d1c2:	b93b      	cbnz	r3, 800d1d4 <ucdr_check_buffer_available_for+0x14>
 800d1c4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d1c8:	4419      	add	r1, r3
 800d1ca:	4288      	cmp	r0, r1
 800d1cc:	bf34      	ite	cc
 800d1ce:	2000      	movcc	r0, #0
 800d1d0:	2001      	movcs	r0, #1
 800d1d2:	4770      	bx	lr
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	4770      	bx	lr

0800d1d8 <ucdr_check_final_buffer_behavior>:
 800d1d8:	7d83      	ldrb	r3, [r0, #22]
 800d1da:	b943      	cbnz	r3, 800d1ee <ucdr_check_final_buffer_behavior+0x16>
 800d1dc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d1e0:	4291      	cmp	r1, r2
 800d1e2:	b510      	push	{r4, lr}
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	d205      	bcs.n	800d1f4 <ucdr_check_final_buffer_behavior+0x1c>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	bd10      	pop	{r4, pc}
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	4770      	bx	lr
 800d1f4:	6982      	ldr	r2, [r0, #24]
 800d1f6:	b13a      	cbz	r2, 800d208 <ucdr_check_final_buffer_behavior+0x30>
 800d1f8:	69c1      	ldr	r1, [r0, #28]
 800d1fa:	4790      	blx	r2
 800d1fc:	f080 0301 	eor.w	r3, r0, #1
 800d200:	b2db      	uxtb	r3, r3
 800d202:	75a0      	strb	r0, [r4, #22]
 800d204:	4618      	mov	r0, r3
 800d206:	bd10      	pop	{r4, pc}
 800d208:	2001      	movs	r0, #1
 800d20a:	75a0      	strb	r0, [r4, #22]
 800d20c:	e7fa      	b.n	800d204 <ucdr_check_final_buffer_behavior+0x2c>
 800d20e:	bf00      	nop

0800d210 <ucdr_set_on_full_buffer_callback>:
 800d210:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop

0800d218 <ucdr_init_buffer_origin_offset_endian>:
 800d218:	b410      	push	{r4}
 800d21a:	9c01      	ldr	r4, [sp, #4]
 800d21c:	6001      	str	r1, [r0, #0]
 800d21e:	440a      	add	r2, r1
 800d220:	6042      	str	r2, [r0, #4]
 800d222:	190a      	adds	r2, r1, r4
 800d224:	441c      	add	r4, r3
 800d226:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d22a:	6082      	str	r2, [r0, #8]
 800d22c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d230:	7503      	strb	r3, [r0, #20]
 800d232:	2200      	movs	r2, #0
 800d234:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d23c:	7542      	strb	r2, [r0, #21]
 800d23e:	7582      	strb	r2, [r0, #22]
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop

0800d244 <ucdr_init_buffer_origin_offset>:
 800d244:	b510      	push	{r4, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	9c04      	ldr	r4, [sp, #16]
 800d24a:	9400      	str	r4, [sp, #0]
 800d24c:	2401      	movs	r4, #1
 800d24e:	9401      	str	r4, [sp, #4]
 800d250:	f7ff ffe2 	bl	800d218 <ucdr_init_buffer_origin_offset_endian>
 800d254:	b002      	add	sp, #8
 800d256:	bd10      	pop	{r4, pc}

0800d258 <ucdr_init_buffer_origin>:
 800d258:	b510      	push	{r4, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	2400      	movs	r4, #0
 800d25e:	9400      	str	r4, [sp, #0]
 800d260:	f7ff fff0 	bl	800d244 <ucdr_init_buffer_origin_offset>
 800d264:	b002      	add	sp, #8
 800d266:	bd10      	pop	{r4, pc}

0800d268 <ucdr_init_buffer>:
 800d268:	2300      	movs	r3, #0
 800d26a:	f7ff bff5 	b.w	800d258 <ucdr_init_buffer_origin>
 800d26e:	bf00      	nop

0800d270 <ucdr_alignment>:
 800d270:	fbb0 f3f1 	udiv	r3, r0, r1
 800d274:	fb03 0011 	mls	r0, r3, r1, r0
 800d278:	1a08      	subs	r0, r1, r0
 800d27a:	3901      	subs	r1, #1
 800d27c:	4008      	ands	r0, r1
 800d27e:	4770      	bx	lr

0800d280 <ucdr_buffer_alignment>:
 800d280:	7d43      	ldrb	r3, [r0, #21]
 800d282:	428b      	cmp	r3, r1
 800d284:	d208      	bcs.n	800d298 <ucdr_buffer_alignment+0x18>
 800d286:	6900      	ldr	r0, [r0, #16]
 800d288:	fbb0 f3f1 	udiv	r3, r0, r1
 800d28c:	fb01 0013 	mls	r0, r1, r3, r0
 800d290:	1a08      	subs	r0, r1, r0
 800d292:	3901      	subs	r1, #1
 800d294:	4008      	ands	r0, r1
 800d296:	4770      	bx	lr
 800d298:	2000      	movs	r0, #0
 800d29a:	4770      	bx	lr

0800d29c <ucdr_align_to>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4604      	mov	r4, r0
 800d2a0:	460d      	mov	r5, r1
 800d2a2:	f7ff ffed 	bl	800d280 <ucdr_buffer_alignment>
 800d2a6:	68a3      	ldr	r3, [r4, #8]
 800d2a8:	6921      	ldr	r1, [r4, #16]
 800d2aa:	7565      	strb	r5, [r4, #21]
 800d2ac:	181a      	adds	r2, r3, r0
 800d2ae:	6863      	ldr	r3, [r4, #4]
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	4408      	add	r0, r1
 800d2b4:	bf28      	it	cs
 800d2b6:	4613      	movcs	r3, r2
 800d2b8:	6120      	str	r0, [r4, #16]
 800d2ba:	60a3      	str	r3, [r4, #8]
 800d2bc:	bd38      	pop	{r3, r4, r5, pc}
 800d2be:	bf00      	nop

0800d2c0 <ucdr_buffer_length>:
 800d2c0:	6882      	ldr	r2, [r0, #8]
 800d2c2:	6800      	ldr	r0, [r0, #0]
 800d2c4:	1a10      	subs	r0, r2, r0
 800d2c6:	4770      	bx	lr

0800d2c8 <ucdr_buffer_remaining>:
 800d2c8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d2cc:	1a10      	subs	r0, r2, r0
 800d2ce:	4770      	bx	lr

0800d2d0 <ucdr_check_final_buffer_behavior_array>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	7d83      	ldrb	r3, [r0, #22]
 800d2d4:	b963      	cbnz	r3, 800d2f0 <ucdr_check_final_buffer_behavior_array+0x20>
 800d2d6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	4604      	mov	r4, r0
 800d2de:	460d      	mov	r5, r1
 800d2e0:	d308      	bcc.n	800d2f4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d2e2:	b139      	cbz	r1, 800d2f4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d2e4:	6983      	ldr	r3, [r0, #24]
 800d2e6:	b163      	cbz	r3, 800d302 <ucdr_check_final_buffer_behavior_array+0x32>
 800d2e8:	69c1      	ldr	r1, [r0, #28]
 800d2ea:	4798      	blx	r3
 800d2ec:	75a0      	strb	r0, [r4, #22]
 800d2ee:	b108      	cbz	r0, 800d2f4 <ucdr_check_final_buffer_behavior_array+0x24>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7ff ffe7 	bl	800d2c8 <ucdr_buffer_remaining>
 800d2fa:	42a8      	cmp	r0, r5
 800d2fc:	bf28      	it	cs
 800d2fe:	4628      	movcs	r0, r5
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	2301      	movs	r3, #1
 800d304:	7583      	strb	r3, [r0, #22]
 800d306:	e7f3      	b.n	800d2f0 <ucdr_check_final_buffer_behavior_array+0x20>

0800d308 <ucdr_advance_buffer>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4604      	mov	r4, r0
 800d30c:	460d      	mov	r5, r1
 800d30e:	f7ff ff57 	bl	800d1c0 <ucdr_check_buffer_available_for>
 800d312:	b178      	cbz	r0, 800d334 <ucdr_advance_buffer+0x2c>
 800d314:	6923      	ldr	r3, [r4, #16]
 800d316:	68a2      	ldr	r2, [r4, #8]
 800d318:	442b      	add	r3, r5
 800d31a:	6123      	str	r3, [r4, #16]
 800d31c:	2301      	movs	r3, #1
 800d31e:	442a      	add	r2, r5
 800d320:	7563      	strb	r3, [r4, #21]
 800d322:	60a2      	str	r2, [r4, #8]
 800d324:	bd38      	pop	{r3, r4, r5, pc}
 800d326:	68a2      	ldr	r2, [r4, #8]
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	4402      	add	r2, r0
 800d32c:	4403      	add	r3, r0
 800d32e:	1a2d      	subs	r5, r5, r0
 800d330:	60a2      	str	r2, [r4, #8]
 800d332:	6123      	str	r3, [r4, #16]
 800d334:	4629      	mov	r1, r5
 800d336:	2201      	movs	r2, #1
 800d338:	4620      	mov	r0, r4
 800d33a:	f7ff ffc9 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d1f1      	bne.n	800d326 <ucdr_advance_buffer+0x1e>
 800d342:	2301      	movs	r3, #1
 800d344:	7563      	strb	r3, [r4, #21]
 800d346:	bd38      	pop	{r3, r4, r5, pc}

0800d348 <rcl_get_zero_initialized_init_options>:
 800d348:	2000      	movs	r0, #0
 800d34a:	4770      	bx	lr

0800d34c <rcl_init_options_init>:
 800d34c:	b084      	sub	sp, #16
 800d34e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d350:	b097      	sub	sp, #92	@ 0x5c
 800d352:	ae1d      	add	r6, sp, #116	@ 0x74
 800d354:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800d358:	2800      	cmp	r0, #0
 800d35a:	d058      	beq.n	800d40e <rcl_init_options_init+0xc2>
 800d35c:	6803      	ldr	r3, [r0, #0]
 800d35e:	4605      	mov	r5, r0
 800d360:	b133      	cbz	r3, 800d370 <rcl_init_options_init+0x24>
 800d362:	2464      	movs	r4, #100	@ 0x64
 800d364:	4620      	mov	r0, r4
 800d366:	b017      	add	sp, #92	@ 0x5c
 800d368:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d36c:	b004      	add	sp, #16
 800d36e:	4770      	bx	lr
 800d370:	4630      	mov	r0, r6
 800d372:	f001 f99b 	bl	800e6ac <rcutils_allocator_is_valid>
 800d376:	2800      	cmp	r0, #0
 800d378:	d049      	beq.n	800d40e <rcl_init_options_init+0xc2>
 800d37a:	46b4      	mov	ip, r6
 800d37c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d380:	ac11      	add	r4, sp, #68	@ 0x44
 800d382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d384:	f8dc 3000 	ldr.w	r3, [ip]
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800d38c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d38e:	2050      	movs	r0, #80	@ 0x50
 800d390:	4798      	blx	r3
 800d392:	4604      	mov	r4, r0
 800d394:	6028      	str	r0, [r5, #0]
 800d396:	2800      	cmp	r0, #0
 800d398:	d03b      	beq.n	800d412 <rcl_init_options_init+0xc6>
 800d39a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800d39e:	4686      	mov	lr, r0
 800d3a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d3a8:	f8dc 3000 	ldr.w	r3, [ip]
 800d3ac:	f8ce 3000 	str.w	r3, [lr]
 800d3b0:	a802      	add	r0, sp, #8
 800d3b2:	f001 fa0d 	bl	800e7d0 <rmw_get_zero_initialized_init_options>
 800d3b6:	f10d 0e08 	add.w	lr, sp, #8
 800d3ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3be:	f104 0c18 	add.w	ip, r4, #24
 800d3c2:	682f      	ldr	r7, [r5, #0]
 800d3c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d3dc:	ac20      	add	r4, sp, #128	@ 0x80
 800d3de:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d3e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d3e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d3ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d3ee:	f107 0018 	add.w	r0, r7, #24
 800d3f2:	f001 fa1b 	bl	800e82c <rmw_init_options_init>
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d0b3      	beq.n	800d364 <rcl_init_options_init+0x18>
 800d3fc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800d3fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d400:	6828      	ldr	r0, [r5, #0]
 800d402:	4798      	blx	r3
 800d404:	4620      	mov	r0, r4
 800d406:	f007 f971 	bl	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 800d40a:	4604      	mov	r4, r0
 800d40c:	e7aa      	b.n	800d364 <rcl_init_options_init+0x18>
 800d40e:	240b      	movs	r4, #11
 800d410:	e7a8      	b.n	800d364 <rcl_init_options_init+0x18>
 800d412:	240a      	movs	r4, #10
 800d414:	e7a6      	b.n	800d364 <rcl_init_options_init+0x18>
 800d416:	bf00      	nop

0800d418 <rcl_init_options_fini>:
 800d418:	b530      	push	{r4, r5, lr}
 800d41a:	b087      	sub	sp, #28
 800d41c:	b1f0      	cbz	r0, 800d45c <rcl_init_options_fini+0x44>
 800d41e:	6803      	ldr	r3, [r0, #0]
 800d420:	4604      	mov	r4, r0
 800d422:	b1db      	cbz	r3, 800d45c <rcl_init_options_fini+0x44>
 800d424:	469c      	mov	ip, r3
 800d426:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d42a:	f10d 0e04 	add.w	lr, sp, #4
 800d42e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d432:	f8dc 3000 	ldr.w	r3, [ip]
 800d436:	f8ce 3000 	str.w	r3, [lr]
 800d43a:	a801      	add	r0, sp, #4
 800d43c:	f001 f936 	bl	800e6ac <rcutils_allocator_is_valid>
 800d440:	b160      	cbz	r0, 800d45c <rcl_init_options_fini+0x44>
 800d442:	6820      	ldr	r0, [r4, #0]
 800d444:	3018      	adds	r0, #24
 800d446:	f001 faa1 	bl	800e98c <rmw_init_options_fini>
 800d44a:	4605      	mov	r5, r0
 800d44c:	b950      	cbnz	r0, 800d464 <rcl_init_options_fini+0x4c>
 800d44e:	6820      	ldr	r0, [r4, #0]
 800d450:	9b02      	ldr	r3, [sp, #8]
 800d452:	9905      	ldr	r1, [sp, #20]
 800d454:	4798      	blx	r3
 800d456:	4628      	mov	r0, r5
 800d458:	b007      	add	sp, #28
 800d45a:	bd30      	pop	{r4, r5, pc}
 800d45c:	250b      	movs	r5, #11
 800d45e:	4628      	mov	r0, r5
 800d460:	b007      	add	sp, #28
 800d462:	bd30      	pop	{r4, r5, pc}
 800d464:	f007 f942 	bl	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 800d468:	4605      	mov	r5, r0
 800d46a:	e7f8      	b.n	800d45e <rcl_init_options_fini+0x46>

0800d46c <rcl_init_options_copy>:
 800d46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d470:	b094      	sub	sp, #80	@ 0x50
 800d472:	2800      	cmp	r0, #0
 800d474:	d058      	beq.n	800d528 <rcl_init_options_copy+0xbc>
 800d476:	4604      	mov	r4, r0
 800d478:	6800      	ldr	r0, [r0, #0]
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d054      	beq.n	800d528 <rcl_init_options_copy+0xbc>
 800d47e:	460e      	mov	r6, r1
 800d480:	f001 f914 	bl	800e6ac <rcutils_allocator_is_valid>
 800d484:	2800      	cmp	r0, #0
 800d486:	d04f      	beq.n	800d528 <rcl_init_options_copy+0xbc>
 800d488:	2e00      	cmp	r6, #0
 800d48a:	d04d      	beq.n	800d528 <rcl_init_options_copy+0xbc>
 800d48c:	6833      	ldr	r3, [r6, #0]
 800d48e:	b123      	cbz	r3, 800d49a <rcl_init_options_copy+0x2e>
 800d490:	2464      	movs	r4, #100	@ 0x64
 800d492:	4620      	mov	r0, r4
 800d494:	b014      	add	sp, #80	@ 0x50
 800d496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49a:	6827      	ldr	r7, [r4, #0]
 800d49c:	46bc      	mov	ip, r7
 800d49e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4a2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800d4a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d4a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d4aa:	f8d7 8000 	ldr.w	r8, [r7]
 800d4ae:	602b      	str	r3, [r5, #0]
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	2050      	movs	r0, #80	@ 0x50
 800d4b4:	47c0      	blx	r8
 800d4b6:	4605      	mov	r5, r0
 800d4b8:	6030      	str	r0, [r6, #0]
 800d4ba:	b3d0      	cbz	r0, 800d532 <rcl_init_options_copy+0xc6>
 800d4bc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800d4c0:	4686      	mov	lr, r0
 800d4c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4ca:	f8dc 3000 	ldr.w	r3, [ip]
 800d4ce:	f8ce 3000 	str.w	r3, [lr]
 800d4d2:	4668      	mov	r0, sp
 800d4d4:	f001 f97c 	bl	800e7d0 <rmw_get_zero_initialized_init_options>
 800d4d8:	46ee      	mov	lr, sp
 800d4da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d4de:	f105 0c18 	add.w	ip, r5, #24
 800d4e2:	6824      	ldr	r4, [r4, #0]
 800d4e4:	6835      	ldr	r5, [r6, #0]
 800d4e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d4ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d4f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4fa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d4fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d502:	f104 0018 	add.w	r0, r4, #24
 800d506:	f105 0118 	add.w	r1, r5, #24
 800d50a:	f001 f9f7 	bl	800e8fc <rmw_init_options_copy>
 800d50e:	4604      	mov	r4, r0
 800d510:	2800      	cmp	r0, #0
 800d512:	d0be      	beq.n	800d492 <rcl_init_options_copy+0x26>
 800d514:	f001 f8d8 	bl	800e6c8 <rcutils_get_error_string>
 800d518:	f001 f8ee 	bl	800e6f8 <rcutils_reset_error>
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7ff ff7b 	bl	800d418 <rcl_init_options_fini>
 800d522:	b140      	cbz	r0, 800d536 <rcl_init_options_copy+0xca>
 800d524:	4604      	mov	r4, r0
 800d526:	e7b4      	b.n	800d492 <rcl_init_options_copy+0x26>
 800d528:	240b      	movs	r4, #11
 800d52a:	4620      	mov	r0, r4
 800d52c:	b014      	add	sp, #80	@ 0x50
 800d52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d532:	240a      	movs	r4, #10
 800d534:	e7ad      	b.n	800d492 <rcl_init_options_copy+0x26>
 800d536:	4620      	mov	r0, r4
 800d538:	b014      	add	sp, #80	@ 0x50
 800d53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d53e:	f007 b8d5 	b.w	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 800d542:	bf00      	nop

0800d544 <rcl_init_options_set_domain_id>:
 800d544:	b120      	cbz	r0, 800d550 <rcl_init_options_set_domain_id+0xc>
 800d546:	6803      	ldr	r3, [r0, #0]
 800d548:	b113      	cbz	r3, 800d550 <rcl_init_options_set_domain_id+0xc>
 800d54a:	6259      	str	r1, [r3, #36]	@ 0x24
 800d54c:	2000      	movs	r0, #0
 800d54e:	4770      	bx	lr
 800d550:	200b      	movs	r0, #11
 800d552:	4770      	bx	lr

0800d554 <rcl_get_zero_initialized_publisher>:
 800d554:	4b01      	ldr	r3, [pc, #4]	@ (800d55c <rcl_get_zero_initialized_publisher+0x8>)
 800d556:	6818      	ldr	r0, [r3, #0]
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	0801cf0c 	.word	0x0801cf0c

0800d560 <rcl_publisher_init>:
 800d560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	b088      	sub	sp, #32
 800d566:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d568:	2d00      	cmp	r5, #0
 800d56a:	d069      	beq.n	800d640 <rcl_publisher_init+0xe0>
 800d56c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800d570:	4604      	mov	r4, r0
 800d572:	4648      	mov	r0, r9
 800d574:	460e      	mov	r6, r1
 800d576:	4690      	mov	r8, r2
 800d578:	461f      	mov	r7, r3
 800d57a:	f001 f897 	bl	800e6ac <rcutils_allocator_is_valid>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d05e      	beq.n	800d640 <rcl_publisher_init+0xe0>
 800d582:	2c00      	cmp	r4, #0
 800d584:	d05c      	beq.n	800d640 <rcl_publisher_init+0xe0>
 800d586:	f8d4 a000 	ldr.w	sl, [r4]
 800d58a:	f1ba 0f00 	cmp.w	sl, #0
 800d58e:	d004      	beq.n	800d59a <rcl_publisher_init+0x3a>
 800d590:	2764      	movs	r7, #100	@ 0x64
 800d592:	4638      	mov	r0, r7
 800d594:	b008      	add	sp, #32
 800d596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59a:	4630      	mov	r0, r6
 800d59c:	f007 fba0 	bl	8014ce0 <rcl_node_is_valid>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d052      	beq.n	800d64a <rcl_publisher_init+0xea>
 800d5a4:	f1b8 0f00 	cmp.w	r8, #0
 800d5a8:	d04a      	beq.n	800d640 <rcl_publisher_init+0xe0>
 800d5aa:	2f00      	cmp	r7, #0
 800d5ac:	d048      	beq.n	800d640 <rcl_publisher_init+0xe0>
 800d5ae:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800d5b2:	aa07      	add	r2, sp, #28
 800d5b4:	9205      	str	r2, [sp, #20]
 800d5b6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800d5ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d5be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d5c2:	f8cd a01c 	str.w	sl, [sp, #28]
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f007 fbdb 	bl	8014d88 <rcl_node_resolve_name>
 800d5d2:	4607      	mov	r7, r0
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d14f      	bne.n	800d678 <rcl_publisher_init+0x118>
 800d5d8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800d5da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d5dc:	20c8      	movs	r0, #200	@ 0xc8
 800d5de:	4798      	blx	r3
 800d5e0:	6020      	str	r0, [r4, #0]
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d04e      	beq.n	800d684 <rcl_publisher_init+0x124>
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f007 fb9c 	bl	8014d24 <rcl_node_get_rmw_handle>
 800d5ec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	9a07      	ldr	r2, [sp, #28]
 800d5f4:	6827      	ldr	r7, [r4, #0]
 800d5f6:	462b      	mov	r3, r5
 800d5f8:	4641      	mov	r1, r8
 800d5fa:	f001 fcef 	bl	800efdc <rmw_create_publisher>
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800d604:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d608:	b370      	cbz	r0, 800d668 <rcl_publisher_init+0x108>
 800d60a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800d60e:	f001 fdc3 	bl	800f198 <rmw_publisher_get_actual_qos>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	4607      	mov	r7, r0
 800d616:	b9d0      	cbnz	r0, 800d64e <rcl_publisher_init+0xee>
 800d618:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800d61c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800d620:	4629      	mov	r1, r5
 800d622:	2270      	movs	r2, #112	@ 0x70
 800d624:	4618      	mov	r0, r3
 800d626:	f00d f88a 	bl	801a73e <memcpy>
 800d62a:	6832      	ldr	r2, [r6, #0]
 800d62c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800d630:	9807      	ldr	r0, [sp, #28]
 800d632:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d634:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d636:	4798      	blx	r3
 800d638:	4638      	mov	r0, r7
 800d63a:	b008      	add	sp, #32
 800d63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d640:	270b      	movs	r7, #11
 800d642:	4638      	mov	r0, r7
 800d644:	b008      	add	sp, #32
 800d646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64a:	27c8      	movs	r7, #200	@ 0xc8
 800d64c:	e7a1      	b.n	800d592 <rcl_publisher_init+0x32>
 800d64e:	b18b      	cbz	r3, 800d674 <rcl_publisher_init+0x114>
 800d650:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d654:	b142      	cbz	r2, 800d668 <rcl_publisher_init+0x108>
 800d656:	4630      	mov	r0, r6
 800d658:	f007 fb64 	bl	8014d24 <rcl_node_get_rmw_handle>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800d662:	f001 fda9 	bl	800f1b8 <rmw_destroy_publisher>
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800d66a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d66c:	4618      	mov	r0, r3
 800d66e:	4790      	blx	r2
 800d670:	2300      	movs	r3, #0
 800d672:	6023      	str	r3, [r4, #0]
 800d674:	2701      	movs	r7, #1
 800d676:	e7db      	b.n	800d630 <rcl_publisher_init+0xd0>
 800d678:	2867      	cmp	r0, #103	@ 0x67
 800d67a:	d0d9      	beq.n	800d630 <rcl_publisher_init+0xd0>
 800d67c:	2869      	cmp	r0, #105	@ 0x69
 800d67e:	d003      	beq.n	800d688 <rcl_publisher_init+0x128>
 800d680:	280a      	cmp	r0, #10
 800d682:	d1f7      	bne.n	800d674 <rcl_publisher_init+0x114>
 800d684:	270a      	movs	r7, #10
 800d686:	e7d3      	b.n	800d630 <rcl_publisher_init+0xd0>
 800d688:	2767      	movs	r7, #103	@ 0x67
 800d68a:	e7d1      	b.n	800d630 <rcl_publisher_init+0xd0>

0800d68c <rcl_publisher_get_default_options>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	4d14      	ldr	r5, [pc, #80]	@ (800d6e0 <rcl_publisher_get_default_options+0x54>)
 800d690:	4914      	ldr	r1, [pc, #80]	@ (800d6e4 <rcl_publisher_get_default_options+0x58>)
 800d692:	b088      	sub	sp, #32
 800d694:	4604      	mov	r4, r0
 800d696:	2250      	movs	r2, #80	@ 0x50
 800d698:	4628      	mov	r0, r5
 800d69a:	f00d f850 	bl	801a73e <memcpy>
 800d69e:	a802      	add	r0, sp, #8
 800d6a0:	f000 fff6 	bl	800e690 <rcutils_get_default_allocator>
 800d6a4:	f10d 0c08 	add.w	ip, sp, #8
 800d6a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d6ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800d6b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d6b4:	466e      	mov	r6, sp
 800d6b6:	f8dc 3000 	ldr.w	r3, [ip]
 800d6ba:	f8ce 3000 	str.w	r3, [lr]
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f001 f896 	bl	800e7f0 <rmw_get_default_publisher_options>
 800d6c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d6c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d6cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d6d0:	2270      	movs	r2, #112	@ 0x70
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f00d f832 	bl	801a73e <memcpy>
 800d6da:	4620      	mov	r0, r4
 800d6dc:	b008      	add	sp, #32
 800d6de:	bd70      	pop	{r4, r5, r6, pc}
 800d6e0:	200074c8 	.word	0x200074c8
 800d6e4:	0801cf10 	.word	0x0801cf10

0800d6e8 <rcl_publish>:
 800d6e8:	b1f8      	cbz	r0, 800d72a <rcl_publish+0x42>
 800d6ea:	6803      	ldr	r3, [r0, #0]
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	b1b3      	cbz	r3, 800d720 <rcl_publish+0x38>
 800d6f2:	4616      	mov	r6, r2
 800d6f4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d6f8:	b192      	cbz	r2, 800d720 <rcl_publish+0x38>
 800d6fa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d6fe:	460d      	mov	r5, r1
 800d700:	f007 f812 	bl	8014728 <rcl_context_is_valid>
 800d704:	b160      	cbz	r0, 800d720 <rcl_publish+0x38>
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d70c:	b140      	cbz	r0, 800d720 <rcl_publish+0x38>
 800d70e:	b155      	cbz	r5, 800d726 <rcl_publish+0x3e>
 800d710:	4632      	mov	r2, r6
 800d712:	4629      	mov	r1, r5
 800d714:	f001 fc02 	bl	800ef1c <rmw_publish>
 800d718:	3800      	subs	r0, #0
 800d71a:	bf18      	it	ne
 800d71c:	2001      	movne	r0, #1
 800d71e:	bd70      	pop	{r4, r5, r6, pc}
 800d720:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d724:	bd70      	pop	{r4, r5, r6, pc}
 800d726:	200b      	movs	r0, #11
 800d728:	bd70      	pop	{r4, r5, r6, pc}
 800d72a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d72e:	4770      	bx	lr

0800d730 <rcl_publisher_is_valid>:
 800d730:	b1a0      	cbz	r0, 800d75c <rcl_publisher_is_valid+0x2c>
 800d732:	6803      	ldr	r3, [r0, #0]
 800d734:	b510      	push	{r4, lr}
 800d736:	4604      	mov	r4, r0
 800d738:	b173      	cbz	r3, 800d758 <rcl_publisher_is_valid+0x28>
 800d73a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d73e:	b15a      	cbz	r2, 800d758 <rcl_publisher_is_valid+0x28>
 800d740:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d744:	f006 fff0 	bl	8014728 <rcl_context_is_valid>
 800d748:	b130      	cbz	r0, 800d758 <rcl_publisher_is_valid+0x28>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d750:	3800      	subs	r0, #0
 800d752:	bf18      	it	ne
 800d754:	2001      	movne	r0, #1
 800d756:	bd10      	pop	{r4, pc}
 800d758:	2000      	movs	r0, #0
 800d75a:	bd10      	pop	{r4, pc}
 800d75c:	2000      	movs	r0, #0
 800d75e:	4770      	bx	lr

0800d760 <rcl_publisher_is_valid_except_context>:
 800d760:	b130      	cbz	r0, 800d770 <rcl_publisher_is_valid_except_context+0x10>
 800d762:	6800      	ldr	r0, [r0, #0]
 800d764:	b120      	cbz	r0, 800d770 <rcl_publisher_is_valid_except_context+0x10>
 800d766:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800d76a:	3800      	subs	r0, #0
 800d76c:	bf18      	it	ne
 800d76e:	2001      	movne	r0, #1
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop

0800d774 <_rclc_check_for_new_data>:
 800d774:	2800      	cmp	r0, #0
 800d776:	d046      	beq.n	800d806 <_rclc_check_for_new_data+0x92>
 800d778:	b510      	push	{r4, lr}
 800d77a:	7802      	ldrb	r2, [r0, #0]
 800d77c:	b084      	sub	sp, #16
 800d77e:	4603      	mov	r3, r0
 800d780:	2a0a      	cmp	r2, #10
 800d782:	d842      	bhi.n	800d80a <_rclc_check_for_new_data+0x96>
 800d784:	e8df f002 	tbb	[pc, r2]
 800d788:	14181212 	.word	0x14181212
 800d78c:	06060614 	.word	0x06060614
 800d790:	2e1a      	.short	0x2e1a
 800d792:	16          	.byte	0x16
 800d793:	00          	.byte	0x00
 800d794:	6a0a      	ldr	r2, [r1, #32]
 800d796:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d798:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d79c:	2000      	movs	r0, #0
 800d79e:	1a12      	subs	r2, r2, r0
 800d7a0:	bf18      	it	ne
 800d7a2:	2201      	movne	r2, #1
 800d7a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d7a8:	b004      	add	sp, #16
 800d7aa:	bd10      	pop	{r4, pc}
 800d7ac:	680a      	ldr	r2, [r1, #0]
 800d7ae:	e7f2      	b.n	800d796 <_rclc_check_for_new_data+0x22>
 800d7b0:	698a      	ldr	r2, [r1, #24]
 800d7b2:	e7f0      	b.n	800d796 <_rclc_check_for_new_data+0x22>
 800d7b4:	688a      	ldr	r2, [r1, #8]
 800d7b6:	e7ee      	b.n	800d796 <_rclc_check_for_new_data+0x22>
 800d7b8:	690a      	ldr	r2, [r1, #16]
 800d7ba:	e7ec      	b.n	800d796 <_rclc_check_for_new_data+0x22>
 800d7bc:	685c      	ldr	r4, [r3, #4]
 800d7be:	4608      	mov	r0, r1
 800d7c0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800d7c4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800d7c8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800d7cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800d7d6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800d7da:	f104 0110 	add.w	r1, r4, #16
 800d7de:	f009 f983 	bl	8016ae8 <rcl_action_client_wait_set_get_entities_ready>
 800d7e2:	e7e1      	b.n	800d7a8 <_rclc_check_for_new_data+0x34>
 800d7e4:	685c      	ldr	r4, [r3, #4]
 800d7e6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d7ea:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800d7ee:	e9cd 3200 	strd	r3, r2, [sp]
 800d7f2:	4608      	mov	r0, r1
 800d7f4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d7f8:	f104 0220 	add.w	r2, r4, #32
 800d7fc:	f104 0110 	add.w	r1, r4, #16
 800d800:	f009 fb8a 	bl	8016f18 <rcl_action_server_wait_set_get_entities_ready>
 800d804:	e7d0      	b.n	800d7a8 <_rclc_check_for_new_data+0x34>
 800d806:	200b      	movs	r0, #11
 800d808:	4770      	bx	lr
 800d80a:	2001      	movs	r0, #1
 800d80c:	e7cc      	b.n	800d7a8 <_rclc_check_for_new_data+0x34>
 800d80e:	bf00      	nop

0800d810 <_rclc_take_new_data>:
 800d810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d812:	b09b      	sub	sp, #108	@ 0x6c
 800d814:	2800      	cmp	r0, #0
 800d816:	f000 8088 	beq.w	800d92a <_rclc_take_new_data+0x11a>
 800d81a:	7803      	ldrb	r3, [r0, #0]
 800d81c:	4604      	mov	r4, r0
 800d81e:	2b0a      	cmp	r3, #10
 800d820:	f200 8167 	bhi.w	800daf2 <_rclc_take_new_data+0x2e2>
 800d824:	e8df f003 	tbb	[pc, r3]
 800d828:	44152d2d 	.word	0x44152d2d
 800d82c:	19191944 	.word	0x19191944
 800d830:	065a      	.short	0x065a
 800d832:	15          	.byte	0x15
 800d833:	00          	.byte	0x00
 800d834:	6840      	ldr	r0, [r0, #4]
 800d836:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f040 80b2 	bne.w	800d9a4 <_rclc_take_new_data+0x194>
 800d840:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d844:	2b00      	cmp	r3, #0
 800d846:	f040 80e4 	bne.w	800da12 <_rclc_take_new_data+0x202>
 800d84a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d16f      	bne.n	800d932 <_rclc_take_new_data+0x122>
 800d852:	2500      	movs	r5, #0
 800d854:	4628      	mov	r0, r5
 800d856:	b01b      	add	sp, #108	@ 0x6c
 800d858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d85a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d85c:	6a0b      	ldr	r3, [r1, #32]
 800d85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d0f5      	beq.n	800d852 <_rclc_take_new_data+0x42>
 800d866:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d86a:	f104 0110 	add.w	r1, r4, #16
 800d86e:	f007 fce7 	bl	8015240 <rcl_take_request>
 800d872:	4605      	mov	r5, r0
 800d874:	2800      	cmp	r0, #0
 800d876:	d0ec      	beq.n	800d852 <_rclc_take_new_data+0x42>
 800d878:	f240 2359 	movw	r3, #601	@ 0x259
 800d87c:	4298      	cmp	r0, r3
 800d87e:	d013      	beq.n	800d8a8 <_rclc_take_new_data+0x98>
 800d880:	e029      	b.n	800d8d6 <_rclc_take_new_data+0xc6>
 800d882:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d884:	680b      	ldr	r3, [r1, #0]
 800d886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0e1      	beq.n	800d852 <_rclc_take_new_data+0x42>
 800d88e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d892:	2300      	movs	r3, #0
 800d894:	aa0a      	add	r2, sp, #40	@ 0x28
 800d896:	f007 fd35 	bl	8015304 <rcl_take>
 800d89a:	4605      	mov	r5, r0
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d0d9      	beq.n	800d854 <_rclc_take_new_data+0x44>
 800d8a0:	f240 1391 	movw	r3, #401	@ 0x191
 800d8a4:	4298      	cmp	r0, r3
 800d8a6:	d116      	bne.n	800d8d6 <_rclc_take_new_data+0xc6>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d8ae:	e7d1      	b.n	800d854 <_rclc_take_new_data+0x44>
 800d8b0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d8b2:	698b      	ldr	r3, [r1, #24]
 800d8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0ca      	beq.n	800d852 <_rclc_take_new_data+0x42>
 800d8bc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d8c0:	f104 0110 	add.w	r1, r4, #16
 800d8c4:	f006 fec0 	bl	8014648 <rcl_take_response>
 800d8c8:	4605      	mov	r5, r0
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d0c1      	beq.n	800d852 <_rclc_take_new_data+0x42>
 800d8ce:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d8d2:	4298      	cmp	r0, r3
 800d8d4:	d0be      	beq.n	800d854 <_rclc_take_new_data+0x44>
 800d8d6:	f000 ff0f 	bl	800e6f8 <rcutils_reset_error>
 800d8da:	e7bb      	b.n	800d854 <_rclc_take_new_data+0x44>
 800d8dc:	6840      	ldr	r0, [r0, #4]
 800d8de:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d17d      	bne.n	800d9e2 <_rclc_take_new_data+0x1d2>
 800d8e6:	69c3      	ldr	r3, [r0, #28]
 800d8e8:	b11b      	cbz	r3, 800d8f2 <_rclc_take_new_data+0xe2>
 800d8ea:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d144      	bne.n	800d97c <_rclc_take_new_data+0x16c>
 800d8f2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f040 80ac 	bne.w	800da54 <_rclc_take_new_data+0x244>
 800d8fc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d900:	2b00      	cmp	r3, #0
 800d902:	d0a6      	beq.n	800d852 <_rclc_take_new_data+0x42>
 800d904:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d906:	a90a      	add	r1, sp, #40	@ 0x28
 800d908:	3010      	adds	r0, #16
 800d90a:	f008 ffc5 	bl	8016898 <rcl_action_take_result_response>
 800d90e:	4605      	mov	r5, r0
 800d910:	2800      	cmp	r0, #0
 800d912:	d1e0      	bne.n	800d8d6 <_rclc_take_new_data+0xc6>
 800d914:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d918:	6860      	ldr	r0, [r4, #4]
 800d91a:	f009 fc21 	bl	8017160 <rclc_action_find_handle_by_result_request_sequence_number>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d098      	beq.n	800d854 <_rclc_take_new_data+0x44>
 800d922:	2301      	movs	r3, #1
 800d924:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d928:	e794      	b.n	800d854 <_rclc_take_new_data+0x44>
 800d92a:	250b      	movs	r5, #11
 800d92c:	4628      	mov	r0, r5
 800d92e:	b01b      	add	sp, #108	@ 0x6c
 800d930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d932:	ae04      	add	r6, sp, #16
 800d934:	aa0a      	add	r2, sp, #40	@ 0x28
 800d936:	3010      	adds	r0, #16
 800d938:	4631      	mov	r1, r6
 800d93a:	f009 fa21 	bl	8016d80 <rcl_action_take_cancel_request>
 800d93e:	4605      	mov	r5, r0
 800d940:	2800      	cmp	r0, #0
 800d942:	d1c8      	bne.n	800d8d6 <_rclc_take_new_data+0xc6>
 800d944:	6860      	ldr	r0, [r4, #4]
 800d946:	a90a      	add	r1, sp, #40	@ 0x28
 800d948:	f009 fbc8 	bl	80170dc <rclc_action_find_goal_handle_by_uuid>
 800d94c:	4607      	mov	r7, r0
 800d94e:	2800      	cmp	r0, #0
 800d950:	f000 80bb 	beq.w	800daca <_rclc_take_new_data+0x2ba>
 800d954:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d958:	2101      	movs	r1, #1
 800d95a:	f009 fb49 	bl	8016ff0 <rcl_action_transition_goal_state>
 800d95e:	2803      	cmp	r0, #3
 800d960:	4684      	mov	ip, r0
 800d962:	f040 80a7 	bne.w	800dab4 <_rclc_take_new_data+0x2a4>
 800d966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d968:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d96c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d96e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d972:	e884 0003 	stmia.w	r4, {r0, r1}
 800d976:	f887 c008 	strb.w	ip, [r7, #8]
 800d97a:	e76b      	b.n	800d854 <_rclc_take_new_data+0x44>
 800d97c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d97e:	3010      	adds	r0, #16
 800d980:	f009 f80a 	bl	8016998 <rcl_action_take_feedback>
 800d984:	4605      	mov	r5, r0
 800d986:	2800      	cmp	r0, #0
 800d988:	d1a5      	bne.n	800d8d6 <_rclc_take_new_data+0xc6>
 800d98a:	6860      	ldr	r0, [r4, #4]
 800d98c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d98e:	f009 fba5 	bl	80170dc <rclc_action_find_goal_handle_by_uuid>
 800d992:	4603      	mov	r3, r0
 800d994:	2800      	cmp	r0, #0
 800d996:	f000 80a3 	beq.w	800dae0 <_rclc_take_new_data+0x2d0>
 800d99a:	2201      	movs	r2, #1
 800d99c:	6860      	ldr	r0, [r4, #4]
 800d99e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d9a2:	e7a6      	b.n	800d8f2 <_rclc_take_new_data+0xe2>
 800d9a4:	f009 fb74 	bl	8017090 <rclc_action_take_goal_handle>
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	6860      	ldr	r0, [r4, #4]
 800d9ac:	2e00      	cmp	r6, #0
 800d9ae:	f43f af47 	beq.w	800d840 <_rclc_take_new_data+0x30>
 800d9b2:	6070      	str	r0, [r6, #4]
 800d9b4:	69f2      	ldr	r2, [r6, #28]
 800d9b6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d9ba:	3010      	adds	r0, #16
 800d9bc:	f009 f928 	bl	8016c10 <rcl_action_take_goal_request>
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	f040 808e 	bne.w	800dae4 <_rclc_take_new_data+0x2d4>
 800d9c8:	69f7      	ldr	r7, [r6, #28]
 800d9ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d9cc:	7235      	strb	r5, [r6, #8]
 800d9ce:	f8c6 0009 	str.w	r0, [r6, #9]
 800d9d2:	f8c6 100d 	str.w	r1, [r6, #13]
 800d9d6:	6860      	ldr	r0, [r4, #4]
 800d9d8:	f8c6 2011 	str.w	r2, [r6, #17]
 800d9dc:	f8c6 3015 	str.w	r3, [r6, #21]
 800d9e0:	e72e      	b.n	800d840 <_rclc_take_new_data+0x30>
 800d9e2:	aa04      	add	r2, sp, #16
 800d9e4:	a90a      	add	r1, sp, #40	@ 0x28
 800d9e6:	3010      	adds	r0, #16
 800d9e8:	f008 fede 	bl	80167a8 <rcl_action_take_goal_response>
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f47f af71 	bne.w	800d8d6 <_rclc_take_new_data+0xc6>
 800d9f4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d9f8:	6860      	ldr	r0, [r4, #4]
 800d9fa:	f009 fb9f 	bl	801713c <rclc_action_find_handle_by_goal_request_sequence_number>
 800d9fe:	b130      	cbz	r0, 800da0e <_rclc_take_new_data+0x1fe>
 800da00:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800da04:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800da08:	2201      	movs	r2, #1
 800da0a:	f880 2020 	strb.w	r2, [r0, #32]
 800da0e:	6860      	ldr	r0, [r4, #4]
 800da10:	e769      	b.n	800d8e6 <_rclc_take_new_data+0xd6>
 800da12:	aa04      	add	r2, sp, #16
 800da14:	3010      	adds	r0, #16
 800da16:	a90a      	add	r1, sp, #40	@ 0x28
 800da18:	f009 f972 	bl	8016d00 <rcl_action_take_result_request>
 800da1c:	4605      	mov	r5, r0
 800da1e:	2800      	cmp	r0, #0
 800da20:	f47f af59 	bne.w	800d8d6 <_rclc_take_new_data+0xc6>
 800da24:	6860      	ldr	r0, [r4, #4]
 800da26:	a904      	add	r1, sp, #16
 800da28:	f009 fb58 	bl	80170dc <rclc_action_find_goal_handle_by_uuid>
 800da2c:	4607      	mov	r7, r0
 800da2e:	b160      	cbz	r0, 800da4a <_rclc_take_new_data+0x23a>
 800da30:	ad0a      	add	r5, sp, #40	@ 0x28
 800da32:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800da36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800da3e:	f04f 0c02 	mov.w	ip, #2
 800da42:	e886 0003 	stmia.w	r6, {r0, r1}
 800da46:	f887 c008 	strb.w	ip, [r7, #8]
 800da4a:	6860      	ldr	r0, [r4, #4]
 800da4c:	2300      	movs	r3, #0
 800da4e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800da52:	e6fa      	b.n	800d84a <_rclc_take_new_data+0x3a>
 800da54:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800da58:	a90a      	add	r1, sp, #40	@ 0x28
 800da5a:	3010      	adds	r0, #16
 800da5c:	f008 ff5c 	bl	8016918 <rcl_action_take_cancel_response>
 800da60:	4605      	mov	r5, r0
 800da62:	2800      	cmp	r0, #0
 800da64:	f47f af37 	bne.w	800d8d6 <_rclc_take_new_data+0xc6>
 800da68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da6c:	6860      	ldr	r0, [r4, #4]
 800da6e:	f009 fb89 	bl	8017184 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800da72:	4606      	mov	r6, r0
 800da74:	6860      	ldr	r0, [r4, #4]
 800da76:	2e00      	cmp	r6, #0
 800da78:	f43f af40 	beq.w	800d8fc <_rclc_take_new_data+0xec>
 800da7c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800da7e:	2701      	movs	r7, #1
 800da80:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800da82:	2b00      	cmp	r3, #0
 800da84:	f43f af3a 	beq.w	800d8fc <_rclc_take_new_data+0xec>
 800da88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800da8a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800da8e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800da92:	f009 fb23 	bl	80170dc <rclc_action_find_goal_handle_by_uuid>
 800da96:	b138      	cbz	r0, 800daa8 <_rclc_take_new_data+0x298>
 800da98:	6860      	ldr	r0, [r4, #4]
 800da9a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800da9c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800daa0:	3501      	adds	r5, #1
 800daa2:	42ab      	cmp	r3, r5
 800daa4:	d8f0      	bhi.n	800da88 <_rclc_take_new_data+0x278>
 800daa6:	e729      	b.n	800d8fc <_rclc_take_new_data+0xec>
 800daa8:	6860      	ldr	r0, [r4, #4]
 800daaa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800daac:	3501      	adds	r5, #1
 800daae:	42ab      	cmp	r3, r5
 800dab0:	d8ea      	bhi.n	800da88 <_rclc_take_new_data+0x278>
 800dab2:	e723      	b.n	800d8fc <_rclc_take_new_data+0xec>
 800dab4:	ab06      	add	r3, sp, #24
 800dab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dab8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dabc:	2103      	movs	r1, #3
 800dabe:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dac2:	6860      	ldr	r0, [r4, #4]
 800dac4:	f009 fbd4 	bl	8017270 <rclc_action_server_goal_cancel_reject>
 800dac8:	e6c4      	b.n	800d854 <_rclc_take_new_data+0x44>
 800daca:	ab06      	add	r3, sp, #24
 800dacc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dace:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dad2:	2102      	movs	r1, #2
 800dad4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dad8:	6860      	ldr	r0, [r4, #4]
 800dada:	f009 fbc9 	bl	8017270 <rclc_action_server_goal_cancel_reject>
 800dade:	e6b9      	b.n	800d854 <_rclc_take_new_data+0x44>
 800dae0:	6860      	ldr	r0, [r4, #4]
 800dae2:	e706      	b.n	800d8f2 <_rclc_take_new_data+0xe2>
 800dae4:	6860      	ldr	r0, [r4, #4]
 800dae6:	4631      	mov	r1, r6
 800dae8:	f009 fae2 	bl	80170b0 <rclc_action_remove_used_goal_handle>
 800daec:	f000 fe04 	bl	800e6f8 <rcutils_reset_error>
 800daf0:	e6b0      	b.n	800d854 <_rclc_take_new_data+0x44>
 800daf2:	2501      	movs	r5, #1
 800daf4:	e6ae      	b.n	800d854 <_rclc_take_new_data+0x44>
 800daf6:	bf00      	nop

0800daf8 <_rclc_execute.part.0>:
 800daf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dafa:	7803      	ldrb	r3, [r0, #0]
 800dafc:	b087      	sub	sp, #28
 800dafe:	4604      	mov	r4, r0
 800db00:	2b0a      	cmp	r3, #10
 800db02:	f200 8136 	bhi.w	800dd72 <_rclc_execute.part.0+0x27a>
 800db06:	e8df f003 	tbb	[pc, r3]
 800db0a:	435e      	.short	0x435e
 800db0c:	06a1664f 	.word	0x06a1664f
 800db10:	6c1e0606 	.word	0x6c1e0606
 800db14:	59          	.byte	0x59
 800db15:	00          	.byte	0x00
 800db16:	2b06      	cmp	r3, #6
 800db18:	f000 8122 	beq.w	800dd60 <_rclc_execute.part.0+0x268>
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800db20:	f040 8118 	bne.w	800dd54 <_rclc_execute.part.0+0x25c>
 800db24:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800db28:	6880      	ldr	r0, [r0, #8]
 800db2a:	4798      	blx	r3
 800db2c:	f104 0110 	add.w	r1, r4, #16
 800db30:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800db32:	6860      	ldr	r0, [r4, #4]
 800db34:	f007 fbc4 	bl	80152c0 <rcl_send_response>
 800db38:	2800      	cmp	r0, #0
 800db3a:	d033      	beq.n	800dba4 <_rclc_execute.part.0+0xac>
 800db3c:	9005      	str	r0, [sp, #20]
 800db3e:	f000 fddb 	bl	800e6f8 <rcutils_reset_error>
 800db42:	9805      	ldr	r0, [sp, #20]
 800db44:	e02e      	b.n	800dba4 <_rclc_execute.part.0+0xac>
 800db46:	6840      	ldr	r0, [r0, #4]
 800db48:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f000 8086 	beq.w	800dc5e <_rclc_execute.part.0+0x166>
 800db52:	2600      	movs	r6, #0
 800db54:	2701      	movs	r7, #1
 800db56:	e004      	b.n	800db62 <_rclc_execute.part.0+0x6a>
 800db58:	f009 fa74 	bl	8017044 <rclc_action_send_result_request>
 800db5c:	b998      	cbnz	r0, 800db86 <_rclc_execute.part.0+0x8e>
 800db5e:	722f      	strb	r7, [r5, #8]
 800db60:	6860      	ldr	r0, [r4, #4]
 800db62:	f009 fb21 	bl	80171a8 <rclc_action_find_first_handle_with_goal_response>
 800db66:	4605      	mov	r5, r0
 800db68:	2800      	cmp	r0, #0
 800db6a:	d077      	beq.n	800dc5c <_rclc_execute.part.0+0x164>
 800db6c:	6863      	ldr	r3, [r4, #4]
 800db6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800db76:	f885 6020 	strb.w	r6, [r5, #32]
 800db7a:	4798      	blx	r3
 800db7c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800db80:	4628      	mov	r0, r5
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1e8      	bne.n	800db58 <_rclc_execute.part.0+0x60>
 800db86:	6860      	ldr	r0, [r4, #4]
 800db88:	4629      	mov	r1, r5
 800db8a:	f009 fa91 	bl	80170b0 <rclc_action_remove_used_goal_handle>
 800db8e:	e7e7      	b.n	800db60 <_rclc_execute.part.0+0x68>
 800db90:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800db94:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800db98:	2d00      	cmp	r5, #0
 800db9a:	f000 80c9 	beq.w	800dd30 <_rclc_execute.part.0+0x238>
 800db9e:	6880      	ldr	r0, [r0, #8]
 800dba0:	4798      	blx	r3
 800dba2:	2000      	movs	r0, #0
 800dba4:	b007      	add	sp, #28
 800dba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dba8:	6840      	ldr	r0, [r0, #4]
 800dbaa:	f007 febb 	bl	8015924 <rcl_timer_call>
 800dbae:	f240 3321 	movw	r3, #801	@ 0x321
 800dbb2:	4298      	cmp	r0, r3
 800dbb4:	d004      	beq.n	800dbc0 <_rclc_execute.part.0+0xc8>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d0f4      	beq.n	800dba4 <_rclc_execute.part.0+0xac>
 800dbba:	e7bf      	b.n	800db3c <_rclc_execute.part.0+0x44>
 800dbbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dbbe:	4798      	blx	r3
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	b007      	add	sp, #28
 800dbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbc6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800dbca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dbcc:	b925      	cbnz	r5, 800dbd8 <_rclc_execute.part.0+0xe0>
 800dbce:	4628      	mov	r0, r5
 800dbd0:	4798      	blx	r3
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	e7e6      	b.n	800dba4 <_rclc_execute.part.0+0xac>
 800dbd6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dbd8:	68a0      	ldr	r0, [r4, #8]
 800dbda:	4798      	blx	r3
 800dbdc:	2000      	movs	r0, #0
 800dbde:	b007      	add	sp, #28
 800dbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbe2:	6840      	ldr	r0, [r0, #4]
 800dbe4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800dbe8:	bb3b      	cbnz	r3, 800dc3a <_rclc_execute.part.0+0x142>
 800dbea:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d07b      	beq.n	800dcea <_rclc_execute.part.0+0x1f2>
 800dbf2:	f640 0634 	movw	r6, #2100	@ 0x834
 800dbf6:	2701      	movs	r7, #1
 800dbf8:	e007      	b.n	800dc0a <_rclc_execute.part.0+0x112>
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	f009 faec 	bl	80171d8 <rclc_action_server_response_goal_request>
 800dc00:	6860      	ldr	r0, [r4, #4]
 800dc02:	4629      	mov	r1, r5
 800dc04:	f009 fa54 	bl	80170b0 <rclc_action_remove_used_goal_handle>
 800dc08:	6860      	ldr	r0, [r4, #4]
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	f009 fa7e 	bl	801710c <rclc_action_find_first_handle_by_status>
 800dc10:	4605      	mov	r5, r0
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d066      	beq.n	800dce4 <_rclc_execute.part.0+0x1ec>
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dc1a:	699b      	ldr	r3, [r3, #24]
 800dc1c:	4798      	blx	r3
 800dc1e:	42b0      	cmp	r0, r6
 800dc20:	f04f 0100 	mov.w	r1, #0
 800dc24:	d1e9      	bne.n	800dbfa <_rclc_execute.part.0+0x102>
 800dc26:	2101      	movs	r1, #1
 800dc28:	4628      	mov	r0, r5
 800dc2a:	f009 fad5 	bl	80171d8 <rclc_action_server_response_goal_request>
 800dc2e:	722f      	strb	r7, [r5, #8]
 800dc30:	e7ea      	b.n	800dc08 <_rclc_execute.part.0+0x110>
 800dc32:	6848      	ldr	r0, [r1, #4]
 800dc34:	f009 fa3c 	bl	80170b0 <rclc_action_remove_used_goal_handle>
 800dc38:	6860      	ldr	r0, [r4, #4]
 800dc3a:	f009 fa73 	bl	8017124 <rclc_action_find_first_terminated_handle>
 800dc3e:	4601      	mov	r1, r0
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d1f6      	bne.n	800dc32 <_rclc_execute.part.0+0x13a>
 800dc44:	6860      	ldr	r0, [r4, #4]
 800dc46:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800dc4a:	e7ce      	b.n	800dbea <_rclc_execute.part.0+0xf2>
 800dc4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dc4e:	6880      	ldr	r0, [r0, #8]
 800dc50:	f104 0110 	add.w	r1, r4, #16
 800dc54:	4798      	blx	r3
 800dc56:	2000      	movs	r0, #0
 800dc58:	b007      	add	sp, #28
 800dc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc5c:	6860      	ldr	r0, [r4, #4]
 800dc5e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dc62:	b18b      	cbz	r3, 800dc88 <_rclc_execute.part.0+0x190>
 800dc64:	68c5      	ldr	r5, [r0, #12]
 800dc66:	b32d      	cbz	r5, 800dcb4 <_rclc_execute.part.0+0x1bc>
 800dc68:	2600      	movs	r6, #0
 800dc6a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800dc6e:	b143      	cbz	r3, 800dc82 <_rclc_execute.part.0+0x18a>
 800dc70:	69c3      	ldr	r3, [r0, #28]
 800dc72:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800dc76:	b123      	cbz	r3, 800dc82 <_rclc_execute.part.0+0x18a>
 800dc78:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800dc7a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	4798      	blx	r3
 800dc80:	6860      	ldr	r0, [r4, #4]
 800dc82:	682d      	ldr	r5, [r5, #0]
 800dc84:	2d00      	cmp	r5, #0
 800dc86:	d1f0      	bne.n	800dc6a <_rclc_execute.part.0+0x172>
 800dc88:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800dc8c:	b193      	cbz	r3, 800dcb4 <_rclc_execute.part.0+0x1bc>
 800dc8e:	68c5      	ldr	r5, [r0, #12]
 800dc90:	b185      	cbz	r5, 800dcb4 <_rclc_execute.part.0+0x1bc>
 800dc92:	2600      	movs	r6, #0
 800dc94:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800dc98:	b14b      	cbz	r3, 800dcae <_rclc_execute.part.0+0x1b6>
 800dc9a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800dc9c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800dca0:	b12b      	cbz	r3, 800dcae <_rclc_execute.part.0+0x1b6>
 800dca2:	4628      	mov	r0, r5
 800dca4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800dca8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dcaa:	4798      	blx	r3
 800dcac:	6860      	ldr	r0, [r4, #4]
 800dcae:	682d      	ldr	r5, [r5, #0]
 800dcb0:	2d00      	cmp	r5, #0
 800dcb2:	d1ef      	bne.n	800dc94 <_rclc_execute.part.0+0x19c>
 800dcb4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d081      	beq.n	800dbc0 <_rclc_execute.part.0+0xc8>
 800dcbc:	2700      	movs	r7, #0
 800dcbe:	e00b      	b.n	800dcd8 <_rclc_execute.part.0+0x1e0>
 800dcc0:	6863      	ldr	r3, [r4, #4]
 800dcc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dcc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800dcc6:	6a1e      	ldr	r6, [r3, #32]
 800dcc8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800dccc:	47b0      	blx	r6
 800dcce:	6860      	ldr	r0, [r4, #4]
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f009 f9ed 	bl	80170b0 <rclc_action_remove_used_goal_handle>
 800dcd6:	6860      	ldr	r0, [r4, #4]
 800dcd8:	f009 fa72 	bl	80171c0 <rclc_action_find_first_handle_with_result_response>
 800dcdc:	4605      	mov	r5, r0
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d1ee      	bne.n	800dcc0 <_rclc_execute.part.0+0x1c8>
 800dce2:	e76d      	b.n	800dbc0 <_rclc_execute.part.0+0xc8>
 800dce4:	6860      	ldr	r0, [r4, #4]
 800dce6:	f880 5020 	strb.w	r5, [r0, #32]
 800dcea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	f43f af66 	beq.w	800dbc0 <_rclc_execute.part.0+0xc8>
 800dcf4:	68c5      	ldr	r5, [r0, #12]
 800dcf6:	b1b5      	cbz	r5, 800dd26 <_rclc_execute.part.0+0x22e>
 800dcf8:	2602      	movs	r6, #2
 800dcfa:	e001      	b.n	800dd00 <_rclc_execute.part.0+0x208>
 800dcfc:	682d      	ldr	r5, [r5, #0]
 800dcfe:	b195      	cbz	r5, 800dd26 <_rclc_execute.part.0+0x22e>
 800dd00:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800dd04:	2b03      	cmp	r3, #3
 800dd06:	d1f9      	bne.n	800dcfc <_rclc_execute.part.0+0x204>
 800dd08:	69c3      	ldr	r3, [r0, #28]
 800dd0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	4798      	blx	r3
 800dd10:	4603      	mov	r3, r0
 800dd12:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800dd16:	4628      	mov	r0, r5
 800dd18:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800dd1c:	b163      	cbz	r3, 800dd38 <_rclc_execute.part.0+0x240>
 800dd1e:	f009 fa7b 	bl	8017218 <rclc_action_server_goal_cancel_accept>
 800dd22:	6860      	ldr	r0, [r4, #4]
 800dd24:	e7ea      	b.n	800dcfc <_rclc_execute.part.0+0x204>
 800dd26:	2300      	movs	r3, #0
 800dd28:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	e739      	b.n	800dba4 <_rclc_execute.part.0+0xac>
 800dd30:	4628      	mov	r0, r5
 800dd32:	4798      	blx	r3
 800dd34:	4628      	mov	r0, r5
 800dd36:	e735      	b.n	800dba4 <_rclc_execute.part.0+0xac>
 800dd38:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800dd3a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dd3e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800dd42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd46:	6860      	ldr	r0, [r4, #4]
 800dd48:	2101      	movs	r1, #1
 800dd4a:	f009 fa91 	bl	8017270 <rclc_action_server_goal_cancel_reject>
 800dd4e:	722e      	strb	r6, [r5, #8]
 800dd50:	6860      	ldr	r0, [r4, #4]
 800dd52:	e7d3      	b.n	800dcfc <_rclc_execute.part.0+0x204>
 800dd54:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800dd56:	6880      	ldr	r0, [r0, #8]
 800dd58:	4798      	blx	r3
 800dd5a:	f104 0110 	add.w	r1, r4, #16
 800dd5e:	e6e7      	b.n	800db30 <_rclc_execute.part.0+0x38>
 800dd60:	f100 0110 	add.w	r1, r0, #16
 800dd64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dd66:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800dd68:	6880      	ldr	r0, [r0, #8]
 800dd6a:	9105      	str	r1, [sp, #20]
 800dd6c:	4798      	blx	r3
 800dd6e:	9905      	ldr	r1, [sp, #20]
 800dd70:	e6de      	b.n	800db30 <_rclc_execute.part.0+0x38>
 800dd72:	2001      	movs	r0, #1
 800dd74:	e716      	b.n	800dba4 <_rclc_execute.part.0+0xac>
 800dd76:	bf00      	nop

0800dd78 <rclc_executor_trigger_any>:
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d03f      	beq.n	800ddfc <rclc_executor_trigger_any+0x84>
 800dd7c:	2900      	cmp	r1, #0
 800dd7e:	d03e      	beq.n	800ddfe <rclc_executor_trigger_any+0x86>
 800dd80:	4603      	mov	r3, r0
 800dd82:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800dd86:	2200      	movs	r2, #0
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d037      	beq.n	800ddfc <rclc_executor_trigger_any+0x84>
 800dd8c:	b430      	push	{r4, r5}
 800dd8e:	f893 c000 	ldrb.w	ip, [r3]
 800dd92:	f1bc 0f08 	cmp.w	ip, #8
 800dd96:	d11e      	bne.n	800ddd6 <rclc_executor_trigger_any+0x5e>
 800dd98:	685c      	ldr	r4, [r3, #4]
 800dd9a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800dd9c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800dda0:	d105      	bne.n	800ddae <rclc_executor_trigger_any+0x36>
 800dda2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800dda6:	b910      	cbnz	r0, 800ddae <rclc_executor_trigger_any+0x36>
 800dda8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ddac:	b128      	cbz	r0, 800ddba <rclc_executor_trigger_any+0x42>
 800ddae:	bc30      	pop	{r4, r5}
 800ddb0:	4770      	bx	lr
 800ddb2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d1f9      	bne.n	800ddae <rclc_executor_trigger_any+0x36>
 800ddba:	3201      	adds	r2, #1
 800ddbc:	4291      	cmp	r1, r2
 800ddbe:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ddc2:	d018      	beq.n	800ddf6 <rclc_executor_trigger_any+0x7e>
 800ddc4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d0f0      	beq.n	800ddae <rclc_executor_trigger_any+0x36>
 800ddcc:	f893 c000 	ldrb.w	ip, [r3]
 800ddd0:	f1bc 0f08 	cmp.w	ip, #8
 800ddd4:	d0e0      	beq.n	800dd98 <rclc_executor_trigger_any+0x20>
 800ddd6:	f1bc 0f09 	cmp.w	ip, #9
 800ddda:	d1ea      	bne.n	800ddb2 <rclc_executor_trigger_any+0x3a>
 800dddc:	685c      	ldr	r4, [r3, #4]
 800ddde:	6a25      	ldr	r5, [r4, #32]
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	d1e4      	bne.n	800ddae <rclc_executor_trigger_any+0x36>
 800dde4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d1e0      	bne.n	800ddae <rclc_executor_trigger_any+0x36>
 800ddec:	3201      	adds	r2, #1
 800ddee:	4291      	cmp	r1, r2
 800ddf0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ddf4:	d1e6      	bne.n	800ddc4 <rclc_executor_trigger_any+0x4c>
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	bc30      	pop	{r4, r5}
 800ddfa:	4770      	bx	lr
 800ddfc:	4770      	bx	lr
 800ddfe:	4608      	mov	r0, r1
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop

0800de04 <rclc_executor_get_zero_initialized_executor>:
 800de04:	b510      	push	{r4, lr}
 800de06:	4903      	ldr	r1, [pc, #12]	@ (800de14 <rclc_executor_get_zero_initialized_executor+0x10>)
 800de08:	4604      	mov	r4, r0
 800de0a:	2288      	movs	r2, #136	@ 0x88
 800de0c:	f00c fc97 	bl	801a73e <memcpy>
 800de10:	4620      	mov	r0, r4
 800de12:	bd10      	pop	{r4, pc}
 800de14:	0801cf60 	.word	0x0801cf60

0800de18 <rclc_executor_init>:
 800de18:	2800      	cmp	r0, #0
 800de1a:	d05f      	beq.n	800dedc <rclc_executor_init+0xc4>
 800de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de20:	460c      	mov	r4, r1
 800de22:	b0b0      	sub	sp, #192	@ 0xc0
 800de24:	2900      	cmp	r1, #0
 800de26:	d051      	beq.n	800decc <rclc_executor_init+0xb4>
 800de28:	4605      	mov	r5, r0
 800de2a:	4618      	mov	r0, r3
 800de2c:	4616      	mov	r6, r2
 800de2e:	461f      	mov	r7, r3
 800de30:	f000 fc3c 	bl	800e6ac <rcutils_allocator_is_valid>
 800de34:	2800      	cmp	r0, #0
 800de36:	d049      	beq.n	800decc <rclc_executor_init+0xb4>
 800de38:	2e00      	cmp	r6, #0
 800de3a:	d047      	beq.n	800decc <rclc_executor_init+0xb4>
 800de3c:	492c      	ldr	r1, [pc, #176]	@ (800def0 <rclc_executor_init+0xd8>)
 800de3e:	2288      	movs	r2, #136	@ 0x88
 800de40:	a80e      	add	r0, sp, #56	@ 0x38
 800de42:	f00c fc7c 	bl	801a73e <memcpy>
 800de46:	a90e      	add	r1, sp, #56	@ 0x38
 800de48:	2288      	movs	r2, #136	@ 0x88
 800de4a:	4628      	mov	r0, r5
 800de4c:	f00c fc77 	bl	801a73e <memcpy>
 800de50:	602c      	str	r4, [r5, #0]
 800de52:	4668      	mov	r0, sp
 800de54:	60ae      	str	r6, [r5, #8]
 800de56:	466c      	mov	r4, sp
 800de58:	f007 fed6 	bl	8015c08 <rcl_get_zero_initialized_wait_set>
 800de5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de5e:	f105 0c14 	add.w	ip, r5, #20
 800de62:	f8d7 8000 	ldr.w	r8, [r7]
 800de66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de76:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800dee8 <rclc_executor_init+0xd0>
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	f8cc 3000 	str.w	r3, [ip]
 800de80:	6939      	ldr	r1, [r7, #16]
 800de82:	612f      	str	r7, [r5, #16]
 800de84:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800de88:	01b0      	lsls	r0, r6, #6
 800de8a:	47c0      	blx	r8
 800de8c:	6068      	str	r0, [r5, #4]
 800de8e:	b338      	cbz	r0, 800dee0 <rclc_executor_init+0xc8>
 800de90:	2400      	movs	r4, #0
 800de92:	e000      	b.n	800de96 <rclc_executor_init+0x7e>
 800de94:	6868      	ldr	r0, [r5, #4]
 800de96:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800de9a:	4631      	mov	r1, r6
 800de9c:	3401      	adds	r4, #1
 800de9e:	f000 faa3 	bl	800e3e8 <rclc_executor_handle_init>
 800dea2:	42a6      	cmp	r6, r4
 800dea4:	d1f6      	bne.n	800de94 <rclc_executor_init+0x7c>
 800dea6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800deaa:	f000 fa93 	bl	800e3d4 <rclc_executor_handle_counters_zero_init>
 800deae:	4a11      	ldr	r2, [pc, #68]	@ (800def4 <rclc_executor_init+0xdc>)
 800deb0:	686b      	ldr	r3, [r5, #4]
 800deb2:	2000      	movs	r0, #0
 800deb4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800deb8:	b163      	cbz	r3, 800ded4 <rclc_executor_init+0xbc>
 800deba:	692b      	ldr	r3, [r5, #16]
 800debc:	b153      	cbz	r3, 800ded4 <rclc_executor_init+0xbc>
 800debe:	68ab      	ldr	r3, [r5, #8]
 800dec0:	b143      	cbz	r3, 800ded4 <rclc_executor_init+0xbc>
 800dec2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800dec6:	b030      	add	sp, #192	@ 0xc0
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	200b      	movs	r0, #11
 800dece:	b030      	add	sp, #192	@ 0xc0
 800ded0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded4:	4618      	mov	r0, r3
 800ded6:	b030      	add	sp, #192	@ 0xc0
 800ded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dedc:	200b      	movs	r0, #11
 800dede:	4770      	bx	lr
 800dee0:	200a      	movs	r0, #10
 800dee2:	e7f4      	b.n	800dece <rclc_executor_init+0xb6>
 800dee4:	f3af 8000 	nop.w
 800dee8:	3b9aca00 	.word	0x3b9aca00
 800deec:	00000000 	.word	0x00000000
 800def0:	0801cf60 	.word	0x0801cf60
 800def4:	0800dd79 	.word	0x0800dd79

0800def8 <rclc_executor_add_timer>:
 800def8:	b300      	cbz	r0, 800df3c <rclc_executor_add_timer+0x44>
 800defa:	b1f9      	cbz	r1, 800df3c <rclc_executor_add_timer+0x44>
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800df02:	4293      	cmp	r3, r2
 800df04:	4604      	mov	r4, r0
 800df06:	d301      	bcc.n	800df0c <rclc_executor_add_timer+0x14>
 800df08:	2001      	movs	r0, #1
 800df0a:	bd38      	pop	{r3, r4, r5, pc}
 800df0c:	6840      	ldr	r0, [r0, #4]
 800df0e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800df12:	019d      	lsls	r5, r3, #6
 800df14:	6051      	str	r1, [r2, #4]
 800df16:	2102      	movs	r1, #2
 800df18:	5341      	strh	r1, [r0, r5]
 800df1a:	3301      	adds	r3, #1
 800df1c:	2000      	movs	r0, #0
 800df1e:	2101      	movs	r1, #1
 800df20:	f104 0514 	add.w	r5, r4, #20
 800df24:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800df26:	8711      	strh	r1, [r2, #56]	@ 0x38
 800df28:	4628      	mov	r0, r5
 800df2a:	60e3      	str	r3, [r4, #12]
 800df2c:	f007 fe80 	bl	8015c30 <rcl_wait_set_is_valid>
 800df30:	b930      	cbnz	r0, 800df40 <rclc_executor_add_timer+0x48>
 800df32:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800df34:	3301      	adds	r3, #1
 800df36:	2000      	movs	r0, #0
 800df38:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	200b      	movs	r0, #11
 800df3e:	4770      	bx	lr
 800df40:	4628      	mov	r0, r5
 800df42:	f007 fe7b 	bl	8015c3c <rcl_wait_set_fini>
 800df46:	2800      	cmp	r0, #0
 800df48:	d0f3      	beq.n	800df32 <rclc_executor_add_timer+0x3a>
 800df4a:	bd38      	pop	{r3, r4, r5, pc}

0800df4c <rclc_executor_add_service>:
 800df4c:	b370      	cbz	r0, 800dfac <rclc_executor_add_service+0x60>
 800df4e:	b369      	cbz	r1, 800dfac <rclc_executor_add_service+0x60>
 800df50:	b362      	cbz	r2, 800dfac <rclc_executor_add_service+0x60>
 800df52:	b35b      	cbz	r3, 800dfac <rclc_executor_add_service+0x60>
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4604      	mov	r4, r0
 800df58:	9804      	ldr	r0, [sp, #16]
 800df5a:	b378      	cbz	r0, 800dfbc <rclc_executor_add_service+0x70>
 800df5c:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800df60:	42a8      	cmp	r0, r5
 800df62:	d301      	bcc.n	800df68 <rclc_executor_add_service+0x1c>
 800df64:	2001      	movs	r0, #1
 800df66:	bd38      	pop	{r3, r4, r5, pc}
 800df68:	6865      	ldr	r5, [r4, #4]
 800df6a:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800df6e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800df72:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800df76:	9b04      	ldr	r3, [sp, #16]
 800df78:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800df7c:	2305      	movs	r3, #5
 800df7e:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800df82:	3001      	adds	r0, #1
 800df84:	f825 300e 	strh.w	r3, [r5, lr]
 800df88:	2201      	movs	r2, #1
 800df8a:	2300      	movs	r3, #0
 800df8c:	f104 0514 	add.w	r5, r4, #20
 800df90:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800df94:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800df98:	60e0      	str	r0, [r4, #12]
 800df9a:	4628      	mov	r0, r5
 800df9c:	f007 fe48 	bl	8015c30 <rcl_wait_set_is_valid>
 800dfa0:	b930      	cbnz	r0, 800dfb0 <rclc_executor_add_service+0x64>
 800dfa2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	6563      	str	r3, [r4, #84]	@ 0x54
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	200b      	movs	r0, #11
 800dfae:	4770      	bx	lr
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f007 fe43 	bl	8015c3c <rcl_wait_set_fini>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d0f3      	beq.n	800dfa2 <rclc_executor_add_service+0x56>
 800dfba:	e7d4      	b.n	800df66 <rclc_executor_add_service+0x1a>
 800dfbc:	200b      	movs	r0, #11
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}

0800dfc0 <rclc_executor_prepare>:
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d044      	beq.n	800e04e <rclc_executor_prepare+0x8e>
 800dfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc6:	f100 0514 	add.w	r5, r0, #20
 800dfca:	b09b      	sub	sp, #108	@ 0x6c
 800dfcc:	4604      	mov	r4, r0
 800dfce:	4628      	mov	r0, r5
 800dfd0:	f007 fe2e 	bl	8015c30 <rcl_wait_set_is_valid>
 800dfd4:	b110      	cbz	r0, 800dfdc <rclc_executor_prepare+0x1c>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	b01b      	add	sp, #108	@ 0x6c
 800dfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfdc:	4628      	mov	r0, r5
 800dfde:	f007 fe2d 	bl	8015c3c <rcl_wait_set_fini>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d130      	bne.n	800e048 <rclc_executor_prepare+0x88>
 800dfe6:	a80c      	add	r0, sp, #48	@ 0x30
 800dfe8:	f007 fe0e 	bl	8015c08 <rcl_get_zero_initialized_wait_set>
 800dfec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800dff0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dff4:	46ae      	mov	lr, r5
 800dff6:	6927      	ldr	r7, [r4, #16]
 800dff8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dffc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e000:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e004:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e008:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e00c:	f8dc 3000 	ldr.w	r3, [ip]
 800e010:	f8ce 3000 	str.w	r3, [lr]
 800e014:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e016:	ae04      	add	r6, sp, #16
 800e018:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	6822      	ldr	r2, [r4, #0]
 800e01e:	6033      	str	r3, [r6, #0]
 800e020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e022:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800e024:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e028:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800e02c:	e9cd 2100 	strd	r2, r1, [sp]
 800e030:	4628      	mov	r0, r5
 800e032:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800e034:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e036:	f008 f8ff 	bl	8016238 <rcl_wait_set_init>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d0cc      	beq.n	800dfd8 <rclc_executor_prepare+0x18>
 800e03e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e040:	f000 fb5a 	bl	800e6f8 <rcutils_reset_error>
 800e044:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e046:	e7c7      	b.n	800dfd8 <rclc_executor_prepare+0x18>
 800e048:	f000 fb56 	bl	800e6f8 <rcutils_reset_error>
 800e04c:	e7cb      	b.n	800dfe6 <rclc_executor_prepare+0x26>
 800e04e:	200b      	movs	r0, #11
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop

0800e054 <rclc_executor_spin_some.part.0>:
 800e054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e058:	f100 0614 	add.w	r6, r0, #20
 800e05c:	b083      	sub	sp, #12
 800e05e:	4691      	mov	r9, r2
 800e060:	4698      	mov	r8, r3
 800e062:	4605      	mov	r5, r0
 800e064:	f7ff ffac 	bl	800dfc0 <rclc_executor_prepare>
 800e068:	4630      	mov	r0, r6
 800e06a:	f007 feb3 	bl	8015dd4 <rcl_wait_set_clear>
 800e06e:	4607      	mov	r7, r0
 800e070:	2800      	cmp	r0, #0
 800e072:	f040 80ed 	bne.w	800e250 <rclc_executor_spin_some.part.0+0x1fc>
 800e076:	68ab      	ldr	r3, [r5, #8]
 800e078:	4604      	mov	r4, r0
 800e07a:	b303      	cbz	r3, 800e0be <rclc_executor_spin_some.part.0+0x6a>
 800e07c:	6869      	ldr	r1, [r5, #4]
 800e07e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e082:	01a2      	lsls	r2, r4, #6
 800e084:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800e088:	b1cb      	cbz	r3, 800e0be <rclc_executor_spin_some.part.0+0x6a>
 800e08a:	5c8b      	ldrb	r3, [r1, r2]
 800e08c:	2b0a      	cmp	r3, #10
 800e08e:	f200 80d8 	bhi.w	800e242 <rclc_executor_spin_some.part.0+0x1ee>
 800e092:	e8df f003 	tbb	[pc, r3]
 800e096:	9c9c      	.short	0x9c9c
 800e098:	068c8ca7 	.word	0x068c8ca7
 800e09c:	bdc90606 	.word	0xbdc90606
 800e0a0:	b2          	.byte	0xb2
 800e0a1:	00          	.byte	0x00
 800e0a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e0a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	f008 f9da 	bl	8016464 <rcl_wait_set_add_service>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	f040 8086 	bne.w	800e1c2 <rclc_executor_spin_some.part.0+0x16e>
 800e0b6:	68ab      	ldr	r3, [r5, #8]
 800e0b8:	3401      	adds	r4, #1
 800e0ba:	429c      	cmp	r4, r3
 800e0bc:	d3de      	bcc.n	800e07c <rclc_executor_spin_some.part.0+0x28>
 800e0be:	4643      	mov	r3, r8
 800e0c0:	464a      	mov	r2, r9
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f008 f9fc 	bl	80164c0 <rcl_wait>
 800e0c8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f000 80c7 	beq.w	800e260 <rclc_executor_spin_some.part.0+0x20c>
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	f040 80b5 	bne.w	800e242 <rclc_executor_spin_some.part.0+0x1ee>
 800e0d8:	68ab      	ldr	r3, [r5, #8]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f000 8159 	beq.w	800e392 <rclc_executor_spin_some.part.0+0x33e>
 800e0e0:	2400      	movs	r4, #0
 800e0e2:	46a0      	mov	r8, r4
 800e0e4:	f240 1991 	movw	r9, #401	@ 0x191
 800e0e8:	e00a      	b.n	800e100 <rclc_executor_spin_some.part.0+0xac>
 800e0ea:	f7ff fb43 	bl	800d774 <_rclc_check_for_new_data>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	b110      	cbz	r0, 800e0f8 <rclc_executor_spin_some.part.0+0xa4>
 800e0f2:	4548      	cmp	r0, r9
 800e0f4:	f040 80b2 	bne.w	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e0f8:	68ab      	ldr	r3, [r5, #8]
 800e0fa:	4598      	cmp	r8, r3
 800e0fc:	f080 8126 	bcs.w	800e34c <rclc_executor_spin_some.part.0+0x2f8>
 800e100:	686a      	ldr	r2, [r5, #4]
 800e102:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e106:	4631      	mov	r1, r6
 800e108:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e10c:	f108 0801 	add.w	r8, r8, #1
 800e110:	f1bc 0f00 	cmp.w	ip, #0
 800e114:	d1e9      	bne.n	800e0ea <rclc_executor_spin_some.part.0+0x96>
 800e116:	4619      	mov	r1, r3
 800e118:	4610      	mov	r0, r2
 800e11a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800e11e:	4798      	blx	r3
 800e120:	2800      	cmp	r0, #0
 800e122:	f000 809b 	beq.w	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e126:	68ab      	ldr	r3, [r5, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 8097 	beq.w	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e12e:	f04f 0800 	mov.w	r8, #0
 800e132:	f240 1991 	movw	r9, #401	@ 0x191
 800e136:	e009      	b.n	800e14c <rclc_executor_spin_some.part.0+0xf8>
 800e138:	f7ff fb6a 	bl	800d810 <_rclc_take_new_data>
 800e13c:	4604      	mov	r4, r0
 800e13e:	b110      	cbz	r0, 800e146 <rclc_executor_spin_some.part.0+0xf2>
 800e140:	4548      	cmp	r0, r9
 800e142:	f040 808b 	bne.w	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e146:	68ab      	ldr	r3, [r5, #8]
 800e148:	4598      	cmp	r8, r3
 800e14a:	d209      	bcs.n	800e160 <rclc_executor_spin_some.part.0+0x10c>
 800e14c:	6868      	ldr	r0, [r5, #4]
 800e14e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e152:	4631      	mov	r1, r6
 800e154:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800e158:	f108 0801 	add.w	r8, r8, #1
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	d1eb      	bne.n	800e138 <rclc_executor_spin_some.part.0+0xe4>
 800e160:	2600      	movs	r6, #0
 800e162:	b97b      	cbnz	r3, 800e184 <rclc_executor_spin_some.part.0+0x130>
 800e164:	e07a      	b.n	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e166:	f812 200c 	ldrb.w	r2, [r2, ip]
 800e16a:	2a08      	cmp	r2, #8
 800e16c:	f000 80fd 	beq.w	800e36a <rclc_executor_spin_some.part.0+0x316>
 800e170:	2a09      	cmp	r2, #9
 800e172:	f000 80ef 	beq.w	800e354 <rclc_executor_spin_some.part.0+0x300>
 800e176:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800e17a:	b98a      	cbnz	r2, 800e1a0 <rclc_executor_spin_some.part.0+0x14c>
 800e17c:	3601      	adds	r6, #1
 800e17e:	429e      	cmp	r6, r3
 800e180:	d262      	bcs.n	800e248 <rclc_executor_spin_some.part.0+0x1f4>
 800e182:	2400      	movs	r4, #0
 800e184:	686a      	ldr	r2, [r5, #4]
 800e186:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e18a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800e18e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800e192:	2900      	cmp	r1, #0
 800e194:	d062      	beq.n	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e196:	7841      	ldrb	r1, [r0, #1]
 800e198:	2900      	cmp	r1, #0
 800e19a:	d0e4      	beq.n	800e166 <rclc_executor_spin_some.part.0+0x112>
 800e19c:	2901      	cmp	r1, #1
 800e19e:	d1ed      	bne.n	800e17c <rclc_executor_spin_some.part.0+0x128>
 800e1a0:	f7ff fcaa 	bl	800daf8 <_rclc_execute.part.0>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	f040 80b6 	bne.w	800e316 <rclc_executor_spin_some.part.0+0x2c2>
 800e1aa:	68ab      	ldr	r3, [r5, #8]
 800e1ac:	e7e6      	b.n	800e17c <rclc_executor_spin_some.part.0+0x128>
 800e1ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e1b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f008 f928 	bl	801640c <rcl_wait_set_add_client>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	f43f af7a 	beq.w	800e0b6 <rclc_executor_spin_some.part.0+0x62>
 800e1c2:	9001      	str	r0, [sp, #4]
 800e1c4:	f000 fa98 	bl	800e6f8 <rcutils_reset_error>
 800e1c8:	9801      	ldr	r0, [sp, #4]
 800e1ca:	4607      	mov	r7, r0
 800e1cc:	e03c      	b.n	800e248 <rclc_executor_spin_some.part.0+0x1f4>
 800e1ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e1d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f007 fdd0 	bl	8015d7c <rcl_wait_set_add_subscription>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	f43f af6a 	beq.w	800e0b6 <rclc_executor_spin_some.part.0+0x62>
 800e1e2:	e7ee      	b.n	800e1c2 <rclc_executor_spin_some.part.0+0x16e>
 800e1e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e1e8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	f008 f8dd 	bl	80163ac <rcl_wait_set_add_timer>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	f43f af5f 	beq.w	800e0b6 <rclc_executor_spin_some.part.0+0x62>
 800e1f8:	e7e3      	b.n	800e1c2 <rclc_executor_spin_some.part.0+0x16e>
 800e1fa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e1fe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e202:	4630      	mov	r0, r6
 800e204:	f008 f8a6 	bl	8016354 <rcl_wait_set_add_guard_condition>
 800e208:	2800      	cmp	r0, #0
 800e20a:	f43f af54 	beq.w	800e0b6 <rclc_executor_spin_some.part.0+0x62>
 800e20e:	e7d8      	b.n	800e1c2 <rclc_executor_spin_some.part.0+0x16e>
 800e210:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e214:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e218:	3110      	adds	r1, #16
 800e21a:	4630      	mov	r0, r6
 800e21c:	f008 fe28 	bl	8016e70 <rcl_action_wait_set_add_action_server>
 800e220:	2800      	cmp	r0, #0
 800e222:	f43f af48 	beq.w	800e0b6 <rclc_executor_spin_some.part.0+0x62>
 800e226:	e7cc      	b.n	800e1c2 <rclc_executor_spin_some.part.0+0x16e>
 800e228:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e22c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e230:	3110      	adds	r1, #16
 800e232:	2300      	movs	r3, #0
 800e234:	4630      	mov	r0, r6
 800e236:	f008 fbf3 	bl	8016a20 <rcl_action_wait_set_add_action_client>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	f43f af3b 	beq.w	800e0b6 <rclc_executor_spin_some.part.0+0x62>
 800e240:	e7bf      	b.n	800e1c2 <rclc_executor_spin_some.part.0+0x16e>
 800e242:	f000 fa59 	bl	800e6f8 <rcutils_reset_error>
 800e246:	2701      	movs	r7, #1
 800e248:	4638      	mov	r0, r7
 800e24a:	b003      	add	sp, #12
 800e24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e250:	f000 fa52 	bl	800e6f8 <rcutils_reset_error>
 800e254:	4638      	mov	r0, r7
 800e256:	b003      	add	sp, #12
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	4627      	mov	r7, r4
 800e25e:	e7f3      	b.n	800e248 <rclc_executor_spin_some.part.0+0x1f4>
 800e260:	68ab      	ldr	r3, [r5, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	f000 8092 	beq.w	800e38c <rclc_executor_spin_some.part.0+0x338>
 800e268:	2400      	movs	r4, #0
 800e26a:	46a0      	mov	r8, r4
 800e26c:	f240 1991 	movw	r9, #401	@ 0x191
 800e270:	e008      	b.n	800e284 <rclc_executor_spin_some.part.0+0x230>
 800e272:	f7ff fa7f 	bl	800d774 <_rclc_check_for_new_data>
 800e276:	4604      	mov	r4, r0
 800e278:	b108      	cbz	r0, 800e27e <rclc_executor_spin_some.part.0+0x22a>
 800e27a:	4548      	cmp	r0, r9
 800e27c:	d1ee      	bne.n	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e27e:	68ab      	ldr	r3, [r5, #8]
 800e280:	4598      	cmp	r8, r3
 800e282:	d265      	bcs.n	800e350 <rclc_executor_spin_some.part.0+0x2fc>
 800e284:	686a      	ldr	r2, [r5, #4]
 800e286:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e28a:	4631      	mov	r1, r6
 800e28c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e290:	f108 0801 	add.w	r8, r8, #1
 800e294:	f1bc 0f00 	cmp.w	ip, #0
 800e298:	d1eb      	bne.n	800e272 <rclc_executor_spin_some.part.0+0x21e>
 800e29a:	4619      	mov	r1, r3
 800e29c:	4610      	mov	r0, r2
 800e29e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800e2a2:	4798      	blx	r3
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d0d9      	beq.n	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e2a8:	68ab      	ldr	r3, [r5, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d0d6      	beq.n	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e2ae:	f04f 0800 	mov.w	r8, #0
 800e2b2:	f240 1991 	movw	r9, #401	@ 0x191
 800e2b6:	f240 2a59 	movw	sl, #601	@ 0x259
 800e2ba:	e00e      	b.n	800e2da <rclc_executor_spin_some.part.0+0x286>
 800e2bc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800e2c0:	2b08      	cmp	r3, #8
 800e2c2:	d033      	beq.n	800e32c <rclc_executor_spin_some.part.0+0x2d8>
 800e2c4:	2b09      	cmp	r3, #9
 800e2c6:	d028      	beq.n	800e31a <rclc_executor_spin_some.part.0+0x2c6>
 800e2c8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800e2cc:	b9fb      	cbnz	r3, 800e30e <rclc_executor_spin_some.part.0+0x2ba>
 800e2ce:	68ab      	ldr	r3, [r5, #8]
 800e2d0:	f108 0801 	add.w	r8, r8, #1
 800e2d4:	4598      	cmp	r8, r3
 800e2d6:	d2b7      	bcs.n	800e248 <rclc_executor_spin_some.part.0+0x1f4>
 800e2d8:	2400      	movs	r4, #0
 800e2da:	6868      	ldr	r0, [r5, #4]
 800e2dc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e2e0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800e2e4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d0b7      	beq.n	800e25c <rclc_executor_spin_some.part.0+0x208>
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	f7ff fa8f 	bl	800d810 <_rclc_take_new_data>
 800e2f2:	b118      	cbz	r0, 800e2fc <rclc_executor_spin_some.part.0+0x2a8>
 800e2f4:	4548      	cmp	r0, r9
 800e2f6:	d001      	beq.n	800e2fc <rclc_executor_spin_some.part.0+0x2a8>
 800e2f8:	4550      	cmp	r0, sl
 800e2fa:	d10c      	bne.n	800e316 <rclc_executor_spin_some.part.0+0x2c2>
 800e2fc:	686b      	ldr	r3, [r5, #4]
 800e2fe:	eb13 000b 	adds.w	r0, r3, fp
 800e302:	d021      	beq.n	800e348 <rclc_executor_spin_some.part.0+0x2f4>
 800e304:	7842      	ldrb	r2, [r0, #1]
 800e306:	2a00      	cmp	r2, #0
 800e308:	d0d8      	beq.n	800e2bc <rclc_executor_spin_some.part.0+0x268>
 800e30a:	2a01      	cmp	r2, #1
 800e30c:	d1df      	bne.n	800e2ce <rclc_executor_spin_some.part.0+0x27a>
 800e30e:	f7ff fbf3 	bl	800daf8 <_rclc_execute.part.0>
 800e312:	2800      	cmp	r0, #0
 800e314:	d0db      	beq.n	800e2ce <rclc_executor_spin_some.part.0+0x27a>
 800e316:	4607      	mov	r7, r0
 800e318:	e796      	b.n	800e248 <rclc_executor_spin_some.part.0+0x1f4>
 800e31a:	6843      	ldr	r3, [r0, #4]
 800e31c:	6a1a      	ldr	r2, [r3, #32]
 800e31e:	2a00      	cmp	r2, #0
 800e320:	d1f5      	bne.n	800e30e <rclc_executor_spin_some.part.0+0x2ba>
 800e322:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e326:	2b00      	cmp	r3, #0
 800e328:	d0d1      	beq.n	800e2ce <rclc_executor_spin_some.part.0+0x27a>
 800e32a:	e7f0      	b.n	800e30e <rclc_executor_spin_some.part.0+0x2ba>
 800e32c:	6843      	ldr	r3, [r0, #4]
 800e32e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e330:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800e334:	d1eb      	bne.n	800e30e <rclc_executor_spin_some.part.0+0x2ba>
 800e336:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	d1e7      	bne.n	800e30e <rclc_executor_spin_some.part.0+0x2ba>
 800e33e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e342:	2b00      	cmp	r3, #0
 800e344:	d0c3      	beq.n	800e2ce <rclc_executor_spin_some.part.0+0x27a>
 800e346:	e7e2      	b.n	800e30e <rclc_executor_spin_some.part.0+0x2ba>
 800e348:	270b      	movs	r7, #11
 800e34a:	e77d      	b.n	800e248 <rclc_executor_spin_some.part.0+0x1f4>
 800e34c:	686a      	ldr	r2, [r5, #4]
 800e34e:	e6e2      	b.n	800e116 <rclc_executor_spin_some.part.0+0xc2>
 800e350:	686a      	ldr	r2, [r5, #4]
 800e352:	e7a2      	b.n	800e29a <rclc_executor_spin_some.part.0+0x246>
 800e354:	6842      	ldr	r2, [r0, #4]
 800e356:	6a11      	ldr	r1, [r2, #32]
 800e358:	2900      	cmp	r1, #0
 800e35a:	f47f af21 	bne.w	800e1a0 <rclc_executor_spin_some.part.0+0x14c>
 800e35e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800e362:	2a00      	cmp	r2, #0
 800e364:	f43f af0a 	beq.w	800e17c <rclc_executor_spin_some.part.0+0x128>
 800e368:	e71a      	b.n	800e1a0 <rclc_executor_spin_some.part.0+0x14c>
 800e36a:	6842      	ldr	r2, [r0, #4]
 800e36c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800e36e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800e372:	f47f af15 	bne.w	800e1a0 <rclc_executor_spin_some.part.0+0x14c>
 800e376:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800e37a:	2900      	cmp	r1, #0
 800e37c:	f47f af10 	bne.w	800e1a0 <rclc_executor_spin_some.part.0+0x14c>
 800e380:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800e384:	2a00      	cmp	r2, #0
 800e386:	f43f aef9 	beq.w	800e17c <rclc_executor_spin_some.part.0+0x128>
 800e38a:	e709      	b.n	800e1a0 <rclc_executor_spin_some.part.0+0x14c>
 800e38c:	686a      	ldr	r2, [r5, #4]
 800e38e:	461c      	mov	r4, r3
 800e390:	e783      	b.n	800e29a <rclc_executor_spin_some.part.0+0x246>
 800e392:	686a      	ldr	r2, [r5, #4]
 800e394:	461c      	mov	r4, r3
 800e396:	e6be      	b.n	800e116 <rclc_executor_spin_some.part.0+0xc2>

0800e398 <rclc_executor_spin>:
 800e398:	b1d0      	cbz	r0, 800e3d0 <rclc_executor_spin+0x38>
 800e39a:	b510      	push	{r4, lr}
 800e39c:	4604      	mov	r4, r0
 800e39e:	b082      	sub	sp, #8
 800e3a0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800e3a4:	6820      	ldr	r0, [r4, #0]
 800e3a6:	e9cd 2300 	strd	r2, r3, [sp]
 800e3aa:	f006 f9bd 	bl	8014728 <rcl_context_is_valid>
 800e3ae:	4601      	mov	r1, r0
 800e3b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	b131      	cbz	r1, 800e3c6 <rclc_executor_spin+0x2e>
 800e3b8:	f7ff fe4c 	bl	800e054 <rclc_executor_spin_some.part.0>
 800e3bc:	f030 0302 	bics.w	r3, r0, #2
 800e3c0:	d0ee      	beq.n	800e3a0 <rclc_executor_spin+0x8>
 800e3c2:	b002      	add	sp, #8
 800e3c4:	bd10      	pop	{r4, pc}
 800e3c6:	f000 f997 	bl	800e6f8 <rcutils_reset_error>
 800e3ca:	2001      	movs	r0, #1
 800e3cc:	b002      	add	sp, #8
 800e3ce:	bd10      	pop	{r4, pc}
 800e3d0:	200b      	movs	r0, #11
 800e3d2:	4770      	bx	lr

0800e3d4 <rclc_executor_handle_counters_zero_init>:
 800e3d4:	b130      	cbz	r0, 800e3e4 <rclc_executor_handle_counters_zero_init+0x10>
 800e3d6:	b508      	push	{r3, lr}
 800e3d8:	2220      	movs	r2, #32
 800e3da:	2100      	movs	r1, #0
 800e3dc:	f00c f8e6 	bl	801a5ac <memset>
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	bd08      	pop	{r3, pc}
 800e3e4:	200b      	movs	r0, #11
 800e3e6:	4770      	bx	lr

0800e3e8 <rclc_executor_handle_init>:
 800e3e8:	b168      	cbz	r0, 800e406 <rclc_executor_handle_init+0x1e>
 800e3ea:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800e410 <rclc_executor_handle_init+0x28>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	220b      	movs	r2, #11
 800e3f2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800e3f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800e3fa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800e3fe:	8002      	strh	r2, [r0, #0]
 800e400:	8703      	strh	r3, [r0, #56]	@ 0x38
 800e402:	4618      	mov	r0, r3
 800e404:	4770      	bx	lr
 800e406:	200b      	movs	r0, #11
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	f3af 8000 	nop.w
	...

0800e418 <rclc_support_init_with_options>:
 800e418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e41c:	b083      	sub	sp, #12
 800e41e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e420:	b340      	cbz	r0, 800e474 <rclc_support_init_with_options+0x5c>
 800e422:	461d      	mov	r5, r3
 800e424:	b333      	cbz	r3, 800e474 <rclc_support_init_with_options+0x5c>
 800e426:	b32e      	cbz	r6, 800e474 <rclc_support_init_with_options+0x5c>
 800e428:	46e9      	mov	r9, sp
 800e42a:	4604      	mov	r4, r0
 800e42c:	4648      	mov	r0, r9
 800e42e:	460f      	mov	r7, r1
 800e430:	4690      	mov	r8, r2
 800e432:	f006 f96f 	bl	8014714 <rcl_get_zero_initialized_context>
 800e436:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e43a:	462a      	mov	r2, r5
 800e43c:	e884 0003 	stmia.w	r4, {r0, r1}
 800e440:	4623      	mov	r3, r4
 800e442:	4641      	mov	r1, r8
 800e444:	4638      	mov	r0, r7
 800e446:	f006 f9d5 	bl	80147f4 <rcl_init>
 800e44a:	4605      	mov	r5, r0
 800e44c:	b960      	cbnz	r0, 800e468 <rclc_support_init_with_options+0x50>
 800e44e:	60a6      	str	r6, [r4, #8]
 800e450:	4632      	mov	r2, r6
 800e452:	f104 010c 	add.w	r1, r4, #12
 800e456:	2003      	movs	r0, #3
 800e458:	f006 ffd4 	bl	8015404 <rcl_clock_init>
 800e45c:	4605      	mov	r5, r0
 800e45e:	b918      	cbnz	r0, 800e468 <rclc_support_init_with_options+0x50>
 800e460:	4628      	mov	r0, r5
 800e462:	b003      	add	sp, #12
 800e464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e468:	f000 f946 	bl	800e6f8 <rcutils_reset_error>
 800e46c:	4628      	mov	r0, r5
 800e46e:	b003      	add	sp, #12
 800e470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e474:	250b      	movs	r5, #11
 800e476:	4628      	mov	r0, r5
 800e478:	b003      	add	sp, #12
 800e47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e47e:	bf00      	nop

0800e480 <rclc_node_init_default>:
 800e480:	b3b8      	cbz	r0, 800e4f2 <rclc_node_init_default+0x72>
 800e482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e486:	460d      	mov	r5, r1
 800e488:	b0a1      	sub	sp, #132	@ 0x84
 800e48a:	b329      	cbz	r1, 800e4d8 <rclc_node_init_default+0x58>
 800e48c:	4616      	mov	r6, r2
 800e48e:	b31a      	cbz	r2, 800e4d8 <rclc_node_init_default+0x58>
 800e490:	461f      	mov	r7, r3
 800e492:	b30b      	cbz	r3, 800e4d8 <rclc_node_init_default+0x58>
 800e494:	f10d 0810 	add.w	r8, sp, #16
 800e498:	4604      	mov	r4, r0
 800e49a:	4640      	mov	r0, r8
 800e49c:	f006 fad0 	bl	8014a40 <rcl_get_zero_initialized_node>
 800e4a0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e4a4:	f10d 0918 	add.w	r9, sp, #24
 800e4a8:	e884 0003 	stmia.w	r4, {r0, r1}
 800e4ac:	4648      	mov	r0, r9
 800e4ae:	f006 fc3f 	bl	8014d30 <rcl_node_get_default_options>
 800e4b2:	4640      	mov	r0, r8
 800e4b4:	f006 fac4 	bl	8014a40 <rcl_get_zero_initialized_node>
 800e4b8:	f8cd 9000 	str.w	r9, [sp]
 800e4bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e4c0:	463b      	mov	r3, r7
 800e4c2:	e884 0003 	stmia.w	r4, {r0, r1}
 800e4c6:	4632      	mov	r2, r6
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f006 fac2 	bl	8014a54 <rcl_node_init>
 800e4d0:	b930      	cbnz	r0, 800e4e0 <rclc_node_init_default+0x60>
 800e4d2:	b021      	add	sp, #132	@ 0x84
 800e4d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4d8:	200b      	movs	r0, #11
 800e4da:	b021      	add	sp, #132	@ 0x84
 800e4dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4e0:	9003      	str	r0, [sp, #12]
 800e4e2:	f000 f909 	bl	800e6f8 <rcutils_reset_error>
 800e4e6:	f000 f907 	bl	800e6f8 <rcutils_reset_error>
 800e4ea:	9803      	ldr	r0, [sp, #12]
 800e4ec:	b021      	add	sp, #132	@ 0x84
 800e4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4f2:	200b      	movs	r0, #11
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop

0800e4f8 <rclc_publisher_init_default>:
 800e4f8:	b368      	cbz	r0, 800e556 <rclc_publisher_init_default+0x5e>
 800e4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fe:	460d      	mov	r5, r1
 800e500:	b0a0      	sub	sp, #128	@ 0x80
 800e502:	b321      	cbz	r1, 800e54e <rclc_publisher_init_default+0x56>
 800e504:	4616      	mov	r6, r2
 800e506:	b312      	cbz	r2, 800e54e <rclc_publisher_init_default+0x56>
 800e508:	461f      	mov	r7, r3
 800e50a:	b303      	cbz	r3, 800e54e <rclc_publisher_init_default+0x56>
 800e50c:	4604      	mov	r4, r0
 800e50e:	f7ff f821 	bl	800d554 <rcl_get_zero_initialized_publisher>
 800e512:	f10d 0810 	add.w	r8, sp, #16
 800e516:	6020      	str	r0, [r4, #0]
 800e518:	4640      	mov	r0, r8
 800e51a:	f7ff f8b7 	bl	800d68c <rcl_publisher_get_default_options>
 800e51e:	490f      	ldr	r1, [pc, #60]	@ (800e55c <rclc_publisher_init_default+0x64>)
 800e520:	2250      	movs	r2, #80	@ 0x50
 800e522:	4640      	mov	r0, r8
 800e524:	f00c f90b 	bl	801a73e <memcpy>
 800e528:	f8cd 8000 	str.w	r8, [sp]
 800e52c:	463b      	mov	r3, r7
 800e52e:	4632      	mov	r2, r6
 800e530:	4629      	mov	r1, r5
 800e532:	4620      	mov	r0, r4
 800e534:	f7ff f814 	bl	800d560 <rcl_publisher_init>
 800e538:	b910      	cbnz	r0, 800e540 <rclc_publisher_init_default+0x48>
 800e53a:	b020      	add	sp, #128	@ 0x80
 800e53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e540:	9003      	str	r0, [sp, #12]
 800e542:	f000 f8d9 	bl	800e6f8 <rcutils_reset_error>
 800e546:	9803      	ldr	r0, [sp, #12]
 800e548:	b020      	add	sp, #128	@ 0x80
 800e54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e54e:	200b      	movs	r0, #11
 800e550:	b020      	add	sp, #128	@ 0x80
 800e552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e556:	200b      	movs	r0, #11
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	0801cfe8 	.word	0x0801cfe8

0800e560 <rclc_service_init_default>:
 800e560:	b368      	cbz	r0, 800e5be <rclc_service_init_default+0x5e>
 800e562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e566:	460d      	mov	r5, r1
 800e568:	b09e      	sub	sp, #120	@ 0x78
 800e56a:	b321      	cbz	r1, 800e5b6 <rclc_service_init_default+0x56>
 800e56c:	4616      	mov	r6, r2
 800e56e:	b312      	cbz	r2, 800e5b6 <rclc_service_init_default+0x56>
 800e570:	461f      	mov	r7, r3
 800e572:	b303      	cbz	r3, 800e5b6 <rclc_service_init_default+0x56>
 800e574:	4604      	mov	r4, r0
 800e576:	f006 fdab 	bl	80150d0 <rcl_get_zero_initialized_service>
 800e57a:	f10d 0810 	add.w	r8, sp, #16
 800e57e:	6020      	str	r0, [r4, #0]
 800e580:	4640      	mov	r0, r8
 800e582:	f006 fe33 	bl	80151ec <rcl_service_get_default_options>
 800e586:	490f      	ldr	r1, [pc, #60]	@ (800e5c4 <rclc_service_init_default+0x64>)
 800e588:	2250      	movs	r2, #80	@ 0x50
 800e58a:	4640      	mov	r0, r8
 800e58c:	f00c f8d7 	bl	801a73e <memcpy>
 800e590:	f8cd 8000 	str.w	r8, [sp]
 800e594:	463b      	mov	r3, r7
 800e596:	4632      	mov	r2, r6
 800e598:	4629      	mov	r1, r5
 800e59a:	4620      	mov	r0, r4
 800e59c:	f006 fd9e 	bl	80150dc <rcl_service_init>
 800e5a0:	b910      	cbnz	r0, 800e5a8 <rclc_service_init_default+0x48>
 800e5a2:	b01e      	add	sp, #120	@ 0x78
 800e5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a8:	9003      	str	r0, [sp, #12]
 800e5aa:	f000 f8a5 	bl	800e6f8 <rcutils_reset_error>
 800e5ae:	9803      	ldr	r0, [sp, #12]
 800e5b0:	b01e      	add	sp, #120	@ 0x78
 800e5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b6:	200b      	movs	r0, #11
 800e5b8:	b01e      	add	sp, #120	@ 0x78
 800e5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5be:	200b      	movs	r0, #11
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	0801d038 	.word	0x0801d038

0800e5c8 <rclc_timer_init_default>:
 800e5c8:	b360      	cbz	r0, 800e624 <rclc_timer_init_default+0x5c>
 800e5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ce:	460e      	mov	r6, r1
 800e5d0:	b08a      	sub	sp, #40	@ 0x28
 800e5d2:	b319      	cbz	r1, 800e61c <rclc_timer_init_default+0x54>
 800e5d4:	4690      	mov	r8, r2
 800e5d6:	461f      	mov	r7, r3
 800e5d8:	4605      	mov	r5, r0
 800e5da:	f007 f8f1 	bl	80157c0 <rcl_get_zero_initialized_timer>
 800e5de:	68b4      	ldr	r4, [r6, #8]
 800e5e0:	6028      	str	r0, [r5, #0]
 800e5e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5e4:	f10d 0c0c 	add.w	ip, sp, #12
 800e5e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5ec:	6823      	ldr	r3, [r4, #0]
 800e5ee:	f8cc 3000 	str.w	r3, [ip]
 800e5f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5f4:	9302      	str	r3, [sp, #8]
 800e5f6:	e9cd 8700 	strd	r8, r7, [sp]
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	4632      	mov	r2, r6
 800e5fe:	f106 010c 	add.w	r1, r6, #12
 800e602:	f007 f8e5 	bl	80157d0 <rcl_timer_init>
 800e606:	b910      	cbnz	r0, 800e60e <rclc_timer_init_default+0x46>
 800e608:	b00a      	add	sp, #40	@ 0x28
 800e60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e60e:	9009      	str	r0, [sp, #36]	@ 0x24
 800e610:	f000 f872 	bl	800e6f8 <rcutils_reset_error>
 800e614:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e616:	b00a      	add	sp, #40	@ 0x28
 800e618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e61c:	200b      	movs	r0, #11
 800e61e:	b00a      	add	sp, #40	@ 0x28
 800e620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e624:	200b      	movs	r0, #11
 800e626:	4770      	bx	lr

0800e628 <__default_zero_allocate>:
 800e628:	f00b bad6 	b.w	8019bd8 <calloc>

0800e62c <__default_reallocate>:
 800e62c:	f00b bc74 	b.w	8019f18 <realloc>

0800e630 <__default_deallocate>:
 800e630:	f00b bb50 	b.w	8019cd4 <free>

0800e634 <__default_allocate>:
 800e634:	f00b bb46 	b.w	8019cc4 <malloc>

0800e638 <rcutils_get_zero_initialized_allocator>:
 800e638:	b510      	push	{r4, lr}
 800e63a:	4c05      	ldr	r4, [pc, #20]	@ (800e650 <rcutils_get_zero_initialized_allocator+0x18>)
 800e63c:	4686      	mov	lr, r0
 800e63e:	4684      	mov	ip, r0
 800e640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e642:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	f8cc 3000 	str.w	r3, [ip]
 800e64c:	4670      	mov	r0, lr
 800e64e:	bd10      	pop	{r4, pc}
 800e650:	0801d088 	.word	0x0801d088

0800e654 <rcutils_set_default_allocator>:
 800e654:	b1a8      	cbz	r0, 800e682 <rcutils_set_default_allocator+0x2e>
 800e656:	6802      	ldr	r2, [r0, #0]
 800e658:	b1a2      	cbz	r2, 800e684 <rcutils_set_default_allocator+0x30>
 800e65a:	6841      	ldr	r1, [r0, #4]
 800e65c:	b1a1      	cbz	r1, 800e688 <rcutils_set_default_allocator+0x34>
 800e65e:	b410      	push	{r4}
 800e660:	68c4      	ldr	r4, [r0, #12]
 800e662:	b164      	cbz	r4, 800e67e <rcutils_set_default_allocator+0x2a>
 800e664:	6880      	ldr	r0, [r0, #8]
 800e666:	b138      	cbz	r0, 800e678 <rcutils_set_default_allocator+0x24>
 800e668:	4b08      	ldr	r3, [pc, #32]	@ (800e68c <rcutils_set_default_allocator+0x38>)
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	2200      	movs	r2, #0
 800e66e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e672:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e676:	2001      	movs	r0, #1
 800e678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	4620      	mov	r0, r4
 800e680:	e7fa      	b.n	800e678 <rcutils_set_default_allocator+0x24>
 800e682:	4770      	bx	lr
 800e684:	4610      	mov	r0, r2
 800e686:	4770      	bx	lr
 800e688:	4608      	mov	r0, r1
 800e68a:	4770      	bx	lr
 800e68c:	200003a8 	.word	0x200003a8

0800e690 <rcutils_get_default_allocator>:
 800e690:	b510      	push	{r4, lr}
 800e692:	4c05      	ldr	r4, [pc, #20]	@ (800e6a8 <rcutils_get_default_allocator+0x18>)
 800e694:	4686      	mov	lr, r0
 800e696:	4684      	mov	ip, r0
 800e698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e69a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	f8cc 3000 	str.w	r3, [ip]
 800e6a4:	4670      	mov	r0, lr
 800e6a6:	bd10      	pop	{r4, pc}
 800e6a8:	200003a8 	.word	0x200003a8

0800e6ac <rcutils_allocator_is_valid>:
 800e6ac:	b158      	cbz	r0, 800e6c6 <rcutils_allocator_is_valid+0x1a>
 800e6ae:	6803      	ldr	r3, [r0, #0]
 800e6b0:	b143      	cbz	r3, 800e6c4 <rcutils_allocator_is_valid+0x18>
 800e6b2:	6843      	ldr	r3, [r0, #4]
 800e6b4:	b133      	cbz	r3, 800e6c4 <rcutils_allocator_is_valid+0x18>
 800e6b6:	68c3      	ldr	r3, [r0, #12]
 800e6b8:	b123      	cbz	r3, 800e6c4 <rcutils_allocator_is_valid+0x18>
 800e6ba:	6880      	ldr	r0, [r0, #8]
 800e6bc:	3800      	subs	r0, #0
 800e6be:	bf18      	it	ne
 800e6c0:	2001      	movne	r0, #1
 800e6c2:	4770      	bx	lr
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	4770      	bx	lr

0800e6c8 <rcutils_get_error_string>:
 800e6c8:	4b06      	ldr	r3, [pc, #24]	@ (800e6e4 <rcutils_get_error_string+0x1c>)
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	b13b      	cbz	r3, 800e6de <rcutils_get_error_string+0x16>
 800e6ce:	4b06      	ldr	r3, [pc, #24]	@ (800e6e8 <rcutils_get_error_string+0x20>)
 800e6d0:	781a      	ldrb	r2, [r3, #0]
 800e6d2:	b90a      	cbnz	r2, 800e6d8 <rcutils_get_error_string+0x10>
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	701a      	strb	r2, [r3, #0]
 800e6d8:	4b04      	ldr	r3, [pc, #16]	@ (800e6ec <rcutils_get_error_string+0x24>)
 800e6da:	7818      	ldrb	r0, [r3, #0]
 800e6dc:	4770      	bx	lr
 800e6de:	4b04      	ldr	r3, [pc, #16]	@ (800e6f0 <rcutils_get_error_string+0x28>)
 800e6e0:	7818      	ldrb	r0, [r3, #0]
 800e6e2:	4770      	bx	lr
 800e6e4:	20007538 	.word	0x20007538
 800e6e8:	20007551 	.word	0x20007551
 800e6ec:	20007550 	.word	0x20007550
 800e6f0:	0801cc90 	.word	0x0801cc90
 800e6f4:	00000000 	.word	0x00000000

0800e6f8 <rcutils_reset_error>:
 800e6f8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e718 <rcutils_reset_error+0x20>
 800e6fc:	4a08      	ldr	r2, [pc, #32]	@ (800e720 <rcutils_reset_error+0x28>)
 800e6fe:	4809      	ldr	r0, [pc, #36]	@ (800e724 <rcutils_reset_error+0x2c>)
 800e700:	4909      	ldr	r1, [pc, #36]	@ (800e728 <rcutils_reset_error+0x30>)
 800e702:	2300      	movs	r3, #0
 800e704:	8013      	strh	r3, [r2, #0]
 800e706:	ed82 7b02 	vstr	d7, [r2, #8]
 800e70a:	4a08      	ldr	r2, [pc, #32]	@ (800e72c <rcutils_reset_error+0x34>)
 800e70c:	7003      	strb	r3, [r0, #0]
 800e70e:	700b      	strb	r3, [r1, #0]
 800e710:	7013      	strb	r3, [r2, #0]
 800e712:	4770      	bx	lr
 800e714:	f3af 8000 	nop.w
	...
 800e720:	20007540 	.word	0x20007540
 800e724:	20007551 	.word	0x20007551
 800e728:	20007550 	.word	0x20007550
 800e72c:	20007538 	.word	0x20007538

0800e730 <rcutils_system_time_now>:
 800e730:	b308      	cbz	r0, 800e776 <rcutils_system_time_now+0x46>
 800e732:	b570      	push	{r4, r5, r6, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	4604      	mov	r4, r0
 800e738:	4669      	mov	r1, sp
 800e73a:	2001      	movs	r0, #1
 800e73c:	f7f4 fdec 	bl	8003318 <clock_gettime>
 800e740:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e744:	2d00      	cmp	r5, #0
 800e746:	db13      	blt.n	800e770 <rcutils_system_time_now+0x40>
 800e748:	9902      	ldr	r1, [sp, #8]
 800e74a:	2900      	cmp	r1, #0
 800e74c:	db0d      	blt.n	800e76a <rcutils_system_time_now+0x3a>
 800e74e:	4e0b      	ldr	r6, [pc, #44]	@ (800e77c <rcutils_system_time_now+0x4c>)
 800e750:	fba3 3206 	umull	r3, r2, r3, r6
 800e754:	185b      	adds	r3, r3, r1
 800e756:	fb06 2205 	mla	r2, r6, r5, r2
 800e75a:	f04f 0000 	mov.w	r0, #0
 800e75e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e762:	e9c4 3200 	strd	r3, r2, [r4]
 800e766:	b004      	add	sp, #16
 800e768:	bd70      	pop	{r4, r5, r6, pc}
 800e76a:	ea53 0205 	orrs.w	r2, r3, r5
 800e76e:	d1ee      	bne.n	800e74e <rcutils_system_time_now+0x1e>
 800e770:	2002      	movs	r0, #2
 800e772:	b004      	add	sp, #16
 800e774:	bd70      	pop	{r4, r5, r6, pc}
 800e776:	200b      	movs	r0, #11
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	3b9aca00 	.word	0x3b9aca00

0800e780 <rcutils_steady_time_now>:
 800e780:	b308      	cbz	r0, 800e7c6 <rcutils_steady_time_now+0x46>
 800e782:	b570      	push	{r4, r5, r6, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	4604      	mov	r4, r0
 800e788:	4669      	mov	r1, sp
 800e78a:	2000      	movs	r0, #0
 800e78c:	f7f4 fdc4 	bl	8003318 <clock_gettime>
 800e790:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e794:	2d00      	cmp	r5, #0
 800e796:	db13      	blt.n	800e7c0 <rcutils_steady_time_now+0x40>
 800e798:	9902      	ldr	r1, [sp, #8]
 800e79a:	2900      	cmp	r1, #0
 800e79c:	db0d      	blt.n	800e7ba <rcutils_steady_time_now+0x3a>
 800e79e:	4e0b      	ldr	r6, [pc, #44]	@ (800e7cc <rcutils_steady_time_now+0x4c>)
 800e7a0:	fba3 3206 	umull	r3, r2, r3, r6
 800e7a4:	185b      	adds	r3, r3, r1
 800e7a6:	fb06 2205 	mla	r2, r6, r5, r2
 800e7aa:	f04f 0000 	mov.w	r0, #0
 800e7ae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e7b2:	e9c4 3200 	strd	r3, r2, [r4]
 800e7b6:	b004      	add	sp, #16
 800e7b8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ba:	ea53 0205 	orrs.w	r2, r3, r5
 800e7be:	d1ee      	bne.n	800e79e <rcutils_steady_time_now+0x1e>
 800e7c0:	2002      	movs	r0, #2
 800e7c2:	b004      	add	sp, #16
 800e7c4:	bd70      	pop	{r4, r5, r6, pc}
 800e7c6:	200b      	movs	r0, #11
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	3b9aca00 	.word	0x3b9aca00

0800e7d0 <rmw_get_zero_initialized_init_options>:
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	2238      	movs	r2, #56	@ 0x38
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	f00b fee8 	bl	801a5ac <memset>
 800e7dc:	f104 0010 	add.w	r0, r4, #16
 800e7e0:	f000 f80a 	bl	800e7f8 <rmw_get_default_security_options>
 800e7e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7e8:	60e3      	str	r3, [r4, #12]
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	bd10      	pop	{r4, pc}
 800e7ee:	bf00      	nop

0800e7f0 <rmw_get_default_publisher_options>:
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	6002      	str	r2, [r0, #0]
 800e7f4:	7102      	strb	r2, [r0, #4]
 800e7f6:	4770      	bx	lr

0800e7f8 <rmw_get_default_security_options>:
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	7002      	strb	r2, [r0, #0]
 800e7fc:	6042      	str	r2, [r0, #4]
 800e7fe:	4770      	bx	lr

0800e800 <rmw_uros_set_custom_transport>:
 800e800:	b470      	push	{r4, r5, r6}
 800e802:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e806:	b162      	cbz	r2, 800e822 <rmw_uros_set_custom_transport+0x22>
 800e808:	b15b      	cbz	r3, 800e822 <rmw_uros_set_custom_transport+0x22>
 800e80a:	b155      	cbz	r5, 800e822 <rmw_uros_set_custom_transport+0x22>
 800e80c:	b14e      	cbz	r6, 800e822 <rmw_uros_set_custom_transport+0x22>
 800e80e:	4c06      	ldr	r4, [pc, #24]	@ (800e828 <rmw_uros_set_custom_transport+0x28>)
 800e810:	7020      	strb	r0, [r4, #0]
 800e812:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e816:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e81a:	6166      	str	r6, [r4, #20]
 800e81c:	2000      	movs	r0, #0
 800e81e:	bc70      	pop	{r4, r5, r6}
 800e820:	4770      	bx	lr
 800e822:	200b      	movs	r0, #11
 800e824:	bc70      	pop	{r4, r5, r6}
 800e826:	4770      	bx	lr
 800e828:	20007554 	.word	0x20007554

0800e82c <rmw_init_options_init>:
 800e82c:	b084      	sub	sp, #16
 800e82e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e830:	b083      	sub	sp, #12
 800e832:	ad09      	add	r5, sp, #36	@ 0x24
 800e834:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e838:	b130      	cbz	r0, 800e848 <rmw_init_options_init+0x1c>
 800e83a:	4604      	mov	r4, r0
 800e83c:	4628      	mov	r0, r5
 800e83e:	f7ff ff35 	bl	800e6ac <rcutils_allocator_is_valid>
 800e842:	b108      	cbz	r0, 800e848 <rmw_init_options_init+0x1c>
 800e844:	68a6      	ldr	r6, [r4, #8]
 800e846:	b12e      	cbz	r6, 800e854 <rmw_init_options_init+0x28>
 800e848:	200b      	movs	r0, #11
 800e84a:	b003      	add	sp, #12
 800e84c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e850:	b004      	add	sp, #16
 800e852:	4770      	bx	lr
 800e854:	2200      	movs	r2, #0
 800e856:	2300      	movs	r3, #0
 800e858:	e9c4 2300 	strd	r2, r3, [r4]
 800e85c:	4b22      	ldr	r3, [pc, #136]	@ (800e8e8 <rmw_init_options_init+0xbc>)
 800e85e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800e8f8 <rmw_init_options_init+0xcc>
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	60a3      	str	r3, [r4, #8]
 800e866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e868:	f104 0c20 	add.w	ip, r4, #32
 800e86c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e870:	466f      	mov	r7, sp
 800e872:	682b      	ldr	r3, [r5, #0]
 800e874:	f8cc 3000 	str.w	r3, [ip]
 800e878:	4638      	mov	r0, r7
 800e87a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800e87e:	60e6      	str	r6, [r4, #12]
 800e880:	f7ff ffba 	bl	800e7f8 <rmw_get_default_security_options>
 800e884:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e888:	f104 0310 	add.w	r3, r4, #16
 800e88c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e890:	2203      	movs	r2, #3
 800e892:	4816      	ldr	r0, [pc, #88]	@ (800e8ec <rmw_init_options_init+0xc0>)
 800e894:	4916      	ldr	r1, [pc, #88]	@ (800e8f0 <rmw_init_options_init+0xc4>)
 800e896:	7626      	strb	r6, [r4, #24]
 800e898:	f000 ffbc 	bl	800f814 <rmw_uxrce_init_init_options_impl_memory>
 800e89c:	4813      	ldr	r0, [pc, #76]	@ (800e8ec <rmw_init_options_init+0xc0>)
 800e89e:	f009 fb1b 	bl	8017ed8 <get_memory>
 800e8a2:	b1f0      	cbz	r0, 800e8e2 <rmw_init_options_init+0xb6>
 800e8a4:	4a13      	ldr	r2, [pc, #76]	@ (800e8f4 <rmw_init_options_init+0xc8>)
 800e8a6:	6883      	ldr	r3, [r0, #8]
 800e8a8:	6851      	ldr	r1, [r2, #4]
 800e8aa:	7810      	ldrb	r0, [r2, #0]
 800e8ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8ae:	7418      	strb	r0, [r3, #16]
 800e8b0:	6159      	str	r1, [r3, #20]
 800e8b2:	68d1      	ldr	r1, [r2, #12]
 800e8b4:	61d9      	str	r1, [r3, #28]
 800e8b6:	6911      	ldr	r1, [r2, #16]
 800e8b8:	6219      	str	r1, [r3, #32]
 800e8ba:	6951      	ldr	r1, [r2, #20]
 800e8bc:	6892      	ldr	r2, [r2, #8]
 800e8be:	619a      	str	r2, [r3, #24]
 800e8c0:	6259      	str	r1, [r3, #36]	@ 0x24
 800e8c2:	f004 fd07 	bl	80132d4 <uxr_nanos>
 800e8c6:	f00b fabb 	bl	8019e40 <srand>
 800e8ca:	f00b fae7 	bl	8019e9c <rand>
 800e8ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e8d0:	6298      	str	r0, [r3, #40]	@ 0x28
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d0f9      	beq.n	800e8ca <rmw_init_options_init+0x9e>
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	b003      	add	sp, #12
 800e8da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e8de:	b004      	add	sp, #16
 800e8e0:	4770      	bx	lr
 800e8e2:	2001      	movs	r0, #1
 800e8e4:	e7b1      	b.n	800e84a <rmw_init_options_init+0x1e>
 800e8e6:	bf00      	nop
 800e8e8:	0801de80 	.word	0x0801de80
 800e8ec:	2000c074 	.word	0x2000c074
 800e8f0:	20007848 	.word	0x20007848
 800e8f4:	20007554 	.word	0x20007554
 800e8f8:	0801d09c 	.word	0x0801d09c

0800e8fc <rmw_init_options_copy>:
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	b158      	cbz	r0, 800e918 <rmw_init_options_copy+0x1c>
 800e900:	460d      	mov	r5, r1
 800e902:	b149      	cbz	r1, 800e918 <rmw_init_options_copy+0x1c>
 800e904:	4604      	mov	r4, r0
 800e906:	6880      	ldr	r0, [r0, #8]
 800e908:	b120      	cbz	r0, 800e914 <rmw_init_options_copy+0x18>
 800e90a:	4b1e      	ldr	r3, [pc, #120]	@ (800e984 <rmw_init_options_copy+0x88>)
 800e90c:	6819      	ldr	r1, [r3, #0]
 800e90e:	f7f1 fc87 	bl	8000220 <strcmp>
 800e912:	bb90      	cbnz	r0, 800e97a <rmw_init_options_copy+0x7e>
 800e914:	68ab      	ldr	r3, [r5, #8]
 800e916:	b113      	cbz	r3, 800e91e <rmw_init_options_copy+0x22>
 800e918:	250b      	movs	r5, #11
 800e91a:	4628      	mov	r0, r5
 800e91c:	bd70      	pop	{r4, r5, r6, pc}
 800e91e:	4623      	mov	r3, r4
 800e920:	462a      	mov	r2, r5
 800e922:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800e926:	f8d3 c000 	ldr.w	ip, [r3]
 800e92a:	6858      	ldr	r0, [r3, #4]
 800e92c:	6899      	ldr	r1, [r3, #8]
 800e92e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e932:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e936:	3310      	adds	r3, #16
 800e938:	42b3      	cmp	r3, r6
 800e93a:	f8c2 c000 	str.w	ip, [r2]
 800e93e:	6050      	str	r0, [r2, #4]
 800e940:	6091      	str	r1, [r2, #8]
 800e942:	f102 0210 	add.w	r2, r2, #16
 800e946:	d1ee      	bne.n	800e926 <rmw_init_options_copy+0x2a>
 800e948:	6819      	ldr	r1, [r3, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	480e      	ldr	r0, [pc, #56]	@ (800e988 <rmw_init_options_copy+0x8c>)
 800e94e:	6053      	str	r3, [r2, #4]
 800e950:	6011      	str	r1, [r2, #0]
 800e952:	f009 fac1 	bl	8017ed8 <get_memory>
 800e956:	b198      	cbz	r0, 800e980 <rmw_init_options_copy+0x84>
 800e958:	6883      	ldr	r3, [r0, #8]
 800e95a:	636b      	str	r3, [r5, #52]	@ 0x34
 800e95c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e95e:	f102 0c10 	add.w	ip, r2, #16
 800e962:	f103 0410 	add.w	r4, r3, #16
 800e966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e96a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e96c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e970:	2500      	movs	r5, #0
 800e972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e976:	4628      	mov	r0, r5
 800e978:	bd70      	pop	{r4, r5, r6, pc}
 800e97a:	250c      	movs	r5, #12
 800e97c:	4628      	mov	r0, r5
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
 800e980:	2501      	movs	r5, #1
 800e982:	e7ca      	b.n	800e91a <rmw_init_options_copy+0x1e>
 800e984:	0801de80 	.word	0x0801de80
 800e988:	2000c074 	.word	0x2000c074

0800e98c <rmw_init_options_fini>:
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d03d      	beq.n	800ea0c <rmw_init_options_fini+0x80>
 800e990:	b510      	push	{r4, lr}
 800e992:	4604      	mov	r4, r0
 800e994:	b08e      	sub	sp, #56	@ 0x38
 800e996:	3020      	adds	r0, #32
 800e998:	f7ff fe88 	bl	800e6ac <rcutils_allocator_is_valid>
 800e99c:	b360      	cbz	r0, 800e9f8 <rmw_init_options_fini+0x6c>
 800e99e:	68a0      	ldr	r0, [r4, #8]
 800e9a0:	b120      	cbz	r0, 800e9ac <rmw_init_options_fini+0x20>
 800e9a2:	4b1c      	ldr	r3, [pc, #112]	@ (800ea14 <rmw_init_options_fini+0x88>)
 800e9a4:	6819      	ldr	r1, [r3, #0]
 800e9a6:	f7f1 fc3b 	bl	8000220 <strcmp>
 800e9aa:	bb68      	cbnz	r0, 800ea08 <rmw_init_options_fini+0x7c>
 800e9ac:	4b1a      	ldr	r3, [pc, #104]	@ (800ea18 <rmw_init_options_fini+0x8c>)
 800e9ae:	6819      	ldr	r1, [r3, #0]
 800e9b0:	b331      	cbz	r1, 800ea00 <rmw_init_options_fini+0x74>
 800e9b2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e9b4:	e001      	b.n	800e9ba <rmw_init_options_fini+0x2e>
 800e9b6:	6849      	ldr	r1, [r1, #4]
 800e9b8:	b311      	cbz	r1, 800ea00 <rmw_init_options_fini+0x74>
 800e9ba:	688b      	ldr	r3, [r1, #8]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d1fa      	bne.n	800e9b6 <rmw_init_options_fini+0x2a>
 800e9c0:	4815      	ldr	r0, [pc, #84]	@ (800ea18 <rmw_init_options_fini+0x8c>)
 800e9c2:	f009 fa99 	bl	8017ef8 <put_memory>
 800e9c6:	4668      	mov	r0, sp
 800e9c8:	f7ff ff02 	bl	800e7d0 <rmw_get_zero_initialized_init_options>
 800e9cc:	46ee      	mov	lr, sp
 800e9ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e9d2:	46a4      	mov	ip, r4
 800e9d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e9dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e9e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e9ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	b00e      	add	sp, #56	@ 0x38
 800e9f6:	bd10      	pop	{r4, pc}
 800e9f8:	230b      	movs	r3, #11
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	b00e      	add	sp, #56	@ 0x38
 800e9fe:	bd10      	pop	{r4, pc}
 800ea00:	2301      	movs	r3, #1
 800ea02:	4618      	mov	r0, r3
 800ea04:	b00e      	add	sp, #56	@ 0x38
 800ea06:	bd10      	pop	{r4, pc}
 800ea08:	230c      	movs	r3, #12
 800ea0a:	e7f2      	b.n	800e9f2 <rmw_init_options_fini+0x66>
 800ea0c:	230b      	movs	r3, #11
 800ea0e:	4618      	mov	r0, r3
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	0801de80 	.word	0x0801de80
 800ea18:	2000c074 	.word	0x2000c074

0800ea1c <rmw_init>:
 800ea1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea20:	b083      	sub	sp, #12
 800ea22:	2800      	cmp	r0, #0
 800ea24:	f000 80d3 	beq.w	800ebce <rmw_init+0x1b2>
 800ea28:	460e      	mov	r6, r1
 800ea2a:	2900      	cmp	r1, #0
 800ea2c:	f000 80cf 	beq.w	800ebce <rmw_init+0x1b2>
 800ea30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ea32:	4605      	mov	r5, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 80ca 	beq.w	800ebce <rmw_init+0x1b2>
 800ea3a:	4b78      	ldr	r3, [pc, #480]	@ (800ec1c <rmw_init+0x200>)
 800ea3c:	6880      	ldr	r0, [r0, #8]
 800ea3e:	681f      	ldr	r7, [r3, #0]
 800ea40:	b128      	cbz	r0, 800ea4e <rmw_init+0x32>
 800ea42:	4639      	mov	r1, r7
 800ea44:	f7f1 fbec 	bl	8000220 <strcmp>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	f040 80ca 	bne.w	800ebe2 <rmw_init+0x1c6>
 800ea4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea52:	4c73      	ldr	r4, [pc, #460]	@ (800ec20 <rmw_init+0x204>)
 800ea54:	4973      	ldr	r1, [pc, #460]	@ (800ec24 <rmw_init+0x208>)
 800ea56:	4874      	ldr	r0, [pc, #464]	@ (800ec28 <rmw_init+0x20c>)
 800ea58:	60b7      	str	r7, [r6, #8]
 800ea5a:	e9c6 2300 	strd	r2, r3, [r6]
 800ea5e:	68eb      	ldr	r3, [r5, #12]
 800ea60:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ea62:	2201      	movs	r2, #1
 800ea64:	f000 fe76 	bl	800f754 <rmw_uxrce_init_session_memory>
 800ea68:	4620      	mov	r0, r4
 800ea6a:	4970      	ldr	r1, [pc, #448]	@ (800ec2c <rmw_init+0x210>)
 800ea6c:	2204      	movs	r2, #4
 800ea6e:	f000 feb1 	bl	800f7d4 <rmw_uxrce_init_static_input_buffer_memory>
 800ea72:	f04f 0800 	mov.w	r8, #0
 800ea76:	486c      	ldr	r0, [pc, #432]	@ (800ec28 <rmw_init+0x20c>)
 800ea78:	f884 800d 	strb.w	r8, [r4, #13]
 800ea7c:	f009 fa2c 	bl	8017ed8 <get_memory>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	f000 80a9 	beq.w	800ebd8 <rmw_init+0x1bc>
 800ea86:	6884      	ldr	r4, [r0, #8]
 800ea88:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ea8a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ea8c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ea90:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ea94:	9101      	str	r1, [sp, #4]
 800ea96:	6a00      	ldr	r0, [r0, #32]
 800ea98:	9000      	str	r0, [sp, #0]
 800ea9a:	f104 0910 	add.w	r9, r4, #16
 800ea9e:	4661      	mov	r1, ip
 800eaa0:	4648      	mov	r0, r9
 800eaa2:	f002 fb4d 	bl	8011140 <uxr_set_custom_transport_callbacks>
 800eaa6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800eaaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eaae:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800eab2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800eab6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800eaba:	495d      	ldr	r1, [pc, #372]	@ (800ec30 <rmw_init+0x214>)
 800eabc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800eac0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800eac4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800eac8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800eacc:	4859      	ldr	r0, [pc, #356]	@ (800ec34 <rmw_init+0x218>)
 800eace:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ead2:	2201      	movs	r2, #1
 800ead4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ead6:	f000 fe1d 	bl	800f714 <rmw_uxrce_init_node_memory>
 800eada:	4957      	ldr	r1, [pc, #348]	@ (800ec38 <rmw_init+0x21c>)
 800eadc:	4857      	ldr	r0, [pc, #348]	@ (800ec3c <rmw_init+0x220>)
 800eade:	2205      	movs	r2, #5
 800eae0:	f000 fdf8 	bl	800f6d4 <rmw_uxrce_init_subscription_memory>
 800eae4:	4956      	ldr	r1, [pc, #344]	@ (800ec40 <rmw_init+0x224>)
 800eae6:	4857      	ldr	r0, [pc, #348]	@ (800ec44 <rmw_init+0x228>)
 800eae8:	220a      	movs	r2, #10
 800eaea:	f000 fdd3 	bl	800f694 <rmw_uxrce_init_publisher_memory>
 800eaee:	4956      	ldr	r1, [pc, #344]	@ (800ec48 <rmw_init+0x22c>)
 800eaf0:	4856      	ldr	r0, [pc, #344]	@ (800ec4c <rmw_init+0x230>)
 800eaf2:	2202      	movs	r2, #2
 800eaf4:	f000 fd8e 	bl	800f614 <rmw_uxrce_init_service_memory>
 800eaf8:	4955      	ldr	r1, [pc, #340]	@ (800ec50 <rmw_init+0x234>)
 800eafa:	4856      	ldr	r0, [pc, #344]	@ (800ec54 <rmw_init+0x238>)
 800eafc:	2201      	movs	r2, #1
 800eafe:	f000 fda9 	bl	800f654 <rmw_uxrce_init_client_memory>
 800eb02:	4955      	ldr	r1, [pc, #340]	@ (800ec58 <rmw_init+0x23c>)
 800eb04:	4855      	ldr	r0, [pc, #340]	@ (800ec5c <rmw_init+0x240>)
 800eb06:	220f      	movs	r2, #15
 800eb08:	f000 fe44 	bl	800f794 <rmw_uxrce_init_topic_memory>
 800eb0c:	4954      	ldr	r1, [pc, #336]	@ (800ec60 <rmw_init+0x244>)
 800eb0e:	4855      	ldr	r0, [pc, #340]	@ (800ec64 <rmw_init+0x248>)
 800eb10:	2203      	movs	r2, #3
 800eb12:	f000 fe7f 	bl	800f814 <rmw_uxrce_init_init_options_impl_memory>
 800eb16:	4954      	ldr	r1, [pc, #336]	@ (800ec68 <rmw_init+0x24c>)
 800eb18:	4854      	ldr	r0, [pc, #336]	@ (800ec6c <rmw_init+0x250>)
 800eb1a:	2204      	movs	r2, #4
 800eb1c:	f000 fe9a 	bl	800f854 <rmw_uxrce_init_wait_set_memory>
 800eb20:	4953      	ldr	r1, [pc, #332]	@ (800ec70 <rmw_init+0x254>)
 800eb22:	4854      	ldr	r0, [pc, #336]	@ (800ec74 <rmw_init+0x258>)
 800eb24:	2204      	movs	r2, #4
 800eb26:	f000 feb5 	bl	800f894 <rmw_uxrce_init_guard_condition_memory>
 800eb2a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800eb2c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800eb2e:	4642      	mov	r2, r8
 800eb30:	f000 fd2a 	bl	800f588 <rmw_uxrce_transport_init>
 800eb34:	4607      	mov	r7, r0
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d158      	bne.n	800ebec <rmw_init+0x1d0>
 800eb3a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800eb3c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800eb40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800eb42:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800eb46:	4628      	mov	r0, r5
 800eb48:	f002 fd2e 	bl	80115a8 <uxr_init_session>
 800eb4c:	494a      	ldr	r1, [pc, #296]	@ (800ec78 <rmw_init+0x25c>)
 800eb4e:	4622      	mov	r2, r4
 800eb50:	4628      	mov	r0, r5
 800eb52:	f002 fd4d 	bl	80115f0 <uxr_set_topic_callback>
 800eb56:	4949      	ldr	r1, [pc, #292]	@ (800ec7c <rmw_init+0x260>)
 800eb58:	463a      	mov	r2, r7
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f002 fd44 	bl	80115e8 <uxr_set_status_callback>
 800eb60:	4947      	ldr	r1, [pc, #284]	@ (800ec80 <rmw_init+0x264>)
 800eb62:	463a      	mov	r2, r7
 800eb64:	4628      	mov	r0, r5
 800eb66:	f002 fd47 	bl	80115f8 <uxr_set_request_callback>
 800eb6a:	4946      	ldr	r1, [pc, #280]	@ (800ec84 <rmw_init+0x268>)
 800eb6c:	463a      	mov	r2, r7
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f002 fd46 	bl	8011600 <uxr_set_reply_callback>
 800eb74:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800eb78:	2304      	movs	r3, #4
 800eb7a:	0092      	lsls	r2, r2, #2
 800eb7c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800eb80:	4628      	mov	r0, r5
 800eb82:	f002 fd7b 	bl	801167c <uxr_create_input_reliable_stream>
 800eb86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800eb8a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800eb8e:	0092      	lsls	r2, r2, #2
 800eb90:	2304      	movs	r3, #4
 800eb92:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800eb96:	4628      	mov	r0, r5
 800eb98:	f002 fd48 	bl	801162c <uxr_create_output_reliable_stream>
 800eb9c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800eba0:	4628      	mov	r0, r5
 800eba2:	f002 fd65 	bl	8011670 <uxr_create_input_best_effort_stream>
 800eba6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800ebaa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800ebae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ebb2:	3114      	adds	r1, #20
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f002 fd27 	bl	8011608 <uxr_create_output_best_effort_stream>
 800ebba:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f003 fb1a 	bl	80121f8 <uxr_create_session>
 800ebc4:	b1f8      	cbz	r0, 800ec06 <rmw_init+0x1ea>
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	b003      	add	sp, #12
 800ebca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebce:	270b      	movs	r7, #11
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	b003      	add	sp, #12
 800ebd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd8:	2701      	movs	r7, #1
 800ebda:	4638      	mov	r0, r7
 800ebdc:	b003      	add	sp, #12
 800ebde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebe2:	270c      	movs	r7, #12
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	b003      	add	sp, #12
 800ebe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebec:	4648      	mov	r0, r9
 800ebee:	f002 fae9 	bl	80111c4 <uxr_close_custom_transport>
 800ebf2:	480d      	ldr	r0, [pc, #52]	@ (800ec28 <rmw_init+0x20c>)
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	f009 f97f 	bl	8017ef8 <put_memory>
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ec00:	b003      	add	sp, #12
 800ec02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec06:	4648      	mov	r0, r9
 800ec08:	f002 fadc 	bl	80111c4 <uxr_close_custom_transport>
 800ec0c:	4806      	ldr	r0, [pc, #24]	@ (800ec28 <rmw_init+0x20c>)
 800ec0e:	4621      	mov	r1, r4
 800ec10:	f009 f972 	bl	8017ef8 <put_memory>
 800ec14:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800ec16:	2701      	movs	r7, #1
 800ec18:	e7d5      	b.n	800ebc6 <rmw_init+0x1aa>
 800ec1a:	bf00      	nop
 800ec1c:	0801de80 	.word	0x0801de80
 800ec20:	2000c0c4 	.word	0x2000c0c4
 800ec24:	20008370 	.word	0x20008370
 800ec28:	2000c0b4 	.word	0x2000c0b4
 800ec2c:	20009918 	.word	0x20009918
 800ec30:	200078cc 	.word	0x200078cc
 800ec34:	2000c084 	.word	0x2000c084
 800ec38:	2000ba18 	.word	0x2000ba18
 800ec3c:	2000c0d4 	.word	0x2000c0d4
 800ec40:	20007970 	.word	0x20007970
 800ec44:	2000c094 	.word	0x2000c094
 800ec48:	200081e0 	.word	0x200081e0
 800ec4c:	2000c0a4 	.word	0x2000c0a4
 800ec50:	20007700 	.word	0x20007700
 800ec54:	200076ec 	.word	0x200076ec
 800ec58:	2000be50 	.word	0x2000be50
 800ec5c:	2000c0e4 	.word	0x2000c0e4
 800ec60:	20007848 	.word	0x20007848
 800ec64:	2000c074 	.word	0x2000c074
 800ec68:	2000bff4 	.word	0x2000bff4
 800ec6c:	2000c0f4 	.word	0x2000c0f4
 800ec70:	200077c8 	.word	0x200077c8
 800ec74:	2000c064 	.word	0x2000c064
 800ec78:	08017d11 	.word	0x08017d11
 800ec7c:	08017d09 	.word	0x08017d09
 800ec80:	08017da9 	.word	0x08017da9
 800ec84:	08017e45 	.word	0x08017e45

0800ec88 <rmw_context_fini>:
 800ec88:	4b17      	ldr	r3, [pc, #92]	@ (800ece8 <rmw_context_fini+0x60>)
 800ec8a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ec8c:	b570      	push	{r4, r5, r6, lr}
 800ec8e:	681c      	ldr	r4, [r3, #0]
 800ec90:	4605      	mov	r5, r0
 800ec92:	b334      	cbz	r4, 800ece2 <rmw_context_fini+0x5a>
 800ec94:	2600      	movs	r6, #0
 800ec96:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800ec9a:	6902      	ldr	r2, [r0, #16]
 800ec9c:	428a      	cmp	r2, r1
 800ec9e:	d018      	beq.n	800ecd2 <rmw_context_fini+0x4a>
 800eca0:	2c00      	cmp	r4, #0
 800eca2:	d1f8      	bne.n	800ec96 <rmw_context_fini+0xe>
 800eca4:	b189      	cbz	r1, 800ecca <rmw_context_fini+0x42>
 800eca6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800ecaa:	789b      	ldrb	r3, [r3, #2]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ecb2:	bf14      	ite	ne
 800ecb4:	210a      	movne	r1, #10
 800ecb6:	2100      	moveq	r1, #0
 800ecb8:	f003 fa76 	bl	80121a8 <uxr_delete_session_retries>
 800ecbc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ecbe:	f000 fe09 	bl	800f8d4 <rmw_uxrce_fini_session_memory>
 800ecc2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ecc4:	3010      	adds	r0, #16
 800ecc6:	f002 fa7d 	bl	80111c4 <uxr_close_custom_transport>
 800ecca:	2300      	movs	r3, #0
 800eccc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ecce:	4630      	mov	r0, r6
 800ecd0:	bd70      	pop	{r4, r5, r6, pc}
 800ecd2:	3018      	adds	r0, #24
 800ecd4:	f000 f89c 	bl	800ee10 <rmw_destroy_node>
 800ecd8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ecda:	4606      	mov	r6, r0
 800ecdc:	2c00      	cmp	r4, #0
 800ecde:	d1da      	bne.n	800ec96 <rmw_context_fini+0xe>
 800ece0:	e7e0      	b.n	800eca4 <rmw_context_fini+0x1c>
 800ece2:	4626      	mov	r6, r4
 800ece4:	e7de      	b.n	800eca4 <rmw_context_fini+0x1c>
 800ece6:	bf00      	nop
 800ece8:	2000c084 	.word	0x2000c084

0800ecec <create_node>:
 800ecec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecf0:	b083      	sub	sp, #12
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d05f      	beq.n	800edb6 <create_node+0xca>
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	4835      	ldr	r0, [pc, #212]	@ (800edd0 <create_node+0xe4>)
 800ecfa:	460f      	mov	r7, r1
 800ecfc:	4690      	mov	r8, r2
 800ecfe:	461d      	mov	r5, r3
 800ed00:	f009 f8ea 	bl	8017ed8 <get_memory>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d056      	beq.n	800edb6 <create_node+0xca>
 800ed08:	6884      	ldr	r4, [r0, #8]
 800ed0a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ed0c:	6123      	str	r3, [r4, #16]
 800ed0e:	f009 f94b 	bl	8017fa8 <rmw_get_implementation_identifier>
 800ed12:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ed16:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ed1a:	f8c4 9020 	str.w	r9, [r4, #32]
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7f1 fa88 	bl	8000234 <strlen>
 800ed24:	1c42      	adds	r2, r0, #1
 800ed26:	2a3c      	cmp	r2, #60	@ 0x3c
 800ed28:	f104 0518 	add.w	r5, r4, #24
 800ed2c:	d840      	bhi.n	800edb0 <create_node+0xc4>
 800ed2e:	4648      	mov	r0, r9
 800ed30:	4631      	mov	r1, r6
 800ed32:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800ed36:	f00b fd02 	bl	801a73e <memcpy>
 800ed3a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800ed3e:	4638      	mov	r0, r7
 800ed40:	f7f1 fa78 	bl	8000234 <strlen>
 800ed44:	1c42      	adds	r2, r0, #1
 800ed46:	2a3c      	cmp	r2, #60	@ 0x3c
 800ed48:	d832      	bhi.n	800edb0 <create_node+0xc4>
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	4648      	mov	r0, r9
 800ed4e:	f00b fcf6 	bl	801a73e <memcpy>
 800ed52:	6923      	ldr	r3, [r4, #16]
 800ed54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed58:	2101      	movs	r1, #1
 800ed5a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800ed5e:	1842      	adds	r2, r0, r1
 800ed60:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800ed64:	f002 fa32 	bl	80111cc <uxr_object_id>
 800ed68:	6160      	str	r0, [r4, #20]
 800ed6a:	783b      	ldrb	r3, [r7, #0]
 800ed6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ed6e:	d127      	bne.n	800edc0 <create_node+0xd4>
 800ed70:	787b      	ldrb	r3, [r7, #1]
 800ed72:	bb2b      	cbnz	r3, 800edc0 <create_node+0xd4>
 800ed74:	4a17      	ldr	r2, [pc, #92]	@ (800edd4 <create_node+0xe8>)
 800ed76:	4818      	ldr	r0, [pc, #96]	@ (800edd8 <create_node+0xec>)
 800ed78:	4633      	mov	r3, r6
 800ed7a:	213c      	movs	r1, #60	@ 0x3c
 800ed7c:	f00b faa8 	bl	801a2d0 <sniprintf>
 800ed80:	6920      	ldr	r0, [r4, #16]
 800ed82:	4915      	ldr	r1, [pc, #84]	@ (800edd8 <create_node+0xec>)
 800ed84:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ed88:	9100      	str	r1, [sp, #0]
 800ed8a:	2106      	movs	r1, #6
 800ed8c:	9101      	str	r1, [sp, #4]
 800ed8e:	6811      	ldr	r1, [r2, #0]
 800ed90:	6962      	ldr	r2, [r4, #20]
 800ed92:	fa1f f388 	uxth.w	r3, r8
 800ed96:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed9a:	f002 f80d 	bl	8010db8 <uxr_buffer_create_participant_bin>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	6920      	ldr	r0, [r4, #16]
 800eda2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eda6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800edaa:	f000 ff0b 	bl	800fbc4 <run_xrce_session>
 800edae:	b918      	cbnz	r0, 800edb8 <create_node+0xcc>
 800edb0:	4628      	mov	r0, r5
 800edb2:	f000 fd95 	bl	800f8e0 <rmw_uxrce_fini_node_memory>
 800edb6:	2500      	movs	r5, #0
 800edb8:	4628      	mov	r0, r5
 800edba:	b003      	add	sp, #12
 800edbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edc0:	4a06      	ldr	r2, [pc, #24]	@ (800eddc <create_node+0xf0>)
 800edc2:	9600      	str	r6, [sp, #0]
 800edc4:	463b      	mov	r3, r7
 800edc6:	213c      	movs	r1, #60	@ 0x3c
 800edc8:	4803      	ldr	r0, [pc, #12]	@ (800edd8 <create_node+0xec>)
 800edca:	f00b fa81 	bl	801a2d0 <sniprintf>
 800edce:	e7d7      	b.n	800ed80 <create_node+0x94>
 800edd0:	2000c084 	.word	0x2000c084
 800edd4:	0801d0b8 	.word	0x0801d0b8
 800edd8:	20007570 	.word	0x20007570
 800eddc:	0801d0a0 	.word	0x0801d0a0

0800ede0 <rmw_create_node>:
 800ede0:	b199      	cbz	r1, 800ee0a <rmw_create_node+0x2a>
 800ede2:	780b      	ldrb	r3, [r1, #0]
 800ede4:	468c      	mov	ip, r1
 800ede6:	b183      	cbz	r3, 800ee0a <rmw_create_node+0x2a>
 800ede8:	b410      	push	{r4}
 800edea:	4614      	mov	r4, r2
 800edec:	b14a      	cbz	r2, 800ee02 <rmw_create_node+0x22>
 800edee:	7813      	ldrb	r3, [r2, #0]
 800edf0:	b13b      	cbz	r3, 800ee02 <rmw_create_node+0x22>
 800edf2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800edf4:	4603      	mov	r3, r0
 800edf6:	4621      	mov	r1, r4
 800edf8:	4660      	mov	r0, ip
 800edfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edfe:	f7ff bf75 	b.w	800ecec <create_node>
 800ee02:	2000      	movs	r0, #0
 800ee04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop

0800ee10 <rmw_destroy_node>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	b328      	cbz	r0, 800ee60 <rmw_destroy_node+0x50>
 800ee14:	4607      	mov	r7, r0
 800ee16:	6800      	ldr	r0, [r0, #0]
 800ee18:	b120      	cbz	r0, 800ee24 <rmw_destroy_node+0x14>
 800ee1a:	4b36      	ldr	r3, [pc, #216]	@ (800eef4 <rmw_destroy_node+0xe4>)
 800ee1c:	6819      	ldr	r1, [r3, #0]
 800ee1e:	f7f1 f9ff 	bl	8000220 <strcmp>
 800ee22:	b9e8      	cbnz	r0, 800ee60 <rmw_destroy_node+0x50>
 800ee24:	687d      	ldr	r5, [r7, #4]
 800ee26:	b1dd      	cbz	r5, 800ee60 <rmw_destroy_node+0x50>
 800ee28:	4b33      	ldr	r3, [pc, #204]	@ (800eef8 <rmw_destroy_node+0xe8>)
 800ee2a:	681c      	ldr	r4, [r3, #0]
 800ee2c:	2c00      	cmp	r4, #0
 800ee2e:	d05f      	beq.n	800eef0 <rmw_destroy_node+0xe0>
 800ee30:	2600      	movs	r6, #0
 800ee32:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ee36:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800ee3a:	429d      	cmp	r5, r3
 800ee3c:	d013      	beq.n	800ee66 <rmw_destroy_node+0x56>
 800ee3e:	2c00      	cmp	r4, #0
 800ee40:	d1f7      	bne.n	800ee32 <rmw_destroy_node+0x22>
 800ee42:	4b2e      	ldr	r3, [pc, #184]	@ (800eefc <rmw_destroy_node+0xec>)
 800ee44:	681c      	ldr	r4, [r3, #0]
 800ee46:	b1c4      	cbz	r4, 800ee7a <rmw_destroy_node+0x6a>
 800ee48:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ee4c:	6a0b      	ldr	r3, [r1, #32]
 800ee4e:	429d      	cmp	r5, r3
 800ee50:	d1f9      	bne.n	800ee46 <rmw_destroy_node+0x36>
 800ee52:	317c      	adds	r1, #124	@ 0x7c
 800ee54:	4638      	mov	r0, r7
 800ee56:	f000 fb37 	bl	800f4c8 <rmw_destroy_subscription>
 800ee5a:	2801      	cmp	r0, #1
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	d1f2      	bne.n	800ee46 <rmw_destroy_node+0x36>
 800ee60:	2601      	movs	r6, #1
 800ee62:	4630      	mov	r0, r6
 800ee64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee66:	3184      	adds	r1, #132	@ 0x84
 800ee68:	4638      	mov	r0, r7
 800ee6a:	f000 f9a5 	bl	800f1b8 <rmw_destroy_publisher>
 800ee6e:	2801      	cmp	r0, #1
 800ee70:	4606      	mov	r6, r0
 800ee72:	d0f5      	beq.n	800ee60 <rmw_destroy_node+0x50>
 800ee74:	2c00      	cmp	r4, #0
 800ee76:	d1dc      	bne.n	800ee32 <rmw_destroy_node+0x22>
 800ee78:	e7e3      	b.n	800ee42 <rmw_destroy_node+0x32>
 800ee7a:	4b21      	ldr	r3, [pc, #132]	@ (800ef00 <rmw_destroy_node+0xf0>)
 800ee7c:	681c      	ldr	r4, [r3, #0]
 800ee7e:	b16c      	cbz	r4, 800ee9c <rmw_destroy_node+0x8c>
 800ee80:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ee84:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ee86:	429d      	cmp	r5, r3
 800ee88:	d1f9      	bne.n	800ee7e <rmw_destroy_node+0x6e>
 800ee8a:	317c      	adds	r1, #124	@ 0x7c
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	f000 fab7 	bl	800f400 <rmw_destroy_service>
 800ee92:	2801      	cmp	r0, #1
 800ee94:	4606      	mov	r6, r0
 800ee96:	d0e3      	beq.n	800ee60 <rmw_destroy_node+0x50>
 800ee98:	2c00      	cmp	r4, #0
 800ee9a:	d1f1      	bne.n	800ee80 <rmw_destroy_node+0x70>
 800ee9c:	4b19      	ldr	r3, [pc, #100]	@ (800ef04 <rmw_destroy_node+0xf4>)
 800ee9e:	681c      	ldr	r4, [r3, #0]
 800eea0:	b16c      	cbz	r4, 800eebe <rmw_destroy_node+0xae>
 800eea2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800eea6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800eea8:	429d      	cmp	r5, r3
 800eeaa:	d1f9      	bne.n	800eea0 <rmw_destroy_node+0x90>
 800eeac:	317c      	adds	r1, #124	@ 0x7c
 800eeae:	4638      	mov	r0, r7
 800eeb0:	f009 f836 	bl	8017f20 <rmw_destroy_client>
 800eeb4:	2801      	cmp	r0, #1
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	d0d2      	beq.n	800ee60 <rmw_destroy_node+0x50>
 800eeba:	2c00      	cmp	r4, #0
 800eebc:	d1f1      	bne.n	800eea2 <rmw_destroy_node+0x92>
 800eebe:	6928      	ldr	r0, [r5, #16]
 800eec0:	696a      	ldr	r2, [r5, #20]
 800eec2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eec6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eeca:	6819      	ldr	r1, [r3, #0]
 800eecc:	f001 ff28 	bl	8010d20 <uxr_buffer_delete_entity>
 800eed0:	4602      	mov	r2, r0
 800eed2:	6928      	ldr	r0, [r5, #16]
 800eed4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eed8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eedc:	f000 fe72 	bl	800fbc4 <run_xrce_session>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	bf08      	it	eq
 800eee4:	2602      	moveq	r6, #2
 800eee6:	4638      	mov	r0, r7
 800eee8:	f000 fcfa 	bl	800f8e0 <rmw_uxrce_fini_node_memory>
 800eeec:	4630      	mov	r0, r6
 800eeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef0:	4626      	mov	r6, r4
 800eef2:	e7a6      	b.n	800ee42 <rmw_destroy_node+0x32>
 800eef4:	0801de80 	.word	0x0801de80
 800eef8:	2000c094 	.word	0x2000c094
 800eefc:	2000c0d4 	.word	0x2000c0d4
 800ef00:	2000c0a4 	.word	0x2000c0a4
 800ef04:	200076ec 	.word	0x200076ec

0800ef08 <rmw_node_get_graph_guard_condition>:
 800ef08:	6843      	ldr	r3, [r0, #4]
 800ef0a:	6918      	ldr	r0, [r3, #16]
 800ef0c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop

0800ef14 <flush_session>:
 800ef14:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ef16:	f002 bfa9 	b.w	8011e6c <uxr_run_session_until_confirm_delivery>
 800ef1a:	bf00      	nop

0800ef1c <rmw_publish>:
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d053      	beq.n	800efc8 <rmw_publish+0xac>
 800ef20:	b570      	push	{r4, r5, r6, lr}
 800ef22:	460d      	mov	r5, r1
 800ef24:	b08e      	sub	sp, #56	@ 0x38
 800ef26:	2900      	cmp	r1, #0
 800ef28:	d04b      	beq.n	800efc2 <rmw_publish+0xa6>
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	6800      	ldr	r0, [r0, #0]
 800ef2e:	f000 ff63 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d045      	beq.n	800efc2 <rmw_publish+0xa6>
 800ef36:	6866      	ldr	r6, [r4, #4]
 800ef38:	2e00      	cmp	r6, #0
 800ef3a:	d042      	beq.n	800efc2 <rmw_publish+0xa6>
 800ef3c:	69b4      	ldr	r4, [r6, #24]
 800ef3e:	4628      	mov	r0, r5
 800ef40:	6923      	ldr	r3, [r4, #16]
 800ef42:	4798      	blx	r3
 800ef44:	69f3      	ldr	r3, [r6, #28]
 800ef46:	9005      	str	r0, [sp, #20]
 800ef48:	b113      	cbz	r3, 800ef50 <rmw_publish+0x34>
 800ef4a:	a805      	add	r0, sp, #20
 800ef4c:	4798      	blx	r3
 800ef4e:	9805      	ldr	r0, [sp, #20]
 800ef50:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ef54:	691b      	ldr	r3, [r3, #16]
 800ef56:	9000      	str	r0, [sp, #0]
 800ef58:	6972      	ldr	r2, [r6, #20]
 800ef5a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ef5c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ef60:	ab06      	add	r3, sp, #24
 800ef62:	f004 fa57 	bl	8013414 <uxr_prepare_output_stream>
 800ef66:	b1d8      	cbz	r0, 800efa0 <rmw_publish+0x84>
 800ef68:	68a3      	ldr	r3, [r4, #8]
 800ef6a:	a906      	add	r1, sp, #24
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	4798      	blx	r3
 800ef70:	6a33      	ldr	r3, [r6, #32]
 800ef72:	4604      	mov	r4, r0
 800ef74:	b10b      	cbz	r3, 800ef7a <rmw_publish+0x5e>
 800ef76:	a806      	add	r0, sp, #24
 800ef78:	4798      	blx	r3
 800ef7a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ef84:	d022      	beq.n	800efcc <rmw_publish+0xb0>
 800ef86:	6918      	ldr	r0, [r3, #16]
 800ef88:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800ef8a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef8e:	f002 ff6d 	bl	8011e6c <uxr_run_session_until_confirm_delivery>
 800ef92:	4020      	ands	r0, r4
 800ef94:	b2c4      	uxtb	r4, r0
 800ef96:	f084 0001 	eor.w	r0, r4, #1
 800ef9a:	b2c0      	uxtb	r0, r0
 800ef9c:	b00e      	add	sp, #56	@ 0x38
 800ef9e:	bd70      	pop	{r4, r5, r6, pc}
 800efa0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800efa4:	6918      	ldr	r0, [r3, #16]
 800efa6:	9b05      	ldr	r3, [sp, #20]
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	4b0b      	ldr	r3, [pc, #44]	@ (800efd8 <rmw_publish+0xbc>)
 800efac:	9301      	str	r3, [sp, #4]
 800efae:	9602      	str	r6, [sp, #8]
 800efb0:	6972      	ldr	r2, [r6, #20]
 800efb2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800efb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efb8:	ab06      	add	r3, sp, #24
 800efba:	f004 fa5b 	bl	8013474 <uxr_prepare_output_stream_fragmented>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d1d2      	bne.n	800ef68 <rmw_publish+0x4c>
 800efc2:	2001      	movs	r0, #1
 800efc4:	b00e      	add	sp, #56	@ 0x38
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	2001      	movs	r0, #1
 800efca:	4770      	bx	lr
 800efcc:	6918      	ldr	r0, [r3, #16]
 800efce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efd2:	f002 fb8b 	bl	80116ec <uxr_flash_output_streams>
 800efd6:	e7de      	b.n	800ef96 <rmw_publish+0x7a>
 800efd8:	0800ef15 	.word	0x0800ef15

0800efdc <rmw_create_publisher>:
 800efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	b087      	sub	sp, #28
 800efe2:	2800      	cmp	r0, #0
 800efe4:	f000 80cc 	beq.w	800f180 <rmw_create_publisher+0x1a4>
 800efe8:	460e      	mov	r6, r1
 800efea:	2900      	cmp	r1, #0
 800efec:	f000 80c8 	beq.w	800f180 <rmw_create_publisher+0x1a4>
 800eff0:	4604      	mov	r4, r0
 800eff2:	6800      	ldr	r0, [r0, #0]
 800eff4:	4615      	mov	r5, r2
 800eff6:	4698      	mov	r8, r3
 800eff8:	f000 fefe 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800effc:	2800      	cmp	r0, #0
 800effe:	f000 80bf 	beq.w	800f180 <rmw_create_publisher+0x1a4>
 800f002:	2d00      	cmp	r5, #0
 800f004:	f000 80bc 	beq.w	800f180 <rmw_create_publisher+0x1a4>
 800f008:	782b      	ldrb	r3, [r5, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 80b8 	beq.w	800f180 <rmw_create_publisher+0x1a4>
 800f010:	f1b8 0f00 	cmp.w	r8, #0
 800f014:	f000 80b4 	beq.w	800f180 <rmw_create_publisher+0x1a4>
 800f018:	485c      	ldr	r0, [pc, #368]	@ (800f18c <rmw_create_publisher+0x1b0>)
 800f01a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f01e:	f008 ff5b 	bl	8017ed8 <get_memory>
 800f022:	2800      	cmp	r0, #0
 800f024:	f000 80ac 	beq.w	800f180 <rmw_create_publisher+0x1a4>
 800f028:	6884      	ldr	r4, [r0, #8]
 800f02a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f02e:	f008 ffbb 	bl	8017fa8 <rmw_get_implementation_identifier>
 800f032:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f036:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f03a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f03e:	4628      	mov	r0, r5
 800f040:	f7f1 f8f8 	bl	8000234 <strlen>
 800f044:	3001      	adds	r0, #1
 800f046:	283c      	cmp	r0, #60	@ 0x3c
 800f048:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800f04c:	f200 8091 	bhi.w	800f172 <rmw_create_publisher+0x196>
 800f050:	4a4f      	ldr	r2, [pc, #316]	@ (800f190 <rmw_create_publisher+0x1b4>)
 800f052:	462b      	mov	r3, r5
 800f054:	213c      	movs	r1, #60	@ 0x3c
 800f056:	4650      	mov	r0, sl
 800f058:	f00b f93a 	bl	801a2d0 <sniprintf>
 800f05c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f060:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f062:	4641      	mov	r1, r8
 800f064:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f068:	2250      	movs	r2, #80	@ 0x50
 800f06a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f06e:	f00b fb66 	bl	801a73e <memcpy>
 800f072:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f076:	4947      	ldr	r1, [pc, #284]	@ (800f194 <rmw_create_publisher+0x1b8>)
 800f078:	2b02      	cmp	r3, #2
 800f07a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f07e:	bf0c      	ite	eq
 800f080:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f084:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f088:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f08a:	2300      	movs	r3, #0
 800f08c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f090:	4630      	mov	r0, r6
 800f092:	f000 febf 	bl	800fe14 <get_message_typesupport_handle>
 800f096:	2800      	cmp	r0, #0
 800f098:	d06b      	beq.n	800f172 <rmw_create_publisher+0x196>
 800f09a:	6842      	ldr	r2, [r0, #4]
 800f09c:	61a2      	str	r2, [r4, #24]
 800f09e:	2a00      	cmp	r2, #0
 800f0a0:	d067      	beq.n	800f172 <rmw_create_publisher+0x196>
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	4643      	mov	r3, r8
 800f0a6:	4648      	mov	r0, r9
 800f0a8:	f008 ff84 	bl	8017fb4 <create_topic>
 800f0ac:	6260      	str	r0, [r4, #36]	@ 0x24
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d063      	beq.n	800f17a <rmw_create_publisher+0x19e>
 800f0b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f0ba:	2103      	movs	r1, #3
 800f0bc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f0c0:	1c42      	adds	r2, r0, #1
 800f0c2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f0c6:	f002 f881 	bl	80111cc <uxr_object_id>
 800f0ca:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f0ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0d2:	6120      	str	r0, [r4, #16]
 800f0d4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f0d8:	6910      	ldr	r0, [r2, #16]
 800f0da:	2506      	movs	r5, #6
 800f0dc:	9500      	str	r5, [sp, #0]
 800f0de:	6819      	ldr	r1, [r3, #0]
 800f0e0:	6922      	ldr	r2, [r4, #16]
 800f0e2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f0e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f0ea:	f001 fecd 	bl	8010e88 <uxr_buffer_create_publisher_bin>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f0f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f0f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f0fc:	f000 fd62 	bl	800fbc4 <run_xrce_session>
 800f100:	b3b8      	cbz	r0, 800f172 <rmw_create_publisher+0x196>
 800f102:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f10a:	2105      	movs	r1, #5
 800f10c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f110:	1c42      	adds	r2, r0, #1
 800f112:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f116:	f002 f859 	bl	80111cc <uxr_object_id>
 800f11a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f11e:	6160      	str	r0, [r4, #20]
 800f120:	691e      	ldr	r6, [r3, #16]
 800f122:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f126:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f12a:	f10d 0a10 	add.w	sl, sp, #16
 800f12e:	4641      	mov	r1, r8
 800f130:	4650      	mov	r0, sl
 800f132:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800f136:	f000 fd61 	bl	800fbfc <convert_qos_profile>
 800f13a:	9503      	str	r5, [sp, #12]
 800f13c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f140:	9001      	str	r0, [sp, #4]
 800f142:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f146:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f150:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f154:	f8d8 1000 	ldr.w	r1, [r8]
 800f158:	4630      	mov	r0, r6
 800f15a:	f001 fec5 	bl	8010ee8 <uxr_buffer_create_datawriter_bin>
 800f15e:	4602      	mov	r2, r0
 800f160:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f164:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f168:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f16c:	f000 fd2a 	bl	800fbc4 <run_xrce_session>
 800f170:	b938      	cbnz	r0, 800f182 <rmw_create_publisher+0x1a6>
 800f172:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f174:	b108      	cbz	r0, 800f17a <rmw_create_publisher+0x19e>
 800f176:	f000 fc23 	bl	800f9c0 <rmw_uxrce_fini_topic_memory>
 800f17a:	4638      	mov	r0, r7
 800f17c:	f000 fbc8 	bl	800f910 <rmw_uxrce_fini_publisher_memory>
 800f180:	2700      	movs	r7, #0
 800f182:	4638      	mov	r0, r7
 800f184:	b007      	add	sp, #28
 800f186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18a:	bf00      	nop
 800f18c:	2000c094 	.word	0x2000c094
 800f190:	0801d0b8 	.word	0x0801d0b8
 800f194:	0801ca70 	.word	0x0801ca70

0800f198 <rmw_publisher_get_actual_qos>:
 800f198:	b150      	cbz	r0, 800f1b0 <rmw_publisher_get_actual_qos+0x18>
 800f19a:	b508      	push	{r3, lr}
 800f19c:	460b      	mov	r3, r1
 800f19e:	b149      	cbz	r1, 800f1b4 <rmw_publisher_get_actual_qos+0x1c>
 800f1a0:	6841      	ldr	r1, [r0, #4]
 800f1a2:	2250      	movs	r2, #80	@ 0x50
 800f1a4:	3128      	adds	r1, #40	@ 0x28
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f00b fac9 	bl	801a73e <memcpy>
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	bd08      	pop	{r3, pc}
 800f1b0:	200b      	movs	r0, #11
 800f1b2:	4770      	bx	lr
 800f1b4:	200b      	movs	r0, #11
 800f1b6:	bd08      	pop	{r3, pc}

0800f1b8 <rmw_destroy_publisher>:
 800f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ba:	b128      	cbz	r0, 800f1c8 <rmw_destroy_publisher+0x10>
 800f1bc:	4604      	mov	r4, r0
 800f1be:	6800      	ldr	r0, [r0, #0]
 800f1c0:	460d      	mov	r5, r1
 800f1c2:	f000 fe19 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800f1c6:	b910      	cbnz	r0, 800f1ce <rmw_destroy_publisher+0x16>
 800f1c8:	2401      	movs	r4, #1
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ce:	6863      	ldr	r3, [r4, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d0f9      	beq.n	800f1c8 <rmw_destroy_publisher+0x10>
 800f1d4:	2d00      	cmp	r5, #0
 800f1d6:	d0f7      	beq.n	800f1c8 <rmw_destroy_publisher+0x10>
 800f1d8:	6828      	ldr	r0, [r5, #0]
 800f1da:	f000 fe0d 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d0f2      	beq.n	800f1c8 <rmw_destroy_publisher+0x10>
 800f1e2:	686c      	ldr	r4, [r5, #4]
 800f1e4:	2c00      	cmp	r4, #0
 800f1e6:	d0ef      	beq.n	800f1c8 <rmw_destroy_publisher+0x10>
 800f1e8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f1ea:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800f1ee:	f008 ff31 	bl	8018054 <destroy_topic>
 800f1f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f1f6:	6962      	ldr	r2, [r4, #20]
 800f1f8:	6918      	ldr	r0, [r3, #16]
 800f1fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f1fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f202:	6819      	ldr	r1, [r3, #0]
 800f204:	f001 fd8c 	bl	8010d20 <uxr_buffer_delete_entity>
 800f208:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f20c:	6922      	ldr	r2, [r4, #16]
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f214:	4604      	mov	r4, r0
 800f216:	6809      	ldr	r1, [r1, #0]
 800f218:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f21c:	f001 fd80 	bl	8010d20 <uxr_buffer_delete_entity>
 800f220:	693e      	ldr	r6, [r7, #16]
 800f222:	4622      	mov	r2, r4
 800f224:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f228:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f22c:	4604      	mov	r4, r0
 800f22e:	4630      	mov	r0, r6
 800f230:	f000 fcc8 	bl	800fbc4 <run_xrce_session>
 800f234:	693e      	ldr	r6, [r7, #16]
 800f236:	4622      	mov	r2, r4
 800f238:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f23c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f240:	4604      	mov	r4, r0
 800f242:	4630      	mov	r0, r6
 800f244:	f000 fcbe 	bl	800fbc4 <run_xrce_session>
 800f248:	b12c      	cbz	r4, 800f256 <rmw_destroy_publisher+0x9e>
 800f24a:	b120      	cbz	r0, 800f256 <rmw_destroy_publisher+0x9e>
 800f24c:	2400      	movs	r4, #0
 800f24e:	4628      	mov	r0, r5
 800f250:	f000 fb5e 	bl	800f910 <rmw_uxrce_fini_publisher_memory>
 800f254:	e7b9      	b.n	800f1ca <rmw_destroy_publisher+0x12>
 800f256:	2402      	movs	r4, #2
 800f258:	e7f9      	b.n	800f24e <rmw_destroy_publisher+0x96>
 800f25a:	bf00      	nop

0800f25c <rmw_create_service>:
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	b091      	sub	sp, #68	@ 0x44
 800f262:	2800      	cmp	r0, #0
 800f264:	f000 80ba 	beq.w	800f3dc <rmw_create_service+0x180>
 800f268:	4689      	mov	r9, r1
 800f26a:	2900      	cmp	r1, #0
 800f26c:	f000 80b6 	beq.w	800f3dc <rmw_create_service+0x180>
 800f270:	4606      	mov	r6, r0
 800f272:	6800      	ldr	r0, [r0, #0]
 800f274:	4614      	mov	r4, r2
 800f276:	461d      	mov	r5, r3
 800f278:	f000 fdbe 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	f000 80ad 	beq.w	800f3dc <rmw_create_service+0x180>
 800f282:	2c00      	cmp	r4, #0
 800f284:	f000 80aa 	beq.w	800f3dc <rmw_create_service+0x180>
 800f288:	7823      	ldrb	r3, [r4, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 80a6 	beq.w	800f3dc <rmw_create_service+0x180>
 800f290:	2d00      	cmp	r5, #0
 800f292:	f000 80a3 	beq.w	800f3dc <rmw_create_service+0x180>
 800f296:	4854      	ldr	r0, [pc, #336]	@ (800f3e8 <rmw_create_service+0x18c>)
 800f298:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800f29c:	f008 fe1c 	bl	8017ed8 <get_memory>
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f000 809b 	beq.w	800f3de <rmw_create_service+0x182>
 800f2a8:	6887      	ldr	r7, [r0, #8]
 800f2aa:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800f2ae:	f008 fe7b 	bl	8017fa8 <rmw_get_implementation_identifier>
 800f2b2:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800f2b6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800f2b8:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7f0 ffb9 	bl	8000234 <strlen>
 800f2c2:	1c42      	adds	r2, r0, #1
 800f2c4:	2a3c      	cmp	r2, #60	@ 0x3c
 800f2c6:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800f2ca:	f200 8084 	bhi.w	800f3d6 <rmw_create_service+0x17a>
 800f2ce:	4621      	mov	r1, r4
 800f2d0:	4650      	mov	r0, sl
 800f2d2:	f00b fa34 	bl	801a73e <memcpy>
 800f2d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f2da:	4629      	mov	r1, r5
 800f2dc:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800f2e0:	677b      	str	r3, [r7, #116]	@ 0x74
 800f2e2:	2250      	movs	r2, #80	@ 0x50
 800f2e4:	f107 0020 	add.w	r0, r7, #32
 800f2e8:	f00b fa29 	bl	801a73e <memcpy>
 800f2ec:	493f      	ldr	r1, [pc, #252]	@ (800f3ec <rmw_create_service+0x190>)
 800f2ee:	4648      	mov	r0, r9
 800f2f0:	f000 fd9c 	bl	800fe2c <get_service_typesupport_handle>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d06e      	beq.n	800f3d6 <rmw_create_service+0x17a>
 800f2f8:	6843      	ldr	r3, [r0, #4]
 800f2fa:	617b      	str	r3, [r7, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d06a      	beq.n	800f3d6 <rmw_create_service+0x17a>
 800f300:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f304:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800f3f4 <rmw_create_service+0x198>
 800f308:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800f3f8 <rmw_create_service+0x19c>
 800f30c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f310:	2108      	movs	r1, #8
 800f312:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800f316:	1c42      	adds	r2, r0, #1
 800f318:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800f31c:	f001 ff56 	bl	80111cc <uxr_object_id>
 800f320:	2364      	movs	r3, #100	@ 0x64
 800f322:	6138      	str	r0, [r7, #16]
 800f324:	4652      	mov	r2, sl
 800f326:	6978      	ldr	r0, [r7, #20]
 800f328:	4649      	mov	r1, r9
 800f32a:	f000 fcb3 	bl	800fc94 <generate_service_types>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d051      	beq.n	800f3d6 <rmw_create_service+0x17a>
 800f332:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800f3fc <rmw_create_service+0x1a0>
 800f336:	4a2e      	ldr	r2, [pc, #184]	@ (800f3f0 <rmw_create_service+0x194>)
 800f338:	233c      	movs	r3, #60	@ 0x3c
 800f33a:	4659      	mov	r1, fp
 800f33c:	4620      	mov	r0, r4
 800f33e:	f000 fc77 	bl	800fc30 <generate_service_topics>
 800f342:	2800      	cmp	r0, #0
 800f344:	d047      	beq.n	800f3d6 <rmw_create_service+0x17a>
 800f346:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f34a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800f34e:	a80c      	add	r0, sp, #48	@ 0x30
 800f350:	4629      	mov	r1, r5
 800f352:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f356:	f000 fc51 	bl	800fbfc <convert_qos_profile>
 800f35a:	4a25      	ldr	r2, [pc, #148]	@ (800f3f0 <rmw_create_service+0x194>)
 800f35c:	9400      	str	r4, [sp, #0]
 800f35e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f362:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800f366:	a80c      	add	r0, sp, #48	@ 0x30
 800f368:	c803      	ldmia	r0, {r0, r1}
 800f36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f36c:	9005      	str	r0, [sp, #20]
 800f36e:	9a08      	ldr	r2, [sp, #32]
 800f370:	f8ad 1018 	strh.w	r1, [sp, #24]
 800f374:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f378:	2306      	movs	r3, #6
 800f37a:	9307      	str	r3, [sp, #28]
 800f37c:	6811      	ldr	r1, [r2, #0]
 800f37e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800f382:	693a      	ldr	r2, [r7, #16]
 800f384:	f001 fe26 	bl	8010fd4 <uxr_buffer_create_replier_bin>
 800f388:	4602      	mov	r2, r0
 800f38a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f38e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f392:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f396:	f000 fc15 	bl	800fbc4 <run_xrce_session>
 800f39a:	b1e0      	cbz	r0, 800f3d6 <rmw_create_service+0x17a>
 800f39c:	7a2b      	ldrb	r3, [r5, #8]
 800f39e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	2b02      	cmp	r3, #2
 800f3a6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f3aa:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800f3ae:	bf0c      	ite	eq
 800f3b0:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800f3b4:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800f3b8:	673a      	str	r2, [r7, #112]	@ 0x70
 800f3ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3bc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f3c0:	ab0e      	add	r3, sp, #56	@ 0x38
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	6811      	ldr	r1, [r2, #0]
 800f3c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3ce:	f001 ff2d 	bl	801122c <uxr_buffer_request_data>
 800f3d2:	8338      	strh	r0, [r7, #24]
 800f3d4:	e003      	b.n	800f3de <rmw_create_service+0x182>
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	f000 fac6 	bl	800f968 <rmw_uxrce_fini_service_memory>
 800f3dc:	2600      	movs	r6, #0
 800f3de:	4630      	mov	r0, r6
 800f3e0:	b011      	add	sp, #68	@ 0x44
 800f3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3e6:	bf00      	nop
 800f3e8:	2000c0a4 	.word	0x2000c0a4
 800f3ec:	0801ca70 	.word	0x0801ca70
 800f3f0:	2000764c 	.word	0x2000764c
 800f3f4:	20007688 	.word	0x20007688
 800f3f8:	200075e8 	.word	0x200075e8
 800f3fc:	200075ac 	.word	0x200075ac

0800f400 <rmw_destroy_service>:
 800f400:	b570      	push	{r4, r5, r6, lr}
 800f402:	b128      	cbz	r0, 800f410 <rmw_destroy_service+0x10>
 800f404:	4604      	mov	r4, r0
 800f406:	6800      	ldr	r0, [r0, #0]
 800f408:	460d      	mov	r5, r1
 800f40a:	f000 fcf5 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800f40e:	b910      	cbnz	r0, 800f416 <rmw_destroy_service+0x16>
 800f410:	2401      	movs	r4, #1
 800f412:	4620      	mov	r0, r4
 800f414:	bd70      	pop	{r4, r5, r6, pc}
 800f416:	6863      	ldr	r3, [r4, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d0f9      	beq.n	800f410 <rmw_destroy_service+0x10>
 800f41c:	2d00      	cmp	r5, #0
 800f41e:	d0f7      	beq.n	800f410 <rmw_destroy_service+0x10>
 800f420:	6828      	ldr	r0, [r5, #0]
 800f422:	f000 fce9 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800f426:	2800      	cmp	r0, #0
 800f428:	d0f2      	beq.n	800f410 <rmw_destroy_service+0x10>
 800f42a:	686e      	ldr	r6, [r5, #4]
 800f42c:	2e00      	cmp	r6, #0
 800f42e:	d0ef      	beq.n	800f410 <rmw_destroy_service+0x10>
 800f430:	6864      	ldr	r4, [r4, #4]
 800f432:	6932      	ldr	r2, [r6, #16]
 800f434:	6920      	ldr	r0, [r4, #16]
 800f436:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f43a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f43e:	6819      	ldr	r1, [r3, #0]
 800f440:	f001 ff2e 	bl	80112a0 <uxr_buffer_cancel_data>
 800f444:	4602      	mov	r2, r0
 800f446:	6920      	ldr	r0, [r4, #16]
 800f448:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f44c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f450:	f000 fbb8 	bl	800fbc4 <run_xrce_session>
 800f454:	6920      	ldr	r0, [r4, #16]
 800f456:	6932      	ldr	r2, [r6, #16]
 800f458:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f45c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f460:	6819      	ldr	r1, [r3, #0]
 800f462:	f001 fc5d 	bl	8010d20 <uxr_buffer_delete_entity>
 800f466:	4602      	mov	r2, r0
 800f468:	6920      	ldr	r0, [r4, #16]
 800f46a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f46e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f472:	f000 fba7 	bl	800fbc4 <run_xrce_session>
 800f476:	2800      	cmp	r0, #0
 800f478:	4628      	mov	r0, r5
 800f47a:	bf14      	ite	ne
 800f47c:	2400      	movne	r4, #0
 800f47e:	2402      	moveq	r4, #2
 800f480:	f000 fa72 	bl	800f968 <rmw_uxrce_fini_service_memory>
 800f484:	e7c5      	b.n	800f412 <rmw_destroy_service+0x12>
 800f486:	bf00      	nop

0800f488 <rmw_service_response_publisher_get_actual_qos>:
 800f488:	b150      	cbz	r0, 800f4a0 <rmw_service_response_publisher_get_actual_qos+0x18>
 800f48a:	b508      	push	{r3, lr}
 800f48c:	460b      	mov	r3, r1
 800f48e:	b149      	cbz	r1, 800f4a4 <rmw_service_response_publisher_get_actual_qos+0x1c>
 800f490:	6841      	ldr	r1, [r0, #4]
 800f492:	2250      	movs	r2, #80	@ 0x50
 800f494:	3120      	adds	r1, #32
 800f496:	4618      	mov	r0, r3
 800f498:	f00b f951 	bl	801a73e <memcpy>
 800f49c:	2000      	movs	r0, #0
 800f49e:	bd08      	pop	{r3, pc}
 800f4a0:	200b      	movs	r0, #11
 800f4a2:	4770      	bx	lr
 800f4a4:	200b      	movs	r0, #11
 800f4a6:	bd08      	pop	{r3, pc}

0800f4a8 <rmw_service_request_subscription_get_actual_qos>:
 800f4a8:	b150      	cbz	r0, 800f4c0 <rmw_service_request_subscription_get_actual_qos+0x18>
 800f4aa:	b508      	push	{r3, lr}
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	b149      	cbz	r1, 800f4c4 <rmw_service_request_subscription_get_actual_qos+0x1c>
 800f4b0:	6841      	ldr	r1, [r0, #4]
 800f4b2:	2250      	movs	r2, #80	@ 0x50
 800f4b4:	3120      	adds	r1, #32
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f00b f941 	bl	801a73e <memcpy>
 800f4bc:	2000      	movs	r0, #0
 800f4be:	bd08      	pop	{r3, pc}
 800f4c0:	200b      	movs	r0, #11
 800f4c2:	4770      	bx	lr
 800f4c4:	200b      	movs	r0, #11
 800f4c6:	bd08      	pop	{r3, pc}

0800f4c8 <rmw_destroy_subscription>:
 800f4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ca:	b128      	cbz	r0, 800f4d8 <rmw_destroy_subscription+0x10>
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	6800      	ldr	r0, [r0, #0]
 800f4d0:	460d      	mov	r5, r1
 800f4d2:	f000 fc91 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800f4d6:	b910      	cbnz	r0, 800f4de <rmw_destroy_subscription+0x16>
 800f4d8:	2401      	movs	r4, #1
 800f4da:	4620      	mov	r0, r4
 800f4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4de:	6863      	ldr	r3, [r4, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d0f9      	beq.n	800f4d8 <rmw_destroy_subscription+0x10>
 800f4e4:	2d00      	cmp	r5, #0
 800f4e6:	d0f7      	beq.n	800f4d8 <rmw_destroy_subscription+0x10>
 800f4e8:	6828      	ldr	r0, [r5, #0]
 800f4ea:	f000 fc85 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d0f2      	beq.n	800f4d8 <rmw_destroy_subscription+0x10>
 800f4f2:	686c      	ldr	r4, [r5, #4]
 800f4f4:	2c00      	cmp	r4, #0
 800f4f6:	d0ef      	beq.n	800f4d8 <rmw_destroy_subscription+0x10>
 800f4f8:	6a26      	ldr	r6, [r4, #32]
 800f4fa:	6962      	ldr	r2, [r4, #20]
 800f4fc:	6930      	ldr	r0, [r6, #16]
 800f4fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f502:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f506:	6819      	ldr	r1, [r3, #0]
 800f508:	f001 feca 	bl	80112a0 <uxr_buffer_cancel_data>
 800f50c:	4602      	mov	r2, r0
 800f50e:	6930      	ldr	r0, [r6, #16]
 800f510:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f514:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f518:	f000 fb54 	bl	800fbc4 <run_xrce_session>
 800f51c:	69e0      	ldr	r0, [r4, #28]
 800f51e:	f008 fd99 	bl	8018054 <destroy_topic>
 800f522:	6a23      	ldr	r3, [r4, #32]
 800f524:	6962      	ldr	r2, [r4, #20]
 800f526:	6918      	ldr	r0, [r3, #16]
 800f528:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f52c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f530:	6819      	ldr	r1, [r3, #0]
 800f532:	f001 fbf5 	bl	8010d20 <uxr_buffer_delete_entity>
 800f536:	6a23      	ldr	r3, [r4, #32]
 800f538:	6922      	ldr	r2, [r4, #16]
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f540:	4604      	mov	r4, r0
 800f542:	6809      	ldr	r1, [r1, #0]
 800f544:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f548:	f001 fbea 	bl	8010d20 <uxr_buffer_delete_entity>
 800f54c:	6937      	ldr	r7, [r6, #16]
 800f54e:	4622      	mov	r2, r4
 800f550:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f554:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f558:	4604      	mov	r4, r0
 800f55a:	4638      	mov	r0, r7
 800f55c:	f000 fb32 	bl	800fbc4 <run_xrce_session>
 800f560:	6936      	ldr	r6, [r6, #16]
 800f562:	4622      	mov	r2, r4
 800f564:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f568:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f56c:	4604      	mov	r4, r0
 800f56e:	4630      	mov	r0, r6
 800f570:	f000 fb28 	bl	800fbc4 <run_xrce_session>
 800f574:	b12c      	cbz	r4, 800f582 <rmw_destroy_subscription+0xba>
 800f576:	b120      	cbz	r0, 800f582 <rmw_destroy_subscription+0xba>
 800f578:	2400      	movs	r4, #0
 800f57a:	4628      	mov	r0, r5
 800f57c:	f000 f9de 	bl	800f93c <rmw_uxrce_fini_subscription_memory>
 800f580:	e7ab      	b.n	800f4da <rmw_destroy_subscription+0x12>
 800f582:	2402      	movs	r4, #2
 800f584:	e7f9      	b.n	800f57a <rmw_destroy_subscription+0xb2>
 800f586:	bf00      	nop

0800f588 <rmw_uxrce_transport_init>:
 800f588:	b508      	push	{r3, lr}
 800f58a:	b108      	cbz	r0, 800f590 <rmw_uxrce_transport_init+0x8>
 800f58c:	f100 0210 	add.w	r2, r0, #16
 800f590:	b139      	cbz	r1, 800f5a2 <rmw_uxrce_transport_init+0x1a>
 800f592:	6949      	ldr	r1, [r1, #20]
 800f594:	4610      	mov	r0, r2
 800f596:	f001 fde1 	bl	801115c <uxr_init_custom_transport>
 800f59a:	f080 0001 	eor.w	r0, r0, #1
 800f59e:	b2c0      	uxtb	r0, r0
 800f5a0:	bd08      	pop	{r3, pc}
 800f5a2:	4b04      	ldr	r3, [pc, #16]	@ (800f5b4 <rmw_uxrce_transport_init+0x2c>)
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	6859      	ldr	r1, [r3, #4]
 800f5a8:	f001 fdd8 	bl	801115c <uxr_init_custom_transport>
 800f5ac:	f080 0001 	eor.w	r0, r0, #1
 800f5b0:	b2c0      	uxtb	r0, r0
 800f5b2:	bd08      	pop	{r3, pc}
 800f5b4:	20007554 	.word	0x20007554

0800f5b8 <rmw_uros_epoch_millis>:
 800f5b8:	4b05      	ldr	r3, [pc, #20]	@ (800f5d0 <rmw_uros_epoch_millis+0x18>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	b123      	cbz	r3, 800f5c8 <rmw_uros_epoch_millis+0x10>
 800f5be:	6898      	ldr	r0, [r3, #8]
 800f5c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5c4:	f002 b876 	b.w	80116b4 <uxr_epoch_millis>
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop
 800f5d0:	2000c0b4 	.word	0x2000c0b4

0800f5d4 <rmw_uros_epoch_nanos>:
 800f5d4:	4b05      	ldr	r3, [pc, #20]	@ (800f5ec <rmw_uros_epoch_nanos+0x18>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	b123      	cbz	r3, 800f5e4 <rmw_uros_epoch_nanos+0x10>
 800f5da:	6898      	ldr	r0, [r3, #8]
 800f5dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5e0:	f002 b87a 	b.w	80116d8 <uxr_epoch_nanos>
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	2000c0b4 	.word	0x2000c0b4

0800f5f0 <rmw_uros_sync_session>:
 800f5f0:	b508      	push	{r3, lr}
 800f5f2:	4b07      	ldr	r3, [pc, #28]	@ (800f610 <rmw_uros_sync_session+0x20>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	b14b      	cbz	r3, 800f60c <rmw_uros_sync_session+0x1c>
 800f5f8:	4601      	mov	r1, r0
 800f5fa:	6898      	ldr	r0, [r3, #8]
 800f5fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f600:	f002 fcae 	bl	8011f60 <uxr_sync_session>
 800f604:	f080 0001 	eor.w	r0, r0, #1
 800f608:	b2c0      	uxtb	r0, r0
 800f60a:	bd08      	pop	{r3, pc}
 800f60c:	2001      	movs	r0, #1
 800f60e:	bd08      	pop	{r3, pc}
 800f610:	2000c0b4 	.word	0x2000c0b4

0800f614 <rmw_uxrce_init_service_memory>:
 800f614:	b1e2      	cbz	r2, 800f650 <rmw_uxrce_init_service_memory+0x3c>
 800f616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f61a:	7b05      	ldrb	r5, [r0, #12]
 800f61c:	4606      	mov	r6, r0
 800f61e:	b9ad      	cbnz	r5, 800f64c <rmw_uxrce_init_service_memory+0x38>
 800f620:	23c8      	movs	r3, #200	@ 0xc8
 800f622:	e9c0 5500 	strd	r5, r5, [r0]
 800f626:	6083      	str	r3, [r0, #8]
 800f628:	f240 1301 	movw	r3, #257	@ 0x101
 800f62c:	4617      	mov	r7, r2
 800f62e:	8183      	strh	r3, [r0, #12]
 800f630:	460c      	mov	r4, r1
 800f632:	46a8      	mov	r8, r5
 800f634:	4621      	mov	r1, r4
 800f636:	4630      	mov	r0, r6
 800f638:	3501      	adds	r5, #1
 800f63a:	f008 fc5d 	bl	8017ef8 <put_memory>
 800f63e:	42af      	cmp	r7, r5
 800f640:	60a4      	str	r4, [r4, #8]
 800f642:	f884 800c 	strb.w	r8, [r4, #12]
 800f646:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f64a:	d1f3      	bne.n	800f634 <rmw_uxrce_init_service_memory+0x20>
 800f64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop

0800f654 <rmw_uxrce_init_client_memory>:
 800f654:	b1e2      	cbz	r2, 800f690 <rmw_uxrce_init_client_memory+0x3c>
 800f656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f65a:	7b05      	ldrb	r5, [r0, #12]
 800f65c:	4606      	mov	r6, r0
 800f65e:	b9ad      	cbnz	r5, 800f68c <rmw_uxrce_init_client_memory+0x38>
 800f660:	23c8      	movs	r3, #200	@ 0xc8
 800f662:	e9c0 5500 	strd	r5, r5, [r0]
 800f666:	6083      	str	r3, [r0, #8]
 800f668:	f240 1301 	movw	r3, #257	@ 0x101
 800f66c:	4617      	mov	r7, r2
 800f66e:	8183      	strh	r3, [r0, #12]
 800f670:	460c      	mov	r4, r1
 800f672:	46a8      	mov	r8, r5
 800f674:	4621      	mov	r1, r4
 800f676:	4630      	mov	r0, r6
 800f678:	3501      	adds	r5, #1
 800f67a:	f008 fc3d 	bl	8017ef8 <put_memory>
 800f67e:	42af      	cmp	r7, r5
 800f680:	60a4      	str	r4, [r4, #8]
 800f682:	f884 800c 	strb.w	r8, [r4, #12]
 800f686:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f68a:	d1f3      	bne.n	800f674 <rmw_uxrce_init_client_memory+0x20>
 800f68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop

0800f694 <rmw_uxrce_init_publisher_memory>:
 800f694:	b1e2      	cbz	r2, 800f6d0 <rmw_uxrce_init_publisher_memory+0x3c>
 800f696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69a:	7b05      	ldrb	r5, [r0, #12]
 800f69c:	4606      	mov	r6, r0
 800f69e:	b9ad      	cbnz	r5, 800f6cc <rmw_uxrce_init_publisher_memory+0x38>
 800f6a0:	23d8      	movs	r3, #216	@ 0xd8
 800f6a2:	e9c0 5500 	strd	r5, r5, [r0]
 800f6a6:	6083      	str	r3, [r0, #8]
 800f6a8:	f240 1301 	movw	r3, #257	@ 0x101
 800f6ac:	4617      	mov	r7, r2
 800f6ae:	8183      	strh	r3, [r0, #12]
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	46a8      	mov	r8, r5
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	3501      	adds	r5, #1
 800f6ba:	f008 fc1d 	bl	8017ef8 <put_memory>
 800f6be:	42af      	cmp	r7, r5
 800f6c0:	60a4      	str	r4, [r4, #8]
 800f6c2:	f884 800c 	strb.w	r8, [r4, #12]
 800f6c6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f6ca:	d1f3      	bne.n	800f6b4 <rmw_uxrce_init_publisher_memory+0x20>
 800f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop

0800f6d4 <rmw_uxrce_init_subscription_memory>:
 800f6d4:	b1e2      	cbz	r2, 800f710 <rmw_uxrce_init_subscription_memory+0x3c>
 800f6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6da:	7b05      	ldrb	r5, [r0, #12]
 800f6dc:	4606      	mov	r6, r0
 800f6de:	b9ad      	cbnz	r5, 800f70c <rmw_uxrce_init_subscription_memory+0x38>
 800f6e0:	23d8      	movs	r3, #216	@ 0xd8
 800f6e2:	e9c0 5500 	strd	r5, r5, [r0]
 800f6e6:	6083      	str	r3, [r0, #8]
 800f6e8:	f240 1301 	movw	r3, #257	@ 0x101
 800f6ec:	4617      	mov	r7, r2
 800f6ee:	8183      	strh	r3, [r0, #12]
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	46a8      	mov	r8, r5
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	3501      	adds	r5, #1
 800f6fa:	f008 fbfd 	bl	8017ef8 <put_memory>
 800f6fe:	42af      	cmp	r7, r5
 800f700:	60a4      	str	r4, [r4, #8]
 800f702:	f884 800c 	strb.w	r8, [r4, #12]
 800f706:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f70a:	d1f3      	bne.n	800f6f4 <rmw_uxrce_init_subscription_memory+0x20>
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop

0800f714 <rmw_uxrce_init_node_memory>:
 800f714:	b1e2      	cbz	r2, 800f750 <rmw_uxrce_init_node_memory+0x3c>
 800f716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71a:	7b05      	ldrb	r5, [r0, #12]
 800f71c:	4606      	mov	r6, r0
 800f71e:	b9ad      	cbnz	r5, 800f74c <rmw_uxrce_init_node_memory+0x38>
 800f720:	23a4      	movs	r3, #164	@ 0xa4
 800f722:	e9c0 5500 	strd	r5, r5, [r0]
 800f726:	6083      	str	r3, [r0, #8]
 800f728:	f240 1301 	movw	r3, #257	@ 0x101
 800f72c:	4617      	mov	r7, r2
 800f72e:	8183      	strh	r3, [r0, #12]
 800f730:	460c      	mov	r4, r1
 800f732:	46a8      	mov	r8, r5
 800f734:	4621      	mov	r1, r4
 800f736:	4630      	mov	r0, r6
 800f738:	3501      	adds	r5, #1
 800f73a:	f008 fbdd 	bl	8017ef8 <put_memory>
 800f73e:	42af      	cmp	r7, r5
 800f740:	60a4      	str	r4, [r4, #8]
 800f742:	f884 800c 	strb.w	r8, [r4, #12]
 800f746:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800f74a:	d1f3      	bne.n	800f734 <rmw_uxrce_init_node_memory+0x20>
 800f74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop

0800f754 <rmw_uxrce_init_session_memory>:
 800f754:	b1ea      	cbz	r2, 800f792 <rmw_uxrce_init_session_memory+0x3e>
 800f756:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f75a:	7b05      	ldrb	r5, [r0, #12]
 800f75c:	4606      	mov	r6, r0
 800f75e:	b9b5      	cbnz	r5, 800f78e <rmw_uxrce_init_session_memory+0x3a>
 800f760:	e9c0 5500 	strd	r5, r5, [r0]
 800f764:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800f768:	f240 1301 	movw	r3, #257	@ 0x101
 800f76c:	4617      	mov	r7, r2
 800f76e:	f8c0 8008 	str.w	r8, [r0, #8]
 800f772:	460c      	mov	r4, r1
 800f774:	8183      	strh	r3, [r0, #12]
 800f776:	46a9      	mov	r9, r5
 800f778:	4621      	mov	r1, r4
 800f77a:	4630      	mov	r0, r6
 800f77c:	3501      	adds	r5, #1
 800f77e:	f008 fbbb 	bl	8017ef8 <put_memory>
 800f782:	42af      	cmp	r7, r5
 800f784:	60a4      	str	r4, [r4, #8]
 800f786:	f884 900c 	strb.w	r9, [r4, #12]
 800f78a:	4444      	add	r4, r8
 800f78c:	d1f4      	bne.n	800f778 <rmw_uxrce_init_session_memory+0x24>
 800f78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f792:	4770      	bx	lr

0800f794 <rmw_uxrce_init_topic_memory>:
 800f794:	b1e2      	cbz	r2, 800f7d0 <rmw_uxrce_init_topic_memory+0x3c>
 800f796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f79a:	7b05      	ldrb	r5, [r0, #12]
 800f79c:	4606      	mov	r6, r0
 800f79e:	b9ad      	cbnz	r5, 800f7cc <rmw_uxrce_init_topic_memory+0x38>
 800f7a0:	231c      	movs	r3, #28
 800f7a2:	e9c0 5500 	strd	r5, r5, [r0]
 800f7a6:	6083      	str	r3, [r0, #8]
 800f7a8:	f240 1301 	movw	r3, #257	@ 0x101
 800f7ac:	4617      	mov	r7, r2
 800f7ae:	8183      	strh	r3, [r0, #12]
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	46a8      	mov	r8, r5
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	3501      	adds	r5, #1
 800f7ba:	f008 fb9d 	bl	8017ef8 <put_memory>
 800f7be:	42af      	cmp	r7, r5
 800f7c0:	60a4      	str	r4, [r4, #8]
 800f7c2:	f884 800c 	strb.w	r8, [r4, #12]
 800f7c6:	f104 041c 	add.w	r4, r4, #28
 800f7ca:	d1f3      	bne.n	800f7b4 <rmw_uxrce_init_topic_memory+0x20>
 800f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop

0800f7d4 <rmw_uxrce_init_static_input_buffer_memory>:
 800f7d4:	b1ea      	cbz	r2, 800f812 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7da:	7b05      	ldrb	r5, [r0, #12]
 800f7dc:	4606      	mov	r6, r0
 800f7de:	b9b5      	cbnz	r5, 800f80e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f7e0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800f7e4:	e9c0 5500 	strd	r5, r5, [r0]
 800f7e8:	6083      	str	r3, [r0, #8]
 800f7ea:	f240 1301 	movw	r3, #257	@ 0x101
 800f7ee:	4617      	mov	r7, r2
 800f7f0:	8183      	strh	r3, [r0, #12]
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	46a8      	mov	r8, r5
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	3501      	adds	r5, #1
 800f7fc:	f008 fb7c 	bl	8017ef8 <put_memory>
 800f800:	42af      	cmp	r7, r5
 800f802:	60a4      	str	r4, [r4, #8]
 800f804:	f884 800c 	strb.w	r8, [r4, #12]
 800f808:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800f80c:	d1f3      	bne.n	800f7f6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f812:	4770      	bx	lr

0800f814 <rmw_uxrce_init_init_options_impl_memory>:
 800f814:	b1e2      	cbz	r2, 800f850 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81a:	7b05      	ldrb	r5, [r0, #12]
 800f81c:	4606      	mov	r6, r0
 800f81e:	b9ad      	cbnz	r5, 800f84c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f820:	232c      	movs	r3, #44	@ 0x2c
 800f822:	e9c0 5500 	strd	r5, r5, [r0]
 800f826:	6083      	str	r3, [r0, #8]
 800f828:	f240 1301 	movw	r3, #257	@ 0x101
 800f82c:	4617      	mov	r7, r2
 800f82e:	8183      	strh	r3, [r0, #12]
 800f830:	460c      	mov	r4, r1
 800f832:	46a8      	mov	r8, r5
 800f834:	4621      	mov	r1, r4
 800f836:	4630      	mov	r0, r6
 800f838:	3501      	adds	r5, #1
 800f83a:	f008 fb5d 	bl	8017ef8 <put_memory>
 800f83e:	42af      	cmp	r7, r5
 800f840:	60a4      	str	r4, [r4, #8]
 800f842:	f884 800c 	strb.w	r8, [r4, #12]
 800f846:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800f84a:	d1f3      	bne.n	800f834 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop

0800f854 <rmw_uxrce_init_wait_set_memory>:
 800f854:	b1e2      	cbz	r2, 800f890 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f85a:	7b05      	ldrb	r5, [r0, #12]
 800f85c:	4606      	mov	r6, r0
 800f85e:	b9ad      	cbnz	r5, 800f88c <rmw_uxrce_init_wait_set_memory+0x38>
 800f860:	231c      	movs	r3, #28
 800f862:	e9c0 5500 	strd	r5, r5, [r0]
 800f866:	6083      	str	r3, [r0, #8]
 800f868:	f240 1301 	movw	r3, #257	@ 0x101
 800f86c:	4617      	mov	r7, r2
 800f86e:	8183      	strh	r3, [r0, #12]
 800f870:	460c      	mov	r4, r1
 800f872:	46a8      	mov	r8, r5
 800f874:	4621      	mov	r1, r4
 800f876:	4630      	mov	r0, r6
 800f878:	3501      	adds	r5, #1
 800f87a:	f008 fb3d 	bl	8017ef8 <put_memory>
 800f87e:	42af      	cmp	r7, r5
 800f880:	60a4      	str	r4, [r4, #8]
 800f882:	f884 800c 	strb.w	r8, [r4, #12]
 800f886:	f104 041c 	add.w	r4, r4, #28
 800f88a:	d1f3      	bne.n	800f874 <rmw_uxrce_init_wait_set_memory+0x20>
 800f88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop

0800f894 <rmw_uxrce_init_guard_condition_memory>:
 800f894:	b1e2      	cbz	r2, 800f8d0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f89a:	7b05      	ldrb	r5, [r0, #12]
 800f89c:	4606      	mov	r6, r0
 800f89e:	b9ad      	cbnz	r5, 800f8cc <rmw_uxrce_init_guard_condition_memory+0x38>
 800f8a0:	2320      	movs	r3, #32
 800f8a2:	e9c0 5500 	strd	r5, r5, [r0]
 800f8a6:	6083      	str	r3, [r0, #8]
 800f8a8:	f240 1301 	movw	r3, #257	@ 0x101
 800f8ac:	4617      	mov	r7, r2
 800f8ae:	8183      	strh	r3, [r0, #12]
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	46a8      	mov	r8, r5
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	3501      	adds	r5, #1
 800f8ba:	f008 fb1d 	bl	8017ef8 <put_memory>
 800f8be:	42af      	cmp	r7, r5
 800f8c0:	60a4      	str	r4, [r4, #8]
 800f8c2:	f884 800c 	strb.w	r8, [r4, #12]
 800f8c6:	f104 0420 	add.w	r4, r4, #32
 800f8ca:	d1f3      	bne.n	800f8b4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop

0800f8d4 <rmw_uxrce_fini_session_memory>:
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	4801      	ldr	r0, [pc, #4]	@ (800f8dc <rmw_uxrce_fini_session_memory+0x8>)
 800f8d8:	f008 bb0e 	b.w	8017ef8 <put_memory>
 800f8dc:	2000c0b4 	.word	0x2000c0b4

0800f8e0 <rmw_uxrce_fini_node_memory>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	6800      	ldr	r0, [r0, #0]
 800f8e6:	b128      	cbz	r0, 800f8f4 <rmw_uxrce_fini_node_memory+0x14>
 800f8e8:	4b07      	ldr	r3, [pc, #28]	@ (800f908 <rmw_uxrce_fini_node_memory+0x28>)
 800f8ea:	6819      	ldr	r1, [r3, #0]
 800f8ec:	f7f0 fc98 	bl	8000220 <strcmp>
 800f8f0:	b940      	cbnz	r0, 800f904 <rmw_uxrce_fini_node_memory+0x24>
 800f8f2:	6020      	str	r0, [r4, #0]
 800f8f4:	6861      	ldr	r1, [r4, #4]
 800f8f6:	b129      	cbz	r1, 800f904 <rmw_uxrce_fini_node_memory+0x24>
 800f8f8:	2500      	movs	r5, #0
 800f8fa:	4804      	ldr	r0, [pc, #16]	@ (800f90c <rmw_uxrce_fini_node_memory+0x2c>)
 800f8fc:	610d      	str	r5, [r1, #16]
 800f8fe:	f008 fafb 	bl	8017ef8 <put_memory>
 800f902:	6065      	str	r5, [r4, #4]
 800f904:	bd38      	pop	{r3, r4, r5, pc}
 800f906:	bf00      	nop
 800f908:	0801de80 	.word	0x0801de80
 800f90c:	2000c084 	.word	0x2000c084

0800f910 <rmw_uxrce_fini_publisher_memory>:
 800f910:	b510      	push	{r4, lr}
 800f912:	4604      	mov	r4, r0
 800f914:	6800      	ldr	r0, [r0, #0]
 800f916:	b128      	cbz	r0, 800f924 <rmw_uxrce_fini_publisher_memory+0x14>
 800f918:	4b06      	ldr	r3, [pc, #24]	@ (800f934 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f91a:	6819      	ldr	r1, [r3, #0]
 800f91c:	f7f0 fc80 	bl	8000220 <strcmp>
 800f920:	b938      	cbnz	r0, 800f932 <rmw_uxrce_fini_publisher_memory+0x22>
 800f922:	6020      	str	r0, [r4, #0]
 800f924:	6861      	ldr	r1, [r4, #4]
 800f926:	b121      	cbz	r1, 800f932 <rmw_uxrce_fini_publisher_memory+0x22>
 800f928:	4803      	ldr	r0, [pc, #12]	@ (800f938 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f92a:	f008 fae5 	bl	8017ef8 <put_memory>
 800f92e:	2300      	movs	r3, #0
 800f930:	6063      	str	r3, [r4, #4]
 800f932:	bd10      	pop	{r4, pc}
 800f934:	0801de80 	.word	0x0801de80
 800f938:	2000c094 	.word	0x2000c094

0800f93c <rmw_uxrce_fini_subscription_memory>:
 800f93c:	b510      	push	{r4, lr}
 800f93e:	4604      	mov	r4, r0
 800f940:	6800      	ldr	r0, [r0, #0]
 800f942:	b128      	cbz	r0, 800f950 <rmw_uxrce_fini_subscription_memory+0x14>
 800f944:	4b06      	ldr	r3, [pc, #24]	@ (800f960 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f946:	6819      	ldr	r1, [r3, #0]
 800f948:	f7f0 fc6a 	bl	8000220 <strcmp>
 800f94c:	b938      	cbnz	r0, 800f95e <rmw_uxrce_fini_subscription_memory+0x22>
 800f94e:	6020      	str	r0, [r4, #0]
 800f950:	6861      	ldr	r1, [r4, #4]
 800f952:	b121      	cbz	r1, 800f95e <rmw_uxrce_fini_subscription_memory+0x22>
 800f954:	4803      	ldr	r0, [pc, #12]	@ (800f964 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f956:	f008 facf 	bl	8017ef8 <put_memory>
 800f95a:	2300      	movs	r3, #0
 800f95c:	6063      	str	r3, [r4, #4]
 800f95e:	bd10      	pop	{r4, pc}
 800f960:	0801de80 	.word	0x0801de80
 800f964:	2000c0d4 	.word	0x2000c0d4

0800f968 <rmw_uxrce_fini_service_memory>:
 800f968:	b510      	push	{r4, lr}
 800f96a:	4604      	mov	r4, r0
 800f96c:	6800      	ldr	r0, [r0, #0]
 800f96e:	b128      	cbz	r0, 800f97c <rmw_uxrce_fini_service_memory+0x14>
 800f970:	4b06      	ldr	r3, [pc, #24]	@ (800f98c <rmw_uxrce_fini_service_memory+0x24>)
 800f972:	6819      	ldr	r1, [r3, #0]
 800f974:	f7f0 fc54 	bl	8000220 <strcmp>
 800f978:	b938      	cbnz	r0, 800f98a <rmw_uxrce_fini_service_memory+0x22>
 800f97a:	6020      	str	r0, [r4, #0]
 800f97c:	6861      	ldr	r1, [r4, #4]
 800f97e:	b121      	cbz	r1, 800f98a <rmw_uxrce_fini_service_memory+0x22>
 800f980:	4803      	ldr	r0, [pc, #12]	@ (800f990 <rmw_uxrce_fini_service_memory+0x28>)
 800f982:	f008 fab9 	bl	8017ef8 <put_memory>
 800f986:	2300      	movs	r3, #0
 800f988:	6063      	str	r3, [r4, #4]
 800f98a:	bd10      	pop	{r4, pc}
 800f98c:	0801de80 	.word	0x0801de80
 800f990:	2000c0a4 	.word	0x2000c0a4

0800f994 <rmw_uxrce_fini_client_memory>:
 800f994:	b510      	push	{r4, lr}
 800f996:	4604      	mov	r4, r0
 800f998:	6800      	ldr	r0, [r0, #0]
 800f99a:	b128      	cbz	r0, 800f9a8 <rmw_uxrce_fini_client_memory+0x14>
 800f99c:	4b06      	ldr	r3, [pc, #24]	@ (800f9b8 <rmw_uxrce_fini_client_memory+0x24>)
 800f99e:	6819      	ldr	r1, [r3, #0]
 800f9a0:	f7f0 fc3e 	bl	8000220 <strcmp>
 800f9a4:	b938      	cbnz	r0, 800f9b6 <rmw_uxrce_fini_client_memory+0x22>
 800f9a6:	6020      	str	r0, [r4, #0]
 800f9a8:	6861      	ldr	r1, [r4, #4]
 800f9aa:	b121      	cbz	r1, 800f9b6 <rmw_uxrce_fini_client_memory+0x22>
 800f9ac:	4803      	ldr	r0, [pc, #12]	@ (800f9bc <rmw_uxrce_fini_client_memory+0x28>)
 800f9ae:	f008 faa3 	bl	8017ef8 <put_memory>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	6063      	str	r3, [r4, #4]
 800f9b6:	bd10      	pop	{r4, pc}
 800f9b8:	0801de80 	.word	0x0801de80
 800f9bc:	200076ec 	.word	0x200076ec

0800f9c0 <rmw_uxrce_fini_topic_memory>:
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	4604      	mov	r4, r0
 800f9c4:	4621      	mov	r1, r4
 800f9c6:	4803      	ldr	r0, [pc, #12]	@ (800f9d4 <rmw_uxrce_fini_topic_memory+0x14>)
 800f9c8:	f008 fa96 	bl	8017ef8 <put_memory>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	61a3      	str	r3, [r4, #24]
 800f9d0:	bd10      	pop	{r4, pc}
 800f9d2:	bf00      	nop
 800f9d4:	2000c0e4 	.word	0x2000c0e4

0800f9d8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f9d8:	b082      	sub	sp, #8
 800f9da:	b530      	push	{r4, r5, lr}
 800f9dc:	4925      	ldr	r1, [pc, #148]	@ (800fa74 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f9de:	680d      	ldr	r5, [r1, #0]
 800f9e0:	ac03      	add	r4, sp, #12
 800f9e2:	e884 000c 	stmia.w	r4, {r2, r3}
 800f9e6:	461c      	mov	r4, r3
 800f9e8:	2d00      	cmp	r5, #0
 800f9ea:	d041      	beq.n	800fa70 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f9ec:	462b      	mov	r3, r5
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	689a      	ldr	r2, [r3, #8]
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f9f8:	4290      	cmp	r0, r2
 800f9fa:	bf08      	it	eq
 800f9fc:	3101      	addeq	r1, #1
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1f6      	bne.n	800f9f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fa02:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fa06:	2b02      	cmp	r3, #2
 800fa08:	d029      	beq.n	800fa5e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fa0a:	d907      	bls.n	800fa1c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fa0c:	2b03      	cmp	r3, #3
 800fa0e:	d005      	beq.n	800fa1c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fa10:	2100      	movs	r1, #0
 800fa12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa16:	4608      	mov	r0, r1
 800fa18:	b002      	add	sp, #8
 800fa1a:	4770      	bx	lr
 800fa1c:	b314      	cbz	r4, 800fa64 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fa1e:	428c      	cmp	r4, r1
 800fa20:	d820      	bhi.n	800fa64 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fa22:	2d00      	cmp	r5, #0
 800fa24:	d0f4      	beq.n	800fa10 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fa26:	2100      	movs	r1, #0
 800fa28:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800fa2c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800fa30:	e002      	b.n	800fa38 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800fa32:	686d      	ldr	r5, [r5, #4]
 800fa34:	2d00      	cmp	r5, #0
 800fa36:	d0ec      	beq.n	800fa12 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800fa38:	68ab      	ldr	r3, [r5, #8]
 800fa3a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800fa3e:	4290      	cmp	r0, r2
 800fa40:	d1f7      	bne.n	800fa32 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fa42:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800fa46:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800fa4a:	4562      	cmp	r2, ip
 800fa4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800fa50:	eb73 0e04 	sbcs.w	lr, r3, r4
 800fa54:	daed      	bge.n	800fa32 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fa56:	4694      	mov	ip, r2
 800fa58:	461c      	mov	r4, r3
 800fa5a:	4629      	mov	r1, r5
 800fa5c:	e7e9      	b.n	800fa32 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fa5e:	b10c      	cbz	r4, 800fa64 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fa60:	428c      	cmp	r4, r1
 800fa62:	d9d5      	bls.n	800fa10 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fa64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa68:	4802      	ldr	r0, [pc, #8]	@ (800fa74 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fa6a:	b002      	add	sp, #8
 800fa6c:	f008 ba34 	b.w	8017ed8 <get_memory>
 800fa70:	4629      	mov	r1, r5
 800fa72:	e7c6      	b.n	800fa02 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800fa74:	2000c0c4 	.word	0x2000c0c4

0800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800fa78:	4b11      	ldr	r3, [pc, #68]	@ (800fac0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	b530      	push	{r4, r5, lr}
 800fa7e:	b1e3      	cbz	r3, 800faba <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800fa80:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800fa84:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800fa88:	2400      	movs	r4, #0
 800fa8a:	e001      	b.n	800fa90 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	b193      	cbz	r3, 800fab6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800fa96:	4288      	cmp	r0, r1
 800fa98:	d1f8      	bne.n	800fa8c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800fa9a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800fa9e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800faa2:	4571      	cmp	r1, lr
 800faa4:	eb72 050c 	sbcs.w	r5, r2, ip
 800faa8:	daf0      	bge.n	800fa8c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800faaa:	461c      	mov	r4, r3
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	468e      	mov	lr, r1
 800fab0:	4694      	mov	ip, r2
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d1ec      	bne.n	800fa90 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800fab6:	4620      	mov	r0, r4
 800fab8:	bd30      	pop	{r4, r5, pc}
 800faba:	461c      	mov	r4, r3
 800fabc:	4620      	mov	r0, r4
 800fabe:	bd30      	pop	{r4, r5, pc}
 800fac0:	2000c0c4 	.word	0x2000c0c4
 800fac4:	00000000 	.word	0x00000000

0800fac8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800facc:	4b3c      	ldr	r3, [pc, #240]	@ (800fbc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800face:	ed2d 8b06 	vpush	{d8-d10}
 800fad2:	681f      	ldr	r7, [r3, #0]
 800fad4:	b08d      	sub	sp, #52	@ 0x34
 800fad6:	f7ff fd7d 	bl	800f5d4 <rmw_uros_epoch_nanos>
 800fada:	2f00      	cmp	r7, #0
 800fadc:	d05d      	beq.n	800fb9a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800fade:	46b8      	mov	r8, r7
 800fae0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800fba8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800fae4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fae8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800faec:	2b04      	cmp	r3, #4
 800faee:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800fbb0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800faf2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800fbb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800faf6:	4681      	mov	r9, r0
 800faf8:	468a      	mov	sl, r1
 800fafa:	ac04      	add	r4, sp, #16
 800fafc:	d03f      	beq.n	800fb7e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800fafe:	2b05      	cmp	r3, #5
 800fb00:	d044      	beq.n	800fb8c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800fb02:	2b03      	cmp	r3, #3
 800fb04:	d03b      	beq.n	800fb7e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800fb06:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fb0a:	ed8d ab06 	vstr	d10, [sp, #24]
 800fb0e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800fb12:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800fb16:	ab08      	add	r3, sp, #32
 800fb18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb1a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fb22:	f007 ff25 	bl	8017970 <rmw_time_equal>
 800fb26:	b118      	cbz	r0, 800fb30 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800fb28:	ed8d 9b04 	vstr	d9, [sp, #16]
 800fb2c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fb30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fb34:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800fb38:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800fb3c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800fb40:	f007 ff6a 	bl	8017a18 <rmw_time_total_nsec>
 800fb44:	1830      	adds	r0, r6, r0
 800fb46:	eb47 0101 	adc.w	r1, r7, r1
 800fb4a:	4548      	cmp	r0, r9
 800fb4c:	eb71 030a 	sbcs.w	r3, r1, sl
 800fb50:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800fb54:	db05      	blt.n	800fb62 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800fb56:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800fb5a:	4591      	cmp	r9, r2
 800fb5c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800fb60:	da03      	bge.n	800fb6a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800fb62:	4817      	ldr	r0, [pc, #92]	@ (800fbc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800fb64:	4641      	mov	r1, r8
 800fb66:	f008 f9c7 	bl	8017ef8 <put_memory>
 800fb6a:	f1bb 0f00 	cmp.w	fp, #0
 800fb6e:	d014      	beq.n	800fb9a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800fb70:	46d8      	mov	r8, fp
 800fb72:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fb76:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800fb7a:	2b04      	cmp	r3, #4
 800fb7c:	d1bf      	bne.n	800fafe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800fb7e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fb82:	3340      	adds	r3, #64	@ 0x40
 800fb84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fb8a:	e7c0      	b.n	800fb0e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fb8c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fb90:	3348      	adds	r3, #72	@ 0x48
 800fb92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fb98:	e7b9      	b.n	800fb0e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fb9a:	b00d      	add	sp, #52	@ 0x34
 800fb9c:	ecbd 8b06 	vpop	{d8-d10}
 800fba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba4:	f3af 8000 	nop.w
	...
 800fbb0:	00000001 	.word	0x00000001
 800fbb4:	00000000 	.word	0x00000000
 800fbb8:	0000001e 	.word	0x0000001e
 800fbbc:	00000000 	.word	0x00000000
 800fbc0:	2000c0c4 	.word	0x2000c0c4

0800fbc4 <run_xrce_session>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	788c      	ldrb	r4, [r1, #2]
 800fbc8:	b086      	sub	sp, #24
 800fbca:	2c01      	cmp	r4, #1
 800fbcc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800fbd0:	d00c      	beq.n	800fbec <run_xrce_session+0x28>
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	f10d 020e 	add.w	r2, sp, #14
 800fbdc:	f10d 0317 	add.w	r3, sp, #23
 800fbe0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbe4:	f002 f968 	bl	8011eb8 <uxr_run_session_until_all_status>
 800fbe8:	b006      	add	sp, #24
 800fbea:	bd10      	pop	{r4, pc}
 800fbec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbf0:	f001 fd7c 	bl	80116ec <uxr_flash_output_streams>
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	b006      	add	sp, #24
 800fbf8:	bd10      	pop	{r4, pc}
 800fbfa:	bf00      	nop

0800fbfc <convert_qos_profile>:
 800fbfc:	7a4a      	ldrb	r2, [r1, #9]
 800fbfe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800fc02:	2a02      	cmp	r2, #2
 800fc04:	bf18      	it	ne
 800fc06:	2200      	movne	r2, #0
 800fc08:	7002      	strb	r2, [r0, #0]
 800fc0a:	780a      	ldrb	r2, [r1, #0]
 800fc0c:	8889      	ldrh	r1, [r1, #4]
 800fc0e:	8081      	strh	r1, [r0, #4]
 800fc10:	f1ac 0c02 	sub.w	ip, ip, #2
 800fc14:	f1a2 0202 	sub.w	r2, r2, #2
 800fc18:	fabc fc8c 	clz	ip, ip
 800fc1c:	fab2 f282 	clz	r2, r2
 800fc20:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800fc24:	0952      	lsrs	r2, r2, #5
 800fc26:	f880 c001 	strb.w	ip, [r0, #1]
 800fc2a:	7082      	strb	r2, [r0, #2]
 800fc2c:	4770      	bx	lr
 800fc2e:	bf00      	nop

0800fc30 <generate_service_topics>:
 800fc30:	b570      	push	{r4, r5, r6, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	461c      	mov	r4, r3
 800fc36:	4b12      	ldr	r3, [pc, #72]	@ (800fc80 <generate_service_topics+0x50>)
 800fc38:	9301      	str	r3, [sp, #4]
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	4b11      	ldr	r3, [pc, #68]	@ (800fc84 <generate_service_topics+0x54>)
 800fc3e:	9000      	str	r0, [sp, #0]
 800fc40:	4616      	mov	r6, r2
 800fc42:	4608      	mov	r0, r1
 800fc44:	4a10      	ldr	r2, [pc, #64]	@ (800fc88 <generate_service_topics+0x58>)
 800fc46:	4621      	mov	r1, r4
 800fc48:	f00a fb42 	bl	801a2d0 <sniprintf>
 800fc4c:	4b0f      	ldr	r3, [pc, #60]	@ (800fc8c <generate_service_topics+0x5c>)
 800fc4e:	9301      	str	r3, [sp, #4]
 800fc50:	4601      	mov	r1, r0
 800fc52:	9500      	str	r5, [sp, #0]
 800fc54:	4b0e      	ldr	r3, [pc, #56]	@ (800fc90 <generate_service_topics+0x60>)
 800fc56:	4a0c      	ldr	r2, [pc, #48]	@ (800fc88 <generate_service_topics+0x58>)
 800fc58:	460d      	mov	r5, r1
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	f00a fb37 	bl	801a2d0 <sniprintf>
 800fc62:	2d00      	cmp	r5, #0
 800fc64:	db01      	blt.n	800fc6a <generate_service_topics+0x3a>
 800fc66:	42ac      	cmp	r4, r5
 800fc68:	dc02      	bgt.n	800fc70 <generate_service_topics+0x40>
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	b002      	add	sp, #8
 800fc6e:	bd70      	pop	{r4, r5, r6, pc}
 800fc70:	2800      	cmp	r0, #0
 800fc72:	dbfa      	blt.n	800fc6a <generate_service_topics+0x3a>
 800fc74:	4284      	cmp	r4, r0
 800fc76:	bfd4      	ite	le
 800fc78:	2000      	movle	r0, #0
 800fc7a:	2001      	movgt	r0, #1
 800fc7c:	b002      	add	sp, #8
 800fc7e:	bd70      	pop	{r4, r5, r6, pc}
 800fc80:	0801d0dc 	.word	0x0801d0dc
 800fc84:	0801d0d8 	.word	0x0801d0d8
 800fc88:	0801d0b4 	.word	0x0801d0b4
 800fc8c:	0801d0d0 	.word	0x0801d0d0
 800fc90:	0801d0cc 	.word	0x0801d0cc

0800fc94 <generate_service_types>:
 800fc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc98:	4605      	mov	r5, r0
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	6880      	ldr	r0, [r0, #8]
 800fc9e:	460c      	mov	r4, r1
 800fca0:	4617      	mov	r7, r2
 800fca2:	461e      	mov	r6, r3
 800fca4:	4780      	blx	r0
 800fca6:	68eb      	ldr	r3, [r5, #12]
 800fca8:	4680      	mov	r8, r0
 800fcaa:	4798      	blx	r3
 800fcac:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800fcb0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	7023      	strb	r3, [r4, #0]
 800fcb8:	6813      	ldr	r3, [r2, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d042      	beq.n	800fd44 <generate_service_types+0xb0>
 800fcbe:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800fd58 <generate_service_types+0xc4>
 800fcc2:	4641      	mov	r1, r8
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	4c22      	ldr	r4, [pc, #136]	@ (800fd50 <generate_service_types+0xbc>)
 800fcc8:	9405      	str	r4, [sp, #20]
 800fcca:	6852      	ldr	r2, [r2, #4]
 800fccc:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800fd60 <generate_service_types+0xcc>
 800fcd0:	9204      	str	r2, [sp, #16]
 800fcd2:	9100      	str	r1, [sp, #0]
 800fcd4:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800fcd8:	4a1e      	ldr	r2, [pc, #120]	@ (800fd54 <generate_service_types+0xc0>)
 800fcda:	f8cd a004 	str.w	sl, [sp, #4]
 800fcde:	4631      	mov	r1, r6
 800fce0:	f00a faf6 	bl	801a2d0 <sniprintf>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	db1f      	blt.n	800fd28 <generate_service_types+0x94>
 800fce8:	2300      	movs	r3, #0
 800fcea:	703b      	strb	r3, [r7, #0]
 800fcec:	f8d9 3000 	ldr.w	r3, [r9]
 800fcf0:	42b0      	cmp	r0, r6
 800fcf2:	bfac      	ite	ge
 800fcf4:	2500      	movge	r5, #0
 800fcf6:	2501      	movlt	r5, #1
 800fcf8:	b1eb      	cbz	r3, 800fd36 <generate_service_types+0xa2>
 800fcfa:	4a17      	ldr	r2, [pc, #92]	@ (800fd58 <generate_service_types+0xc4>)
 800fcfc:	9405      	str	r4, [sp, #20]
 800fcfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fd02:	9200      	str	r2, [sp, #0]
 800fd04:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800fd08:	e9cd a401 	strd	sl, r4, [sp, #4]
 800fd0c:	4a11      	ldr	r2, [pc, #68]	@ (800fd54 <generate_service_types+0xc0>)
 800fd0e:	4638      	mov	r0, r7
 800fd10:	4631      	mov	r1, r6
 800fd12:	f00a fadd 	bl	801a2d0 <sniprintf>
 800fd16:	2800      	cmp	r0, #0
 800fd18:	db10      	blt.n	800fd3c <generate_service_types+0xa8>
 800fd1a:	42b0      	cmp	r0, r6
 800fd1c:	bfb4      	ite	lt
 800fd1e:	4628      	movlt	r0, r5
 800fd20:	2000      	movge	r0, #0
 800fd22:	b006      	add	sp, #24
 800fd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd28:	2300      	movs	r3, #0
 800fd2a:	703b      	strb	r3, [r7, #0]
 800fd2c:	f8d9 3000 	ldr.w	r3, [r9]
 800fd30:	2500      	movs	r5, #0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d1e1      	bne.n	800fcfa <generate_service_types+0x66>
 800fd36:	4b09      	ldr	r3, [pc, #36]	@ (800fd5c <generate_service_types+0xc8>)
 800fd38:	461a      	mov	r2, r3
 800fd3a:	e7df      	b.n	800fcfc <generate_service_types+0x68>
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	b006      	add	sp, #24
 800fd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd44:	4b05      	ldr	r3, [pc, #20]	@ (800fd5c <generate_service_types+0xc8>)
 800fd46:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800fd58 <generate_service_types+0xc4>
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	e7ba      	b.n	800fcc4 <generate_service_types+0x30>
 800fd4e:	bf00      	nop
 800fd50:	0801d0bc 	.word	0x0801d0bc
 800fd54:	0801d0ac 	.word	0x0801d0ac
 800fd58:	0801d0a8 	.word	0x0801d0a8
 800fd5c:	0801df0c 	.word	0x0801df0c
 800fd60:	0801d0c0 	.word	0x0801d0c0

0800fd64 <generate_type_name>:
 800fd64:	b530      	push	{r4, r5, lr}
 800fd66:	2300      	movs	r3, #0
 800fd68:	700b      	strb	r3, [r1, #0]
 800fd6a:	6803      	ldr	r3, [r0, #0]
 800fd6c:	b087      	sub	sp, #28
 800fd6e:	4614      	mov	r4, r2
 800fd70:	b1d3      	cbz	r3, 800fda8 <generate_type_name+0x44>
 800fd72:	4a0f      	ldr	r2, [pc, #60]	@ (800fdb0 <generate_type_name+0x4c>)
 800fd74:	4615      	mov	r5, r2
 800fd76:	9203      	str	r2, [sp, #12]
 800fd78:	9500      	str	r5, [sp, #0]
 800fd7a:	6842      	ldr	r2, [r0, #4]
 800fd7c:	480d      	ldr	r0, [pc, #52]	@ (800fdb4 <generate_type_name+0x50>)
 800fd7e:	9001      	str	r0, [sp, #4]
 800fd80:	4608      	mov	r0, r1
 800fd82:	490d      	ldr	r1, [pc, #52]	@ (800fdb8 <generate_type_name+0x54>)
 800fd84:	9204      	str	r2, [sp, #16]
 800fd86:	9105      	str	r1, [sp, #20]
 800fd88:	9102      	str	r1, [sp, #8]
 800fd8a:	4a0c      	ldr	r2, [pc, #48]	@ (800fdbc <generate_type_name+0x58>)
 800fd8c:	4621      	mov	r1, r4
 800fd8e:	f00a fa9f 	bl	801a2d0 <sniprintf>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	db05      	blt.n	800fda2 <generate_type_name+0x3e>
 800fd96:	4284      	cmp	r4, r0
 800fd98:	bfd4      	ite	le
 800fd9a:	2000      	movle	r0, #0
 800fd9c:	2001      	movgt	r0, #1
 800fd9e:	b007      	add	sp, #28
 800fda0:	bd30      	pop	{r4, r5, pc}
 800fda2:	2000      	movs	r0, #0
 800fda4:	b007      	add	sp, #28
 800fda6:	bd30      	pop	{r4, r5, pc}
 800fda8:	4b05      	ldr	r3, [pc, #20]	@ (800fdc0 <generate_type_name+0x5c>)
 800fdaa:	4a01      	ldr	r2, [pc, #4]	@ (800fdb0 <generate_type_name+0x4c>)
 800fdac:	461d      	mov	r5, r3
 800fdae:	e7e2      	b.n	800fd76 <generate_type_name+0x12>
 800fdb0:	0801d0a8 	.word	0x0801d0a8
 800fdb4:	0801d0c0 	.word	0x0801d0c0
 800fdb8:	0801d0bc 	.word	0x0801d0bc
 800fdbc:	0801d0ac 	.word	0x0801d0ac
 800fdc0:	0801df0c 	.word	0x0801df0c

0800fdc4 <generate_topic_name>:
 800fdc4:	b510      	push	{r4, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	4614      	mov	r4, r2
 800fdca:	9000      	str	r0, [sp, #0]
 800fdcc:	4b08      	ldr	r3, [pc, #32]	@ (800fdf0 <generate_topic_name+0x2c>)
 800fdce:	4a09      	ldr	r2, [pc, #36]	@ (800fdf4 <generate_topic_name+0x30>)
 800fdd0:	4608      	mov	r0, r1
 800fdd2:	4621      	mov	r1, r4
 800fdd4:	f00a fa7c 	bl	801a2d0 <sniprintf>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	db05      	blt.n	800fde8 <generate_topic_name+0x24>
 800fddc:	4284      	cmp	r4, r0
 800fdde:	bfd4      	ite	le
 800fde0:	2000      	movle	r0, #0
 800fde2:	2001      	movgt	r0, #1
 800fde4:	b002      	add	sp, #8
 800fde6:	bd10      	pop	{r4, pc}
 800fde8:	2000      	movs	r0, #0
 800fdea:	b002      	add	sp, #8
 800fdec:	bd10      	pop	{r4, pc}
 800fdee:	bf00      	nop
 800fdf0:	0801d0e4 	.word	0x0801d0e4
 800fdf4:	0801d0c4 	.word	0x0801d0c4

0800fdf8 <is_uxrce_rmw_identifier_valid>:
 800fdf8:	b510      	push	{r4, lr}
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	b140      	cbz	r0, 800fe10 <is_uxrce_rmw_identifier_valid+0x18>
 800fdfe:	f008 f8d3 	bl	8017fa8 <rmw_get_implementation_identifier>
 800fe02:	4601      	mov	r1, r0
 800fe04:	4620      	mov	r0, r4
 800fe06:	f7f0 fa0b 	bl	8000220 <strcmp>
 800fe0a:	fab0 f080 	clz	r0, r0
 800fe0e:	0940      	lsrs	r0, r0, #5
 800fe10:	bd10      	pop	{r4, pc}
 800fe12:	bf00      	nop

0800fe14 <get_message_typesupport_handle>:
 800fe14:	6883      	ldr	r3, [r0, #8]
 800fe16:	4718      	bx	r3

0800fe18 <get_message_typesupport_handle_function>:
 800fe18:	b510      	push	{r4, lr}
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	6800      	ldr	r0, [r0, #0]
 800fe1e:	f7f0 f9ff 	bl	8000220 <strcmp>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	bf0c      	ite	eq
 800fe26:	4620      	moveq	r0, r4
 800fe28:	2000      	movne	r0, #0
 800fe2a:	bd10      	pop	{r4, pc}

0800fe2c <get_service_typesupport_handle>:
 800fe2c:	6883      	ldr	r3, [r0, #8]
 800fe2e:	4718      	bx	r3

0800fe30 <get_service_typesupport_handle_function>:
 800fe30:	b510      	push	{r4, lr}
 800fe32:	4604      	mov	r4, r0
 800fe34:	6800      	ldr	r0, [r0, #0]
 800fe36:	f7f0 f9f3 	bl	8000220 <strcmp>
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	bf0c      	ite	eq
 800fe3e:	4620      	moveq	r0, r4
 800fe40:	2000      	movne	r0, #0
 800fe42:	bd10      	pop	{r4, pc}

0800fe44 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800fe44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe48:	6805      	ldr	r5, [r0, #0]
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	460e      	mov	r6, r1
 800fe50:	f7f0 f9e6 	bl	8000220 <strcmp>
 800fe54:	b1c8      	cbz	r0, 800fe8a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800fe56:	4b11      	ldr	r3, [pc, #68]	@ (800fe9c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	429d      	cmp	r5, r3
 800fe5c:	d112      	bne.n	800fe84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fe5e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fe62:	f8d8 4000 	ldr.w	r4, [r8]
 800fe66:	b16c      	cbz	r4, 800fe84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fe68:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fe6c:	2700      	movs	r7, #0
 800fe6e:	3d04      	subs	r5, #4
 800fe70:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fe74:	4631      	mov	r1, r6
 800fe76:	f7f0 f9d3 	bl	8000220 <strcmp>
 800fe7a:	00bb      	lsls	r3, r7, #2
 800fe7c:	b140      	cbz	r0, 800fe90 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800fe7e:	3701      	adds	r7, #1
 800fe80:	42bc      	cmp	r4, r7
 800fe82:	d1f5      	bne.n	800fe70 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800fe84:	2000      	movs	r0, #0
 800fe86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe90:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fe94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe98:	58d3      	ldr	r3, [r2, r3]
 800fe9a:	4718      	bx	r3
 800fe9c:	200003bc 	.word	0x200003bc

0800fea0 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800fea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea4:	6805      	ldr	r5, [r0, #0]
 800fea6:	4604      	mov	r4, r0
 800fea8:	4628      	mov	r0, r5
 800feaa:	460e      	mov	r6, r1
 800feac:	f7f0 f9b8 	bl	8000220 <strcmp>
 800feb0:	b1c8      	cbz	r0, 800fee6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800feb2:	4b11      	ldr	r3, [pc, #68]	@ (800fef8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	429d      	cmp	r5, r3
 800feb8:	d112      	bne.n	800fee0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800feba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800febe:	f8d8 4000 	ldr.w	r4, [r8]
 800fec2:	b16c      	cbz	r4, 800fee0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800fec4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fec8:	2700      	movs	r7, #0
 800feca:	3d04      	subs	r5, #4
 800fecc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fed0:	4631      	mov	r1, r6
 800fed2:	f7f0 f9a5 	bl	8000220 <strcmp>
 800fed6:	00bb      	lsls	r3, r7, #2
 800fed8:	b140      	cbz	r0, 800feec <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800feda:	3701      	adds	r7, #1
 800fedc:	42bc      	cmp	r4, r7
 800fede:	d1f5      	bne.n	800fecc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800fee0:	2000      	movs	r0, #0
 800fee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee6:	4620      	mov	r0, r4
 800fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fef4:	58d3      	ldr	r3, [r2, r3]
 800fef6:	4718      	bx	r3
 800fef8:	200003bc 	.word	0x200003bc

0800fefc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800fefc:	4b04      	ldr	r3, [pc, #16]	@ (800ff10 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	b10a      	cbz	r2, 800ff06 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800ff02:	4803      	ldr	r0, [pc, #12]	@ (800ff10 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ff04:	4770      	bx	lr
 800ff06:	4a03      	ldr	r2, [pc, #12]	@ (800ff14 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800ff08:	4801      	ldr	r0, [pc, #4]	@ (800ff10 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ff0a:	6812      	ldr	r2, [r2, #0]
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	4770      	bx	lr
 800ff10:	200003cc 	.word	0x200003cc
 800ff14:	200003bc 	.word	0x200003bc

0800ff18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ff18:	4a02      	ldr	r2, [pc, #8]	@ (800ff24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800ff1a:	4b03      	ldr	r3, [pc, #12]	@ (800ff28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800ff1c:	6812      	ldr	r2, [r2, #0]
 800ff1e:	601a      	str	r2, [r3, #0]
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	200003bc 	.word	0x200003bc
 800ff28:	200003cc 	.word	0x200003cc

0800ff2c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800ff2c:	2009      	movs	r0, #9
 800ff2e:	4770      	bx	lr

0800ff30 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800ff30:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop

0800ff38 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800ff38:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ff3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff40:	e9c2 0100 	strd	r0, r1, [r2]
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop

0800ff48 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800ff48:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ff4c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ff50:	e9c1 2300 	strd	r2, r3, [r1]
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop

0800ff58 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800ff58:	f008 bbda 	b.w	8018710 <sensor_msgs__msg__Imu__init>

0800ff5c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800ff5c:	f008 bc2e 	b.w	80187bc <sensor_msgs__msg__Imu__fini>

0800ff60 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800ff60:	2009      	movs	r0, #9
 800ff62:	4770      	bx	lr

0800ff64 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800ff64:	2009      	movs	r0, #9
 800ff66:	4770      	bx	lr

0800ff68 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800ff68:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop

0800ff70 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800ff70:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop

0800ff78 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800ff78:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop

0800ff80 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800ff80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop

0800ff88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800ff88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop

0800ff90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800ff90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ff94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff98:	e9c2 0100 	strd	r0, r1, [r2]
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop

0800ffa0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800ffa0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ffa4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ffa8:	e9c1 2300 	strd	r2, r3, [r1]
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop

0800ffb0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800ffb0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ffb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffb8:	e9c2 0100 	strd	r0, r1, [r2]
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop

0800ffc0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800ffc0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ffc4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ffc8:	e9c1 2300 	strd	r2, r3, [r1]
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop

0800ffd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ffd0:	b510      	push	{r4, lr}
 800ffd2:	f000 f90f 	bl	80101f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ffd6:	4c0b      	ldr	r4, [pc, #44]	@ (8010004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800ffd8:	60e0      	str	r0, [r4, #12]
 800ffda:	f000 fb91 	bl	8010700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ffde:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ffe0:	f7fb fc1a 	bl	800b818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ffe4:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800ffe8:	f7fb fc16 	bl	800b818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ffec:	4b06      	ldr	r3, [pc, #24]	@ (8010008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ffee:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	b10a      	cbz	r2, 800fffa <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800fff6:	4804      	ldr	r0, [pc, #16]	@ (8010008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800fff8:	bd10      	pop	{r4, pc}
 800fffa:	4a04      	ldr	r2, [pc, #16]	@ (801000c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800fffc:	4802      	ldr	r0, [pc, #8]	@ (8010008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800fffe:	6812      	ldr	r2, [r2, #0]
 8010000:	601a      	str	r2, [r3, #0]
 8010002:	bd10      	pop	{r4, pc}
 8010004:	200003d8 	.word	0x200003d8
 8010008:	2000057c 	.word	0x2000057c
 801000c:	200003c0 	.word	0x200003c0

08010010 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8010010:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8010014:	4680      	mov	r8, r0
 8010016:	460f      	mov	r7, r1
 8010018:	f000 f910 	bl	801023c <get_serialized_size_std_msgs__msg__Header>
 801001c:	183c      	adds	r4, r7, r0
 801001e:	4621      	mov	r1, r4
 8010020:	f108 0018 	add.w	r0, r8, #24
 8010024:	f000 fb7a 	bl	801071c <get_serialized_size_geometry_msgs__msg__Quaternion>
 8010028:	4404      	add	r4, r0
 801002a:	2108      	movs	r1, #8
 801002c:	4620      	mov	r0, r4
 801002e:	f7fd f91f 	bl	800d270 <ucdr_alignment>
 8010032:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8010036:	4425      	add	r5, r4
 8010038:	4629      	mov	r1, r5
 801003a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 801003e:	f7fb fc5f 	bl	800b900 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010042:	4405      	add	r5, r0
 8010044:	2108      	movs	r1, #8
 8010046:	4628      	mov	r0, r5
 8010048:	f7fd f912 	bl	800d270 <ucdr_alignment>
 801004c:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8010050:	4425      	add	r5, r4
 8010052:	4629      	mov	r1, r5
 8010054:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8010058:	f7fb fc52 	bl	800b900 <get_serialized_size_geometry_msgs__msg__Vector3>
 801005c:	4405      	add	r5, r0
 801005e:	2108      	movs	r1, #8
 8010060:	4628      	mov	r0, r5
 8010062:	f7fd f905 	bl	800d270 <ucdr_alignment>
 8010066:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 801006a:	4438      	add	r0, r7
 801006c:	4428      	add	r0, r5
 801006e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8010072:	bf00      	nop

08010074 <get_serialized_size_sensor_msgs__msg__Imu>:
 8010074:	b108      	cbz	r0, 801007a <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8010076:	f7ff bfcb 	b.w	8010010 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 801007a:	4770      	bx	lr

0801007c <_Imu__get_serialized_size>:
 801007c:	b110      	cbz	r0, 8010084 <_Imu__get_serialized_size+0x8>
 801007e:	2100      	movs	r1, #0
 8010080:	f7ff bfc6 	b.w	8010010 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop

08010088 <_Imu__cdr_deserialize>:
 8010088:	b538      	push	{r3, r4, r5, lr}
 801008a:	460c      	mov	r4, r1
 801008c:	b399      	cbz	r1, 80100f6 <_Imu__cdr_deserialize+0x6e>
 801008e:	4605      	mov	r5, r0
 8010090:	f000 f956 	bl	8010340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010094:	6843      	ldr	r3, [r0, #4]
 8010096:	4621      	mov	r1, r4
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	4628      	mov	r0, r5
 801009c:	4798      	blx	r3
 801009e:	f000 fbf1 	bl	8010884 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80100a2:	6843      	ldr	r3, [r0, #4]
 80100a4:	f104 0118 	add.w	r1, r4, #24
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	4628      	mov	r0, r5
 80100ac:	4798      	blx	r3
 80100ae:	2209      	movs	r2, #9
 80100b0:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80100b4:	4628      	mov	r0, r5
 80100b6:	f000 fd85 	bl	8010bc4 <ucdr_deserialize_array_double>
 80100ba:	f7fb fcad 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80100be:	6843      	ldr	r3, [r0, #4]
 80100c0:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	4628      	mov	r0, r5
 80100c8:	4798      	blx	r3
 80100ca:	2209      	movs	r2, #9
 80100cc:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 80100d0:	4628      	mov	r0, r5
 80100d2:	f000 fd77 	bl	8010bc4 <ucdr_deserialize_array_double>
 80100d6:	f7fb fc9f 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80100da:	6843      	ldr	r3, [r0, #4]
 80100dc:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	4628      	mov	r0, r5
 80100e4:	4798      	blx	r3
 80100e6:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80100ea:	4628      	mov	r0, r5
 80100ec:	2209      	movs	r2, #9
 80100ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100f2:	f000 bd67 	b.w	8010bc4 <ucdr_deserialize_array_double>
 80100f6:	4608      	mov	r0, r1
 80100f8:	bd38      	pop	{r3, r4, r5, pc}
 80100fa:	bf00      	nop

080100fc <_Imu__cdr_serialize>:
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d035      	beq.n	801016c <_Imu__cdr_serialize+0x70>
 8010100:	b538      	push	{r3, r4, r5, lr}
 8010102:	460d      	mov	r5, r1
 8010104:	4604      	mov	r4, r0
 8010106:	f000 f91b 	bl	8010340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801010a:	6843      	ldr	r3, [r0, #4]
 801010c:	4629      	mov	r1, r5
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	4620      	mov	r0, r4
 8010112:	4798      	blx	r3
 8010114:	f000 fbb6 	bl	8010884 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010118:	6843      	ldr	r3, [r0, #4]
 801011a:	4629      	mov	r1, r5
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	f104 0018 	add.w	r0, r4, #24
 8010122:	4798      	blx	r3
 8010124:	2209      	movs	r2, #9
 8010126:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801012a:	4628      	mov	r0, r5
 801012c:	f000 fcf6 	bl	8010b1c <ucdr_serialize_array_double>
 8010130:	f7fb fc72 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010134:	6843      	ldr	r3, [r0, #4]
 8010136:	4629      	mov	r1, r5
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801013e:	4798      	blx	r3
 8010140:	2209      	movs	r2, #9
 8010142:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8010146:	4628      	mov	r0, r5
 8010148:	f000 fce8 	bl	8010b1c <ucdr_serialize_array_double>
 801014c:	f7fb fc64 	bl	800ba18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010150:	6843      	ldr	r3, [r0, #4]
 8010152:	4629      	mov	r1, r5
 8010154:	689b      	ldr	r3, [r3, #8]
 8010156:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801015a:	4798      	blx	r3
 801015c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8010160:	4628      	mov	r0, r5
 8010162:	2209      	movs	r2, #9
 8010164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010168:	f000 bcd8 	b.w	8010b1c <ucdr_serialize_array_double>
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop

08010170 <max_serialized_size_sensor_msgs__msg__Imu>:
 8010170:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8010174:	2301      	movs	r3, #1
 8010176:	7003      	strb	r3, [r0, #0]
 8010178:	4680      	mov	r8, r0
 801017a:	460f      	mov	r7, r1
 801017c:	f000 f8d6 	bl	801032c <max_serialized_size_std_msgs__msg__Header>
 8010180:	183c      	adds	r4, r7, r0
 8010182:	4621      	mov	r1, r4
 8010184:	4640      	mov	r0, r8
 8010186:	f000 fb5b 	bl	8010840 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801018a:	4404      	add	r4, r0
 801018c:	2108      	movs	r1, #8
 801018e:	4620      	mov	r0, r4
 8010190:	f7fd f86e 	bl	800d270 <ucdr_alignment>
 8010194:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8010198:	4425      	add	r5, r4
 801019a:	4629      	mov	r1, r5
 801019c:	4640      	mov	r0, r8
 801019e:	f7fb fc1f 	bl	800b9e0 <max_serialized_size_geometry_msgs__msg__Vector3>
 80101a2:	4405      	add	r5, r0
 80101a4:	2108      	movs	r1, #8
 80101a6:	4628      	mov	r0, r5
 80101a8:	f7fd f862 	bl	800d270 <ucdr_alignment>
 80101ac:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 80101b0:	4425      	add	r5, r4
 80101b2:	4629      	mov	r1, r5
 80101b4:	4640      	mov	r0, r8
 80101b6:	f7fb fc13 	bl	800b9e0 <max_serialized_size_geometry_msgs__msg__Vector3>
 80101ba:	4405      	add	r5, r0
 80101bc:	2108      	movs	r1, #8
 80101be:	4628      	mov	r0, r5
 80101c0:	f7fd f856 	bl	800d270 <ucdr_alignment>
 80101c4:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 80101c8:	4438      	add	r0, r7
 80101ca:	4428      	add	r0, r5
 80101cc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

080101d0 <_Imu__max_serialized_size>:
 80101d0:	b500      	push	{lr}
 80101d2:	b083      	sub	sp, #12
 80101d4:	2100      	movs	r1, #0
 80101d6:	f10d 0007 	add.w	r0, sp, #7
 80101da:	f7ff ffc9 	bl	8010170 <max_serialized_size_sensor_msgs__msg__Imu>
 80101de:	b003      	add	sp, #12
 80101e0:	f85d fb04 	ldr.w	pc, [sp], #4

080101e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80101e4:	4800      	ldr	r0, [pc, #0]	@ (80101e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 80101e6:	4770      	bx	lr
 80101e8:	20000588 	.word	0x20000588

080101ec <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80101ec:	f008 bafa 	b.w	80187e4 <std_msgs__msg__Header__init>

080101f0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80101f0:	f008 bb1c 	b.w	801882c <std_msgs__msg__Header__fini>

080101f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80101f4:	b508      	push	{r3, lr}
 80101f6:	f000 f9d3 	bl	80105a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80101fa:	4b06      	ldr	r3, [pc, #24]	@ (8010214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80101fc:	4906      	ldr	r1, [pc, #24]	@ (8010218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	60c8      	str	r0, [r1, #12]
 8010202:	b10a      	cbz	r2, 8010208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8010204:	4803      	ldr	r0, [pc, #12]	@ (8010214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010206:	bd08      	pop	{r3, pc}
 8010208:	4a04      	ldr	r2, [pc, #16]	@ (801021c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801020a:	4802      	ldr	r0, [pc, #8]	@ (8010214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801020c:	6812      	ldr	r2, [r2, #0]
 801020e:	601a      	str	r2, [r3, #0]
 8010210:	bd08      	pop	{r3, pc}
 8010212:	bf00      	nop
 8010214:	20000628 	.word	0x20000628
 8010218:	200005b0 	.word	0x200005b0
 801021c:	200003c0 	.word	0x200003c0

08010220 <_Header__max_serialized_size>:
 8010220:	b500      	push	{lr}
 8010222:	b083      	sub	sp, #12
 8010224:	2301      	movs	r3, #1
 8010226:	2100      	movs	r1, #0
 8010228:	f10d 0007 	add.w	r0, sp, #7
 801022c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010230:	f000 fa14 	bl	801065c <max_serialized_size_builtin_interfaces__msg__Time>
 8010234:	b003      	add	sp, #12
 8010236:	f85d fb04 	ldr.w	pc, [sp], #4
 801023a:	bf00      	nop

0801023c <get_serialized_size_std_msgs__msg__Header>:
 801023c:	b570      	push	{r4, r5, r6, lr}
 801023e:	4605      	mov	r5, r0
 8010240:	b168      	cbz	r0, 801025e <get_serialized_size_std_msgs__msg__Header+0x22>
 8010242:	460c      	mov	r4, r1
 8010244:	f000 f9ba 	bl	80105bc <get_serialized_size_builtin_interfaces__msg__Time>
 8010248:	1826      	adds	r6, r4, r0
 801024a:	2104      	movs	r1, #4
 801024c:	4630      	mov	r0, r6
 801024e:	f7fd f80f 	bl	800d270 <ucdr_alignment>
 8010252:	68e9      	ldr	r1, [r5, #12]
 8010254:	f1c4 0405 	rsb	r4, r4, #5
 8010258:	440c      	add	r4, r1
 801025a:	4404      	add	r4, r0
 801025c:	19a0      	adds	r0, r4, r6
 801025e:	bd70      	pop	{r4, r5, r6, pc}

08010260 <_Header__cdr_deserialize>:
 8010260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010262:	460c      	mov	r4, r1
 8010264:	b083      	sub	sp, #12
 8010266:	b1e1      	cbz	r1, 80102a2 <_Header__cdr_deserialize+0x42>
 8010268:	4606      	mov	r6, r0
 801026a:	f000 fa0b 	bl	8010684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801026e:	6843      	ldr	r3, [r0, #4]
 8010270:	4621      	mov	r1, r4
 8010272:	68db      	ldr	r3, [r3, #12]
 8010274:	4630      	mov	r0, r6
 8010276:	4798      	blx	r3
 8010278:	6927      	ldr	r7, [r4, #16]
 801027a:	68a1      	ldr	r1, [r4, #8]
 801027c:	ab01      	add	r3, sp, #4
 801027e:	463a      	mov	r2, r7
 8010280:	4630      	mov	r0, r6
 8010282:	f000 fd07 	bl	8010c94 <ucdr_deserialize_sequence_char>
 8010286:	9b01      	ldr	r3, [sp, #4]
 8010288:	4605      	mov	r5, r0
 801028a:	b920      	cbnz	r0, 8010296 <_Header__cdr_deserialize+0x36>
 801028c:	429f      	cmp	r7, r3
 801028e:	d30c      	bcc.n	80102aa <_Header__cdr_deserialize+0x4a>
 8010290:	4628      	mov	r0, r5
 8010292:	b003      	add	sp, #12
 8010294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010296:	b103      	cbz	r3, 801029a <_Header__cdr_deserialize+0x3a>
 8010298:	3b01      	subs	r3, #1
 801029a:	4628      	mov	r0, r5
 801029c:	60e3      	str	r3, [r4, #12]
 801029e:	b003      	add	sp, #12
 80102a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a2:	460d      	mov	r5, r1
 80102a4:	4628      	mov	r0, r5
 80102a6:	b003      	add	sp, #12
 80102a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102aa:	2101      	movs	r1, #1
 80102ac:	75b0      	strb	r0, [r6, #22]
 80102ae:	7571      	strb	r1, [r6, #21]
 80102b0:	4630      	mov	r0, r6
 80102b2:	60e5      	str	r5, [r4, #12]
 80102b4:	f7fc fff2 	bl	800d29c <ucdr_align_to>
 80102b8:	4630      	mov	r0, r6
 80102ba:	9901      	ldr	r1, [sp, #4]
 80102bc:	f7fd f824 	bl	800d308 <ucdr_advance_buffer>
 80102c0:	4628      	mov	r0, r5
 80102c2:	b003      	add	sp, #12
 80102c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c6:	bf00      	nop

080102c8 <_Header__cdr_serialize>:
 80102c8:	b1f8      	cbz	r0, 801030a <_Header__cdr_serialize+0x42>
 80102ca:	b570      	push	{r4, r5, r6, lr}
 80102cc:	4604      	mov	r4, r0
 80102ce:	460d      	mov	r5, r1
 80102d0:	f000 f9d8 	bl	8010684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102d4:	6843      	ldr	r3, [r0, #4]
 80102d6:	4629      	mov	r1, r5
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	4620      	mov	r0, r4
 80102dc:	4798      	blx	r3
 80102de:	68a6      	ldr	r6, [r4, #8]
 80102e0:	b156      	cbz	r6, 80102f8 <_Header__cdr_serialize+0x30>
 80102e2:	4630      	mov	r0, r6
 80102e4:	f7ef ffa6 	bl	8000234 <strlen>
 80102e8:	4631      	mov	r1, r6
 80102ea:	60e0      	str	r0, [r4, #12]
 80102ec:	1c42      	adds	r2, r0, #1
 80102ee:	4628      	mov	r0, r5
 80102f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102f4:	f000 bcbc 	b.w	8010c70 <ucdr_serialize_sequence_char>
 80102f8:	4630      	mov	r0, r6
 80102fa:	60e0      	str	r0, [r4, #12]
 80102fc:	4632      	mov	r2, r6
 80102fe:	4631      	mov	r1, r6
 8010300:	4628      	mov	r0, r5
 8010302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010306:	f000 bcb3 	b.w	8010c70 <ucdr_serialize_sequence_char>
 801030a:	4770      	bx	lr

0801030c <_Header__get_serialized_size>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4604      	mov	r4, r0
 8010310:	b150      	cbz	r0, 8010328 <_Header__get_serialized_size+0x1c>
 8010312:	2100      	movs	r1, #0
 8010314:	f000 f952 	bl	80105bc <get_serialized_size_builtin_interfaces__msg__Time>
 8010318:	2104      	movs	r1, #4
 801031a:	4605      	mov	r5, r0
 801031c:	f7fc ffa8 	bl	800d270 <ucdr_alignment>
 8010320:	68e2      	ldr	r2, [r4, #12]
 8010322:	3205      	adds	r2, #5
 8010324:	1953      	adds	r3, r2, r5
 8010326:	4418      	add	r0, r3
 8010328:	bd38      	pop	{r3, r4, r5, pc}
 801032a:	bf00      	nop

0801032c <max_serialized_size_std_msgs__msg__Header>:
 801032c:	b510      	push	{r4, lr}
 801032e:	2301      	movs	r3, #1
 8010330:	4604      	mov	r4, r0
 8010332:	7003      	strb	r3, [r0, #0]
 8010334:	f000 f992 	bl	801065c <max_serialized_size_builtin_interfaces__msg__Time>
 8010338:	2300      	movs	r3, #0
 801033a:	7023      	strb	r3, [r4, #0]
 801033c:	bd10      	pop	{r4, pc}
 801033e:	bf00      	nop

08010340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010340:	4800      	ldr	r0, [pc, #0]	@ (8010344 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8010342:	4770      	bx	lr
 8010344:	20000634 	.word	0x20000634

08010348 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8010348:	4b04      	ldr	r3, [pc, #16]	@ (801035c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	b10a      	cbz	r2, 8010352 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 801034e:	4803      	ldr	r0, [pc, #12]	@ (801035c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8010350:	4770      	bx	lr
 8010352:	4a03      	ldr	r2, [pc, #12]	@ (8010360 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 8010354:	4801      	ldr	r0, [pc, #4]	@ (801035c <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8010356:	6812      	ldr	r2, [r2, #0]
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	4770      	bx	lr
 801035c:	20000664 	.word	0x20000664
 8010360:	200003bc 	.word	0x200003bc

08010364 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8010364:	4b04      	ldr	r3, [pc, #16]	@ (8010378 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8010366:	4805      	ldr	r0, [pc, #20]	@ (801037c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8010368:	4905      	ldr	r1, [pc, #20]	@ (8010380 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 801036a:	4a06      	ldr	r2, [pc, #24]	@ (8010384 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	6003      	str	r3, [r0, #0]
 8010370:	600b      	str	r3, [r1, #0]
 8010372:	6013      	str	r3, [r2, #0]
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	200003bc 	.word	0x200003bc
 801037c:	20000680 	.word	0x20000680
 8010380:	2000068c 	.word	0x2000068c
 8010384:	20000664 	.word	0x20000664

08010388 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 8010388:	f008 ba5c 	b.w	8018844 <std_srvs__srv__SetBool_Request__init>

0801038c <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 801038c:	f008 ba5e 	b.w	801884c <std_srvs__srv__SetBool_Request__fini>

08010390 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 8010390:	f008 ba5e 	b.w	8018850 <std_srvs__srv__SetBool_Response__init>

08010394 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 8010394:	f008 ba6e 	b.w	8018874 <std_srvs__srv__SetBool_Response__fini>

08010398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8010398:	4b04      	ldr	r3, [pc, #16]	@ (80103ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	b10a      	cbz	r2, 80103a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 801039e:	4803      	ldr	r0, [pc, #12]	@ (80103ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 80103a0:	4770      	bx	lr
 80103a2:	4a03      	ldr	r2, [pc, #12]	@ (80103b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 80103a4:	4801      	ldr	r0, [pc, #4]	@ (80103ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 80103a6:	6812      	ldr	r2, [r2, #0]
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	4770      	bx	lr
 80103ac:	200006d4 	.word	0x200006d4
 80103b0:	200003c0 	.word	0x200003c0

080103b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 80103b4:	4b04      	ldr	r3, [pc, #16]	@ (80103c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	b10a      	cbz	r2, 80103be <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 80103ba:	4803      	ldr	r0, [pc, #12]	@ (80103c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 80103bc:	4770      	bx	lr
 80103be:	4a03      	ldr	r2, [pc, #12]	@ (80103cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 80103c0:	4801      	ldr	r0, [pc, #4]	@ (80103c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 80103c2:	6812      	ldr	r2, [r2, #0]
 80103c4:	601a      	str	r2, [r3, #0]
 80103c6:	4770      	bx	lr
 80103c8:	20000758 	.word	0x20000758
 80103cc:	200003c0 	.word	0x200003c0

080103d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 80103d0:	4b13      	ldr	r3, [pc, #76]	@ (8010420 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	b132      	cbz	r2, 80103e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	689a      	ldr	r2, [r3, #8]
 80103da:	b152      	cbz	r2, 80103f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 80103dc:	68da      	ldr	r2, [r3, #12]
 80103de:	b182      	cbz	r2, 8010402 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 80103e0:	480f      	ldr	r0, [pc, #60]	@ (8010420 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 80103e2:	4770      	bx	lr
 80103e4:	4a0f      	ldr	r2, [pc, #60]	@ (8010424 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 80103e6:	6812      	ldr	r2, [r2, #0]
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	689a      	ldr	r2, [r3, #8]
 80103ee:	2a00      	cmp	r2, #0
 80103f0:	d1f4      	bne.n	80103dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 80103f2:	4a0d      	ldr	r2, [pc, #52]	@ (8010428 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 80103f4:	6811      	ldr	r1, [r2, #0]
 80103f6:	b179      	cbz	r1, 8010418 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 80103f8:	6852      	ldr	r2, [r2, #4]
 80103fa:	609a      	str	r2, [r3, #8]
 80103fc:	68da      	ldr	r2, [r3, #12]
 80103fe:	2a00      	cmp	r2, #0
 8010400:	d1ee      	bne.n	80103e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 8010402:	4a0a      	ldr	r2, [pc, #40]	@ (801042c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 8010404:	6811      	ldr	r1, [r2, #0]
 8010406:	b119      	cbz	r1, 8010410 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 8010408:	6852      	ldr	r2, [r2, #4]
 801040a:	4805      	ldr	r0, [pc, #20]	@ (8010420 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 801040c:	60da      	str	r2, [r3, #12]
 801040e:	4770      	bx	lr
 8010410:	4904      	ldr	r1, [pc, #16]	@ (8010424 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8010412:	6809      	ldr	r1, [r1, #0]
 8010414:	6011      	str	r1, [r2, #0]
 8010416:	e7f7      	b.n	8010408 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 8010418:	4902      	ldr	r1, [pc, #8]	@ (8010424 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 801041a:	6809      	ldr	r1, [r1, #0]
 801041c:	6011      	str	r1, [r2, #0]
 801041e:	e7eb      	b.n	80103f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 8010420:	20000774 	.word	0x20000774
 8010424:	200003c0 	.word	0x200003c0
 8010428:	200006d4 	.word	0x200006d4
 801042c:	20000758 	.word	0x20000758

08010430 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8010430:	4800      	ldr	r0, [pc, #0]	@ (8010434 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 8010432:	4770      	bx	lr
 8010434:	2000079c 	.word	0x2000079c

08010438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8010438:	4800      	ldr	r0, [pc, #0]	@ (801043c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 801043a:	4770      	bx	lr
 801043c:	200007a8 	.word	0x200007a8

08010440 <_SetBool_Request__max_serialized_size>:
 8010440:	b508      	push	{r3, lr}
 8010442:	2101      	movs	r1, #1
 8010444:	2000      	movs	r0, #0
 8010446:	f7fc ff13 	bl	800d270 <ucdr_alignment>
 801044a:	3001      	adds	r0, #1
 801044c:	bd08      	pop	{r3, pc}
 801044e:	bf00      	nop

08010450 <_SetBool_Request__cdr_deserialize>:
 8010450:	b109      	cbz	r1, 8010456 <_SetBool_Request__cdr_deserialize+0x6>
 8010452:	f7fb bc0f 	b.w	800bc74 <ucdr_deserialize_bool>
 8010456:	4608      	mov	r0, r1
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop

0801045c <get_serialized_size_std_srvs__srv__SetBool_Request>:
 801045c:	b138      	cbz	r0, 801046e <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 801045e:	b508      	push	{r3, lr}
 8010460:	460b      	mov	r3, r1
 8010462:	4618      	mov	r0, r3
 8010464:	2101      	movs	r1, #1
 8010466:	f7fc ff03 	bl	800d270 <ucdr_alignment>
 801046a:	3001      	adds	r0, #1
 801046c:	bd08      	pop	{r3, pc}
 801046e:	4770      	bx	lr

08010470 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4605      	mov	r5, r0
 8010474:	b180      	cbz	r0, 8010498 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 8010476:	460c      	mov	r4, r1
 8010478:	4620      	mov	r0, r4
 801047a:	2101      	movs	r1, #1
 801047c:	f7fc fef8 	bl	800d270 <ucdr_alignment>
 8010480:	1c63      	adds	r3, r4, #1
 8010482:	181e      	adds	r6, r3, r0
 8010484:	2104      	movs	r1, #4
 8010486:	4630      	mov	r0, r6
 8010488:	f7fc fef2 	bl	800d270 <ucdr_alignment>
 801048c:	68a9      	ldr	r1, [r5, #8]
 801048e:	f1c4 0405 	rsb	r4, r4, #5
 8010492:	440c      	add	r4, r1
 8010494:	4404      	add	r4, r0
 8010496:	19a0      	adds	r0, r4, r6
 8010498:	bd70      	pop	{r4, r5, r6, pc}
 801049a:	bf00      	nop

0801049c <_SetBool_Request__cdr_serialize>:
 801049c:	460a      	mov	r2, r1
 801049e:	b118      	cbz	r0, 80104a8 <_SetBool_Request__cdr_serialize+0xc>
 80104a0:	7801      	ldrb	r1, [r0, #0]
 80104a2:	4610      	mov	r0, r2
 80104a4:	f7fb bbd0 	b.w	800bc48 <ucdr_serialize_bool>
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop

080104ac <_SetBool_Response__cdr_deserialize>:
 80104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ae:	460c      	mov	r4, r1
 80104b0:	b083      	sub	sp, #12
 80104b2:	b1b9      	cbz	r1, 80104e4 <_SetBool_Response__cdr_deserialize+0x38>
 80104b4:	4606      	mov	r6, r0
 80104b6:	f7fb fbdd 	bl	800bc74 <ucdr_deserialize_bool>
 80104ba:	68e7      	ldr	r7, [r4, #12]
 80104bc:	6861      	ldr	r1, [r4, #4]
 80104be:	ab01      	add	r3, sp, #4
 80104c0:	463a      	mov	r2, r7
 80104c2:	4630      	mov	r0, r6
 80104c4:	f000 fbe6 	bl	8010c94 <ucdr_deserialize_sequence_char>
 80104c8:	9b01      	ldr	r3, [sp, #4]
 80104ca:	4605      	mov	r5, r0
 80104cc:	b920      	cbnz	r0, 80104d8 <_SetBool_Response__cdr_deserialize+0x2c>
 80104ce:	429f      	cmp	r7, r3
 80104d0:	d30c      	bcc.n	80104ec <_SetBool_Response__cdr_deserialize+0x40>
 80104d2:	4628      	mov	r0, r5
 80104d4:	b003      	add	sp, #12
 80104d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104d8:	b103      	cbz	r3, 80104dc <_SetBool_Response__cdr_deserialize+0x30>
 80104da:	3b01      	subs	r3, #1
 80104dc:	4628      	mov	r0, r5
 80104de:	60a3      	str	r3, [r4, #8]
 80104e0:	b003      	add	sp, #12
 80104e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104e4:	460d      	mov	r5, r1
 80104e6:	4628      	mov	r0, r5
 80104e8:	b003      	add	sp, #12
 80104ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ec:	2101      	movs	r1, #1
 80104ee:	75b0      	strb	r0, [r6, #22]
 80104f0:	7571      	strb	r1, [r6, #21]
 80104f2:	4630      	mov	r0, r6
 80104f4:	60a5      	str	r5, [r4, #8]
 80104f6:	f7fc fed1 	bl	800d29c <ucdr_align_to>
 80104fa:	4630      	mov	r0, r6
 80104fc:	9901      	ldr	r1, [sp, #4]
 80104fe:	f7fc ff03 	bl	800d308 <ucdr_advance_buffer>
 8010502:	4628      	mov	r0, r5
 8010504:	b003      	add	sp, #12
 8010506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010508 <_SetBool_Response__cdr_serialize>:
 8010508:	b1e0      	cbz	r0, 8010544 <_SetBool_Response__cdr_serialize+0x3c>
 801050a:	b570      	push	{r4, r5, r6, lr}
 801050c:	460d      	mov	r5, r1
 801050e:	4604      	mov	r4, r0
 8010510:	7801      	ldrb	r1, [r0, #0]
 8010512:	4628      	mov	r0, r5
 8010514:	f7fb fb98 	bl	800bc48 <ucdr_serialize_bool>
 8010518:	6866      	ldr	r6, [r4, #4]
 801051a:	b156      	cbz	r6, 8010532 <_SetBool_Response__cdr_serialize+0x2a>
 801051c:	4630      	mov	r0, r6
 801051e:	f7ef fe89 	bl	8000234 <strlen>
 8010522:	4631      	mov	r1, r6
 8010524:	60a0      	str	r0, [r4, #8]
 8010526:	1c42      	adds	r2, r0, #1
 8010528:	4628      	mov	r0, r5
 801052a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801052e:	f000 bb9f 	b.w	8010c70 <ucdr_serialize_sequence_char>
 8010532:	4630      	mov	r0, r6
 8010534:	60a0      	str	r0, [r4, #8]
 8010536:	4632      	mov	r2, r6
 8010538:	4631      	mov	r1, r6
 801053a:	4628      	mov	r0, r5
 801053c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010540:	f000 bb96 	b.w	8010c70 <ucdr_serialize_sequence_char>
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <_SetBool_Request__get_serialized_size>:
 8010548:	b130      	cbz	r0, 8010558 <_SetBool_Request__get_serialized_size+0x10>
 801054a:	b508      	push	{r3, lr}
 801054c:	2101      	movs	r1, #1
 801054e:	2000      	movs	r0, #0
 8010550:	f7fc fe8e 	bl	800d270 <ucdr_alignment>
 8010554:	3001      	adds	r0, #1
 8010556:	bd08      	pop	{r3, pc}
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop

0801055c <_SetBool_Response__max_serialized_size>:
 801055c:	b508      	push	{r3, lr}
 801055e:	2101      	movs	r1, #1
 8010560:	2000      	movs	r0, #0
 8010562:	f7fc fe85 	bl	800d270 <ucdr_alignment>
 8010566:	3001      	adds	r0, #1
 8010568:	bd08      	pop	{r3, pc}
 801056a:	bf00      	nop

0801056c <_SetBool_Response__get_serialized_size>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	4604      	mov	r4, r0
 8010570:	b160      	cbz	r0, 801058c <_SetBool_Response__get_serialized_size+0x20>
 8010572:	2101      	movs	r1, #1
 8010574:	2000      	movs	r0, #0
 8010576:	f7fc fe7b 	bl	800d270 <ucdr_alignment>
 801057a:	1c45      	adds	r5, r0, #1
 801057c:	2104      	movs	r1, #4
 801057e:	4628      	mov	r0, r5
 8010580:	f7fc fe76 	bl	800d270 <ucdr_alignment>
 8010584:	68a3      	ldr	r3, [r4, #8]
 8010586:	3305      	adds	r3, #5
 8010588:	4418      	add	r0, r3
 801058a:	4428      	add	r0, r5
 801058c:	bd38      	pop	{r3, r4, r5, pc}
 801058e:	bf00      	nop

08010590 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8010590:	4800      	ldr	r0, [pc, #0]	@ (8010594 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 8010592:	4770      	bx	lr
 8010594:	20000790 	.word	0x20000790

08010598 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8010598:	f008 b972 	b.w	8018880 <builtin_interfaces__msg__Time__init>

0801059c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 801059c:	f008 b974 	b.w	8018888 <builtin_interfaces__msg__Time__fini>

080105a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80105a0:	4b04      	ldr	r3, [pc, #16]	@ (80105b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	b10a      	cbz	r2, 80105aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80105a6:	4803      	ldr	r0, [pc, #12]	@ (80105b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80105a8:	4770      	bx	lr
 80105aa:	4a03      	ldr	r2, [pc, #12]	@ (80105b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80105ac:	4801      	ldr	r0, [pc, #4]	@ (80105b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80105ae:	6812      	ldr	r2, [r2, #0]
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	4770      	bx	lr
 80105b4:	20000864 	.word	0x20000864
 80105b8:	200003c0 	.word	0x200003c0

080105bc <get_serialized_size_builtin_interfaces__msg__Time>:
 80105bc:	b180      	cbz	r0, 80105e0 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80105be:	b538      	push	{r3, r4, r5, lr}
 80105c0:	460d      	mov	r5, r1
 80105c2:	4628      	mov	r0, r5
 80105c4:	2104      	movs	r1, #4
 80105c6:	f7fc fe53 	bl	800d270 <ucdr_alignment>
 80105ca:	1d2b      	adds	r3, r5, #4
 80105cc:	181c      	adds	r4, r3, r0
 80105ce:	2104      	movs	r1, #4
 80105d0:	4620      	mov	r0, r4
 80105d2:	f7fc fe4d 	bl	800d270 <ucdr_alignment>
 80105d6:	f1c5 0504 	rsb	r5, r5, #4
 80105da:	4428      	add	r0, r5
 80105dc:	4420      	add	r0, r4
 80105de:	bd38      	pop	{r3, r4, r5, pc}
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop

080105e4 <_Time__cdr_deserialize>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	460c      	mov	r4, r1
 80105e8:	b141      	cbz	r1, 80105fc <_Time__cdr_deserialize+0x18>
 80105ea:	4605      	mov	r5, r0
 80105ec:	f7fc fa22 	bl	800ca34 <ucdr_deserialize_int32_t>
 80105f0:	1d21      	adds	r1, r4, #4
 80105f2:	4628      	mov	r0, r5
 80105f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105f8:	f7fb be9a 	b.w	800c330 <ucdr_deserialize_uint32_t>
 80105fc:	4608      	mov	r0, r1
 80105fe:	bd38      	pop	{r3, r4, r5, pc}

08010600 <_Time__cdr_serialize>:
 8010600:	b160      	cbz	r0, 801061c <_Time__cdr_serialize+0x1c>
 8010602:	b538      	push	{r3, r4, r5, lr}
 8010604:	460d      	mov	r5, r1
 8010606:	4604      	mov	r4, r0
 8010608:	6801      	ldr	r1, [r0, #0]
 801060a:	4628      	mov	r0, r5
 801060c:	f7fc f97a 	bl	800c904 <ucdr_serialize_int32_t>
 8010610:	6861      	ldr	r1, [r4, #4]
 8010612:	4628      	mov	r0, r5
 8010614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010618:	f7fb bd5a 	b.w	800c0d0 <ucdr_serialize_uint32_t>
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop

08010620 <_Time__get_serialized_size>:
 8010620:	b160      	cbz	r0, 801063c <_Time__get_serialized_size+0x1c>
 8010622:	b510      	push	{r4, lr}
 8010624:	2104      	movs	r1, #4
 8010626:	2000      	movs	r0, #0
 8010628:	f7fc fe22 	bl	800d270 <ucdr_alignment>
 801062c:	1d04      	adds	r4, r0, #4
 801062e:	2104      	movs	r1, #4
 8010630:	4620      	mov	r0, r4
 8010632:	f7fc fe1d 	bl	800d270 <ucdr_alignment>
 8010636:	3004      	adds	r0, #4
 8010638:	4420      	add	r0, r4
 801063a:	bd10      	pop	{r4, pc}
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop

08010640 <_Time__max_serialized_size>:
 8010640:	b510      	push	{r4, lr}
 8010642:	2104      	movs	r1, #4
 8010644:	2000      	movs	r0, #0
 8010646:	f7fc fe13 	bl	800d270 <ucdr_alignment>
 801064a:	1d04      	adds	r4, r0, #4
 801064c:	2104      	movs	r1, #4
 801064e:	4620      	mov	r0, r4
 8010650:	f7fc fe0e 	bl	800d270 <ucdr_alignment>
 8010654:	3004      	adds	r0, #4
 8010656:	4420      	add	r0, r4
 8010658:	bd10      	pop	{r4, pc}
 801065a:	bf00      	nop

0801065c <max_serialized_size_builtin_interfaces__msg__Time>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	460c      	mov	r4, r1
 8010660:	2301      	movs	r3, #1
 8010662:	7003      	strb	r3, [r0, #0]
 8010664:	2104      	movs	r1, #4
 8010666:	4620      	mov	r0, r4
 8010668:	f7fc fe02 	bl	800d270 <ucdr_alignment>
 801066c:	1d25      	adds	r5, r4, #4
 801066e:	4405      	add	r5, r0
 8010670:	2104      	movs	r1, #4
 8010672:	4628      	mov	r0, r5
 8010674:	f7fc fdfc 	bl	800d270 <ucdr_alignment>
 8010678:	f1c4 0404 	rsb	r4, r4, #4
 801067c:	4420      	add	r0, r4
 801067e:	4428      	add	r0, r5
 8010680:	bd38      	pop	{r3, r4, r5, pc}
 8010682:	bf00      	nop

08010684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010684:	4800      	ldr	r0, [pc, #0]	@ (8010688 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010686:	4770      	bx	lr
 8010688:	20000870 	.word	0x20000870

0801068c <geometry_msgs__msg__Twist__init>:
 801068c:	b570      	push	{r4, r5, r6, lr}
 801068e:	4605      	mov	r5, r0
 8010690:	b1a8      	cbz	r0, 80106be <geometry_msgs__msg__Twist__init+0x32>
 8010692:	f000 f82b 	bl	80106ec <geometry_msgs__msg__Vector3__init>
 8010696:	4604      	mov	r4, r0
 8010698:	b140      	cbz	r0, 80106ac <geometry_msgs__msg__Twist__init+0x20>
 801069a:	f105 0618 	add.w	r6, r5, #24
 801069e:	4630      	mov	r0, r6
 80106a0:	f000 f824 	bl	80106ec <geometry_msgs__msg__Vector3__init>
 80106a4:	4604      	mov	r4, r0
 80106a6:	b168      	cbz	r0, 80106c4 <geometry_msgs__msg__Twist__init+0x38>
 80106a8:	4620      	mov	r0, r4
 80106aa:	bd70      	pop	{r4, r5, r6, pc}
 80106ac:	4628      	mov	r0, r5
 80106ae:	f000 f821 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80106b2:	f105 0018 	add.w	r0, r5, #24
 80106b6:	f000 f81d 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80106ba:	4620      	mov	r0, r4
 80106bc:	bd70      	pop	{r4, r5, r6, pc}
 80106be:	4604      	mov	r4, r0
 80106c0:	4620      	mov	r0, r4
 80106c2:	bd70      	pop	{r4, r5, r6, pc}
 80106c4:	4628      	mov	r0, r5
 80106c6:	f000 f815 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80106ca:	4630      	mov	r0, r6
 80106cc:	f000 f812 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80106d0:	e7ea      	b.n	80106a8 <geometry_msgs__msg__Twist__init+0x1c>
 80106d2:	bf00      	nop

080106d4 <geometry_msgs__msg__Twist__fini>:
 80106d4:	b148      	cbz	r0, 80106ea <geometry_msgs__msg__Twist__fini+0x16>
 80106d6:	b510      	push	{r4, lr}
 80106d8:	4604      	mov	r4, r0
 80106da:	f000 f80b 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80106de:	f104 0018 	add.w	r0, r4, #24
 80106e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106e6:	f000 b805 	b.w	80106f4 <geometry_msgs__msg__Vector3__fini>
 80106ea:	4770      	bx	lr

080106ec <geometry_msgs__msg__Vector3__init>:
 80106ec:	3800      	subs	r0, #0
 80106ee:	bf18      	it	ne
 80106f0:	2001      	movne	r0, #1
 80106f2:	4770      	bx	lr

080106f4 <geometry_msgs__msg__Vector3__fini>:
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop

080106f8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 80106f8:	f008 b8ca 	b.w	8018890 <geometry_msgs__msg__Quaternion__init>

080106fc <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 80106fc:	f008 b8dc 	b.w	80188b8 <geometry_msgs__msg__Quaternion__fini>

08010700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8010700:	4b04      	ldr	r3, [pc, #16]	@ (8010714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	b10a      	cbz	r2, 801070a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8010706:	4803      	ldr	r0, [pc, #12]	@ (8010714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8010708:	4770      	bx	lr
 801070a:	4a03      	ldr	r2, [pc, #12]	@ (8010718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 801070c:	4801      	ldr	r0, [pc, #4]	@ (8010714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801070e:	6812      	ldr	r2, [r2, #0]
 8010710:	601a      	str	r2, [r3, #0]
 8010712:	4770      	bx	lr
 8010714:	20000988 	.word	0x20000988
 8010718:	200003c0 	.word	0x200003c0

0801071c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 801071c:	b1f0      	cbz	r0, 801075c <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 801071e:	b570      	push	{r4, r5, r6, lr}
 8010720:	460d      	mov	r5, r1
 8010722:	4628      	mov	r0, r5
 8010724:	2108      	movs	r1, #8
 8010726:	f7fc fda3 	bl	800d270 <ucdr_alignment>
 801072a:	f105 0308 	add.w	r3, r5, #8
 801072e:	181e      	adds	r6, r3, r0
 8010730:	2108      	movs	r1, #8
 8010732:	4630      	mov	r0, r6
 8010734:	f7fc fd9c 	bl	800d270 <ucdr_alignment>
 8010738:	f100 0408 	add.w	r4, r0, #8
 801073c:	4434      	add	r4, r6
 801073e:	2108      	movs	r1, #8
 8010740:	4620      	mov	r0, r4
 8010742:	f7fc fd95 	bl	800d270 <ucdr_alignment>
 8010746:	3008      	adds	r0, #8
 8010748:	4404      	add	r4, r0
 801074a:	2108      	movs	r1, #8
 801074c:	4620      	mov	r0, r4
 801074e:	f7fc fd8f 	bl	800d270 <ucdr_alignment>
 8010752:	f1c5 0508 	rsb	r5, r5, #8
 8010756:	4428      	add	r0, r5
 8010758:	4420      	add	r0, r4
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop

08010760 <_Quaternion__cdr_deserialize>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	460c      	mov	r4, r1
 8010764:	b199      	cbz	r1, 801078e <_Quaternion__cdr_deserialize+0x2e>
 8010766:	4605      	mov	r5, r0
 8010768:	f7fc fb96 	bl	800ce98 <ucdr_deserialize_double>
 801076c:	f104 0108 	add.w	r1, r4, #8
 8010770:	4628      	mov	r0, r5
 8010772:	f7fc fb91 	bl	800ce98 <ucdr_deserialize_double>
 8010776:	f104 0110 	add.w	r1, r4, #16
 801077a:	4628      	mov	r0, r5
 801077c:	f7fc fb8c 	bl	800ce98 <ucdr_deserialize_double>
 8010780:	f104 0118 	add.w	r1, r4, #24
 8010784:	4628      	mov	r0, r5
 8010786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801078a:	f7fc bb85 	b.w	800ce98 <ucdr_deserialize_double>
 801078e:	4608      	mov	r0, r1
 8010790:	bd38      	pop	{r3, r4, r5, pc}
 8010792:	bf00      	nop

08010794 <_Quaternion__cdr_serialize>:
 8010794:	b1c0      	cbz	r0, 80107c8 <_Quaternion__cdr_serialize+0x34>
 8010796:	b538      	push	{r3, r4, r5, lr}
 8010798:	ed90 0b00 	vldr	d0, [r0]
 801079c:	460d      	mov	r5, r1
 801079e:	4604      	mov	r4, r0
 80107a0:	4608      	mov	r0, r1
 80107a2:	f7fc f9d7 	bl	800cb54 <ucdr_serialize_double>
 80107a6:	ed94 0b02 	vldr	d0, [r4, #8]
 80107aa:	4628      	mov	r0, r5
 80107ac:	f7fc f9d2 	bl	800cb54 <ucdr_serialize_double>
 80107b0:	ed94 0b04 	vldr	d0, [r4, #16]
 80107b4:	4628      	mov	r0, r5
 80107b6:	f7fc f9cd 	bl	800cb54 <ucdr_serialize_double>
 80107ba:	ed94 0b06 	vldr	d0, [r4, #24]
 80107be:	4628      	mov	r0, r5
 80107c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107c4:	f7fc b9c6 	b.w	800cb54 <ucdr_serialize_double>
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop

080107cc <_Quaternion__get_serialized_size>:
 80107cc:	b1d0      	cbz	r0, 8010804 <_Quaternion__get_serialized_size+0x38>
 80107ce:	b538      	push	{r3, r4, r5, lr}
 80107d0:	2108      	movs	r1, #8
 80107d2:	2000      	movs	r0, #0
 80107d4:	f7fc fd4c 	bl	800d270 <ucdr_alignment>
 80107d8:	f100 0508 	add.w	r5, r0, #8
 80107dc:	2108      	movs	r1, #8
 80107de:	4628      	mov	r0, r5
 80107e0:	f7fc fd46 	bl	800d270 <ucdr_alignment>
 80107e4:	f100 0408 	add.w	r4, r0, #8
 80107e8:	442c      	add	r4, r5
 80107ea:	2108      	movs	r1, #8
 80107ec:	4620      	mov	r0, r4
 80107ee:	f7fc fd3f 	bl	800d270 <ucdr_alignment>
 80107f2:	3008      	adds	r0, #8
 80107f4:	4404      	add	r4, r0
 80107f6:	2108      	movs	r1, #8
 80107f8:	4620      	mov	r0, r4
 80107fa:	f7fc fd39 	bl	800d270 <ucdr_alignment>
 80107fe:	3008      	adds	r0, #8
 8010800:	4420      	add	r0, r4
 8010802:	bd38      	pop	{r3, r4, r5, pc}
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop

08010808 <_Quaternion__max_serialized_size>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	2108      	movs	r1, #8
 801080c:	2000      	movs	r0, #0
 801080e:	f7fc fd2f 	bl	800d270 <ucdr_alignment>
 8010812:	f100 0508 	add.w	r5, r0, #8
 8010816:	2108      	movs	r1, #8
 8010818:	4628      	mov	r0, r5
 801081a:	f7fc fd29 	bl	800d270 <ucdr_alignment>
 801081e:	f100 0408 	add.w	r4, r0, #8
 8010822:	442c      	add	r4, r5
 8010824:	2108      	movs	r1, #8
 8010826:	4620      	mov	r0, r4
 8010828:	f7fc fd22 	bl	800d270 <ucdr_alignment>
 801082c:	3008      	adds	r0, #8
 801082e:	4404      	add	r4, r0
 8010830:	2108      	movs	r1, #8
 8010832:	4620      	mov	r0, r4
 8010834:	f7fc fd1c 	bl	800d270 <ucdr_alignment>
 8010838:	3008      	adds	r0, #8
 801083a:	4420      	add	r0, r4
 801083c:	bd38      	pop	{r3, r4, r5, pc}
 801083e:	bf00      	nop

08010840 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8010840:	b570      	push	{r4, r5, r6, lr}
 8010842:	2301      	movs	r3, #1
 8010844:	460c      	mov	r4, r1
 8010846:	7003      	strb	r3, [r0, #0]
 8010848:	2108      	movs	r1, #8
 801084a:	4620      	mov	r0, r4
 801084c:	f7fc fd10 	bl	800d270 <ucdr_alignment>
 8010850:	f104 0508 	add.w	r5, r4, #8
 8010854:	1946      	adds	r6, r0, r5
 8010856:	2108      	movs	r1, #8
 8010858:	4630      	mov	r0, r6
 801085a:	f7fc fd09 	bl	800d270 <ucdr_alignment>
 801085e:	f100 0508 	add.w	r5, r0, #8
 8010862:	4435      	add	r5, r6
 8010864:	2108      	movs	r1, #8
 8010866:	4628      	mov	r0, r5
 8010868:	f7fc fd02 	bl	800d270 <ucdr_alignment>
 801086c:	3008      	adds	r0, #8
 801086e:	4405      	add	r5, r0
 8010870:	2108      	movs	r1, #8
 8010872:	4628      	mov	r0, r5
 8010874:	f7fc fcfc 	bl	800d270 <ucdr_alignment>
 8010878:	f1c4 0408 	rsb	r4, r4, #8
 801087c:	4420      	add	r0, r4
 801087e:	4428      	add	r0, r5
 8010880:	bd70      	pop	{r4, r5, r6, pc}
 8010882:	bf00      	nop

08010884 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8010884:	4800      	ldr	r0, [pc, #0]	@ (8010888 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8010886:	4770      	bx	lr
 8010888:	20000994 	.word	0x20000994

0801088c <imu_interfaces__srv__ImuCalibration_Request__init>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4604      	mov	r4, r0
 8010890:	b128      	cbz	r0, 801089e <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 8010892:	f007 ff3d 	bl	8018710 <sensor_msgs__msg__Imu__init>
 8010896:	4605      	mov	r5, r0
 8010898:	b120      	cbz	r0, 80108a4 <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 801089a:	4628      	mov	r0, r5
 801089c:	bd38      	pop	{r3, r4, r5, pc}
 801089e:	4605      	mov	r5, r0
 80108a0:	4628      	mov	r0, r5
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	4620      	mov	r0, r4
 80108a6:	f007 ff89 	bl	80187bc <sensor_msgs__msg__Imu__fini>
 80108aa:	4628      	mov	r0, r5
 80108ac:	bd38      	pop	{r3, r4, r5, pc}
 80108ae:	bf00      	nop

080108b0 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 80108b0:	b108      	cbz	r0, 80108b6 <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 80108b2:	f007 bf83 	b.w	80187bc <sensor_msgs__msg__Imu__fini>
 80108b6:	4770      	bx	lr

080108b8 <imu_interfaces__srv__ImuCalibration_Response__init>:
 80108b8:	3800      	subs	r0, #0
 80108ba:	bf18      	it	ne
 80108bc:	2001      	movne	r0, #1
 80108be:	4770      	bx	lr

080108c0 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop

080108c4 <ucdr_serialize_endian_array_char>:
 80108c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c8:	4619      	mov	r1, r3
 80108ca:	461f      	mov	r7, r3
 80108cc:	4605      	mov	r5, r0
 80108ce:	4690      	mov	r8, r2
 80108d0:	f7fc fc76 	bl	800d1c0 <ucdr_check_buffer_available_for>
 80108d4:	b9e0      	cbnz	r0, 8010910 <ucdr_serialize_endian_array_char+0x4c>
 80108d6:	463e      	mov	r6, r7
 80108d8:	e009      	b.n	80108ee <ucdr_serialize_endian_array_char+0x2a>
 80108da:	68a8      	ldr	r0, [r5, #8]
 80108dc:	f009 ff2f 	bl	801a73e <memcpy>
 80108e0:	68ab      	ldr	r3, [r5, #8]
 80108e2:	6928      	ldr	r0, [r5, #16]
 80108e4:	4423      	add	r3, r4
 80108e6:	4420      	add	r0, r4
 80108e8:	1b36      	subs	r6, r6, r4
 80108ea:	60ab      	str	r3, [r5, #8]
 80108ec:	6128      	str	r0, [r5, #16]
 80108ee:	4631      	mov	r1, r6
 80108f0:	2201      	movs	r2, #1
 80108f2:	4628      	mov	r0, r5
 80108f4:	f7fc fcec 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 80108f8:	1bb9      	subs	r1, r7, r6
 80108fa:	4441      	add	r1, r8
 80108fc:	4604      	mov	r4, r0
 80108fe:	4602      	mov	r2, r0
 8010900:	2800      	cmp	r0, #0
 8010902:	d1ea      	bne.n	80108da <ucdr_serialize_endian_array_char+0x16>
 8010904:	2301      	movs	r3, #1
 8010906:	7da8      	ldrb	r0, [r5, #22]
 8010908:	756b      	strb	r3, [r5, #21]
 801090a:	4058      	eors	r0, r3
 801090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010910:	463a      	mov	r2, r7
 8010912:	68a8      	ldr	r0, [r5, #8]
 8010914:	4641      	mov	r1, r8
 8010916:	f009 ff12 	bl	801a73e <memcpy>
 801091a:	68aa      	ldr	r2, [r5, #8]
 801091c:	692b      	ldr	r3, [r5, #16]
 801091e:	443a      	add	r2, r7
 8010920:	443b      	add	r3, r7
 8010922:	60aa      	str	r2, [r5, #8]
 8010924:	612b      	str	r3, [r5, #16]
 8010926:	e7ed      	b.n	8010904 <ucdr_serialize_endian_array_char+0x40>

08010928 <ucdr_deserialize_endian_array_char>:
 8010928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801092c:	4619      	mov	r1, r3
 801092e:	461f      	mov	r7, r3
 8010930:	4605      	mov	r5, r0
 8010932:	4690      	mov	r8, r2
 8010934:	f7fc fc44 	bl	800d1c0 <ucdr_check_buffer_available_for>
 8010938:	b9e0      	cbnz	r0, 8010974 <ucdr_deserialize_endian_array_char+0x4c>
 801093a:	463e      	mov	r6, r7
 801093c:	e009      	b.n	8010952 <ucdr_deserialize_endian_array_char+0x2a>
 801093e:	68a9      	ldr	r1, [r5, #8]
 8010940:	f009 fefd 	bl	801a73e <memcpy>
 8010944:	68ab      	ldr	r3, [r5, #8]
 8010946:	6928      	ldr	r0, [r5, #16]
 8010948:	4423      	add	r3, r4
 801094a:	4420      	add	r0, r4
 801094c:	1b36      	subs	r6, r6, r4
 801094e:	60ab      	str	r3, [r5, #8]
 8010950:	6128      	str	r0, [r5, #16]
 8010952:	2201      	movs	r2, #1
 8010954:	4631      	mov	r1, r6
 8010956:	4628      	mov	r0, r5
 8010958:	f7fc fcba 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 801095c:	4604      	mov	r4, r0
 801095e:	1bb8      	subs	r0, r7, r6
 8010960:	4440      	add	r0, r8
 8010962:	4622      	mov	r2, r4
 8010964:	2c00      	cmp	r4, #0
 8010966:	d1ea      	bne.n	801093e <ucdr_deserialize_endian_array_char+0x16>
 8010968:	2301      	movs	r3, #1
 801096a:	7da8      	ldrb	r0, [r5, #22]
 801096c:	756b      	strb	r3, [r5, #21]
 801096e:	4058      	eors	r0, r3
 8010970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010974:	463a      	mov	r2, r7
 8010976:	68a9      	ldr	r1, [r5, #8]
 8010978:	4640      	mov	r0, r8
 801097a:	f009 fee0 	bl	801a73e <memcpy>
 801097e:	68aa      	ldr	r2, [r5, #8]
 8010980:	692b      	ldr	r3, [r5, #16]
 8010982:	443a      	add	r2, r7
 8010984:	443b      	add	r3, r7
 8010986:	60aa      	str	r2, [r5, #8]
 8010988:	612b      	str	r3, [r5, #16]
 801098a:	e7ed      	b.n	8010968 <ucdr_deserialize_endian_array_char+0x40>

0801098c <ucdr_serialize_array_uint8_t>:
 801098c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010990:	4688      	mov	r8, r1
 8010992:	4611      	mov	r1, r2
 8010994:	4617      	mov	r7, r2
 8010996:	4605      	mov	r5, r0
 8010998:	f7fc fc12 	bl	800d1c0 <ucdr_check_buffer_available_for>
 801099c:	b9e0      	cbnz	r0, 80109d8 <ucdr_serialize_array_uint8_t+0x4c>
 801099e:	463e      	mov	r6, r7
 80109a0:	e009      	b.n	80109b6 <ucdr_serialize_array_uint8_t+0x2a>
 80109a2:	68a8      	ldr	r0, [r5, #8]
 80109a4:	f009 fecb 	bl	801a73e <memcpy>
 80109a8:	68aa      	ldr	r2, [r5, #8]
 80109aa:	692b      	ldr	r3, [r5, #16]
 80109ac:	4422      	add	r2, r4
 80109ae:	4423      	add	r3, r4
 80109b0:	1b36      	subs	r6, r6, r4
 80109b2:	60aa      	str	r2, [r5, #8]
 80109b4:	612b      	str	r3, [r5, #16]
 80109b6:	4631      	mov	r1, r6
 80109b8:	2201      	movs	r2, #1
 80109ba:	4628      	mov	r0, r5
 80109bc:	f7fc fc88 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 80109c0:	1bb9      	subs	r1, r7, r6
 80109c2:	4441      	add	r1, r8
 80109c4:	4604      	mov	r4, r0
 80109c6:	4602      	mov	r2, r0
 80109c8:	2800      	cmp	r0, #0
 80109ca:	d1ea      	bne.n	80109a2 <ucdr_serialize_array_uint8_t+0x16>
 80109cc:	2301      	movs	r3, #1
 80109ce:	7da8      	ldrb	r0, [r5, #22]
 80109d0:	756b      	strb	r3, [r5, #21]
 80109d2:	4058      	eors	r0, r3
 80109d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d8:	463a      	mov	r2, r7
 80109da:	68a8      	ldr	r0, [r5, #8]
 80109dc:	4641      	mov	r1, r8
 80109de:	f009 feae 	bl	801a73e <memcpy>
 80109e2:	68aa      	ldr	r2, [r5, #8]
 80109e4:	692b      	ldr	r3, [r5, #16]
 80109e6:	443a      	add	r2, r7
 80109e8:	443b      	add	r3, r7
 80109ea:	60aa      	str	r2, [r5, #8]
 80109ec:	612b      	str	r3, [r5, #16]
 80109ee:	e7ed      	b.n	80109cc <ucdr_serialize_array_uint8_t+0x40>

080109f0 <ucdr_serialize_endian_array_uint8_t>:
 80109f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f4:	4619      	mov	r1, r3
 80109f6:	461f      	mov	r7, r3
 80109f8:	4605      	mov	r5, r0
 80109fa:	4690      	mov	r8, r2
 80109fc:	f7fc fbe0 	bl	800d1c0 <ucdr_check_buffer_available_for>
 8010a00:	b9e0      	cbnz	r0, 8010a3c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010a02:	463e      	mov	r6, r7
 8010a04:	e009      	b.n	8010a1a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010a06:	68a8      	ldr	r0, [r5, #8]
 8010a08:	f009 fe99 	bl	801a73e <memcpy>
 8010a0c:	68ab      	ldr	r3, [r5, #8]
 8010a0e:	6928      	ldr	r0, [r5, #16]
 8010a10:	4423      	add	r3, r4
 8010a12:	4420      	add	r0, r4
 8010a14:	1b36      	subs	r6, r6, r4
 8010a16:	60ab      	str	r3, [r5, #8]
 8010a18:	6128      	str	r0, [r5, #16]
 8010a1a:	4631      	mov	r1, r6
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f7fc fc56 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 8010a24:	1bb9      	subs	r1, r7, r6
 8010a26:	4441      	add	r1, r8
 8010a28:	4604      	mov	r4, r0
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	d1ea      	bne.n	8010a06 <ucdr_serialize_endian_array_uint8_t+0x16>
 8010a30:	2301      	movs	r3, #1
 8010a32:	7da8      	ldrb	r0, [r5, #22]
 8010a34:	756b      	strb	r3, [r5, #21]
 8010a36:	4058      	eors	r0, r3
 8010a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a3c:	463a      	mov	r2, r7
 8010a3e:	68a8      	ldr	r0, [r5, #8]
 8010a40:	4641      	mov	r1, r8
 8010a42:	f009 fe7c 	bl	801a73e <memcpy>
 8010a46:	68aa      	ldr	r2, [r5, #8]
 8010a48:	692b      	ldr	r3, [r5, #16]
 8010a4a:	443a      	add	r2, r7
 8010a4c:	443b      	add	r3, r7
 8010a4e:	60aa      	str	r2, [r5, #8]
 8010a50:	612b      	str	r3, [r5, #16]
 8010a52:	e7ed      	b.n	8010a30 <ucdr_serialize_endian_array_uint8_t+0x40>

08010a54 <ucdr_deserialize_array_uint8_t>:
 8010a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a58:	4688      	mov	r8, r1
 8010a5a:	4611      	mov	r1, r2
 8010a5c:	4617      	mov	r7, r2
 8010a5e:	4605      	mov	r5, r0
 8010a60:	f7fc fbae 	bl	800d1c0 <ucdr_check_buffer_available_for>
 8010a64:	b9e0      	cbnz	r0, 8010aa0 <ucdr_deserialize_array_uint8_t+0x4c>
 8010a66:	463e      	mov	r6, r7
 8010a68:	e009      	b.n	8010a7e <ucdr_deserialize_array_uint8_t+0x2a>
 8010a6a:	68a9      	ldr	r1, [r5, #8]
 8010a6c:	f009 fe67 	bl	801a73e <memcpy>
 8010a70:	68aa      	ldr	r2, [r5, #8]
 8010a72:	692b      	ldr	r3, [r5, #16]
 8010a74:	4422      	add	r2, r4
 8010a76:	4423      	add	r3, r4
 8010a78:	1b36      	subs	r6, r6, r4
 8010a7a:	60aa      	str	r2, [r5, #8]
 8010a7c:	612b      	str	r3, [r5, #16]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	4631      	mov	r1, r6
 8010a82:	4628      	mov	r0, r5
 8010a84:	f7fc fc24 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 8010a88:	4604      	mov	r4, r0
 8010a8a:	1bb8      	subs	r0, r7, r6
 8010a8c:	4440      	add	r0, r8
 8010a8e:	4622      	mov	r2, r4
 8010a90:	2c00      	cmp	r4, #0
 8010a92:	d1ea      	bne.n	8010a6a <ucdr_deserialize_array_uint8_t+0x16>
 8010a94:	2301      	movs	r3, #1
 8010a96:	7da8      	ldrb	r0, [r5, #22]
 8010a98:	756b      	strb	r3, [r5, #21]
 8010a9a:	4058      	eors	r0, r3
 8010a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa0:	463a      	mov	r2, r7
 8010aa2:	68a9      	ldr	r1, [r5, #8]
 8010aa4:	4640      	mov	r0, r8
 8010aa6:	f009 fe4a 	bl	801a73e <memcpy>
 8010aaa:	68aa      	ldr	r2, [r5, #8]
 8010aac:	692b      	ldr	r3, [r5, #16]
 8010aae:	443a      	add	r2, r7
 8010ab0:	443b      	add	r3, r7
 8010ab2:	60aa      	str	r2, [r5, #8]
 8010ab4:	612b      	str	r3, [r5, #16]
 8010ab6:	e7ed      	b.n	8010a94 <ucdr_deserialize_array_uint8_t+0x40>

08010ab8 <ucdr_deserialize_endian_array_uint8_t>:
 8010ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010abc:	4619      	mov	r1, r3
 8010abe:	461f      	mov	r7, r3
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	4690      	mov	r8, r2
 8010ac4:	f7fc fb7c 	bl	800d1c0 <ucdr_check_buffer_available_for>
 8010ac8:	b9e0      	cbnz	r0, 8010b04 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010aca:	463e      	mov	r6, r7
 8010acc:	e009      	b.n	8010ae2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010ace:	68a9      	ldr	r1, [r5, #8]
 8010ad0:	f009 fe35 	bl	801a73e <memcpy>
 8010ad4:	68ab      	ldr	r3, [r5, #8]
 8010ad6:	6928      	ldr	r0, [r5, #16]
 8010ad8:	4423      	add	r3, r4
 8010ada:	4420      	add	r0, r4
 8010adc:	1b36      	subs	r6, r6, r4
 8010ade:	60ab      	str	r3, [r5, #8]
 8010ae0:	6128      	str	r0, [r5, #16]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	4631      	mov	r1, r6
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f7fc fbf2 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 8010aec:	4604      	mov	r4, r0
 8010aee:	1bb8      	subs	r0, r7, r6
 8010af0:	4440      	add	r0, r8
 8010af2:	4622      	mov	r2, r4
 8010af4:	2c00      	cmp	r4, #0
 8010af6:	d1ea      	bne.n	8010ace <ucdr_deserialize_endian_array_uint8_t+0x16>
 8010af8:	2301      	movs	r3, #1
 8010afa:	7da8      	ldrb	r0, [r5, #22]
 8010afc:	756b      	strb	r3, [r5, #21]
 8010afe:	4058      	eors	r0, r3
 8010b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b04:	463a      	mov	r2, r7
 8010b06:	68a9      	ldr	r1, [r5, #8]
 8010b08:	4640      	mov	r0, r8
 8010b0a:	f009 fe18 	bl	801a73e <memcpy>
 8010b0e:	68aa      	ldr	r2, [r5, #8]
 8010b10:	692b      	ldr	r3, [r5, #16]
 8010b12:	443a      	add	r2, r7
 8010b14:	443b      	add	r3, r7
 8010b16:	60aa      	str	r2, [r5, #8]
 8010b18:	612b      	str	r3, [r5, #16]
 8010b1a:	e7ed      	b.n	8010af8 <ucdr_deserialize_endian_array_uint8_t+0x40>

08010b1c <ucdr_serialize_array_double>:
 8010b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b20:	460e      	mov	r6, r1
 8010b22:	2108      	movs	r1, #8
 8010b24:	4604      	mov	r4, r0
 8010b26:	4617      	mov	r7, r2
 8010b28:	f7fc fbaa 	bl	800d280 <ucdr_buffer_alignment>
 8010b2c:	4601      	mov	r1, r0
 8010b2e:	4620      	mov	r0, r4
 8010b30:	7d65      	ldrb	r5, [r4, #21]
 8010b32:	f7fc fbe9 	bl	800d308 <ucdr_advance_buffer>
 8010b36:	7d21      	ldrb	r1, [r4, #20]
 8010b38:	7565      	strb	r5, [r4, #21]
 8010b3a:	2901      	cmp	r1, #1
 8010b3c:	d010      	beq.n	8010b60 <ucdr_serialize_array_double+0x44>
 8010b3e:	b157      	cbz	r7, 8010b56 <ucdr_serialize_array_double+0x3a>
 8010b40:	2500      	movs	r5, #0
 8010b42:	e000      	b.n	8010b46 <ucdr_serialize_array_double+0x2a>
 8010b44:	7d21      	ldrb	r1, [r4, #20]
 8010b46:	ecb6 0b02 	vldmia	r6!, {d0}
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	3501      	adds	r5, #1
 8010b4e:	f7fc f8d1 	bl	800ccf4 <ucdr_serialize_endian_double>
 8010b52:	42af      	cmp	r7, r5
 8010b54:	d1f6      	bne.n	8010b44 <ucdr_serialize_array_double+0x28>
 8010b56:	7da0      	ldrb	r0, [r4, #22]
 8010b58:	f080 0001 	eor.w	r0, r0, #1
 8010b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b60:	00ff      	lsls	r7, r7, #3
 8010b62:	4639      	mov	r1, r7
 8010b64:	4620      	mov	r0, r4
 8010b66:	f7fc fb2b 	bl	800d1c0 <ucdr_check_buffer_available_for>
 8010b6a:	b9f8      	cbnz	r0, 8010bac <ucdr_serialize_array_double+0x90>
 8010b6c:	46b8      	mov	r8, r7
 8010b6e:	e00a      	b.n	8010b86 <ucdr_serialize_array_double+0x6a>
 8010b70:	68a0      	ldr	r0, [r4, #8]
 8010b72:	f009 fde4 	bl	801a73e <memcpy>
 8010b76:	68a2      	ldr	r2, [r4, #8]
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	442a      	add	r2, r5
 8010b7c:	442b      	add	r3, r5
 8010b7e:	eba8 0805 	sub.w	r8, r8, r5
 8010b82:	60a2      	str	r2, [r4, #8]
 8010b84:	6123      	str	r3, [r4, #16]
 8010b86:	4641      	mov	r1, r8
 8010b88:	2208      	movs	r2, #8
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f7fc fba0 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 8010b90:	eba7 0108 	sub.w	r1, r7, r8
 8010b94:	4431      	add	r1, r6
 8010b96:	4605      	mov	r5, r0
 8010b98:	4602      	mov	r2, r0
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d1e8      	bne.n	8010b70 <ucdr_serialize_array_double+0x54>
 8010b9e:	7da0      	ldrb	r0, [r4, #22]
 8010ba0:	2308      	movs	r3, #8
 8010ba2:	7563      	strb	r3, [r4, #21]
 8010ba4:	f080 0001 	eor.w	r0, r0, #1
 8010ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bac:	463a      	mov	r2, r7
 8010bae:	68a0      	ldr	r0, [r4, #8]
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	f009 fdc4 	bl	801a73e <memcpy>
 8010bb6:	68a2      	ldr	r2, [r4, #8]
 8010bb8:	6923      	ldr	r3, [r4, #16]
 8010bba:	443a      	add	r2, r7
 8010bbc:	441f      	add	r7, r3
 8010bbe:	60a2      	str	r2, [r4, #8]
 8010bc0:	6127      	str	r7, [r4, #16]
 8010bc2:	e7ec      	b.n	8010b9e <ucdr_serialize_array_double+0x82>

08010bc4 <ucdr_deserialize_array_double>:
 8010bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc8:	460e      	mov	r6, r1
 8010bca:	2108      	movs	r1, #8
 8010bcc:	4604      	mov	r4, r0
 8010bce:	4617      	mov	r7, r2
 8010bd0:	f7fc fb56 	bl	800d280 <ucdr_buffer_alignment>
 8010bd4:	4601      	mov	r1, r0
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	7d65      	ldrb	r5, [r4, #21]
 8010bda:	f7fc fb95 	bl	800d308 <ucdr_advance_buffer>
 8010bde:	7d21      	ldrb	r1, [r4, #20]
 8010be0:	7565      	strb	r5, [r4, #21]
 8010be2:	2901      	cmp	r1, #1
 8010be4:	d011      	beq.n	8010c0a <ucdr_deserialize_array_double+0x46>
 8010be6:	b15f      	cbz	r7, 8010c00 <ucdr_deserialize_array_double+0x3c>
 8010be8:	2500      	movs	r5, #0
 8010bea:	e000      	b.n	8010bee <ucdr_deserialize_array_double+0x2a>
 8010bec:	7d21      	ldrb	r1, [r4, #20]
 8010bee:	4632      	mov	r2, r6
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	3501      	adds	r5, #1
 8010bf4:	f7fc fa16 	bl	800d024 <ucdr_deserialize_endian_double>
 8010bf8:	42af      	cmp	r7, r5
 8010bfa:	f106 0608 	add.w	r6, r6, #8
 8010bfe:	d1f5      	bne.n	8010bec <ucdr_deserialize_array_double+0x28>
 8010c00:	7da0      	ldrb	r0, [r4, #22]
 8010c02:	f080 0001 	eor.w	r0, r0, #1
 8010c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c0a:	00ff      	lsls	r7, r7, #3
 8010c0c:	4639      	mov	r1, r7
 8010c0e:	4620      	mov	r0, r4
 8010c10:	f7fc fad6 	bl	800d1c0 <ucdr_check_buffer_available_for>
 8010c14:	b9f8      	cbnz	r0, 8010c56 <ucdr_deserialize_array_double+0x92>
 8010c16:	46b8      	mov	r8, r7
 8010c18:	e00a      	b.n	8010c30 <ucdr_deserialize_array_double+0x6c>
 8010c1a:	68a1      	ldr	r1, [r4, #8]
 8010c1c:	f009 fd8f 	bl	801a73e <memcpy>
 8010c20:	68a2      	ldr	r2, [r4, #8]
 8010c22:	6923      	ldr	r3, [r4, #16]
 8010c24:	442a      	add	r2, r5
 8010c26:	442b      	add	r3, r5
 8010c28:	eba8 0805 	sub.w	r8, r8, r5
 8010c2c:	60a2      	str	r2, [r4, #8]
 8010c2e:	6123      	str	r3, [r4, #16]
 8010c30:	2208      	movs	r2, #8
 8010c32:	4641      	mov	r1, r8
 8010c34:	4620      	mov	r0, r4
 8010c36:	f7fc fb4b 	bl	800d2d0 <ucdr_check_final_buffer_behavior_array>
 8010c3a:	4605      	mov	r5, r0
 8010c3c:	eba7 0008 	sub.w	r0, r7, r8
 8010c40:	4430      	add	r0, r6
 8010c42:	462a      	mov	r2, r5
 8010c44:	2d00      	cmp	r5, #0
 8010c46:	d1e8      	bne.n	8010c1a <ucdr_deserialize_array_double+0x56>
 8010c48:	7da0      	ldrb	r0, [r4, #22]
 8010c4a:	2308      	movs	r3, #8
 8010c4c:	7563      	strb	r3, [r4, #21]
 8010c4e:	f080 0001 	eor.w	r0, r0, #1
 8010c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c56:	463a      	mov	r2, r7
 8010c58:	68a1      	ldr	r1, [r4, #8]
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	f009 fd6f 	bl	801a73e <memcpy>
 8010c60:	68a2      	ldr	r2, [r4, #8]
 8010c62:	6923      	ldr	r3, [r4, #16]
 8010c64:	443a      	add	r2, r7
 8010c66:	441f      	add	r7, r3
 8010c68:	60a2      	str	r2, [r4, #8]
 8010c6a:	6127      	str	r7, [r4, #16]
 8010c6c:	e7ec      	b.n	8010c48 <ucdr_deserialize_array_double+0x84>
 8010c6e:	bf00      	nop

08010c70 <ucdr_serialize_sequence_char>:
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	4615      	mov	r5, r2
 8010c74:	460e      	mov	r6, r1
 8010c76:	7d01      	ldrb	r1, [r0, #20]
 8010c78:	4604      	mov	r4, r0
 8010c7a:	f7fb fac1 	bl	800c200 <ucdr_serialize_endian_uint32_t>
 8010c7e:	b90d      	cbnz	r5, 8010c84 <ucdr_serialize_sequence_char+0x14>
 8010c80:	2001      	movs	r0, #1
 8010c82:	bd70      	pop	{r4, r5, r6, pc}
 8010c84:	7d21      	ldrb	r1, [r4, #20]
 8010c86:	462b      	mov	r3, r5
 8010c88:	4632      	mov	r2, r6
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c90:	f7ff be18 	b.w	80108c4 <ucdr_serialize_endian_array_char>

08010c94 <ucdr_deserialize_sequence_char>:
 8010c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c98:	461d      	mov	r5, r3
 8010c9a:	4616      	mov	r6, r2
 8010c9c:	460f      	mov	r7, r1
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	7d01      	ldrb	r1, [r0, #20]
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	f7fb fbd4 	bl	800c450 <ucdr_deserialize_endian_uint32_t>
 8010ca8:	682b      	ldr	r3, [r5, #0]
 8010caa:	429e      	cmp	r6, r3
 8010cac:	bf3c      	itt	cc
 8010cae:	2201      	movcc	r2, #1
 8010cb0:	75a2      	strbcc	r2, [r4, #22]
 8010cb2:	b913      	cbnz	r3, 8010cba <ucdr_deserialize_sequence_char+0x26>
 8010cb4:	2001      	movs	r0, #1
 8010cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cba:	7d21      	ldrb	r1, [r4, #20]
 8010cbc:	463a      	mov	r2, r7
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc4:	f7ff be30 	b.w	8010928 <ucdr_deserialize_endian_array_char>

08010cc8 <ucdr_serialize_sequence_uint8_t>:
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	4615      	mov	r5, r2
 8010ccc:	460e      	mov	r6, r1
 8010cce:	7d01      	ldrb	r1, [r0, #20]
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	f7fb fa95 	bl	800c200 <ucdr_serialize_endian_uint32_t>
 8010cd6:	b90d      	cbnz	r5, 8010cdc <ucdr_serialize_sequence_uint8_t+0x14>
 8010cd8:	2001      	movs	r0, #1
 8010cda:	bd70      	pop	{r4, r5, r6, pc}
 8010cdc:	7d21      	ldrb	r1, [r4, #20]
 8010cde:	462b      	mov	r3, r5
 8010ce0:	4632      	mov	r2, r6
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ce8:	f7ff be82 	b.w	80109f0 <ucdr_serialize_endian_array_uint8_t>

08010cec <ucdr_deserialize_sequence_uint8_t>:
 8010cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf0:	461d      	mov	r5, r3
 8010cf2:	4616      	mov	r6, r2
 8010cf4:	460f      	mov	r7, r1
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	7d01      	ldrb	r1, [r0, #20]
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	f7fb fba8 	bl	800c450 <ucdr_deserialize_endian_uint32_t>
 8010d00:	682b      	ldr	r3, [r5, #0]
 8010d02:	429e      	cmp	r6, r3
 8010d04:	bf3c      	itt	cc
 8010d06:	2201      	movcc	r2, #1
 8010d08:	75a2      	strbcc	r2, [r4, #22]
 8010d0a:	b913      	cbnz	r3, 8010d12 <ucdr_deserialize_sequence_uint8_t+0x26>
 8010d0c:	2001      	movs	r0, #1
 8010d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d12:	7d21      	ldrb	r1, [r4, #20]
 8010d14:	463a      	mov	r2, r7
 8010d16:	4620      	mov	r0, r4
 8010d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d1c:	f7ff becc 	b.w	8010ab8 <ucdr_deserialize_endian_array_uint8_t>

08010d20 <uxr_buffer_delete_entity>:
 8010d20:	b510      	push	{r4, lr}
 8010d22:	2300      	movs	r3, #0
 8010d24:	b08e      	sub	sp, #56	@ 0x38
 8010d26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	2204      	movs	r2, #4
 8010d30:	ab06      	add	r3, sp, #24
 8010d32:	4604      	mov	r4, r0
 8010d34:	9103      	str	r1, [sp, #12]
 8010d36:	f001 fb3d 	bl	80123b4 <uxr_prepare_stream_to_write_submessage>
 8010d3a:	b918      	cbnz	r0, 8010d44 <uxr_buffer_delete_entity+0x24>
 8010d3c:	4604      	mov	r4, r0
 8010d3e:	4620      	mov	r0, r4
 8010d40:	b00e      	add	sp, #56	@ 0x38
 8010d42:	bd10      	pop	{r4, pc}
 8010d44:	9902      	ldr	r1, [sp, #8]
 8010d46:	aa05      	add	r2, sp, #20
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f001 fc69 	bl	8012620 <uxr_init_base_object_request>
 8010d4e:	a905      	add	r1, sp, #20
 8010d50:	4604      	mov	r4, r0
 8010d52:	a806      	add	r0, sp, #24
 8010d54:	f003 fa94 	bl	8014280 <uxr_serialize_DELETE_Payload>
 8010d58:	4620      	mov	r0, r4
 8010d5a:	b00e      	add	sp, #56	@ 0x38
 8010d5c:	bd10      	pop	{r4, pc}
 8010d5e:	bf00      	nop

08010d60 <uxr_common_create_entity>:
 8010d60:	b510      	push	{r4, lr}
 8010d62:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010d66:	b08c      	sub	sp, #48	@ 0x30
 8010d68:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010d6c:	f1bc 0f01 	cmp.w	ip, #1
 8010d70:	bf0c      	ite	eq
 8010d72:	f003 0201 	andeq.w	r2, r3, #1
 8010d76:	2200      	movne	r2, #0
 8010d78:	330e      	adds	r3, #14
 8010d7a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010d7e:	9101      	str	r1, [sp, #4]
 8010d80:	441a      	add	r2, r3
 8010d82:	2301      	movs	r3, #1
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	9903      	ldr	r1, [sp, #12]
 8010d88:	ab04      	add	r3, sp, #16
 8010d8a:	b292      	uxth	r2, r2
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	f001 fb11 	bl	80123b4 <uxr_prepare_stream_to_write_submessage>
 8010d92:	b918      	cbnz	r0, 8010d9c <uxr_common_create_entity+0x3c>
 8010d94:	4604      	mov	r4, r0
 8010d96:	4620      	mov	r0, r4
 8010d98:	b00c      	add	sp, #48	@ 0x30
 8010d9a:	bd10      	pop	{r4, pc}
 8010d9c:	9902      	ldr	r1, [sp, #8]
 8010d9e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010da0:	4620      	mov	r0, r4
 8010da2:	f001 fc3d 	bl	8012620 <uxr_init_base_object_request>
 8010da6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010da8:	4604      	mov	r4, r0
 8010daa:	a804      	add	r0, sp, #16
 8010dac:	f003 f9c4 	bl	8014138 <uxr_serialize_CREATE_Payload>
 8010db0:	4620      	mov	r0, r4
 8010db2:	b00c      	add	sp, #48	@ 0x30
 8010db4:	bd10      	pop	{r4, pc}
 8010db6:	bf00      	nop

08010db8 <uxr_buffer_create_participant_bin>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010dbe:	ac11      	add	r4, sp, #68	@ 0x44
 8010dc0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010dc4:	2303      	movs	r3, #3
 8010dc6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010dca:	7223      	strb	r3, [r4, #8]
 8010dcc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010dce:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	2100      	movs	r1, #0
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	7122      	strb	r2, [r4, #4]
 8010dda:	f88d 1014 	strb.w	r1, [sp, #20]
 8010dde:	b1cb      	cbz	r3, 8010e14 <uxr_buffer_create_participant_bin+0x5c>
 8010de0:	f88d 201c 	strb.w	r2, [sp, #28]
 8010de4:	9308      	str	r3, [sp, #32]
 8010de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010dea:	a915      	add	r1, sp, #84	@ 0x54
 8010dec:	a809      	add	r0, sp, #36	@ 0x24
 8010dee:	f7fc fa3b 	bl	800d268 <ucdr_init_buffer>
 8010df2:	a905      	add	r1, sp, #20
 8010df4:	a809      	add	r0, sp, #36	@ 0x24
 8010df6:	f002 fe39 	bl	8013a6c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010dfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010dfc:	9600      	str	r6, [sp, #0]
 8010dfe:	9401      	str	r4, [sp, #4]
 8010e00:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e04:	60e3      	str	r3, [r4, #12]
 8010e06:	4628      	mov	r0, r5
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	f7ff ffa9 	bl	8010d60 <uxr_common_create_entity>
 8010e0e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010e12:	bd70      	pop	{r4, r5, r6, pc}
 8010e14:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e18:	e7e5      	b.n	8010de6 <uxr_buffer_create_participant_bin+0x2e>
 8010e1a:	bf00      	nop

08010e1c <uxr_buffer_create_topic_bin>:
 8010e1c:	b570      	push	{r4, r5, r6, lr}
 8010e1e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010e22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010e26:	9105      	str	r1, [sp, #20]
 8010e28:	4605      	mov	r5, r0
 8010e2a:	a997      	add	r1, sp, #604	@ 0x25c
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	2302      	movs	r3, #2
 8010e30:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010e34:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010e38:	f000 f9ea 	bl	8011210 <uxr_object_id_to_raw>
 8010e3c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010e3e:	9306      	str	r3, [sp, #24]
 8010e40:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e44:	2303      	movs	r3, #3
 8010e46:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e50:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010e54:	a917      	add	r1, sp, #92	@ 0x5c
 8010e56:	2300      	movs	r3, #0
 8010e58:	a80b      	add	r0, sp, #44	@ 0x2c
 8010e5a:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e5e:	f7fc fa03 	bl	800d268 <ucdr_init_buffer>
 8010e62:	a906      	add	r1, sp, #24
 8010e64:	a80b      	add	r0, sp, #44	@ 0x2c
 8010e66:	f002 fe23 	bl	8013ab0 <uxr_serialize_OBJK_Topic_Binary>
 8010e6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e6c:	9316      	str	r3, [sp, #88]	@ 0x58
 8010e6e:	ac13      	add	r4, sp, #76	@ 0x4c
 8010e70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010e74:	9600      	str	r6, [sp, #0]
 8010e76:	9401      	str	r4, [sp, #4]
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	f7ff ff70 	bl	8010d60 <uxr_common_create_entity>
 8010e80:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010e84:	bd70      	pop	{r4, r5, r6, pc}
 8010e86:	bf00      	nop

08010e88 <uxr_buffer_create_publisher_bin>:
 8010e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e8a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010e8e:	4605      	mov	r5, r0
 8010e90:	9105      	str	r1, [sp, #20]
 8010e92:	4618      	mov	r0, r3
 8010e94:	2603      	movs	r6, #3
 8010e96:	a992      	add	r1, sp, #584	@ 0x248
 8010e98:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010e9c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010ea0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010ea4:	f000 f9b4 	bl	8011210 <uxr_object_id_to_raw>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010eae:	a912      	add	r1, sp, #72	@ 0x48
 8010eb0:	a806      	add	r0, sp, #24
 8010eb2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010eb6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010eba:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010ebe:	f7fc f9d3 	bl	800d268 <ucdr_init_buffer>
 8010ec2:	a993      	add	r1, sp, #588	@ 0x24c
 8010ec4:	a806      	add	r0, sp, #24
 8010ec6:	f002 fea7 	bl	8013c18 <uxr_serialize_OBJK_Publisher_Binary>
 8010eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ecc:	9311      	str	r3, [sp, #68]	@ 0x44
 8010ece:	ac0e      	add	r4, sp, #56	@ 0x38
 8010ed0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ed4:	9700      	str	r7, [sp, #0]
 8010ed6:	9401      	str	r4, [sp, #4]
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	4628      	mov	r0, r5
 8010edc:	f7ff ff40 	bl	8010d60 <uxr_common_create_entity>
 8010ee0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ee6:	bf00      	nop

08010ee8 <uxr_buffer_create_datawriter_bin>:
 8010ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eec:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010ef0:	ac1d      	add	r4, sp, #116	@ 0x74
 8010ef2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010ef6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010efa:	9105      	str	r1, [sp, #20]
 8010efc:	4606      	mov	r6, r0
 8010efe:	a9a1      	add	r1, sp, #644	@ 0x284
 8010f00:	4618      	mov	r0, r3
 8010f02:	2305      	movs	r3, #5
 8010f04:	7123      	strb	r3, [r4, #4]
 8010f06:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010f0a:	2703      	movs	r7, #3
 8010f0c:	f000 f980 	bl	8011210 <uxr_object_id_to_raw>
 8010f10:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010f12:	7227      	strb	r7, [r4, #8]
 8010f14:	a90e      	add	r1, sp, #56	@ 0x38
 8010f16:	f000 f97b 	bl	8011210 <uxr_object_id_to_raw>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010f20:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010f24:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010f28:	3d00      	subs	r5, #0
 8010f2a:	bf18      	it	ne
 8010f2c:	2501      	movne	r5, #1
 8010f2e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010f32:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010f36:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010f3a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010f3e:	2301      	movs	r3, #1
 8010f40:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010f44:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010f48:	bb8a      	cbnz	r2, 8010fae <uxr_buffer_create_datawriter_bin+0xc6>
 8010f4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010f4e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010f52:	f04f 0c13 	mov.w	ip, #19
 8010f56:	250b      	movs	r5, #11
 8010f58:	2221      	movs	r2, #33	@ 0x21
 8010f5a:	2111      	movs	r1, #17
 8010f5c:	2009      	movs	r0, #9
 8010f5e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010f62:	b923      	cbnz	r3, 8010f6e <uxr_buffer_create_datawriter_bin+0x86>
 8010f64:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010f68:	4672      	mov	r2, lr
 8010f6a:	4661      	mov	r1, ip
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d025      	beq.n	8010fc2 <uxr_buffer_create_datawriter_bin+0xda>
 8010f76:	2b03      	cmp	r3, #3
 8010f78:	d029      	beq.n	8010fce <uxr_buffer_create_datawriter_bin+0xe6>
 8010f7a:	b32b      	cbz	r3, 8010fc8 <uxr_buffer_create_datawriter_bin+0xe0>
 8010f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f80:	a921      	add	r1, sp, #132	@ 0x84
 8010f82:	a806      	add	r0, sp, #24
 8010f84:	f7fc f970 	bl	800d268 <ucdr_init_buffer>
 8010f88:	a90e      	add	r1, sp, #56	@ 0x38
 8010f8a:	a806      	add	r0, sp, #24
 8010f8c:	f002 feba 	bl	8013d04 <uxr_serialize_OBJK_DataWriter_Binary>
 8010f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f92:	f8cd 8000 	str.w	r8, [sp]
 8010f96:	9401      	str	r4, [sp, #4]
 8010f98:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010f9c:	60e3      	str	r3, [r4, #12]
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	f7ff fedd 	bl	8010d60 <uxr_common_create_entity>
 8010fa6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fae:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010fb2:	f04f 0c12 	mov.w	ip, #18
 8010fb6:	250a      	movs	r5, #10
 8010fb8:	2220      	movs	r2, #32
 8010fba:	2110      	movs	r1, #16
 8010fbc:	2008      	movs	r0, #8
 8010fbe:	2702      	movs	r7, #2
 8010fc0:	e7cd      	b.n	8010f5e <uxr_buffer_create_datawriter_bin+0x76>
 8010fc2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010fc6:	e7d9      	b.n	8010f7c <uxr_buffer_create_datawriter_bin+0x94>
 8010fc8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010fcc:	e7d6      	b.n	8010f7c <uxr_buffer_create_datawriter_bin+0x94>
 8010fce:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010fd2:	e7d3      	b.n	8010f7c <uxr_buffer_create_datawriter_bin+0x94>

08010fd4 <uxr_buffer_create_replier_bin>:
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8010fda:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010fde:	9105      	str	r1, [sp, #20]
 8010fe0:	4605      	mov	r5, r0
 8010fe2:	a999      	add	r1, sp, #612	@ 0x264
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	2308      	movs	r3, #8
 8010fe8:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8010fec:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8010ff0:	f000 f90e 	bl	8011210 <uxr_object_id_to_raw>
 8010ff4:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8010ff6:	9306      	str	r3, [sp, #24]
 8010ff8:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8010ffa:	9307      	str	r3, [sp, #28]
 8010ffc:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8010ffe:	9308      	str	r3, [sp, #32]
 8011000:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8011002:	930c      	str	r3, [sp, #48]	@ 0x30
 8011004:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011006:	930a      	str	r3, [sp, #40]	@ 0x28
 8011008:	2301      	movs	r3, #1
 801100a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801100e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011012:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011016:	a919      	add	r1, sp, #100	@ 0x64
 8011018:	2303      	movs	r3, #3
 801101a:	a80d      	add	r0, sp, #52	@ 0x34
 801101c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8011020:	f7fc f922 	bl	800d268 <ucdr_init_buffer>
 8011024:	a906      	add	r1, sp, #24
 8011026:	a80d      	add	r0, sp, #52	@ 0x34
 8011028:	f002 fe98 	bl	8013d5c <uxr_serialize_OBJK_Replier_Binary>
 801102c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801102e:	9318      	str	r3, [sp, #96]	@ 0x60
 8011030:	ac15      	add	r4, sp, #84	@ 0x54
 8011032:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011036:	9600      	str	r6, [sp, #0]
 8011038:	9401      	str	r4, [sp, #4]
 801103a:	b29b      	uxth	r3, r3
 801103c:	4628      	mov	r0, r5
 801103e:	f7ff fe8f 	bl	8010d60 <uxr_common_create_entity>
 8011042:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8011046:	bd70      	pop	{r4, r5, r6, pc}

08011048 <get_custom_error>:
 8011048:	4b01      	ldr	r3, [pc, #4]	@ (8011050 <get_custom_error+0x8>)
 801104a:	7818      	ldrb	r0, [r3, #0]
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop
 8011050:	2000c104 	.word	0x2000c104

08011054 <recv_custom_msg>:
 8011054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011058:	4693      	mov	fp, r2
 801105a:	b089      	sub	sp, #36	@ 0x24
 801105c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8011060:	9305      	str	r3, [sp, #20]
 8011062:	468a      	mov	sl, r1
 8011064:	2100      	movs	r1, #0
 8011066:	4604      	mov	r4, r0
 8011068:	f88d 101e 	strb.w	r1, [sp, #30]
 801106c:	b322      	cbz	r2, 80110b8 <recv_custom_msg+0x64>
 801106e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8011072:	f10d 081f 	add.w	r8, sp, #31
 8011076:	af05      	add	r7, sp, #20
 8011078:	f10d 061e 	add.w	r6, sp, #30
 801107c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011080:	e002      	b.n	8011088 <recv_custom_msg+0x34>
 8011082:	9b05      	ldr	r3, [sp, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	dd0f      	ble.n	80110a8 <recv_custom_msg+0x54>
 8011088:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801108c:	4623      	mov	r3, r4
 801108e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011092:	e9cd 5600 	strd	r5, r6, [sp]
 8011096:	4622      	mov	r2, r4
 8011098:	4648      	mov	r0, r9
 801109a:	f001 fcef 	bl	8012a7c <uxr_read_framed_msg>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d0ef      	beq.n	8011082 <recv_custom_msg+0x2e>
 80110a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80110a6:	b1b3      	cbz	r3, 80110d6 <recv_custom_msg+0x82>
 80110a8:	4b0f      	ldr	r3, [pc, #60]	@ (80110e8 <recv_custom_msg+0x94>)
 80110aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80110ae:	701a      	strb	r2, [r3, #0]
 80110b0:	2000      	movs	r0, #0
 80110b2:	b009      	add	sp, #36	@ 0x24
 80110b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b8:	f10d 021f 	add.w	r2, sp, #31
 80110bc:	9200      	str	r2, [sp, #0]
 80110be:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80110c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110c6:	4601      	mov	r1, r0
 80110c8:	47a8      	blx	r5
 80110ca:	2800      	cmp	r0, #0
 80110cc:	d0ec      	beq.n	80110a8 <recv_custom_msg+0x54>
 80110ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1e8      	bne.n	80110a8 <recv_custom_msg+0x54>
 80110d6:	f8cb 0000 	str.w	r0, [fp]
 80110da:	2001      	movs	r0, #1
 80110dc:	f8ca 4000 	str.w	r4, [sl]
 80110e0:	b009      	add	sp, #36	@ 0x24
 80110e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e6:	bf00      	nop
 80110e8:	2000c104 	.word	0x2000c104

080110ec <send_custom_msg>:
 80110ec:	b530      	push	{r4, r5, lr}
 80110ee:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80110f2:	b087      	sub	sp, #28
 80110f4:	4615      	mov	r5, r2
 80110f6:	b974      	cbnz	r4, 8011116 <send_custom_msg+0x2a>
 80110f8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80110fc:	f10d 0317 	add.w	r3, sp, #23
 8011100:	47a0      	blx	r4
 8011102:	b108      	cbz	r0, 8011108 <send_custom_msg+0x1c>
 8011104:	42a8      	cmp	r0, r5
 8011106:	d015      	beq.n	8011134 <send_custom_msg+0x48>
 8011108:	4b0c      	ldr	r3, [pc, #48]	@ (801113c <send_custom_msg+0x50>)
 801110a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801110e:	701a      	strb	r2, [r3, #0]
 8011110:	2000      	movs	r0, #0
 8011112:	b007      	add	sp, #28
 8011114:	bd30      	pop	{r4, r5, pc}
 8011116:	460b      	mov	r3, r1
 8011118:	2200      	movs	r2, #0
 801111a:	f10d 0117 	add.w	r1, sp, #23
 801111e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011122:	4602      	mov	r2, r0
 8011124:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011128:	9500      	str	r5, [sp, #0]
 801112a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801112e:	f001 faad 	bl	801268c <uxr_write_framed_msg>
 8011132:	e7e6      	b.n	8011102 <send_custom_msg+0x16>
 8011134:	2001      	movs	r0, #1
 8011136:	b007      	add	sp, #28
 8011138:	bd30      	pop	{r4, r5, pc}
 801113a:	bf00      	nop
 801113c:	2000c104 	.word	0x2000c104

08011140 <uxr_set_custom_transport_callbacks>:
 8011140:	b410      	push	{r4}
 8011142:	9c01      	ldr	r4, [sp, #4]
 8011144:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8011148:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801114c:	9b02      	ldr	r3, [sp, #8]
 801114e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8011152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011156:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801115a:	4770      	bx	lr

0801115c <uxr_init_custom_transport>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8011162:	b303      	cbz	r3, 80111a6 <uxr_init_custom_transport+0x4a>
 8011164:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8011168:	4604      	mov	r4, r0
 801116a:	b1e2      	cbz	r2, 80111a6 <uxr_init_custom_transport+0x4a>
 801116c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8011170:	b1ca      	cbz	r2, 80111a6 <uxr_init_custom_transport+0x4a>
 8011172:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8011176:	b1b2      	cbz	r2, 80111a6 <uxr_init_custom_transport+0x4a>
 8011178:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801117c:	4798      	blx	r3
 801117e:	4605      	mov	r5, r0
 8011180:	b188      	cbz	r0, 80111a6 <uxr_init_custom_transport+0x4a>
 8011182:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8011186:	b98b      	cbnz	r3, 80111ac <uxr_init_custom_transport+0x50>
 8011188:	490b      	ldr	r1, [pc, #44]	@ (80111b8 <uxr_init_custom_transport+0x5c>)
 801118a:	4b0c      	ldr	r3, [pc, #48]	@ (80111bc <uxr_init_custom_transport+0x60>)
 801118c:	4a0c      	ldr	r2, [pc, #48]	@ (80111c0 <uxr_init_custom_transport+0x64>)
 801118e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8011192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011196:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801119a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801119e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80111a2:	4628      	mov	r0, r5
 80111a4:	bd38      	pop	{r3, r4, r5, pc}
 80111a6:	2500      	movs	r5, #0
 80111a8:	4628      	mov	r0, r5
 80111aa:	bd38      	pop	{r3, r4, r5, pc}
 80111ac:	2100      	movs	r1, #0
 80111ae:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80111b2:	f001 fa65 	bl	8012680 <uxr_init_framing_io>
 80111b6:	e7e7      	b.n	8011188 <uxr_init_custom_transport+0x2c>
 80111b8:	080110ed 	.word	0x080110ed
 80111bc:	08011055 	.word	0x08011055
 80111c0:	08011049 	.word	0x08011049

080111c4 <uxr_close_custom_transport>:
 80111c4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80111c8:	4718      	bx	r3
 80111ca:	bf00      	nop

080111cc <uxr_object_id>:
 80111cc:	b082      	sub	sp, #8
 80111ce:	2300      	movs	r3, #0
 80111d0:	f88d 1006 	strb.w	r1, [sp, #6]
 80111d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80111d8:	f360 030f 	bfi	r3, r0, #0, #16
 80111dc:	f362 431f 	bfi	r3, r2, #16, #16
 80111e0:	4618      	mov	r0, r3
 80111e2:	b002      	add	sp, #8
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop

080111e8 <uxr_object_id_from_raw>:
 80111e8:	7843      	ldrb	r3, [r0, #1]
 80111ea:	7801      	ldrb	r1, [r0, #0]
 80111ec:	b082      	sub	sp, #8
 80111ee:	f003 020f 	and.w	r2, r3, #15
 80111f2:	f88d 2006 	strb.w	r2, [sp, #6]
 80111f6:	091b      	lsrs	r3, r3, #4
 80111f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80111fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011200:	2000      	movs	r0, #0
 8011202:	f363 000f 	bfi	r0, r3, #0, #16
 8011206:	f362 401f 	bfi	r0, r2, #16, #16
 801120a:	b002      	add	sp, #8
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop

08011210 <uxr_object_id_to_raw>:
 8011210:	4602      	mov	r2, r0
 8011212:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011216:	b082      	sub	sp, #8
 8011218:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801121c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011220:	f881 c000 	strb.w	ip, [r1]
 8011224:	7048      	strb	r0, [r1, #1]
 8011226:	b002      	add	sp, #8
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop

0801122c <uxr_buffer_request_data>:
 801122c:	b530      	push	{r4, r5, lr}
 801122e:	b095      	sub	sp, #84	@ 0x54
 8011230:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011234:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011236:	9303      	str	r3, [sp, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	2d00      	cmp	r5, #0
 801123c:	bf14      	ite	ne
 801123e:	2101      	movne	r1, #1
 8011240:	4611      	moveq	r1, r2
 8011242:	4604      	mov	r4, r0
 8011244:	f88d 301c 	strb.w	r3, [sp, #28]
 8011248:	f88d 201d 	strb.w	r2, [sp, #29]
 801124c:	f88d 201e 	strb.w	r2, [sp, #30]
 8011250:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8011254:	d021      	beq.n	801129a <uxr_buffer_request_data+0x6e>
 8011256:	682a      	ldr	r2, [r5, #0]
 8011258:	686b      	ldr	r3, [r5, #4]
 801125a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801125e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011262:	2210      	movs	r2, #16
 8011264:	2308      	movs	r3, #8
 8011266:	2100      	movs	r1, #0
 8011268:	e9cd 3100 	strd	r3, r1, [sp]
 801126c:	4620      	mov	r0, r4
 801126e:	9905      	ldr	r1, [sp, #20]
 8011270:	ab0c      	add	r3, sp, #48	@ 0x30
 8011272:	f001 f89f 	bl	80123b4 <uxr_prepare_stream_to_write_submessage>
 8011276:	b918      	cbnz	r0, 8011280 <uxr_buffer_request_data+0x54>
 8011278:	4604      	mov	r4, r0
 801127a:	4620      	mov	r0, r4
 801127c:	b015      	add	sp, #84	@ 0x54
 801127e:	bd30      	pop	{r4, r5, pc}
 8011280:	9904      	ldr	r1, [sp, #16]
 8011282:	aa06      	add	r2, sp, #24
 8011284:	4620      	mov	r0, r4
 8011286:	f001 f9cb 	bl	8012620 <uxr_init_base_object_request>
 801128a:	a906      	add	r1, sp, #24
 801128c:	4604      	mov	r4, r0
 801128e:	a80c      	add	r0, sp, #48	@ 0x30
 8011290:	f003 f8a0 	bl	80143d4 <uxr_serialize_READ_DATA_Payload>
 8011294:	4620      	mov	r0, r4
 8011296:	b015      	add	sp, #84	@ 0x54
 8011298:	bd30      	pop	{r4, r5, pc}
 801129a:	2208      	movs	r2, #8
 801129c:	e7e2      	b.n	8011264 <uxr_buffer_request_data+0x38>
 801129e:	bf00      	nop

080112a0 <uxr_buffer_cancel_data>:
 80112a0:	b510      	push	{r4, lr}
 80112a2:	b094      	sub	sp, #80	@ 0x50
 80112a4:	2300      	movs	r3, #0
 80112a6:	9202      	str	r2, [sp, #8]
 80112a8:	9205      	str	r2, [sp, #20]
 80112aa:	9301      	str	r3, [sp, #4]
 80112ac:	2201      	movs	r2, #1
 80112ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80112b2:	f88d 301e 	strb.w	r3, [sp, #30]
 80112b6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80112ba:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80112be:	2308      	movs	r3, #8
 80112c0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80112c4:	9300      	str	r3, [sp, #0]
 80112c6:	2210      	movs	r2, #16
 80112c8:	ab0c      	add	r3, sp, #48	@ 0x30
 80112ca:	4604      	mov	r4, r0
 80112cc:	9103      	str	r1, [sp, #12]
 80112ce:	f001 f871 	bl	80123b4 <uxr_prepare_stream_to_write_submessage>
 80112d2:	b918      	cbnz	r0, 80112dc <uxr_buffer_cancel_data+0x3c>
 80112d4:	4604      	mov	r4, r0
 80112d6:	4620      	mov	r0, r4
 80112d8:	b014      	add	sp, #80	@ 0x50
 80112da:	bd10      	pop	{r4, pc}
 80112dc:	9905      	ldr	r1, [sp, #20]
 80112de:	aa06      	add	r2, sp, #24
 80112e0:	4620      	mov	r0, r4
 80112e2:	f001 f99d 	bl	8012620 <uxr_init_base_object_request>
 80112e6:	a906      	add	r1, sp, #24
 80112e8:	4604      	mov	r4, r0
 80112ea:	a80c      	add	r0, sp, #48	@ 0x30
 80112ec:	f003 f872 	bl	80143d4 <uxr_serialize_READ_DATA_Payload>
 80112f0:	4620      	mov	r0, r4
 80112f2:	b014      	add	sp, #80	@ 0x50
 80112f4:	bd10      	pop	{r4, pc}
 80112f6:	bf00      	nop

080112f8 <read_submessage_format>:
 80112f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112fc:	b095      	sub	sp, #84	@ 0x54
 80112fe:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8011302:	b113      	cbz	r3, 801130a <read_submessage_format+0x12>
 8011304:	b015      	add	sp, #84	@ 0x54
 8011306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801130a:	460c      	mov	r4, r1
 801130c:	4615      	mov	r5, r2
 801130e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011312:	4607      	mov	r7, r0
 8011314:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011316:	9004      	str	r0, [sp, #16]
 8011318:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801131a:	9005      	str	r0, [sp, #20]
 801131c:	1a52      	subs	r2, r2, r1
 801131e:	a80c      	add	r0, sp, #48	@ 0x30
 8011320:	4699      	mov	r9, r3
 8011322:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011326:	f7fb ff9f 	bl	800d268 <ucdr_init_buffer>
 801132a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801132e:	a80c      	add	r0, sp, #48	@ 0x30
 8011330:	f7fb ff6e 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 8011334:	69e2      	ldr	r2, [r4, #28]
 8011336:	b19a      	cbz	r2, 8011360 <read_submessage_format+0x68>
 8011338:	f1b8 0f07 	cmp.w	r8, #7
 801133c:	f882 9014 	strb.w	r9, [r2, #20]
 8011340:	d040      	beq.n	80113c4 <read_submessage_format+0xcc>
 8011342:	f1b8 0f08 	cmp.w	r8, #8
 8011346:	d02e      	beq.n	80113a6 <read_submessage_format+0xae>
 8011348:	f1b8 0f06 	cmp.w	r8, #6
 801134c:	d011      	beq.n	8011372 <read_submessage_format+0x7a>
 801134e:	2301      	movs	r3, #1
 8011350:	7513      	strb	r3, [r2, #20]
 8011352:	4629      	mov	r1, r5
 8011354:	4620      	mov	r0, r4
 8011356:	f7fb ffd7 	bl	800d308 <ucdr_advance_buffer>
 801135a:	b015      	add	sp, #84	@ 0x54
 801135c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011360:	f1b8 0f07 	cmp.w	r8, #7
 8011364:	d02e      	beq.n	80113c4 <read_submessage_format+0xcc>
 8011366:	f1b8 0f08 	cmp.w	r8, #8
 801136a:	d01c      	beq.n	80113a6 <read_submessage_format+0xae>
 801136c:	f1b8 0f06 	cmp.w	r8, #6
 8011370:	d1ef      	bne.n	8011352 <read_submessage_format+0x5a>
 8011372:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011376:	f1b8 0f00 	cmp.w	r8, #0
 801137a:	d011      	beq.n	80113a0 <read_submessage_format+0xa8>
 801137c:	ab0c      	add	r3, sp, #48	@ 0x30
 801137e:	e9cd 3500 	strd	r3, r5, [sp]
 8011382:	2306      	movs	r3, #6
 8011384:	f88d 3016 	strb.w	r3, [sp, #22]
 8011388:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801138c:	9302      	str	r3, [sp, #8]
 801138e:	4632      	mov	r2, r6
 8011390:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011394:	4638      	mov	r0, r7
 8011396:	47c0      	blx	r8
 8011398:	2301      	movs	r3, #1
 801139a:	69e2      	ldr	r2, [r4, #28]
 801139c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80113a0:	2a00      	cmp	r2, #0
 80113a2:	d1d4      	bne.n	801134e <read_submessage_format+0x56>
 80113a4:	e7d5      	b.n	8011352 <read_submessage_format+0x5a>
 80113a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0f8      	beq.n	80113a0 <read_submessage_format+0xa8>
 80113ae:	a906      	add	r1, sp, #24
 80113b0:	a80c      	add	r0, sp, #48	@ 0x30
 80113b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80113b6:	f003 f8e1 	bl	801457c <uxr_deserialize_SampleIdentity>
 80113ba:	b9a0      	cbnz	r0, 80113e6 <read_submessage_format+0xee>
 80113bc:	69e2      	ldr	r2, [r4, #28]
 80113be:	2a00      	cmp	r2, #0
 80113c0:	d1c5      	bne.n	801134e <read_submessage_format+0x56>
 80113c2:	e7c6      	b.n	8011352 <read_submessage_format+0x5a>
 80113c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113c8:	b13b      	cbz	r3, 80113da <read_submessage_format+0xe2>
 80113ca:	a906      	add	r1, sp, #24
 80113cc:	a80c      	add	r0, sp, #48	@ 0x30
 80113ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80113d2:	f002 fd99 	bl	8013f08 <uxr_deserialize_BaseObjectRequest>
 80113d6:	bb60      	cbnz	r0, 8011432 <read_submessage_format+0x13a>
 80113d8:	69e2      	ldr	r2, [r4, #28]
 80113da:	68a3      	ldr	r3, [r4, #8]
 80113dc:	442b      	add	r3, r5
 80113de:	60a3      	str	r3, [r4, #8]
 80113e0:	2a00      	cmp	r2, #0
 80113e2:	d1b4      	bne.n	801134e <read_submessage_format+0x56>
 80113e4:	e7b5      	b.n	8011352 <read_submessage_format+0x5a>
 80113e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80113ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80113ec:	1a52      	subs	r2, r2, r1
 80113ee:	eba8 0803 	sub.w	r8, r8, r3
 80113f2:	a80c      	add	r0, sp, #48	@ 0x30
 80113f4:	f7fb ff38 	bl	800d268 <ucdr_init_buffer>
 80113f8:	44a8      	add	r8, r5
 80113fa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80113fe:	a80c      	add	r0, sp, #48	@ 0x30
 8011400:	f7fb ff06 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 8011404:	fa1f f888 	uxth.w	r8, r8
 8011408:	ab0c      	add	r3, sp, #48	@ 0x30
 801140a:	9300      	str	r3, [sp, #0]
 801140c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011410:	2108      	movs	r1, #8
 8011412:	f88d 1016 	strb.w	r1, [sp, #22]
 8011416:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801141a:	9102      	str	r1, [sp, #8]
 801141c:	ab06      	add	r3, sp, #24
 801141e:	4632      	mov	r2, r6
 8011420:	9905      	ldr	r1, [sp, #20]
 8011422:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011426:	4638      	mov	r0, r7
 8011428:	47b0      	blx	r6
 801142a:	2301      	movs	r3, #1
 801142c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011430:	e7c4      	b.n	80113bc <read_submessage_format+0xc4>
 8011432:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011436:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011438:	1a52      	subs	r2, r2, r1
 801143a:	a80c      	add	r0, sp, #48	@ 0x30
 801143c:	eba8 0803 	sub.w	r8, r8, r3
 8011440:	f7fb ff12 	bl	800d268 <ucdr_init_buffer>
 8011444:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011448:	a80c      	add	r0, sp, #48	@ 0x30
 801144a:	f7fb fee1 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 801144e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011456:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801145a:	44a8      	add	r8, r5
 801145c:	fa1f f888 	uxth.w	r8, r8
 8011460:	f8cd 8004 	str.w	r8, [sp, #4]
 8011464:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011468:	2107      	movs	r1, #7
 801146a:	f88d 1016 	strb.w	r1, [sp, #22]
 801146e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8011472:	9102      	str	r1, [sp, #8]
 8011474:	4632      	mov	r2, r6
 8011476:	b29b      	uxth	r3, r3
 8011478:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801147c:	9905      	ldr	r1, [sp, #20]
 801147e:	4638      	mov	r0, r7
 8011480:	47b0      	blx	r6
 8011482:	2301      	movs	r3, #1
 8011484:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011488:	e7a6      	b.n	80113d8 <read_submessage_format+0xe0>
 801148a:	bf00      	nop

0801148c <on_get_fragmentation_info>:
 801148c:	b500      	push	{lr}
 801148e:	b08b      	sub	sp, #44	@ 0x2c
 8011490:	4601      	mov	r1, r0
 8011492:	2204      	movs	r2, #4
 8011494:	a802      	add	r0, sp, #8
 8011496:	f7fb fee7 	bl	800d268 <ucdr_init_buffer>
 801149a:	f10d 0305 	add.w	r3, sp, #5
 801149e:	f10d 0206 	add.w	r2, sp, #6
 80114a2:	a901      	add	r1, sp, #4
 80114a4:	a802      	add	r0, sp, #8
 80114a6:	f001 fecf 	bl	8013248 <uxr_read_submessage_header>
 80114aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80114ae:	2b0d      	cmp	r3, #13
 80114b0:	d003      	beq.n	80114ba <on_get_fragmentation_info+0x2e>
 80114b2:	2000      	movs	r0, #0
 80114b4:	b00b      	add	sp, #44	@ 0x2c
 80114b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80114ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80114be:	f013 0f02 	tst.w	r3, #2
 80114c2:	bf14      	ite	ne
 80114c4:	2002      	movne	r0, #2
 80114c6:	2001      	moveq	r0, #1
 80114c8:	b00b      	add	sp, #44	@ 0x2c
 80114ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80114ce:	bf00      	nop

080114d0 <read_submessage_get_info>:
 80114d0:	b570      	push	{r4, r5, r6, lr}
 80114d2:	2500      	movs	r5, #0
 80114d4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80114d8:	4604      	mov	r4, r0
 80114da:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80114de:	460e      	mov	r6, r1
 80114e0:	a810      	add	r0, sp, #64	@ 0x40
 80114e2:	4629      	mov	r1, r5
 80114e4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80114e8:	f009 f860 	bl	801a5ac <memset>
 80114ec:	a903      	add	r1, sp, #12
 80114ee:	4630      	mov	r0, r6
 80114f0:	f002 feb2 	bl	8014258 <uxr_deserialize_GET_INFO_Payload>
 80114f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80114f8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80114fc:	4620      	mov	r0, r4
 80114fe:	f001 f887 	bl	8012610 <uxr_session_header_offset>
 8011502:	462b      	mov	r3, r5
 8011504:	9000      	str	r0, [sp, #0]
 8011506:	220c      	movs	r2, #12
 8011508:	a905      	add	r1, sp, #20
 801150a:	a808      	add	r0, sp, #32
 801150c:	f7fb fe9a 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8011510:	a910      	add	r1, sp, #64	@ 0x40
 8011512:	a808      	add	r0, sp, #32
 8011514:	f002 ff12 	bl	801433c <uxr_serialize_INFO_Payload>
 8011518:	9b08      	ldr	r3, [sp, #32]
 801151a:	462a      	mov	r2, r5
 801151c:	4629      	mov	r1, r5
 801151e:	4620      	mov	r0, r4
 8011520:	f001 f820 	bl	8012564 <uxr_stamp_session_header>
 8011524:	a808      	add	r0, sp, #32
 8011526:	f7fb fecb 	bl	800d2c0 <ucdr_buffer_length>
 801152a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801152c:	4602      	mov	r2, r0
 801152e:	a905      	add	r1, sp, #20
 8011530:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011534:	47a0      	blx	r4
 8011536:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801153a:	bd70      	pop	{r4, r5, r6, pc}

0801153c <write_submessage_acknack.isra.0>:
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	b092      	sub	sp, #72	@ 0x48
 8011540:	4605      	mov	r5, r0
 8011542:	460e      	mov	r6, r1
 8011544:	4614      	mov	r4, r2
 8011546:	f001 f863 	bl	8012610 <uxr_session_header_offset>
 801154a:	a905      	add	r1, sp, #20
 801154c:	9000      	str	r0, [sp, #0]
 801154e:	2300      	movs	r3, #0
 8011550:	a80a      	add	r0, sp, #40	@ 0x28
 8011552:	2211      	movs	r2, #17
 8011554:	f7fb fe76 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8011558:	2218      	movs	r2, #24
 801155a:	fb02 5404 	mla	r4, r2, r4, r5
 801155e:	2300      	movs	r3, #0
 8011560:	2205      	movs	r2, #5
 8011562:	3450      	adds	r4, #80	@ 0x50
 8011564:	210a      	movs	r1, #10
 8011566:	a80a      	add	r0, sp, #40	@ 0x28
 8011568:	f001 fe54 	bl	8013214 <uxr_buffer_submessage_header>
 801156c:	a903      	add	r1, sp, #12
 801156e:	4620      	mov	r0, r4
 8011570:	f007 fb5e 	bl	8018c30 <uxr_compute_acknack>
 8011574:	ba40      	rev16	r0, r0
 8011576:	f8ad 000e 	strh.w	r0, [sp, #14]
 801157a:	a903      	add	r1, sp, #12
 801157c:	a80a      	add	r0, sp, #40	@ 0x28
 801157e:	f88d 6010 	strb.w	r6, [sp, #16]
 8011582:	f002 ff4b 	bl	801441c <uxr_serialize_ACKNACK_Payload>
 8011586:	2200      	movs	r2, #0
 8011588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801158a:	4611      	mov	r1, r2
 801158c:	4628      	mov	r0, r5
 801158e:	f000 ffe9 	bl	8012564 <uxr_stamp_session_header>
 8011592:	a80a      	add	r0, sp, #40	@ 0x28
 8011594:	f7fb fe94 	bl	800d2c0 <ucdr_buffer_length>
 8011598:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801159a:	4602      	mov	r2, r0
 801159c:	a905      	add	r1, sp, #20
 801159e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80115a2:	47a0      	blx	r4
 80115a4:	b012      	add	sp, #72	@ 0x48
 80115a6:	bd70      	pop	{r4, r5, r6, pc}

080115a8 <uxr_init_session>:
 80115a8:	b510      	push	{r4, lr}
 80115aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80115e0 <uxr_init_session+0x38>
 80115ae:	2300      	movs	r3, #0
 80115b0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80115b4:	4604      	mov	r4, r0
 80115b6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80115ba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80115be:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80115c2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80115c6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80115ca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80115ce:	2181      	movs	r1, #129	@ 0x81
 80115d0:	f000 ff34 	bl	801243c <uxr_init_session_info>
 80115d4:	f104 0008 	add.w	r0, r4, #8
 80115d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115dc:	f001 bd36 	b.w	801304c <uxr_init_stream_storage>
	...

080115e8 <uxr_set_status_callback>:
 80115e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop

080115f0 <uxr_set_topic_callback>:
 80115f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop

080115f8 <uxr_set_request_callback>:
 80115f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop

08011600 <uxr_set_reply_callback>:
 8011600:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop

08011608 <uxr_create_output_best_effort_stream>:
 8011608:	b510      	push	{r4, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	e9cd 2100 	strd	r2, r1, [sp]
 8011610:	4604      	mov	r4, r0
 8011612:	f000 fffd 	bl	8012610 <uxr_session_header_offset>
 8011616:	e9dd 2100 	ldrd	r2, r1, [sp]
 801161a:	4603      	mov	r3, r0
 801161c:	f104 0008 	add.w	r0, r4, #8
 8011620:	b004      	add	sp, #16
 8011622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011626:	f001 bd5b 	b.w	80130e0 <uxr_add_output_best_effort_buffer>
 801162a:	bf00      	nop

0801162c <uxr_create_output_reliable_stream>:
 801162c:	b510      	push	{r4, lr}
 801162e:	b088      	sub	sp, #32
 8011630:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011634:	4604      	mov	r4, r0
 8011636:	9303      	str	r3, [sp, #12]
 8011638:	f000 ffea 	bl	8012610 <uxr_session_header_offset>
 801163c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011640:	9000      	str	r0, [sp, #0]
 8011642:	9905      	ldr	r1, [sp, #20]
 8011644:	f104 0008 	add.w	r0, r4, #8
 8011648:	f001 fd5e 	bl	8013108 <uxr_add_output_reliable_buffer>
 801164c:	2200      	movs	r2, #0
 801164e:	b2c3      	uxtb	r3, r0
 8011650:	f363 0207 	bfi	r2, r3, #0, #8
 8011654:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011658:	f363 220f 	bfi	r2, r3, #8, #8
 801165c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011660:	f363 4217 	bfi	r2, r3, #16, #8
 8011664:	0e03      	lsrs	r3, r0, #24
 8011666:	f363 621f 	bfi	r2, r3, #24, #8
 801166a:	4610      	mov	r0, r2
 801166c:	b008      	add	sp, #32
 801166e:	bd10      	pop	{r4, pc}

08011670 <uxr_create_input_best_effort_stream>:
 8011670:	b082      	sub	sp, #8
 8011672:	3008      	adds	r0, #8
 8011674:	b002      	add	sp, #8
 8011676:	f001 bd61 	b.w	801313c <uxr_add_input_best_effort_buffer>
 801167a:	bf00      	nop

0801167c <uxr_create_input_reliable_stream>:
 801167c:	b510      	push	{r4, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	4c0b      	ldr	r4, [pc, #44]	@ (80116b0 <uxr_create_input_reliable_stream+0x34>)
 8011682:	9400      	str	r4, [sp, #0]
 8011684:	3008      	adds	r0, #8
 8011686:	f001 fd6f 	bl	8013168 <uxr_add_input_reliable_buffer>
 801168a:	2200      	movs	r2, #0
 801168c:	b2c3      	uxtb	r3, r0
 801168e:	f363 0207 	bfi	r2, r3, #0, #8
 8011692:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011696:	f363 220f 	bfi	r2, r3, #8, #8
 801169a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801169e:	f363 4217 	bfi	r2, r3, #16, #8
 80116a2:	0e03      	lsrs	r3, r0, #24
 80116a4:	f363 621f 	bfi	r2, r3, #24, #8
 80116a8:	4610      	mov	r0, r2
 80116aa:	b004      	add	sp, #16
 80116ac:	bd10      	pop	{r4, pc}
 80116ae:	bf00      	nop
 80116b0:	0801148d 	.word	0x0801148d

080116b4 <uxr_epoch_millis>:
 80116b4:	b510      	push	{r4, lr}
 80116b6:	4604      	mov	r4, r0
 80116b8:	f001 fe0c 	bl	80132d4 <uxr_nanos>
 80116bc:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80116c0:	1ac0      	subs	r0, r0, r3
 80116c2:	4a04      	ldr	r2, [pc, #16]	@ (80116d4 <uxr_epoch_millis+0x20>)
 80116c4:	f04f 0300 	mov.w	r3, #0
 80116c8:	eb61 0104 	sbc.w	r1, r1, r4
 80116cc:	f7ef facc 	bl	8000c68 <__aeabi_ldivmod>
 80116d0:	bd10      	pop	{r4, pc}
 80116d2:	bf00      	nop
 80116d4:	000f4240 	.word	0x000f4240

080116d8 <uxr_epoch_nanos>:
 80116d8:	b510      	push	{r4, lr}
 80116da:	4604      	mov	r4, r0
 80116dc:	f001 fdfa 	bl	80132d4 <uxr_nanos>
 80116e0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80116e4:	1ac0      	subs	r0, r0, r3
 80116e6:	eb61 0102 	sbc.w	r1, r1, r2
 80116ea:	bd10      	pop	{r4, pc}

080116ec <uxr_flash_output_streams>:
 80116ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f0:	7e03      	ldrb	r3, [r0, #24]
 80116f2:	b084      	sub	sp, #16
 80116f4:	4604      	mov	r4, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d035      	beq.n	8011766 <uxr_flash_output_streams+0x7a>
 80116fa:	f04f 0900 	mov.w	r9, #0
 80116fe:	4648      	mov	r0, r9
 8011700:	f10d 0802 	add.w	r8, sp, #2
 8011704:	af03      	add	r7, sp, #12
 8011706:	ae02      	add	r6, sp, #8
 8011708:	e006      	b.n	8011718 <uxr_flash_output_streams+0x2c>
 801170a:	7e23      	ldrb	r3, [r4, #24]
 801170c:	f109 0901 	add.w	r9, r9, #1
 8011710:	fa5f f089 	uxtb.w	r0, r9
 8011714:	4283      	cmp	r3, r0
 8011716:	d926      	bls.n	8011766 <uxr_flash_output_streams+0x7a>
 8011718:	2201      	movs	r2, #1
 801171a:	4611      	mov	r1, r2
 801171c:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8011720:	f001 fc40 	bl	8012fa4 <uxr_stream_id>
 8011724:	3508      	adds	r5, #8
 8011726:	4684      	mov	ip, r0
 8011728:	4643      	mov	r3, r8
 801172a:	463a      	mov	r2, r7
 801172c:	4631      	mov	r1, r6
 801172e:	4628      	mov	r0, r5
 8011730:	f8cd c004 	str.w	ip, [sp, #4]
 8011734:	f007 fb02 	bl	8018d3c <uxr_prepare_best_effort_buffer_to_send>
 8011738:	2800      	cmp	r0, #0
 801173a:	d0e6      	beq.n	801170a <uxr_flash_output_streams+0x1e>
 801173c:	9b02      	ldr	r3, [sp, #8]
 801173e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011742:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011746:	4620      	mov	r0, r4
 8011748:	f000 ff0c 	bl	8012564 <uxr_stamp_session_header>
 801174c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801174e:	9a03      	ldr	r2, [sp, #12]
 8011750:	685d      	ldr	r5, [r3, #4]
 8011752:	6818      	ldr	r0, [r3, #0]
 8011754:	9902      	ldr	r1, [sp, #8]
 8011756:	47a8      	blx	r5
 8011758:	f109 0901 	add.w	r9, r9, #1
 801175c:	7e23      	ldrb	r3, [r4, #24]
 801175e:	fa5f f089 	uxtb.w	r0, r9
 8011762:	4283      	cmp	r3, r0
 8011764:	d8d8      	bhi.n	8011718 <uxr_flash_output_streams+0x2c>
 8011766:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801176a:	b38b      	cbz	r3, 80117d0 <uxr_flash_output_streams+0xe4>
 801176c:	f04f 0900 	mov.w	r9, #0
 8011770:	f10d 0802 	add.w	r8, sp, #2
 8011774:	af03      	add	r7, sp, #12
 8011776:	ae02      	add	r6, sp, #8
 8011778:	4648      	mov	r0, r9
 801177a:	2201      	movs	r2, #1
 801177c:	2102      	movs	r1, #2
 801177e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011782:	f001 fc0f 	bl	8012fa4 <uxr_stream_id>
 8011786:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801178a:	3520      	adds	r5, #32
 801178c:	9001      	str	r0, [sp, #4]
 801178e:	e00d      	b.n	80117ac <uxr_flash_output_streams+0xc0>
 8011790:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011794:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011798:	9b02      	ldr	r3, [sp, #8]
 801179a:	f000 fee3 	bl	8012564 <uxr_stamp_session_header>
 801179e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80117a0:	9a03      	ldr	r2, [sp, #12]
 80117a2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80117a6:	9902      	ldr	r1, [sp, #8]
 80117a8:	6818      	ldr	r0, [r3, #0]
 80117aa:	47d0      	blx	sl
 80117ac:	4643      	mov	r3, r8
 80117ae:	463a      	mov	r2, r7
 80117b0:	4631      	mov	r1, r6
 80117b2:	4628      	mov	r0, r5
 80117b4:	f007 fce0 	bl	8019178 <uxr_prepare_next_reliable_buffer_to_send>
 80117b8:	4603      	mov	r3, r0
 80117ba:	4620      	mov	r0, r4
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d1e7      	bne.n	8011790 <uxr_flash_output_streams+0xa4>
 80117c0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80117c4:	f109 0901 	add.w	r9, r9, #1
 80117c8:	fa5f f089 	uxtb.w	r0, r9
 80117cc:	4283      	cmp	r3, r0
 80117ce:	d8d4      	bhi.n	801177a <uxr_flash_output_streams+0x8e>
 80117d0:	b004      	add	sp, #16
 80117d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117d6:	bf00      	nop

080117d8 <read_submessage_info>:
 80117d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117dc:	460d      	mov	r5, r1
 80117de:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80117e2:	4669      	mov	r1, sp
 80117e4:	4607      	mov	r7, r0
 80117e6:	4628      	mov	r0, r5
 80117e8:	f002 fc44 	bl	8014074 <uxr_deserialize_BaseObjectReply>
 80117ec:	a902      	add	r1, sp, #8
 80117ee:	4604      	mov	r4, r0
 80117f0:	4628      	mov	r0, r5
 80117f2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80117f6:	f7fa fa3d 	bl	800bc74 <ucdr_deserialize_bool>
 80117fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80117fe:	4004      	ands	r4, r0
 8011800:	b2e4      	uxtb	r4, r4
 8011802:	b95b      	cbnz	r3, 801181c <read_submessage_info+0x44>
 8011804:	a987      	add	r1, sp, #540	@ 0x21c
 8011806:	4628      	mov	r0, r5
 8011808:	f7fa fa34 	bl	800bc74 <ucdr_deserialize_bool>
 801180c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011810:	4606      	mov	r6, r0
 8011812:	b94b      	cbnz	r3, 8011828 <read_submessage_info+0x50>
 8011814:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181c:	a903      	add	r1, sp, #12
 801181e:	4628      	mov	r0, r5
 8011820:	f002 fad0 	bl	8013dc4 <uxr_deserialize_ObjectVariant>
 8011824:	4004      	ands	r4, r0
 8011826:	e7ed      	b.n	8011804 <read_submessage_info+0x2c>
 8011828:	a988      	add	r1, sp, #544	@ 0x220
 801182a:	4628      	mov	r0, r5
 801182c:	f7fa fa50 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8011830:	4234      	tst	r4, r6
 8011832:	d0ef      	beq.n	8011814 <read_submessage_info+0x3c>
 8011834:	2800      	cmp	r0, #0
 8011836:	d0ed      	beq.n	8011814 <read_submessage_info+0x3c>
 8011838:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801183c:	2b0d      	cmp	r3, #13
 801183e:	d1e9      	bne.n	8011814 <read_submessage_info+0x3c>
 8011840:	a98a      	add	r1, sp, #552	@ 0x228
 8011842:	4628      	mov	r0, r5
 8011844:	f7fa ffea 	bl	800c81c <ucdr_deserialize_int16_t>
 8011848:	b140      	cbz	r0, 801185c <read_submessage_info+0x84>
 801184a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801184e:	2b00      	cmp	r3, #0
 8011850:	dd07      	ble.n	8011862 <read_submessage_info+0x8a>
 8011852:	f1b8 0f00 	cmp.w	r8, #0
 8011856:	bf14      	ite	ne
 8011858:	2001      	movne	r0, #1
 801185a:	2002      	moveq	r0, #2
 801185c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011860:	e7d8      	b.n	8011814 <read_submessage_info+0x3c>
 8011862:	2000      	movs	r0, #0
 8011864:	e7fa      	b.n	801185c <read_submessage_info+0x84>
 8011866:	bf00      	nop

08011868 <read_submessage_list>:
 8011868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801186c:	b097      	sub	sp, #92	@ 0x5c
 801186e:	4ec1      	ldr	r6, [pc, #772]	@ (8011b74 <read_submessage_list+0x30c>)
 8011870:	9209      	str	r2, [sp, #36]	@ 0x24
 8011872:	4604      	mov	r4, r0
 8011874:	460d      	mov	r5, r1
 8011876:	f04f 0801 	mov.w	r8, #1
 801187a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801187e:	aa0c      	add	r2, sp, #48	@ 0x30
 8011880:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011884:	4628      	mov	r0, r5
 8011886:	f001 fcdf 	bl	8013248 <uxr_read_submessage_header>
 801188a:	2800      	cmp	r0, #0
 801188c:	f000 813e 	beq.w	8011b0c <read_submessage_list+0x2a4>
 8011890:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011894:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011898:	3b02      	subs	r3, #2
 801189a:	2b0d      	cmp	r3, #13
 801189c:	d8ed      	bhi.n	801187a <read_submessage_list+0x12>
 801189e:	a101      	add	r1, pc, #4	@ (adr r1, 80118a4 <read_submessage_list+0x3c>)
 80118a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80118a4:	08011b03 	.word	0x08011b03
 80118a8:	0801187b 	.word	0x0801187b
 80118ac:	08011af3 	.word	0x08011af3
 80118b0:	08011a91 	.word	0x08011a91
 80118b4:	08011a87 	.word	0x08011a87
 80118b8:	0801187b 	.word	0x0801187b
 80118bc:	0801187b 	.word	0x0801187b
 80118c0:	080119e7 	.word	0x080119e7
 80118c4:	08011977 	.word	0x08011977
 80118c8:	08011937 	.word	0x08011937
 80118cc:	0801187b 	.word	0x0801187b
 80118d0:	0801187b 	.word	0x0801187b
 80118d4:	0801187b 	.word	0x0801187b
 80118d8:	080118dd 	.word	0x080118dd
 80118dc:	a910      	add	r1, sp, #64	@ 0x40
 80118de:	4628      	mov	r0, r5
 80118e0:	f002 fdfa 	bl	80144d8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80118e4:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80118e8:	f1b9 0f00 	cmp.w	r9, #0
 80118ec:	f000 8116 	beq.w	8011b1c <read_submessage_list+0x2b4>
 80118f0:	f001 fcf0 	bl	80132d4 <uxr_nanos>
 80118f4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80118fc:	2100      	movs	r1, #0
 80118fe:	468c      	mov	ip, r1
 8011900:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011904:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011908:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801190a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801190c:	468c      	mov	ip, r1
 801190e:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011912:	46e2      	mov	sl, ip
 8011914:	46bc      	mov	ip, r7
 8011916:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 801191a:	fbc0 7106 	smlal	r7, r1, r0, r6
 801191e:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8011922:	e9cd 7100 	strd	r7, r1, [sp]
 8011926:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801192a:	9106      	str	r1, [sp, #24]
 801192c:	4620      	mov	r0, r4
 801192e:	47c8      	blx	r9
 8011930:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011934:	e7a1      	b.n	801187a <read_submessage_list+0x12>
 8011936:	a910      	add	r1, sp, #64	@ 0x40
 8011938:	4628      	mov	r0, r5
 801193a:	f002 fdad 	bl	8014498 <uxr_deserialize_HEARTBEAT_Payload>
 801193e:	2100      	movs	r1, #0
 8011940:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011944:	f001 fb58 	bl	8012ff8 <uxr_stream_id_from_raw>
 8011948:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801194c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801194e:	4639      	mov	r1, r7
 8011950:	f104 0008 	add.w	r0, r4, #8
 8011954:	f001 fc3e 	bl	80131d4 <uxr_get_input_reliable_stream>
 8011958:	2800      	cmp	r0, #0
 801195a:	d08e      	beq.n	801187a <read_submessage_list+0x12>
 801195c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011960:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011964:	f007 f958 	bl	8018c18 <uxr_process_heartbeat>
 8011968:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801196c:	463a      	mov	r2, r7
 801196e:	4620      	mov	r0, r4
 8011970:	f7ff fde4 	bl	801153c <write_submessage_acknack.isra.0>
 8011974:	e781      	b.n	801187a <read_submessage_list+0x12>
 8011976:	a910      	add	r1, sp, #64	@ 0x40
 8011978:	4628      	mov	r0, r5
 801197a:	f002 fd65 	bl	8014448 <uxr_deserialize_ACKNACK_Payload>
 801197e:	2100      	movs	r1, #0
 8011980:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011984:	f001 fb38 	bl	8012ff8 <uxr_stream_id_from_raw>
 8011988:	900d      	str	r0, [sp, #52]	@ 0x34
 801198a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801198e:	f104 0008 	add.w	r0, r4, #8
 8011992:	f001 fc0b 	bl	80131ac <uxr_get_output_reliable_stream>
 8011996:	4607      	mov	r7, r0
 8011998:	2800      	cmp	r0, #0
 801199a:	f43f af6e 	beq.w	801187a <read_submessage_list+0x12>
 801199e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80119a2:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80119a6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80119aa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80119ae:	b289      	uxth	r1, r1
 80119b0:	f007 fc8c 	bl	80192cc <uxr_process_acknack>
 80119b4:	4638      	mov	r0, r7
 80119b6:	f007 fc49 	bl	801924c <uxr_begin_output_nack_buffer_it>
 80119ba:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80119be:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80119c2:	e006      	b.n	80119d2 <read_submessage_list+0x16a>
 80119c4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80119c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80119c8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80119cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80119ce:	6818      	ldr	r0, [r3, #0]
 80119d0:	47c8      	blx	r9
 80119d2:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80119d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80119d8:	4651      	mov	r1, sl
 80119da:	4638      	mov	r0, r7
 80119dc:	f007 fc38 	bl	8019250 <uxr_next_reliable_nack_buffer_to_send>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d1ef      	bne.n	80119c4 <read_submessage_list+0x15c>
 80119e4:	e749      	b.n	801187a <read_submessage_list+0x12>
 80119e6:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80119ea:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80119ee:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80119f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80119f6:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80119fa:	4651      	mov	r1, sl
 80119fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011a00:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011a04:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011a08:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011a12:	f002 fa79 	bl	8013f08 <uxr_deserialize_BaseObjectRequest>
 8011a16:	4650      	mov	r0, sl
 8011a18:	a90f      	add	r1, sp, #60	@ 0x3c
 8011a1a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011a1e:	f000 fe1d 	bl	801265c <uxr_parse_base_object_request>
 8011a22:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011a26:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011a28:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011a2c:	9110      	str	r1, [sp, #64]	@ 0x40
 8011a2e:	3f04      	subs	r7, #4
 8011a30:	f009 090e 	and.w	r9, r9, #14
 8011a34:	b2bf      	uxth	r7, r7
 8011a36:	f1bb 0f00 	cmp.w	fp, #0
 8011a3a:	d006      	beq.n	8011a4a <read_submessage_list+0x1e2>
 8011a3c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	4652      	mov	r2, sl
 8011a44:	2300      	movs	r3, #0
 8011a46:	4620      	mov	r0, r4
 8011a48:	47d8      	blx	fp
 8011a4a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011a4c:	b16a      	cbz	r2, 8011a6a <read_submessage_list+0x202>
 8011a4e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011a50:	2100      	movs	r1, #0
 8011a52:	3802      	subs	r0, #2
 8011a54:	e002      	b.n	8011a5c <read_submessage_list+0x1f4>
 8011a56:	3101      	adds	r1, #1
 8011a58:	4291      	cmp	r1, r2
 8011a5a:	d006      	beq.n	8011a6a <read_submessage_list+0x202>
 8011a5c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011a60:	4553      	cmp	r3, sl
 8011a62:	d1f8      	bne.n	8011a56 <read_submessage_list+0x1ee>
 8011a64:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011a66:	2200      	movs	r2, #0
 8011a68:	545a      	strb	r2, [r3, r1]
 8011a6a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011a6e:	9102      	str	r1, [sp, #8]
 8011a70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011a72:	9101      	str	r1, [sp, #4]
 8011a74:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011a76:	9100      	str	r1, [sp, #0]
 8011a78:	464b      	mov	r3, r9
 8011a7a:	463a      	mov	r2, r7
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f7ff fc3a 	bl	80112f8 <read_submessage_format>
 8011a84:	e6f9      	b.n	801187a <read_submessage_list+0x12>
 8011a86:	4629      	mov	r1, r5
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f7ff fea5 	bl	80117d8 <read_submessage_info>
 8011a8e:	e6f4      	b.n	801187a <read_submessage_list+0x12>
 8011a90:	2a00      	cmp	r2, #0
 8011a92:	d03e      	beq.n	8011b12 <read_submessage_list+0x2aa>
 8011a94:	a910      	add	r1, sp, #64	@ 0x40
 8011a96:	4628      	mov	r0, r5
 8011a98:	f002 fc32 	bl	8014300 <uxr_deserialize_STATUS_Payload>
 8011a9c:	a90e      	add	r1, sp, #56	@ 0x38
 8011a9e:	aa0d      	add	r2, sp, #52	@ 0x34
 8011aa0:	a810      	add	r0, sp, #64	@ 0x40
 8011aa2:	f000 fddb 	bl	801265c <uxr_parse_base_object_request>
 8011aa6:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011aaa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011aac:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011ab0:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011ab4:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011ab6:	f1ba 0f00 	cmp.w	sl, #0
 8011aba:	d006      	beq.n	8011aca <read_submessage_list+0x262>
 8011abc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011ac0:	9300      	str	r3, [sp, #0]
 8011ac2:	463a      	mov	r2, r7
 8011ac4:	464b      	mov	r3, r9
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	47d0      	blx	sl
 8011aca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011acc:	2a00      	cmp	r2, #0
 8011ace:	f43f aed4 	beq.w	801187a <read_submessage_list+0x12>
 8011ad2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	3802      	subs	r0, #2
 8011ad8:	e003      	b.n	8011ae2 <read_submessage_list+0x27a>
 8011ada:	3101      	adds	r1, #1
 8011adc:	4291      	cmp	r1, r2
 8011ade:	f43f aecc 	beq.w	801187a <read_submessage_list+0x12>
 8011ae2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011ae6:	42bb      	cmp	r3, r7
 8011ae8:	d1f7      	bne.n	8011ada <read_submessage_list+0x272>
 8011aea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011aec:	f803 9001 	strb.w	r9, [r3, r1]
 8011af0:	e6c3      	b.n	801187a <read_submessage_list+0x12>
 8011af2:	2a00      	cmp	r2, #0
 8011af4:	f47f aec1 	bne.w	801187a <read_submessage_list+0x12>
 8011af8:	4629      	mov	r1, r5
 8011afa:	4620      	mov	r0, r4
 8011afc:	f000 fcf4 	bl	80124e8 <uxr_read_create_session_status>
 8011b00:	e6bb      	b.n	801187a <read_submessage_list+0x12>
 8011b02:	4629      	mov	r1, r5
 8011b04:	4620      	mov	r0, r4
 8011b06:	f7ff fce3 	bl	80114d0 <read_submessage_get_info>
 8011b0a:	e6b6      	b.n	801187a <read_submessage_list+0x12>
 8011b0c:	b017      	add	sp, #92	@ 0x5c
 8011b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b12:	4629      	mov	r1, r5
 8011b14:	4620      	mov	r0, r4
 8011b16:	f000 fcf3 	bl	8012500 <uxr_read_delete_session_status>
 8011b1a:	e6ae      	b.n	801187a <read_submessage_list+0x12>
 8011b1c:	f001 fbda 	bl	80132d4 <uxr_nanos>
 8011b20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011b22:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011b24:	464f      	mov	r7, r9
 8011b26:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011b2a:	1812      	adds	r2, r2, r0
 8011b2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011b2e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011b30:	eb47 0101 	adc.w	r1, r7, r1
 8011b34:	464f      	mov	r7, r9
 8011b36:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011b3a:	463b      	mov	r3, r7
 8011b3c:	4684      	mov	ip, r0
 8011b3e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8011b42:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011b46:	eb1c 0c00 	adds.w	ip, ip, r0
 8011b4a:	464f      	mov	r7, r9
 8011b4c:	eb43 0307 	adc.w	r3, r3, r7
 8011b50:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011b54:	eb61 0303 	sbc.w	r3, r1, r3
 8011b58:	0fda      	lsrs	r2, r3, #31
 8011b5a:	eb12 020c 	adds.w	r2, r2, ip
 8011b5e:	f143 0300 	adc.w	r3, r3, #0
 8011b62:	0852      	lsrs	r2, r2, #1
 8011b64:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011b68:	105b      	asrs	r3, r3, #1
 8011b6a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011b6e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011b72:	e6dd      	b.n	8011930 <read_submessage_list+0xc8>
 8011b74:	3b9aca00 	.word	0x3b9aca00

08011b78 <listen_message_reliably>:
 8011b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b7c:	1e0b      	subs	r3, r1, #0
 8011b7e:	b09d      	sub	sp, #116	@ 0x74
 8011b80:	bfb8      	it	lt
 8011b82:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011b86:	4680      	mov	r8, r0
 8011b88:	9305      	str	r3, [sp, #20]
 8011b8a:	f001 fb89 	bl	80132a0 <uxr_millis>
 8011b8e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011b92:	4681      	mov	r9, r0
 8011b94:	2a00      	cmp	r2, #0
 8011b96:	f000 80a1 	beq.w	8011cdc <listen_message_reliably+0x164>
 8011b9a:	2600      	movs	r6, #0
 8011b9c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011ba0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011ba4:	9303      	str	r3, [sp, #12]
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	460f      	mov	r7, r1
 8011baa:	e00f      	b.n	8011bcc <listen_message_reliably+0x54>
 8011bac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011bb0:	9903      	ldr	r1, [sp, #12]
 8011bb2:	455a      	cmp	r2, fp
 8011bb4:	f106 0601 	add.w	r6, r6, #1
 8011bb8:	eb73 0101 	sbcs.w	r1, r3, r1
 8011bbc:	b2f0      	uxtb	r0, r6
 8011bbe:	da01      	bge.n	8011bc4 <listen_message_reliably+0x4c>
 8011bc0:	4693      	mov	fp, r2
 8011bc2:	9303      	str	r3, [sp, #12]
 8011bc4:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011bc8:	4283      	cmp	r3, r0
 8011bca:	d960      	bls.n	8011c8e <listen_message_reliably+0x116>
 8011bcc:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011bd0:	2102      	movs	r1, #2
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	f001 f9e6 	bl	8012fa4 <uxr_stream_id>
 8011bd8:	00e4      	lsls	r4, r4, #3
 8011bda:	f104 0520 	add.w	r5, r4, #32
 8011bde:	4445      	add	r5, r8
 8011be0:	4601      	mov	r1, r0
 8011be2:	463b      	mov	r3, r7
 8011be4:	464a      	mov	r2, r9
 8011be6:	4628      	mov	r0, r5
 8011be8:	9109      	str	r1, [sp, #36]	@ 0x24
 8011bea:	f007 fb05 	bl	80191f8 <uxr_update_output_stream_heartbeat_timestamp>
 8011bee:	eb08 0304 	add.w	r3, r8, r4
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d0da      	beq.n	8011bac <listen_message_reliably+0x34>
 8011bf6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011bfa:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011bfe:	9304      	str	r3, [sp, #16]
 8011c00:	4640      	mov	r0, r8
 8011c02:	f000 fd05 	bl	8012610 <uxr_session_header_offset>
 8011c06:	3501      	adds	r5, #1
 8011c08:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011c0c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011c10:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011c14:	2300      	movs	r3, #0
 8011c16:	2211      	movs	r2, #17
 8011c18:	9000      	str	r0, [sp, #0]
 8011c1a:	a90c      	add	r1, sp, #48	@ 0x30
 8011c1c:	4650      	mov	r0, sl
 8011c1e:	f7fb fb11 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8011c22:	2300      	movs	r3, #0
 8011c24:	2205      	movs	r2, #5
 8011c26:	210b      	movs	r1, #11
 8011c28:	4650      	mov	r0, sl
 8011c2a:	f001 faf3 	bl	8013214 <uxr_buffer_submessage_header>
 8011c2e:	8968      	ldrh	r0, [r5, #10]
 8011c30:	2101      	movs	r1, #1
 8011c32:	f007 fba3 	bl	801937c <uxr_seq_num_add>
 8011c36:	892b      	ldrh	r3, [r5, #8]
 8011c38:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	9b04      	ldr	r3, [sp, #16]
 8011c40:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011c44:	a90a      	add	r1, sp, #40	@ 0x28
 8011c46:	4650      	mov	r0, sl
 8011c48:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011c4c:	f002 fc10 	bl	8014470 <uxr_serialize_HEARTBEAT_Payload>
 8011c50:	2200      	movs	r2, #0
 8011c52:	4611      	mov	r1, r2
 8011c54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c56:	4640      	mov	r0, r8
 8011c58:	f000 fc84 	bl	8012564 <uxr_stamp_session_header>
 8011c5c:	4650      	mov	r0, sl
 8011c5e:	f7fb fb2f 	bl	800d2c0 <ucdr_buffer_length>
 8011c62:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011c66:	4602      	mov	r2, r0
 8011c68:	a90c      	add	r1, sp, #48	@ 0x30
 8011c6a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011c6e:	4444      	add	r4, r8
 8011c70:	47a8      	blx	r5
 8011c72:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011c76:	9903      	ldr	r1, [sp, #12]
 8011c78:	455a      	cmp	r2, fp
 8011c7a:	f106 0601 	add.w	r6, r6, #1
 8011c7e:	eb73 0101 	sbcs.w	r1, r3, r1
 8011c82:	b2f0      	uxtb	r0, r6
 8011c84:	db9c      	blt.n	8011bc0 <listen_message_reliably+0x48>
 8011c86:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011c8a:	4283      	cmp	r3, r0
 8011c8c:	d89e      	bhi.n	8011bcc <listen_message_reliably+0x54>
 8011c8e:	9a03      	ldr	r2, [sp, #12]
 8011c90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011c94:	429a      	cmp	r2, r3
 8011c96:	bf08      	it	eq
 8011c98:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011c9c:	d01e      	beq.n	8011cdc <listen_message_reliably+0x164>
 8011c9e:	ebab 0309 	sub.w	r3, fp, r9
 8011ca2:	9905      	ldr	r1, [sp, #20]
 8011ca4:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	bf08      	it	eq
 8011cac:	2301      	moveq	r3, #1
 8011cae:	4299      	cmp	r1, r3
 8011cb0:	bfa8      	it	ge
 8011cb2:	4619      	movge	r1, r3
 8011cb4:	6894      	ldr	r4, [r2, #8]
 8011cb6:	6810      	ldr	r0, [r2, #0]
 8011cb8:	4689      	mov	r9, r1
 8011cba:	460b      	mov	r3, r1
 8011cbc:	aa08      	add	r2, sp, #32
 8011cbe:	a907      	add	r1, sp, #28
 8011cc0:	47a0      	blx	r4
 8011cc2:	b968      	cbnz	r0, 8011ce0 <listen_message_reliably+0x168>
 8011cc4:	9b05      	ldr	r3, [sp, #20]
 8011cc6:	eba3 0309 	sub.w	r3, r3, r9
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	9305      	str	r3, [sp, #20]
 8011cce:	f73f af5c 	bgt.w	8011b8a <listen_message_reliably+0x12>
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	b01d      	add	sp, #116	@ 0x74
 8011cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cdc:	9b05      	ldr	r3, [sp, #20]
 8011cde:	e7e0      	b.n	8011ca2 <listen_message_reliably+0x12a>
 8011ce0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	a80c      	add	r0, sp, #48	@ 0x30
 8011ce8:	f7fb fabe 	bl	800d268 <ucdr_init_buffer>
 8011cec:	2500      	movs	r5, #0
 8011cee:	f10d 031a 	add.w	r3, sp, #26
 8011cf2:	aa06      	add	r2, sp, #24
 8011cf4:	a90c      	add	r1, sp, #48	@ 0x30
 8011cf6:	4640      	mov	r0, r8
 8011cf8:	f88d 5018 	strb.w	r5, [sp, #24]
 8011cfc:	f000 fc46 	bl	801258c <uxr_read_session_header>
 8011d00:	b918      	cbnz	r0, 8011d0a <listen_message_reliably+0x192>
 8011d02:	4620      	mov	r0, r4
 8011d04:	b01d      	add	sp, #116	@ 0x74
 8011d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0a:	4629      	mov	r1, r5
 8011d0c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011d10:	f001 f972 	bl	8012ff8 <uxr_stream_id_from_raw>
 8011d14:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011d18:	2d01      	cmp	r5, #1
 8011d1a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011d1e:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011d22:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011d26:	d04b      	beq.n	8011dc0 <listen_message_reliably+0x248>
 8011d28:	2d02      	cmp	r5, #2
 8011d2a:	d00f      	beq.n	8011d4c <listen_message_reliably+0x1d4>
 8011d2c:	2d00      	cmp	r5, #0
 8011d2e:	d1e8      	bne.n	8011d02 <listen_message_reliably+0x18a>
 8011d30:	4629      	mov	r1, r5
 8011d32:	4628      	mov	r0, r5
 8011d34:	f001 f960 	bl	8012ff8 <uxr_stream_id_from_raw>
 8011d38:	a90c      	add	r1, sp, #48	@ 0x30
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	920a      	str	r2, [sp, #40]	@ 0x28
 8011d40:	f7ff fd92 	bl	8011868 <read_submessage_list>
 8011d44:	4620      	mov	r0, r4
 8011d46:	b01d      	add	sp, #116	@ 0x74
 8011d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d4c:	4631      	mov	r1, r6
 8011d4e:	f108 0008 	add.w	r0, r8, #8
 8011d52:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011d56:	f001 fa3d 	bl	80131d4 <uxr_get_input_reliable_stream>
 8011d5a:	4607      	mov	r7, r0
 8011d5c:	b338      	cbz	r0, 8011dae <listen_message_reliably+0x236>
 8011d5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d60:	9203      	str	r2, [sp, #12]
 8011d62:	a80c      	add	r0, sp, #48	@ 0x30
 8011d64:	f7fb fab0 	bl	800d2c8 <ucdr_buffer_remaining>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	f10d 0019 	add.w	r0, sp, #25
 8011d6e:	9000      	str	r0, [sp, #0]
 8011d70:	9a03      	ldr	r2, [sp, #12]
 8011d72:	4651      	mov	r1, sl
 8011d74:	4638      	mov	r0, r7
 8011d76:	f006 fe55 	bl	8018a24 <uxr_receive_reliable_message>
 8011d7a:	b1c0      	cbz	r0, 8011dae <listen_message_reliably+0x236>
 8011d7c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011d80:	b393      	cbz	r3, 8011de8 <listen_message_reliably+0x270>
 8011d82:	ad14      	add	r5, sp, #80	@ 0x50
 8011d84:	f04f 0a02 	mov.w	sl, #2
 8011d88:	e00a      	b.n	8011da0 <listen_message_reliably+0x228>
 8011d8a:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011d8e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011d92:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011d96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d98:	4629      	mov	r1, r5
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	f7ff fd64 	bl	8011868 <read_submessage_list>
 8011da0:	2204      	movs	r2, #4
 8011da2:	4629      	mov	r1, r5
 8011da4:	4638      	mov	r0, r7
 8011da6:	f006 febd 	bl	8018b24 <uxr_next_input_reliable_buffer_available>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d1ed      	bne.n	8011d8a <listen_message_reliably+0x212>
 8011dae:	4640      	mov	r0, r8
 8011db0:	4632      	mov	r2, r6
 8011db2:	4649      	mov	r1, r9
 8011db4:	f7ff fbc2 	bl	801153c <write_submessage_acknack.isra.0>
 8011db8:	4620      	mov	r0, r4
 8011dba:	b01d      	add	sp, #116	@ 0x74
 8011dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc0:	4631      	mov	r1, r6
 8011dc2:	f108 0008 	add.w	r0, r8, #8
 8011dc6:	f001 f9fb 	bl	80131c0 <uxr_get_input_best_effort_stream>
 8011dca:	2800      	cmp	r0, #0
 8011dcc:	d099      	beq.n	8011d02 <listen_message_reliably+0x18a>
 8011dce:	4651      	mov	r1, sl
 8011dd0:	f006 fd94 	bl	80188fc <uxr_receive_best_effort_message>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d094      	beq.n	8011d02 <listen_message_reliably+0x18a>
 8011dd8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dde:	a90c      	add	r1, sp, #48	@ 0x30
 8011de0:	4640      	mov	r0, r8
 8011de2:	f7ff fd41 	bl	8011868 <read_submessage_list>
 8011de6:	e78c      	b.n	8011d02 <listen_message_reliably+0x18a>
 8011de8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011dec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dee:	a90c      	add	r1, sp, #48	@ 0x30
 8011df0:	4640      	mov	r0, r8
 8011df2:	f7ff fd39 	bl	8011868 <read_submessage_list>
 8011df6:	e7c4      	b.n	8011d82 <listen_message_reliably+0x20a>

08011df8 <uxr_run_session_timeout>:
 8011df8:	b570      	push	{r4, r5, r6, lr}
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	460d      	mov	r5, r1
 8011dfe:	f001 fa4f 	bl	80132a0 <uxr_millis>
 8011e02:	4606      	mov	r6, r0
 8011e04:	4620      	mov	r0, r4
 8011e06:	f7ff fc71 	bl	80116ec <uxr_flash_output_streams>
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f7ff feb3 	bl	8011b78 <listen_message_reliably>
 8011e12:	f001 fa45 	bl	80132a0 <uxr_millis>
 8011e16:	1b83      	subs	r3, r0, r6
 8011e18:	1ae9      	subs	r1, r5, r3
 8011e1a:	2900      	cmp	r1, #0
 8011e1c:	dcf6      	bgt.n	8011e0c <uxr_run_session_timeout+0x14>
 8011e1e:	f104 0008 	add.w	r0, r4, #8
 8011e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e26:	f001 b9df 	b.w	80131e8 <uxr_output_streams_confirmed>
 8011e2a:	bf00      	nop

08011e2c <uxr_run_session_until_data>:
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	4604      	mov	r4, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	f001 fa35 	bl	80132a0 <uxr_millis>
 8011e36:	4606      	mov	r6, r0
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f7ff fc57 	bl	80116ec <uxr_flash_output_streams>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011e44:	4629      	mov	r1, r5
 8011e46:	e005      	b.n	8011e54 <uxr_run_session_until_data+0x28>
 8011e48:	f001 fa2a 	bl	80132a0 <uxr_millis>
 8011e4c:	1b83      	subs	r3, r0, r6
 8011e4e:	1ae9      	subs	r1, r5, r3
 8011e50:	2900      	cmp	r1, #0
 8011e52:	dd07      	ble.n	8011e64 <uxr_run_session_until_data+0x38>
 8011e54:	4620      	mov	r0, r4
 8011e56:	f7ff fe8f 	bl	8011b78 <listen_message_reliably>
 8011e5a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d0f2      	beq.n	8011e48 <uxr_run_session_until_data+0x1c>
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
 8011e64:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011e68:	bd70      	pop	{r4, r5, r6, pc}
 8011e6a:	bf00      	nop

08011e6c <uxr_run_session_until_confirm_delivery>:
 8011e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e70:	4606      	mov	r6, r0
 8011e72:	460d      	mov	r5, r1
 8011e74:	f001 fa14 	bl	80132a0 <uxr_millis>
 8011e78:	4607      	mov	r7, r0
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	f7ff fc36 	bl	80116ec <uxr_flash_output_streams>
 8011e80:	2d00      	cmp	r5, #0
 8011e82:	f106 0808 	add.w	r8, r6, #8
 8011e86:	bfa8      	it	ge
 8011e88:	462c      	movge	r4, r5
 8011e8a:	da07      	bge.n	8011e9c <uxr_run_session_until_confirm_delivery+0x30>
 8011e8c:	e00e      	b.n	8011eac <uxr_run_session_until_confirm_delivery+0x40>
 8011e8e:	f7ff fe73 	bl	8011b78 <listen_message_reliably>
 8011e92:	f001 fa05 	bl	80132a0 <uxr_millis>
 8011e96:	1bc3      	subs	r3, r0, r7
 8011e98:	1aec      	subs	r4, r5, r3
 8011e9a:	d407      	bmi.n	8011eac <uxr_run_session_until_confirm_delivery+0x40>
 8011e9c:	4640      	mov	r0, r8
 8011e9e:	f001 f9a3 	bl	80131e8 <uxr_output_streams_confirmed>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	4621      	mov	r1, r4
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d0f0      	beq.n	8011e8e <uxr_run_session_until_confirm_delivery+0x22>
 8011eac:	4640      	mov	r0, r8
 8011eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb2:	f001 b999 	b.w	80131e8 <uxr_output_streams_confirmed>
 8011eb6:	bf00      	nop

08011eb8 <uxr_run_session_until_all_status>:
 8011eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ebc:	9c08      	ldr	r4, [sp, #32]
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	460f      	mov	r7, r1
 8011ec2:	4691      	mov	r9, r2
 8011ec4:	461d      	mov	r5, r3
 8011ec6:	f7ff fc11 	bl	80116ec <uxr_flash_output_streams>
 8011eca:	b124      	cbz	r4, 8011ed6 <uxr_run_session_until_all_status+0x1e>
 8011ecc:	4622      	mov	r2, r4
 8011ece:	21ff      	movs	r1, #255	@ 0xff
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f008 fb6b 	bl	801a5ac <memset>
 8011ed6:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011eda:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011edc:	f001 f9e0 	bl	80132a0 <uxr_millis>
 8011ee0:	3d01      	subs	r5, #1
 8011ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8011ee6:	4680      	mov	r8, r0
 8011ee8:	4639      	mov	r1, r7
 8011eea:	4630      	mov	r0, r6
 8011eec:	f7ff fe44 	bl	8011b78 <listen_message_reliably>
 8011ef0:	f001 f9d6 	bl	80132a0 <uxr_millis>
 8011ef4:	eba0 0008 	sub.w	r0, r0, r8
 8011ef8:	1a39      	subs	r1, r7, r0
 8011efa:	b344      	cbz	r4, 8011f4e <uxr_run_session_until_all_status+0x96>
 8011efc:	4628      	mov	r0, r5
 8011efe:	46ac      	mov	ip, r5
 8011f00:	2301      	movs	r3, #1
 8011f02:	e002      	b.n	8011f0a <uxr_run_session_until_all_status+0x52>
 8011f04:	42a3      	cmp	r3, r4
 8011f06:	d20d      	bcs.n	8011f24 <uxr_run_session_until_all_status+0x6c>
 8011f08:	3301      	adds	r3, #1
 8011f0a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011f0e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8011f12:	d1f7      	bne.n	8011f04 <uxr_run_session_until_all_status+0x4c>
 8011f14:	42a3      	cmp	r3, r4
 8011f16:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011f1a:	d213      	bcs.n	8011f44 <uxr_run_session_until_all_status+0x8c>
 8011f1c:	2a00      	cmp	r2, #0
 8011f1e:	d0f3      	beq.n	8011f08 <uxr_run_session_until_all_status+0x50>
 8011f20:	2900      	cmp	r1, #0
 8011f22:	dce2      	bgt.n	8011eea <uxr_run_session_until_all_status+0x32>
 8011f24:	2300      	movs	r3, #0
 8011f26:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011f28:	442c      	add	r4, r5
 8011f2a:	e001      	b.n	8011f30 <uxr_run_session_until_all_status+0x78>
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d812      	bhi.n	8011f56 <uxr_run_session_until_all_status+0x9e>
 8011f30:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011f34:	4284      	cmp	r4, r0
 8011f36:	d1f9      	bne.n	8011f2c <uxr_run_session_until_all_status+0x74>
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	bf8c      	ite	hi
 8011f3c:	2000      	movhi	r0, #0
 8011f3e:	2001      	movls	r0, #1
 8011f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f44:	2900      	cmp	r1, #0
 8011f46:	dded      	ble.n	8011f24 <uxr_run_session_until_all_status+0x6c>
 8011f48:	2a00      	cmp	r2, #0
 8011f4a:	d1ce      	bne.n	8011eea <uxr_run_session_until_all_status+0x32>
 8011f4c:	e7ea      	b.n	8011f24 <uxr_run_session_until_all_status+0x6c>
 8011f4e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011f50:	2001      	movs	r0, #1
 8011f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f56:	2000      	movs	r0, #0
 8011f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f5c:	0000      	movs	r0, r0
	...

08011f60 <uxr_sync_session>:
 8011f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f62:	b093      	sub	sp, #76	@ 0x4c
 8011f64:	4604      	mov	r4, r0
 8011f66:	460d      	mov	r5, r1
 8011f68:	f000 fb52 	bl	8012610 <uxr_session_header_offset>
 8011f6c:	2214      	movs	r2, #20
 8011f6e:	eb0d 0102 	add.w	r1, sp, r2
 8011f72:	9000      	str	r0, [sp, #0]
 8011f74:	2300      	movs	r3, #0
 8011f76:	a80a      	add	r0, sp, #40	@ 0x28
 8011f78:	f7fb f964 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	2208      	movs	r2, #8
 8011f80:	210e      	movs	r1, #14
 8011f82:	a80a      	add	r0, sp, #40	@ 0x28
 8011f84:	f001 f946 	bl	8013214 <uxr_buffer_submessage_header>
 8011f88:	f001 f9a4 	bl	80132d4 <uxr_nanos>
 8011f8c:	a31c      	add	r3, pc, #112	@ (adr r3, 8012000 <uxr_sync_session+0xa0>)
 8011f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f92:	460e      	mov	r6, r1
 8011f94:	4607      	mov	r7, r0
 8011f96:	f7ee fe67 	bl	8000c68 <__aeabi_ldivmod>
 8011f9a:	4631      	mov	r1, r6
 8011f9c:	9003      	str	r0, [sp, #12]
 8011f9e:	a318      	add	r3, pc, #96	@ (adr r3, 8012000 <uxr_sync_session+0xa0>)
 8011fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	f7ee fe5f 	bl	8000c68 <__aeabi_ldivmod>
 8011faa:	a903      	add	r1, sp, #12
 8011fac:	a80a      	add	r0, sp, #40	@ 0x28
 8011fae:	9204      	str	r2, [sp, #16]
 8011fb0:	f002 fa84 	bl	80144bc <uxr_serialize_TIMESTAMP_Payload>
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	4611      	mov	r1, r2
 8011fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f000 fad2 	bl	8012564 <uxr_stamp_session_header>
 8011fc0:	a80a      	add	r0, sp, #40	@ 0x28
 8011fc2:	f7fb f97d 	bl	800d2c0 <ucdr_buffer_length>
 8011fc6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011fc8:	4602      	mov	r2, r0
 8011fca:	a905      	add	r1, sp, #20
 8011fcc:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011fd0:	47b0      	blx	r6
 8011fd2:	f001 f965 	bl	80132a0 <uxr_millis>
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	4606      	mov	r6, r0
 8011fda:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011fde:	4629      	mov	r1, r5
 8011fe0:	e000      	b.n	8011fe4 <uxr_sync_session+0x84>
 8011fe2:	b950      	cbnz	r0, 8011ffa <uxr_sync_session+0x9a>
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f7ff fdc7 	bl	8011b78 <listen_message_reliably>
 8011fea:	f001 f959 	bl	80132a0 <uxr_millis>
 8011fee:	1b83      	subs	r3, r0, r6
 8011ff0:	1ae9      	subs	r1, r5, r3
 8011ff2:	2900      	cmp	r1, #0
 8011ff4:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8011ff8:	dcf3      	bgt.n	8011fe2 <uxr_sync_session+0x82>
 8011ffa:	b013      	add	sp, #76	@ 0x4c
 8011ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ffe:	bf00      	nop
 8012000:	3b9aca00 	.word	0x3b9aca00
 8012004:	00000000 	.word	0x00000000

08012008 <wait_session_status>:
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	4604      	mov	r4, r0
 801200e:	b09d      	sub	sp, #116	@ 0x74
 8012010:	20ff      	movs	r0, #255	@ 0xff
 8012012:	7160      	strb	r0, [r4, #5]
 8012014:	9303      	str	r3, [sp, #12]
 8012016:	2b00      	cmp	r3, #0
 8012018:	f000 80b6 	beq.w	8012188 <wait_session_status+0x180>
 801201c:	468a      	mov	sl, r1
 801201e:	4691      	mov	r9, r2
 8012020:	f04f 0b00 	mov.w	fp, #0
 8012024:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012026:	464a      	mov	r2, r9
 8012028:	e9d3 0500 	ldrd	r0, r5, [r3]
 801202c:	4651      	mov	r1, sl
 801202e:	47a8      	blx	r5
 8012030:	f001 f936 	bl	80132a0 <uxr_millis>
 8012034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012038:	4605      	mov	r5, r0
 801203a:	e009      	b.n	8012050 <wait_session_status+0x48>
 801203c:	f001 f930 	bl	80132a0 <uxr_millis>
 8012040:	1b40      	subs	r0, r0, r5
 8012042:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012046:	2b00      	cmp	r3, #0
 8012048:	dd40      	ble.n	80120cc <wait_session_status+0xc4>
 801204a:	7960      	ldrb	r0, [r4, #5]
 801204c:	28ff      	cmp	r0, #255	@ 0xff
 801204e:	d145      	bne.n	80120dc <wait_session_status+0xd4>
 8012050:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012052:	a908      	add	r1, sp, #32
 8012054:	6896      	ldr	r6, [r2, #8]
 8012056:	6810      	ldr	r0, [r2, #0]
 8012058:	aa09      	add	r2, sp, #36	@ 0x24
 801205a:	47b0      	blx	r6
 801205c:	2800      	cmp	r0, #0
 801205e:	d0ed      	beq.n	801203c <wait_session_status+0x34>
 8012060:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012064:	a80c      	add	r0, sp, #48	@ 0x30
 8012066:	f7fb f8ff 	bl	800d268 <ucdr_init_buffer>
 801206a:	2600      	movs	r6, #0
 801206c:	f10d 031e 	add.w	r3, sp, #30
 8012070:	aa07      	add	r2, sp, #28
 8012072:	a90c      	add	r1, sp, #48	@ 0x30
 8012074:	4620      	mov	r0, r4
 8012076:	f88d 601c 	strb.w	r6, [sp, #28]
 801207a:	f000 fa87 	bl	801258c <uxr_read_session_header>
 801207e:	2800      	cmp	r0, #0
 8012080:	d0dc      	beq.n	801203c <wait_session_status+0x34>
 8012082:	4631      	mov	r1, r6
 8012084:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012088:	f000 ffb6 	bl	8012ff8 <uxr_stream_id_from_raw>
 801208c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012090:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012094:	9302      	str	r3, [sp, #8]
 8012096:	2f01      	cmp	r7, #1
 8012098:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801209c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80120a0:	d05c      	beq.n	801215c <wait_session_status+0x154>
 80120a2:	2f02      	cmp	r7, #2
 80120a4:	d020      	beq.n	80120e8 <wait_session_status+0xe0>
 80120a6:	2f00      	cmp	r7, #0
 80120a8:	d1c8      	bne.n	801203c <wait_session_status+0x34>
 80120aa:	4639      	mov	r1, r7
 80120ac:	4638      	mov	r0, r7
 80120ae:	f000 ffa3 	bl	8012ff8 <uxr_stream_id_from_raw>
 80120b2:	a90c      	add	r1, sp, #48	@ 0x30
 80120b4:	4602      	mov	r2, r0
 80120b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80120b8:	4620      	mov	r0, r4
 80120ba:	f7ff fbd5 	bl	8011868 <read_submessage_list>
 80120be:	f001 f8ef 	bl	80132a0 <uxr_millis>
 80120c2:	1b40      	subs	r0, r0, r5
 80120c4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	dcbe      	bgt.n	801204a <wait_session_status+0x42>
 80120cc:	9b03      	ldr	r3, [sp, #12]
 80120ce:	7960      	ldrb	r0, [r4, #5]
 80120d0:	f10b 0b01 	add.w	fp, fp, #1
 80120d4:	455b      	cmp	r3, fp
 80120d6:	d001      	beq.n	80120dc <wait_session_status+0xd4>
 80120d8:	28ff      	cmp	r0, #255	@ 0xff
 80120da:	d0a3      	beq.n	8012024 <wait_session_status+0x1c>
 80120dc:	38ff      	subs	r0, #255	@ 0xff
 80120de:	bf18      	it	ne
 80120e0:	2001      	movne	r0, #1
 80120e2:	b01d      	add	sp, #116	@ 0x74
 80120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80120ec:	9304      	str	r3, [sp, #16]
 80120ee:	4631      	mov	r1, r6
 80120f0:	f104 0008 	add.w	r0, r4, #8
 80120f4:	f001 f86e 	bl	80131d4 <uxr_get_input_reliable_stream>
 80120f8:	4680      	mov	r8, r0
 80120fa:	b348      	cbz	r0, 8012150 <wait_session_status+0x148>
 80120fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120fe:	9205      	str	r2, [sp, #20]
 8012100:	a80c      	add	r0, sp, #48	@ 0x30
 8012102:	f7fb f8e1 	bl	800d2c8 <ucdr_buffer_remaining>
 8012106:	4603      	mov	r3, r0
 8012108:	f10d 001d 	add.w	r0, sp, #29
 801210c:	9000      	str	r0, [sp, #0]
 801210e:	9a05      	ldr	r2, [sp, #20]
 8012110:	9902      	ldr	r1, [sp, #8]
 8012112:	4640      	mov	r0, r8
 8012114:	f006 fc86 	bl	8018a24 <uxr_receive_reliable_message>
 8012118:	b1d0      	cbz	r0, 8012150 <wait_session_status+0x148>
 801211a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d03a      	beq.n	8012198 <wait_session_status+0x190>
 8012122:	9f04      	ldr	r7, [sp, #16]
 8012124:	e00a      	b.n	801213c <wait_session_status+0x134>
 8012126:	f04f 0302 	mov.w	r3, #2
 801212a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801212e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012132:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8012136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012138:	f7ff fb96 	bl	8011868 <read_submessage_list>
 801213c:	a914      	add	r1, sp, #80	@ 0x50
 801213e:	2204      	movs	r2, #4
 8012140:	4640      	mov	r0, r8
 8012142:	f006 fcef 	bl	8018b24 <uxr_next_input_reliable_buffer_available>
 8012146:	4603      	mov	r3, r0
 8012148:	a914      	add	r1, sp, #80	@ 0x50
 801214a:	4620      	mov	r0, r4
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1ea      	bne.n	8012126 <wait_session_status+0x11e>
 8012150:	9904      	ldr	r1, [sp, #16]
 8012152:	4632      	mov	r2, r6
 8012154:	4620      	mov	r0, r4
 8012156:	f7ff f9f1 	bl	801153c <write_submessage_acknack.isra.0>
 801215a:	e76f      	b.n	801203c <wait_session_status+0x34>
 801215c:	4631      	mov	r1, r6
 801215e:	f104 0008 	add.w	r0, r4, #8
 8012162:	f001 f82d 	bl	80131c0 <uxr_get_input_best_effort_stream>
 8012166:	2800      	cmp	r0, #0
 8012168:	f43f af68 	beq.w	801203c <wait_session_status+0x34>
 801216c:	9902      	ldr	r1, [sp, #8]
 801216e:	f006 fbc5 	bl	80188fc <uxr_receive_best_effort_message>
 8012172:	2800      	cmp	r0, #0
 8012174:	f43f af62 	beq.w	801203c <wait_session_status+0x34>
 8012178:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801217c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801217e:	a90c      	add	r1, sp, #48	@ 0x30
 8012180:	4620      	mov	r0, r4
 8012182:	f7ff fb71 	bl	8011868 <read_submessage_list>
 8012186:	e759      	b.n	801203c <wait_session_status+0x34>
 8012188:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801218a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801218e:	47a0      	blx	r4
 8012190:	2001      	movs	r0, #1
 8012192:	b01d      	add	sp, #116	@ 0x74
 8012194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012198:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801219c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801219e:	a90c      	add	r1, sp, #48	@ 0x30
 80121a0:	4620      	mov	r0, r4
 80121a2:	f7ff fb61 	bl	8011868 <read_submessage_list>
 80121a6:	e7bc      	b.n	8012122 <wait_session_status+0x11a>

080121a8 <uxr_delete_session_retries>:
 80121a8:	b530      	push	{r4, r5, lr}
 80121aa:	b08f      	sub	sp, #60	@ 0x3c
 80121ac:	4604      	mov	r4, r0
 80121ae:	460d      	mov	r5, r1
 80121b0:	f000 fa2e 	bl	8012610 <uxr_session_header_offset>
 80121b4:	2300      	movs	r3, #0
 80121b6:	2210      	movs	r2, #16
 80121b8:	9000      	str	r0, [sp, #0]
 80121ba:	a902      	add	r1, sp, #8
 80121bc:	a806      	add	r0, sp, #24
 80121be:	f7fb f841 	bl	800d244 <ucdr_init_buffer_origin_offset>
 80121c2:	a906      	add	r1, sp, #24
 80121c4:	4620      	mov	r0, r4
 80121c6:	f000 f973 	bl	80124b0 <uxr_buffer_delete_session>
 80121ca:	2200      	movs	r2, #0
 80121cc:	4611      	mov	r1, r2
 80121ce:	9b06      	ldr	r3, [sp, #24]
 80121d0:	4620      	mov	r0, r4
 80121d2:	f000 f9c7 	bl	8012564 <uxr_stamp_session_header>
 80121d6:	a806      	add	r0, sp, #24
 80121d8:	f7fb f872 	bl	800d2c0 <ucdr_buffer_length>
 80121dc:	462b      	mov	r3, r5
 80121de:	4602      	mov	r2, r0
 80121e0:	a902      	add	r1, sp, #8
 80121e2:	4620      	mov	r0, r4
 80121e4:	f7ff ff10 	bl	8012008 <wait_session_status>
 80121e8:	b118      	cbz	r0, 80121f2 <uxr_delete_session_retries+0x4a>
 80121ea:	7960      	ldrb	r0, [r4, #5]
 80121ec:	fab0 f080 	clz	r0, r0
 80121f0:	0940      	lsrs	r0, r0, #5
 80121f2:	b00f      	add	sp, #60	@ 0x3c
 80121f4:	bd30      	pop	{r4, r5, pc}
 80121f6:	bf00      	nop

080121f8 <uxr_create_session>:
 80121f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121fc:	f100 0b08 	add.w	fp, r0, #8
 8012200:	b0ab      	sub	sp, #172	@ 0xac
 8012202:	4604      	mov	r4, r0
 8012204:	4658      	mov	r0, fp
 8012206:	f000 ff2b 	bl	8013060 <uxr_reset_stream_storage>
 801220a:	4620      	mov	r0, r4
 801220c:	f000 fa00 	bl	8012610 <uxr_session_header_offset>
 8012210:	2300      	movs	r3, #0
 8012212:	9000      	str	r0, [sp, #0]
 8012214:	221c      	movs	r2, #28
 8012216:	a90b      	add	r1, sp, #44	@ 0x2c
 8012218:	a812      	add	r0, sp, #72	@ 0x48
 801221a:	f7fb f813 	bl	800d244 <ucdr_init_buffer_origin_offset>
 801221e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012220:	8a1a      	ldrh	r2, [r3, #16]
 8012222:	3a04      	subs	r2, #4
 8012224:	b292      	uxth	r2, r2
 8012226:	a912      	add	r1, sp, #72	@ 0x48
 8012228:	4620      	mov	r0, r4
 801222a:	f000 f917 	bl	801245c <uxr_buffer_create_session>
 801222e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012230:	4620      	mov	r0, r4
 8012232:	f000 f983 	bl	801253c <uxr_stamp_create_session_header>
 8012236:	a812      	add	r0, sp, #72	@ 0x48
 8012238:	f7fb f842 	bl	800d2c0 <ucdr_buffer_length>
 801223c:	23ff      	movs	r3, #255	@ 0xff
 801223e:	7163      	strb	r3, [r4, #5]
 8012240:	230a      	movs	r3, #10
 8012242:	46da      	mov	sl, fp
 8012244:	9303      	str	r3, [sp, #12]
 8012246:	4683      	mov	fp, r0
 8012248:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801224a:	465a      	mov	r2, fp
 801224c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012250:	a90b      	add	r1, sp, #44	@ 0x2c
 8012252:	47a8      	blx	r5
 8012254:	f001 f824 	bl	80132a0 <uxr_millis>
 8012258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801225c:	4605      	mov	r5, r0
 801225e:	e009      	b.n	8012274 <uxr_create_session+0x7c>
 8012260:	f001 f81e 	bl	80132a0 <uxr_millis>
 8012264:	1b40      	subs	r0, r0, r5
 8012266:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801226a:	2b00      	cmp	r3, #0
 801226c:	7962      	ldrb	r2, [r4, #5]
 801226e:	dd38      	ble.n	80122e2 <uxr_create_session+0xea>
 8012270:	2aff      	cmp	r2, #255	@ 0xff
 8012272:	d13c      	bne.n	80122ee <uxr_create_session+0xf6>
 8012274:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012276:	a907      	add	r1, sp, #28
 8012278:	6896      	ldr	r6, [r2, #8]
 801227a:	6810      	ldr	r0, [r2, #0]
 801227c:	aa08      	add	r2, sp, #32
 801227e:	47b0      	blx	r6
 8012280:	2800      	cmp	r0, #0
 8012282:	d0ed      	beq.n	8012260 <uxr_create_session+0x68>
 8012284:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012288:	a81a      	add	r0, sp, #104	@ 0x68
 801228a:	f7fa ffed 	bl	800d268 <ucdr_init_buffer>
 801228e:	2600      	movs	r6, #0
 8012290:	f10d 031a 	add.w	r3, sp, #26
 8012294:	aa06      	add	r2, sp, #24
 8012296:	a91a      	add	r1, sp, #104	@ 0x68
 8012298:	4620      	mov	r0, r4
 801229a:	f88d 6018 	strb.w	r6, [sp, #24]
 801229e:	f000 f975 	bl	801258c <uxr_read_session_header>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d0dc      	beq.n	8012260 <uxr_create_session+0x68>
 80122a6:	4631      	mov	r1, r6
 80122a8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80122ac:	f000 fea4 	bl	8012ff8 <uxr_stream_id_from_raw>
 80122b0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80122b4:	2e01      	cmp	r6, #1
 80122b6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80122ba:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80122be:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80122c2:	d053      	beq.n	801236c <uxr_create_session+0x174>
 80122c4:	2e02      	cmp	r6, #2
 80122c6:	d018      	beq.n	80122fa <uxr_create_session+0x102>
 80122c8:	2e00      	cmp	r6, #0
 80122ca:	d1c9      	bne.n	8012260 <uxr_create_session+0x68>
 80122cc:	4631      	mov	r1, r6
 80122ce:	4630      	mov	r0, r6
 80122d0:	f000 fe92 	bl	8012ff8 <uxr_stream_id_from_raw>
 80122d4:	a91a      	add	r1, sp, #104	@ 0x68
 80122d6:	4602      	mov	r2, r0
 80122d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80122da:	4620      	mov	r0, r4
 80122dc:	f7ff fac4 	bl	8011868 <read_submessage_list>
 80122e0:	e7be      	b.n	8012260 <uxr_create_session+0x68>
 80122e2:	9b03      	ldr	r3, [sp, #12]
 80122e4:	3b01      	subs	r3, #1
 80122e6:	9303      	str	r3, [sp, #12]
 80122e8:	d001      	beq.n	80122ee <uxr_create_session+0xf6>
 80122ea:	2aff      	cmp	r2, #255	@ 0xff
 80122ec:	d0ac      	beq.n	8012248 <uxr_create_session+0x50>
 80122ee:	2a00      	cmp	r2, #0
 80122f0:	d051      	beq.n	8012396 <uxr_create_session+0x19e>
 80122f2:	2000      	movs	r0, #0
 80122f4:	b02b      	add	sp, #172	@ 0xac
 80122f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80122fe:	9304      	str	r3, [sp, #16]
 8012300:	4639      	mov	r1, r7
 8012302:	4650      	mov	r0, sl
 8012304:	f000 ff66 	bl	80131d4 <uxr_get_input_reliable_stream>
 8012308:	4680      	mov	r8, r0
 801230a:	b348      	cbz	r0, 8012360 <uxr_create_session+0x168>
 801230c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801230e:	9205      	str	r2, [sp, #20]
 8012310:	a81a      	add	r0, sp, #104	@ 0x68
 8012312:	f7fa ffd9 	bl	800d2c8 <ucdr_buffer_remaining>
 8012316:	4603      	mov	r3, r0
 8012318:	f10d 0019 	add.w	r0, sp, #25
 801231c:	9000      	str	r0, [sp, #0]
 801231e:	9a05      	ldr	r2, [sp, #20]
 8012320:	4649      	mov	r1, r9
 8012322:	4640      	mov	r0, r8
 8012324:	f006 fb7e 	bl	8018a24 <uxr_receive_reliable_message>
 8012328:	b1d0      	cbz	r0, 8012360 <uxr_create_session+0x168>
 801232a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d038      	beq.n	80123a4 <uxr_create_session+0x1ac>
 8012332:	9e04      	ldr	r6, [sp, #16]
 8012334:	e00a      	b.n	801234c <uxr_create_session+0x154>
 8012336:	f04f 0302 	mov.w	r3, #2
 801233a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801233e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012342:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012348:	f7ff fa8e 	bl	8011868 <read_submessage_list>
 801234c:	a922      	add	r1, sp, #136	@ 0x88
 801234e:	2204      	movs	r2, #4
 8012350:	4640      	mov	r0, r8
 8012352:	f006 fbe7 	bl	8018b24 <uxr_next_input_reliable_buffer_available>
 8012356:	4603      	mov	r3, r0
 8012358:	a922      	add	r1, sp, #136	@ 0x88
 801235a:	4620      	mov	r0, r4
 801235c:	2b00      	cmp	r3, #0
 801235e:	d1ea      	bne.n	8012336 <uxr_create_session+0x13e>
 8012360:	9904      	ldr	r1, [sp, #16]
 8012362:	463a      	mov	r2, r7
 8012364:	4620      	mov	r0, r4
 8012366:	f7ff f8e9 	bl	801153c <write_submessage_acknack.isra.0>
 801236a:	e779      	b.n	8012260 <uxr_create_session+0x68>
 801236c:	4639      	mov	r1, r7
 801236e:	4650      	mov	r0, sl
 8012370:	f000 ff26 	bl	80131c0 <uxr_get_input_best_effort_stream>
 8012374:	2800      	cmp	r0, #0
 8012376:	f43f af73 	beq.w	8012260 <uxr_create_session+0x68>
 801237a:	4649      	mov	r1, r9
 801237c:	f006 fabe 	bl	80188fc <uxr_receive_best_effort_message>
 8012380:	2800      	cmp	r0, #0
 8012382:	f43f af6d 	beq.w	8012260 <uxr_create_session+0x68>
 8012386:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801238a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801238c:	a91a      	add	r1, sp, #104	@ 0x68
 801238e:	4620      	mov	r0, r4
 8012390:	f7ff fa6a 	bl	8011868 <read_submessage_list>
 8012394:	e764      	b.n	8012260 <uxr_create_session+0x68>
 8012396:	4650      	mov	r0, sl
 8012398:	f000 fe62 	bl	8013060 <uxr_reset_stream_storage>
 801239c:	2001      	movs	r0, #1
 801239e:	b02b      	add	sp, #172	@ 0xac
 80123a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80123a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123aa:	a91a      	add	r1, sp, #104	@ 0x68
 80123ac:	4620      	mov	r0, r4
 80123ae:	f7ff fa5b 	bl	8011868 <read_submessage_list>
 80123b2:	e7be      	b.n	8012332 <uxr_create_session+0x13a>

080123b4 <uxr_prepare_stream_to_write_submessage>:
 80123b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123b8:	b082      	sub	sp, #8
 80123ba:	4682      	mov	sl, r0
 80123bc:	4610      	mov	r0, r2
 80123be:	4615      	mov	r5, r2
 80123c0:	461e      	mov	r6, r3
 80123c2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80123c6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80123ca:	9101      	str	r1, [sp, #4]
 80123cc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80123d0:	f000 ff60 	bl	8013294 <uxr_submessage_padding>
 80123d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80123d8:	f105 0904 	add.w	r9, r5, #4
 80123dc:	2b01      	cmp	r3, #1
 80123de:	4481      	add	r9, r0
 80123e0:	d01d      	beq.n	801241e <uxr_prepare_stream_to_write_submessage+0x6a>
 80123e2:	2b02      	cmp	r3, #2
 80123e4:	d116      	bne.n	8012414 <uxr_prepare_stream_to_write_submessage+0x60>
 80123e6:	4621      	mov	r1, r4
 80123e8:	f10a 0008 	add.w	r0, sl, #8
 80123ec:	f000 fede 	bl	80131ac <uxr_get_output_reliable_stream>
 80123f0:	4604      	mov	r4, r0
 80123f2:	b158      	cbz	r0, 801240c <uxr_prepare_stream_to_write_submessage+0x58>
 80123f4:	4649      	mov	r1, r9
 80123f6:	4632      	mov	r2, r6
 80123f8:	f006 fd50 	bl	8018e9c <uxr_prepare_reliable_buffer_to_write>
 80123fc:	4604      	mov	r4, r0
 80123fe:	b12c      	cbz	r4, 801240c <uxr_prepare_stream_to_write_submessage+0x58>
 8012400:	4643      	mov	r3, r8
 8012402:	b2aa      	uxth	r2, r5
 8012404:	4639      	mov	r1, r7
 8012406:	4630      	mov	r0, r6
 8012408:	f000 ff04 	bl	8013214 <uxr_buffer_submessage_header>
 801240c:	4620      	mov	r0, r4
 801240e:	b002      	add	sp, #8
 8012410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012414:	2400      	movs	r4, #0
 8012416:	4620      	mov	r0, r4
 8012418:	b002      	add	sp, #8
 801241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801241e:	4621      	mov	r1, r4
 8012420:	f10a 0008 	add.w	r0, sl, #8
 8012424:	f000 feba 	bl	801319c <uxr_get_output_best_effort_stream>
 8012428:	4604      	mov	r4, r0
 801242a:	2800      	cmp	r0, #0
 801242c:	d0ee      	beq.n	801240c <uxr_prepare_stream_to_write_submessage+0x58>
 801242e:	4649      	mov	r1, r9
 8012430:	4632      	mov	r2, r6
 8012432:	f006 fc63 	bl	8018cfc <uxr_prepare_best_effort_buffer_to_write>
 8012436:	4604      	mov	r4, r0
 8012438:	e7e1      	b.n	80123fe <uxr_prepare_stream_to_write_submessage+0x4a>
 801243a:	bf00      	nop

0801243c <uxr_init_session_info>:
 801243c:	0e13      	lsrs	r3, r2, #24
 801243e:	7043      	strb	r3, [r0, #1]
 8012440:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012444:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012448:	7001      	strb	r1, [r0, #0]
 801244a:	70c3      	strb	r3, [r0, #3]
 801244c:	2109      	movs	r1, #9
 801244e:	23ff      	movs	r3, #255	@ 0xff
 8012450:	f880 c002 	strb.w	ip, [r0, #2]
 8012454:	7102      	strb	r2, [r0, #4]
 8012456:	80c1      	strh	r1, [r0, #6]
 8012458:	7143      	strb	r3, [r0, #5]
 801245a:	4770      	bx	lr

0801245c <uxr_buffer_create_session>:
 801245c:	b530      	push	{r4, r5, lr}
 801245e:	b089      	sub	sp, #36	@ 0x24
 8012460:	2300      	movs	r3, #0
 8012462:	4d12      	ldr	r5, [pc, #72]	@ (80124ac <uxr_buffer_create_session+0x50>)
 8012464:	9307      	str	r3, [sp, #28]
 8012466:	f8ad 201c 	strh.w	r2, [sp, #28]
 801246a:	2201      	movs	r2, #1
 801246c:	9301      	str	r3, [sp, #4]
 801246e:	80c2      	strh	r2, [r0, #6]
 8012470:	f88d 2004 	strb.w	r2, [sp, #4]
 8012474:	682a      	ldr	r2, [r5, #0]
 8012476:	9200      	str	r2, [sp, #0]
 8012478:	88aa      	ldrh	r2, [r5, #4]
 801247a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801247e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012482:	9202      	str	r2, [sp, #8]
 8012484:	460c      	mov	r4, r1
 8012486:	7802      	ldrb	r2, [r0, #0]
 8012488:	9303      	str	r3, [sp, #12]
 801248a:	4619      	mov	r1, r3
 801248c:	f88d 200c 	strb.w	r2, [sp, #12]
 8012490:	4620      	mov	r0, r4
 8012492:	2210      	movs	r2, #16
 8012494:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012498:	9306      	str	r3, [sp, #24]
 801249a:	f000 febb 	bl	8013214 <uxr_buffer_submessage_header>
 801249e:	4669      	mov	r1, sp
 80124a0:	4620      	mov	r0, r4
 80124a2:	f001 fe47 	bl	8014134 <uxr_serialize_CREATE_CLIENT_Payload>
 80124a6:	b009      	add	sp, #36	@ 0x24
 80124a8:	bd30      	pop	{r4, r5, pc}
 80124aa:	bf00      	nop
 80124ac:	0801c8f8 	.word	0x0801c8f8

080124b0 <uxr_buffer_delete_session>:
 80124b0:	b510      	push	{r4, lr}
 80124b2:	4b0c      	ldr	r3, [pc, #48]	@ (80124e4 <uxr_buffer_delete_session+0x34>)
 80124b4:	b082      	sub	sp, #8
 80124b6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80124ba:	f8ad c006 	strh.w	ip, [sp, #6]
 80124be:	460c      	mov	r4, r1
 80124c0:	2202      	movs	r2, #2
 80124c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80124c6:	80c2      	strh	r2, [r0, #6]
 80124c8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80124cc:	2204      	movs	r2, #4
 80124ce:	2300      	movs	r3, #0
 80124d0:	2103      	movs	r1, #3
 80124d2:	4620      	mov	r0, r4
 80124d4:	f000 fe9e 	bl	8013214 <uxr_buffer_submessage_header>
 80124d8:	a901      	add	r1, sp, #4
 80124da:	4620      	mov	r0, r4
 80124dc:	f001 fed0 	bl	8014280 <uxr_serialize_DELETE_Payload>
 80124e0:	b002      	add	sp, #8
 80124e2:	bd10      	pop	{r4, pc}
 80124e4:	0801c8f8 	.word	0x0801c8f8

080124e8 <uxr_read_create_session_status>:
 80124e8:	b510      	push	{r4, lr}
 80124ea:	b088      	sub	sp, #32
 80124ec:	4604      	mov	r4, r0
 80124ee:	4608      	mov	r0, r1
 80124f0:	a901      	add	r1, sp, #4
 80124f2:	f001 fed5 	bl	80142a0 <uxr_deserialize_STATUS_AGENT_Payload>
 80124f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124fa:	7163      	strb	r3, [r4, #5]
 80124fc:	b008      	add	sp, #32
 80124fe:	bd10      	pop	{r4, pc}

08012500 <uxr_read_delete_session_status>:
 8012500:	b510      	push	{r4, lr}
 8012502:	4604      	mov	r4, r0
 8012504:	b084      	sub	sp, #16
 8012506:	4608      	mov	r0, r1
 8012508:	a902      	add	r1, sp, #8
 801250a:	f001 fef9 	bl	8014300 <uxr_deserialize_STATUS_Payload>
 801250e:	88e3      	ldrh	r3, [r4, #6]
 8012510:	2b02      	cmp	r3, #2
 8012512:	d001      	beq.n	8012518 <uxr_read_delete_session_status+0x18>
 8012514:	b004      	add	sp, #16
 8012516:	bd10      	pop	{r4, pc}
 8012518:	f10d 000a 	add.w	r0, sp, #10
 801251c:	f7fe fe64 	bl	80111e8 <uxr_object_id_from_raw>
 8012520:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012524:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012528:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801252c:	b29b      	uxth	r3, r3
 801252e:	2b02      	cmp	r3, #2
 8012530:	bf04      	itt	eq
 8012532:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012536:	7163      	strbeq	r3, [r4, #5]
 8012538:	b004      	add	sp, #16
 801253a:	bd10      	pop	{r4, pc}

0801253c <uxr_stamp_create_session_header>:
 801253c:	b510      	push	{r4, lr}
 801253e:	2208      	movs	r2, #8
 8012540:	b08a      	sub	sp, #40	@ 0x28
 8012542:	4604      	mov	r4, r0
 8012544:	eb0d 0002 	add.w	r0, sp, r2
 8012548:	f7fa fe8e 	bl	800d268 <ucdr_init_buffer>
 801254c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012550:	9400      	str	r4, [sp, #0]
 8012552:	2300      	movs	r3, #0
 8012554:	461a      	mov	r2, r3
 8012556:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801255a:	a802      	add	r0, sp, #8
 801255c:	f001 f854 	bl	8013608 <uxr_serialize_message_header>
 8012560:	b00a      	add	sp, #40	@ 0x28
 8012562:	bd10      	pop	{r4, pc}

08012564 <uxr_stamp_session_header>:
 8012564:	b530      	push	{r4, r5, lr}
 8012566:	b08d      	sub	sp, #52	@ 0x34
 8012568:	4604      	mov	r4, r0
 801256a:	460d      	mov	r5, r1
 801256c:	9203      	str	r2, [sp, #12]
 801256e:	4619      	mov	r1, r3
 8012570:	a804      	add	r0, sp, #16
 8012572:	2208      	movs	r2, #8
 8012574:	f7fa fe78 	bl	800d268 <ucdr_init_buffer>
 8012578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801257c:	9b03      	ldr	r3, [sp, #12]
 801257e:	9400      	str	r4, [sp, #0]
 8012580:	462a      	mov	r2, r5
 8012582:	a804      	add	r0, sp, #16
 8012584:	f001 f840 	bl	8013608 <uxr_serialize_message_header>
 8012588:	b00d      	add	sp, #52	@ 0x34
 801258a:	bd30      	pop	{r4, r5, pc}

0801258c <uxr_read_session_header>:
 801258c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012590:	4607      	mov	r7, r0
 8012592:	b084      	sub	sp, #16
 8012594:	4608      	mov	r0, r1
 8012596:	460c      	mov	r4, r1
 8012598:	4615      	mov	r5, r2
 801259a:	461e      	mov	r6, r3
 801259c:	f7fa fe94 	bl	800d2c8 <ucdr_buffer_remaining>
 80125a0:	2808      	cmp	r0, #8
 80125a2:	d803      	bhi.n	80125ac <uxr_read_session_header+0x20>
 80125a4:	2000      	movs	r0, #0
 80125a6:	b004      	add	sp, #16
 80125a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ac:	f10d 080c 	add.w	r8, sp, #12
 80125b0:	4633      	mov	r3, r6
 80125b2:	462a      	mov	r2, r5
 80125b4:	f8cd 8000 	str.w	r8, [sp]
 80125b8:	4620      	mov	r0, r4
 80125ba:	f10d 010b 	add.w	r1, sp, #11
 80125be:	f001 f841 	bl	8013644 <uxr_deserialize_message_header>
 80125c2:	783a      	ldrb	r2, [r7, #0]
 80125c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80125c8:	4293      	cmp	r3, r2
 80125ca:	d1eb      	bne.n	80125a4 <uxr_read_session_header+0x18>
 80125cc:	061b      	lsls	r3, r3, #24
 80125ce:	d41c      	bmi.n	801260a <uxr_read_session_header+0x7e>
 80125d0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80125d4:	787b      	ldrb	r3, [r7, #1]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d003      	beq.n	80125e2 <uxr_read_session_header+0x56>
 80125da:	2001      	movs	r0, #1
 80125dc:	f080 0001 	eor.w	r0, r0, #1
 80125e0:	e7e1      	b.n	80125a6 <uxr_read_session_header+0x1a>
 80125e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80125e6:	78bb      	ldrb	r3, [r7, #2]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	f107 0102 	add.w	r1, r7, #2
 80125ee:	d1f4      	bne.n	80125da <uxr_read_session_header+0x4e>
 80125f0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80125f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d1ee      	bne.n	80125da <uxr_read_session_header+0x4e>
 80125fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012600:	784b      	ldrb	r3, [r1, #1]
 8012602:	429a      	cmp	r2, r3
 8012604:	d1e9      	bne.n	80125da <uxr_read_session_header+0x4e>
 8012606:	2000      	movs	r0, #0
 8012608:	e7e8      	b.n	80125dc <uxr_read_session_header+0x50>
 801260a:	2001      	movs	r0, #1
 801260c:	e7cb      	b.n	80125a6 <uxr_read_session_header+0x1a>
 801260e:	bf00      	nop

08012610 <uxr_session_header_offset>:
 8012610:	f990 3000 	ldrsb.w	r3, [r0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	bfac      	ite	ge
 8012618:	2008      	movge	r0, #8
 801261a:	2004      	movlt	r0, #4
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop

08012620 <uxr_init_base_object_request>:
 8012620:	b510      	push	{r4, lr}
 8012622:	88c3      	ldrh	r3, [r0, #6]
 8012624:	b082      	sub	sp, #8
 8012626:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801262a:	9101      	str	r1, [sp, #4]
 801262c:	f1a3 010a 	sub.w	r1, r3, #10
 8012630:	b289      	uxth	r1, r1
 8012632:	42a1      	cmp	r1, r4
 8012634:	d80e      	bhi.n	8012654 <uxr_init_base_object_request+0x34>
 8012636:	3301      	adds	r3, #1
 8012638:	b29c      	uxth	r4, r3
 801263a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801263e:	b2db      	uxtb	r3, r3
 8012640:	80c4      	strh	r4, [r0, #6]
 8012642:	9801      	ldr	r0, [sp, #4]
 8012644:	7011      	strb	r1, [r2, #0]
 8012646:	7053      	strb	r3, [r2, #1]
 8012648:	1c91      	adds	r1, r2, #2
 801264a:	f7fe fde1 	bl	8011210 <uxr_object_id_to_raw>
 801264e:	4620      	mov	r0, r4
 8012650:	b002      	add	sp, #8
 8012652:	bd10      	pop	{r4, pc}
 8012654:	230a      	movs	r3, #10
 8012656:	2100      	movs	r1, #0
 8012658:	461c      	mov	r4, r3
 801265a:	e7f1      	b.n	8012640 <uxr_init_base_object_request+0x20>

0801265c <uxr_parse_base_object_request>:
 801265c:	b570      	push	{r4, r5, r6, lr}
 801265e:	4604      	mov	r4, r0
 8012660:	3002      	adds	r0, #2
 8012662:	460d      	mov	r5, r1
 8012664:	4616      	mov	r6, r2
 8012666:	f7fe fdbf 	bl	80111e8 <uxr_object_id_from_raw>
 801266a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801266e:	8028      	strh	r0, [r5, #0]
 8012670:	806b      	strh	r3, [r5, #2]
 8012672:	7822      	ldrb	r2, [r4, #0]
 8012674:	7863      	ldrb	r3, [r4, #1]
 8012676:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801267a:	8033      	strh	r3, [r6, #0]
 801267c:	bd70      	pop	{r4, r5, r6, pc}
 801267e:	bf00      	nop

08012680 <uxr_init_framing_io>:
 8012680:	2300      	movs	r3, #0
 8012682:	7041      	strb	r1, [r0, #1]
 8012684:	7003      	strb	r3, [r0, #0]
 8012686:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop

0801268c <uxr_write_framed_msg>:
 801268c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012690:	4617      	mov	r7, r2
 8012692:	7842      	ldrb	r2, [r0, #1]
 8012694:	b083      	sub	sp, #12
 8012696:	460e      	mov	r6, r1
 8012698:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801269c:	469a      	mov	sl, r3
 801269e:	2901      	cmp	r1, #1
 80126a0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80126a4:	4604      	mov	r4, r0
 80126a6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80126aa:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80126ae:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80126b2:	f240 8137 	bls.w	8012924 <uxr_write_framed_msg+0x298>
 80126b6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80126ba:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80126be:	2901      	cmp	r1, #1
 80126c0:	f04f 0202 	mov.w	r2, #2
 80126c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80126c8:	f240 808f 	bls.w	80127ea <uxr_write_framed_msg+0x15e>
 80126cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126ce:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80126d2:	b2dd      	uxtb	r5, r3
 80126d4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80126d8:	2203      	movs	r2, #3
 80126da:	2901      	cmp	r1, #1
 80126dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80126e0:	f240 809a 	bls.w	8012818 <uxr_write_framed_msg+0x18c>
 80126e4:	18a1      	adds	r1, r4, r2
 80126e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126e8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80126ec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80126f0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80126f4:	3201      	adds	r2, #1
 80126f6:	2801      	cmp	r0, #1
 80126f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80126fc:	f240 80a0 	bls.w	8012840 <uxr_write_framed_msg+0x1b4>
 8012700:	18a0      	adds	r0, r4, r2
 8012702:	3201      	adds	r2, #1
 8012704:	b2d2      	uxtb	r2, r2
 8012706:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801270a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801270e:	2b00      	cmp	r3, #0
 8012710:	f000 80a9 	beq.w	8012866 <uxr_write_framed_msg+0x1da>
 8012714:	f04f 0900 	mov.w	r9, #0
 8012718:	46c8      	mov	r8, r9
 801271a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801271e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012722:	2901      	cmp	r1, #1
 8012724:	f240 80c3 	bls.w	80128ae <uxr_write_framed_msg+0x222>
 8012728:	2a29      	cmp	r2, #41	@ 0x29
 801272a:	f200 809f 	bhi.w	801286c <uxr_write_framed_msg+0x1e0>
 801272e:	18a1      	adds	r1, r4, r2
 8012730:	3201      	adds	r2, #1
 8012732:	b2d2      	uxtb	r2, r2
 8012734:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012738:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801273c:	ea89 0303 	eor.w	r3, r9, r3
 8012740:	498c      	ldr	r1, [pc, #560]	@ (8012974 <uxr_write_framed_msg+0x2e8>)
 8012742:	b2db      	uxtb	r3, r3
 8012744:	f108 0801 	add.w	r8, r8, #1
 8012748:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801274c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012752:	4543      	cmp	r3, r8
 8012754:	d8e1      	bhi.n	801271a <uxr_write_framed_msg+0x8e>
 8012756:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801275a:	fa5f f889 	uxtb.w	r8, r9
 801275e:	9301      	str	r3, [sp, #4]
 8012760:	f04f 0900 	mov.w	r9, #0
 8012764:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8012768:	fa5f f18a 	uxtb.w	r1, sl
 801276c:	2901      	cmp	r1, #1
 801276e:	d921      	bls.n	80127b4 <uxr_write_framed_msg+0x128>
 8012770:	2a29      	cmp	r2, #41	@ 0x29
 8012772:	f240 80af 	bls.w	80128d4 <uxr_write_framed_msg+0x248>
 8012776:	2500      	movs	r5, #0
 8012778:	e000      	b.n	801277c <uxr_write_framed_msg+0xf0>
 801277a:	b160      	cbz	r0, 8012796 <uxr_write_framed_msg+0x10a>
 801277c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012780:	1b52      	subs	r2, r2, r5
 8012782:	465b      	mov	r3, fp
 8012784:	4421      	add	r1, r4
 8012786:	4638      	mov	r0, r7
 8012788:	47b0      	blx	r6
 801278a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801278e:	4405      	add	r5, r0
 8012790:	4295      	cmp	r5, r2
 8012792:	d3f2      	bcc.n	801277a <uxr_write_framed_msg+0xee>
 8012794:	d003      	beq.n	801279e <uxr_write_framed_msg+0x112>
 8012796:	2000      	movs	r0, #0
 8012798:	b003      	add	sp, #12
 801279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801279e:	fa5f f18a 	uxtb.w	r1, sl
 80127a2:	f04f 0300 	mov.w	r3, #0
 80127a6:	2901      	cmp	r1, #1
 80127a8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80127ac:	f04f 0200 	mov.w	r2, #0
 80127b0:	f200 8090 	bhi.w	80128d4 <uxr_write_framed_msg+0x248>
 80127b4:	1c51      	adds	r1, r2, #1
 80127b6:	b2c9      	uxtb	r1, r1
 80127b8:	2929      	cmp	r1, #41	@ 0x29
 80127ba:	d8dc      	bhi.n	8012776 <uxr_write_framed_msg+0xea>
 80127bc:	18a5      	adds	r5, r4, r2
 80127be:	4421      	add	r1, r4
 80127c0:	3202      	adds	r2, #2
 80127c2:	f088 0820 	eor.w	r8, r8, #32
 80127c6:	4648      	mov	r0, r9
 80127c8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80127cc:	b2d2      	uxtb	r2, r2
 80127ce:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80127d2:	f04f 0901 	mov.w	r9, #1
 80127d6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80127da:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80127de:	2800      	cmp	r0, #0
 80127e0:	f040 8085 	bne.w	80128ee <uxr_write_framed_msg+0x262>
 80127e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80127e8:	e7bc      	b.n	8012764 <uxr_write_framed_msg+0xd8>
 80127ea:	4611      	mov	r1, r2
 80127ec:	f04f 0c03 	mov.w	ip, #3
 80127f0:	2204      	movs	r2, #4
 80127f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127f4:	4421      	add	r1, r4
 80127f6:	b2dd      	uxtb	r5, r3
 80127f8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80127fc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012800:	44a4      	add	ip, r4
 8012802:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012806:	f080 0020 	eor.w	r0, r0, #32
 801280a:	2901      	cmp	r1, #1
 801280c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012810:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012814:	f63f af66 	bhi.w	80126e4 <uxr_write_framed_msg+0x58>
 8012818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801281a:	18a0      	adds	r0, r4, r2
 801281c:	f085 0520 	eor.w	r5, r5, #32
 8012820:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012824:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012828:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801282c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012830:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012834:	3202      	adds	r2, #2
 8012836:	2801      	cmp	r0, #1
 8012838:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801283c:	f63f af60 	bhi.w	8012700 <uxr_write_framed_msg+0x74>
 8012840:	1c50      	adds	r0, r2, #1
 8012842:	18a5      	adds	r5, r4, r2
 8012844:	fa54 f080 	uxtab	r0, r4, r0
 8012848:	3202      	adds	r2, #2
 801284a:	f081 0120 	eor.w	r1, r1, #32
 801284e:	b2d2      	uxtb	r2, r2
 8012850:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012854:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012858:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801285c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012860:	2b00      	cmp	r3, #0
 8012862:	f47f af57 	bne.w	8012714 <uxr_write_framed_msg+0x88>
 8012866:	9301      	str	r3, [sp, #4]
 8012868:	4698      	mov	r8, r3
 801286a:	e779      	b.n	8012760 <uxr_write_framed_msg+0xd4>
 801286c:	2500      	movs	r5, #0
 801286e:	e001      	b.n	8012874 <uxr_write_framed_msg+0x1e8>
 8012870:	2800      	cmp	r0, #0
 8012872:	d090      	beq.n	8012796 <uxr_write_framed_msg+0x10a>
 8012874:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012878:	1b52      	subs	r2, r2, r5
 801287a:	465b      	mov	r3, fp
 801287c:	4421      	add	r1, r4
 801287e:	4638      	mov	r0, r7
 8012880:	47b0      	blx	r6
 8012882:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012886:	4405      	add	r5, r0
 8012888:	4295      	cmp	r5, r2
 801288a:	d3f1      	bcc.n	8012870 <uxr_write_framed_msg+0x1e4>
 801288c:	d183      	bne.n	8012796 <uxr_write_framed_msg+0x10a>
 801288e:	f04f 0300 	mov.w	r3, #0
 8012892:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012896:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012898:	4543      	cmp	r3, r8
 801289a:	d964      	bls.n	8012966 <uxr_write_framed_msg+0x2da>
 801289c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80128a0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80128a4:	2901      	cmp	r1, #1
 80128a6:	f04f 0200 	mov.w	r2, #0
 80128aa:	f63f af3d 	bhi.w	8012728 <uxr_write_framed_msg+0x9c>
 80128ae:	1c51      	adds	r1, r2, #1
 80128b0:	b2c9      	uxtb	r1, r1
 80128b2:	2929      	cmp	r1, #41	@ 0x29
 80128b4:	d8da      	bhi.n	801286c <uxr_write_framed_msg+0x1e0>
 80128b6:	18a0      	adds	r0, r4, r2
 80128b8:	4421      	add	r1, r4
 80128ba:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80128be:	3202      	adds	r2, #2
 80128c0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80128c4:	b2d2      	uxtb	r2, r2
 80128c6:	f083 0020 	eor.w	r0, r3, #32
 80128ca:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80128ce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80128d2:	e733      	b.n	801273c <uxr_write_framed_msg+0xb0>
 80128d4:	18a1      	adds	r1, r4, r2
 80128d6:	3201      	adds	r2, #1
 80128d8:	4648      	mov	r0, r9
 80128da:	b2d2      	uxtb	r2, r2
 80128dc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80128e0:	f04f 0901 	mov.w	r9, #1
 80128e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80128e8:	2800      	cmp	r0, #0
 80128ea:	f43f af7b 	beq.w	80127e4 <uxr_write_framed_msg+0x158>
 80128ee:	2500      	movs	r5, #0
 80128f0:	e002      	b.n	80128f8 <uxr_write_framed_msg+0x26c>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	f43f af4f 	beq.w	8012796 <uxr_write_framed_msg+0x10a>
 80128f8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80128fc:	1b52      	subs	r2, r2, r5
 80128fe:	465b      	mov	r3, fp
 8012900:	4421      	add	r1, r4
 8012902:	4638      	mov	r0, r7
 8012904:	47b0      	blx	r6
 8012906:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801290a:	4405      	add	r5, r0
 801290c:	4295      	cmp	r5, r2
 801290e:	d3f0      	bcc.n	80128f2 <uxr_write_framed_msg+0x266>
 8012910:	f47f af41 	bne.w	8012796 <uxr_write_framed_msg+0x10a>
 8012914:	2300      	movs	r3, #0
 8012916:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801291a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801291c:	b298      	uxth	r0, r3
 801291e:	b003      	add	sp, #12
 8012920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012924:	217d      	movs	r1, #125	@ 0x7d
 8012926:	f082 0220 	eor.w	r2, r2, #32
 801292a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801292e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012932:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012936:	2901      	cmp	r1, #1
 8012938:	f04f 0203 	mov.w	r2, #3
 801293c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012940:	d804      	bhi.n	801294c <uxr_write_framed_msg+0x2c0>
 8012942:	4611      	mov	r1, r2
 8012944:	f04f 0c04 	mov.w	ip, #4
 8012948:	2205      	movs	r2, #5
 801294a:	e752      	b.n	80127f2 <uxr_write_framed_msg+0x166>
 801294c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801294e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012952:	b2dd      	uxtb	r5, r3
 8012954:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012958:	2204      	movs	r2, #4
 801295a:	2901      	cmp	r1, #1
 801295c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012960:	f63f aec0 	bhi.w	80126e4 <uxr_write_framed_msg+0x58>
 8012964:	e758      	b.n	8012818 <uxr_write_framed_msg+0x18c>
 8012966:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801296a:	fa5f f889 	uxtb.w	r8, r9
 801296e:	9301      	str	r3, [sp, #4]
 8012970:	2200      	movs	r2, #0
 8012972:	e6f5      	b.n	8012760 <uxr_write_framed_msg+0xd4>
 8012974:	0801d6cc 	.word	0x0801d6cc

08012978 <uxr_framing_read_transport>:
 8012978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297c:	4604      	mov	r4, r0
 801297e:	b083      	sub	sp, #12
 8012980:	461f      	mov	r7, r3
 8012982:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8012986:	4689      	mov	r9, r1
 8012988:	4692      	mov	sl, r2
 801298a:	f000 fc89 	bl	80132a0 <uxr_millis>
 801298e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012992:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8012996:	42b3      	cmp	r3, r6
 8012998:	4680      	mov	r8, r0
 801299a:	d061      	beq.n	8012a60 <uxr_framing_read_transport+0xe8>
 801299c:	d81c      	bhi.n	80129d8 <uxr_framing_read_transport+0x60>
 801299e:	1e75      	subs	r5, r6, #1
 80129a0:	1aed      	subs	r5, r5, r3
 80129a2:	b2ed      	uxtb	r5, r5
 80129a4:	2600      	movs	r6, #0
 80129a6:	455d      	cmp	r5, fp
 80129a8:	d81f      	bhi.n	80129ea <uxr_framing_read_transport+0x72>
 80129aa:	19ab      	adds	r3, r5, r6
 80129ac:	455b      	cmp	r3, fp
 80129ae:	bf84      	itt	hi
 80129b0:	ebab 0605 	subhi.w	r6, fp, r5
 80129b4:	b2f6      	uxtbhi	r6, r6
 80129b6:	b9ed      	cbnz	r5, 80129f4 <uxr_framing_read_transport+0x7c>
 80129b8:	f04f 0b00 	mov.w	fp, #0
 80129bc:	f000 fc70 	bl	80132a0 <uxr_millis>
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	eba0 0808 	sub.w	r8, r0, r8
 80129c6:	eba3 0308 	sub.w	r3, r3, r8
 80129ca:	4658      	mov	r0, fp
 80129cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80129d0:	603b      	str	r3, [r7, #0]
 80129d2:	b003      	add	sp, #12
 80129d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d8:	2e00      	cmp	r6, #0
 80129da:	d049      	beq.n	8012a70 <uxr_framing_read_transport+0xf8>
 80129dc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80129e0:	b2ed      	uxtb	r5, r5
 80129e2:	3e01      	subs	r6, #1
 80129e4:	455d      	cmp	r5, fp
 80129e6:	b2f6      	uxtb	r6, r6
 80129e8:	d9df      	bls.n	80129aa <uxr_framing_read_transport+0x32>
 80129ea:	fa5f f58b 	uxtb.w	r5, fp
 80129ee:	2600      	movs	r6, #0
 80129f0:	2d00      	cmp	r5, #0
 80129f2:	d0e1      	beq.n	80129b8 <uxr_framing_read_transport+0x40>
 80129f4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80129f8:	3102      	adds	r1, #2
 80129fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129fc:	9300      	str	r3, [sp, #0]
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	4421      	add	r1, r4
 8012a02:	462a      	mov	r2, r5
 8012a04:	4650      	mov	r0, sl
 8012a06:	47c8      	blx	r9
 8012a08:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8012a78 <uxr_framing_read_transport+0x100>)
 8012a0e:	4403      	add	r3, r0
 8012a10:	0859      	lsrs	r1, r3, #1
 8012a12:	fba2 2101 	umull	r2, r1, r2, r1
 8012a16:	0889      	lsrs	r1, r1, #2
 8012a18:	222a      	movs	r2, #42	@ 0x2a
 8012a1a:	fb02 3111 	mls	r1, r2, r1, r3
 8012a1e:	4683      	mov	fp, r0
 8012a20:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d0c7      	beq.n	80129b8 <uxr_framing_read_transport+0x40>
 8012a28:	42a8      	cmp	r0, r5
 8012a2a:	d1c7      	bne.n	80129bc <uxr_framing_read_transport+0x44>
 8012a2c:	2e00      	cmp	r6, #0
 8012a2e:	d0c5      	beq.n	80129bc <uxr_framing_read_transport+0x44>
 8012a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a32:	9300      	str	r3, [sp, #0]
 8012a34:	3102      	adds	r1, #2
 8012a36:	4632      	mov	r2, r6
 8012a38:	4421      	add	r1, r4
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	4650      	mov	r0, sl
 8012a3e:	47c8      	blx	r9
 8012a40:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a44:	4a0c      	ldr	r2, [pc, #48]	@ (8012a78 <uxr_framing_read_transport+0x100>)
 8012a46:	180b      	adds	r3, r1, r0
 8012a48:	0859      	lsrs	r1, r3, #1
 8012a4a:	fba2 1201 	umull	r1, r2, r2, r1
 8012a4e:	0892      	lsrs	r2, r2, #2
 8012a50:	212a      	movs	r1, #42	@ 0x2a
 8012a52:	fb01 3312 	mls	r3, r1, r2, r3
 8012a56:	eb00 0b05 	add.w	fp, r0, r5
 8012a5a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012a5e:	e7ad      	b.n	80129bc <uxr_framing_read_transport+0x44>
 8012a60:	2600      	movs	r6, #0
 8012a62:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012a66:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012a68:	d9bf      	bls.n	80129ea <uxr_framing_read_transport+0x72>
 8012a6a:	2102      	movs	r1, #2
 8012a6c:	2529      	movs	r5, #41	@ 0x29
 8012a6e:	e7c4      	b.n	80129fa <uxr_framing_read_transport+0x82>
 8012a70:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012a74:	b2ed      	uxtb	r5, r5
 8012a76:	e796      	b.n	80129a6 <uxr_framing_read_transport+0x2e>
 8012a78:	30c30c31 	.word	0x30c30c31

08012a7c <uxr_read_framed_msg>:
 8012a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a80:	461e      	mov	r6, r3
 8012a82:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012a86:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012a8a:	429d      	cmp	r5, r3
 8012a8c:	b083      	sub	sp, #12
 8012a8e:	4604      	mov	r4, r0
 8012a90:	4688      	mov	r8, r1
 8012a92:	4691      	mov	r9, r2
 8012a94:	f000 8188 	beq.w	8012da8 <uxr_read_framed_msg+0x32c>
 8012a98:	7823      	ldrb	r3, [r4, #0]
 8012a9a:	4dc1      	ldr	r5, [pc, #772]	@ (8012da0 <uxr_read_framed_msg+0x324>)
 8012a9c:	4fc1      	ldr	r7, [pc, #772]	@ (8012da4 <uxr_read_framed_msg+0x328>)
 8012a9e:	2b07      	cmp	r3, #7
 8012aa0:	d8fd      	bhi.n	8012a9e <uxr_read_framed_msg+0x22>
 8012aa2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012aa6:	0115      	.short	0x0115
 8012aa8:	00d600f6 	.word	0x00d600f6
 8012aac:	009000b9 	.word	0x009000b9
 8012ab0:	0030004d 	.word	0x0030004d
 8012ab4:	0008      	.short	0x0008
 8012ab6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012aba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012abe:	4299      	cmp	r1, r3
 8012ac0:	f000 814a 	beq.w	8012d58 <uxr_read_framed_msg+0x2dc>
 8012ac4:	18e2      	adds	r2, r4, r3
 8012ac6:	7892      	ldrb	r2, [r2, #2]
 8012ac8:	2a7d      	cmp	r2, #125	@ 0x7d
 8012aca:	f000 8199 	beq.w	8012e00 <uxr_read_framed_msg+0x384>
 8012ace:	3301      	adds	r3, #1
 8012ad0:	0858      	lsrs	r0, r3, #1
 8012ad2:	fba5 1000 	umull	r1, r0, r5, r0
 8012ad6:	0880      	lsrs	r0, r0, #2
 8012ad8:	212a      	movs	r1, #42	@ 0x2a
 8012ada:	fb01 3310 	mls	r3, r1, r0, r3
 8012ade:	2a7e      	cmp	r2, #126	@ 0x7e
 8012ae0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012ae4:	f000 8252 	beq.w	8012f8c <uxr_read_framed_msg+0x510>
 8012ae8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012aea:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012aec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	2200      	movs	r2, #0
 8012af4:	4299      	cmp	r1, r3
 8012af6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012af8:	7022      	strb	r2, [r4, #0]
 8012afa:	f000 8179 	beq.w	8012df0 <uxr_read_framed_msg+0x374>
 8012afe:	2000      	movs	r0, #0
 8012b00:	b003      	add	sp, #12
 8012b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b06:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012b0a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012b0e:	4299      	cmp	r1, r3
 8012b10:	f000 8131 	beq.w	8012d76 <uxr_read_framed_msg+0x2fa>
 8012b14:	18e2      	adds	r2, r4, r3
 8012b16:	7890      	ldrb	r0, [r2, #2]
 8012b18:	287d      	cmp	r0, #125	@ 0x7d
 8012b1a:	f000 8190 	beq.w	8012e3e <uxr_read_framed_msg+0x3c2>
 8012b1e:	3301      	adds	r3, #1
 8012b20:	085a      	lsrs	r2, r3, #1
 8012b22:	fba5 1202 	umull	r1, r2, r5, r2
 8012b26:	0892      	lsrs	r2, r2, #2
 8012b28:	212a      	movs	r1, #42	@ 0x2a
 8012b2a:	fb01 3312 	mls	r3, r1, r2, r3
 8012b2e:	287e      	cmp	r0, #126	@ 0x7e
 8012b30:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b34:	f000 821a 	beq.w	8012f6c <uxr_read_framed_msg+0x4f0>
 8012b38:	2307      	movs	r3, #7
 8012b3a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012b3c:	7023      	strb	r3, [r4, #0]
 8012b3e:	e7ae      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012b40:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012b42:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012b46:	459e      	cmp	lr, r3
 8012b48:	d938      	bls.n	8012bbc <uxr_read_framed_msg+0x140>
 8012b4a:	ee07 8a90 	vmov	s15, r8
 8012b4e:	212a      	movs	r1, #42	@ 0x2a
 8012b50:	e020      	b.n	8012b94 <uxr_read_framed_msg+0x118>
 8012b52:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012b56:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012b5a:	f000 80d4 	beq.w	8012d06 <uxr_read_framed_msg+0x28a>
 8012b5e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012b62:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012b66:	f000 8219 	beq.w	8012f9c <uxr_read_framed_msg+0x520>
 8012b6a:	f806 c003 	strb.w	ip, [r6, r3]
 8012b6e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012b72:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012b74:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012b78:	ea8a 000c 	eor.w	r0, sl, ip
 8012b7c:	b2c0      	uxtb	r0, r0
 8012b7e:	3301      	adds	r3, #1
 8012b80:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012b8a:	4573      	cmp	r3, lr
 8012b8c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012b8e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012b90:	f080 8120 	bcs.w	8012dd4 <uxr_read_framed_msg+0x358>
 8012b94:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012b98:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012b9c:	f100 0c01 	add.w	ip, r0, #1
 8012ba0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012ba4:	fba5 8202 	umull	r8, r2, r5, r2
 8012ba8:	0892      	lsrs	r2, r2, #2
 8012baa:	4582      	cmp	sl, r0
 8012bac:	eb04 0b00 	add.w	fp, r4, r0
 8012bb0:	fb01 c212 	mls	r2, r1, r2, ip
 8012bb4:	d1cd      	bne.n	8012b52 <uxr_read_framed_msg+0xd6>
 8012bb6:	ee17 8a90 	vmov	r8, s15
 8012bba:	459e      	cmp	lr, r3
 8012bbc:	f040 8111 	bne.w	8012de2 <uxr_read_framed_msg+0x366>
 8012bc0:	2306      	movs	r3, #6
 8012bc2:	7023      	strb	r3, [r4, #0]
 8012bc4:	e76b      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012bc6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012bca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012bce:	4298      	cmp	r0, r3
 8012bd0:	f000 80c2 	beq.w	8012d58 <uxr_read_framed_msg+0x2dc>
 8012bd4:	18e2      	adds	r2, r4, r3
 8012bd6:	7891      	ldrb	r1, [r2, #2]
 8012bd8:	297d      	cmp	r1, #125	@ 0x7d
 8012bda:	f000 814c 	beq.w	8012e76 <uxr_read_framed_msg+0x3fa>
 8012bde:	3301      	adds	r3, #1
 8012be0:	085a      	lsrs	r2, r3, #1
 8012be2:	fba5 0202 	umull	r0, r2, r5, r2
 8012be6:	0892      	lsrs	r2, r2, #2
 8012be8:	202a      	movs	r0, #42	@ 0x2a
 8012bea:	fb00 3312 	mls	r3, r0, r2, r3
 8012bee:	297e      	cmp	r1, #126	@ 0x7e
 8012bf0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012bf4:	f000 81ca 	beq.w	8012f8c <uxr_read_framed_msg+0x510>
 8012bf8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012bfa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012bfe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	2000      	movs	r0, #0
 8012c04:	428b      	cmp	r3, r1
 8012c06:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012c08:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012c0a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012c0c:	f240 80df 	bls.w	8012dce <uxr_read_framed_msg+0x352>
 8012c10:	7020      	strb	r0, [r4, #0]
 8012c12:	b003      	add	sp, #12
 8012c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c18:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012c1c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012c20:	4299      	cmp	r1, r3
 8012c22:	f000 80a8 	beq.w	8012d76 <uxr_read_framed_msg+0x2fa>
 8012c26:	18e2      	adds	r2, r4, r3
 8012c28:	7890      	ldrb	r0, [r2, #2]
 8012c2a:	287d      	cmp	r0, #125	@ 0x7d
 8012c2c:	f000 8164 	beq.w	8012ef8 <uxr_read_framed_msg+0x47c>
 8012c30:	3301      	adds	r3, #1
 8012c32:	085a      	lsrs	r2, r3, #1
 8012c34:	fba5 1202 	umull	r1, r2, r5, r2
 8012c38:	0892      	lsrs	r2, r2, #2
 8012c3a:	212a      	movs	r1, #42	@ 0x2a
 8012c3c:	fb01 3312 	mls	r3, r1, r2, r3
 8012c40:	287e      	cmp	r0, #126	@ 0x7e
 8012c42:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c46:	f000 8191 	beq.w	8012f6c <uxr_read_framed_msg+0x4f0>
 8012c4a:	2304      	movs	r3, #4
 8012c4c:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012c4e:	7023      	strb	r3, [r4, #0]
 8012c50:	e725      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012c52:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012c56:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012c5a:	4290      	cmp	r0, r2
 8012c5c:	f000 80b3 	beq.w	8012dc6 <uxr_read_framed_msg+0x34a>
 8012c60:	18a3      	adds	r3, r4, r2
 8012c62:	7899      	ldrb	r1, [r3, #2]
 8012c64:	297d      	cmp	r1, #125	@ 0x7d
 8012c66:	f000 8164 	beq.w	8012f32 <uxr_read_framed_msg+0x4b6>
 8012c6a:	3201      	adds	r2, #1
 8012c6c:	0850      	lsrs	r0, r2, #1
 8012c6e:	fba5 3000 	umull	r3, r0, r5, r0
 8012c72:	0880      	lsrs	r0, r0, #2
 8012c74:	232a      	movs	r3, #42	@ 0x2a
 8012c76:	fb03 2210 	mls	r2, r3, r0, r2
 8012c7a:	297e      	cmp	r1, #126	@ 0x7e
 8012c7c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012c80:	f000 8188 	beq.w	8012f94 <uxr_read_framed_msg+0x518>
 8012c84:	7863      	ldrb	r3, [r4, #1]
 8012c86:	428b      	cmp	r3, r1
 8012c88:	bf0c      	ite	eq
 8012c8a:	2303      	moveq	r3, #3
 8012c8c:	2300      	movne	r3, #0
 8012c8e:	7023      	strb	r3, [r4, #0]
 8012c90:	e705      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012c92:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012c96:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	4299      	cmp	r1, r3
 8012c9e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012ca2:	d06c      	beq.n	8012d7e <uxr_read_framed_msg+0x302>
 8012ca4:	18e2      	adds	r2, r4, r3
 8012ca6:	7890      	ldrb	r0, [r2, #2]
 8012ca8:	287d      	cmp	r0, #125	@ 0x7d
 8012caa:	f000 8101 	beq.w	8012eb0 <uxr_read_framed_msg+0x434>
 8012cae:	3301      	adds	r3, #1
 8012cb0:	085a      	lsrs	r2, r3, #1
 8012cb2:	fba5 1202 	umull	r1, r2, r5, r2
 8012cb6:	0892      	lsrs	r2, r2, #2
 8012cb8:	212a      	movs	r1, #42	@ 0x2a
 8012cba:	fb01 3312 	mls	r3, r1, r2, r3
 8012cbe:	287e      	cmp	r0, #126	@ 0x7e
 8012cc0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012cc4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012cc8:	d059      	beq.n	8012d7e <uxr_read_framed_msg+0x302>
 8012cca:	2302      	movs	r3, #2
 8012ccc:	7023      	strb	r3, [r4, #0]
 8012cce:	e6e6      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012cd0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012cd4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012cd8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012cdc:	1c51      	adds	r1, r2, #1
 8012cde:	084b      	lsrs	r3, r1, #1
 8012ce0:	fba5 c303 	umull	ip, r3, r5, r3
 8012ce4:	089b      	lsrs	r3, r3, #2
 8012ce6:	fb0e 1313 	mls	r3, lr, r3, r1
 8012cea:	4592      	cmp	sl, r2
 8012cec:	eb04 0002 	add.w	r0, r4, r2
 8012cf0:	b2da      	uxtb	r2, r3
 8012cf2:	f43f af04 	beq.w	8012afe <uxr_read_framed_msg+0x82>
 8012cf6:	7883      	ldrb	r3, [r0, #2]
 8012cf8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012cfc:	2b7e      	cmp	r3, #126	@ 0x7e
 8012cfe:	d1ed      	bne.n	8012cdc <uxr_read_framed_msg+0x260>
 8012d00:	2301      	movs	r3, #1
 8012d02:	7023      	strb	r3, [r4, #0]
 8012d04:	e6cb      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012d06:	f100 0c01 	add.w	ip, r0, #1
 8012d0a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012d0e:	fba5 8202 	umull	r8, r2, r5, r2
 8012d12:	0892      	lsrs	r2, r2, #2
 8012d14:	fb01 c212 	mls	r2, r1, r2, ip
 8012d18:	eb04 0c02 	add.w	ip, r4, r2
 8012d1c:	b2d2      	uxtb	r2, r2
 8012d1e:	4592      	cmp	sl, r2
 8012d20:	f100 0002 	add.w	r0, r0, #2
 8012d24:	f43f af47 	beq.w	8012bb6 <uxr_read_framed_msg+0x13a>
 8012d28:	0842      	lsrs	r2, r0, #1
 8012d2a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012d2e:	fba5 8202 	umull	r8, r2, r5, r2
 8012d32:	0892      	lsrs	r2, r2, #2
 8012d34:	fb01 0012 	mls	r0, r1, r2, r0
 8012d38:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012d3c:	f08a 0c20 	eor.w	ip, sl, #32
 8012d40:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012d44:	f47f af11 	bne.w	8012b6a <uxr_read_framed_msg+0xee>
 8012d48:	459e      	cmp	lr, r3
 8012d4a:	ee17 8a90 	vmov	r8, s15
 8012d4e:	f43f af37 	beq.w	8012bc0 <uxr_read_framed_msg+0x144>
 8012d52:	2301      	movs	r3, #1
 8012d54:	7023      	strb	r3, [r4, #0]
 8012d56:	e6a2      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	9301      	str	r3, [sp, #4]
 8012d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d62:	464a      	mov	r2, r9
 8012d64:	4641      	mov	r1, r8
 8012d66:	4620      	mov	r0, r4
 8012d68:	f7ff fe06 	bl	8012978 <uxr_framing_read_transport>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	f43f aec6 	beq.w	8012afe <uxr_read_framed_msg+0x82>
 8012d72:	7823      	ldrb	r3, [r4, #0]
 8012d74:	e693      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012d76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d78:	9300      	str	r3, [sp, #0]
 8012d7a:	2302      	movs	r3, #2
 8012d7c:	e7ef      	b.n	8012d5e <uxr_read_framed_msg+0x2e2>
 8012d7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	2304      	movs	r3, #4
 8012d84:	9301      	str	r3, [sp, #4]
 8012d86:	464a      	mov	r2, r9
 8012d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d8a:	4641      	mov	r1, r8
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f7ff fdf3 	bl	8012978 <uxr_framing_read_transport>
 8012d92:	2800      	cmp	r0, #0
 8012d94:	d1ed      	bne.n	8012d72 <uxr_read_framed_msg+0x2f6>
 8012d96:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012d9a:	2b7e      	cmp	r3, #126	@ 0x7e
 8012d9c:	d0e9      	beq.n	8012d72 <uxr_read_framed_msg+0x2f6>
 8012d9e:	e6ae      	b.n	8012afe <uxr_read_framed_msg+0x82>
 8012da0:	30c30c31 	.word	0x30c30c31
 8012da4:	0801d6cc 	.word	0x0801d6cc
 8012da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	2305      	movs	r3, #5
 8012dae:	9301      	str	r3, [sp, #4]
 8012db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012db2:	f7ff fde1 	bl	8012978 <uxr_framing_read_transport>
 8012db6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012dba:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	f43f ae9d 	beq.w	8012afe <uxr_read_framed_msg+0x82>
 8012dc4:	e668      	b.n	8012a98 <uxr_read_framed_msg+0x1c>
 8012dc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	2303      	movs	r3, #3
 8012dcc:	e7c7      	b.n	8012d5e <uxr_read_framed_msg+0x2e2>
 8012dce:	2305      	movs	r3, #5
 8012dd0:	7023      	strb	r3, [r4, #0]
 8012dd2:	e664      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012dd4:	ee17 8a90 	vmov	r8, s15
 8012dd8:	f43f aef2 	beq.w	8012bc0 <uxr_read_framed_msg+0x144>
 8012ddc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012de0:	d08e      	beq.n	8012d00 <uxr_read_framed_msg+0x284>
 8012de2:	ebae 0303 	sub.w	r3, lr, r3
 8012de6:	3302      	adds	r3, #2
 8012de8:	9301      	str	r3, [sp, #4]
 8012dea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dec:	9300      	str	r3, [sp, #0]
 8012dee:	e7b7      	b.n	8012d60 <uxr_read_framed_msg+0x2e4>
 8012df0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012df2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012df6:	7013      	strb	r3, [r2, #0]
 8012df8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012dfa:	b003      	add	sp, #12
 8012dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e00:	f103 0c01 	add.w	ip, r3, #1
 8012e04:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012e08:	fba5 0202 	umull	r0, r2, r5, r2
 8012e0c:	0892      	lsrs	r2, r2, #2
 8012e0e:	202a      	movs	r0, #42	@ 0x2a
 8012e10:	fb00 c212 	mls	r2, r0, r2, ip
 8012e14:	fa5f fc82 	uxtb.w	ip, r2
 8012e18:	4561      	cmp	r1, ip
 8012e1a:	d09d      	beq.n	8012d58 <uxr_read_framed_msg+0x2dc>
 8012e1c:	3302      	adds	r3, #2
 8012e1e:	4422      	add	r2, r4
 8012e20:	0859      	lsrs	r1, r3, #1
 8012e22:	7892      	ldrb	r2, [r2, #2]
 8012e24:	fba5 c101 	umull	ip, r1, r5, r1
 8012e28:	0889      	lsrs	r1, r1, #2
 8012e2a:	fb00 3311 	mls	r3, r0, r1, r3
 8012e2e:	2a7e      	cmp	r2, #126	@ 0x7e
 8012e30:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e34:	f000 80aa 	beq.w	8012f8c <uxr_read_framed_msg+0x510>
 8012e38:	f082 0220 	eor.w	r2, r2, #32
 8012e3c:	e654      	b.n	8012ae8 <uxr_read_framed_msg+0x6c>
 8012e3e:	1c58      	adds	r0, r3, #1
 8012e40:	0842      	lsrs	r2, r0, #1
 8012e42:	fba5 c202 	umull	ip, r2, r5, r2
 8012e46:	0892      	lsrs	r2, r2, #2
 8012e48:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e4c:	fb0c 0212 	mls	r2, ip, r2, r0
 8012e50:	b2d0      	uxtb	r0, r2
 8012e52:	4281      	cmp	r1, r0
 8012e54:	d08f      	beq.n	8012d76 <uxr_read_framed_msg+0x2fa>
 8012e56:	4422      	add	r2, r4
 8012e58:	3302      	adds	r3, #2
 8012e5a:	7890      	ldrb	r0, [r2, #2]
 8012e5c:	085a      	lsrs	r2, r3, #1
 8012e5e:	fba5 1202 	umull	r1, r2, r5, r2
 8012e62:	0892      	lsrs	r2, r2, #2
 8012e64:	fb0c 3312 	mls	r3, ip, r2, r3
 8012e68:	287e      	cmp	r0, #126	@ 0x7e
 8012e6a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e6e:	d07d      	beq.n	8012f6c <uxr_read_framed_msg+0x4f0>
 8012e70:	f080 0020 	eor.w	r0, r0, #32
 8012e74:	e660      	b.n	8012b38 <uxr_read_framed_msg+0xbc>
 8012e76:	1c59      	adds	r1, r3, #1
 8012e78:	084a      	lsrs	r2, r1, #1
 8012e7a:	fba5 c202 	umull	ip, r2, r5, r2
 8012e7e:	0892      	lsrs	r2, r2, #2
 8012e80:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e84:	fb0c 1212 	mls	r2, ip, r2, r1
 8012e88:	b2d1      	uxtb	r1, r2
 8012e8a:	4288      	cmp	r0, r1
 8012e8c:	f43f af64 	beq.w	8012d58 <uxr_read_framed_msg+0x2dc>
 8012e90:	4422      	add	r2, r4
 8012e92:	3302      	adds	r3, #2
 8012e94:	7891      	ldrb	r1, [r2, #2]
 8012e96:	085a      	lsrs	r2, r3, #1
 8012e98:	fba5 0202 	umull	r0, r2, r5, r2
 8012e9c:	0892      	lsrs	r2, r2, #2
 8012e9e:	fb0c 3312 	mls	r3, ip, r2, r3
 8012ea2:	297e      	cmp	r1, #126	@ 0x7e
 8012ea4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012ea8:	d070      	beq.n	8012f8c <uxr_read_framed_msg+0x510>
 8012eaa:	f081 0120 	eor.w	r1, r1, #32
 8012eae:	e6a3      	b.n	8012bf8 <uxr_read_framed_msg+0x17c>
 8012eb0:	f103 0c01 	add.w	ip, r3, #1
 8012eb4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012eb8:	fba5 0202 	umull	r0, r2, r5, r2
 8012ebc:	0892      	lsrs	r2, r2, #2
 8012ebe:	202a      	movs	r0, #42	@ 0x2a
 8012ec0:	fb00 c212 	mls	r2, r0, r2, ip
 8012ec4:	fa5f fc82 	uxtb.w	ip, r2
 8012ec8:	4561      	cmp	r1, ip
 8012eca:	f43f af58 	beq.w	8012d7e <uxr_read_framed_msg+0x302>
 8012ece:	4422      	add	r2, r4
 8012ed0:	3302      	adds	r3, #2
 8012ed2:	7891      	ldrb	r1, [r2, #2]
 8012ed4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012ed8:	085a      	lsrs	r2, r3, #1
 8012eda:	fba5 c202 	umull	ip, r2, r5, r2
 8012ede:	0892      	lsrs	r2, r2, #2
 8012ee0:	fb00 3312 	mls	r3, r0, r2, r3
 8012ee4:	297e      	cmp	r1, #126	@ 0x7e
 8012ee6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012eea:	f43f af48 	beq.w	8012d7e <uxr_read_framed_msg+0x302>
 8012eee:	f081 0120 	eor.w	r1, r1, #32
 8012ef2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012ef6:	e6e8      	b.n	8012cca <uxr_read_framed_msg+0x24e>
 8012ef8:	1c58      	adds	r0, r3, #1
 8012efa:	0842      	lsrs	r2, r0, #1
 8012efc:	fba5 c202 	umull	ip, r2, r5, r2
 8012f00:	0892      	lsrs	r2, r2, #2
 8012f02:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f06:	fb0c 0212 	mls	r2, ip, r2, r0
 8012f0a:	b2d0      	uxtb	r0, r2
 8012f0c:	4281      	cmp	r1, r0
 8012f0e:	f43f af32 	beq.w	8012d76 <uxr_read_framed_msg+0x2fa>
 8012f12:	4422      	add	r2, r4
 8012f14:	3302      	adds	r3, #2
 8012f16:	7890      	ldrb	r0, [r2, #2]
 8012f18:	085a      	lsrs	r2, r3, #1
 8012f1a:	fba5 1202 	umull	r1, r2, r5, r2
 8012f1e:	0892      	lsrs	r2, r2, #2
 8012f20:	fb0c 3312 	mls	r3, ip, r2, r3
 8012f24:	287e      	cmp	r0, #126	@ 0x7e
 8012f26:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f2a:	d01f      	beq.n	8012f6c <uxr_read_framed_msg+0x4f0>
 8012f2c:	f080 0020 	eor.w	r0, r0, #32
 8012f30:	e68b      	b.n	8012c4a <uxr_read_framed_msg+0x1ce>
 8012f32:	1c51      	adds	r1, r2, #1
 8012f34:	084b      	lsrs	r3, r1, #1
 8012f36:	fba5 c303 	umull	ip, r3, r5, r3
 8012f3a:	089b      	lsrs	r3, r3, #2
 8012f3c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f40:	fb0c 1313 	mls	r3, ip, r3, r1
 8012f44:	b2d9      	uxtb	r1, r3
 8012f46:	4288      	cmp	r0, r1
 8012f48:	f43f af3d 	beq.w	8012dc6 <uxr_read_framed_msg+0x34a>
 8012f4c:	3202      	adds	r2, #2
 8012f4e:	4423      	add	r3, r4
 8012f50:	0850      	lsrs	r0, r2, #1
 8012f52:	789b      	ldrb	r3, [r3, #2]
 8012f54:	fba5 1000 	umull	r1, r0, r5, r0
 8012f58:	0880      	lsrs	r0, r0, #2
 8012f5a:	fb0c 2210 	mls	r2, ip, r0, r2
 8012f5e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012f60:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012f64:	d016      	beq.n	8012f94 <uxr_read_framed_msg+0x518>
 8012f66:	f083 0120 	eor.w	r1, r3, #32
 8012f6a:	e68b      	b.n	8012c84 <uxr_read_framed_msg+0x208>
 8012f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	2302      	movs	r3, #2
 8012f72:	9301      	str	r3, [sp, #4]
 8012f74:	464a      	mov	r2, r9
 8012f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f78:	4641      	mov	r1, r8
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	f7ff fcfc 	bl	8012978 <uxr_framing_read_transport>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	f47f aef6 	bne.w	8012d72 <uxr_read_framed_msg+0x2f6>
 8012f86:	2301      	movs	r3, #1
 8012f88:	7023      	strb	r3, [r4, #0]
 8012f8a:	e588      	b.n	8012a9e <uxr_read_framed_msg+0x22>
 8012f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f8e:	9300      	str	r3, [sp, #0]
 8012f90:	2301      	movs	r3, #1
 8012f92:	e7ee      	b.n	8012f72 <uxr_read_framed_msg+0x4f6>
 8012f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f96:	9300      	str	r3, [sp, #0]
 8012f98:	2303      	movs	r3, #3
 8012f9a:	e7ea      	b.n	8012f72 <uxr_read_framed_msg+0x4f6>
 8012f9c:	ee17 8a90 	vmov	r8, s15
 8012fa0:	e6ae      	b.n	8012d00 <uxr_read_framed_msg+0x284>
 8012fa2:	bf00      	nop

08012fa4 <uxr_stream_id>:
 8012fa4:	2901      	cmp	r1, #1
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	d01d      	beq.n	8012fe6 <uxr_stream_id+0x42>
 8012faa:	2902      	cmp	r1, #2
 8012fac:	f04f 0c00 	mov.w	ip, #0
 8012fb0:	d01e      	beq.n	8012ff0 <uxr_stream_id+0x4c>
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	f36c 0307 	bfi	r3, ip, #0, #8
 8012fb8:	f360 230f 	bfi	r3, r0, #8, #8
 8012fbc:	f361 4317 	bfi	r3, r1, #16, #8
 8012fc0:	f362 631f 	bfi	r3, r2, #24, #8
 8012fc4:	b2da      	uxtb	r2, r3
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	f362 0007 	bfi	r0, r2, #0, #8
 8012fcc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012fd0:	f362 200f 	bfi	r0, r2, #8, #8
 8012fd4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012fd8:	f362 4017 	bfi	r0, r2, #16, #8
 8012fdc:	0e1b      	lsrs	r3, r3, #24
 8012fde:	f363 601f 	bfi	r0, r3, #24, #8
 8012fe2:	b002      	add	sp, #8
 8012fe4:	4770      	bx	lr
 8012fe6:	f100 0c01 	add.w	ip, r0, #1
 8012fea:	fa5f fc8c 	uxtb.w	ip, ip
 8012fee:	e7e0      	b.n	8012fb2 <uxr_stream_id+0xe>
 8012ff0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012ff4:	e7dd      	b.n	8012fb2 <uxr_stream_id+0xe>
 8012ff6:	bf00      	nop

08012ff8 <uxr_stream_id_from_raw>:
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	b130      	cbz	r0, 801300a <uxr_stream_id_from_raw+0x12>
 8012ffc:	0603      	lsls	r3, r0, #24
 8012ffe:	d420      	bmi.n	8013042 <uxr_stream_id_from_raw+0x4a>
 8013000:	1e42      	subs	r2, r0, #1
 8013002:	b2d2      	uxtb	r2, r2
 8013004:	f04f 0c01 	mov.w	ip, #1
 8013008:	e001      	b.n	801300e <uxr_stream_id_from_raw+0x16>
 801300a:	4684      	mov	ip, r0
 801300c:	4602      	mov	r2, r0
 801300e:	2300      	movs	r3, #0
 8013010:	f360 0307 	bfi	r3, r0, #0, #8
 8013014:	f362 230f 	bfi	r3, r2, #8, #8
 8013018:	f36c 4317 	bfi	r3, ip, #16, #8
 801301c:	f361 631f 	bfi	r3, r1, #24, #8
 8013020:	b2da      	uxtb	r2, r3
 8013022:	2000      	movs	r0, #0
 8013024:	f362 0007 	bfi	r0, r2, #0, #8
 8013028:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801302c:	f362 200f 	bfi	r0, r2, #8, #8
 8013030:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013034:	f362 4017 	bfi	r0, r2, #16, #8
 8013038:	0e1b      	lsrs	r3, r3, #24
 801303a:	f363 601f 	bfi	r0, r3, #24, #8
 801303e:	b002      	add	sp, #8
 8013040:	4770      	bx	lr
 8013042:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8013046:	f04f 0c02 	mov.w	ip, #2
 801304a:	e7e0      	b.n	801300e <uxr_stream_id_from_raw+0x16>

0801304c <uxr_init_stream_storage>:
 801304c:	2300      	movs	r3, #0
 801304e:	7403      	strb	r3, [r0, #16]
 8013050:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8013054:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013058:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801305c:	4770      	bx	lr
 801305e:	bf00      	nop

08013060 <uxr_reset_stream_storage>:
 8013060:	b570      	push	{r4, r5, r6, lr}
 8013062:	7c03      	ldrb	r3, [r0, #16]
 8013064:	4604      	mov	r4, r0
 8013066:	b153      	cbz	r3, 801307e <uxr_reset_stream_storage+0x1e>
 8013068:	4606      	mov	r6, r0
 801306a:	2500      	movs	r5, #0
 801306c:	4630      	mov	r0, r6
 801306e:	f005 fe3f 	bl	8018cf0 <uxr_reset_output_best_effort_stream>
 8013072:	7c23      	ldrb	r3, [r4, #16]
 8013074:	3501      	adds	r5, #1
 8013076:	42ab      	cmp	r3, r5
 8013078:	f106 0610 	add.w	r6, r6, #16
 801307c:	d8f6      	bhi.n	801306c <uxr_reset_stream_storage+0xc>
 801307e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013082:	b163      	cbz	r3, 801309e <uxr_reset_stream_storage+0x3e>
 8013084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013088:	2500      	movs	r5, #0
 801308a:	4630      	mov	r0, r6
 801308c:	f005 fc32 	bl	80188f4 <uxr_reset_input_best_effort_stream>
 8013090:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013094:	3501      	adds	r5, #1
 8013096:	42ab      	cmp	r3, r5
 8013098:	f106 0602 	add.w	r6, r6, #2
 801309c:	d8f5      	bhi.n	801308a <uxr_reset_stream_storage+0x2a>
 801309e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80130a2:	b163      	cbz	r3, 80130be <uxr_reset_stream_storage+0x5e>
 80130a4:	f104 0618 	add.w	r6, r4, #24
 80130a8:	2500      	movs	r5, #0
 80130aa:	4630      	mov	r0, r6
 80130ac:	f005 fecc 	bl	8018e48 <uxr_reset_output_reliable_stream>
 80130b0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80130b4:	3501      	adds	r5, #1
 80130b6:	42ab      	cmp	r3, r5
 80130b8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80130bc:	d8f5      	bhi.n	80130aa <uxr_reset_stream_storage+0x4a>
 80130be:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80130c2:	b163      	cbz	r3, 80130de <uxr_reset_stream_storage+0x7e>
 80130c4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80130c8:	2500      	movs	r5, #0
 80130ca:	4630      	mov	r0, r6
 80130cc:	f005 fc86 	bl	80189dc <uxr_reset_input_reliable_stream>
 80130d0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80130d4:	3501      	adds	r5, #1
 80130d6:	42ab      	cmp	r3, r5
 80130d8:	f106 0618 	add.w	r6, r6, #24
 80130dc:	d8f5      	bhi.n	80130ca <uxr_reset_stream_storage+0x6a>
 80130de:	bd70      	pop	{r4, r5, r6, pc}

080130e0 <uxr_add_output_best_effort_buffer>:
 80130e0:	b510      	push	{r4, lr}
 80130e2:	7c04      	ldrb	r4, [r0, #16]
 80130e4:	f104 0c01 	add.w	ip, r4, #1
 80130e8:	b082      	sub	sp, #8
 80130ea:	f880 c010 	strb.w	ip, [r0, #16]
 80130ee:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80130f2:	f005 fdf3 	bl	8018cdc <uxr_init_output_best_effort_stream>
 80130f6:	2201      	movs	r2, #1
 80130f8:	4611      	mov	r1, r2
 80130fa:	4620      	mov	r0, r4
 80130fc:	b002      	add	sp, #8
 80130fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013102:	f7ff bf4f 	b.w	8012fa4 <uxr_stream_id>
 8013106:	bf00      	nop

08013108 <uxr_add_output_reliable_buffer>:
 8013108:	b510      	push	{r4, lr}
 801310a:	b084      	sub	sp, #16
 801310c:	4684      	mov	ip, r0
 801310e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013112:	9000      	str	r0, [sp, #0]
 8013114:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013118:	2028      	movs	r0, #40	@ 0x28
 801311a:	fb00 c004 	mla	r0, r0, r4, ip
 801311e:	f104 0e01 	add.w	lr, r4, #1
 8013122:	3018      	adds	r0, #24
 8013124:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013128:	f005 fe56 	bl	8018dd8 <uxr_init_output_reliable_stream>
 801312c:	2201      	movs	r2, #1
 801312e:	2102      	movs	r1, #2
 8013130:	4620      	mov	r0, r4
 8013132:	b004      	add	sp, #16
 8013134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013138:	f7ff bf34 	b.w	8012fa4 <uxr_stream_id>

0801313c <uxr_add_input_best_effort_buffer>:
 801313c:	b510      	push	{r4, lr}
 801313e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013142:	4603      	mov	r3, r0
 8013144:	1c62      	adds	r2, r4, #1
 8013146:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801314a:	b082      	sub	sp, #8
 801314c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013154:	f005 fbca 	bl	80188ec <uxr_init_input_best_effort_stream>
 8013158:	2200      	movs	r2, #0
 801315a:	2101      	movs	r1, #1
 801315c:	4620      	mov	r0, r4
 801315e:	b002      	add	sp, #8
 8013160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013164:	f7ff bf1e 	b.w	8012fa4 <uxr_stream_id>

08013168 <uxr_add_input_reliable_buffer>:
 8013168:	b510      	push	{r4, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	4684      	mov	ip, r0
 801316e:	9806      	ldr	r0, [sp, #24]
 8013170:	9000      	str	r0, [sp, #0]
 8013172:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013176:	2018      	movs	r0, #24
 8013178:	fb00 c004 	mla	r0, r0, r4, ip
 801317c:	f104 0e01 	add.w	lr, r4, #1
 8013180:	3048      	adds	r0, #72	@ 0x48
 8013182:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013186:	f005 fbfd 	bl	8018984 <uxr_init_input_reliable_stream>
 801318a:	2200      	movs	r2, #0
 801318c:	2102      	movs	r1, #2
 801318e:	4620      	mov	r0, r4
 8013190:	b004      	add	sp, #16
 8013192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013196:	f7ff bf05 	b.w	8012fa4 <uxr_stream_id>
 801319a:	bf00      	nop

0801319c <uxr_get_output_best_effort_stream>:
 801319c:	7c03      	ldrb	r3, [r0, #16]
 801319e:	428b      	cmp	r3, r1
 80131a0:	bf8c      	ite	hi
 80131a2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80131a6:	2000      	movls	r0, #0
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop

080131ac <uxr_get_output_reliable_stream>:
 80131ac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80131b0:	428b      	cmp	r3, r1
 80131b2:	bf83      	ittte	hi
 80131b4:	2328      	movhi	r3, #40	@ 0x28
 80131b6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80131ba:	3018      	addhi	r0, #24
 80131bc:	2000      	movls	r0, #0
 80131be:	4770      	bx	lr

080131c0 <uxr_get_input_best_effort_stream>:
 80131c0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80131c4:	428b      	cmp	r3, r1
 80131c6:	bf86      	itte	hi
 80131c8:	3121      	addhi	r1, #33	@ 0x21
 80131ca:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80131ce:	2000      	movls	r0, #0
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop

080131d4 <uxr_get_input_reliable_stream>:
 80131d4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80131d8:	428b      	cmp	r3, r1
 80131da:	bf83      	ittte	hi
 80131dc:	2318      	movhi	r3, #24
 80131de:	fb03 0001 	mlahi	r0, r3, r1, r0
 80131e2:	3048      	addhi	r0, #72	@ 0x48
 80131e4:	2000      	movls	r0, #0
 80131e6:	4770      	bx	lr

080131e8 <uxr_output_streams_confirmed>:
 80131e8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80131ec:	b183      	cbz	r3, 8013210 <uxr_output_streams_confirmed+0x28>
 80131ee:	b570      	push	{r4, r5, r6, lr}
 80131f0:	4606      	mov	r6, r0
 80131f2:	f100 0518 	add.w	r5, r0, #24
 80131f6:	2400      	movs	r4, #0
 80131f8:	e001      	b.n	80131fe <uxr_output_streams_confirmed+0x16>
 80131fa:	3528      	adds	r5, #40	@ 0x28
 80131fc:	b138      	cbz	r0, 801320e <uxr_output_streams_confirmed+0x26>
 80131fe:	4628      	mov	r0, r5
 8013200:	f006 f892 	bl	8019328 <uxr_is_output_up_to_date>
 8013204:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013208:	3401      	adds	r4, #1
 801320a:	42a3      	cmp	r3, r4
 801320c:	d8f5      	bhi.n	80131fa <uxr_output_streams_confirmed+0x12>
 801320e:	bd70      	pop	{r4, r5, r6, pc}
 8013210:	2001      	movs	r0, #1
 8013212:	4770      	bx	lr

08013214 <uxr_buffer_submessage_header>:
 8013214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013216:	4604      	mov	r4, r0
 8013218:	460e      	mov	r6, r1
 801321a:	2104      	movs	r1, #4
 801321c:	4615      	mov	r5, r2
 801321e:	461f      	mov	r7, r3
 8013220:	f7fa f83c 	bl	800d29c <ucdr_align_to>
 8013224:	2301      	movs	r3, #1
 8013226:	ea47 0203 	orr.w	r2, r7, r3
 801322a:	4631      	mov	r1, r6
 801322c:	7523      	strb	r3, [r4, #20]
 801322e:	4620      	mov	r0, r4
 8013230:	462b      	mov	r3, r5
 8013232:	f000 fa27 	bl	8013684 <uxr_serialize_submessage_header>
 8013236:	4620      	mov	r0, r4
 8013238:	f7fa f846 	bl	800d2c8 <ucdr_buffer_remaining>
 801323c:	42a8      	cmp	r0, r5
 801323e:	bf34      	ite	cc
 8013240:	2000      	movcc	r0, #0
 8013242:	2001      	movcs	r0, #1
 8013244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013246:	bf00      	nop

08013248 <uxr_read_submessage_header>:
 8013248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801324c:	4604      	mov	r4, r0
 801324e:	460d      	mov	r5, r1
 8013250:	2104      	movs	r1, #4
 8013252:	4616      	mov	r6, r2
 8013254:	4698      	mov	r8, r3
 8013256:	f7fa f821 	bl	800d29c <ucdr_align_to>
 801325a:	4620      	mov	r0, r4
 801325c:	f7fa f834 	bl	800d2c8 <ucdr_buffer_remaining>
 8013260:	2803      	cmp	r0, #3
 8013262:	bf8c      	ite	hi
 8013264:	2701      	movhi	r7, #1
 8013266:	2700      	movls	r7, #0
 8013268:	d802      	bhi.n	8013270 <uxr_read_submessage_header+0x28>
 801326a:	4638      	mov	r0, r7
 801326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013270:	4633      	mov	r3, r6
 8013272:	4642      	mov	r2, r8
 8013274:	4620      	mov	r0, r4
 8013276:	4629      	mov	r1, r5
 8013278:	f000 fa18 	bl	80136ac <uxr_deserialize_submessage_header>
 801327c:	f898 3000 	ldrb.w	r3, [r8]
 8013280:	f003 0201 	and.w	r2, r3, #1
 8013284:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013288:	f888 3000 	strb.w	r3, [r8]
 801328c:	7522      	strb	r2, [r4, #20]
 801328e:	4638      	mov	r0, r7
 8013290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013294 <uxr_submessage_padding>:
 8013294:	f010 0003 	ands.w	r0, r0, #3
 8013298:	bf18      	it	ne
 801329a:	f1c0 0004 	rsbne	r0, r0, #4
 801329e:	4770      	bx	lr

080132a0 <uxr_millis>:
 80132a0:	b510      	push	{r4, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	4669      	mov	r1, sp
 80132a6:	2001      	movs	r0, #1
 80132a8:	f7f0 f836 	bl	8003318 <clock_gettime>
 80132ac:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80132b0:	4906      	ldr	r1, [pc, #24]	@ (80132cc <uxr_millis+0x2c>)
 80132b2:	fba0 0301 	umull	r0, r3, r0, r1
 80132b6:	1900      	adds	r0, r0, r4
 80132b8:	fb01 3102 	mla	r1, r1, r2, r3
 80132bc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80132c0:	4a03      	ldr	r2, [pc, #12]	@ (80132d0 <uxr_millis+0x30>)
 80132c2:	2300      	movs	r3, #0
 80132c4:	f7ed fcd0 	bl	8000c68 <__aeabi_ldivmod>
 80132c8:	b004      	add	sp, #16
 80132ca:	bd10      	pop	{r4, pc}
 80132cc:	3b9aca00 	.word	0x3b9aca00
 80132d0:	000f4240 	.word	0x000f4240

080132d4 <uxr_nanos>:
 80132d4:	b510      	push	{r4, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	4669      	mov	r1, sp
 80132da:	2001      	movs	r0, #1
 80132dc:	f7f0 f81c 	bl	8003318 <clock_gettime>
 80132e0:	4a06      	ldr	r2, [pc, #24]	@ (80132fc <uxr_nanos+0x28>)
 80132e2:	9800      	ldr	r0, [sp, #0]
 80132e4:	9902      	ldr	r1, [sp, #8]
 80132e6:	9c01      	ldr	r4, [sp, #4]
 80132e8:	fba0 0302 	umull	r0, r3, r0, r2
 80132ec:	1840      	adds	r0, r0, r1
 80132ee:	fb02 3304 	mla	r3, r2, r4, r3
 80132f2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80132f6:	b004      	add	sp, #16
 80132f8:	bd10      	pop	{r4, pc}
 80132fa:	bf00      	nop
 80132fc:	3b9aca00 	.word	0x3b9aca00

08013300 <on_full_output_buffer_fragmented>:
 8013300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013304:	460c      	mov	r4, r1
 8013306:	b08a      	sub	sp, #40	@ 0x28
 8013308:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801330c:	4606      	mov	r6, r0
 801330e:	f104 0008 	add.w	r0, r4, #8
 8013312:	f7ff ff4b 	bl	80131ac <uxr_get_output_reliable_stream>
 8013316:	4605      	mov	r5, r0
 8013318:	f006 f810 	bl	801933c <get_available_free_slots>
 801331c:	b968      	cbnz	r0, 801333a <on_full_output_buffer_fragmented+0x3a>
 801331e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013322:	4620      	mov	r0, r4
 8013324:	4798      	blx	r3
 8013326:	b918      	cbnz	r0, 8013330 <on_full_output_buffer_fragmented+0x30>
 8013328:	2001      	movs	r0, #1
 801332a:	b00a      	add	sp, #40	@ 0x28
 801332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013330:	4628      	mov	r0, r5
 8013332:	f006 f803 	bl	801933c <get_available_free_slots>
 8013336:	2800      	cmp	r0, #0
 8013338:	d0f6      	beq.n	8013328 <on_full_output_buffer_fragmented+0x28>
 801333a:	8929      	ldrh	r1, [r5, #8]
 801333c:	89eb      	ldrh	r3, [r5, #14]
 801333e:	7b28      	ldrb	r0, [r5, #12]
 8013340:	686a      	ldr	r2, [r5, #4]
 8013342:	fbb2 f8f1 	udiv	r8, r2, r1
 8013346:	fbb3 f2f1 	udiv	r2, r3, r1
 801334a:	fb01 3112 	mls	r1, r1, r2, r3
 801334e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013352:	b289      	uxth	r1, r1
 8013354:	fb08 f101 	mul.w	r1, r8, r1
 8013358:	30fc      	adds	r0, #252	@ 0xfc
 801335a:	f1a8 0804 	sub.w	r8, r8, #4
 801335e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013362:	4440      	add	r0, r8
 8013364:	b287      	uxth	r7, r0
 8013366:	1bdb      	subs	r3, r3, r7
 8013368:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801336c:	682b      	ldr	r3, [r5, #0]
 801336e:	3104      	adds	r1, #4
 8013370:	4419      	add	r1, r3
 8013372:	4642      	mov	r2, r8
 8013374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013378:	9300      	str	r3, [sp, #0]
 801337a:	a802      	add	r0, sp, #8
 801337c:	2300      	movs	r3, #0
 801337e:	f7f9 ff61 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8013382:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013386:	f102 0308 	add.w	r3, r2, #8
 801338a:	4543      	cmp	r3, r8
 801338c:	d928      	bls.n	80133e0 <on_full_output_buffer_fragmented+0xe0>
 801338e:	463a      	mov	r2, r7
 8013390:	2300      	movs	r3, #0
 8013392:	210d      	movs	r1, #13
 8013394:	a802      	add	r0, sp, #8
 8013396:	f7ff ff3d 	bl	8013214 <uxr_buffer_submessage_header>
 801339a:	8929      	ldrh	r1, [r5, #8]
 801339c:	89eb      	ldrh	r3, [r5, #14]
 801339e:	fbb3 f2f1 	udiv	r2, r3, r1
 80133a2:	fb01 3312 	mls	r3, r1, r2, r3
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	686a      	ldr	r2, [r5, #4]
 80133aa:	fbb2 f2f1 	udiv	r2, r2, r1
 80133ae:	fb02 f303 	mul.w	r3, r2, r3
 80133b2:	682a      	ldr	r2, [r5, #0]
 80133b4:	f842 8003 	str.w	r8, [r2, r3]
 80133b8:	89e8      	ldrh	r0, [r5, #14]
 80133ba:	2101      	movs	r1, #1
 80133bc:	f005 ffde 	bl	801937c <uxr_seq_num_add>
 80133c0:	9904      	ldr	r1, [sp, #16]
 80133c2:	9a03      	ldr	r2, [sp, #12]
 80133c4:	81e8      	strh	r0, [r5, #14]
 80133c6:	1a52      	subs	r2, r2, r1
 80133c8:	4630      	mov	r0, r6
 80133ca:	f7f9 ff4d 	bl	800d268 <ucdr_init_buffer>
 80133ce:	4630      	mov	r0, r6
 80133d0:	490f      	ldr	r1, [pc, #60]	@ (8013410 <on_full_output_buffer_fragmented+0x110>)
 80133d2:	4622      	mov	r2, r4
 80133d4:	f7f9 ff1c 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 80133d8:	2000      	movs	r0, #0
 80133da:	b00a      	add	sp, #40	@ 0x28
 80133dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133e0:	b292      	uxth	r2, r2
 80133e2:	2302      	movs	r3, #2
 80133e4:	210d      	movs	r1, #13
 80133e6:	a802      	add	r0, sp, #8
 80133e8:	f7ff ff14 	bl	8013214 <uxr_buffer_submessage_header>
 80133ec:	8928      	ldrh	r0, [r5, #8]
 80133ee:	89eb      	ldrh	r3, [r5, #14]
 80133f0:	fbb3 f1f0 	udiv	r1, r3, r0
 80133f4:	fb00 3311 	mls	r3, r0, r1, r3
 80133f8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80133fc:	6869      	ldr	r1, [r5, #4]
 80133fe:	fbb1 f1f0 	udiv	r1, r1, r0
 8013402:	b29b      	uxth	r3, r3
 8013404:	fb01 f303 	mul.w	r3, r1, r3
 8013408:	6829      	ldr	r1, [r5, #0]
 801340a:	3208      	adds	r2, #8
 801340c:	50ca      	str	r2, [r1, r3]
 801340e:	e7d3      	b.n	80133b8 <on_full_output_buffer_fragmented+0xb8>
 8013410:	08013301 	.word	0x08013301

08013414 <uxr_prepare_output_stream>:
 8013414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013416:	b087      	sub	sp, #28
 8013418:	2707      	movs	r7, #7
 801341a:	9202      	str	r2, [sp, #8]
 801341c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801341e:	9103      	str	r1, [sp, #12]
 8013420:	2500      	movs	r5, #0
 8013422:	3204      	adds	r2, #4
 8013424:	e9cd 7500 	strd	r7, r5, [sp]
 8013428:	461c      	mov	r4, r3
 801342a:	4606      	mov	r6, r0
 801342c:	f7fe ffc2 	bl	80123b4 <uxr_prepare_stream_to_write_submessage>
 8013430:	f080 0201 	eor.w	r2, r0, #1
 8013434:	b2d2      	uxtb	r2, r2
 8013436:	75a2      	strb	r2, [r4, #22]
 8013438:	b112      	cbz	r2, 8013440 <uxr_prepare_output_stream+0x2c>
 801343a:	4628      	mov	r0, r5
 801343c:	b007      	add	sp, #28
 801343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013440:	aa05      	add	r2, sp, #20
 8013442:	9902      	ldr	r1, [sp, #8]
 8013444:	4630      	mov	r0, r6
 8013446:	f7ff f8eb 	bl	8012620 <uxr_init_base_object_request>
 801344a:	a905      	add	r1, sp, #20
 801344c:	4605      	mov	r5, r0
 801344e:	4620      	mov	r0, r4
 8013450:	f000 ffd4 	bl	80143fc <uxr_serialize_WRITE_DATA_Payload_Data>
 8013454:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013458:	69a6      	ldr	r6, [r4, #24]
 801345a:	69e7      	ldr	r7, [r4, #28]
 801345c:	1a52      	subs	r2, r2, r1
 801345e:	4620      	mov	r0, r4
 8013460:	f7f9 ff02 	bl	800d268 <ucdr_init_buffer>
 8013464:	4620      	mov	r0, r4
 8013466:	463a      	mov	r2, r7
 8013468:	4631      	mov	r1, r6
 801346a:	f7f9 fed1 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 801346e:	4628      	mov	r0, r5
 8013470:	b007      	add	sp, #28
 8013472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013474 <uxr_prepare_output_stream_fragmented>:
 8013474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013478:	b091      	sub	sp, #68	@ 0x44
 801347a:	4605      	mov	r5, r0
 801347c:	9105      	str	r1, [sp, #20]
 801347e:	3008      	adds	r0, #8
 8013480:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013484:	461e      	mov	r6, r3
 8013486:	9204      	str	r2, [sp, #16]
 8013488:	f7ff fe90 	bl	80131ac <uxr_get_output_reliable_stream>
 801348c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013490:	2b01      	cmp	r3, #1
 8013492:	f000 8091 	beq.w	80135b8 <uxr_prepare_output_stream_fragmented+0x144>
 8013496:	4604      	mov	r4, r0
 8013498:	2800      	cmp	r0, #0
 801349a:	f000 808d 	beq.w	80135b8 <uxr_prepare_output_stream_fragmented+0x144>
 801349e:	f005 ff4d 	bl	801933c <get_available_free_slots>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	f000 8083 	beq.w	80135ae <uxr_prepare_output_stream_fragmented+0x13a>
 80134a8:	8922      	ldrh	r2, [r4, #8]
 80134aa:	89e7      	ldrh	r7, [r4, #14]
 80134ac:	fbb7 f9f2 	udiv	r9, r7, r2
 80134b0:	fb02 7919 	mls	r9, r2, r9, r7
 80134b4:	fa1f f989 	uxth.w	r9, r9
 80134b8:	6863      	ldr	r3, [r4, #4]
 80134ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80134be:	6823      	ldr	r3, [r4, #0]
 80134c0:	9203      	str	r2, [sp, #12]
 80134c2:	fb02 f909 	mul.w	r9, r2, r9
 80134c6:	f109 0904 	add.w	r9, r9, #4
 80134ca:	4499      	add	r9, r3
 80134cc:	7b23      	ldrb	r3, [r4, #12]
 80134ce:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80134d2:	4543      	cmp	r3, r8
 80134d4:	f1a2 0b04 	sub.w	fp, r2, #4
 80134d8:	d37a      	bcc.n	80135d0 <uxr_prepare_output_stream_fragmented+0x15c>
 80134da:	f1ab 0a04 	sub.w	sl, fp, #4
 80134de:	ebaa 0a03 	sub.w	sl, sl, r3
 80134e2:	465a      	mov	r2, fp
 80134e4:	2300      	movs	r3, #0
 80134e6:	4649      	mov	r1, r9
 80134e8:	a808      	add	r0, sp, #32
 80134ea:	f8cd 8000 	str.w	r8, [sp]
 80134ee:	f7f9 fea9 	bl	800d244 <ucdr_init_buffer_origin_offset>
 80134f2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80134f4:	fa1f fa8a 	uxth.w	sl, sl
 80134f8:	4652      	mov	r2, sl
 80134fa:	f103 0a08 	add.w	sl, r3, #8
 80134fe:	45da      	cmp	sl, fp
 8013500:	bf34      	ite	cc
 8013502:	2302      	movcc	r3, #2
 8013504:	2300      	movcs	r3, #0
 8013506:	210d      	movs	r1, #13
 8013508:	a808      	add	r0, sp, #32
 801350a:	f7ff fe83 	bl	8013214 <uxr_buffer_submessage_header>
 801350e:	8921      	ldrh	r1, [r4, #8]
 8013510:	fbb7 f2f1 	udiv	r2, r7, r1
 8013514:	fb01 7212 	mls	r2, r1, r2, r7
 8013518:	b292      	uxth	r2, r2
 801351a:	6863      	ldr	r3, [r4, #4]
 801351c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013520:	fb02 f303 	mul.w	r3, r2, r3
 8013524:	6822      	ldr	r2, [r4, #0]
 8013526:	4638      	mov	r0, r7
 8013528:	f842 b003 	str.w	fp, [r2, r3]
 801352c:	2101      	movs	r1, #1
 801352e:	f005 ff25 	bl	801937c <uxr_seq_num_add>
 8013532:	9b03      	ldr	r3, [sp, #12]
 8013534:	f108 0104 	add.w	r1, r8, #4
 8013538:	f1a3 0208 	sub.w	r2, r3, #8
 801353c:	eba2 0208 	sub.w	r2, r2, r8
 8013540:	4449      	add	r1, r9
 8013542:	4607      	mov	r7, r0
 8013544:	4630      	mov	r0, r6
 8013546:	f7f9 fe8f 	bl	800d268 <ucdr_init_buffer>
 801354a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801354c:	81e7      	strh	r7, [r4, #14]
 801354e:	1d1a      	adds	r2, r3, #4
 8013550:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013554:	bf28      	it	cs
 8013556:	2200      	movcs	r2, #0
 8013558:	2300      	movs	r3, #0
 801355a:	b292      	uxth	r2, r2
 801355c:	2107      	movs	r1, #7
 801355e:	4630      	mov	r0, r6
 8013560:	f7ff fe58 	bl	8013214 <uxr_buffer_submessage_header>
 8013564:	9904      	ldr	r1, [sp, #16]
 8013566:	aa07      	add	r2, sp, #28
 8013568:	4628      	mov	r0, r5
 801356a:	f7ff f859 	bl	8012620 <uxr_init_base_object_request>
 801356e:	4604      	mov	r4, r0
 8013570:	b318      	cbz	r0, 80135ba <uxr_prepare_output_stream_fragmented+0x146>
 8013572:	a907      	add	r1, sp, #28
 8013574:	4630      	mov	r0, r6
 8013576:	f000 ff41 	bl	80143fc <uxr_serialize_WRITE_DATA_Payload_Data>
 801357a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801357e:	4630      	mov	r0, r6
 8013580:	1a52      	subs	r2, r2, r1
 8013582:	f7f9 fe71 	bl	800d268 <ucdr_init_buffer>
 8013586:	9b05      	ldr	r3, [sp, #20]
 8013588:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801358c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801358e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8013592:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013594:	491b      	ldr	r1, [pc, #108]	@ (8013604 <uxr_prepare_output_stream_fragmented+0x190>)
 8013596:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801359a:	4630      	mov	r0, r6
 801359c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80135a0:	462a      	mov	r2, r5
 80135a2:	f7f9 fe35 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 80135a6:	4620      	mov	r0, r4
 80135a8:	b011      	add	sp, #68	@ 0x44
 80135aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ae:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80135b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80135b2:	4628      	mov	r0, r5
 80135b4:	4798      	blx	r3
 80135b6:	b920      	cbnz	r0, 80135c2 <uxr_prepare_output_stream_fragmented+0x14e>
 80135b8:	2400      	movs	r4, #0
 80135ba:	4620      	mov	r0, r4
 80135bc:	b011      	add	sp, #68	@ 0x44
 80135be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c2:	4620      	mov	r0, r4
 80135c4:	f005 feba 	bl	801933c <get_available_free_slots>
 80135c8:	2800      	cmp	r0, #0
 80135ca:	f47f af6d 	bne.w	80134a8 <uxr_prepare_output_stream_fragmented+0x34>
 80135ce:	e7f3      	b.n	80135b8 <uxr_prepare_output_stream_fragmented+0x144>
 80135d0:	4638      	mov	r0, r7
 80135d2:	2101      	movs	r1, #1
 80135d4:	f005 fed2 	bl	801937c <uxr_seq_num_add>
 80135d8:	8921      	ldrh	r1, [r4, #8]
 80135da:	fbb0 f2f1 	udiv	r2, r0, r1
 80135de:	fb01 0912 	mls	r9, r1, r2, r0
 80135e2:	fa1f f289 	uxth.w	r2, r9
 80135e6:	6863      	ldr	r3, [r4, #4]
 80135e8:	fbb3 f9f1 	udiv	r9, r3, r1
 80135ec:	6823      	ldr	r3, [r4, #0]
 80135ee:	fb02 f909 	mul.w	r9, r2, r9
 80135f2:	f109 0904 	add.w	r9, r9, #4
 80135f6:	4499      	add	r9, r3
 80135f8:	4607      	mov	r7, r0
 80135fa:	7b23      	ldrb	r3, [r4, #12]
 80135fc:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013600:	e76b      	b.n	80134da <uxr_prepare_output_stream_fragmented+0x66>
 8013602:	bf00      	nop
 8013604:	08013301 	.word	0x08013301

08013608 <uxr_serialize_message_header>:
 8013608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801360a:	b083      	sub	sp, #12
 801360c:	4616      	mov	r6, r2
 801360e:	4604      	mov	r4, r0
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	460d      	mov	r5, r1
 8013614:	9f08      	ldr	r7, [sp, #32]
 8013616:	f7f8 fb45 	bl	800bca4 <ucdr_serialize_uint8_t>
 801361a:	4631      	mov	r1, r6
 801361c:	4620      	mov	r0, r4
 801361e:	f7f8 fb41 	bl	800bca4 <ucdr_serialize_uint8_t>
 8013622:	9a01      	ldr	r2, [sp, #4]
 8013624:	2101      	movs	r1, #1
 8013626:	4620      	mov	r0, r4
 8013628:	f7f8 fbe8 	bl	800bdfc <ucdr_serialize_endian_uint16_t>
 801362c:	062b      	lsls	r3, r5, #24
 801362e:	d501      	bpl.n	8013634 <uxr_serialize_message_header+0x2c>
 8013630:	b003      	add	sp, #12
 8013632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013634:	2204      	movs	r2, #4
 8013636:	4639      	mov	r1, r7
 8013638:	4620      	mov	r0, r4
 801363a:	b003      	add	sp, #12
 801363c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013640:	f7fd b9a4 	b.w	801098c <ucdr_serialize_array_uint8_t>

08013644 <uxr_deserialize_message_header>:
 8013644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013646:	b083      	sub	sp, #12
 8013648:	4616      	mov	r6, r2
 801364a:	4604      	mov	r4, r0
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	460d      	mov	r5, r1
 8013650:	9f08      	ldr	r7, [sp, #32]
 8013652:	f7f8 fb3d 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8013656:	4631      	mov	r1, r6
 8013658:	4620      	mov	r0, r4
 801365a:	f7f8 fb39 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 801365e:	9a01      	ldr	r2, [sp, #4]
 8013660:	2101      	movs	r1, #1
 8013662:	4620      	mov	r0, r4
 8013664:	f7f8 fcbe 	bl	800bfe4 <ucdr_deserialize_endian_uint16_t>
 8013668:	f995 3000 	ldrsb.w	r3, [r5]
 801366c:	2b00      	cmp	r3, #0
 801366e:	da01      	bge.n	8013674 <uxr_deserialize_message_header+0x30>
 8013670:	b003      	add	sp, #12
 8013672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013674:	2204      	movs	r2, #4
 8013676:	4639      	mov	r1, r7
 8013678:	4620      	mov	r0, r4
 801367a:	b003      	add	sp, #12
 801367c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013680:	f7fd b9e8 	b.w	8010a54 <ucdr_deserialize_array_uint8_t>

08013684 <uxr_serialize_submessage_header>:
 8013684:	b530      	push	{r4, r5, lr}
 8013686:	b083      	sub	sp, #12
 8013688:	4615      	mov	r5, r2
 801368a:	4604      	mov	r4, r0
 801368c:	9301      	str	r3, [sp, #4]
 801368e:	f7f8 fb09 	bl	800bca4 <ucdr_serialize_uint8_t>
 8013692:	4629      	mov	r1, r5
 8013694:	4620      	mov	r0, r4
 8013696:	f7f8 fb05 	bl	800bca4 <ucdr_serialize_uint8_t>
 801369a:	9a01      	ldr	r2, [sp, #4]
 801369c:	2101      	movs	r1, #1
 801369e:	4620      	mov	r0, r4
 80136a0:	b003      	add	sp, #12
 80136a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136a6:	f7f8 bba9 	b.w	800bdfc <ucdr_serialize_endian_uint16_t>
 80136aa:	bf00      	nop

080136ac <uxr_deserialize_submessage_header>:
 80136ac:	b530      	push	{r4, r5, lr}
 80136ae:	b083      	sub	sp, #12
 80136b0:	4615      	mov	r5, r2
 80136b2:	4604      	mov	r4, r0
 80136b4:	9301      	str	r3, [sp, #4]
 80136b6:	f7f8 fb0b 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80136ba:	4629      	mov	r1, r5
 80136bc:	4620      	mov	r0, r4
 80136be:	f7f8 fb07 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80136c2:	9a01      	ldr	r2, [sp, #4]
 80136c4:	2101      	movs	r1, #1
 80136c6:	4620      	mov	r0, r4
 80136c8:	b003      	add	sp, #12
 80136ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136ce:	f7f8 bc89 	b.w	800bfe4 <ucdr_deserialize_endian_uint16_t>
 80136d2:	bf00      	nop

080136d4 <uxr_serialize_CLIENT_Representation>:
 80136d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136d8:	2204      	movs	r2, #4
 80136da:	460e      	mov	r6, r1
 80136dc:	4605      	mov	r5, r0
 80136de:	f7fd f955 	bl	801098c <ucdr_serialize_array_uint8_t>
 80136e2:	2202      	movs	r2, #2
 80136e4:	4607      	mov	r7, r0
 80136e6:	1d31      	adds	r1, r6, #4
 80136e8:	4628      	mov	r0, r5
 80136ea:	f7fd f94f 	bl	801098c <ucdr_serialize_array_uint8_t>
 80136ee:	4038      	ands	r0, r7
 80136f0:	2202      	movs	r2, #2
 80136f2:	1db1      	adds	r1, r6, #6
 80136f4:	b2c7      	uxtb	r7, r0
 80136f6:	4628      	mov	r0, r5
 80136f8:	f7fd f948 	bl	801098c <ucdr_serialize_array_uint8_t>
 80136fc:	2204      	movs	r2, #4
 80136fe:	4007      	ands	r7, r0
 8013700:	f106 0108 	add.w	r1, r6, #8
 8013704:	4628      	mov	r0, r5
 8013706:	f7fd f941 	bl	801098c <ucdr_serialize_array_uint8_t>
 801370a:	7b31      	ldrb	r1, [r6, #12]
 801370c:	4007      	ands	r7, r0
 801370e:	4628      	mov	r0, r5
 8013710:	f7f8 fac8 	bl	800bca4 <ucdr_serialize_uint8_t>
 8013714:	7b71      	ldrb	r1, [r6, #13]
 8013716:	4007      	ands	r7, r0
 8013718:	4628      	mov	r0, r5
 801371a:	f7f8 fa95 	bl	800bc48 <ucdr_serialize_bool>
 801371e:	7b73      	ldrb	r3, [r6, #13]
 8013720:	ea07 0800 	and.w	r8, r7, r0
 8013724:	b93b      	cbnz	r3, 8013736 <uxr_serialize_CLIENT_Representation+0x62>
 8013726:	8bb1      	ldrh	r1, [r6, #28]
 8013728:	4628      	mov	r0, r5
 801372a:	f7f8 fae7 	bl	800bcfc <ucdr_serialize_uint16_t>
 801372e:	ea08 0000 	and.w	r0, r8, r0
 8013732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013736:	6931      	ldr	r1, [r6, #16]
 8013738:	4628      	mov	r0, r5
 801373a:	f7f8 fcc9 	bl	800c0d0 <ucdr_serialize_uint32_t>
 801373e:	6933      	ldr	r3, [r6, #16]
 8013740:	b1e3      	cbz	r3, 801377c <uxr_serialize_CLIENT_Representation+0xa8>
 8013742:	b1c0      	cbz	r0, 8013776 <uxr_serialize_CLIENT_Representation+0xa2>
 8013744:	4637      	mov	r7, r6
 8013746:	f04f 0900 	mov.w	r9, #0
 801374a:	e001      	b.n	8013750 <uxr_serialize_CLIENT_Representation+0x7c>
 801374c:	3708      	adds	r7, #8
 801374e:	b194      	cbz	r4, 8013776 <uxr_serialize_CLIENT_Representation+0xa2>
 8013750:	6979      	ldr	r1, [r7, #20]
 8013752:	4628      	mov	r0, r5
 8013754:	f005 f8b2 	bl	80188bc <ucdr_serialize_string>
 8013758:	69b9      	ldr	r1, [r7, #24]
 801375a:	4604      	mov	r4, r0
 801375c:	4628      	mov	r0, r5
 801375e:	f005 f8ad 	bl	80188bc <ucdr_serialize_string>
 8013762:	6933      	ldr	r3, [r6, #16]
 8013764:	f109 0901 	add.w	r9, r9, #1
 8013768:	4004      	ands	r4, r0
 801376a:	4599      	cmp	r9, r3
 801376c:	b2e4      	uxtb	r4, r4
 801376e:	d3ed      	bcc.n	801374c <uxr_serialize_CLIENT_Representation+0x78>
 8013770:	ea08 0804 	and.w	r8, r8, r4
 8013774:	e7d7      	b.n	8013726 <uxr_serialize_CLIENT_Representation+0x52>
 8013776:	f04f 0800 	mov.w	r8, #0
 801377a:	e7d4      	b.n	8013726 <uxr_serialize_CLIENT_Representation+0x52>
 801377c:	ea08 0800 	and.w	r8, r8, r0
 8013780:	e7d1      	b.n	8013726 <uxr_serialize_CLIENT_Representation+0x52>
 8013782:	bf00      	nop

08013784 <uxr_deserialize_CLIENT_Representation>:
 8013784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013788:	2204      	movs	r2, #4
 801378a:	460c      	mov	r4, r1
 801378c:	4605      	mov	r5, r0
 801378e:	f7fd f961 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013792:	2202      	movs	r2, #2
 8013794:	4607      	mov	r7, r0
 8013796:	1d21      	adds	r1, r4, #4
 8013798:	4628      	mov	r0, r5
 801379a:	f7fd f95b 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 801379e:	4038      	ands	r0, r7
 80137a0:	2202      	movs	r2, #2
 80137a2:	1da1      	adds	r1, r4, #6
 80137a4:	b2c6      	uxtb	r6, r0
 80137a6:	4628      	mov	r0, r5
 80137a8:	f7fd f954 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 80137ac:	2204      	movs	r2, #4
 80137ae:	4006      	ands	r6, r0
 80137b0:	f104 0108 	add.w	r1, r4, #8
 80137b4:	4628      	mov	r0, r5
 80137b6:	f7fd f94d 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 80137ba:	f104 010c 	add.w	r1, r4, #12
 80137be:	4006      	ands	r6, r0
 80137c0:	4628      	mov	r0, r5
 80137c2:	f7f8 fa85 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80137c6:	f104 010d 	add.w	r1, r4, #13
 80137ca:	ea06 0700 	and.w	r7, r6, r0
 80137ce:	4628      	mov	r0, r5
 80137d0:	f7f8 fa50 	bl	800bc74 <ucdr_deserialize_bool>
 80137d4:	7b63      	ldrb	r3, [r4, #13]
 80137d6:	4007      	ands	r7, r0
 80137d8:	b93b      	cbnz	r3, 80137ea <uxr_deserialize_CLIENT_Representation+0x66>
 80137da:	f104 011c 	add.w	r1, r4, #28
 80137de:	4628      	mov	r0, r5
 80137e0:	f7f8 fb8c 	bl	800befc <ucdr_deserialize_uint16_t>
 80137e4:	4038      	ands	r0, r7
 80137e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ea:	f104 0110 	add.w	r1, r4, #16
 80137ee:	4628      	mov	r0, r5
 80137f0:	f7f8 fd9e 	bl	800c330 <ucdr_deserialize_uint32_t>
 80137f4:	6923      	ldr	r3, [r4, #16]
 80137f6:	2b01      	cmp	r3, #1
 80137f8:	d903      	bls.n	8013802 <uxr_deserialize_CLIENT_Representation+0x7e>
 80137fa:	2301      	movs	r3, #1
 80137fc:	75ab      	strb	r3, [r5, #22]
 80137fe:	2700      	movs	r7, #0
 8013800:	e7eb      	b.n	80137da <uxr_deserialize_CLIENT_Representation+0x56>
 8013802:	b30b      	cbz	r3, 8013848 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013804:	2800      	cmp	r0, #0
 8013806:	d0fa      	beq.n	80137fe <uxr_deserialize_CLIENT_Representation+0x7a>
 8013808:	46a0      	mov	r8, r4
 801380a:	f04f 0900 	mov.w	r9, #0
 801380e:	e001      	b.n	8013814 <uxr_deserialize_CLIENT_Representation+0x90>
 8013810:	2e00      	cmp	r6, #0
 8013812:	d0f4      	beq.n	80137fe <uxr_deserialize_CLIENT_Representation+0x7a>
 8013814:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801381c:	4628      	mov	r0, r5
 801381e:	f005 f85d 	bl	80188dc <ucdr_deserialize_string>
 8013822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013826:	4606      	mov	r6, r0
 8013828:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801382c:	4628      	mov	r0, r5
 801382e:	f005 f855 	bl	80188dc <ucdr_deserialize_string>
 8013832:	6923      	ldr	r3, [r4, #16]
 8013834:	f109 0901 	add.w	r9, r9, #1
 8013838:	4006      	ands	r6, r0
 801383a:	4599      	cmp	r9, r3
 801383c:	f108 0808 	add.w	r8, r8, #8
 8013840:	b2f6      	uxtb	r6, r6
 8013842:	d3e5      	bcc.n	8013810 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013844:	4037      	ands	r7, r6
 8013846:	e7c8      	b.n	80137da <uxr_deserialize_CLIENT_Representation+0x56>
 8013848:	4007      	ands	r7, r0
 801384a:	e7c6      	b.n	80137da <uxr_deserialize_CLIENT_Representation+0x56>

0801384c <uxr_serialize_AGENT_Representation>:
 801384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013850:	2204      	movs	r2, #4
 8013852:	460f      	mov	r7, r1
 8013854:	4605      	mov	r5, r0
 8013856:	f7fd f899 	bl	801098c <ucdr_serialize_array_uint8_t>
 801385a:	2202      	movs	r2, #2
 801385c:	4604      	mov	r4, r0
 801385e:	1d39      	adds	r1, r7, #4
 8013860:	4628      	mov	r0, r5
 8013862:	f7fd f893 	bl	801098c <ucdr_serialize_array_uint8_t>
 8013866:	4020      	ands	r0, r4
 8013868:	2202      	movs	r2, #2
 801386a:	1db9      	adds	r1, r7, #6
 801386c:	b2c4      	uxtb	r4, r0
 801386e:	4628      	mov	r0, r5
 8013870:	f7fd f88c 	bl	801098c <ucdr_serialize_array_uint8_t>
 8013874:	7a39      	ldrb	r1, [r7, #8]
 8013876:	4004      	ands	r4, r0
 8013878:	4628      	mov	r0, r5
 801387a:	f7f8 f9e5 	bl	800bc48 <ucdr_serialize_bool>
 801387e:	7a3b      	ldrb	r3, [r7, #8]
 8013880:	ea00 0804 	and.w	r8, r0, r4
 8013884:	b913      	cbnz	r3, 801388c <uxr_serialize_AGENT_Representation+0x40>
 8013886:	4640      	mov	r0, r8
 8013888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801388c:	68f9      	ldr	r1, [r7, #12]
 801388e:	4628      	mov	r0, r5
 8013890:	f7f8 fc1e 	bl	800c0d0 <ucdr_serialize_uint32_t>
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	b303      	cbz	r3, 80138da <uxr_serialize_AGENT_Representation+0x8e>
 8013898:	b1d0      	cbz	r0, 80138d0 <uxr_serialize_AGENT_Representation+0x84>
 801389a:	463e      	mov	r6, r7
 801389c:	f04f 0900 	mov.w	r9, #0
 80138a0:	e001      	b.n	80138a6 <uxr_serialize_AGENT_Representation+0x5a>
 80138a2:	3608      	adds	r6, #8
 80138a4:	b1a4      	cbz	r4, 80138d0 <uxr_serialize_AGENT_Representation+0x84>
 80138a6:	6931      	ldr	r1, [r6, #16]
 80138a8:	4628      	mov	r0, r5
 80138aa:	f005 f807 	bl	80188bc <ucdr_serialize_string>
 80138ae:	6971      	ldr	r1, [r6, #20]
 80138b0:	4604      	mov	r4, r0
 80138b2:	4628      	mov	r0, r5
 80138b4:	f005 f802 	bl	80188bc <ucdr_serialize_string>
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f109 0901 	add.w	r9, r9, #1
 80138be:	4004      	ands	r4, r0
 80138c0:	4599      	cmp	r9, r3
 80138c2:	b2e4      	uxtb	r4, r4
 80138c4:	d3ed      	bcc.n	80138a2 <uxr_serialize_AGENT_Representation+0x56>
 80138c6:	ea08 0804 	and.w	r8, r8, r4
 80138ca:	4640      	mov	r0, r8
 80138cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d0:	f04f 0800 	mov.w	r8, #0
 80138d4:	4640      	mov	r0, r8
 80138d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138da:	ea08 0800 	and.w	r8, r8, r0
 80138de:	e7d2      	b.n	8013886 <uxr_serialize_AGENT_Representation+0x3a>

080138e0 <uxr_serialize_DATAWRITER_Representation>:
 80138e0:	b570      	push	{r4, r5, r6, lr}
 80138e2:	460d      	mov	r5, r1
 80138e4:	7809      	ldrb	r1, [r1, #0]
 80138e6:	4606      	mov	r6, r0
 80138e8:	f7f8 f9dc 	bl	800bca4 <ucdr_serialize_uint8_t>
 80138ec:	4604      	mov	r4, r0
 80138ee:	b130      	cbz	r0, 80138fe <uxr_serialize_DATAWRITER_Representation+0x1e>
 80138f0:	782b      	ldrb	r3, [r5, #0]
 80138f2:	2b02      	cmp	r3, #2
 80138f4:	d00c      	beq.n	8013910 <uxr_serialize_DATAWRITER_Representation+0x30>
 80138f6:	2b03      	cmp	r3, #3
 80138f8:	d010      	beq.n	801391c <uxr_serialize_DATAWRITER_Representation+0x3c>
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d008      	beq.n	8013910 <uxr_serialize_DATAWRITER_Representation+0x30>
 80138fe:	2202      	movs	r2, #2
 8013900:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013904:	4630      	mov	r0, r6
 8013906:	f7fd f841 	bl	801098c <ucdr_serialize_array_uint8_t>
 801390a:	4020      	ands	r0, r4
 801390c:	b2c0      	uxtb	r0, r0
 801390e:	bd70      	pop	{r4, r5, r6, pc}
 8013910:	6869      	ldr	r1, [r5, #4]
 8013912:	4630      	mov	r0, r6
 8013914:	f004 ffd2 	bl	80188bc <ucdr_serialize_string>
 8013918:	4604      	mov	r4, r0
 801391a:	e7f0      	b.n	80138fe <uxr_serialize_DATAWRITER_Representation+0x1e>
 801391c:	4629      	mov	r1, r5
 801391e:	4630      	mov	r0, r6
 8013920:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013924:	3104      	adds	r1, #4
 8013926:	f7fd f9cf 	bl	8010cc8 <ucdr_serialize_sequence_uint8_t>
 801392a:	4604      	mov	r4, r0
 801392c:	e7e7      	b.n	80138fe <uxr_serialize_DATAWRITER_Representation+0x1e>
 801392e:	bf00      	nop

08013930 <uxr_serialize_ObjectVariant.part.0>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	780b      	ldrb	r3, [r1, #0]
 8013934:	3b01      	subs	r3, #1
 8013936:	460c      	mov	r4, r1
 8013938:	4605      	mov	r5, r0
 801393a:	2b0d      	cmp	r3, #13
 801393c:	d854      	bhi.n	80139e8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801393e:	e8df f003 	tbb	[pc, r3]
 8013942:	0730      	.short	0x0730
 8013944:	07071b1b 	.word	0x07071b1b
 8013948:	0c530707 	.word	0x0c530707
 801394c:	494e0c0c 	.word	0x494e0c0c
 8013950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013954:	3104      	adds	r1, #4
 8013956:	f7ff bfc3 	b.w	80138e0 <uxr_serialize_DATAWRITER_Representation>
 801395a:	7909      	ldrb	r1, [r1, #4]
 801395c:	f7f8 f9a2 	bl	800bca4 <ucdr_serialize_uint8_t>
 8013960:	b1e8      	cbz	r0, 801399e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013962:	7923      	ldrb	r3, [r4, #4]
 8013964:	2b01      	cmp	r3, #1
 8013966:	d001      	beq.n	801396c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013968:	2b02      	cmp	r3, #2
 801396a:	d13d      	bne.n	80139e8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801396c:	68a1      	ldr	r1, [r4, #8]
 801396e:	4628      	mov	r0, r5
 8013970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013974:	f004 bfa2 	b.w	80188bc <ucdr_serialize_string>
 8013978:	7909      	ldrb	r1, [r1, #4]
 801397a:	f7f8 f993 	bl	800bca4 <ucdr_serialize_uint8_t>
 801397e:	4606      	mov	r6, r0
 8013980:	b120      	cbz	r0, 801398c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013982:	7923      	ldrb	r3, [r4, #4]
 8013984:	2b02      	cmp	r3, #2
 8013986:	d039      	beq.n	80139fc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013988:	2b03      	cmp	r3, #3
 801398a:	d02f      	beq.n	80139ec <uxr_serialize_ObjectVariant.part.0+0xbc>
 801398c:	2202      	movs	r2, #2
 801398e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013992:	4628      	mov	r0, r5
 8013994:	f7fc fffa 	bl	801098c <ucdr_serialize_array_uint8_t>
 8013998:	4030      	ands	r0, r6
 801399a:	b2c0      	uxtb	r0, r0
 801399c:	bd70      	pop	{r4, r5, r6, pc}
 801399e:	2000      	movs	r0, #0
 80139a0:	bd70      	pop	{r4, r5, r6, pc}
 80139a2:	7909      	ldrb	r1, [r1, #4]
 80139a4:	f7f8 f97e 	bl	800bca4 <ucdr_serialize_uint8_t>
 80139a8:	4606      	mov	r6, r0
 80139aa:	b158      	cbz	r0, 80139c4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80139ac:	7923      	ldrb	r3, [r4, #4]
 80139ae:	2b02      	cmp	r3, #2
 80139b0:	d003      	beq.n	80139ba <uxr_serialize_ObjectVariant.part.0+0x8a>
 80139b2:	2b03      	cmp	r3, #3
 80139b4:	d028      	beq.n	8013a08 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d104      	bne.n	80139c4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80139ba:	68a1      	ldr	r1, [r4, #8]
 80139bc:	4628      	mov	r0, r5
 80139be:	f004 ff7d 	bl	80188bc <ucdr_serialize_string>
 80139c2:	4606      	mov	r6, r0
 80139c4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80139c8:	4628      	mov	r0, r5
 80139ca:	f7f8 fea7 	bl	800c71c <ucdr_serialize_int16_t>
 80139ce:	4030      	ands	r0, r6
 80139d0:	b2c0      	uxtb	r0, r0
 80139d2:	bd70      	pop	{r4, r5, r6, pc}
 80139d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139d8:	3104      	adds	r1, #4
 80139da:	f7ff be7b 	b.w	80136d4 <uxr_serialize_CLIENT_Representation>
 80139de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139e2:	3104      	adds	r1, #4
 80139e4:	f7ff bf32 	b.w	801384c <uxr_serialize_AGENT_Representation>
 80139e8:	2001      	movs	r0, #1
 80139ea:	bd70      	pop	{r4, r5, r6, pc}
 80139ec:	68a2      	ldr	r2, [r4, #8]
 80139ee:	f104 010c 	add.w	r1, r4, #12
 80139f2:	4628      	mov	r0, r5
 80139f4:	f7fd f968 	bl	8010cc8 <ucdr_serialize_sequence_uint8_t>
 80139f8:	4606      	mov	r6, r0
 80139fa:	e7c7      	b.n	801398c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80139fc:	68a1      	ldr	r1, [r4, #8]
 80139fe:	4628      	mov	r0, r5
 8013a00:	f004 ff5c 	bl	80188bc <ucdr_serialize_string>
 8013a04:	4606      	mov	r6, r0
 8013a06:	e7c1      	b.n	801398c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013a08:	68a2      	ldr	r2, [r4, #8]
 8013a0a:	f104 010c 	add.w	r1, r4, #12
 8013a0e:	4628      	mov	r0, r5
 8013a10:	f7fd f95a 	bl	8010cc8 <ucdr_serialize_sequence_uint8_t>
 8013a14:	4606      	mov	r6, r0
 8013a16:	e7d5      	b.n	80139c4 <uxr_serialize_ObjectVariant.part.0+0x94>

08013a18 <uxr_deserialize_DATAWRITER_Representation>:
 8013a18:	b570      	push	{r4, r5, r6, lr}
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	460d      	mov	r5, r1
 8013a1e:	f7f8 f957 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8013a22:	4604      	mov	r4, r0
 8013a24:	b130      	cbz	r0, 8013a34 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a26:	782b      	ldrb	r3, [r5, #0]
 8013a28:	2b02      	cmp	r3, #2
 8013a2a:	d00c      	beq.n	8013a46 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a2c:	2b03      	cmp	r3, #3
 8013a2e:	d012      	beq.n	8013a56 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d008      	beq.n	8013a46 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a34:	2202      	movs	r2, #2
 8013a36:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f7fd f80a 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013a40:	4020      	ands	r0, r4
 8013a42:	b2c0      	uxtb	r0, r0
 8013a44:	bd70      	pop	{r4, r5, r6, pc}
 8013a46:	6869      	ldr	r1, [r5, #4]
 8013a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	f004 ff45 	bl	80188dc <ucdr_deserialize_string>
 8013a52:	4604      	mov	r4, r0
 8013a54:	e7ee      	b.n	8013a34 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a56:	1d2b      	adds	r3, r5, #4
 8013a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a5c:	f105 0108 	add.w	r1, r5, #8
 8013a60:	4630      	mov	r0, r6
 8013a62:	f7fd f943 	bl	8010cec <ucdr_deserialize_sequence_uint8_t>
 8013a66:	4604      	mov	r4, r0
 8013a68:	e7e4      	b.n	8013a34 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a6a:	bf00      	nop

08013a6c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013a6c:	b570      	push	{r4, r5, r6, lr}
 8013a6e:	460d      	mov	r5, r1
 8013a70:	7809      	ldrb	r1, [r1, #0]
 8013a72:	4606      	mov	r6, r0
 8013a74:	f7f8 f8e8 	bl	800bc48 <ucdr_serialize_bool>
 8013a78:	782b      	ldrb	r3, [r5, #0]
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	b94b      	cbnz	r3, 8013a92 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013a7e:	7a29      	ldrb	r1, [r5, #8]
 8013a80:	4630      	mov	r0, r6
 8013a82:	f7f8 f8e1 	bl	800bc48 <ucdr_serialize_bool>
 8013a86:	7a2b      	ldrb	r3, [r5, #8]
 8013a88:	4004      	ands	r4, r0
 8013a8a:	b2e4      	uxtb	r4, r4
 8013a8c:	b943      	cbnz	r3, 8013aa0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013a8e:	4620      	mov	r0, r4
 8013a90:	bd70      	pop	{r4, r5, r6, pc}
 8013a92:	6869      	ldr	r1, [r5, #4]
 8013a94:	4630      	mov	r0, r6
 8013a96:	f004 ff11 	bl	80188bc <ucdr_serialize_string>
 8013a9a:	4004      	ands	r4, r0
 8013a9c:	b2e4      	uxtb	r4, r4
 8013a9e:	e7ee      	b.n	8013a7e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013aa0:	68e9      	ldr	r1, [r5, #12]
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	f004 ff0a 	bl	80188bc <ucdr_serialize_string>
 8013aa8:	4004      	ands	r4, r0
 8013aaa:	4620      	mov	r0, r4
 8013aac:	bd70      	pop	{r4, r5, r6, pc}
 8013aae:	bf00      	nop

08013ab0 <uxr_serialize_OBJK_Topic_Binary>:
 8013ab0:	b570      	push	{r4, r5, r6, lr}
 8013ab2:	460d      	mov	r5, r1
 8013ab4:	6809      	ldr	r1, [r1, #0]
 8013ab6:	4606      	mov	r6, r0
 8013ab8:	f004 ff00 	bl	80188bc <ucdr_serialize_string>
 8013abc:	7929      	ldrb	r1, [r5, #4]
 8013abe:	4604      	mov	r4, r0
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f7f8 f8c1 	bl	800bc48 <ucdr_serialize_bool>
 8013ac6:	792b      	ldrb	r3, [r5, #4]
 8013ac8:	4004      	ands	r4, r0
 8013aca:	b2e4      	uxtb	r4, r4
 8013acc:	b943      	cbnz	r3, 8013ae0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013ace:	7b29      	ldrb	r1, [r5, #12]
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7f8 f8b9 	bl	800bc48 <ucdr_serialize_bool>
 8013ad6:	7b2b      	ldrb	r3, [r5, #12]
 8013ad8:	4004      	ands	r4, r0
 8013ada:	b93b      	cbnz	r3, 8013aec <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013adc:	4620      	mov	r0, r4
 8013ade:	bd70      	pop	{r4, r5, r6, pc}
 8013ae0:	68a9      	ldr	r1, [r5, #8]
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	f004 feea 	bl	80188bc <ucdr_serialize_string>
 8013ae8:	4004      	ands	r4, r0
 8013aea:	e7f0      	b.n	8013ace <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013aec:	6929      	ldr	r1, [r5, #16]
 8013aee:	4630      	mov	r0, r6
 8013af0:	f004 fee4 	bl	80188bc <ucdr_serialize_string>
 8013af4:	4004      	ands	r4, r0
 8013af6:	b2e4      	uxtb	r4, r4
 8013af8:	4620      	mov	r0, r4
 8013afa:	bd70      	pop	{r4, r5, r6, pc}

08013afc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b00:	460c      	mov	r4, r1
 8013b02:	7809      	ldrb	r1, [r1, #0]
 8013b04:	4606      	mov	r6, r0
 8013b06:	f7f8 f89f 	bl	800bc48 <ucdr_serialize_bool>
 8013b0a:	7823      	ldrb	r3, [r4, #0]
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	b96b      	cbnz	r3, 8013b2c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013b10:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013b14:	4630      	mov	r0, r6
 8013b16:	f7f8 f897 	bl	800bc48 <ucdr_serialize_bool>
 8013b1a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013b1e:	4005      	ands	r5, r0
 8013b20:	b2ed      	uxtb	r5, r5
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d169      	bne.n	8013bfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013b26:	4628      	mov	r0, r5
 8013b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b2c:	6861      	ldr	r1, [r4, #4]
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f7f8 face 	bl	800c0d0 <ucdr_serialize_uint32_t>
 8013b34:	6863      	ldr	r3, [r4, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d06b      	beq.n	8013c12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	d067      	beq.n	8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b3e:	68a1      	ldr	r1, [r4, #8]
 8013b40:	4630      	mov	r0, r6
 8013b42:	f004 febb 	bl	80188bc <ucdr_serialize_string>
 8013b46:	6863      	ldr	r3, [r4, #4]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	d953      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b4c:	2800      	cmp	r0, #0
 8013b4e:	d05e      	beq.n	8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b50:	68e1      	ldr	r1, [r4, #12]
 8013b52:	4630      	mov	r0, r6
 8013b54:	f004 feb2 	bl	80188bc <ucdr_serialize_string>
 8013b58:	6863      	ldr	r3, [r4, #4]
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	d94a      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	d055      	beq.n	8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b62:	6921      	ldr	r1, [r4, #16]
 8013b64:	4630      	mov	r0, r6
 8013b66:	f004 fea9 	bl	80188bc <ucdr_serialize_string>
 8013b6a:	6863      	ldr	r3, [r4, #4]
 8013b6c:	2b03      	cmp	r3, #3
 8013b6e:	d941      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b70:	2800      	cmp	r0, #0
 8013b72:	d04c      	beq.n	8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b74:	6961      	ldr	r1, [r4, #20]
 8013b76:	4630      	mov	r0, r6
 8013b78:	f004 fea0 	bl	80188bc <ucdr_serialize_string>
 8013b7c:	6863      	ldr	r3, [r4, #4]
 8013b7e:	2b04      	cmp	r3, #4
 8013b80:	d938      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b82:	2800      	cmp	r0, #0
 8013b84:	d043      	beq.n	8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b86:	69a1      	ldr	r1, [r4, #24]
 8013b88:	4630      	mov	r0, r6
 8013b8a:	f004 fe97 	bl	80188bc <ucdr_serialize_string>
 8013b8e:	6863      	ldr	r3, [r4, #4]
 8013b90:	2b05      	cmp	r3, #5
 8013b92:	d92f      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d03a      	beq.n	8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b98:	69e1      	ldr	r1, [r4, #28]
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	f004 fe8e 	bl	80188bc <ucdr_serialize_string>
 8013ba0:	6863      	ldr	r3, [r4, #4]
 8013ba2:	2b06      	cmp	r3, #6
 8013ba4:	d926      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ba6:	b390      	cbz	r0, 8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ba8:	6a21      	ldr	r1, [r4, #32]
 8013baa:	4630      	mov	r0, r6
 8013bac:	f004 fe86 	bl	80188bc <ucdr_serialize_string>
 8013bb0:	6863      	ldr	r3, [r4, #4]
 8013bb2:	2b07      	cmp	r3, #7
 8013bb4:	d91e      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bb6:	b350      	cbz	r0, 8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bb8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013bba:	4630      	mov	r0, r6
 8013bbc:	f004 fe7e 	bl	80188bc <ucdr_serialize_string>
 8013bc0:	6863      	ldr	r3, [r4, #4]
 8013bc2:	2b08      	cmp	r3, #8
 8013bc4:	d916      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bc6:	b310      	cbz	r0, 8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bc8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013bca:	4630      	mov	r0, r6
 8013bcc:	f004 fe76 	bl	80188bc <ucdr_serialize_string>
 8013bd0:	6863      	ldr	r3, [r4, #4]
 8013bd2:	2b09      	cmp	r3, #9
 8013bd4:	d90e      	bls.n	8013bf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bd6:	b1d0      	cbz	r0, 8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bd8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013bdc:	2709      	movs	r7, #9
 8013bde:	e000      	b.n	8013be2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013be0:	b1a8      	cbz	r0, 8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013be2:	f858 1b04 	ldr.w	r1, [r8], #4
 8013be6:	4630      	mov	r0, r6
 8013be8:	f004 fe68 	bl	80188bc <ucdr_serialize_string>
 8013bec:	6862      	ldr	r2, [r4, #4]
 8013bee:	3701      	adds	r7, #1
 8013bf0:	4297      	cmp	r7, r2
 8013bf2:	d3f5      	bcc.n	8013be0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013bf4:	4005      	ands	r5, r0
 8013bf6:	b2ed      	uxtb	r5, r5
 8013bf8:	e78a      	b.n	8013b10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013bfa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013bfc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013c00:	4630      	mov	r0, r6
 8013c02:	f7fd f861 	bl	8010cc8 <ucdr_serialize_sequence_uint8_t>
 8013c06:	4005      	ands	r5, r0
 8013c08:	4628      	mov	r0, r5
 8013c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c0e:	2500      	movs	r5, #0
 8013c10:	e77e      	b.n	8013b10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013c12:	4028      	ands	r0, r5
 8013c14:	b2c5      	uxtb	r5, r0
 8013c16:	e77b      	b.n	8013b10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013c18 <uxr_serialize_OBJK_Publisher_Binary>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	460d      	mov	r5, r1
 8013c1c:	7809      	ldrb	r1, [r1, #0]
 8013c1e:	4606      	mov	r6, r0
 8013c20:	f7f8 f812 	bl	800bc48 <ucdr_serialize_bool>
 8013c24:	782b      	ldrb	r3, [r5, #0]
 8013c26:	4604      	mov	r4, r0
 8013c28:	b94b      	cbnz	r3, 8013c3e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013c2a:	7a29      	ldrb	r1, [r5, #8]
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f7f8 f80b 	bl	800bc48 <ucdr_serialize_bool>
 8013c32:	7a2b      	ldrb	r3, [r5, #8]
 8013c34:	4004      	ands	r4, r0
 8013c36:	b2e4      	uxtb	r4, r4
 8013c38:	b943      	cbnz	r3, 8013c4c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013c3a:	4620      	mov	r0, r4
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	6869      	ldr	r1, [r5, #4]
 8013c40:	4630      	mov	r0, r6
 8013c42:	f004 fe3b 	bl	80188bc <ucdr_serialize_string>
 8013c46:	4004      	ands	r4, r0
 8013c48:	b2e4      	uxtb	r4, r4
 8013c4a:	e7ee      	b.n	8013c2a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013c4c:	f105 010c 	add.w	r1, r5, #12
 8013c50:	4630      	mov	r0, r6
 8013c52:	f7ff ff53 	bl	8013afc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013c56:	4004      	ands	r4, r0
 8013c58:	4620      	mov	r0, r4
 8013c5a:	bd70      	pop	{r4, r5, r6, pc}

08013c5c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013c5c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013c60:	4688      	mov	r8, r1
 8013c62:	8809      	ldrh	r1, [r1, #0]
 8013c64:	4681      	mov	r9, r0
 8013c66:	f7f8 f849 	bl	800bcfc <ucdr_serialize_uint16_t>
 8013c6a:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013c6e:	4606      	mov	r6, r0
 8013c70:	4648      	mov	r0, r9
 8013c72:	f7f7 ffe9 	bl	800bc48 <ucdr_serialize_bool>
 8013c76:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013c7a:	4006      	ands	r6, r0
 8013c7c:	b2f5      	uxtb	r5, r6
 8013c7e:	b9eb      	cbnz	r3, 8013cbc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013c80:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013c84:	4648      	mov	r0, r9
 8013c86:	f7f7 ffdf 	bl	800bc48 <ucdr_serialize_bool>
 8013c8a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013c8e:	4005      	ands	r5, r0
 8013c90:	bb7b      	cbnz	r3, 8013cf2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013c92:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013c96:	4648      	mov	r0, r9
 8013c98:	f7f7 ffd6 	bl	800bc48 <ucdr_serialize_bool>
 8013c9c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013ca0:	4005      	ands	r5, r0
 8013ca2:	b9f3      	cbnz	r3, 8013ce2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013ca4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013ca8:	4648      	mov	r0, r9
 8013caa:	f7f7 ffcd 	bl	800bc48 <ucdr_serialize_bool>
 8013cae:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013cb2:	4005      	ands	r5, r0
 8013cb4:	b94b      	cbnz	r3, 8013cca <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013cbc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013cc0:	4648      	mov	r0, r9
 8013cc2:	f7f8 f81b 	bl	800bcfc <ucdr_serialize_uint16_t>
 8013cc6:	4005      	ands	r5, r0
 8013cc8:	e7da      	b.n	8013c80 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013cca:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013cce:	f108 011c 	add.w	r1, r8, #28
 8013cd2:	4648      	mov	r0, r9
 8013cd4:	f7fc fff8 	bl	8010cc8 <ucdr_serialize_sequence_uint8_t>
 8013cd8:	4028      	ands	r0, r5
 8013cda:	b2c5      	uxtb	r5, r0
 8013cdc:	4628      	mov	r0, r5
 8013cde:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013ce2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013ce6:	4648      	mov	r0, r9
 8013ce8:	f7f8 f9f2 	bl	800c0d0 <ucdr_serialize_uint32_t>
 8013cec:	4028      	ands	r0, r5
 8013cee:	b2c5      	uxtb	r5, r0
 8013cf0:	e7d8      	b.n	8013ca4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013cf2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013cf6:	4648      	mov	r0, r9
 8013cf8:	f7f8 f9ea 	bl	800c0d0 <ucdr_serialize_uint32_t>
 8013cfc:	4028      	ands	r0, r5
 8013cfe:	b2c5      	uxtb	r5, r0
 8013d00:	e7c7      	b.n	8013c92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013d02:	bf00      	nop

08013d04 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d06:	2202      	movs	r2, #2
 8013d08:	460d      	mov	r5, r1
 8013d0a:	4606      	mov	r6, r0
 8013d0c:	f7fc fe3e 	bl	801098c <ucdr_serialize_array_uint8_t>
 8013d10:	78a9      	ldrb	r1, [r5, #2]
 8013d12:	4604      	mov	r4, r0
 8013d14:	4630      	mov	r0, r6
 8013d16:	f7f7 ff97 	bl	800bc48 <ucdr_serialize_bool>
 8013d1a:	78ab      	ldrb	r3, [r5, #2]
 8013d1c:	4004      	ands	r4, r0
 8013d1e:	b2e4      	uxtb	r4, r4
 8013d20:	b90b      	cbnz	r3, 8013d26 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013d22:	4620      	mov	r0, r4
 8013d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d26:	f105 0108 	add.w	r1, r5, #8
 8013d2a:	4630      	mov	r0, r6
 8013d2c:	f7ff ff96 	bl	8013c5c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013d30:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013d34:	4607      	mov	r7, r0
 8013d36:	4630      	mov	r0, r6
 8013d38:	f7f7 ff86 	bl	800bc48 <ucdr_serialize_bool>
 8013d3c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013d40:	4038      	ands	r0, r7
 8013d42:	b2c7      	uxtb	r7, r0
 8013d44:	b913      	cbnz	r3, 8013d4c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013d46:	403c      	ands	r4, r7
 8013d48:	4620      	mov	r0, r4
 8013d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d4c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013d50:	4630      	mov	r0, r6
 8013d52:	f7f8 fc13 	bl	800c57c <ucdr_serialize_uint64_t>
 8013d56:	4007      	ands	r7, r0
 8013d58:	e7f5      	b.n	8013d46 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013d5a:	bf00      	nop

08013d5c <uxr_serialize_OBJK_Replier_Binary>:
 8013d5c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013d60:	460f      	mov	r7, r1
 8013d62:	6809      	ldr	r1, [r1, #0]
 8013d64:	4680      	mov	r8, r0
 8013d66:	f004 fda9 	bl	80188bc <ucdr_serialize_string>
 8013d6a:	6879      	ldr	r1, [r7, #4]
 8013d6c:	4605      	mov	r5, r0
 8013d6e:	4640      	mov	r0, r8
 8013d70:	f004 fda4 	bl	80188bc <ucdr_serialize_string>
 8013d74:	68b9      	ldr	r1, [r7, #8]
 8013d76:	4005      	ands	r5, r0
 8013d78:	4640      	mov	r0, r8
 8013d7a:	f004 fd9f 	bl	80188bc <ucdr_serialize_string>
 8013d7e:	b2ec      	uxtb	r4, r5
 8013d80:	4004      	ands	r4, r0
 8013d82:	7b39      	ldrb	r1, [r7, #12]
 8013d84:	4640      	mov	r0, r8
 8013d86:	f7f7 ff5f 	bl	800bc48 <ucdr_serialize_bool>
 8013d8a:	7b3b      	ldrb	r3, [r7, #12]
 8013d8c:	4004      	ands	r4, r0
 8013d8e:	b94b      	cbnz	r3, 8013da4 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8013d90:	7d39      	ldrb	r1, [r7, #20]
 8013d92:	4640      	mov	r0, r8
 8013d94:	f7f7 ff58 	bl	800bc48 <ucdr_serialize_bool>
 8013d98:	7d3b      	ldrb	r3, [r7, #20]
 8013d9a:	4004      	ands	r4, r0
 8013d9c:	b943      	cbnz	r3, 8013db0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8013d9e:	4620      	mov	r0, r4
 8013da0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013da4:	6939      	ldr	r1, [r7, #16]
 8013da6:	4640      	mov	r0, r8
 8013da8:	f004 fd88 	bl	80188bc <ucdr_serialize_string>
 8013dac:	4004      	ands	r4, r0
 8013dae:	e7ef      	b.n	8013d90 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8013db0:	69b9      	ldr	r1, [r7, #24]
 8013db2:	4640      	mov	r0, r8
 8013db4:	f004 fd82 	bl	80188bc <ucdr_serialize_string>
 8013db8:	4004      	ands	r4, r0
 8013dba:	b2e4      	uxtb	r4, r4
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013dc2:	bf00      	nop

08013dc4 <uxr_deserialize_ObjectVariant>:
 8013dc4:	b570      	push	{r4, r5, r6, lr}
 8013dc6:	4605      	mov	r5, r0
 8013dc8:	460e      	mov	r6, r1
 8013dca:	f7f7 ff81 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8013dce:	b168      	cbz	r0, 8013dec <uxr_deserialize_ObjectVariant+0x28>
 8013dd0:	7833      	ldrb	r3, [r6, #0]
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	4604      	mov	r4, r0
 8013dd6:	2b0d      	cmp	r3, #13
 8013dd8:	d809      	bhi.n	8013dee <uxr_deserialize_ObjectVariant+0x2a>
 8013dda:	e8df f003 	tbb	[pc, r3]
 8013dde:	0a41      	.short	0x0a41
 8013de0:	0a0a2323 	.word	0x0a0a2323
 8013de4:	10080a0a 	.word	0x10080a0a
 8013de8:	565c1010 	.word	0x565c1010
 8013dec:	2400      	movs	r4, #0
 8013dee:	4620      	mov	r0, r4
 8013df0:	bd70      	pop	{r4, r5, r6, pc}
 8013df2:	1d31      	adds	r1, r6, #4
 8013df4:	4628      	mov	r0, r5
 8013df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dfa:	f7ff be0d 	b.w	8013a18 <uxr_deserialize_DATAWRITER_Representation>
 8013dfe:	1d31      	adds	r1, r6, #4
 8013e00:	4628      	mov	r0, r5
 8013e02:	f7f7 ff65 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8013e06:	2800      	cmp	r0, #0
 8013e08:	d0f0      	beq.n	8013dec <uxr_deserialize_ObjectVariant+0x28>
 8013e0a:	7933      	ldrb	r3, [r6, #4]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d001      	beq.n	8013e14 <uxr_deserialize_ObjectVariant+0x50>
 8013e10:	2b02      	cmp	r3, #2
 8013e12:	d1ec      	bne.n	8013dee <uxr_deserialize_ObjectVariant+0x2a>
 8013e14:	68b1      	ldr	r1, [r6, #8]
 8013e16:	4628      	mov	r0, r5
 8013e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e20:	f004 bd5c 	b.w	80188dc <ucdr_deserialize_string>
 8013e24:	1d31      	adds	r1, r6, #4
 8013e26:	4628      	mov	r0, r5
 8013e28:	f7f7 ff52 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	b170      	cbz	r0, 8013e4e <uxr_deserialize_ObjectVariant+0x8a>
 8013e30:	7933      	ldrb	r3, [r6, #4]
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	d04c      	beq.n	8013ed0 <uxr_deserialize_ObjectVariant+0x10c>
 8013e36:	2b03      	cmp	r3, #3
 8013e38:	d109      	bne.n	8013e4e <uxr_deserialize_ObjectVariant+0x8a>
 8013e3a:	f106 0308 	add.w	r3, r6, #8
 8013e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e42:	f106 010c 	add.w	r1, r6, #12
 8013e46:	4628      	mov	r0, r5
 8013e48:	f7fc ff50 	bl	8010cec <ucdr_deserialize_sequence_uint8_t>
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	2202      	movs	r2, #2
 8013e50:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013e54:	4628      	mov	r0, r5
 8013e56:	f7fc fdfd 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013e5a:	4020      	ands	r0, r4
 8013e5c:	b2c4      	uxtb	r4, r0
 8013e5e:	e7c6      	b.n	8013dee <uxr_deserialize_ObjectVariant+0x2a>
 8013e60:	1d31      	adds	r1, r6, #4
 8013e62:	4628      	mov	r0, r5
 8013e64:	f7f7 ff34 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8013e68:	4604      	mov	r4, r0
 8013e6a:	b130      	cbz	r0, 8013e7a <uxr_deserialize_ObjectVariant+0xb6>
 8013e6c:	7933      	ldrb	r3, [r6, #4]
 8013e6e:	2b02      	cmp	r3, #2
 8013e70:	d036      	beq.n	8013ee0 <uxr_deserialize_ObjectVariant+0x11c>
 8013e72:	2b03      	cmp	r3, #3
 8013e74:	d03c      	beq.n	8013ef0 <uxr_deserialize_ObjectVariant+0x12c>
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d032      	beq.n	8013ee0 <uxr_deserialize_ObjectVariant+0x11c>
 8013e7a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013e7e:	4628      	mov	r0, r5
 8013e80:	f7f8 fccc 	bl	800c81c <ucdr_deserialize_int16_t>
 8013e84:	4020      	ands	r0, r4
 8013e86:	b2c4      	uxtb	r4, r0
 8013e88:	e7b1      	b.n	8013dee <uxr_deserialize_ObjectVariant+0x2a>
 8013e8a:	1d31      	adds	r1, r6, #4
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e92:	f7ff bc77 	b.w	8013784 <uxr_deserialize_CLIENT_Representation>
 8013e96:	2204      	movs	r2, #4
 8013e98:	18b1      	adds	r1, r6, r2
 8013e9a:	4628      	mov	r0, r5
 8013e9c:	f7fc fdda 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013ea0:	2202      	movs	r2, #2
 8013ea2:	f106 0108 	add.w	r1, r6, #8
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	f7fc fdd3 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013eae:	2202      	movs	r2, #2
 8013eb0:	4004      	ands	r4, r0
 8013eb2:	f106 010a 	add.w	r1, r6, #10
 8013eb6:	4628      	mov	r0, r5
 8013eb8:	f7fc fdcc 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013ebc:	b2e4      	uxtb	r4, r4
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	f106 010c 	add.w	r1, r6, #12
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	401c      	ands	r4, r3
 8013ec8:	f7f7 fed4 	bl	800bc74 <ucdr_deserialize_bool>
 8013ecc:	4004      	ands	r4, r0
 8013ece:	e78e      	b.n	8013dee <uxr_deserialize_ObjectVariant+0x2a>
 8013ed0:	68b1      	ldr	r1, [r6, #8]
 8013ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	f004 fd00 	bl	80188dc <ucdr_deserialize_string>
 8013edc:	4604      	mov	r4, r0
 8013ede:	e7b6      	b.n	8013e4e <uxr_deserialize_ObjectVariant+0x8a>
 8013ee0:	68b1      	ldr	r1, [r6, #8]
 8013ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	f004 fcf8 	bl	80188dc <ucdr_deserialize_string>
 8013eec:	4604      	mov	r4, r0
 8013eee:	e7c4      	b.n	8013e7a <uxr_deserialize_ObjectVariant+0xb6>
 8013ef0:	f106 0308 	add.w	r3, r6, #8
 8013ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ef8:	f106 010c 	add.w	r1, r6, #12
 8013efc:	4628      	mov	r0, r5
 8013efe:	f7fc fef5 	bl	8010cec <ucdr_deserialize_sequence_uint8_t>
 8013f02:	4604      	mov	r4, r0
 8013f04:	e7b9      	b.n	8013e7a <uxr_deserialize_ObjectVariant+0xb6>
 8013f06:	bf00      	nop

08013f08 <uxr_deserialize_BaseObjectRequest>:
 8013f08:	b570      	push	{r4, r5, r6, lr}
 8013f0a:	2202      	movs	r2, #2
 8013f0c:	4605      	mov	r5, r0
 8013f0e:	460e      	mov	r6, r1
 8013f10:	f7fc fda0 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013f14:	2202      	movs	r2, #2
 8013f16:	4604      	mov	r4, r0
 8013f18:	18b1      	adds	r1, r6, r2
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	f7fc fd9a 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8013f20:	4020      	ands	r0, r4
 8013f22:	b2c0      	uxtb	r0, r0
 8013f24:	bd70      	pop	{r4, r5, r6, pc}
 8013f26:	bf00      	nop

08013f28 <uxr_serialize_ActivityInfoVariant>:
 8013f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f2c:	460d      	mov	r5, r1
 8013f2e:	7809      	ldrb	r1, [r1, #0]
 8013f30:	4607      	mov	r7, r0
 8013f32:	f7f7 feb7 	bl	800bca4 <ucdr_serialize_uint8_t>
 8013f36:	4681      	mov	r9, r0
 8013f38:	b138      	cbz	r0, 8013f4a <uxr_serialize_ActivityInfoVariant+0x22>
 8013f3a:	782b      	ldrb	r3, [r5, #0]
 8013f3c:	2b06      	cmp	r3, #6
 8013f3e:	f000 8082 	beq.w	8014046 <uxr_serialize_ActivityInfoVariant+0x11e>
 8013f42:	2b0d      	cmp	r3, #13
 8013f44:	d016      	beq.n	8013f74 <uxr_serialize_ActivityInfoVariant+0x4c>
 8013f46:	2b05      	cmp	r3, #5
 8013f48:	d002      	beq.n	8013f50 <uxr_serialize_ActivityInfoVariant+0x28>
 8013f4a:	4648      	mov	r0, r9
 8013f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f50:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013f54:	4638      	mov	r0, r7
 8013f56:	f7f8 fbe1 	bl	800c71c <ucdr_serialize_int16_t>
 8013f5a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013f5e:	4681      	mov	r9, r0
 8013f60:	4638      	mov	r0, r7
 8013f62:	f7f8 fb0b 	bl	800c57c <ucdr_serialize_uint64_t>
 8013f66:	ea09 0000 	and.w	r0, r9, r0
 8013f6a:	fa5f f980 	uxtb.w	r9, r0
 8013f6e:	4648      	mov	r0, r9
 8013f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f74:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013f78:	4638      	mov	r0, r7
 8013f7a:	f7f8 fbcf 	bl	800c71c <ucdr_serialize_int16_t>
 8013f7e:	68e9      	ldr	r1, [r5, #12]
 8013f80:	4681      	mov	r9, r0
 8013f82:	4638      	mov	r0, r7
 8013f84:	f7f8 f8a4 	bl	800c0d0 <ucdr_serialize_uint32_t>
 8013f88:	68eb      	ldr	r3, [r5, #12]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d0eb      	beq.n	8013f66 <uxr_serialize_ActivityInfoVariant+0x3e>
 8013f8e:	b320      	cbz	r0, 8013fda <uxr_serialize_ActivityInfoVariant+0xb2>
 8013f90:	f105 080c 	add.w	r8, r5, #12
 8013f94:	2600      	movs	r6, #0
 8013f96:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013f9a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013f9e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8013fa2:	4638      	mov	r0, r7
 8013fa4:	f7f7 fe7e 	bl	800bca4 <ucdr_serialize_uint8_t>
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	d053      	beq.n	8014054 <uxr_serialize_ActivityInfoVariant+0x12c>
 8013fac:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013fb0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013fb4:	0074      	lsls	r4, r6, #1
 8013fb6:	00c9      	lsls	r1, r1, #3
 8013fb8:	2b03      	cmp	r3, #3
 8013fba:	d854      	bhi.n	8014066 <uxr_serialize_ActivityInfoVariant+0x13e>
 8013fbc:	e8df f003 	tbb	[pc, r3]
 8013fc0:	02102132 	.word	0x02102132
 8013fc4:	4441      	add	r1, r8
 8013fc6:	4638      	mov	r0, r7
 8013fc8:	6889      	ldr	r1, [r1, #8]
 8013fca:	f004 fc77 	bl	80188bc <ucdr_serialize_string>
 8013fce:	68ea      	ldr	r2, [r5, #12]
 8013fd0:	3601      	adds	r6, #1
 8013fd2:	4296      	cmp	r6, r2
 8013fd4:	d242      	bcs.n	801405c <uxr_serialize_ActivityInfoVariant+0x134>
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	d1dd      	bne.n	8013f96 <uxr_serialize_ActivityInfoVariant+0x6e>
 8013fda:	f04f 0900 	mov.w	r9, #0
 8013fde:	e7b4      	b.n	8013f4a <uxr_serialize_ActivityInfoVariant+0x22>
 8013fe0:	3108      	adds	r1, #8
 8013fe2:	4441      	add	r1, r8
 8013fe4:	2210      	movs	r2, #16
 8013fe6:	4638      	mov	r0, r7
 8013fe8:	f7fc fcd0 	bl	801098c <ucdr_serialize_array_uint8_t>
 8013fec:	4434      	add	r4, r6
 8013fee:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013ff6:	4638      	mov	r0, r7
 8013ff8:	f7f8 f86a 	bl	800c0d0 <ucdr_serialize_uint32_t>
 8013ffc:	4020      	ands	r0, r4
 8013ffe:	b2c0      	uxtb	r0, r0
 8014000:	e7e5      	b.n	8013fce <uxr_serialize_ActivityInfoVariant+0xa6>
 8014002:	3108      	adds	r1, #8
 8014004:	4441      	add	r1, r8
 8014006:	2204      	movs	r2, #4
 8014008:	4638      	mov	r0, r7
 801400a:	f7fc fcbf 	bl	801098c <ucdr_serialize_array_uint8_t>
 801400e:	4434      	add	r4, r6
 8014010:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014014:	4604      	mov	r4, r0
 8014016:	8b19      	ldrh	r1, [r3, #24]
 8014018:	4638      	mov	r0, r7
 801401a:	f7f7 fe6f 	bl	800bcfc <ucdr_serialize_uint16_t>
 801401e:	4020      	ands	r0, r4
 8014020:	b2c0      	uxtb	r0, r0
 8014022:	e7d4      	b.n	8013fce <uxr_serialize_ActivityInfoVariant+0xa6>
 8014024:	3108      	adds	r1, #8
 8014026:	4441      	add	r1, r8
 8014028:	2202      	movs	r2, #2
 801402a:	4638      	mov	r0, r7
 801402c:	f7fc fcae 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014030:	4434      	add	r4, r6
 8014032:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014036:	4604      	mov	r4, r0
 8014038:	7d99      	ldrb	r1, [r3, #22]
 801403a:	4638      	mov	r0, r7
 801403c:	f7f7 fe32 	bl	800bca4 <ucdr_serialize_uint8_t>
 8014040:	4020      	ands	r0, r4
 8014042:	b2c0      	uxtb	r0, r0
 8014044:	e7c3      	b.n	8013fce <uxr_serialize_ActivityInfoVariant+0xa6>
 8014046:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801404a:	4638      	mov	r0, r7
 801404c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014050:	f7f8 bb64 	b.w	800c71c <ucdr_serialize_int16_t>
 8014054:	68ea      	ldr	r2, [r5, #12]
 8014056:	3601      	adds	r6, #1
 8014058:	42b2      	cmp	r2, r6
 801405a:	d8be      	bhi.n	8013fda <uxr_serialize_ActivityInfoVariant+0xb2>
 801405c:	ea09 0900 	and.w	r9, r9, r0
 8014060:	fa5f f989 	uxtb.w	r9, r9
 8014064:	e771      	b.n	8013f4a <uxr_serialize_ActivityInfoVariant+0x22>
 8014066:	68eb      	ldr	r3, [r5, #12]
 8014068:	3601      	adds	r6, #1
 801406a:	429e      	cmp	r6, r3
 801406c:	f10a 0a18 	add.w	sl, sl, #24
 8014070:	d395      	bcc.n	8013f9e <uxr_serialize_ActivityInfoVariant+0x76>
 8014072:	e76a      	b.n	8013f4a <uxr_serialize_ActivityInfoVariant+0x22>

08014074 <uxr_deserialize_BaseObjectReply>:
 8014074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014078:	2202      	movs	r2, #2
 801407a:	4606      	mov	r6, r0
 801407c:	460f      	mov	r7, r1
 801407e:	f7fc fce9 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8014082:	2202      	movs	r2, #2
 8014084:	18b9      	adds	r1, r7, r2
 8014086:	4605      	mov	r5, r0
 8014088:	4630      	mov	r0, r6
 801408a:	f7fc fce3 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 801408e:	1d39      	adds	r1, r7, #4
 8014090:	4680      	mov	r8, r0
 8014092:	4630      	mov	r0, r6
 8014094:	f7f7 fe1c 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8014098:	1d79      	adds	r1, r7, #5
 801409a:	4604      	mov	r4, r0
 801409c:	4630      	mov	r0, r6
 801409e:	f7f7 fe17 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80140a2:	ea05 0508 	and.w	r5, r5, r8
 80140a6:	402c      	ands	r4, r5
 80140a8:	4020      	ands	r0, r4
 80140aa:	b2c0      	uxtb	r0, r0
 80140ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140b0 <uxr_serialize_ReadSpecification>:
 80140b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b4:	460e      	mov	r6, r1
 80140b6:	7809      	ldrb	r1, [r1, #0]
 80140b8:	4607      	mov	r7, r0
 80140ba:	f7f7 fdf3 	bl	800bca4 <ucdr_serialize_uint8_t>
 80140be:	7871      	ldrb	r1, [r6, #1]
 80140c0:	4604      	mov	r4, r0
 80140c2:	4638      	mov	r0, r7
 80140c4:	f7f7 fdee 	bl	800bca4 <ucdr_serialize_uint8_t>
 80140c8:	78b1      	ldrb	r1, [r6, #2]
 80140ca:	4004      	ands	r4, r0
 80140cc:	4638      	mov	r0, r7
 80140ce:	f7f7 fdbb 	bl	800bc48 <ucdr_serialize_bool>
 80140d2:	78b3      	ldrb	r3, [r6, #2]
 80140d4:	b2e4      	uxtb	r4, r4
 80140d6:	4004      	ands	r4, r0
 80140d8:	b94b      	cbnz	r3, 80140ee <uxr_serialize_ReadSpecification+0x3e>
 80140da:	7a31      	ldrb	r1, [r6, #8]
 80140dc:	4638      	mov	r0, r7
 80140de:	f7f7 fdb3 	bl	800bc48 <ucdr_serialize_bool>
 80140e2:	7a33      	ldrb	r3, [r6, #8]
 80140e4:	4004      	ands	r4, r0
 80140e6:	b943      	cbnz	r3, 80140fa <uxr_serialize_ReadSpecification+0x4a>
 80140e8:	4620      	mov	r0, r4
 80140ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ee:	6871      	ldr	r1, [r6, #4]
 80140f0:	4638      	mov	r0, r7
 80140f2:	f004 fbe3 	bl	80188bc <ucdr_serialize_string>
 80140f6:	4004      	ands	r4, r0
 80140f8:	e7ef      	b.n	80140da <uxr_serialize_ReadSpecification+0x2a>
 80140fa:	8971      	ldrh	r1, [r6, #10]
 80140fc:	4638      	mov	r0, r7
 80140fe:	f7f7 fdfd 	bl	800bcfc <ucdr_serialize_uint16_t>
 8014102:	89b1      	ldrh	r1, [r6, #12]
 8014104:	4605      	mov	r5, r0
 8014106:	4638      	mov	r0, r7
 8014108:	f7f7 fdf8 	bl	800bcfc <ucdr_serialize_uint16_t>
 801410c:	89f1      	ldrh	r1, [r6, #14]
 801410e:	4005      	ands	r5, r0
 8014110:	4638      	mov	r0, r7
 8014112:	f7f7 fdf3 	bl	800bcfc <ucdr_serialize_uint16_t>
 8014116:	8a31      	ldrh	r1, [r6, #16]
 8014118:	4680      	mov	r8, r0
 801411a:	4638      	mov	r0, r7
 801411c:	f7f7 fdee 	bl	800bcfc <ucdr_serialize_uint16_t>
 8014120:	b2ed      	uxtb	r5, r5
 8014122:	4025      	ands	r5, r4
 8014124:	ea08 0505 	and.w	r5, r8, r5
 8014128:	ea00 0405 	and.w	r4, r0, r5
 801412c:	4620      	mov	r0, r4
 801412e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014132:	bf00      	nop

08014134 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014134:	f7ff bace 	b.w	80136d4 <uxr_serialize_CLIENT_Representation>

08014138 <uxr_serialize_CREATE_Payload>:
 8014138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801413a:	2202      	movs	r2, #2
 801413c:	4607      	mov	r7, r0
 801413e:	460e      	mov	r6, r1
 8014140:	f7fc fc24 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014144:	2202      	movs	r2, #2
 8014146:	18b1      	adds	r1, r6, r2
 8014148:	4605      	mov	r5, r0
 801414a:	4638      	mov	r0, r7
 801414c:	f7fc fc1e 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014150:	7931      	ldrb	r1, [r6, #4]
 8014152:	4604      	mov	r4, r0
 8014154:	4638      	mov	r0, r7
 8014156:	f7f7 fda5 	bl	800bca4 <ucdr_serialize_uint8_t>
 801415a:	b170      	cbz	r0, 801417a <uxr_serialize_CREATE_Payload+0x42>
 801415c:	7933      	ldrb	r3, [r6, #4]
 801415e:	402c      	ands	r4, r5
 8014160:	3b01      	subs	r3, #1
 8014162:	b2e4      	uxtb	r4, r4
 8014164:	2b0d      	cmp	r3, #13
 8014166:	d809      	bhi.n	801417c <uxr_serialize_CREATE_Payload+0x44>
 8014168:	e8df f003 	tbb	[pc, r3]
 801416c:	23230a4c 	.word	0x23230a4c
 8014170:	0a0a0a0a 	.word	0x0a0a0a0a
 8014174:	12121208 	.word	0x12121208
 8014178:	3e45      	.short	0x3e45
 801417a:	2400      	movs	r4, #0
 801417c:	4620      	mov	r0, r4
 801417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014180:	f106 0108 	add.w	r1, r6, #8
 8014184:	4638      	mov	r0, r7
 8014186:	f7ff fbab 	bl	80138e0 <uxr_serialize_DATAWRITER_Representation>
 801418a:	4004      	ands	r4, r0
 801418c:	4620      	mov	r0, r4
 801418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014190:	7a31      	ldrb	r1, [r6, #8]
 8014192:	4638      	mov	r0, r7
 8014194:	f7f7 fd86 	bl	800bca4 <ucdr_serialize_uint8_t>
 8014198:	2800      	cmp	r0, #0
 801419a:	d0ee      	beq.n	801417a <uxr_serialize_CREATE_Payload+0x42>
 801419c:	7a33      	ldrb	r3, [r6, #8]
 801419e:	2b01      	cmp	r3, #1
 80141a0:	d001      	beq.n	80141a6 <uxr_serialize_CREATE_Payload+0x6e>
 80141a2:	2b02      	cmp	r3, #2
 80141a4:	d1ea      	bne.n	801417c <uxr_serialize_CREATE_Payload+0x44>
 80141a6:	68f1      	ldr	r1, [r6, #12]
 80141a8:	4638      	mov	r0, r7
 80141aa:	f004 fb87 	bl	80188bc <ucdr_serialize_string>
 80141ae:	4004      	ands	r4, r0
 80141b0:	e7e4      	b.n	801417c <uxr_serialize_CREATE_Payload+0x44>
 80141b2:	7a31      	ldrb	r1, [r6, #8]
 80141b4:	4638      	mov	r0, r7
 80141b6:	f7f7 fd75 	bl	800bca4 <ucdr_serialize_uint8_t>
 80141ba:	4605      	mov	r5, r0
 80141bc:	b158      	cbz	r0, 80141d6 <uxr_serialize_CREATE_Payload+0x9e>
 80141be:	7a33      	ldrb	r3, [r6, #8]
 80141c0:	2b02      	cmp	r3, #2
 80141c2:	d034      	beq.n	801422e <uxr_serialize_CREATE_Payload+0xf6>
 80141c4:	2b03      	cmp	r3, #3
 80141c6:	d106      	bne.n	80141d6 <uxr_serialize_CREATE_Payload+0x9e>
 80141c8:	68f2      	ldr	r2, [r6, #12]
 80141ca:	f106 0110 	add.w	r1, r6, #16
 80141ce:	4638      	mov	r0, r7
 80141d0:	f7fc fd7a 	bl	8010cc8 <ucdr_serialize_sequence_uint8_t>
 80141d4:	4605      	mov	r5, r0
 80141d6:	2202      	movs	r2, #2
 80141d8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80141dc:	4638      	mov	r0, r7
 80141de:	f7fc fbd5 	bl	801098c <ucdr_serialize_array_uint8_t>
 80141e2:	4028      	ands	r0, r5
 80141e4:	4004      	ands	r4, r0
 80141e6:	e7c9      	b.n	801417c <uxr_serialize_CREATE_Payload+0x44>
 80141e8:	f106 0108 	add.w	r1, r6, #8
 80141ec:	4638      	mov	r0, r7
 80141ee:	f7ff fa71 	bl	80136d4 <uxr_serialize_CLIENT_Representation>
 80141f2:	4004      	ands	r4, r0
 80141f4:	e7c2      	b.n	801417c <uxr_serialize_CREATE_Payload+0x44>
 80141f6:	f106 0108 	add.w	r1, r6, #8
 80141fa:	4638      	mov	r0, r7
 80141fc:	f7ff fb26 	bl	801384c <uxr_serialize_AGENT_Representation>
 8014200:	4004      	ands	r4, r0
 8014202:	e7bb      	b.n	801417c <uxr_serialize_CREATE_Payload+0x44>
 8014204:	7a31      	ldrb	r1, [r6, #8]
 8014206:	4638      	mov	r0, r7
 8014208:	f7f7 fd4c 	bl	800bca4 <ucdr_serialize_uint8_t>
 801420c:	4605      	mov	r5, r0
 801420e:	b130      	cbz	r0, 801421e <uxr_serialize_CREATE_Payload+0xe6>
 8014210:	7a33      	ldrb	r3, [r6, #8]
 8014212:	2b02      	cmp	r3, #2
 8014214:	d011      	beq.n	801423a <uxr_serialize_CREATE_Payload+0x102>
 8014216:	2b03      	cmp	r3, #3
 8014218:	d015      	beq.n	8014246 <uxr_serialize_CREATE_Payload+0x10e>
 801421a:	2b01      	cmp	r3, #1
 801421c:	d00d      	beq.n	801423a <uxr_serialize_CREATE_Payload+0x102>
 801421e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014222:	4638      	mov	r0, r7
 8014224:	f7f8 fa7a 	bl	800c71c <ucdr_serialize_int16_t>
 8014228:	4028      	ands	r0, r5
 801422a:	4004      	ands	r4, r0
 801422c:	e7a6      	b.n	801417c <uxr_serialize_CREATE_Payload+0x44>
 801422e:	68f1      	ldr	r1, [r6, #12]
 8014230:	4638      	mov	r0, r7
 8014232:	f004 fb43 	bl	80188bc <ucdr_serialize_string>
 8014236:	4605      	mov	r5, r0
 8014238:	e7cd      	b.n	80141d6 <uxr_serialize_CREATE_Payload+0x9e>
 801423a:	68f1      	ldr	r1, [r6, #12]
 801423c:	4638      	mov	r0, r7
 801423e:	f004 fb3d 	bl	80188bc <ucdr_serialize_string>
 8014242:	4605      	mov	r5, r0
 8014244:	e7eb      	b.n	801421e <uxr_serialize_CREATE_Payload+0xe6>
 8014246:	68f2      	ldr	r2, [r6, #12]
 8014248:	f106 0110 	add.w	r1, r6, #16
 801424c:	4638      	mov	r0, r7
 801424e:	f7fc fd3b 	bl	8010cc8 <ucdr_serialize_sequence_uint8_t>
 8014252:	4605      	mov	r5, r0
 8014254:	e7e3      	b.n	801421e <uxr_serialize_CREATE_Payload+0xe6>
 8014256:	bf00      	nop

08014258 <uxr_deserialize_GET_INFO_Payload>:
 8014258:	b570      	push	{r4, r5, r6, lr}
 801425a:	2202      	movs	r2, #2
 801425c:	4605      	mov	r5, r0
 801425e:	460e      	mov	r6, r1
 8014260:	f7fc fbf8 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8014264:	2202      	movs	r2, #2
 8014266:	18b1      	adds	r1, r6, r2
 8014268:	4604      	mov	r4, r0
 801426a:	4628      	mov	r0, r5
 801426c:	f7fc fbf2 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8014270:	1d31      	adds	r1, r6, #4
 8014272:	4004      	ands	r4, r0
 8014274:	4628      	mov	r0, r5
 8014276:	f7f8 f85b 	bl	800c330 <ucdr_deserialize_uint32_t>
 801427a:	b2e4      	uxtb	r4, r4
 801427c:	4020      	ands	r0, r4
 801427e:	bd70      	pop	{r4, r5, r6, pc}

08014280 <uxr_serialize_DELETE_Payload>:
 8014280:	b570      	push	{r4, r5, r6, lr}
 8014282:	2202      	movs	r2, #2
 8014284:	4605      	mov	r5, r0
 8014286:	460e      	mov	r6, r1
 8014288:	f7fc fb80 	bl	801098c <ucdr_serialize_array_uint8_t>
 801428c:	2202      	movs	r2, #2
 801428e:	4604      	mov	r4, r0
 8014290:	18b1      	adds	r1, r6, r2
 8014292:	4628      	mov	r0, r5
 8014294:	f7fc fb7a 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014298:	4020      	ands	r0, r4
 801429a:	b2c0      	uxtb	r0, r0
 801429c:	bd70      	pop	{r4, r5, r6, pc}
 801429e:	bf00      	nop

080142a0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80142a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a4:	4605      	mov	r5, r0
 80142a6:	460e      	mov	r6, r1
 80142a8:	f7f7 fd12 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80142ac:	1c71      	adds	r1, r6, #1
 80142ae:	4604      	mov	r4, r0
 80142b0:	4628      	mov	r0, r5
 80142b2:	f7f7 fd0d 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80142b6:	2204      	movs	r2, #4
 80142b8:	18b1      	adds	r1, r6, r2
 80142ba:	4680      	mov	r8, r0
 80142bc:	4628      	mov	r0, r5
 80142be:	f7fc fbc9 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 80142c2:	f106 0108 	add.w	r1, r6, #8
 80142c6:	4607      	mov	r7, r0
 80142c8:	2202      	movs	r2, #2
 80142ca:	4628      	mov	r0, r5
 80142cc:	f7fc fbc2 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 80142d0:	ea04 0308 	and.w	r3, r4, r8
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	ea03 0407 	and.w	r4, r3, r7
 80142da:	2202      	movs	r2, #2
 80142dc:	4607      	mov	r7, r0
 80142de:	f106 010a 	add.w	r1, r6, #10
 80142e2:	4628      	mov	r0, r5
 80142e4:	f7fc fbb6 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 80142e8:	f106 010c 	add.w	r1, r6, #12
 80142ec:	4603      	mov	r3, r0
 80142ee:	4628      	mov	r0, r5
 80142f0:	461d      	mov	r5, r3
 80142f2:	f7f7 fcbf 	bl	800bc74 <ucdr_deserialize_bool>
 80142f6:	403c      	ands	r4, r7
 80142f8:	4025      	ands	r5, r4
 80142fa:	4028      	ands	r0, r5
 80142fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014300 <uxr_deserialize_STATUS_Payload>:
 8014300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014304:	2202      	movs	r2, #2
 8014306:	4606      	mov	r6, r0
 8014308:	460f      	mov	r7, r1
 801430a:	f7fc fba3 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 801430e:	2202      	movs	r2, #2
 8014310:	18b9      	adds	r1, r7, r2
 8014312:	4605      	mov	r5, r0
 8014314:	4630      	mov	r0, r6
 8014316:	f7fc fb9d 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 801431a:	1d39      	adds	r1, r7, #4
 801431c:	4680      	mov	r8, r0
 801431e:	4630      	mov	r0, r6
 8014320:	f7f7 fcd6 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8014324:	1d79      	adds	r1, r7, #5
 8014326:	4604      	mov	r4, r0
 8014328:	4630      	mov	r0, r6
 801432a:	f7f7 fcd1 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 801432e:	ea05 0508 	and.w	r5, r5, r8
 8014332:	402c      	ands	r4, r5
 8014334:	4020      	ands	r0, r4
 8014336:	b2c0      	uxtb	r0, r0
 8014338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801433c <uxr_serialize_INFO_Payload>:
 801433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014340:	2202      	movs	r2, #2
 8014342:	460c      	mov	r4, r1
 8014344:	4605      	mov	r5, r0
 8014346:	f7fc fb21 	bl	801098c <ucdr_serialize_array_uint8_t>
 801434a:	2202      	movs	r2, #2
 801434c:	18a1      	adds	r1, r4, r2
 801434e:	4680      	mov	r8, r0
 8014350:	4628      	mov	r0, r5
 8014352:	f7fc fb1b 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014356:	7921      	ldrb	r1, [r4, #4]
 8014358:	4607      	mov	r7, r0
 801435a:	4628      	mov	r0, r5
 801435c:	f7f7 fca2 	bl	800bca4 <ucdr_serialize_uint8_t>
 8014360:	7961      	ldrb	r1, [r4, #5]
 8014362:	4606      	mov	r6, r0
 8014364:	4628      	mov	r0, r5
 8014366:	f7f7 fc9d 	bl	800bca4 <ucdr_serialize_uint8_t>
 801436a:	ea08 0807 	and.w	r8, r8, r7
 801436e:	ea06 0608 	and.w	r6, r6, r8
 8014372:	4006      	ands	r6, r0
 8014374:	7a21      	ldrb	r1, [r4, #8]
 8014376:	4628      	mov	r0, r5
 8014378:	f7f7 fc66 	bl	800bc48 <ucdr_serialize_bool>
 801437c:	7a23      	ldrb	r3, [r4, #8]
 801437e:	b2f7      	uxtb	r7, r6
 8014380:	4606      	mov	r6, r0
 8014382:	b96b      	cbnz	r3, 80143a0 <uxr_serialize_INFO_Payload+0x64>
 8014384:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014388:	4628      	mov	r0, r5
 801438a:	f7f7 fc5d 	bl	800bc48 <ucdr_serialize_bool>
 801438e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8014392:	4030      	ands	r0, r6
 8014394:	b2c6      	uxtb	r6, r0
 8014396:	b983      	cbnz	r3, 80143ba <uxr_serialize_INFO_Payload+0x7e>
 8014398:	ea06 0007 	and.w	r0, r6, r7
 801439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a0:	7b21      	ldrb	r1, [r4, #12]
 80143a2:	4628      	mov	r0, r5
 80143a4:	f7f7 fc7e 	bl	800bca4 <ucdr_serialize_uint8_t>
 80143a8:	b188      	cbz	r0, 80143ce <uxr_serialize_INFO_Payload+0x92>
 80143aa:	f104 010c 	add.w	r1, r4, #12
 80143ae:	4628      	mov	r0, r5
 80143b0:	f7ff fabe 	bl	8013930 <uxr_serialize_ObjectVariant.part.0>
 80143b4:	4030      	ands	r0, r6
 80143b6:	b2c6      	uxtb	r6, r0
 80143b8:	e7e4      	b.n	8014384 <uxr_serialize_INFO_Payload+0x48>
 80143ba:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80143be:	4628      	mov	r0, r5
 80143c0:	f7ff fdb2 	bl	8013f28 <uxr_serialize_ActivityInfoVariant>
 80143c4:	4006      	ands	r6, r0
 80143c6:	ea06 0007 	and.w	r0, r6, r7
 80143ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ce:	4606      	mov	r6, r0
 80143d0:	e7d8      	b.n	8014384 <uxr_serialize_INFO_Payload+0x48>
 80143d2:	bf00      	nop

080143d4 <uxr_serialize_READ_DATA_Payload>:
 80143d4:	b570      	push	{r4, r5, r6, lr}
 80143d6:	2202      	movs	r2, #2
 80143d8:	4605      	mov	r5, r0
 80143da:	460e      	mov	r6, r1
 80143dc:	f7fc fad6 	bl	801098c <ucdr_serialize_array_uint8_t>
 80143e0:	2202      	movs	r2, #2
 80143e2:	18b1      	adds	r1, r6, r2
 80143e4:	4604      	mov	r4, r0
 80143e6:	4628      	mov	r0, r5
 80143e8:	f7fc fad0 	bl	801098c <ucdr_serialize_array_uint8_t>
 80143ec:	1d31      	adds	r1, r6, #4
 80143ee:	4004      	ands	r4, r0
 80143f0:	4628      	mov	r0, r5
 80143f2:	f7ff fe5d 	bl	80140b0 <uxr_serialize_ReadSpecification>
 80143f6:	b2e4      	uxtb	r4, r4
 80143f8:	4020      	ands	r0, r4
 80143fa:	bd70      	pop	{r4, r5, r6, pc}

080143fc <uxr_serialize_WRITE_DATA_Payload_Data>:
 80143fc:	b570      	push	{r4, r5, r6, lr}
 80143fe:	2202      	movs	r2, #2
 8014400:	4605      	mov	r5, r0
 8014402:	460e      	mov	r6, r1
 8014404:	f7fc fac2 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014408:	2202      	movs	r2, #2
 801440a:	4604      	mov	r4, r0
 801440c:	18b1      	adds	r1, r6, r2
 801440e:	4628      	mov	r0, r5
 8014410:	f7fc fabc 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014414:	4020      	ands	r0, r4
 8014416:	b2c0      	uxtb	r0, r0
 8014418:	bd70      	pop	{r4, r5, r6, pc}
 801441a:	bf00      	nop

0801441c <uxr_serialize_ACKNACK_Payload>:
 801441c:	b570      	push	{r4, r5, r6, lr}
 801441e:	460c      	mov	r4, r1
 8014420:	460e      	mov	r6, r1
 8014422:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014426:	4605      	mov	r5, r0
 8014428:	f7f7 fc68 	bl	800bcfc <ucdr_serialize_uint16_t>
 801442c:	2202      	movs	r2, #2
 801442e:	4621      	mov	r1, r4
 8014430:	4604      	mov	r4, r0
 8014432:	4628      	mov	r0, r5
 8014434:	f7fc faaa 	bl	801098c <ucdr_serialize_array_uint8_t>
 8014438:	7931      	ldrb	r1, [r6, #4]
 801443a:	4004      	ands	r4, r0
 801443c:	4628      	mov	r0, r5
 801443e:	f7f7 fc31 	bl	800bca4 <ucdr_serialize_uint8_t>
 8014442:	b2e4      	uxtb	r4, r4
 8014444:	4020      	ands	r0, r4
 8014446:	bd70      	pop	{r4, r5, r6, pc}

08014448 <uxr_deserialize_ACKNACK_Payload>:
 8014448:	b570      	push	{r4, r5, r6, lr}
 801444a:	4605      	mov	r5, r0
 801444c:	460e      	mov	r6, r1
 801444e:	f7f7 fd55 	bl	800befc <ucdr_deserialize_uint16_t>
 8014452:	2202      	movs	r2, #2
 8014454:	18b1      	adds	r1, r6, r2
 8014456:	4604      	mov	r4, r0
 8014458:	4628      	mov	r0, r5
 801445a:	f7fc fafb 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 801445e:	1d31      	adds	r1, r6, #4
 8014460:	4004      	ands	r4, r0
 8014462:	4628      	mov	r0, r5
 8014464:	f7f7 fc34 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 8014468:	b2e4      	uxtb	r4, r4
 801446a:	4020      	ands	r0, r4
 801446c:	bd70      	pop	{r4, r5, r6, pc}
 801446e:	bf00      	nop

08014470 <uxr_serialize_HEARTBEAT_Payload>:
 8014470:	b570      	push	{r4, r5, r6, lr}
 8014472:	460d      	mov	r5, r1
 8014474:	8809      	ldrh	r1, [r1, #0]
 8014476:	4606      	mov	r6, r0
 8014478:	f7f7 fc40 	bl	800bcfc <ucdr_serialize_uint16_t>
 801447c:	8869      	ldrh	r1, [r5, #2]
 801447e:	4604      	mov	r4, r0
 8014480:	4630      	mov	r0, r6
 8014482:	f7f7 fc3b 	bl	800bcfc <ucdr_serialize_uint16_t>
 8014486:	7929      	ldrb	r1, [r5, #4]
 8014488:	4004      	ands	r4, r0
 801448a:	4630      	mov	r0, r6
 801448c:	f7f7 fc0a 	bl	800bca4 <ucdr_serialize_uint8_t>
 8014490:	b2e4      	uxtb	r4, r4
 8014492:	4020      	ands	r0, r4
 8014494:	bd70      	pop	{r4, r5, r6, pc}
 8014496:	bf00      	nop

08014498 <uxr_deserialize_HEARTBEAT_Payload>:
 8014498:	b570      	push	{r4, r5, r6, lr}
 801449a:	4605      	mov	r5, r0
 801449c:	460e      	mov	r6, r1
 801449e:	f7f7 fd2d 	bl	800befc <ucdr_deserialize_uint16_t>
 80144a2:	1cb1      	adds	r1, r6, #2
 80144a4:	4604      	mov	r4, r0
 80144a6:	4628      	mov	r0, r5
 80144a8:	f7f7 fd28 	bl	800befc <ucdr_deserialize_uint16_t>
 80144ac:	1d31      	adds	r1, r6, #4
 80144ae:	4004      	ands	r4, r0
 80144b0:	4628      	mov	r0, r5
 80144b2:	f7f7 fc0d 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80144b6:	b2e4      	uxtb	r4, r4
 80144b8:	4020      	ands	r0, r4
 80144ba:	bd70      	pop	{r4, r5, r6, pc}

080144bc <uxr_serialize_TIMESTAMP_Payload>:
 80144bc:	b570      	push	{r4, r5, r6, lr}
 80144be:	460d      	mov	r5, r1
 80144c0:	6809      	ldr	r1, [r1, #0]
 80144c2:	4606      	mov	r6, r0
 80144c4:	f7f8 fa1e 	bl	800c904 <ucdr_serialize_int32_t>
 80144c8:	6869      	ldr	r1, [r5, #4]
 80144ca:	4604      	mov	r4, r0
 80144cc:	4630      	mov	r0, r6
 80144ce:	f7f7 fdff 	bl	800c0d0 <ucdr_serialize_uint32_t>
 80144d2:	4020      	ands	r0, r4
 80144d4:	b2c0      	uxtb	r0, r0
 80144d6:	bd70      	pop	{r4, r5, r6, pc}

080144d8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80144d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144dc:	4605      	mov	r5, r0
 80144de:	460e      	mov	r6, r1
 80144e0:	f7f8 faa8 	bl	800ca34 <ucdr_deserialize_int32_t>
 80144e4:	1d31      	adds	r1, r6, #4
 80144e6:	4607      	mov	r7, r0
 80144e8:	4628      	mov	r0, r5
 80144ea:	f7f7 ff21 	bl	800c330 <ucdr_deserialize_uint32_t>
 80144ee:	f106 0108 	add.w	r1, r6, #8
 80144f2:	4680      	mov	r8, r0
 80144f4:	4628      	mov	r0, r5
 80144f6:	f7f8 fa9d 	bl	800ca34 <ucdr_deserialize_int32_t>
 80144fa:	f106 010c 	add.w	r1, r6, #12
 80144fe:	4604      	mov	r4, r0
 8014500:	4628      	mov	r0, r5
 8014502:	f7f7 ff15 	bl	800c330 <ucdr_deserialize_uint32_t>
 8014506:	ea07 0708 	and.w	r7, r7, r8
 801450a:	403c      	ands	r4, r7
 801450c:	f106 0110 	add.w	r1, r6, #16
 8014510:	4004      	ands	r4, r0
 8014512:	4628      	mov	r0, r5
 8014514:	f7f8 fa8e 	bl	800ca34 <ucdr_deserialize_int32_t>
 8014518:	f106 0114 	add.w	r1, r6, #20
 801451c:	4607      	mov	r7, r0
 801451e:	4628      	mov	r0, r5
 8014520:	f7f7 ff06 	bl	800c330 <ucdr_deserialize_uint32_t>
 8014524:	b2e4      	uxtb	r4, r4
 8014526:	403c      	ands	r4, r7
 8014528:	4020      	ands	r0, r4
 801452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801452e:	bf00      	nop

08014530 <uxr_serialize_SampleIdentity>:
 8014530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014534:	220c      	movs	r2, #12
 8014536:	4604      	mov	r4, r0
 8014538:	460d      	mov	r5, r1
 801453a:	f7fc fa27 	bl	801098c <ucdr_serialize_array_uint8_t>
 801453e:	2203      	movs	r2, #3
 8014540:	f105 010c 	add.w	r1, r5, #12
 8014544:	4607      	mov	r7, r0
 8014546:	4620      	mov	r0, r4
 8014548:	f7fc fa20 	bl	801098c <ucdr_serialize_array_uint8_t>
 801454c:	7be9      	ldrb	r1, [r5, #15]
 801454e:	4680      	mov	r8, r0
 8014550:	4620      	mov	r0, r4
 8014552:	f7f7 fba7 	bl	800bca4 <ucdr_serialize_uint8_t>
 8014556:	6929      	ldr	r1, [r5, #16]
 8014558:	4606      	mov	r6, r0
 801455a:	4620      	mov	r0, r4
 801455c:	f7f8 f9d2 	bl	800c904 <ucdr_serialize_int32_t>
 8014560:	6969      	ldr	r1, [r5, #20]
 8014562:	4603      	mov	r3, r0
 8014564:	4620      	mov	r0, r4
 8014566:	ea07 0708 	and.w	r7, r7, r8
 801456a:	461c      	mov	r4, r3
 801456c:	f7f7 fdb0 	bl	800c0d0 <ucdr_serialize_uint32_t>
 8014570:	403e      	ands	r6, r7
 8014572:	4034      	ands	r4, r6
 8014574:	4020      	ands	r0, r4
 8014576:	b2c0      	uxtb	r0, r0
 8014578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801457c <uxr_deserialize_SampleIdentity>:
 801457c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014580:	220c      	movs	r2, #12
 8014582:	4604      	mov	r4, r0
 8014584:	460d      	mov	r5, r1
 8014586:	f7fc fa65 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 801458a:	2203      	movs	r2, #3
 801458c:	f105 010c 	add.w	r1, r5, #12
 8014590:	4607      	mov	r7, r0
 8014592:	4620      	mov	r0, r4
 8014594:	f7fc fa5e 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8014598:	f105 010f 	add.w	r1, r5, #15
 801459c:	4680      	mov	r8, r0
 801459e:	4620      	mov	r0, r4
 80145a0:	f7f7 fb96 	bl	800bcd0 <ucdr_deserialize_uint8_t>
 80145a4:	f105 0110 	add.w	r1, r5, #16
 80145a8:	4606      	mov	r6, r0
 80145aa:	4620      	mov	r0, r4
 80145ac:	f7f8 fa42 	bl	800ca34 <ucdr_deserialize_int32_t>
 80145b0:	f105 0114 	add.w	r1, r5, #20
 80145b4:	4603      	mov	r3, r0
 80145b6:	4620      	mov	r0, r4
 80145b8:	ea07 0708 	and.w	r7, r7, r8
 80145bc:	461c      	mov	r4, r3
 80145be:	f7f7 feb7 	bl	800c330 <ucdr_deserialize_uint32_t>
 80145c2:	403e      	ands	r6, r7
 80145c4:	4034      	ands	r4, r6
 80145c6:	4020      	ands	r0, r4
 80145c8:	b2c0      	uxtb	r0, r0
 80145ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ce:	bf00      	nop

080145d0 <rcl_client_get_rmw_handle>:
 80145d0:	b118      	cbz	r0, 80145da <rcl_client_get_rmw_handle+0xa>
 80145d2:	6800      	ldr	r0, [r0, #0]
 80145d4:	b108      	cbz	r0, 80145da <rcl_client_get_rmw_handle+0xa>
 80145d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145da:	4770      	bx	lr

080145dc <rcl_send_request>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	b1e8      	cbz	r0, 801461e <rcl_send_request+0x42>
 80145e2:	4604      	mov	r4, r0
 80145e4:	6800      	ldr	r0, [r0, #0]
 80145e6:	b1d0      	cbz	r0, 801461e <rcl_send_request+0x42>
 80145e8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80145ec:	b1bb      	cbz	r3, 801461e <rcl_send_request+0x42>
 80145ee:	460e      	mov	r6, r1
 80145f0:	b1d1      	cbz	r1, 8014628 <rcl_send_request+0x4c>
 80145f2:	4615      	mov	r5, r2
 80145f4:	b1c2      	cbz	r2, 8014628 <rcl_send_request+0x4c>
 80145f6:	2105      	movs	r1, #5
 80145f8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80145fc:	f002 fe58 	bl	80172b0 <__atomic_load_8>
 8014600:	6823      	ldr	r3, [r4, #0]
 8014602:	e9c5 0100 	strd	r0, r1, [r5]
 8014606:	462a      	mov	r2, r5
 8014608:	4631      	mov	r1, r6
 801460a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801460e:	f003 fd43 	bl	8018098 <rmw_send_request>
 8014612:	4606      	mov	r6, r0
 8014614:	b160      	cbz	r0, 8014630 <rcl_send_request+0x54>
 8014616:	2601      	movs	r6, #1
 8014618:	4630      	mov	r0, r6
 801461a:	b002      	add	sp, #8
 801461c:	bd70      	pop	{r4, r5, r6, pc}
 801461e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014622:	4630      	mov	r0, r6
 8014624:	b002      	add	sp, #8
 8014626:	bd70      	pop	{r4, r5, r6, pc}
 8014628:	260b      	movs	r6, #11
 801462a:	4630      	mov	r0, r6
 801462c:	b002      	add	sp, #8
 801462e:	bd70      	pop	{r4, r5, r6, pc}
 8014630:	6820      	ldr	r0, [r4, #0]
 8014632:	2105      	movs	r1, #5
 8014634:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014638:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801463c:	9100      	str	r1, [sp, #0]
 801463e:	f002 fea3 	bl	8017388 <__atomic_exchange_8>
 8014642:	4630      	mov	r0, r6
 8014644:	b002      	add	sp, #8
 8014646:	bd70      	pop	{r4, r5, r6, pc}

08014648 <rcl_take_response>:
 8014648:	b570      	push	{r4, r5, r6, lr}
 801464a:	468e      	mov	lr, r1
 801464c:	460c      	mov	r4, r1
 801464e:	4616      	mov	r6, r2
 8014650:	4605      	mov	r5, r0
 8014652:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014656:	b08c      	sub	sp, #48	@ 0x30
 8014658:	f10d 0c18 	add.w	ip, sp, #24
 801465c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014660:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014664:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014668:	b35d      	cbz	r5, 80146c2 <rcl_take_response+0x7a>
 801466a:	682b      	ldr	r3, [r5, #0]
 801466c:	b34b      	cbz	r3, 80146c2 <rcl_take_response+0x7a>
 801466e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014672:	b330      	cbz	r0, 80146c2 <rcl_take_response+0x7a>
 8014674:	b346      	cbz	r6, 80146c8 <rcl_take_response+0x80>
 8014676:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80146d0 <rcl_take_response+0x88>
 801467a:	2300      	movs	r3, #0
 801467c:	f88d 3007 	strb.w	r3, [sp, #7]
 8014680:	4632      	mov	r2, r6
 8014682:	f10d 0307 	add.w	r3, sp, #7
 8014686:	a902      	add	r1, sp, #8
 8014688:	ed8d 7b02 	vstr	d7, [sp, #8]
 801468c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014690:	f003 fe0a 	bl	80182a8 <rmw_take_response>
 8014694:	4605      	mov	r5, r0
 8014696:	b9c8      	cbnz	r0, 80146cc <rcl_take_response+0x84>
 8014698:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801469c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80146a0:	2a00      	cmp	r2, #0
 80146a2:	bf08      	it	eq
 80146a4:	461d      	moveq	r5, r3
 80146a6:	f10d 0e18 	add.w	lr, sp, #24
 80146aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80146ae:	46a4      	mov	ip, r4
 80146b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80146b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80146bc:	4628      	mov	r0, r5
 80146be:	b00c      	add	sp, #48	@ 0x30
 80146c0:	bd70      	pop	{r4, r5, r6, pc}
 80146c2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80146c6:	e7ee      	b.n	80146a6 <rcl_take_response+0x5e>
 80146c8:	250b      	movs	r5, #11
 80146ca:	e7ec      	b.n	80146a6 <rcl_take_response+0x5e>
 80146cc:	2501      	movs	r5, #1
 80146ce:	e7ea      	b.n	80146a6 <rcl_take_response+0x5e>
	...

080146d8 <rcl_client_is_valid>:
 80146d8:	b130      	cbz	r0, 80146e8 <rcl_client_is_valid+0x10>
 80146da:	6800      	ldr	r0, [r0, #0]
 80146dc:	b120      	cbz	r0, 80146e8 <rcl_client_is_valid+0x10>
 80146de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80146e2:	3800      	subs	r0, #0
 80146e4:	bf18      	it	ne
 80146e6:	2001      	movne	r0, #1
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop

080146ec <rcl_convert_rmw_ret_to_rcl_ret>:
 80146ec:	280b      	cmp	r0, #11
 80146ee:	dc0d      	bgt.n	801470c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80146f0:	2800      	cmp	r0, #0
 80146f2:	db09      	blt.n	8014708 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80146f4:	280b      	cmp	r0, #11
 80146f6:	d807      	bhi.n	8014708 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80146f8:	e8df f000 	tbb	[pc, r0]
 80146fc:	07060607 	.word	0x07060607
 8014700:	06060606 	.word	0x06060606
 8014704:	07070606 	.word	0x07070606
 8014708:	2001      	movs	r0, #1
 801470a:	4770      	bx	lr
 801470c:	28cb      	cmp	r0, #203	@ 0xcb
 801470e:	bf18      	it	ne
 8014710:	2001      	movne	r0, #1
 8014712:	4770      	bx	lr

08014714 <rcl_get_zero_initialized_context>:
 8014714:	4a03      	ldr	r2, [pc, #12]	@ (8014724 <rcl_get_zero_initialized_context+0x10>)
 8014716:	4603      	mov	r3, r0
 8014718:	e892 0003 	ldmia.w	r2, {r0, r1}
 801471c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014720:	4618      	mov	r0, r3
 8014722:	4770      	bx	lr
 8014724:	0801d8cc 	.word	0x0801d8cc

08014728 <rcl_context_is_valid>:
 8014728:	b118      	cbz	r0, 8014732 <rcl_context_is_valid+0xa>
 801472a:	6840      	ldr	r0, [r0, #4]
 801472c:	3800      	subs	r0, #0
 801472e:	bf18      	it	ne
 8014730:	2001      	movne	r0, #1
 8014732:	4770      	bx	lr

08014734 <__cleanup_context>:
 8014734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014738:	4606      	mov	r6, r0
 801473a:	6800      	ldr	r0, [r0, #0]
 801473c:	2300      	movs	r3, #0
 801473e:	6073      	str	r3, [r6, #4]
 8014740:	2800      	cmp	r0, #0
 8014742:	d049      	beq.n	80147d8 <__cleanup_context+0xa4>
 8014744:	6947      	ldr	r7, [r0, #20]
 8014746:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801474a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801474e:	b137      	cbz	r7, 801475e <__cleanup_context+0x2a>
 8014750:	3014      	adds	r0, #20
 8014752:	f7f8 fe61 	bl	800d418 <rcl_init_options_fini>
 8014756:	4607      	mov	r7, r0
 8014758:	2800      	cmp	r0, #0
 801475a:	d144      	bne.n	80147e6 <__cleanup_context+0xb2>
 801475c:	6830      	ldr	r0, [r6, #0]
 801475e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014760:	b143      	cbz	r3, 8014774 <__cleanup_context+0x40>
 8014762:	3028      	adds	r0, #40	@ 0x28
 8014764:	f7fa fa90 	bl	800ec88 <rmw_context_fini>
 8014768:	b118      	cbz	r0, 8014772 <__cleanup_context+0x3e>
 801476a:	2f00      	cmp	r7, #0
 801476c:	d03e      	beq.n	80147ec <__cleanup_context+0xb8>
 801476e:	f7f9 ffc3 	bl	800e6f8 <rcutils_reset_error>
 8014772:	6830      	ldr	r0, [r6, #0]
 8014774:	6a03      	ldr	r3, [r0, #32]
 8014776:	b1db      	cbz	r3, 80147b0 <__cleanup_context+0x7c>
 8014778:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801477c:	2a01      	cmp	r2, #1
 801477e:	f17c 0100 	sbcs.w	r1, ip, #0
 8014782:	db11      	blt.n	80147a8 <__cleanup_context+0x74>
 8014784:	2400      	movs	r4, #0
 8014786:	4625      	mov	r5, r4
 8014788:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801478c:	4649      	mov	r1, r9
 801478e:	b1b8      	cbz	r0, 80147c0 <__cleanup_context+0x8c>
 8014790:	47c0      	blx	r8
 8014792:	6833      	ldr	r3, [r6, #0]
 8014794:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8014798:	3401      	adds	r4, #1
 801479a:	f145 0500 	adc.w	r5, r5, #0
 801479e:	4294      	cmp	r4, r2
 80147a0:	eb75 010c 	sbcs.w	r1, r5, ip
 80147a4:	6a1b      	ldr	r3, [r3, #32]
 80147a6:	dbef      	blt.n	8014788 <__cleanup_context+0x54>
 80147a8:	4618      	mov	r0, r3
 80147aa:	4649      	mov	r1, r9
 80147ac:	47c0      	blx	r8
 80147ae:	6830      	ldr	r0, [r6, #0]
 80147b0:	4649      	mov	r1, r9
 80147b2:	47c0      	blx	r8
 80147b4:	2300      	movs	r3, #0
 80147b6:	e9c6 3300 	strd	r3, r3, [r6]
 80147ba:	4638      	mov	r0, r7
 80147bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147c0:	3401      	adds	r4, #1
 80147c2:	f145 0500 	adc.w	r5, r5, #0
 80147c6:	4294      	cmp	r4, r2
 80147c8:	eb75 010c 	sbcs.w	r1, r5, ip
 80147cc:	dbdc      	blt.n	8014788 <__cleanup_context+0x54>
 80147ce:	4618      	mov	r0, r3
 80147d0:	4649      	mov	r1, r9
 80147d2:	47c0      	blx	r8
 80147d4:	6830      	ldr	r0, [r6, #0]
 80147d6:	e7eb      	b.n	80147b0 <__cleanup_context+0x7c>
 80147d8:	4607      	mov	r7, r0
 80147da:	2300      	movs	r3, #0
 80147dc:	e9c6 3300 	strd	r3, r3, [r6]
 80147e0:	4638      	mov	r0, r7
 80147e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147e6:	f7f9 ff87 	bl	800e6f8 <rcutils_reset_error>
 80147ea:	e7b7      	b.n	801475c <__cleanup_context+0x28>
 80147ec:	f7ff ff7e 	bl	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 80147f0:	4607      	mov	r7, r0
 80147f2:	e7bc      	b.n	801476e <__cleanup_context+0x3a>

080147f4 <rcl_init>:
 80147f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147f8:	1e05      	subs	r5, r0, #0
 80147fa:	b09e      	sub	sp, #120	@ 0x78
 80147fc:	460e      	mov	r6, r1
 80147fe:	4690      	mov	r8, r2
 8014800:	461f      	mov	r7, r3
 8014802:	f340 809c 	ble.w	801493e <rcl_init+0x14a>
 8014806:	2900      	cmp	r1, #0
 8014808:	f000 809c 	beq.w	8014944 <rcl_init+0x150>
 801480c:	f1a1 0e04 	sub.w	lr, r1, #4
 8014810:	f04f 0c00 	mov.w	ip, #0
 8014814:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014818:	f10c 0c01 	add.w	ip, ip, #1
 801481c:	2c00      	cmp	r4, #0
 801481e:	f000 8091 	beq.w	8014944 <rcl_init+0x150>
 8014822:	4565      	cmp	r5, ip
 8014824:	d1f6      	bne.n	8014814 <rcl_init+0x20>
 8014826:	f1b8 0f00 	cmp.w	r8, #0
 801482a:	f000 808b 	beq.w	8014944 <rcl_init+0x150>
 801482e:	f8d8 4000 	ldr.w	r4, [r8]
 8014832:	2c00      	cmp	r4, #0
 8014834:	f000 8086 	beq.w	8014944 <rcl_init+0x150>
 8014838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801483a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801483e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014842:	6823      	ldr	r3, [r4, #0]
 8014844:	f8cc 3000 	str.w	r3, [ip]
 8014848:	a819      	add	r0, sp, #100	@ 0x64
 801484a:	f7f9 ff2f 	bl	800e6ac <rcutils_allocator_is_valid>
 801484e:	2800      	cmp	r0, #0
 8014850:	d078      	beq.n	8014944 <rcl_init+0x150>
 8014852:	2f00      	cmp	r7, #0
 8014854:	d076      	beq.n	8014944 <rcl_init+0x150>
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d178      	bne.n	801494e <rcl_init+0x15a>
 801485c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8014860:	2178      	movs	r1, #120	@ 0x78
 8014862:	2001      	movs	r0, #1
 8014864:	4798      	blx	r3
 8014866:	4604      	mov	r4, r0
 8014868:	6038      	str	r0, [r7, #0]
 801486a:	2800      	cmp	r0, #0
 801486c:	f000 80b6 	beq.w	80149dc <rcl_init+0x1e8>
 8014870:	a802      	add	r0, sp, #8
 8014872:	f003 f86d 	bl	8017950 <rmw_get_zero_initialized_context>
 8014876:	a902      	add	r1, sp, #8
 8014878:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801487c:	2250      	movs	r2, #80	@ 0x50
 801487e:	ac19      	add	r4, sp, #100	@ 0x64
 8014880:	f005 ff5d 	bl	801a73e <memcpy>
 8014884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014886:	f8d7 e000 	ldr.w	lr, [r7]
 801488a:	46f4      	mov	ip, lr
 801488c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014890:	6823      	ldr	r3, [r4, #0]
 8014892:	f8cc 3000 	str.w	r3, [ip]
 8014896:	f10e 0114 	add.w	r1, lr, #20
 801489a:	4640      	mov	r0, r8
 801489c:	f7f8 fde6 	bl	800d46c <rcl_init_options_copy>
 80148a0:	4604      	mov	r4, r0
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d144      	bne.n	8014930 <rcl_init+0x13c>
 80148a6:	f8d7 9000 	ldr.w	r9, [r7]
 80148aa:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80148ae:	f8c9 0020 	str.w	r0, [r9, #32]
 80148b2:	f8c9 5018 	str.w	r5, [r9, #24]
 80148b6:	f8c9 801c 	str.w	r8, [r9, #28]
 80148ba:	2d00      	cmp	r5, #0
 80148bc:	d04e      	beq.n	801495c <rcl_init+0x168>
 80148be:	2e00      	cmp	r6, #0
 80148c0:	d04c      	beq.n	801495c <rcl_init+0x168>
 80148c2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80148c6:	2104      	movs	r1, #4
 80148c8:	4628      	mov	r0, r5
 80148ca:	4798      	blx	r3
 80148cc:	f8c9 0020 	str.w	r0, [r9, #32]
 80148d0:	f8d7 9000 	ldr.w	r9, [r7]
 80148d4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80148d8:	46ca      	mov	sl, r9
 80148da:	b343      	cbz	r3, 801492e <rcl_init+0x13a>
 80148dc:	2d01      	cmp	r5, #1
 80148de:	f178 0300 	sbcs.w	r3, r8, #0
 80148e2:	db3b      	blt.n	801495c <rcl_init+0x168>
 80148e4:	2400      	movs	r4, #0
 80148e6:	3e04      	subs	r6, #4
 80148e8:	46a1      	mov	r9, r4
 80148ea:	e00b      	b.n	8014904 <rcl_init+0x110>
 80148ec:	6831      	ldr	r1, [r6, #0]
 80148ee:	f005 ff26 	bl	801a73e <memcpy>
 80148f2:	3401      	adds	r4, #1
 80148f4:	f149 0900 	adc.w	r9, r9, #0
 80148f8:	45c8      	cmp	r8, r9
 80148fa:	bf08      	it	eq
 80148fc:	42a5      	cmpeq	r5, r4
 80148fe:	d02b      	beq.n	8014958 <rcl_init+0x164>
 8014900:	f8d7 a000 	ldr.w	sl, [r7]
 8014904:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014908:	f7eb fc94 	bl	8000234 <strlen>
 801490c:	1c42      	adds	r2, r0, #1
 801490e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014910:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8014912:	f8da a020 	ldr.w	sl, [sl, #32]
 8014916:	9201      	str	r2, [sp, #4]
 8014918:	4610      	mov	r0, r2
 801491a:	4798      	blx	r3
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014922:	6a1b      	ldr	r3, [r3, #32]
 8014924:	9a01      	ldr	r2, [sp, #4]
 8014926:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801492a:	2800      	cmp	r0, #0
 801492c:	d1de      	bne.n	80148ec <rcl_init+0xf8>
 801492e:	240a      	movs	r4, #10
 8014930:	4638      	mov	r0, r7
 8014932:	f7ff feff 	bl	8014734 <__cleanup_context>
 8014936:	4620      	mov	r0, r4
 8014938:	b01e      	add	sp, #120	@ 0x78
 801493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801493e:	2900      	cmp	r1, #0
 8014940:	f43f af71 	beq.w	8014826 <rcl_init+0x32>
 8014944:	240b      	movs	r4, #11
 8014946:	4620      	mov	r0, r4
 8014948:	b01e      	add	sp, #120	@ 0x78
 801494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801494e:	2464      	movs	r4, #100	@ 0x64
 8014950:	4620      	mov	r0, r4
 8014952:	b01e      	add	sp, #120	@ 0x78
 8014954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014958:	f8d7 9000 	ldr.w	r9, [r7]
 801495c:	4926      	ldr	r1, [pc, #152]	@ (80149f8 <rcl_init+0x204>)
 801495e:	680b      	ldr	r3, [r1, #0]
 8014960:	3301      	adds	r3, #1
 8014962:	d036      	beq.n	80149d2 <rcl_init+0x1de>
 8014964:	600b      	str	r3, [r1, #0]
 8014966:	461a      	mov	r2, r3
 8014968:	2400      	movs	r4, #0
 801496a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801496e:	607b      	str	r3, [r7, #4]
 8014970:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014972:	3301      	adds	r3, #1
 8014974:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014978:	d034      	beq.n	80149e4 <rcl_init+0x1f0>
 801497a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801497e:	b93b      	cbnz	r3, 8014990 <rcl_init+0x19c>
 8014980:	3030      	adds	r0, #48	@ 0x30
 8014982:	f000 f83b 	bl	80149fc <rcl_get_localhost_only>
 8014986:	4604      	mov	r4, r0
 8014988:	2800      	cmp	r0, #0
 801498a:	d1d1      	bne.n	8014930 <rcl_init+0x13c>
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	6958      	ldr	r0, [r3, #20]
 8014990:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8014992:	aa18      	add	r2, sp, #96	@ 0x60
 8014994:	a917      	add	r1, sp, #92	@ 0x5c
 8014996:	f001 f925 	bl	8015be4 <rcl_validate_enclave_name>
 801499a:	4604      	mov	r4, r0
 801499c:	2800      	cmp	r0, #0
 801499e:	d1c7      	bne.n	8014930 <rcl_init+0x13c>
 80149a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80149a2:	b9eb      	cbnz	r3, 80149e0 <rcl_init+0x1ec>
 80149a4:	6839      	ldr	r1, [r7, #0]
 80149a6:	694b      	ldr	r3, [r1, #20]
 80149a8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80149aa:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80149ae:	f000 fb3f 	bl	8015030 <rcl_get_security_options_from_environment>
 80149b2:	4604      	mov	r4, r0
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d1bb      	bne.n	8014930 <rcl_init+0x13c>
 80149b8:	6839      	ldr	r1, [r7, #0]
 80149ba:	6948      	ldr	r0, [r1, #20]
 80149bc:	3128      	adds	r1, #40	@ 0x28
 80149be:	3018      	adds	r0, #24
 80149c0:	f7fa f82c 	bl	800ea1c <rmw_init>
 80149c4:	4604      	mov	r4, r0
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d0bd      	beq.n	8014946 <rcl_init+0x152>
 80149ca:	f7ff fe8f 	bl	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 80149ce:	4604      	mov	r4, r0
 80149d0:	e7ae      	b.n	8014930 <rcl_init+0x13c>
 80149d2:	2201      	movs	r2, #1
 80149d4:	461c      	mov	r4, r3
 80149d6:	600a      	str	r2, [r1, #0]
 80149d8:	4613      	mov	r3, r2
 80149da:	e7c6      	b.n	801496a <rcl_init+0x176>
 80149dc:	240a      	movs	r4, #10
 80149de:	e7b2      	b.n	8014946 <rcl_init+0x152>
 80149e0:	2401      	movs	r4, #1
 80149e2:	e7a5      	b.n	8014930 <rcl_init+0x13c>
 80149e4:	3024      	adds	r0, #36	@ 0x24
 80149e6:	f004 fce9 	bl	80193bc <rcl_get_default_domain_id>
 80149ea:	4604      	mov	r4, r0
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d19f      	bne.n	8014930 <rcl_init+0x13c>
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	6958      	ldr	r0, [r3, #20]
 80149f4:	e7c1      	b.n	801497a <rcl_init+0x186>
 80149f6:	bf00      	nop
 80149f8:	2000c108 	.word	0x2000c108

080149fc <rcl_get_localhost_only>:
 80149fc:	b510      	push	{r4, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	2300      	movs	r3, #0
 8014a02:	9301      	str	r3, [sp, #4]
 8014a04:	b1b8      	cbz	r0, 8014a36 <rcl_get_localhost_only+0x3a>
 8014a06:	4604      	mov	r4, r0
 8014a08:	a901      	add	r1, sp, #4
 8014a0a:	480c      	ldr	r0, [pc, #48]	@ (8014a3c <rcl_get_localhost_only+0x40>)
 8014a0c:	f002 fcf4 	bl	80173f8 <rcutils_get_env>
 8014a10:	b110      	cbz	r0, 8014a18 <rcl_get_localhost_only+0x1c>
 8014a12:	2001      	movs	r0, #1
 8014a14:	b002      	add	sp, #8
 8014a16:	bd10      	pop	{r4, pc}
 8014a18:	9b01      	ldr	r3, [sp, #4]
 8014a1a:	b113      	cbz	r3, 8014a22 <rcl_get_localhost_only+0x26>
 8014a1c:	781a      	ldrb	r2, [r3, #0]
 8014a1e:	2a31      	cmp	r2, #49	@ 0x31
 8014a20:	d004      	beq.n	8014a2c <rcl_get_localhost_only+0x30>
 8014a22:	2302      	movs	r3, #2
 8014a24:	2000      	movs	r0, #0
 8014a26:	7023      	strb	r3, [r4, #0]
 8014a28:	b002      	add	sp, #8
 8014a2a:	bd10      	pop	{r4, pc}
 8014a2c:	785b      	ldrb	r3, [r3, #1]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1f7      	bne.n	8014a22 <rcl_get_localhost_only+0x26>
 8014a32:	2301      	movs	r3, #1
 8014a34:	e7f6      	b.n	8014a24 <rcl_get_localhost_only+0x28>
 8014a36:	200b      	movs	r0, #11
 8014a38:	b002      	add	sp, #8
 8014a3a:	bd10      	pop	{r4, pc}
 8014a3c:	0801d8d4 	.word	0x0801d8d4

08014a40 <rcl_get_zero_initialized_node>:
 8014a40:	4a03      	ldr	r2, [pc, #12]	@ (8014a50 <rcl_get_zero_initialized_node+0x10>)
 8014a42:	4603      	mov	r3, r0
 8014a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a48:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	4770      	bx	lr
 8014a50:	0801d8f0 	.word	0x0801d8f0

08014a54 <rcl_node_init>:
 8014a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a58:	b0a9      	sub	sp, #164	@ 0xa4
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014a60:	a823      	add	r0, sp, #140	@ 0x8c
 8014a62:	460e      	mov	r6, r1
 8014a64:	4615      	mov	r5, r2
 8014a66:	461f      	mov	r7, r3
 8014a68:	f004 ff1c 	bl	80198a4 <rcl_guard_condition_get_default_options>
 8014a6c:	f1b8 0f00 	cmp.w	r8, #0
 8014a70:	f000 80e6 	beq.w	8014c40 <rcl_node_init+0x1ec>
 8014a74:	4640      	mov	r0, r8
 8014a76:	f7f9 fe19 	bl	800e6ac <rcutils_allocator_is_valid>
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	f000 80e0 	beq.w	8014c40 <rcl_node_init+0x1ec>
 8014a80:	2e00      	cmp	r6, #0
 8014a82:	f000 80dd 	beq.w	8014c40 <rcl_node_init+0x1ec>
 8014a86:	2d00      	cmp	r5, #0
 8014a88:	f000 80da 	beq.w	8014c40 <rcl_node_init+0x1ec>
 8014a8c:	2c00      	cmp	r4, #0
 8014a8e:	f000 80d7 	beq.w	8014c40 <rcl_node_init+0x1ec>
 8014a92:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014a96:	f1b9 0f00 	cmp.w	r9, #0
 8014a9a:	f040 80fd 	bne.w	8014c98 <rcl_node_init+0x244>
 8014a9e:	2f00      	cmp	r7, #0
 8014aa0:	f000 80ce 	beq.w	8014c40 <rcl_node_init+0x1ec>
 8014aa4:	4638      	mov	r0, r7
 8014aa6:	f7ff fe3f 	bl	8014728 <rcl_context_is_valid>
 8014aaa:	4682      	mov	sl, r0
 8014aac:	2800      	cmp	r0, #0
 8014aae:	f000 80cd 	beq.w	8014c4c <rcl_node_init+0x1f8>
 8014ab2:	464a      	mov	r2, r9
 8014ab4:	a922      	add	r1, sp, #136	@ 0x88
 8014ab6:	4630      	mov	r0, r6
 8014ab8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8014abc:	f003 f8c6 	bl	8017c4c <rmw_validate_node_name>
 8014ac0:	4681      	mov	r9, r0
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	f040 80be 	bne.w	8014c44 <rcl_node_init+0x1f0>
 8014ac8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014aca:	2800      	cmp	r0, #0
 8014acc:	f040 80f0 	bne.w	8014cb0 <rcl_node_init+0x25c>
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	f7eb fbaf 	bl	8000234 <strlen>
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	f040 80bb 	bne.w	8014c52 <rcl_node_init+0x1fe>
 8014adc:	4d7c      	ldr	r5, [pc, #496]	@ (8014cd0 <rcl_node_init+0x27c>)
 8014ade:	a922      	add	r1, sp, #136	@ 0x88
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	f003 f894 	bl	8017c10 <rmw_validate_namespace>
 8014ae8:	4681      	mov	r9, r0
 8014aea:	2800      	cmp	r0, #0
 8014aec:	f040 80aa 	bne.w	8014c44 <rcl_node_init+0x1f0>
 8014af0:	4682      	mov	sl, r0
 8014af2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014af4:	2800      	cmp	r0, #0
 8014af6:	f040 80e0 	bne.w	8014cba <rcl_node_init+0x266>
 8014afa:	f8d8 3000 	ldr.w	r3, [r8]
 8014afe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b02:	2078      	movs	r0, #120	@ 0x78
 8014b04:	4798      	blx	r3
 8014b06:	4681      	mov	r9, r0
 8014b08:	6060      	str	r0, [r4, #4]
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	f000 80ca 	beq.w	8014ca4 <rcl_node_init+0x250>
 8014b10:	2200      	movs	r2, #0
 8014b12:	2300      	movs	r3, #0
 8014b14:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8014b18:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8014b1c:	a808      	add	r0, sp, #32
 8014b1e:	f000 f907 	bl	8014d30 <rcl_node_get_default_options>
 8014b22:	a908      	add	r1, sp, #32
 8014b24:	4648      	mov	r0, r9
 8014b26:	2268      	movs	r2, #104	@ 0x68
 8014b28:	f005 fe09 	bl	801a73e <memcpy>
 8014b2c:	6861      	ldr	r1, [r4, #4]
 8014b2e:	6027      	str	r7, [r4, #0]
 8014b30:	4640      	mov	r0, r8
 8014b32:	f000 f90b 	bl	8014d4c <rcl_node_options_copy>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d158      	bne.n	8014bec <rcl_node_init+0x198>
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	f7eb fb7a 	bl	8000234 <strlen>
 8014b40:	4428      	add	r0, r5
 8014b42:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014b46:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014b4a:	2b2f      	cmp	r3, #47	@ 0x2f
 8014b4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014b50:	9300      	str	r3, [sp, #0]
 8014b52:	bf0c      	ite	eq
 8014b54:	4b5f      	ldreq	r3, [pc, #380]	@ (8014cd4 <rcl_node_init+0x280>)
 8014b56:	4b60      	ldrne	r3, [pc, #384]	@ (8014cd8 <rcl_node_init+0x284>)
 8014b58:	9302      	str	r3, [sp, #8]
 8014b5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014b5e:	9301      	str	r3, [sp, #4]
 8014b60:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014b64:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014b68:	f002 fc6e 	bl	8017448 <rcutils_format_string_limit>
 8014b6c:	6823      	ldr	r3, [r4, #0]
 8014b6e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8014b72:	6818      	ldr	r0, [r3, #0]
 8014b74:	4631      	mov	r1, r6
 8014b76:	3028      	adds	r0, #40	@ 0x28
 8014b78:	462a      	mov	r2, r5
 8014b7a:	6866      	ldr	r6, [r4, #4]
 8014b7c:	f7fa f930 	bl	800ede0 <rmw_create_node>
 8014b80:	6863      	ldr	r3, [r4, #4]
 8014b82:	66b0      	str	r0, [r6, #104]	@ 0x68
 8014b84:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014b86:	2800      	cmp	r0, #0
 8014b88:	d032      	beq.n	8014bf0 <rcl_node_init+0x19c>
 8014b8a:	f7fa f9bd 	bl	800ef08 <rmw_node_get_graph_guard_condition>
 8014b8e:	4681      	mov	r9, r0
 8014b90:	b360      	cbz	r0, 8014bec <rcl_node_init+0x198>
 8014b92:	f8d8 3000 	ldr.w	r3, [r8]
 8014b96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b9a:	6866      	ldr	r6, [r4, #4]
 8014b9c:	2008      	movs	r0, #8
 8014b9e:	4798      	blx	r3
 8014ba0:	6863      	ldr	r3, [r4, #4]
 8014ba2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014ba4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014ba8:	f1bb 0f00 	cmp.w	fp, #0
 8014bac:	d020      	beq.n	8014bf0 <rcl_node_init+0x19c>
 8014bae:	a806      	add	r0, sp, #24
 8014bb0:	f004 fd9c 	bl	80196ec <rcl_get_zero_initialized_guard_condition>
 8014bb4:	a806      	add	r0, sp, #24
 8014bb6:	c803      	ldmia	r0, {r0, r1}
 8014bb8:	6863      	ldr	r3, [r4, #4]
 8014bba:	46c4      	mov	ip, r8
 8014bbc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014bc0:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014bc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bc8:	ae23      	add	r6, sp, #140	@ 0x8c
 8014bca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014bcc:	f8dc 3000 	ldr.w	r3, [ip]
 8014bd0:	6033      	str	r3, [r6, #0]
 8014bd2:	ab28      	add	r3, sp, #160	@ 0xa0
 8014bd4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014bd8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014bdc:	4649      	mov	r1, r9
 8014bde:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014be0:	463a      	mov	r2, r7
 8014be2:	4670      	mov	r0, lr
 8014be4:	f004 fdd8 	bl	8019798 <rcl_guard_condition_init_from_rmw>
 8014be8:	4681      	mov	r9, r0
 8014bea:	b328      	cbz	r0, 8014c38 <rcl_node_init+0x1e4>
 8014bec:	6863      	ldr	r3, [r4, #4]
 8014bee:	b1f3      	cbz	r3, 8014c2e <rcl_node_init+0x1da>
 8014bf0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014bf2:	b128      	cbz	r0, 8014c00 <rcl_node_init+0x1ac>
 8014bf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014bf8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014bfc:	4798      	blx	r3
 8014bfe:	6863      	ldr	r3, [r4, #4]
 8014c00:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014c02:	b110      	cbz	r0, 8014c0a <rcl_node_init+0x1b6>
 8014c04:	f7fa f904 	bl	800ee10 <rmw_destroy_node>
 8014c08:	6863      	ldr	r3, [r4, #4]
 8014c0a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c0c:	b148      	cbz	r0, 8014c22 <rcl_node_init+0x1ce>
 8014c0e:	f004 fe23 	bl	8019858 <rcl_guard_condition_fini>
 8014c12:	6863      	ldr	r3, [r4, #4]
 8014c14:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c18:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c1e:	4798      	blx	r3
 8014c20:	6863      	ldr	r3, [r4, #4]
 8014c22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c26:	4618      	mov	r0, r3
 8014c28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c2c:	4798      	blx	r3
 8014c2e:	2300      	movs	r3, #0
 8014c30:	e9c4 3300 	strd	r3, r3, [r4]
 8014c34:	f04f 0901 	mov.w	r9, #1
 8014c38:	f1ba 0f00 	cmp.w	sl, #0
 8014c3c:	d125      	bne.n	8014c8a <rcl_node_init+0x236>
 8014c3e:	e001      	b.n	8014c44 <rcl_node_init+0x1f0>
 8014c40:	f04f 090b 	mov.w	r9, #11
 8014c44:	4648      	mov	r0, r9
 8014c46:	b029      	add	sp, #164	@ 0xa4
 8014c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014c50:	e7f8      	b.n	8014c44 <rcl_node_init+0x1f0>
 8014c52:	782b      	ldrb	r3, [r5, #0]
 8014c54:	2b2f      	cmp	r3, #47	@ 0x2f
 8014c56:	f43f af42 	beq.w	8014ade <rcl_node_init+0x8a>
 8014c5a:	9503      	str	r5, [sp, #12]
 8014c5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014c60:	9300      	str	r3, [sp, #0]
 8014c62:	4b1e      	ldr	r3, [pc, #120]	@ (8014cdc <rcl_node_init+0x288>)
 8014c64:	9302      	str	r3, [sp, #8]
 8014c66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014c6a:	9301      	str	r3, [sp, #4]
 8014c6c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014c70:	f002 fbea 	bl	8017448 <rcutils_format_string_limit>
 8014c74:	4605      	mov	r5, r0
 8014c76:	b340      	cbz	r0, 8014cca <rcl_node_init+0x276>
 8014c78:	2200      	movs	r2, #0
 8014c7a:	a922      	add	r1, sp, #136	@ 0x88
 8014c7c:	9222      	str	r2, [sp, #136]	@ 0x88
 8014c7e:	f002 ffc7 	bl	8017c10 <rmw_validate_namespace>
 8014c82:	4681      	mov	r9, r0
 8014c84:	2800      	cmp	r0, #0
 8014c86:	f43f af34 	beq.w	8014af2 <rcl_node_init+0x9e>
 8014c8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c8e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c92:	4628      	mov	r0, r5
 8014c94:	4798      	blx	r3
 8014c96:	e7d5      	b.n	8014c44 <rcl_node_init+0x1f0>
 8014c98:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014c9c:	4648      	mov	r0, r9
 8014c9e:	b029      	add	sp, #164	@ 0xa4
 8014ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca4:	f04f 090a 	mov.w	r9, #10
 8014ca8:	f1ba 0f00 	cmp.w	sl, #0
 8014cac:	d1ed      	bne.n	8014c8a <rcl_node_init+0x236>
 8014cae:	e7c9      	b.n	8014c44 <rcl_node_init+0x1f0>
 8014cb0:	f003 f81e 	bl	8017cf0 <rmw_node_name_validation_result_string>
 8014cb4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014cb8:	e7c4      	b.n	8014c44 <rcl_node_init+0x1f0>
 8014cba:	f002 ffbb 	bl	8017c34 <rmw_namespace_validation_result_string>
 8014cbe:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8014cc2:	f1ba 0f00 	cmp.w	sl, #0
 8014cc6:	d1e0      	bne.n	8014c8a <rcl_node_init+0x236>
 8014cc8:	e7bc      	b.n	8014c44 <rcl_node_init+0x1f0>
 8014cca:	f04f 090a 	mov.w	r9, #10
 8014cce:	e7b9      	b.n	8014c44 <rcl_node_init+0x1f0>
 8014cd0:	0801d09c 	.word	0x0801d09c
 8014cd4:	0801d0c4 	.word	0x0801d0c4
 8014cd8:	0801d0a0 	.word	0x0801d0a0
 8014cdc:	0801d8ec 	.word	0x0801d8ec

08014ce0 <rcl_node_is_valid>:
 8014ce0:	b130      	cbz	r0, 8014cf0 <rcl_node_is_valid+0x10>
 8014ce2:	6843      	ldr	r3, [r0, #4]
 8014ce4:	b123      	cbz	r3, 8014cf0 <rcl_node_is_valid+0x10>
 8014ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014ce8:	b113      	cbz	r3, 8014cf0 <rcl_node_is_valid+0x10>
 8014cea:	6800      	ldr	r0, [r0, #0]
 8014cec:	f7ff bd1c 	b.w	8014728 <rcl_context_is_valid>
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	4770      	bx	lr

08014cf4 <rcl_node_get_name>:
 8014cf4:	b120      	cbz	r0, 8014d00 <rcl_node_get_name+0xc>
 8014cf6:	6840      	ldr	r0, [r0, #4]
 8014cf8:	b110      	cbz	r0, 8014d00 <rcl_node_get_name+0xc>
 8014cfa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014cfc:	b100      	cbz	r0, 8014d00 <rcl_node_get_name+0xc>
 8014cfe:	6880      	ldr	r0, [r0, #8]
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop

08014d04 <rcl_node_get_namespace>:
 8014d04:	b120      	cbz	r0, 8014d10 <rcl_node_get_namespace+0xc>
 8014d06:	6840      	ldr	r0, [r0, #4]
 8014d08:	b110      	cbz	r0, 8014d10 <rcl_node_get_namespace+0xc>
 8014d0a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d0c:	b100      	cbz	r0, 8014d10 <rcl_node_get_namespace+0xc>
 8014d0e:	68c0      	ldr	r0, [r0, #12]
 8014d10:	4770      	bx	lr
 8014d12:	bf00      	nop

08014d14 <rcl_node_get_options>:
 8014d14:	b128      	cbz	r0, 8014d22 <rcl_node_get_options+0xe>
 8014d16:	6840      	ldr	r0, [r0, #4]
 8014d18:	b118      	cbz	r0, 8014d22 <rcl_node_get_options+0xe>
 8014d1a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	bf08      	it	eq
 8014d20:	2000      	moveq	r0, #0
 8014d22:	4770      	bx	lr

08014d24 <rcl_node_get_rmw_handle>:
 8014d24:	b110      	cbz	r0, 8014d2c <rcl_node_get_rmw_handle+0x8>
 8014d26:	6840      	ldr	r0, [r0, #4]
 8014d28:	b100      	cbz	r0, 8014d2c <rcl_node_get_rmw_handle+0x8>
 8014d2a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d2c:	4770      	bx	lr
 8014d2e:	bf00      	nop

08014d30 <rcl_node_get_default_options>:
 8014d30:	b510      	push	{r4, lr}
 8014d32:	2268      	movs	r2, #104	@ 0x68
 8014d34:	4604      	mov	r4, r0
 8014d36:	2100      	movs	r1, #0
 8014d38:	f005 fc38 	bl	801a5ac <memset>
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	f7f9 fca7 	bl	800e690 <rcutils_get_default_allocator>
 8014d42:	2301      	movs	r3, #1
 8014d44:	7523      	strb	r3, [r4, #20]
 8014d46:	4620      	mov	r0, r4
 8014d48:	bd10      	pop	{r4, pc}
 8014d4a:	bf00      	nop

08014d4c <rcl_node_options_copy>:
 8014d4c:	b1d0      	cbz	r0, 8014d84 <rcl_node_options_copy+0x38>
 8014d4e:	b570      	push	{r4, r5, r6, lr}
 8014d50:	460c      	mov	r4, r1
 8014d52:	b1a9      	cbz	r1, 8014d80 <rcl_node_options_copy+0x34>
 8014d54:	4288      	cmp	r0, r1
 8014d56:	4684      	mov	ip, r0
 8014d58:	d012      	beq.n	8014d80 <rcl_node_options_copy+0x34>
 8014d5a:	4605      	mov	r5, r0
 8014d5c:	8a86      	ldrh	r6, [r0, #20]
 8014d5e:	468e      	mov	lr, r1
 8014d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d66:	682b      	ldr	r3, [r5, #0]
 8014d68:	f8ce 3000 	str.w	r3, [lr]
 8014d6c:	f10c 0118 	add.w	r1, ip, #24
 8014d70:	2250      	movs	r2, #80	@ 0x50
 8014d72:	82a6      	strh	r6, [r4, #20]
 8014d74:	f104 0018 	add.w	r0, r4, #24
 8014d78:	f005 fce1 	bl	801a73e <memcpy>
 8014d7c:	2000      	movs	r0, #0
 8014d7e:	bd70      	pop	{r4, r5, r6, pc}
 8014d80:	200b      	movs	r0, #11
 8014d82:	bd70      	pop	{r4, r5, r6, pc}
 8014d84:	200b      	movs	r0, #11
 8014d86:	4770      	bx	lr

08014d88 <rcl_node_resolve_name>:
 8014d88:	b082      	sub	sp, #8
 8014d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d8e:	b091      	sub	sp, #68	@ 0x44
 8014d90:	ac1a      	add	r4, sp, #104	@ 0x68
 8014d92:	e884 000c 	stmia.w	r4, {r2, r3}
 8014d96:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	d03b      	beq.n	8014e16 <rcl_node_resolve_name+0x8e>
 8014d9e:	460c      	mov	r4, r1
 8014da0:	4605      	mov	r5, r0
 8014da2:	f7ff ffb7 	bl	8014d14 <rcl_node_get_options>
 8014da6:	2800      	cmp	r0, #0
 8014da8:	d037      	beq.n	8014e1a <rcl_node_resolve_name+0x92>
 8014daa:	4628      	mov	r0, r5
 8014dac:	f7ff ffa2 	bl	8014cf4 <rcl_node_get_name>
 8014db0:	4606      	mov	r6, r0
 8014db2:	4628      	mov	r0, r5
 8014db4:	f7ff ffa6 	bl	8014d04 <rcl_node_get_namespace>
 8014db8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014dbc:	4681      	mov	r9, r0
 8014dbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014dc2:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014dc4:	46ac      	mov	ip, r5
 8014dc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dca:	f8de 3000 	ldr.w	r3, [lr]
 8014dce:	f8cc 3000 	str.w	r3, [ip]
 8014dd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014dd4:	b1fb      	cbz	r3, 8014e16 <rcl_node_resolve_name+0x8e>
 8014dd6:	468a      	mov	sl, r1
 8014dd8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014ddc:	f002 fc8c 	bl	80176f8 <rcutils_get_zero_initialized_string_map>
 8014de0:	ab10      	add	r3, sp, #64	@ 0x40
 8014de2:	9008      	str	r0, [sp, #32]
 8014de4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014de8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014dec:	2100      	movs	r1, #0
 8014dee:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014df2:	a808      	add	r0, sp, #32
 8014df4:	f002 fcf8 	bl	80177e8 <rcutils_string_map_init>
 8014df8:	4607      	mov	r7, r0
 8014dfa:	b180      	cbz	r0, 8014e1e <rcl_node_resolve_name+0x96>
 8014dfc:	f7f9 fc64 	bl	800e6c8 <rcutils_get_error_string>
 8014e00:	f7f9 fc7a 	bl	800e6f8 <rcutils_reset_error>
 8014e04:	2f0a      	cmp	r7, #10
 8014e06:	bf18      	it	ne
 8014e08:	2701      	movne	r7, #1
 8014e0a:	4638      	mov	r0, r7
 8014e0c:	b011      	add	sp, #68	@ 0x44
 8014e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e12:	b002      	add	sp, #8
 8014e14:	4770      	bx	lr
 8014e16:	270b      	movs	r7, #11
 8014e18:	e7f7      	b.n	8014e0a <rcl_node_resolve_name+0x82>
 8014e1a:	2701      	movs	r7, #1
 8014e1c:	e7f5      	b.n	8014e0a <rcl_node_resolve_name+0x82>
 8014e1e:	9009      	str	r0, [sp, #36]	@ 0x24
 8014e20:	9007      	str	r0, [sp, #28]
 8014e22:	a808      	add	r0, sp, #32
 8014e24:	f004 fc5c 	bl	80196e0 <rcl_get_default_topic_name_substitutions>
 8014e28:	4607      	mov	r7, r0
 8014e2a:	b1a8      	cbz	r0, 8014e58 <rcl_node_resolve_name+0xd0>
 8014e2c:	280a      	cmp	r0, #10
 8014e2e:	9c07      	ldr	r4, [sp, #28]
 8014e30:	d000      	beq.n	8014e34 <rcl_node_resolve_name+0xac>
 8014e32:	2701      	movs	r7, #1
 8014e34:	a808      	add	r0, sp, #32
 8014e36:	f002 fd17 	bl	8017868 <rcutils_string_map_fini>
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	d13d      	bne.n	8014eba <rcl_node_resolve_name+0x132>
 8014e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e40:	4659      	mov	r1, fp
 8014e42:	47d0      	blx	sl
 8014e44:	4659      	mov	r1, fp
 8014e46:	4620      	mov	r0, r4
 8014e48:	47d0      	blx	sl
 8014e4a:	f1b8 0f00 	cmp.w	r8, #0
 8014e4e:	d0dc      	beq.n	8014e0a <rcl_node_resolve_name+0x82>
 8014e50:	2f67      	cmp	r7, #103	@ 0x67
 8014e52:	bf08      	it	eq
 8014e54:	2768      	moveq	r7, #104	@ 0x68
 8014e56:	e7d8      	b.n	8014e0a <rcl_node_resolve_name+0x82>
 8014e58:	ab09      	add	r3, sp, #36	@ 0x24
 8014e5a:	9305      	str	r3, [sp, #20]
 8014e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e5e:	46ec      	mov	ip, sp
 8014e60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e64:	682b      	ldr	r3, [r5, #0]
 8014e66:	f8cc 3000 	str.w	r3, [ip]
 8014e6a:	464a      	mov	r2, r9
 8014e6c:	4631      	mov	r1, r6
 8014e6e:	4620      	mov	r0, r4
 8014e70:	ab08      	add	r3, sp, #32
 8014e72:	f004 fad7 	bl	8019424 <rcl_expand_topic_name>
 8014e76:	4607      	mov	r7, r0
 8014e78:	b9b8      	cbnz	r0, 8014eaa <rcl_node_resolve_name+0x122>
 8014e7a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014e7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8014e7e:	4602      	mov	r2, r0
 8014e80:	a90a      	add	r1, sp, #40	@ 0x28
 8014e82:	4620      	mov	r0, r4
 8014e84:	f002 fe00 	bl	8017a88 <rmw_validate_full_topic_name>
 8014e88:	b988      	cbnz	r0, 8014eae <rcl_node_resolve_name+0x126>
 8014e8a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014e8c:	b9d5      	cbnz	r5, 8014ec4 <rcl_node_resolve_name+0x13c>
 8014e8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e90:	a808      	add	r0, sp, #32
 8014e92:	601c      	str	r4, [r3, #0]
 8014e94:	f002 fce8 	bl	8017868 <rcutils_string_map_fini>
 8014e98:	4607      	mov	r7, r0
 8014e9a:	b1a8      	cbz	r0, 8014ec8 <rcl_node_resolve_name+0x140>
 8014e9c:	f7f9 fc14 	bl	800e6c8 <rcutils_get_error_string>
 8014ea0:	462c      	mov	r4, r5
 8014ea2:	f7f9 fc29 	bl	800e6f8 <rcutils_reset_error>
 8014ea6:	2701      	movs	r7, #1
 8014ea8:	e7c9      	b.n	8014e3e <rcl_node_resolve_name+0xb6>
 8014eaa:	9c07      	ldr	r4, [sp, #28]
 8014eac:	e7c2      	b.n	8014e34 <rcl_node_resolve_name+0xac>
 8014eae:	f7f9 fc0b 	bl	800e6c8 <rcutils_get_error_string>
 8014eb2:	2701      	movs	r7, #1
 8014eb4:	f7f9 fc20 	bl	800e6f8 <rcutils_reset_error>
 8014eb8:	e7bc      	b.n	8014e34 <rcl_node_resolve_name+0xac>
 8014eba:	f7f9 fc05 	bl	800e6c8 <rcutils_get_error_string>
 8014ebe:	f7f9 fc1b 	bl	800e6f8 <rcutils_reset_error>
 8014ec2:	e7bc      	b.n	8014e3e <rcl_node_resolve_name+0xb6>
 8014ec4:	2767      	movs	r7, #103	@ 0x67
 8014ec6:	e7b5      	b.n	8014e34 <rcl_node_resolve_name+0xac>
 8014ec8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014eca:	4659      	mov	r1, fp
 8014ecc:	47d0      	blx	sl
 8014ece:	4659      	mov	r1, fp
 8014ed0:	4638      	mov	r0, r7
 8014ed2:	47d0      	blx	sl
 8014ed4:	e799      	b.n	8014e0a <rcl_node_resolve_name+0x82>
 8014ed6:	bf00      	nop

08014ed8 <exact_match_lookup>:
 8014ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eda:	f102 0708 	add.w	r7, r2, #8
 8014ede:	460b      	mov	r3, r1
 8014ee0:	4614      	mov	r4, r2
 8014ee2:	4606      	mov	r6, r0
 8014ee4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014ee8:	b085      	sub	sp, #20
 8014eea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	4919      	ldr	r1, [pc, #100]	@ (8014f58 <exact_match_lookup+0x80>)
 8014ef2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014ef6:	f002 fa99 	bl	801742c <rcutils_join_path>
 8014efa:	7833      	ldrb	r3, [r6, #0]
 8014efc:	2b2f      	cmp	r3, #47	@ 0x2f
 8014efe:	4605      	mov	r5, r0
 8014f00:	d023      	beq.n	8014f4a <exact_match_lookup+0x72>
 8014f02:	f104 030c 	add.w	r3, r4, #12
 8014f06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014f0a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014f0e:	1c70      	adds	r0, r6, #1
 8014f10:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014f14:	f002 fa90 	bl	8017438 <rcutils_to_native_path>
 8014f18:	4606      	mov	r6, r0
 8014f1a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014f1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014f22:	4631      	mov	r1, r6
 8014f24:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014f28:	4628      	mov	r0, r5
 8014f2a:	f002 fa7f 	bl	801742c <rcutils_join_path>
 8014f2e:	6862      	ldr	r2, [r4, #4]
 8014f30:	6921      	ldr	r1, [r4, #16]
 8014f32:	4603      	mov	r3, r0
 8014f34:	4630      	mov	r0, r6
 8014f36:	461e      	mov	r6, r3
 8014f38:	4790      	blx	r2
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	6863      	ldr	r3, [r4, #4]
 8014f3e:	6921      	ldr	r1, [r4, #16]
 8014f40:	4798      	blx	r3
 8014f42:	4635      	mov	r5, r6
 8014f44:	4628      	mov	r0, r5
 8014f46:	b005      	add	sp, #20
 8014f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f4a:	7873      	ldrb	r3, [r6, #1]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d1d8      	bne.n	8014f02 <exact_match_lookup+0x2a>
 8014f50:	4628      	mov	r0, r5
 8014f52:	b005      	add	sp, #20
 8014f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f56:	bf00      	nop
 8014f58:	0801d934 	.word	0x0801d934

08014f5c <rcl_get_secure_root>:
 8014f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f60:	b085      	sub	sp, #20
 8014f62:	b168      	cbz	r0, 8014f80 <rcl_get_secure_root+0x24>
 8014f64:	4607      	mov	r7, r0
 8014f66:	4608      	mov	r0, r1
 8014f68:	460c      	mov	r4, r1
 8014f6a:	f7f9 fb9f 	bl	800e6ac <rcutils_allocator_is_valid>
 8014f6e:	b138      	cbz	r0, 8014f80 <rcl_get_secure_root+0x24>
 8014f70:	2300      	movs	r3, #0
 8014f72:	482d      	ldr	r0, [pc, #180]	@ (8015028 <rcl_get_secure_root+0xcc>)
 8014f74:	9303      	str	r3, [sp, #12]
 8014f76:	a903      	add	r1, sp, #12
 8014f78:	f002 fa3e 	bl	80173f8 <rcutils_get_env>
 8014f7c:	4605      	mov	r5, r0
 8014f7e:	b120      	cbz	r0, 8014f8a <rcl_get_secure_root+0x2e>
 8014f80:	2500      	movs	r5, #0
 8014f82:	4628      	mov	r0, r5
 8014f84:	b005      	add	sp, #20
 8014f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f8a:	9b03      	ldr	r3, [sp, #12]
 8014f8c:	781a      	ldrb	r2, [r3, #0]
 8014f8e:	2a00      	cmp	r2, #0
 8014f90:	d0f6      	beq.n	8014f80 <rcl_get_secure_root+0x24>
 8014f92:	f104 090c 	add.w	r9, r4, #12
 8014f96:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014f9a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014fa4:	f002 fb6a 	bl	801767c <rcutils_strdup>
 8014fa8:	4680      	mov	r8, r0
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d0e8      	beq.n	8014f80 <rcl_get_secure_root+0x24>
 8014fae:	481f      	ldr	r0, [pc, #124]	@ (801502c <rcl_get_secure_root+0xd0>)
 8014fb0:	9503      	str	r5, [sp, #12]
 8014fb2:	a903      	add	r1, sp, #12
 8014fb4:	f002 fa20 	bl	80173f8 <rcutils_get_env>
 8014fb8:	b160      	cbz	r0, 8014fd4 <rcl_get_secure_root+0x78>
 8014fba:	2600      	movs	r6, #0
 8014fbc:	6863      	ldr	r3, [r4, #4]
 8014fbe:	6921      	ldr	r1, [r4, #16]
 8014fc0:	4630      	mov	r0, r6
 8014fc2:	4798      	blx	r3
 8014fc4:	4640      	mov	r0, r8
 8014fc6:	6863      	ldr	r3, [r4, #4]
 8014fc8:	6921      	ldr	r1, [r4, #16]
 8014fca:	4798      	blx	r3
 8014fcc:	4628      	mov	r0, r5
 8014fce:	b005      	add	sp, #20
 8014fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fd4:	9b03      	ldr	r3, [sp, #12]
 8014fd6:	781e      	ldrb	r6, [r3, #0]
 8014fd8:	b1f6      	cbz	r6, 8015018 <rcl_get_secure_root+0xbc>
 8014fda:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014fde:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014fe8:	f002 fb48 	bl	801767c <rcutils_strdup>
 8014fec:	4606      	mov	r6, r0
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	d0e3      	beq.n	8014fba <rcl_get_secure_root+0x5e>
 8014ff2:	4622      	mov	r2, r4
 8014ff4:	4641      	mov	r1, r8
 8014ff6:	f7ff ff6f 	bl	8014ed8 <exact_match_lookup>
 8014ffa:	4605      	mov	r5, r0
 8014ffc:	2d00      	cmp	r5, #0
 8014ffe:	d0dd      	beq.n	8014fbc <rcl_get_secure_root+0x60>
 8015000:	4628      	mov	r0, r5
 8015002:	f002 fa11 	bl	8017428 <rcutils_is_directory>
 8015006:	4603      	mov	r3, r0
 8015008:	2800      	cmp	r0, #0
 801500a:	d1d7      	bne.n	8014fbc <rcl_get_secure_root+0x60>
 801500c:	4628      	mov	r0, r5
 801500e:	6921      	ldr	r1, [r4, #16]
 8015010:	461d      	mov	r5, r3
 8015012:	6863      	ldr	r3, [r4, #4]
 8015014:	4798      	blx	r3
 8015016:	e7d1      	b.n	8014fbc <rcl_get_secure_root+0x60>
 8015018:	4622      	mov	r2, r4
 801501a:	4638      	mov	r0, r7
 801501c:	4641      	mov	r1, r8
 801501e:	f7ff ff5b 	bl	8014ed8 <exact_match_lookup>
 8015022:	4605      	mov	r5, r0
 8015024:	e7ea      	b.n	8014ffc <rcl_get_secure_root+0xa0>
 8015026:	bf00      	nop
 8015028:	0801d940 	.word	0x0801d940
 801502c:	0801d958 	.word	0x0801d958

08015030 <rcl_get_security_options_from_environment>:
 8015030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015034:	b082      	sub	sp, #8
 8015036:	2300      	movs	r3, #0
 8015038:	4606      	mov	r6, r0
 801503a:	460f      	mov	r7, r1
 801503c:	4820      	ldr	r0, [pc, #128]	@ (80150c0 <rcl_get_security_options_from_environment+0x90>)
 801503e:	9301      	str	r3, [sp, #4]
 8015040:	a901      	add	r1, sp, #4
 8015042:	4690      	mov	r8, r2
 8015044:	f002 f9d8 	bl	80173f8 <rcutils_get_env>
 8015048:	b120      	cbz	r0, 8015054 <rcl_get_security_options_from_environment+0x24>
 801504a:	2501      	movs	r5, #1
 801504c:	4628      	mov	r0, r5
 801504e:	b002      	add	sp, #8
 8015050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015054:	491b      	ldr	r1, [pc, #108]	@ (80150c4 <rcl_get_security_options_from_environment+0x94>)
 8015056:	4604      	mov	r4, r0
 8015058:	9801      	ldr	r0, [sp, #4]
 801505a:	f7eb f8e1 	bl	8000220 <strcmp>
 801505e:	4605      	mov	r5, r0
 8015060:	b9e8      	cbnz	r0, 801509e <rcl_get_security_options_from_environment+0x6e>
 8015062:	9001      	str	r0, [sp, #4]
 8015064:	f1b8 0f00 	cmp.w	r8, #0
 8015068:	d020      	beq.n	80150ac <rcl_get_security_options_from_environment+0x7c>
 801506a:	4817      	ldr	r0, [pc, #92]	@ (80150c8 <rcl_get_security_options_from_environment+0x98>)
 801506c:	a901      	add	r1, sp, #4
 801506e:	f002 f9c3 	bl	80173f8 <rcutils_get_env>
 8015072:	2800      	cmp	r0, #0
 8015074:	d1e9      	bne.n	801504a <rcl_get_security_options_from_environment+0x1a>
 8015076:	4915      	ldr	r1, [pc, #84]	@ (80150cc <rcl_get_security_options_from_environment+0x9c>)
 8015078:	9801      	ldr	r0, [sp, #4]
 801507a:	f7eb f8d1 	bl	8000220 <strcmp>
 801507e:	fab0 f080 	clz	r0, r0
 8015082:	0940      	lsrs	r0, r0, #5
 8015084:	f888 0000 	strb.w	r0, [r8]
 8015088:	4639      	mov	r1, r7
 801508a:	4630      	mov	r0, r6
 801508c:	f7ff ff66 	bl	8014f5c <rcl_get_secure_root>
 8015090:	b170      	cbz	r0, 80150b0 <rcl_get_security_options_from_environment+0x80>
 8015092:	f8c8 0004 	str.w	r0, [r8, #4]
 8015096:	4628      	mov	r0, r5
 8015098:	b002      	add	sp, #8
 801509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801509e:	4625      	mov	r5, r4
 80150a0:	4628      	mov	r0, r5
 80150a2:	f888 4000 	strb.w	r4, [r8]
 80150a6:	b002      	add	sp, #8
 80150a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ac:	250b      	movs	r5, #11
 80150ae:	e7cd      	b.n	801504c <rcl_get_security_options_from_environment+0x1c>
 80150b0:	f898 5000 	ldrb.w	r5, [r8]
 80150b4:	f1a5 0501 	sub.w	r5, r5, #1
 80150b8:	fab5 f585 	clz	r5, r5
 80150bc:	096d      	lsrs	r5, r5, #5
 80150be:	e7c5      	b.n	801504c <rcl_get_security_options_from_environment+0x1c>
 80150c0:	0801d8f8 	.word	0x0801d8f8
 80150c4:	0801d90c 	.word	0x0801d90c
 80150c8:	0801d914 	.word	0x0801d914
 80150cc:	0801d92c 	.word	0x0801d92c

080150d0 <rcl_get_zero_initialized_service>:
 80150d0:	4b01      	ldr	r3, [pc, #4]	@ (80150d8 <rcl_get_zero_initialized_service+0x8>)
 80150d2:	6818      	ldr	r0, [r3, #0]
 80150d4:	4770      	bx	lr
 80150d6:	bf00      	nop
 80150d8:	0801d978 	.word	0x0801d978

080150dc <rcl_service_init>:
 80150dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150e0:	b089      	sub	sp, #36	@ 0x24
 80150e2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80150e4:	b1c5      	cbz	r5, 8015118 <rcl_service_init+0x3c>
 80150e6:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80150ea:	4604      	mov	r4, r0
 80150ec:	4648      	mov	r0, r9
 80150ee:	4688      	mov	r8, r1
 80150f0:	4617      	mov	r7, r2
 80150f2:	461e      	mov	r6, r3
 80150f4:	f7f9 fada 	bl	800e6ac <rcutils_allocator_is_valid>
 80150f8:	b170      	cbz	r0, 8015118 <rcl_service_init+0x3c>
 80150fa:	b16c      	cbz	r4, 8015118 <rcl_service_init+0x3c>
 80150fc:	4640      	mov	r0, r8
 80150fe:	f7ff fdef 	bl	8014ce0 <rcl_node_is_valid>
 8015102:	2800      	cmp	r0, #0
 8015104:	d058      	beq.n	80151b8 <rcl_service_init+0xdc>
 8015106:	b13f      	cbz	r7, 8015118 <rcl_service_init+0x3c>
 8015108:	b136      	cbz	r6, 8015118 <rcl_service_init+0x3c>
 801510a:	6823      	ldr	r3, [r4, #0]
 801510c:	b14b      	cbz	r3, 8015122 <rcl_service_init+0x46>
 801510e:	2664      	movs	r6, #100	@ 0x64
 8015110:	4630      	mov	r0, r6
 8015112:	b009      	add	sp, #36	@ 0x24
 8015114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015118:	260b      	movs	r6, #11
 801511a:	4630      	mov	r0, r6
 801511c:	b009      	add	sp, #36	@ 0x24
 801511e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015122:	aa07      	add	r2, sp, #28
 8015124:	9205      	str	r2, [sp, #20]
 8015126:	2201      	movs	r2, #1
 8015128:	9304      	str	r3, [sp, #16]
 801512a:	9203      	str	r2, [sp, #12]
 801512c:	9307      	str	r3, [sp, #28]
 801512e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8015132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015136:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801513a:	4631      	mov	r1, r6
 801513c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015140:	4640      	mov	r0, r8
 8015142:	f7ff fe21 	bl	8014d88 <rcl_node_resolve_name>
 8015146:	2800      	cmp	r0, #0
 8015148:	d145      	bne.n	80151d6 <rcl_service_init+0xfa>
 801514a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801514c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 801514e:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8015152:	4798      	blx	r3
 8015154:	6020      	str	r0, [r4, #0]
 8015156:	2800      	cmp	r0, #0
 8015158:	d043      	beq.n	80151e2 <rcl_service_init+0x106>
 801515a:	4640      	mov	r0, r8
 801515c:	f7ff fde2 	bl	8014d24 <rcl_node_get_rmw_handle>
 8015160:	462b      	mov	r3, r5
 8015162:	9a07      	ldr	r2, [sp, #28]
 8015164:	6826      	ldr	r6, [r4, #0]
 8015166:	4639      	mov	r1, r7
 8015168:	f7fa f878 	bl	800f25c <rmw_create_service>
 801516c:	6823      	ldr	r3, [r4, #0]
 801516e:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8015172:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015176:	b330      	cbz	r0, 80151c6 <rcl_service_init+0xea>
 8015178:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801517c:	f7fa f994 	bl	800f4a8 <rmw_service_request_subscription_get_actual_qos>
 8015180:	b9f8      	cbnz	r0, 80151c2 <rcl_service_init+0xe6>
 8015182:	6821      	ldr	r1, [r4, #0]
 8015184:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8015188:	31b8      	adds	r1, #184	@ 0xb8
 801518a:	f7fa f97d 	bl	800f488 <rmw_service_response_publisher_get_actual_qos>
 801518e:	4606      	mov	r6, r0
 8015190:	b9b8      	cbnz	r0, 80151c2 <rcl_service_init+0xe6>
 8015192:	6820      	ldr	r0, [r4, #0]
 8015194:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8015198:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 801519c:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 80151a0:	2268      	movs	r2, #104	@ 0x68
 80151a2:	4629      	mov	r1, r5
 80151a4:	f005 facb 	bl	801a73e <memcpy>
 80151a8:	9807      	ldr	r0, [sp, #28]
 80151aa:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80151ac:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80151ae:	4798      	blx	r3
 80151b0:	4630      	mov	r0, r6
 80151b2:	b009      	add	sp, #36	@ 0x24
 80151b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151b8:	26c8      	movs	r6, #200	@ 0xc8
 80151ba:	4630      	mov	r0, r6
 80151bc:	b009      	add	sp, #36	@ 0x24
 80151be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151c2:	6823      	ldr	r3, [r4, #0]
 80151c4:	b12b      	cbz	r3, 80151d2 <rcl_service_init+0xf6>
 80151c6:	4618      	mov	r0, r3
 80151c8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80151ca:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80151cc:	4790      	blx	r2
 80151ce:	2300      	movs	r3, #0
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	2601      	movs	r6, #1
 80151d4:	e7e8      	b.n	80151a8 <rcl_service_init+0xcc>
 80151d6:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80151da:	2b01      	cmp	r3, #1
 80151dc:	d903      	bls.n	80151e6 <rcl_service_init+0x10a>
 80151de:	280a      	cmp	r0, #10
 80151e0:	d1f7      	bne.n	80151d2 <rcl_service_init+0xf6>
 80151e2:	260a      	movs	r6, #10
 80151e4:	e7e0      	b.n	80151a8 <rcl_service_init+0xcc>
 80151e6:	2668      	movs	r6, #104	@ 0x68
 80151e8:	e7de      	b.n	80151a8 <rcl_service_init+0xcc>
 80151ea:	bf00      	nop

080151ec <rcl_service_get_default_options>:
 80151ec:	b530      	push	{r4, r5, lr}
 80151ee:	4d0f      	ldr	r5, [pc, #60]	@ (801522c <rcl_service_get_default_options+0x40>)
 80151f0:	490f      	ldr	r1, [pc, #60]	@ (8015230 <rcl_service_get_default_options+0x44>)
 80151f2:	b087      	sub	sp, #28
 80151f4:	4604      	mov	r4, r0
 80151f6:	2250      	movs	r2, #80	@ 0x50
 80151f8:	4628      	mov	r0, r5
 80151fa:	f005 faa0 	bl	801a73e <memcpy>
 80151fe:	4668      	mov	r0, sp
 8015200:	f7f9 fa46 	bl	800e690 <rcutils_get_default_allocator>
 8015204:	46ec      	mov	ip, sp
 8015206:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801520a:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801520e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015212:	2268      	movs	r2, #104	@ 0x68
 8015214:	f8dc 3000 	ldr.w	r3, [ip]
 8015218:	f8ce 3000 	str.w	r3, [lr]
 801521c:	4629      	mov	r1, r5
 801521e:	4620      	mov	r0, r4
 8015220:	f005 fa8d 	bl	801a73e <memcpy>
 8015224:	4620      	mov	r0, r4
 8015226:	b007      	add	sp, #28
 8015228:	bd30      	pop	{r4, r5, pc}
 801522a:	bf00      	nop
 801522c:	2000c110 	.word	0x2000c110
 8015230:	0801d980 	.word	0x0801d980

08015234 <rcl_service_get_rmw_handle>:
 8015234:	b118      	cbz	r0, 801523e <rcl_service_get_rmw_handle+0xa>
 8015236:	6800      	ldr	r0, [r0, #0]
 8015238:	b108      	cbz	r0, 801523e <rcl_service_get_rmw_handle+0xa>
 801523a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801523e:	4770      	bx	lr

08015240 <rcl_take_request>:
 8015240:	b570      	push	{r4, r5, r6, lr}
 8015242:	468e      	mov	lr, r1
 8015244:	460c      	mov	r4, r1
 8015246:	4616      	mov	r6, r2
 8015248:	4605      	mov	r5, r0
 801524a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801524e:	b08c      	sub	sp, #48	@ 0x30
 8015250:	f10d 0c18 	add.w	ip, sp, #24
 8015254:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015258:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801525c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015260:	b30d      	cbz	r5, 80152a6 <rcl_take_request+0x66>
 8015262:	682b      	ldr	r3, [r5, #0]
 8015264:	b1fb      	cbz	r3, 80152a6 <rcl_take_request+0x66>
 8015266:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801526a:	b1e0      	cbz	r0, 80152a6 <rcl_take_request+0x66>
 801526c:	b336      	cbz	r6, 80152bc <rcl_take_request+0x7c>
 801526e:	2300      	movs	r3, #0
 8015270:	f88d 3007 	strb.w	r3, [sp, #7]
 8015274:	4632      	mov	r2, r6
 8015276:	f10d 0307 	add.w	r3, sp, #7
 801527a:	a902      	add	r1, sp, #8
 801527c:	f002 ff5a 	bl	8018134 <rmw_take_request>
 8015280:	4605      	mov	r5, r0
 8015282:	b198      	cbz	r0, 80152ac <rcl_take_request+0x6c>
 8015284:	280a      	cmp	r0, #10
 8015286:	bf18      	it	ne
 8015288:	2501      	movne	r5, #1
 801528a:	f10d 0e18 	add.w	lr, sp, #24
 801528e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015292:	46a4      	mov	ip, r4
 8015294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015298:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801529c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80152a0:	4628      	mov	r0, r5
 80152a2:	b00c      	add	sp, #48	@ 0x30
 80152a4:	bd70      	pop	{r4, r5, r6, pc}
 80152a6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80152aa:	e7ee      	b.n	801528a <rcl_take_request+0x4a>
 80152ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80152b0:	f240 2359 	movw	r3, #601	@ 0x259
 80152b4:	2a00      	cmp	r2, #0
 80152b6:	bf08      	it	eq
 80152b8:	461d      	moveq	r5, r3
 80152ba:	e7e6      	b.n	801528a <rcl_take_request+0x4a>
 80152bc:	250b      	movs	r5, #11
 80152be:	e7e4      	b.n	801528a <rcl_take_request+0x4a>

080152c0 <rcl_send_response>:
 80152c0:	b170      	cbz	r0, 80152e0 <rcl_send_response+0x20>
 80152c2:	6800      	ldr	r0, [r0, #0]
 80152c4:	b160      	cbz	r0, 80152e0 <rcl_send_response+0x20>
 80152c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80152ca:	b148      	cbz	r0, 80152e0 <rcl_send_response+0x20>
 80152cc:	b159      	cbz	r1, 80152e6 <rcl_send_response+0x26>
 80152ce:	b510      	push	{r4, lr}
 80152d0:	b15a      	cbz	r2, 80152ea <rcl_send_response+0x2a>
 80152d2:	f002 ff8d 	bl	80181f0 <rmw_send_response>
 80152d6:	b110      	cbz	r0, 80152de <rcl_send_response+0x1e>
 80152d8:	2802      	cmp	r0, #2
 80152da:	bf18      	it	ne
 80152dc:	2001      	movne	r0, #1
 80152de:	bd10      	pop	{r4, pc}
 80152e0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80152e4:	4770      	bx	lr
 80152e6:	200b      	movs	r0, #11
 80152e8:	4770      	bx	lr
 80152ea:	200b      	movs	r0, #11
 80152ec:	bd10      	pop	{r4, pc}
 80152ee:	bf00      	nop

080152f0 <rcl_service_is_valid>:
 80152f0:	b130      	cbz	r0, 8015300 <rcl_service_is_valid+0x10>
 80152f2:	6800      	ldr	r0, [r0, #0]
 80152f4:	b120      	cbz	r0, 8015300 <rcl_service_is_valid+0x10>
 80152f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80152fa:	3800      	subs	r0, #0
 80152fc:	bf18      	it	ne
 80152fe:	2001      	movne	r0, #1
 8015300:	4770      	bx	lr
 8015302:	bf00      	nop

08015304 <rcl_take>:
 8015304:	2800      	cmp	r0, #0
 8015306:	d04a      	beq.n	801539e <rcl_take+0x9a>
 8015308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801530c:	4604      	mov	r4, r0
 801530e:	6800      	ldr	r0, [r0, #0]
 8015310:	b0a4      	sub	sp, #144	@ 0x90
 8015312:	2800      	cmp	r0, #0
 8015314:	d03b      	beq.n	801538e <rcl_take+0x8a>
 8015316:	461f      	mov	r7, r3
 8015318:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 801531c:	2b00      	cmp	r3, #0
 801531e:	d036      	beq.n	801538e <rcl_take+0x8a>
 8015320:	460e      	mov	r6, r1
 8015322:	2900      	cmp	r1, #0
 8015324:	d039      	beq.n	801539a <rcl_take+0x96>
 8015326:	4615      	mov	r5, r2
 8015328:	2a00      	cmp	r2, #0
 801532a:	d03c      	beq.n	80153a6 <rcl_take+0xa2>
 801532c:	a802      	add	r0, sp, #8
 801532e:	f002 fba3 	bl	8017a78 <rmw_get_zero_initialized_message_info>
 8015332:	f10d 0c08 	add.w	ip, sp, #8
 8015336:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801533a:	46ae      	mov	lr, r5
 801533c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015344:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015348:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801534c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015350:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8015354:	f04f 0800 	mov.w	r8, #0
 8015358:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801535c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8015360:	6822      	ldr	r2, [r4, #0]
 8015362:	462b      	mov	r3, r5
 8015364:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8015368:	9700      	str	r7, [sp, #0]
 801536a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801536e:	4631      	mov	r1, r6
 8015370:	f002 ffe4 	bl	801833c <rmw_take_with_info>
 8015374:	4603      	mov	r3, r0
 8015376:	b9c0      	cbnz	r0, 80153aa <rcl_take+0xa6>
 8015378:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801537c:	f240 1291 	movw	r2, #401	@ 0x191
 8015380:	2900      	cmp	r1, #0
 8015382:	bf08      	it	eq
 8015384:	4613      	moveq	r3, r2
 8015386:	4618      	mov	r0, r3
 8015388:	b024      	add	sp, #144	@ 0x90
 801538a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801538e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015392:	4618      	mov	r0, r3
 8015394:	b024      	add	sp, #144	@ 0x90
 8015396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801539a:	230b      	movs	r3, #11
 801539c:	e7f3      	b.n	8015386 <rcl_take+0x82>
 801539e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80153a2:	4618      	mov	r0, r3
 80153a4:	4770      	bx	lr
 80153a6:	ad14      	add	r5, sp, #80	@ 0x50
 80153a8:	e7c0      	b.n	801532c <rcl_take+0x28>
 80153aa:	f7ff f99f 	bl	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 80153ae:	4603      	mov	r3, r0
 80153b0:	e7e9      	b.n	8015386 <rcl_take+0x82>
 80153b2:	bf00      	nop

080153b4 <rcl_subscription_get_rmw_handle>:
 80153b4:	b118      	cbz	r0, 80153be <rcl_subscription_get_rmw_handle+0xa>
 80153b6:	6800      	ldr	r0, [r0, #0]
 80153b8:	b108      	cbz	r0, 80153be <rcl_subscription_get_rmw_handle+0xa>
 80153ba:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80153be:	4770      	bx	lr

080153c0 <rcl_subscription_is_valid>:
 80153c0:	b130      	cbz	r0, 80153d0 <rcl_subscription_is_valid+0x10>
 80153c2:	6800      	ldr	r0, [r0, #0]
 80153c4:	b120      	cbz	r0, 80153d0 <rcl_subscription_is_valid+0x10>
 80153c6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80153ca:	3800      	subs	r0, #0
 80153cc:	bf18      	it	ne
 80153ce:	2001      	movne	r0, #1
 80153d0:	4770      	bx	lr
 80153d2:	bf00      	nop

080153d4 <rcl_get_system_time>:
 80153d4:	4608      	mov	r0, r1
 80153d6:	f7f9 b9ab 	b.w	800e730 <rcutils_system_time_now>
 80153da:	bf00      	nop

080153dc <rcl_get_steady_time>:
 80153dc:	4608      	mov	r0, r1
 80153de:	f7f9 b9cf 	b.w	800e780 <rcutils_steady_time_now>
 80153e2:	bf00      	nop

080153e4 <rcl_get_ros_time>:
 80153e4:	7a03      	ldrb	r3, [r0, #8]
 80153e6:	b510      	push	{r4, lr}
 80153e8:	460c      	mov	r4, r1
 80153ea:	b133      	cbz	r3, 80153fa <rcl_get_ros_time+0x16>
 80153ec:	2105      	movs	r1, #5
 80153ee:	f001 ff5f 	bl	80172b0 <__atomic_load_8>
 80153f2:	e9c4 0100 	strd	r0, r1, [r4]
 80153f6:	2000      	movs	r0, #0
 80153f8:	bd10      	pop	{r4, pc}
 80153fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153fe:	4608      	mov	r0, r1
 8015400:	f7f9 b996 	b.w	800e730 <rcutils_system_time_now>

08015404 <rcl_clock_init>:
 8015404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015406:	4605      	mov	r5, r0
 8015408:	4610      	mov	r0, r2
 801540a:	4614      	mov	r4, r2
 801540c:	460e      	mov	r6, r1
 801540e:	f7f9 f94d 	bl	800e6ac <rcutils_allocator_is_valid>
 8015412:	b128      	cbz	r0, 8015420 <rcl_clock_init+0x1c>
 8015414:	2d03      	cmp	r5, #3
 8015416:	d803      	bhi.n	8015420 <rcl_clock_init+0x1c>
 8015418:	e8df f005 	tbb	[pc, r5]
 801541c:	06532e1d 	.word	0x06532e1d
 8015420:	f04f 0c0b 	mov.w	ip, #11
 8015424:	4660      	mov	r0, ip
 8015426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015428:	2e00      	cmp	r6, #0
 801542a:	d0f9      	beq.n	8015420 <rcl_clock_init+0x1c>
 801542c:	2c00      	cmp	r4, #0
 801542e:	d0f7      	beq.n	8015420 <rcl_clock_init+0x1c>
 8015430:	2300      	movs	r3, #0
 8015432:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015436:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80154ec <rcl_clock_init+0xe8>
 801543a:	6133      	str	r3, [r6, #16]
 801543c:	f106 0514 	add.w	r5, r6, #20
 8015440:	469c      	mov	ip, r3
 8015442:	2703      	movs	r7, #3
 8015444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015448:	6823      	ldr	r3, [r4, #0]
 801544a:	602b      	str	r3, [r5, #0]
 801544c:	7037      	strb	r7, [r6, #0]
 801544e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015452:	4660      	mov	r0, ip
 8015454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015456:	2e00      	cmp	r6, #0
 8015458:	d0e2      	beq.n	8015420 <rcl_clock_init+0x1c>
 801545a:	2300      	movs	r3, #0
 801545c:	7033      	strb	r3, [r6, #0]
 801545e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015462:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015466:	469c      	mov	ip, r3
 8015468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801546a:	f106 0514 	add.w	r5, r6, #20
 801546e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015470:	6823      	ldr	r3, [r4, #0]
 8015472:	602b      	str	r3, [r5, #0]
 8015474:	4660      	mov	r0, ip
 8015476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015478:	2e00      	cmp	r6, #0
 801547a:	d0d1      	beq.n	8015420 <rcl_clock_init+0x1c>
 801547c:	2c00      	cmp	r4, #0
 801547e:	d0cf      	beq.n	8015420 <rcl_clock_init+0x1c>
 8015480:	2700      	movs	r7, #0
 8015482:	7037      	strb	r7, [r6, #0]
 8015484:	46a4      	mov	ip, r4
 8015486:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801548a:	f106 0514 	add.w	r5, r6, #20
 801548e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015492:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015498:	f8dc 3000 	ldr.w	r3, [ip]
 801549c:	602b      	str	r3, [r5, #0]
 801549e:	6921      	ldr	r1, [r4, #16]
 80154a0:	6823      	ldr	r3, [r4, #0]
 80154a2:	2010      	movs	r0, #16
 80154a4:	4798      	blx	r3
 80154a6:	6130      	str	r0, [r6, #16]
 80154a8:	b1d0      	cbz	r0, 80154e0 <rcl_clock_init+0xdc>
 80154aa:	2200      	movs	r2, #0
 80154ac:	2300      	movs	r3, #0
 80154ae:	e9c0 2300 	strd	r2, r3, [r0]
 80154b2:	2301      	movs	r3, #1
 80154b4:	7207      	strb	r7, [r0, #8]
 80154b6:	4a0c      	ldr	r2, [pc, #48]	@ (80154e8 <rcl_clock_init+0xe4>)
 80154b8:	7033      	strb	r3, [r6, #0]
 80154ba:	46bc      	mov	ip, r7
 80154bc:	60f2      	str	r2, [r6, #12]
 80154be:	4660      	mov	r0, ip
 80154c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154c2:	2e00      	cmp	r6, #0
 80154c4:	d0ac      	beq.n	8015420 <rcl_clock_init+0x1c>
 80154c6:	2c00      	cmp	r4, #0
 80154c8:	d0aa      	beq.n	8015420 <rcl_clock_init+0x1c>
 80154ca:	2300      	movs	r3, #0
 80154cc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80154d0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80154f0 <rcl_clock_init+0xec>
 80154d4:	6133      	str	r3, [r6, #16]
 80154d6:	f106 0514 	add.w	r5, r6, #20
 80154da:	469c      	mov	ip, r3
 80154dc:	2702      	movs	r7, #2
 80154de:	e7b1      	b.n	8015444 <rcl_clock_init+0x40>
 80154e0:	f04f 0c0a 	mov.w	ip, #10
 80154e4:	e79e      	b.n	8015424 <rcl_clock_init+0x20>
 80154e6:	bf00      	nop
 80154e8:	080153e5 	.word	0x080153e5
 80154ec:	080153dd 	.word	0x080153dd
 80154f0:	080153d5 	.word	0x080153d5

080154f4 <rcl_clock_get_now>:
 80154f4:	b140      	cbz	r0, 8015508 <rcl_clock_get_now+0x14>
 80154f6:	b139      	cbz	r1, 8015508 <rcl_clock_get_now+0x14>
 80154f8:	7803      	ldrb	r3, [r0, #0]
 80154fa:	b11b      	cbz	r3, 8015504 <rcl_clock_get_now+0x10>
 80154fc:	68c3      	ldr	r3, [r0, #12]
 80154fe:	b10b      	cbz	r3, 8015504 <rcl_clock_get_now+0x10>
 8015500:	6900      	ldr	r0, [r0, #16]
 8015502:	4718      	bx	r3
 8015504:	2001      	movs	r0, #1
 8015506:	4770      	bx	lr
 8015508:	200b      	movs	r0, #11
 801550a:	4770      	bx	lr

0801550c <rcl_clock_add_jump_callback>:
 801550c:	b082      	sub	sp, #8
 801550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015512:	a906      	add	r1, sp, #24
 8015514:	e881 000c 	stmia.w	r1, {r2, r3}
 8015518:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 801551c:	b320      	cbz	r0, 8015568 <rcl_clock_add_jump_callback+0x5c>
 801551e:	4604      	mov	r4, r0
 8015520:	3014      	adds	r0, #20
 8015522:	f7f9 f8c3 	bl	800e6ac <rcutils_allocator_is_valid>
 8015526:	b1f8      	cbz	r0, 8015568 <rcl_clock_add_jump_callback+0x5c>
 8015528:	b1f6      	cbz	r6, 8015568 <rcl_clock_add_jump_callback+0x5c>
 801552a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801552c:	2b00      	cmp	r3, #0
 801552e:	db1b      	blt.n	8015568 <rcl_clock_add_jump_callback+0x5c>
 8015530:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015534:	2a01      	cmp	r2, #1
 8015536:	f173 0300 	sbcs.w	r3, r3, #0
 801553a:	da15      	bge.n	8015568 <rcl_clock_add_jump_callback+0x5c>
 801553c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015540:	2f00      	cmp	r7, #0
 8015542:	d042      	beq.n	80155ca <rcl_clock_add_jump_callback+0xbe>
 8015544:	2300      	movs	r3, #0
 8015546:	4602      	mov	r2, r0
 8015548:	e003      	b.n	8015552 <rcl_clock_add_jump_callback+0x46>
 801554a:	42bb      	cmp	r3, r7
 801554c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015550:	d011      	beq.n	8015576 <rcl_clock_add_jump_callback+0x6a>
 8015552:	6811      	ldr	r1, [r2, #0]
 8015554:	42b1      	cmp	r1, r6
 8015556:	f103 0301 	add.w	r3, r3, #1
 801555a:	d1f6      	bne.n	801554a <rcl_clock_add_jump_callback+0x3e>
 801555c:	6a11      	ldr	r1, [r2, #32]
 801555e:	42a9      	cmp	r1, r5
 8015560:	d1f3      	bne.n	801554a <rcl_clock_add_jump_callback+0x3e>
 8015562:	f04f 0e01 	mov.w	lr, #1
 8015566:	e001      	b.n	801556c <rcl_clock_add_jump_callback+0x60>
 8015568:	f04f 0e0b 	mov.w	lr, #11
 801556c:	4670      	mov	r0, lr
 801556e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015572:	b002      	add	sp, #8
 8015574:	4770      	bx	lr
 8015576:	3301      	adds	r3, #1
 8015578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801557c:	00d9      	lsls	r1, r3, #3
 801557e:	69e3      	ldr	r3, [r4, #28]
 8015580:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015582:	4798      	blx	r3
 8015584:	b1f0      	cbz	r0, 80155c4 <rcl_clock_add_jump_callback+0xb8>
 8015586:	68a3      	ldr	r3, [r4, #8]
 8015588:	6060      	str	r0, [r4, #4]
 801558a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801558e:	f10d 0c18 	add.w	ip, sp, #24
 8015592:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8015596:	f103 0801 	add.w	r8, r3, #1
 801559a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801559e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80155a2:	f106 0708 	add.w	r7, r6, #8
 80155a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80155a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80155ac:	f04f 0e00 	mov.w	lr, #0
 80155b0:	e887 0003 	stmia.w	r7, {r0, r1}
 80155b4:	6235      	str	r5, [r6, #32]
 80155b6:	4670      	mov	r0, lr
 80155b8:	f8c4 8008 	str.w	r8, [r4, #8]
 80155bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155c0:	b002      	add	sp, #8
 80155c2:	4770      	bx	lr
 80155c4:	f04f 0e0a 	mov.w	lr, #10
 80155c8:	e7d0      	b.n	801556c <rcl_clock_add_jump_callback+0x60>
 80155ca:	2128      	movs	r1, #40	@ 0x28
 80155cc:	e7d7      	b.n	801557e <rcl_clock_add_jump_callback+0x72>
 80155ce:	bf00      	nop

080155d0 <rcl_clock_remove_jump_callback>:
 80155d0:	2800      	cmp	r0, #0
 80155d2:	d057      	beq.n	8015684 <rcl_clock_remove_jump_callback+0xb4>
 80155d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d8:	4605      	mov	r5, r0
 80155da:	3014      	adds	r0, #20
 80155dc:	4688      	mov	r8, r1
 80155de:	4692      	mov	sl, r2
 80155e0:	f7f9 f864 	bl	800e6ac <rcutils_allocator_is_valid>
 80155e4:	2800      	cmp	r0, #0
 80155e6:	d03b      	beq.n	8015660 <rcl_clock_remove_jump_callback+0x90>
 80155e8:	f1b8 0f00 	cmp.w	r8, #0
 80155ec:	d038      	beq.n	8015660 <rcl_clock_remove_jump_callback+0x90>
 80155ee:	68ae      	ldr	r6, [r5, #8]
 80155f0:	b166      	cbz	r6, 801560c <rcl_clock_remove_jump_callback+0x3c>
 80155f2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80155f6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80155fa:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80155fe:	464c      	mov	r4, r9
 8015600:	6823      	ldr	r3, [r4, #0]
 8015602:	4543      	cmp	r3, r8
 8015604:	d005      	beq.n	8015612 <rcl_clock_remove_jump_callback+0x42>
 8015606:	3428      	adds	r4, #40	@ 0x28
 8015608:	42a7      	cmp	r7, r4
 801560a:	d1f9      	bne.n	8015600 <rcl_clock_remove_jump_callback+0x30>
 801560c:	2001      	movs	r0, #1
 801560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015612:	6a23      	ldr	r3, [r4, #32]
 8015614:	3428      	adds	r4, #40	@ 0x28
 8015616:	42bc      	cmp	r4, r7
 8015618:	d02d      	beq.n	8015676 <rcl_clock_remove_jump_callback+0xa6>
 801561a:	4553      	cmp	r3, sl
 801561c:	d1f0      	bne.n	8015600 <rcl_clock_remove_jump_callback+0x30>
 801561e:	46a6      	mov	lr, r4
 8015620:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015624:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8015628:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801562c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015630:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015634:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015638:	3428      	adds	r4, #40	@ 0x28
 801563a:	42a7      	cmp	r7, r4
 801563c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015640:	d1ed      	bne.n	801561e <rcl_clock_remove_jump_callback+0x4e>
 8015642:	3e01      	subs	r6, #1
 8015644:	60ae      	str	r6, [r5, #8]
 8015646:	b176      	cbz	r6, 8015666 <rcl_clock_remove_jump_callback+0x96>
 8015648:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801564c:	69eb      	ldr	r3, [r5, #28]
 801564e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015650:	00f1      	lsls	r1, r6, #3
 8015652:	4648      	mov	r0, r9
 8015654:	4798      	blx	r3
 8015656:	b1b8      	cbz	r0, 8015688 <rcl_clock_remove_jump_callback+0xb8>
 8015658:	6068      	str	r0, [r5, #4]
 801565a:	2000      	movs	r0, #0
 801565c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015660:	200b      	movs	r0, #11
 8015662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015666:	4648      	mov	r0, r9
 8015668:	69ab      	ldr	r3, [r5, #24]
 801566a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801566c:	4798      	blx	r3
 801566e:	606e      	str	r6, [r5, #4]
 8015670:	4630      	mov	r0, r6
 8015672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015676:	4553      	cmp	r3, sl
 8015678:	d1c8      	bne.n	801560c <rcl_clock_remove_jump_callback+0x3c>
 801567a:	3e01      	subs	r6, #1
 801567c:	60ae      	str	r6, [r5, #8]
 801567e:	2e00      	cmp	r6, #0
 8015680:	d1e2      	bne.n	8015648 <rcl_clock_remove_jump_callback+0x78>
 8015682:	e7f0      	b.n	8015666 <rcl_clock_remove_jump_callback+0x96>
 8015684:	200b      	movs	r0, #11
 8015686:	4770      	bx	lr
 8015688:	200a      	movs	r0, #10
 801568a:	e7ea      	b.n	8015662 <rcl_clock_remove_jump_callback+0x92>

0801568c <_rcl_timer_time_jump>:
 801568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015690:	4605      	mov	r5, r0
 8015692:	b084      	sub	sp, #16
 8015694:	4614      	mov	r4, r2
 8015696:	b131      	cbz	r1, 80156a6 <_rcl_timer_time_jump+0x1a>
 8015698:	7803      	ldrb	r3, [r0, #0]
 801569a:	3b02      	subs	r3, #2
 801569c:	2b01      	cmp	r3, #1
 801569e:	d93f      	bls.n	8015720 <_rcl_timer_time_jump+0x94>
 80156a0:	b004      	add	sp, #16
 80156a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156a6:	6813      	ldr	r3, [r2, #0]
 80156a8:	a902      	add	r1, sp, #8
 80156aa:	6818      	ldr	r0, [r3, #0]
 80156ac:	f7ff ff22 	bl	80154f4 <rcl_clock_get_now>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d1f5      	bne.n	80156a0 <_rcl_timer_time_jump+0x14>
 80156b4:	6820      	ldr	r0, [r4, #0]
 80156b6:	2105      	movs	r1, #5
 80156b8:	3020      	adds	r0, #32
 80156ba:	f001 fdf9 	bl	80172b0 <__atomic_load_8>
 80156be:	6823      	ldr	r3, [r4, #0]
 80156c0:	4681      	mov	r9, r0
 80156c2:	4688      	mov	r8, r1
 80156c4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80156c8:	2105      	movs	r1, #5
 80156ca:	f001 fdf1 	bl	80172b0 <__atomic_load_8>
 80156ce:	4607      	mov	r7, r0
 80156d0:	6820      	ldr	r0, [r4, #0]
 80156d2:	460e      	mov	r6, r1
 80156d4:	3018      	adds	r0, #24
 80156d6:	2105      	movs	r1, #5
 80156d8:	f001 fdea 	bl	80172b0 <__atomic_load_8>
 80156dc:	782b      	ldrb	r3, [r5, #0]
 80156de:	9a02      	ldr	r2, [sp, #8]
 80156e0:	3b02      	subs	r3, #2
 80156e2:	2b01      	cmp	r3, #1
 80156e4:	460d      	mov	r5, r1
 80156e6:	9b03      	ldr	r3, [sp, #12]
 80156e8:	4682      	mov	sl, r0
 80156ea:	d937      	bls.n	801575c <_rcl_timer_time_jump+0xd0>
 80156ec:	42ba      	cmp	r2, r7
 80156ee:	eb73 0106 	sbcs.w	r1, r3, r6
 80156f2:	da5f      	bge.n	80157b4 <_rcl_timer_time_jump+0x128>
 80156f4:	454a      	cmp	r2, r9
 80156f6:	eb73 0108 	sbcs.w	r1, r3, r8
 80156fa:	dad1      	bge.n	80156a0 <_rcl_timer_time_jump+0x14>
 80156fc:	6820      	ldr	r0, [r4, #0]
 80156fe:	eb1a 0202 	adds.w	r2, sl, r2
 8015702:	eb43 0305 	adc.w	r3, r3, r5
 8015706:	2505      	movs	r5, #5
 8015708:	3028      	adds	r0, #40	@ 0x28
 801570a:	9500      	str	r5, [sp, #0]
 801570c:	f001 fe06 	bl	801731c <__atomic_store_8>
 8015710:	6820      	ldr	r0, [r4, #0]
 8015712:	9500      	str	r5, [sp, #0]
 8015714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015718:	3020      	adds	r0, #32
 801571a:	f001 fdff 	bl	801731c <__atomic_store_8>
 801571e:	e7bf      	b.n	80156a0 <_rcl_timer_time_jump+0x14>
 8015720:	6813      	ldr	r3, [r2, #0]
 8015722:	a902      	add	r1, sp, #8
 8015724:	6818      	ldr	r0, [r3, #0]
 8015726:	f7ff fee5 	bl	80154f4 <rcl_clock_get_now>
 801572a:	2800      	cmp	r0, #0
 801572c:	d1b8      	bne.n	80156a0 <_rcl_timer_time_jump+0x14>
 801572e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015732:	4313      	orrs	r3, r2
 8015734:	d0b4      	beq.n	80156a0 <_rcl_timer_time_jump+0x14>
 8015736:	6820      	ldr	r0, [r4, #0]
 8015738:	2105      	movs	r1, #5
 801573a:	3028      	adds	r0, #40	@ 0x28
 801573c:	f001 fdb8 	bl	80172b0 <__atomic_load_8>
 8015740:	9d02      	ldr	r5, [sp, #8]
 8015742:	9b03      	ldr	r3, [sp, #12]
 8015744:	4602      	mov	r2, r0
 8015746:	6820      	ldr	r0, [r4, #0]
 8015748:	1b52      	subs	r2, r2, r5
 801574a:	f04f 0405 	mov.w	r4, #5
 801574e:	9400      	str	r4, [sp, #0]
 8015750:	eb61 0303 	sbc.w	r3, r1, r3
 8015754:	3030      	adds	r0, #48	@ 0x30
 8015756:	f001 fde1 	bl	801731c <__atomic_store_8>
 801575a:	e7a1      	b.n	80156a0 <_rcl_timer_time_jump+0x14>
 801575c:	4313      	orrs	r3, r2
 801575e:	d09f      	beq.n	80156a0 <_rcl_timer_time_jump+0x14>
 8015760:	6820      	ldr	r0, [r4, #0]
 8015762:	f04f 0805 	mov.w	r8, #5
 8015766:	2300      	movs	r3, #0
 8015768:	f8cd 8000 	str.w	r8, [sp]
 801576c:	3030      	adds	r0, #48	@ 0x30
 801576e:	2200      	movs	r2, #0
 8015770:	f001 fe0a 	bl	8017388 <__atomic_exchange_8>
 8015774:	ea51 0300 	orrs.w	r3, r1, r0
 8015778:	4606      	mov	r6, r0
 801577a:	460f      	mov	r7, r1
 801577c:	d090      	beq.n	80156a0 <_rcl_timer_time_jump+0x14>
 801577e:	9a02      	ldr	r2, [sp, #8]
 8015780:	9b03      	ldr	r3, [sp, #12]
 8015782:	f8cd 8000 	str.w	r8, [sp]
 8015786:	1a12      	subs	r2, r2, r0
 8015788:	6820      	ldr	r0, [r4, #0]
 801578a:	eb63 0301 	sbc.w	r3, r3, r1
 801578e:	eb12 020a 	adds.w	r2, r2, sl
 8015792:	eb43 0305 	adc.w	r3, r3, r5
 8015796:	3028      	adds	r0, #40	@ 0x28
 8015798:	f001 fdc0 	bl	801731c <__atomic_store_8>
 801579c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157a0:	f8cd 8000 	str.w	r8, [sp]
 80157a4:	6820      	ldr	r0, [r4, #0]
 80157a6:	1b92      	subs	r2, r2, r6
 80157a8:	eb63 0307 	sbc.w	r3, r3, r7
 80157ac:	3020      	adds	r0, #32
 80157ae:	f001 fdb5 	bl	801731c <__atomic_store_8>
 80157b2:	e775      	b.n	80156a0 <_rcl_timer_time_jump+0x14>
 80157b4:	6820      	ldr	r0, [r4, #0]
 80157b6:	3008      	adds	r0, #8
 80157b8:	f004 f890 	bl	80198dc <rcl_trigger_guard_condition>
 80157bc:	e770      	b.n	80156a0 <_rcl_timer_time_jump+0x14>
 80157be:	bf00      	nop

080157c0 <rcl_get_zero_initialized_timer>:
 80157c0:	4b01      	ldr	r3, [pc, #4]	@ (80157c8 <rcl_get_zero_initialized_timer+0x8>)
 80157c2:	6818      	ldr	r0, [r3, #0]
 80157c4:	4770      	bx	lr
 80157c6:	bf00      	nop
 80157c8:	0801d9d0 	.word	0x0801d9d0
 80157cc:	00000000 	.word	0x00000000

080157d0 <rcl_timer_init>:
 80157d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157d4:	b0aa      	sub	sp, #168	@ 0xa8
 80157d6:	4604      	mov	r4, r0
 80157d8:	a835      	add	r0, sp, #212	@ 0xd4
 80157da:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80157de:	460d      	mov	r5, r1
 80157e0:	4692      	mov	sl, r2
 80157e2:	f7f8 ff63 	bl	800e6ac <rcutils_allocator_is_valid>
 80157e6:	2800      	cmp	r0, #0
 80157e8:	d064      	beq.n	80158b4 <rcl_timer_init+0xe4>
 80157ea:	2c00      	cmp	r4, #0
 80157ec:	d062      	beq.n	80158b4 <rcl_timer_init+0xe4>
 80157ee:	2d00      	cmp	r5, #0
 80157f0:	d060      	beq.n	80158b4 <rcl_timer_init+0xe4>
 80157f2:	2f00      	cmp	r7, #0
 80157f4:	db5e      	blt.n	80158b4 <rcl_timer_init+0xe4>
 80157f6:	6823      	ldr	r3, [r4, #0]
 80157f8:	b123      	cbz	r3, 8015804 <rcl_timer_init+0x34>
 80157fa:	2664      	movs	r6, #100	@ 0x64
 80157fc:	4630      	mov	r0, r6
 80157fe:	b02a      	add	sp, #168	@ 0xa8
 8015800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015804:	a908      	add	r1, sp, #32
 8015806:	4628      	mov	r0, r5
 8015808:	f7ff fe74 	bl	80154f4 <rcl_clock_get_now>
 801580c:	4606      	mov	r6, r0
 801580e:	2800      	cmp	r0, #0
 8015810:	d1f4      	bne.n	80157fc <rcl_timer_init+0x2c>
 8015812:	ae06      	add	r6, sp, #24
 8015814:	4630      	mov	r0, r6
 8015816:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801581a:	f003 ff67 	bl	80196ec <rcl_get_zero_initialized_guard_condition>
 801581e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015822:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8015826:	ae0b      	add	r6, sp, #44	@ 0x2c
 8015828:	e889 0003 	stmia.w	r9, {r0, r1}
 801582c:	4630      	mov	r0, r6
 801582e:	f004 f839 	bl	80198a4 <rcl_guard_condition_get_default_options>
 8015832:	ab0d      	add	r3, sp, #52	@ 0x34
 8015834:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015838:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801583c:	4651      	mov	r1, sl
 801583e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015842:	4648      	mov	r0, r9
 8015844:	f003 ff5c 	bl	8019700 <rcl_guard_condition_init>
 8015848:	4606      	mov	r6, r0
 801584a:	2800      	cmp	r0, #0
 801584c:	d1d6      	bne.n	80157fc <rcl_timer_init+0x2c>
 801584e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	2b01      	cmp	r3, #1
 8015854:	d033      	beq.n	80158be <rcl_timer_init+0xee>
 8015856:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8015858:	911a      	str	r1, [sp, #104]	@ 0x68
 801585a:	4642      	mov	r2, r8
 801585c:	463b      	mov	r3, r7
 801585e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8015862:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015866:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015918 <rcl_timer_init+0x148>
 801586a:	eb12 0008 	adds.w	r0, r2, r8
 801586e:	eb47 0103 	adc.w	r1, r7, r3
 8015872:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8015876:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801587a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801587e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8015882:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015886:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801588a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801588e:	f8de 3000 	ldr.w	r3, [lr]
 8015892:	f8cc 3000 	str.w	r3, [ip]
 8015896:	f04f 0a00 	mov.w	sl, #0
 801589a:	4619      	mov	r1, r3
 801589c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80158a0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80158a2:	2050      	movs	r0, #80	@ 0x50
 80158a4:	4798      	blx	r3
 80158a6:	6020      	str	r0, [r4, #0]
 80158a8:	b358      	cbz	r0, 8015902 <rcl_timer_init+0x132>
 80158aa:	2250      	movs	r2, #80	@ 0x50
 80158ac:	a916      	add	r1, sp, #88	@ 0x58
 80158ae:	f004 ff46 	bl	801a73e <memcpy>
 80158b2:	e7a3      	b.n	80157fc <rcl_timer_init+0x2c>
 80158b4:	260b      	movs	r6, #11
 80158b6:	4630      	mov	r0, r6
 80158b8:	b02a      	add	sp, #168	@ 0xa8
 80158ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158be:	2001      	movs	r0, #1
 80158c0:	2100      	movs	r1, #0
 80158c2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80158c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80158ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80158ce:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80158d2:	4a13      	ldr	r2, [pc, #76]	@ (8015920 <rcl_timer_init+0x150>)
 80158d4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80158d8:	9405      	str	r4, [sp, #20]
 80158da:	9204      	str	r2, [sp, #16]
 80158dc:	ab12      	add	r3, sp, #72	@ 0x48
 80158de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80158e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80158e4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80158e8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80158ec:	4628      	mov	r0, r5
 80158ee:	f7ff fe0d 	bl	801550c <rcl_clock_add_jump_callback>
 80158f2:	4682      	mov	sl, r0
 80158f4:	2800      	cmp	r0, #0
 80158f6:	d0ae      	beq.n	8015856 <rcl_timer_init+0x86>
 80158f8:	4648      	mov	r0, r9
 80158fa:	f003 ffad 	bl	8019858 <rcl_guard_condition_fini>
 80158fe:	4656      	mov	r6, sl
 8015900:	e77c      	b.n	80157fc <rcl_timer_init+0x2c>
 8015902:	4648      	mov	r0, r9
 8015904:	f003 ffa8 	bl	8019858 <rcl_guard_condition_fini>
 8015908:	4905      	ldr	r1, [pc, #20]	@ (8015920 <rcl_timer_init+0x150>)
 801590a:	4622      	mov	r2, r4
 801590c:	4628      	mov	r0, r5
 801590e:	f7ff fe5f 	bl	80155d0 <rcl_clock_remove_jump_callback>
 8015912:	260a      	movs	r6, #10
 8015914:	e772      	b.n	80157fc <rcl_timer_init+0x2c>
 8015916:	bf00      	nop
	...
 8015920:	0801568d 	.word	0x0801568d

08015924 <rcl_timer_call>:
 8015924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015928:	b087      	sub	sp, #28
 801592a:	2800      	cmp	r0, #0
 801592c:	d06d      	beq.n	8015a0a <rcl_timer_call+0xe6>
 801592e:	6803      	ldr	r3, [r0, #0]
 8015930:	4604      	mov	r4, r0
 8015932:	2b00      	cmp	r3, #0
 8015934:	d063      	beq.n	80159fe <rcl_timer_call+0xda>
 8015936:	f3bf 8f5b 	dmb	ish
 801593a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801593e:	f3bf 8f5b 	dmb	ish
 8015942:	2b00      	cmp	r3, #0
 8015944:	d150      	bne.n	80159e8 <rcl_timer_call+0xc4>
 8015946:	6803      	ldr	r3, [r0, #0]
 8015948:	a904      	add	r1, sp, #16
 801594a:	6818      	ldr	r0, [r3, #0]
 801594c:	f7ff fdd2 	bl	80154f4 <rcl_clock_get_now>
 8015950:	4605      	mov	r5, r0
 8015952:	2800      	cmp	r0, #0
 8015954:	d14a      	bne.n	80159ec <rcl_timer_call+0xc8>
 8015956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801595a:	2b00      	cmp	r3, #0
 801595c:	db4a      	blt.n	80159f4 <rcl_timer_call+0xd0>
 801595e:	6820      	ldr	r0, [r4, #0]
 8015960:	f04f 0a05 	mov.w	sl, #5
 8015964:	f8cd a000 	str.w	sl, [sp]
 8015968:	3020      	adds	r0, #32
 801596a:	f001 fd0d 	bl	8017388 <__atomic_exchange_8>
 801596e:	6823      	ldr	r3, [r4, #0]
 8015970:	f3bf 8f5b 	dmb	ish
 8015974:	4680      	mov	r8, r0
 8015976:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801597a:	f3bf 8f5b 	dmb	ish
 801597e:	6820      	ldr	r0, [r4, #0]
 8015980:	4689      	mov	r9, r1
 8015982:	3028      	adds	r0, #40	@ 0x28
 8015984:	4651      	mov	r1, sl
 8015986:	f001 fc93 	bl	80172b0 <__atomic_load_8>
 801598a:	4606      	mov	r6, r0
 801598c:	6820      	ldr	r0, [r4, #0]
 801598e:	460f      	mov	r7, r1
 8015990:	3018      	adds	r0, #24
 8015992:	4651      	mov	r1, sl
 8015994:	f001 fc8c 	bl	80172b0 <__atomic_load_8>
 8015998:	1836      	adds	r6, r6, r0
 801599a:	4602      	mov	r2, r0
 801599c:	4682      	mov	sl, r0
 801599e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80159a2:	eb47 0701 	adc.w	r7, r7, r1
 80159a6:	4286      	cmp	r6, r0
 80159a8:	460b      	mov	r3, r1
 80159aa:	eb77 010c 	sbcs.w	r1, r7, ip
 80159ae:	da04      	bge.n	80159ba <rcl_timer_call+0x96>
 80159b0:	ea53 0102 	orrs.w	r1, r3, r2
 80159b4:	d12e      	bne.n	8015a14 <rcl_timer_call+0xf0>
 80159b6:	4606      	mov	r6, r0
 80159b8:	4667      	mov	r7, ip
 80159ba:	6820      	ldr	r0, [r4, #0]
 80159bc:	2105      	movs	r1, #5
 80159be:	4632      	mov	r2, r6
 80159c0:	463b      	mov	r3, r7
 80159c2:	3028      	adds	r0, #40	@ 0x28
 80159c4:	9100      	str	r1, [sp, #0]
 80159c6:	f001 fca9 	bl	801731c <__atomic_store_8>
 80159ca:	f1bb 0f00 	cmp.w	fp, #0
 80159ce:	d00d      	beq.n	80159ec <rcl_timer_call+0xc8>
 80159d0:	9a04      	ldr	r2, [sp, #16]
 80159d2:	9b05      	ldr	r3, [sp, #20]
 80159d4:	ebb2 0208 	subs.w	r2, r2, r8
 80159d8:	4620      	mov	r0, r4
 80159da:	eb63 0309 	sbc.w	r3, r3, r9
 80159de:	47d8      	blx	fp
 80159e0:	4628      	mov	r0, r5
 80159e2:	b007      	add	sp, #28
 80159e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159e8:	f240 3521 	movw	r5, #801	@ 0x321
 80159ec:	4628      	mov	r0, r5
 80159ee:	b007      	add	sp, #28
 80159f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159f4:	2501      	movs	r5, #1
 80159f6:	4628      	mov	r0, r5
 80159f8:	b007      	add	sp, #28
 80159fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159fe:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015a02:	4628      	mov	r0, r5
 8015a04:	b007      	add	sp, #28
 8015a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0a:	250b      	movs	r5, #11
 8015a0c:	4628      	mov	r0, r5
 8015a0e:	b007      	add	sp, #28
 8015a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a14:	1b80      	subs	r0, r0, r6
 8015a16:	eb6c 0107 	sbc.w	r1, ip, r7
 8015a1a:	3801      	subs	r0, #1
 8015a1c:	f161 0100 	sbc.w	r1, r1, #0
 8015a20:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015a24:	f7eb f920 	bl	8000c68 <__aeabi_ldivmod>
 8015a28:	9b02      	ldr	r3, [sp, #8]
 8015a2a:	3001      	adds	r0, #1
 8015a2c:	f141 0100 	adc.w	r1, r1, #0
 8015a30:	fb00 f303 	mul.w	r3, r0, r3
 8015a34:	fb01 330a 	mla	r3, r1, sl, r3
 8015a38:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015a3c:	1986      	adds	r6, r0, r6
 8015a3e:	4453      	add	r3, sl
 8015a40:	eb43 0707 	adc.w	r7, r3, r7
 8015a44:	e7b9      	b.n	80159ba <rcl_timer_call+0x96>
 8015a46:	bf00      	nop

08015a48 <rcl_timer_is_ready>:
 8015a48:	b570      	push	{r4, r5, r6, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	b378      	cbz	r0, 8015aae <rcl_timer_is_ready+0x66>
 8015a4e:	6803      	ldr	r3, [r0, #0]
 8015a50:	4604      	mov	r4, r0
 8015a52:	b383      	cbz	r3, 8015ab6 <rcl_timer_is_ready+0x6e>
 8015a54:	460d      	mov	r5, r1
 8015a56:	b351      	cbz	r1, 8015aae <rcl_timer_is_ready+0x66>
 8015a58:	f3bf 8f5b 	dmb	ish
 8015a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015a60:	f3bf 8f5b 	dmb	ish
 8015a64:	b953      	cbnz	r3, 8015a7c <rcl_timer_is_ready+0x34>
 8015a66:	6803      	ldr	r3, [r0, #0]
 8015a68:	4669      	mov	r1, sp
 8015a6a:	6818      	ldr	r0, [r3, #0]
 8015a6c:	f7ff fd42 	bl	80154f4 <rcl_clock_get_now>
 8015a70:	4606      	mov	r6, r0
 8015a72:	b140      	cbz	r0, 8015a86 <rcl_timer_is_ready+0x3e>
 8015a74:	f240 3321 	movw	r3, #801	@ 0x321
 8015a78:	4298      	cmp	r0, r3
 8015a7a:	d101      	bne.n	8015a80 <rcl_timer_is_ready+0x38>
 8015a7c:	2600      	movs	r6, #0
 8015a7e:	702e      	strb	r6, [r5, #0]
 8015a80:	4630      	mov	r0, r6
 8015a82:	b002      	add	sp, #8
 8015a84:	bd70      	pop	{r4, r5, r6, pc}
 8015a86:	6820      	ldr	r0, [r4, #0]
 8015a88:	2105      	movs	r1, #5
 8015a8a:	3028      	adds	r0, #40	@ 0x28
 8015a8c:	f001 fc10 	bl	80172b0 <__atomic_load_8>
 8015a90:	9b00      	ldr	r3, [sp, #0]
 8015a92:	1ac0      	subs	r0, r0, r3
 8015a94:	9b01      	ldr	r3, [sp, #4]
 8015a96:	eb61 0103 	sbc.w	r1, r1, r3
 8015a9a:	2801      	cmp	r0, #1
 8015a9c:	f171 0300 	sbcs.w	r3, r1, #0
 8015aa0:	bfb4      	ite	lt
 8015aa2:	2301      	movlt	r3, #1
 8015aa4:	2300      	movge	r3, #0
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	702b      	strb	r3, [r5, #0]
 8015aaa:	b002      	add	sp, #8
 8015aac:	bd70      	pop	{r4, r5, r6, pc}
 8015aae:	260b      	movs	r6, #11
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	b002      	add	sp, #8
 8015ab4:	bd70      	pop	{r4, r5, r6, pc}
 8015ab6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015aba:	e7e1      	b.n	8015a80 <rcl_timer_is_ready+0x38>

08015abc <rcl_timer_get_time_until_next_call>:
 8015abc:	b570      	push	{r4, r5, r6, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	b330      	cbz	r0, 8015b10 <rcl_timer_get_time_until_next_call+0x54>
 8015ac2:	6803      	ldr	r3, [r0, #0]
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	b33b      	cbz	r3, 8015b18 <rcl_timer_get_time_until_next_call+0x5c>
 8015ac8:	460d      	mov	r5, r1
 8015aca:	b309      	cbz	r1, 8015b10 <rcl_timer_get_time_until_next_call+0x54>
 8015acc:	f3bf 8f5b 	dmb	ish
 8015ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015ad4:	f3bf 8f5b 	dmb	ish
 8015ad8:	b9ab      	cbnz	r3, 8015b06 <rcl_timer_get_time_until_next_call+0x4a>
 8015ada:	6803      	ldr	r3, [r0, #0]
 8015adc:	4669      	mov	r1, sp
 8015ade:	6818      	ldr	r0, [r3, #0]
 8015ae0:	f7ff fd08 	bl	80154f4 <rcl_clock_get_now>
 8015ae4:	4606      	mov	r6, r0
 8015ae6:	b958      	cbnz	r0, 8015b00 <rcl_timer_get_time_until_next_call+0x44>
 8015ae8:	6820      	ldr	r0, [r4, #0]
 8015aea:	2105      	movs	r1, #5
 8015aec:	3028      	adds	r0, #40	@ 0x28
 8015aee:	f001 fbdf 	bl	80172b0 <__atomic_load_8>
 8015af2:	9b00      	ldr	r3, [sp, #0]
 8015af4:	1ac0      	subs	r0, r0, r3
 8015af6:	9b01      	ldr	r3, [sp, #4]
 8015af8:	6028      	str	r0, [r5, #0]
 8015afa:	eb61 0103 	sbc.w	r1, r1, r3
 8015afe:	6069      	str	r1, [r5, #4]
 8015b00:	4630      	mov	r0, r6
 8015b02:	b002      	add	sp, #8
 8015b04:	bd70      	pop	{r4, r5, r6, pc}
 8015b06:	f240 3621 	movw	r6, #801	@ 0x321
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	b002      	add	sp, #8
 8015b0e:	bd70      	pop	{r4, r5, r6, pc}
 8015b10:	260b      	movs	r6, #11
 8015b12:	4630      	mov	r0, r6
 8015b14:	b002      	add	sp, #8
 8015b16:	bd70      	pop	{r4, r5, r6, pc}
 8015b18:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015b1c:	e7f0      	b.n	8015b00 <rcl_timer_get_time_until_next_call+0x44>
 8015b1e:	bf00      	nop

08015b20 <rcl_timer_get_guard_condition>:
 8015b20:	b130      	cbz	r0, 8015b30 <rcl_timer_get_guard_condition+0x10>
 8015b22:	6800      	ldr	r0, [r0, #0]
 8015b24:	b120      	cbz	r0, 8015b30 <rcl_timer_get_guard_condition+0x10>
 8015b26:	68c3      	ldr	r3, [r0, #12]
 8015b28:	b10b      	cbz	r3, 8015b2e <rcl_timer_get_guard_condition+0xe>
 8015b2a:	3008      	adds	r0, #8
 8015b2c:	4770      	bx	lr
 8015b2e:	4618      	mov	r0, r3
 8015b30:	4770      	bx	lr
 8015b32:	bf00      	nop

08015b34 <rcl_validate_enclave_name_with_size>:
 8015b34:	b378      	cbz	r0, 8015b96 <rcl_validate_enclave_name_with_size+0x62>
 8015b36:	b570      	push	{r4, r5, r6, lr}
 8015b38:	4615      	mov	r5, r2
 8015b3a:	b0c2      	sub	sp, #264	@ 0x108
 8015b3c:	b302      	cbz	r2, 8015b80 <rcl_validate_enclave_name_with_size+0x4c>
 8015b3e:	461e      	mov	r6, r3
 8015b40:	466a      	mov	r2, sp
 8015b42:	ab01      	add	r3, sp, #4
 8015b44:	460c      	mov	r4, r1
 8015b46:	f002 f815 	bl	8017b74 <rmw_validate_namespace_with_size>
 8015b4a:	4684      	mov	ip, r0
 8015b4c:	b9e8      	cbnz	r0, 8015b8a <rcl_validate_enclave_name_with_size+0x56>
 8015b4e:	9b00      	ldr	r3, [sp, #0]
 8015b50:	b923      	cbnz	r3, 8015b5c <rcl_validate_enclave_name_with_size+0x28>
 8015b52:	2300      	movs	r3, #0
 8015b54:	602b      	str	r3, [r5, #0]
 8015b56:	4660      	mov	r0, ip
 8015b58:	b042      	add	sp, #264	@ 0x108
 8015b5a:	bd70      	pop	{r4, r5, r6, pc}
 8015b5c:	2b07      	cmp	r3, #7
 8015b5e:	d007      	beq.n	8015b70 <rcl_validate_enclave_name_with_size+0x3c>
 8015b60:	1e5a      	subs	r2, r3, #1
 8015b62:	2a05      	cmp	r2, #5
 8015b64:	d833      	bhi.n	8015bce <rcl_validate_enclave_name_with_size+0x9a>
 8015b66:	e8df f002 	tbb	[pc, r2]
 8015b6a:	2c2f      	.short	0x2c2f
 8015b6c:	1a232629 	.word	0x1a232629
 8015b70:	2cff      	cmp	r4, #255	@ 0xff
 8015b72:	d9ee      	bls.n	8015b52 <rcl_validate_enclave_name_with_size+0x1e>
 8015b74:	602b      	str	r3, [r5, #0]
 8015b76:	2e00      	cmp	r6, #0
 8015b78:	d0ed      	beq.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015b7a:	23fe      	movs	r3, #254	@ 0xfe
 8015b7c:	6033      	str	r3, [r6, #0]
 8015b7e:	e7ea      	b.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015b80:	f04f 0c0b 	mov.w	ip, #11
 8015b84:	4660      	mov	r0, ip
 8015b86:	b042      	add	sp, #264	@ 0x108
 8015b88:	bd70      	pop	{r4, r5, r6, pc}
 8015b8a:	f7fe fdaf 	bl	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 8015b8e:	4684      	mov	ip, r0
 8015b90:	4660      	mov	r0, ip
 8015b92:	b042      	add	sp, #264	@ 0x108
 8015b94:	bd70      	pop	{r4, r5, r6, pc}
 8015b96:	f04f 0c0b 	mov.w	ip, #11
 8015b9a:	4660      	mov	r0, ip
 8015b9c:	4770      	bx	lr
 8015b9e:	2306      	movs	r3, #6
 8015ba0:	602b      	str	r3, [r5, #0]
 8015ba2:	2e00      	cmp	r6, #0
 8015ba4:	d0d7      	beq.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015ba6:	9b01      	ldr	r3, [sp, #4]
 8015ba8:	6033      	str	r3, [r6, #0]
 8015baa:	4660      	mov	r0, ip
 8015bac:	b042      	add	sp, #264	@ 0x108
 8015bae:	bd70      	pop	{r4, r5, r6, pc}
 8015bb0:	2305      	movs	r3, #5
 8015bb2:	602b      	str	r3, [r5, #0]
 8015bb4:	e7f5      	b.n	8015ba2 <rcl_validate_enclave_name_with_size+0x6e>
 8015bb6:	2304      	movs	r3, #4
 8015bb8:	602b      	str	r3, [r5, #0]
 8015bba:	e7f2      	b.n	8015ba2 <rcl_validate_enclave_name_with_size+0x6e>
 8015bbc:	2303      	movs	r3, #3
 8015bbe:	602b      	str	r3, [r5, #0]
 8015bc0:	e7ef      	b.n	8015ba2 <rcl_validate_enclave_name_with_size+0x6e>
 8015bc2:	2302      	movs	r3, #2
 8015bc4:	602b      	str	r3, [r5, #0]
 8015bc6:	e7ec      	b.n	8015ba2 <rcl_validate_enclave_name_with_size+0x6e>
 8015bc8:	2301      	movs	r3, #1
 8015bca:	602b      	str	r3, [r5, #0]
 8015bcc:	e7e9      	b.n	8015ba2 <rcl_validate_enclave_name_with_size+0x6e>
 8015bce:	4a04      	ldr	r2, [pc, #16]	@ (8015be0 <rcl_validate_enclave_name_with_size+0xac>)
 8015bd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015bd4:	a802      	add	r0, sp, #8
 8015bd6:	f001 fd25 	bl	8017624 <rcutils_snprintf>
 8015bda:	f04f 0c01 	mov.w	ip, #1
 8015bde:	e7ba      	b.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015be0:	0801d9d4 	.word	0x0801d9d4

08015be4 <rcl_validate_enclave_name>:
 8015be4:	b168      	cbz	r0, 8015c02 <rcl_validate_enclave_name+0x1e>
 8015be6:	b570      	push	{r4, r5, r6, lr}
 8015be8:	460d      	mov	r5, r1
 8015bea:	4616      	mov	r6, r2
 8015bec:	4604      	mov	r4, r0
 8015bee:	f7ea fb21 	bl	8000234 <strlen>
 8015bf2:	4633      	mov	r3, r6
 8015bf4:	4601      	mov	r1, r0
 8015bf6:	462a      	mov	r2, r5
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bfe:	f7ff bf99 	b.w	8015b34 <rcl_validate_enclave_name_with_size>
 8015c02:	200b      	movs	r0, #11
 8015c04:	4770      	bx	lr
 8015c06:	bf00      	nop

08015c08 <rcl_get_zero_initialized_wait_set>:
 8015c08:	b510      	push	{r4, lr}
 8015c0a:	4c08      	ldr	r4, [pc, #32]	@ (8015c2c <rcl_get_zero_initialized_wait_set+0x24>)
 8015c0c:	4686      	mov	lr, r0
 8015c0e:	4684      	mov	ip, r0
 8015c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c22:	6823      	ldr	r3, [r4, #0]
 8015c24:	f8cc 3000 	str.w	r3, [ip]
 8015c28:	4670      	mov	r0, lr
 8015c2a:	bd10      	pop	{r4, pc}
 8015c2c:	0801da34 	.word	0x0801da34

08015c30 <rcl_wait_set_is_valid>:
 8015c30:	b118      	cbz	r0, 8015c3a <rcl_wait_set_is_valid+0xa>
 8015c32:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015c34:	3800      	subs	r0, #0
 8015c36:	bf18      	it	ne
 8015c38:	2001      	movne	r0, #1
 8015c3a:	4770      	bx	lr

08015c3c <rcl_wait_set_fini>:
 8015c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	b082      	sub	sp, #8
 8015c42:	2800      	cmp	r0, #0
 8015c44:	f000 8095 	beq.w	8015d72 <rcl_wait_set_fini+0x136>
 8015c48:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	2e00      	cmp	r6, #0
 8015c4e:	f000 808c 	beq.w	8015d6a <rcl_wait_set_fini+0x12e>
 8015c52:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015c54:	f002 fd48 	bl	80186e8 <rmw_destroy_wait_set>
 8015c58:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015c5a:	1e06      	subs	r6, r0, #0
 8015c5c:	bf18      	it	ne
 8015c5e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015c62:	2d00      	cmp	r5, #0
 8015c64:	f000 8081 	beq.w	8015d6a <rcl_wait_set_fini+0x12e>
 8015c68:	6820      	ldr	r0, [r4, #0]
 8015c6a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015c6e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015c70:	2700      	movs	r7, #0
 8015c72:	6067      	str	r7, [r4, #4]
 8015c74:	602f      	str	r7, [r5, #0]
 8015c76:	b120      	cbz	r0, 8015c82 <rcl_wait_set_fini+0x46>
 8015c78:	9101      	str	r1, [sp, #4]
 8015c7a:	47c0      	blx	r8
 8015c7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015c7e:	9901      	ldr	r1, [sp, #4]
 8015c80:	6027      	str	r7, [r4, #0]
 8015c82:	68a8      	ldr	r0, [r5, #8]
 8015c84:	b120      	cbz	r0, 8015c90 <rcl_wait_set_fini+0x54>
 8015c86:	47c0      	blx	r8
 8015c88:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015c90:	68a0      	ldr	r0, [r4, #8]
 8015c92:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015c94:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015c96:	f04f 0800 	mov.w	r8, #0
 8015c9a:	f8c4 800c 	str.w	r8, [r4, #12]
 8015c9e:	f8c5 800c 	str.w	r8, [r5, #12]
 8015ca2:	b128      	cbz	r0, 8015cb0 <rcl_wait_set_fini+0x74>
 8015ca4:	47b8      	blx	r7
 8015ca6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015ca8:	f8c4 8008 	str.w	r8, [r4, #8]
 8015cac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015cae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015cb0:	6968      	ldr	r0, [r5, #20]
 8015cb2:	f04f 0800 	mov.w	r8, #0
 8015cb6:	f8c5 8010 	str.w	r8, [r5, #16]
 8015cba:	b128      	cbz	r0, 8015cc8 <rcl_wait_set_fini+0x8c>
 8015cbc:	47b8      	blx	r7
 8015cbe:	f8c5 8014 	str.w	r8, [r5, #20]
 8015cc2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cc4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015cc6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015cc8:	6920      	ldr	r0, [r4, #16]
 8015cca:	f04f 0800 	mov.w	r8, #0
 8015cce:	f8c4 8014 	str.w	r8, [r4, #20]
 8015cd2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8015cd6:	b128      	cbz	r0, 8015ce4 <rcl_wait_set_fini+0xa8>
 8015cd8:	47b8      	blx	r7
 8015cda:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cdc:	f8c4 8010 	str.w	r8, [r4, #16]
 8015ce0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015ce2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015ce4:	69a0      	ldr	r0, [r4, #24]
 8015ce6:	f04f 0800 	mov.w	r8, #0
 8015cea:	f8c4 801c 	str.w	r8, [r4, #28]
 8015cee:	f8c5 8018 	str.w	r8, [r5, #24]
 8015cf2:	b128      	cbz	r0, 8015d00 <rcl_wait_set_fini+0xc4>
 8015cf4:	9101      	str	r1, [sp, #4]
 8015cf6:	47b8      	blx	r7
 8015cf8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cfa:	9901      	ldr	r1, [sp, #4]
 8015cfc:	f8c4 8018 	str.w	r8, [r4, #24]
 8015d00:	6a28      	ldr	r0, [r5, #32]
 8015d02:	b120      	cbz	r0, 8015d0e <rcl_wait_set_fini+0xd2>
 8015d04:	47b8      	blx	r7
 8015d06:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015d0e:	6a20      	ldr	r0, [r4, #32]
 8015d10:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015d14:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d16:	2700      	movs	r7, #0
 8015d18:	6267      	str	r7, [r4, #36]	@ 0x24
 8015d1a:	626f      	str	r7, [r5, #36]	@ 0x24
 8015d1c:	b120      	cbz	r0, 8015d28 <rcl_wait_set_fini+0xec>
 8015d1e:	9101      	str	r1, [sp, #4]
 8015d20:	47c0      	blx	r8
 8015d22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d24:	9901      	ldr	r1, [sp, #4]
 8015d26:	6227      	str	r7, [r4, #32]
 8015d28:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015d2a:	b120      	cbz	r0, 8015d36 <rcl_wait_set_fini+0xfa>
 8015d2c:	47c0      	blx	r8
 8015d2e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d30:	2300      	movs	r3, #0
 8015d32:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015d36:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015d38:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015d3c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d3e:	2700      	movs	r7, #0
 8015d40:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015d42:	632f      	str	r7, [r5, #48]	@ 0x30
 8015d44:	b120      	cbz	r0, 8015d50 <rcl_wait_set_fini+0x114>
 8015d46:	9101      	str	r1, [sp, #4]
 8015d48:	47c0      	blx	r8
 8015d4a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d4c:	9901      	ldr	r1, [sp, #4]
 8015d4e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015d50:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015d52:	b120      	cbz	r0, 8015d5e <rcl_wait_set_fini+0x122>
 8015d54:	47c0      	blx	r8
 8015d56:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d58:	2300      	movs	r3, #0
 8015d5a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015d5e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015d60:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d62:	4628      	mov	r0, r5
 8015d64:	4798      	blx	r3
 8015d66:	2300      	movs	r3, #0
 8015d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	b002      	add	sp, #8
 8015d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d72:	260b      	movs	r6, #11
 8015d74:	4630      	mov	r0, r6
 8015d76:	b002      	add	sp, #8
 8015d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d7c <rcl_wait_set_add_subscription>:
 8015d7c:	b318      	cbz	r0, 8015dc6 <rcl_wait_set_add_subscription+0x4a>
 8015d7e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015d80:	b570      	push	{r4, r5, r6, lr}
 8015d82:	4604      	mov	r4, r0
 8015d84:	b30b      	cbz	r3, 8015dca <rcl_wait_set_add_subscription+0x4e>
 8015d86:	b319      	cbz	r1, 8015dd0 <rcl_wait_set_add_subscription+0x54>
 8015d88:	681d      	ldr	r5, [r3, #0]
 8015d8a:	6840      	ldr	r0, [r0, #4]
 8015d8c:	4285      	cmp	r5, r0
 8015d8e:	d217      	bcs.n	8015dc0 <rcl_wait_set_add_subscription+0x44>
 8015d90:	6820      	ldr	r0, [r4, #0]
 8015d92:	1c6e      	adds	r6, r5, #1
 8015d94:	601e      	str	r6, [r3, #0]
 8015d96:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015d9a:	b102      	cbz	r2, 8015d9e <rcl_wait_set_add_subscription+0x22>
 8015d9c:	6015      	str	r5, [r2, #0]
 8015d9e:	4608      	mov	r0, r1
 8015da0:	f7ff fb08 	bl	80153b4 <rcl_subscription_get_rmw_handle>
 8015da4:	b150      	cbz	r0, 8015dbc <rcl_wait_set_add_subscription+0x40>
 8015da6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015da8:	6842      	ldr	r2, [r0, #4]
 8015daa:	689b      	ldr	r3, [r3, #8]
 8015dac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015db0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015db2:	6853      	ldr	r3, [r2, #4]
 8015db4:	3301      	adds	r3, #1
 8015db6:	2000      	movs	r0, #0
 8015db8:	6053      	str	r3, [r2, #4]
 8015dba:	bd70      	pop	{r4, r5, r6, pc}
 8015dbc:	2001      	movs	r0, #1
 8015dbe:	bd70      	pop	{r4, r5, r6, pc}
 8015dc0:	f240 3086 	movw	r0, #902	@ 0x386
 8015dc4:	bd70      	pop	{r4, r5, r6, pc}
 8015dc6:	200b      	movs	r0, #11
 8015dc8:	4770      	bx	lr
 8015dca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015dce:	bd70      	pop	{r4, r5, r6, pc}
 8015dd0:	200b      	movs	r0, #11
 8015dd2:	bd70      	pop	{r4, r5, r6, pc}

08015dd4 <rcl_wait_set_clear>:
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	d073      	beq.n	8015ec0 <rcl_wait_set_clear+0xec>
 8015dd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015dda:	b510      	push	{r4, lr}
 8015ddc:	4604      	mov	r4, r0
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d070      	beq.n	8015ec4 <rcl_wait_set_clear+0xf0>
 8015de2:	6800      	ldr	r0, [r0, #0]
 8015de4:	b138      	cbz	r0, 8015df6 <rcl_wait_set_clear+0x22>
 8015de6:	6862      	ldr	r2, [r4, #4]
 8015de8:	2100      	movs	r1, #0
 8015dea:	0092      	lsls	r2, r2, #2
 8015dec:	f004 fbde 	bl	801a5ac <memset>
 8015df0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015df2:	2200      	movs	r2, #0
 8015df4:	601a      	str	r2, [r3, #0]
 8015df6:	68a0      	ldr	r0, [r4, #8]
 8015df8:	b138      	cbz	r0, 8015e0a <rcl_wait_set_clear+0x36>
 8015dfa:	68e2      	ldr	r2, [r4, #12]
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	0092      	lsls	r2, r2, #2
 8015e00:	f004 fbd4 	bl	801a5ac <memset>
 8015e04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e06:	2200      	movs	r2, #0
 8015e08:	60da      	str	r2, [r3, #12]
 8015e0a:	69a0      	ldr	r0, [r4, #24]
 8015e0c:	b138      	cbz	r0, 8015e1e <rcl_wait_set_clear+0x4a>
 8015e0e:	69e2      	ldr	r2, [r4, #28]
 8015e10:	2100      	movs	r1, #0
 8015e12:	0092      	lsls	r2, r2, #2
 8015e14:	f004 fbca 	bl	801a5ac <memset>
 8015e18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	619a      	str	r2, [r3, #24]
 8015e1e:	6a20      	ldr	r0, [r4, #32]
 8015e20:	b138      	cbz	r0, 8015e32 <rcl_wait_set_clear+0x5e>
 8015e22:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015e24:	2100      	movs	r1, #0
 8015e26:	0092      	lsls	r2, r2, #2
 8015e28:	f004 fbc0 	bl	801a5ac <memset>
 8015e2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e2e:	2200      	movs	r2, #0
 8015e30:	625a      	str	r2, [r3, #36]	@ 0x24
 8015e32:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015e34:	b138      	cbz	r0, 8015e46 <rcl_wait_set_clear+0x72>
 8015e36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015e38:	2100      	movs	r1, #0
 8015e3a:	0092      	lsls	r2, r2, #2
 8015e3c:	f004 fbb6 	bl	801a5ac <memset>
 8015e40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e42:	2200      	movs	r2, #0
 8015e44:	631a      	str	r2, [r3, #48]	@ 0x30
 8015e46:	6920      	ldr	r0, [r4, #16]
 8015e48:	b138      	cbz	r0, 8015e5a <rcl_wait_set_clear+0x86>
 8015e4a:	6962      	ldr	r2, [r4, #20]
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	0092      	lsls	r2, r2, #2
 8015e50:	f004 fbac 	bl	801a5ac <memset>
 8015e54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e56:	2200      	movs	r2, #0
 8015e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8015e5a:	6898      	ldr	r0, [r3, #8]
 8015e5c:	b138      	cbz	r0, 8015e6e <rcl_wait_set_clear+0x9a>
 8015e5e:	685a      	ldr	r2, [r3, #4]
 8015e60:	2100      	movs	r1, #0
 8015e62:	0092      	lsls	r2, r2, #2
 8015e64:	f004 fba2 	bl	801a5ac <memset>
 8015e68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	605a      	str	r2, [r3, #4]
 8015e6e:	6958      	ldr	r0, [r3, #20]
 8015e70:	b138      	cbz	r0, 8015e82 <rcl_wait_set_clear+0xae>
 8015e72:	691a      	ldr	r2, [r3, #16]
 8015e74:	2100      	movs	r1, #0
 8015e76:	0092      	lsls	r2, r2, #2
 8015e78:	f004 fb98 	bl	801a5ac <memset>
 8015e7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e7e:	2200      	movs	r2, #0
 8015e80:	611a      	str	r2, [r3, #16]
 8015e82:	6a18      	ldr	r0, [r3, #32]
 8015e84:	b138      	cbz	r0, 8015e96 <rcl_wait_set_clear+0xc2>
 8015e86:	69da      	ldr	r2, [r3, #28]
 8015e88:	2100      	movs	r1, #0
 8015e8a:	0092      	lsls	r2, r2, #2
 8015e8c:	f004 fb8e 	bl	801a5ac <memset>
 8015e90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e92:	2200      	movs	r2, #0
 8015e94:	61da      	str	r2, [r3, #28]
 8015e96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015e98:	b138      	cbz	r0, 8015eaa <rcl_wait_set_clear+0xd6>
 8015e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015e9c:	2100      	movs	r1, #0
 8015e9e:	0092      	lsls	r2, r2, #2
 8015ea0:	f004 fb84 	bl	801a5ac <memset>
 8015ea4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8015eaa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015eac:	b138      	cbz	r0, 8015ebe <rcl_wait_set_clear+0xea>
 8015eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015eb0:	2100      	movs	r1, #0
 8015eb2:	0092      	lsls	r2, r2, #2
 8015eb4:	f004 fb7a 	bl	801a5ac <memset>
 8015eb8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eba:	2000      	movs	r0, #0
 8015ebc:	6358      	str	r0, [r3, #52]	@ 0x34
 8015ebe:	bd10      	pop	{r4, pc}
 8015ec0:	200b      	movs	r0, #11
 8015ec2:	4770      	bx	lr
 8015ec4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ec8:	bd10      	pop	{r4, pc}
 8015eca:	bf00      	nop

08015ecc <rcl_wait_set_resize>:
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	f000 8185 	beq.w	80161dc <rcl_wait_set_resize+0x310>
 8015ed2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015ed8:	b083      	sub	sp, #12
 8015eda:	4605      	mov	r5, r0
 8015edc:	2c00      	cmp	r4, #0
 8015ede:	f000 817f 	beq.w	80161e0 <rcl_wait_set_resize+0x314>
 8015ee2:	f04f 0900 	mov.w	r9, #0
 8015ee6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015eea:	461f      	mov	r7, r3
 8015eec:	4688      	mov	r8, r1
 8015eee:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015ef2:	4616      	mov	r6, r2
 8015ef4:	f8c0 9004 	str.w	r9, [r0, #4]
 8015ef8:	f8c4 9000 	str.w	r9, [r4]
 8015efc:	2900      	cmp	r1, #0
 8015efe:	f000 80bd 	beq.w	801607c <rcl_wait_set_resize+0x1b0>
 8015f02:	008c      	lsls	r4, r1, #2
 8015f04:	6800      	ldr	r0, [r0, #0]
 8015f06:	9301      	str	r3, [sp, #4]
 8015f08:	4652      	mov	r2, sl
 8015f0a:	4621      	mov	r1, r4
 8015f0c:	4798      	blx	r3
 8015f0e:	9b01      	ldr	r3, [sp, #4]
 8015f10:	6028      	str	r0, [r5, #0]
 8015f12:	2800      	cmp	r0, #0
 8015f14:	f000 80cb 	beq.w	80160ae <rcl_wait_set_resize+0x1e2>
 8015f18:	4622      	mov	r2, r4
 8015f1a:	4649      	mov	r1, r9
 8015f1c:	9301      	str	r3, [sp, #4]
 8015f1e:	f004 fb45 	bl	801a5ac <memset>
 8015f22:	f8c5 8004 	str.w	r8, [r5, #4]
 8015f26:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015f2a:	9b01      	ldr	r3, [sp, #4]
 8015f2c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015f30:	f8c8 9004 	str.w	r9, [r8, #4]
 8015f34:	4652      	mov	r2, sl
 8015f36:	4621      	mov	r1, r4
 8015f38:	4798      	blx	r3
 8015f3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015f3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f40:	689b      	ldr	r3, [r3, #8]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	f000 80ac 	beq.w	80160a0 <rcl_wait_set_resize+0x1d4>
 8015f48:	4622      	mov	r2, r4
 8015f4a:	4649      	mov	r1, r9
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f004 fb2d 	bl	801a5ac <memset>
 8015f52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015f54:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015f58:	f04f 0800 	mov.w	r8, #0
 8015f5c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015f60:	f8c5 800c 	str.w	r8, [r5, #12]
 8015f64:	f8c4 800c 	str.w	r8, [r4, #12]
 8015f68:	2e00      	cmp	r6, #0
 8015f6a:	f040 80a4 	bne.w	80160b6 <rcl_wait_set_resize+0x1ea>
 8015f6e:	68a8      	ldr	r0, [r5, #8]
 8015f70:	b128      	cbz	r0, 8015f7e <rcl_wait_set_resize+0xb2>
 8015f72:	4649      	mov	r1, r9
 8015f74:	4790      	blx	r2
 8015f76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015f78:	60ae      	str	r6, [r5, #8]
 8015f7a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015f7e:	f04f 0800 	mov.w	r8, #0
 8015f82:	19f6      	adds	r6, r6, r7
 8015f84:	f8c4 8010 	str.w	r8, [r4, #16]
 8015f88:	f040 80ac 	bne.w	80160e4 <rcl_wait_set_resize+0x218>
 8015f8c:	6960      	ldr	r0, [r4, #20]
 8015f8e:	b130      	cbz	r0, 8015f9e <rcl_wait_set_resize+0xd2>
 8015f90:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015f92:	4649      	mov	r1, r9
 8015f94:	4798      	blx	r3
 8015f96:	6166      	str	r6, [r4, #20]
 8015f98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015f9a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015f9e:	2600      	movs	r6, #0
 8015fa0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015fa4:	616e      	str	r6, [r5, #20]
 8015fa6:	6426      	str	r6, [r4, #64]	@ 0x40
 8015fa8:	2f00      	cmp	r7, #0
 8015faa:	f040 80ad 	bne.w	8016108 <rcl_wait_set_resize+0x23c>
 8015fae:	6928      	ldr	r0, [r5, #16]
 8015fb0:	b138      	cbz	r0, 8015fc2 <rcl_wait_set_resize+0xf6>
 8015fb2:	4649      	mov	r1, r9
 8015fb4:	47d0      	blx	sl
 8015fb6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fb8:	612f      	str	r7, [r5, #16]
 8015fba:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015fbe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015fc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fc4:	2600      	movs	r6, #0
 8015fc6:	61ee      	str	r6, [r5, #28]
 8015fc8:	61a6      	str	r6, [r4, #24]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f040 80af 	bne.w	801612e <rcl_wait_set_resize+0x262>
 8015fd0:	69a8      	ldr	r0, [r5, #24]
 8015fd2:	b120      	cbz	r0, 8015fde <rcl_wait_set_resize+0x112>
 8015fd4:	4649      	mov	r1, r9
 8015fd6:	47d0      	blx	sl
 8015fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fda:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fdc:	61ab      	str	r3, [r5, #24]
 8015fde:	6a20      	ldr	r0, [r4, #32]
 8015fe0:	b128      	cbz	r0, 8015fee <rcl_wait_set_resize+0x122>
 8015fe2:	4649      	mov	r1, r9
 8015fe4:	47d0      	blx	sl
 8015fe6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fe8:	2300      	movs	r3, #0
 8015fea:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ff0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015ff2:	2600      	movs	r6, #0
 8015ff4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015ff8:	626e      	str	r6, [r5, #36]	@ 0x24
 8015ffa:	6266      	str	r6, [r4, #36]	@ 0x24
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	f000 80b6 	beq.w	801616e <rcl_wait_set_resize+0x2a2>
 8016002:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016006:	6a28      	ldr	r0, [r5, #32]
 8016008:	463a      	mov	r2, r7
 801600a:	4651      	mov	r1, sl
 801600c:	47c8      	blx	r9
 801600e:	6228      	str	r0, [r5, #32]
 8016010:	2800      	cmp	r0, #0
 8016012:	d04c      	beq.n	80160ae <rcl_wait_set_resize+0x1e2>
 8016014:	4652      	mov	r2, sl
 8016016:	4631      	mov	r1, r6
 8016018:	f004 fac8 	bl	801a5ac <memset>
 801601c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801601e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016020:	626b      	str	r3, [r5, #36]	@ 0x24
 8016022:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016024:	62a6      	str	r6, [r4, #40]	@ 0x28
 8016026:	463a      	mov	r2, r7
 8016028:	4651      	mov	r1, sl
 801602a:	47c8      	blx	r9
 801602c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801602e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016030:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016032:	2c00      	cmp	r4, #0
 8016034:	f000 80f0 	beq.w	8016218 <rcl_wait_set_resize+0x34c>
 8016038:	4620      	mov	r0, r4
 801603a:	4652      	mov	r2, sl
 801603c:	4631      	mov	r1, r6
 801603e:	f004 fab5 	bl	801a5ac <memset>
 8016042:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016046:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016048:	2600      	movs	r6, #0
 801604a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801604e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016050:	6326      	str	r6, [r4, #48]	@ 0x30
 8016052:	2b00      	cmp	r3, #0
 8016054:	f040 809d 	bne.w	8016192 <rcl_wait_set_resize+0x2c6>
 8016058:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801605a:	b120      	cbz	r0, 8016066 <rcl_wait_set_resize+0x19a>
 801605c:	4639      	mov	r1, r7
 801605e:	47c0      	blx	r8
 8016060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016062:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016064:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016066:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016068:	b310      	cbz	r0, 80160b0 <rcl_wait_set_resize+0x1e4>
 801606a:	4639      	mov	r1, r7
 801606c:	47c0      	blx	r8
 801606e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016070:	2000      	movs	r0, #0
 8016072:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8016076:	b003      	add	sp, #12
 8016078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801607c:	6800      	ldr	r0, [r0, #0]
 801607e:	b120      	cbz	r0, 801608a <rcl_wait_set_resize+0x1be>
 8016080:	4651      	mov	r1, sl
 8016082:	47d8      	blx	fp
 8016084:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016086:	f8c5 8000 	str.w	r8, [r5]
 801608a:	68a0      	ldr	r0, [r4, #8]
 801608c:	2800      	cmp	r0, #0
 801608e:	f43f af61 	beq.w	8015f54 <rcl_wait_set_resize+0x88>
 8016092:	4651      	mov	r1, sl
 8016094:	47d8      	blx	fp
 8016096:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016098:	2300      	movs	r3, #0
 801609a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801609e:	e759      	b.n	8015f54 <rcl_wait_set_resize+0x88>
 80160a0:	6828      	ldr	r0, [r5, #0]
 80160a2:	9301      	str	r3, [sp, #4]
 80160a4:	4651      	mov	r1, sl
 80160a6:	47d8      	blx	fp
 80160a8:	9b01      	ldr	r3, [sp, #4]
 80160aa:	e9c5 3300 	strd	r3, r3, [r5]
 80160ae:	200a      	movs	r0, #10
 80160b0:	b003      	add	sp, #12
 80160b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b6:	00b4      	lsls	r4, r6, #2
 80160b8:	68a8      	ldr	r0, [r5, #8]
 80160ba:	464a      	mov	r2, r9
 80160bc:	4621      	mov	r1, r4
 80160be:	4798      	blx	r3
 80160c0:	60a8      	str	r0, [r5, #8]
 80160c2:	2800      	cmp	r0, #0
 80160c4:	d0f3      	beq.n	80160ae <rcl_wait_set_resize+0x1e2>
 80160c6:	4622      	mov	r2, r4
 80160c8:	4641      	mov	r1, r8
 80160ca:	f004 fa6f 	bl	801a5ac <memset>
 80160ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160d0:	60ee      	str	r6, [r5, #12]
 80160d2:	f04f 0800 	mov.w	r8, #0
 80160d6:	19f6      	adds	r6, r6, r7
 80160d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80160dc:	f8c4 8010 	str.w	r8, [r4, #16]
 80160e0:	f43f af54 	beq.w	8015f8c <rcl_wait_set_resize+0xc0>
 80160e4:	00b6      	lsls	r6, r6, #2
 80160e6:	464a      	mov	r2, r9
 80160e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80160ea:	6960      	ldr	r0, [r4, #20]
 80160ec:	4631      	mov	r1, r6
 80160ee:	4798      	blx	r3
 80160f0:	4681      	mov	r9, r0
 80160f2:	6160      	str	r0, [r4, #20]
 80160f4:	2800      	cmp	r0, #0
 80160f6:	d076      	beq.n	80161e6 <rcl_wait_set_resize+0x31a>
 80160f8:	4632      	mov	r2, r6
 80160fa:	4641      	mov	r1, r8
 80160fc:	f004 fa56 	bl	801a5ac <memset>
 8016100:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016102:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016106:	e74a      	b.n	8015f9e <rcl_wait_set_resize+0xd2>
 8016108:	00bc      	lsls	r4, r7, #2
 801610a:	6928      	ldr	r0, [r5, #16]
 801610c:	464a      	mov	r2, r9
 801610e:	4621      	mov	r1, r4
 8016110:	47c0      	blx	r8
 8016112:	6128      	str	r0, [r5, #16]
 8016114:	2800      	cmp	r0, #0
 8016116:	d0ca      	beq.n	80160ae <rcl_wait_set_resize+0x1e2>
 8016118:	4622      	mov	r2, r4
 801611a:	4631      	mov	r1, r6
 801611c:	f004 fa46 	bl	801a5ac <memset>
 8016120:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016122:	616f      	str	r7, [r5, #20]
 8016124:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016128:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801612c:	e749      	b.n	8015fc2 <rcl_wait_set_resize+0xf6>
 801612e:	009c      	lsls	r4, r3, #2
 8016130:	69a8      	ldr	r0, [r5, #24]
 8016132:	464a      	mov	r2, r9
 8016134:	4621      	mov	r1, r4
 8016136:	47c0      	blx	r8
 8016138:	61a8      	str	r0, [r5, #24]
 801613a:	2800      	cmp	r0, #0
 801613c:	d0b7      	beq.n	80160ae <rcl_wait_set_resize+0x1e2>
 801613e:	4622      	mov	r2, r4
 8016140:	4631      	mov	r1, r6
 8016142:	f004 fa33 	bl	801a5ac <memset>
 8016146:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8016148:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801614a:	61eb      	str	r3, [r5, #28]
 801614c:	6a38      	ldr	r0, [r7, #32]
 801614e:	61fe      	str	r6, [r7, #28]
 8016150:	464a      	mov	r2, r9
 8016152:	4621      	mov	r1, r4
 8016154:	47c0      	blx	r8
 8016156:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016158:	6238      	str	r0, [r7, #32]
 801615a:	6a1f      	ldr	r7, [r3, #32]
 801615c:	2f00      	cmp	r7, #0
 801615e:	d054      	beq.n	801620a <rcl_wait_set_resize+0x33e>
 8016160:	4622      	mov	r2, r4
 8016162:	4631      	mov	r1, r6
 8016164:	4638      	mov	r0, r7
 8016166:	f004 fa21 	bl	801a5ac <memset>
 801616a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801616c:	e73f      	b.n	8015fee <rcl_wait_set_resize+0x122>
 801616e:	6a28      	ldr	r0, [r5, #32]
 8016170:	b120      	cbz	r0, 801617c <rcl_wait_set_resize+0x2b0>
 8016172:	4639      	mov	r1, r7
 8016174:	47c0      	blx	r8
 8016176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016178:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801617a:	622b      	str	r3, [r5, #32]
 801617c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801617e:	2800      	cmp	r0, #0
 8016180:	f43f af60 	beq.w	8016044 <rcl_wait_set_resize+0x178>
 8016184:	4639      	mov	r1, r7
 8016186:	47c0      	blx	r8
 8016188:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801618a:	2300      	movs	r3, #0
 801618c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016190:	e758      	b.n	8016044 <rcl_wait_set_resize+0x178>
 8016192:	009c      	lsls	r4, r3, #2
 8016194:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016196:	463a      	mov	r2, r7
 8016198:	4621      	mov	r1, r4
 801619a:	47c8      	blx	r9
 801619c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801619e:	2800      	cmp	r0, #0
 80161a0:	d085      	beq.n	80160ae <rcl_wait_set_resize+0x1e2>
 80161a2:	4622      	mov	r2, r4
 80161a4:	4631      	mov	r1, r6
 80161a6:	f004 fa01 	bl	801a5ac <memset>
 80161aa:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80161ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161b0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80161b2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80161b6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80161ba:	463a      	mov	r2, r7
 80161bc:	4621      	mov	r1, r4
 80161be:	47c8      	blx	r9
 80161c0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80161c2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80161c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161c8:	b36b      	cbz	r3, 8016226 <rcl_wait_set_resize+0x35a>
 80161ca:	4622      	mov	r2, r4
 80161cc:	4631      	mov	r1, r6
 80161ce:	4618      	mov	r0, r3
 80161d0:	f004 f9ec 	bl	801a5ac <memset>
 80161d4:	4630      	mov	r0, r6
 80161d6:	b003      	add	sp, #12
 80161d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161dc:	200b      	movs	r0, #11
 80161de:	4770      	bx	lr
 80161e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80161e4:	e764      	b.n	80160b0 <rcl_wait_set_resize+0x1e4>
 80161e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80161e8:	68a8      	ldr	r0, [r5, #8]
 80161ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80161ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161ee:	4798      	blx	r3
 80161f0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80161f2:	6928      	ldr	r0, [r5, #16]
 80161f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80161f6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80161f8:	f8c5 900c 	str.w	r9, [r5, #12]
 80161fc:	f8c5 9008 	str.w	r9, [r5, #8]
 8016200:	4790      	blx	r2
 8016202:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8016206:	200a      	movs	r0, #10
 8016208:	e752      	b.n	80160b0 <rcl_wait_set_resize+0x1e4>
 801620a:	69a8      	ldr	r0, [r5, #24]
 801620c:	4649      	mov	r1, r9
 801620e:	47d0      	blx	sl
 8016210:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016214:	200a      	movs	r0, #10
 8016216:	e74b      	b.n	80160b0 <rcl_wait_set_resize+0x1e4>
 8016218:	6a28      	ldr	r0, [r5, #32]
 801621a:	4639      	mov	r1, r7
 801621c:	47c0      	blx	r8
 801621e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016222:	200a      	movs	r0, #10
 8016224:	e744      	b.n	80160b0 <rcl_wait_set_resize+0x1e4>
 8016226:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016228:	9301      	str	r3, [sp, #4]
 801622a:	4639      	mov	r1, r7
 801622c:	47c0      	blx	r8
 801622e:	9b01      	ldr	r3, [sp, #4]
 8016230:	200a      	movs	r0, #10
 8016232:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016236:	e73b      	b.n	80160b0 <rcl_wait_set_resize+0x1e4>

08016238 <rcl_wait_set_init>:
 8016238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801623c:	b084      	sub	sp, #16
 801623e:	4604      	mov	r4, r0
 8016240:	a810      	add	r0, sp, #64	@ 0x40
 8016242:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8016246:	460f      	mov	r7, r1
 8016248:	4690      	mov	r8, r2
 801624a:	4699      	mov	r9, r3
 801624c:	f7f8 fa2e 	bl	800e6ac <rcutils_allocator_is_valid>
 8016250:	2800      	cmp	r0, #0
 8016252:	d06b      	beq.n	801632c <rcl_wait_set_init+0xf4>
 8016254:	2c00      	cmp	r4, #0
 8016256:	d069      	beq.n	801632c <rcl_wait_set_init+0xf4>
 8016258:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801625a:	b125      	cbz	r5, 8016266 <rcl_wait_set_init+0x2e>
 801625c:	2564      	movs	r5, #100	@ 0x64
 801625e:	4628      	mov	r0, r5
 8016260:	b004      	add	sp, #16
 8016262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016266:	f1ba 0f00 	cmp.w	sl, #0
 801626a:	d05f      	beq.n	801632c <rcl_wait_set_init+0xf4>
 801626c:	4650      	mov	r0, sl
 801626e:	f7fe fa5b 	bl	8014728 <rcl_context_is_valid>
 8016272:	2800      	cmp	r0, #0
 8016274:	d067      	beq.n	8016346 <rcl_wait_set_init+0x10e>
 8016276:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016278:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801627a:	205c      	movs	r0, #92	@ 0x5c
 801627c:	4798      	blx	r3
 801627e:	6320      	str	r0, [r4, #48]	@ 0x30
 8016280:	2800      	cmp	r0, #0
 8016282:	d062      	beq.n	801634a <rcl_wait_set_init+0x112>
 8016284:	4629      	mov	r1, r5
 8016286:	225c      	movs	r2, #92	@ 0x5c
 8016288:	f004 f990 	bl	801a5ac <memset>
 801628c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8016290:	eb03 0e02 	add.w	lr, r3, r2
 8016294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016296:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8016298:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801629c:	449e      	add	lr, r3
 801629e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80162a2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80162a6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80162aa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80162ae:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80162b2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80162b6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80162ba:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80162be:	f8da a000 	ldr.w	sl, [sl]
 80162c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80162c4:	44c6      	add	lr, r8
 80162c6:	f8dc 3000 	ldr.w	r3, [ip]
 80162ca:	602b      	str	r3, [r5, #0]
 80162cc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80162d0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80162d4:	f002 f9fe 	bl	80186d4 <rmw_create_wait_set>
 80162d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162da:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80162dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80162de:	b350      	cbz	r0, 8016336 <rcl_wait_set_init+0xfe>
 80162e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162e2:	9302      	str	r3, [sp, #8]
 80162e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162e6:	9301      	str	r3, [sp, #4]
 80162e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162ea:	9300      	str	r3, [sp, #0]
 80162ec:	4642      	mov	r2, r8
 80162ee:	464b      	mov	r3, r9
 80162f0:	4639      	mov	r1, r7
 80162f2:	4620      	mov	r0, r4
 80162f4:	f7ff fdea 	bl	8015ecc <rcl_wait_set_resize>
 80162f8:	4605      	mov	r5, r0
 80162fa:	2800      	cmp	r0, #0
 80162fc:	d0af      	beq.n	801625e <rcl_wait_set_init+0x26>
 80162fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016300:	bb2b      	cbnz	r3, 801634e <rcl_wait_set_init+0x116>
 8016302:	2600      	movs	r6, #0
 8016304:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016308:	9600      	str	r6, [sp, #0]
 801630a:	4633      	mov	r3, r6
 801630c:	4632      	mov	r2, r6
 801630e:	4631      	mov	r1, r6
 8016310:	4620      	mov	r0, r4
 8016312:	f7ff fddb 	bl	8015ecc <rcl_wait_set_resize>
 8016316:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016318:	2800      	cmp	r0, #0
 801631a:	d0a0      	beq.n	801625e <rcl_wait_set_init+0x26>
 801631c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801631e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016320:	4798      	blx	r3
 8016322:	4628      	mov	r0, r5
 8016324:	6326      	str	r6, [r4, #48]	@ 0x30
 8016326:	b004      	add	sp, #16
 8016328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801632c:	250b      	movs	r5, #11
 801632e:	4628      	mov	r0, r5
 8016330:	b004      	add	sp, #16
 8016332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016336:	2501      	movs	r5, #1
 8016338:	f002 f9d6 	bl	80186e8 <rmw_destroy_wait_set>
 801633c:	2800      	cmp	r0, #0
 801633e:	bf18      	it	ne
 8016340:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8016344:	e7dd      	b.n	8016302 <rcl_wait_set_init+0xca>
 8016346:	2565      	movs	r5, #101	@ 0x65
 8016348:	e789      	b.n	801625e <rcl_wait_set_init+0x26>
 801634a:	250a      	movs	r5, #10
 801634c:	e787      	b.n	801625e <rcl_wait_set_init+0x26>
 801634e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016350:	e7f2      	b.n	8016338 <rcl_wait_set_init+0x100>
 8016352:	bf00      	nop

08016354 <rcl_wait_set_add_guard_condition>:
 8016354:	b318      	cbz	r0, 801639e <rcl_wait_set_add_guard_condition+0x4a>
 8016356:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016358:	b570      	push	{r4, r5, r6, lr}
 801635a:	4604      	mov	r4, r0
 801635c:	b30b      	cbz	r3, 80163a2 <rcl_wait_set_add_guard_condition+0x4e>
 801635e:	b319      	cbz	r1, 80163a8 <rcl_wait_set_add_guard_condition+0x54>
 8016360:	68dd      	ldr	r5, [r3, #12]
 8016362:	68c0      	ldr	r0, [r0, #12]
 8016364:	4285      	cmp	r5, r0
 8016366:	d217      	bcs.n	8016398 <rcl_wait_set_add_guard_condition+0x44>
 8016368:	68a0      	ldr	r0, [r4, #8]
 801636a:	1c6e      	adds	r6, r5, #1
 801636c:	60de      	str	r6, [r3, #12]
 801636e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016372:	b102      	cbz	r2, 8016376 <rcl_wait_set_add_guard_condition+0x22>
 8016374:	6015      	str	r5, [r2, #0]
 8016376:	4608      	mov	r0, r1
 8016378:	f003 fac0 	bl	80198fc <rcl_guard_condition_get_rmw_handle>
 801637c:	b150      	cbz	r0, 8016394 <rcl_wait_set_add_guard_condition+0x40>
 801637e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016380:	6842      	ldr	r2, [r0, #4]
 8016382:	695b      	ldr	r3, [r3, #20]
 8016384:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016388:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801638a:	6913      	ldr	r3, [r2, #16]
 801638c:	3301      	adds	r3, #1
 801638e:	2000      	movs	r0, #0
 8016390:	6113      	str	r3, [r2, #16]
 8016392:	bd70      	pop	{r4, r5, r6, pc}
 8016394:	2001      	movs	r0, #1
 8016396:	bd70      	pop	{r4, r5, r6, pc}
 8016398:	f240 3086 	movw	r0, #902	@ 0x386
 801639c:	bd70      	pop	{r4, r5, r6, pc}
 801639e:	200b      	movs	r0, #11
 80163a0:	4770      	bx	lr
 80163a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80163a6:	bd70      	pop	{r4, r5, r6, pc}
 80163a8:	200b      	movs	r0, #11
 80163aa:	bd70      	pop	{r4, r5, r6, pc}

080163ac <rcl_wait_set_add_timer>:
 80163ac:	b328      	cbz	r0, 80163fa <rcl_wait_set_add_timer+0x4e>
 80163ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80163b0:	b570      	push	{r4, r5, r6, lr}
 80163b2:	4604      	mov	r4, r0
 80163b4:	b31b      	cbz	r3, 80163fe <rcl_wait_set_add_timer+0x52>
 80163b6:	b329      	cbz	r1, 8016404 <rcl_wait_set_add_timer+0x58>
 80163b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80163ba:	6965      	ldr	r5, [r4, #20]
 80163bc:	42a8      	cmp	r0, r5
 80163be:	d219      	bcs.n	80163f4 <rcl_wait_set_add_timer+0x48>
 80163c0:	6925      	ldr	r5, [r4, #16]
 80163c2:	1c46      	adds	r6, r0, #1
 80163c4:	641e      	str	r6, [r3, #64]	@ 0x40
 80163c6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80163ca:	b102      	cbz	r2, 80163ce <rcl_wait_set_add_timer+0x22>
 80163cc:	6010      	str	r0, [r2, #0]
 80163ce:	4608      	mov	r0, r1
 80163d0:	f7ff fba6 	bl	8015b20 <rcl_timer_get_guard_condition>
 80163d4:	b168      	cbz	r0, 80163f2 <rcl_wait_set_add_timer+0x46>
 80163d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80163d8:	68e3      	ldr	r3, [r4, #12]
 80163da:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80163dc:	3b01      	subs	r3, #1
 80163de:	441d      	add	r5, r3
 80163e0:	f003 fa8c 	bl	80198fc <rcl_guard_condition_get_rmw_handle>
 80163e4:	b180      	cbz	r0, 8016408 <rcl_wait_set_add_timer+0x5c>
 80163e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163e8:	6842      	ldr	r2, [r0, #4]
 80163ea:	695b      	ldr	r3, [r3, #20]
 80163ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80163f0:	2000      	movs	r0, #0
 80163f2:	bd70      	pop	{r4, r5, r6, pc}
 80163f4:	f240 3086 	movw	r0, #902	@ 0x386
 80163f8:	bd70      	pop	{r4, r5, r6, pc}
 80163fa:	200b      	movs	r0, #11
 80163fc:	4770      	bx	lr
 80163fe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016402:	bd70      	pop	{r4, r5, r6, pc}
 8016404:	200b      	movs	r0, #11
 8016406:	bd70      	pop	{r4, r5, r6, pc}
 8016408:	2001      	movs	r0, #1
 801640a:	bd70      	pop	{r4, r5, r6, pc}

0801640c <rcl_wait_set_add_client>:
 801640c:	b318      	cbz	r0, 8016456 <rcl_wait_set_add_client+0x4a>
 801640e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016410:	b570      	push	{r4, r5, r6, lr}
 8016412:	4604      	mov	r4, r0
 8016414:	b30b      	cbz	r3, 801645a <rcl_wait_set_add_client+0x4e>
 8016416:	b319      	cbz	r1, 8016460 <rcl_wait_set_add_client+0x54>
 8016418:	699d      	ldr	r5, [r3, #24]
 801641a:	69c0      	ldr	r0, [r0, #28]
 801641c:	4285      	cmp	r5, r0
 801641e:	d217      	bcs.n	8016450 <rcl_wait_set_add_client+0x44>
 8016420:	69a0      	ldr	r0, [r4, #24]
 8016422:	1c6e      	adds	r6, r5, #1
 8016424:	619e      	str	r6, [r3, #24]
 8016426:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801642a:	b102      	cbz	r2, 801642e <rcl_wait_set_add_client+0x22>
 801642c:	6015      	str	r5, [r2, #0]
 801642e:	4608      	mov	r0, r1
 8016430:	f7fe f8ce 	bl	80145d0 <rcl_client_get_rmw_handle>
 8016434:	b150      	cbz	r0, 801644c <rcl_wait_set_add_client+0x40>
 8016436:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016438:	6842      	ldr	r2, [r0, #4]
 801643a:	6a1b      	ldr	r3, [r3, #32]
 801643c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016440:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016442:	69d3      	ldr	r3, [r2, #28]
 8016444:	3301      	adds	r3, #1
 8016446:	2000      	movs	r0, #0
 8016448:	61d3      	str	r3, [r2, #28]
 801644a:	bd70      	pop	{r4, r5, r6, pc}
 801644c:	2001      	movs	r0, #1
 801644e:	bd70      	pop	{r4, r5, r6, pc}
 8016450:	f240 3086 	movw	r0, #902	@ 0x386
 8016454:	bd70      	pop	{r4, r5, r6, pc}
 8016456:	200b      	movs	r0, #11
 8016458:	4770      	bx	lr
 801645a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801645e:	bd70      	pop	{r4, r5, r6, pc}
 8016460:	200b      	movs	r0, #11
 8016462:	bd70      	pop	{r4, r5, r6, pc}

08016464 <rcl_wait_set_add_service>:
 8016464:	b318      	cbz	r0, 80164ae <rcl_wait_set_add_service+0x4a>
 8016466:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016468:	b570      	push	{r4, r5, r6, lr}
 801646a:	4604      	mov	r4, r0
 801646c:	b30b      	cbz	r3, 80164b2 <rcl_wait_set_add_service+0x4e>
 801646e:	b319      	cbz	r1, 80164b8 <rcl_wait_set_add_service+0x54>
 8016470:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016472:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016474:	4285      	cmp	r5, r0
 8016476:	d217      	bcs.n	80164a8 <rcl_wait_set_add_service+0x44>
 8016478:	6a20      	ldr	r0, [r4, #32]
 801647a:	1c6e      	adds	r6, r5, #1
 801647c:	625e      	str	r6, [r3, #36]	@ 0x24
 801647e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016482:	b102      	cbz	r2, 8016486 <rcl_wait_set_add_service+0x22>
 8016484:	6015      	str	r5, [r2, #0]
 8016486:	4608      	mov	r0, r1
 8016488:	f7fe fed4 	bl	8015234 <rcl_service_get_rmw_handle>
 801648c:	b150      	cbz	r0, 80164a4 <rcl_wait_set_add_service+0x40>
 801648e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016490:	6842      	ldr	r2, [r0, #4]
 8016492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016494:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016498:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801649a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801649c:	3301      	adds	r3, #1
 801649e:	2000      	movs	r0, #0
 80164a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80164a2:	bd70      	pop	{r4, r5, r6, pc}
 80164a4:	2001      	movs	r0, #1
 80164a6:	bd70      	pop	{r4, r5, r6, pc}
 80164a8:	f240 3086 	movw	r0, #902	@ 0x386
 80164ac:	bd70      	pop	{r4, r5, r6, pc}
 80164ae:	200b      	movs	r0, #11
 80164b0:	4770      	bx	lr
 80164b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80164b6:	bd70      	pop	{r4, r5, r6, pc}
 80164b8:	200b      	movs	r0, #11
 80164ba:	bd70      	pop	{r4, r5, r6, pc}
 80164bc:	0000      	movs	r0, r0
	...

080164c0 <rcl_wait>:
 80164c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c4:	ed2d 8b02 	vpush	{d8}
 80164c8:	b08d      	sub	sp, #52	@ 0x34
 80164ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80164ce:	2800      	cmp	r0, #0
 80164d0:	f000 8143 	beq.w	801675a <rcl_wait+0x29a>
 80164d4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80164d6:	4605      	mov	r5, r0
 80164d8:	2e00      	cmp	r6, #0
 80164da:	f000 8112 	beq.w	8016702 <rcl_wait+0x242>
 80164de:	6843      	ldr	r3, [r0, #4]
 80164e0:	b983      	cbnz	r3, 8016504 <rcl_wait+0x44>
 80164e2:	68eb      	ldr	r3, [r5, #12]
 80164e4:	b973      	cbnz	r3, 8016504 <rcl_wait+0x44>
 80164e6:	696b      	ldr	r3, [r5, #20]
 80164e8:	b963      	cbnz	r3, 8016504 <rcl_wait+0x44>
 80164ea:	69eb      	ldr	r3, [r5, #28]
 80164ec:	b953      	cbnz	r3, 8016504 <rcl_wait+0x44>
 80164ee:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80164f0:	b943      	cbnz	r3, 8016504 <rcl_wait+0x44>
 80164f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80164f4:	b933      	cbnz	r3, 8016504 <rcl_wait+0x44>
 80164f6:	f240 3085 	movw	r0, #901	@ 0x385
 80164fa:	b00d      	add	sp, #52	@ 0x34
 80164fc:	ecbd 8b02 	vpop	{d8}
 8016500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016504:	9b04      	ldr	r3, [sp, #16]
 8016506:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016508:	2b01      	cmp	r3, #1
 801650a:	9b05      	ldr	r3, [sp, #20]
 801650c:	f173 0300 	sbcs.w	r3, r3, #0
 8016510:	f2c0 80f0 	blt.w	80166f4 <rcl_wait+0x234>
 8016514:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016518:	4643      	mov	r3, r8
 801651a:	2a00      	cmp	r2, #0
 801651c:	f000 8133 	beq.w	8016786 <rcl_wait+0x2c6>
 8016520:	2400      	movs	r4, #0
 8016522:	4613      	mov	r3, r2
 8016524:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016798 <rcl_wait+0x2d8>
 8016528:	46a2      	mov	sl, r4
 801652a:	46a3      	mov	fp, r4
 801652c:	f240 3921 	movw	r9, #801	@ 0x321
 8016530:	4632      	mov	r2, r6
 8016532:	e014      	b.n	801655e <rcl_wait+0x9e>
 8016534:	2800      	cmp	r0, #0
 8016536:	d1e0      	bne.n	80164fa <rcl_wait+0x3a>
 8016538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801653c:	4542      	cmp	r2, r8
 801653e:	eb73 0107 	sbcs.w	r1, r3, r7
 8016542:	da03      	bge.n	801654c <rcl_wait+0x8c>
 8016544:	4690      	mov	r8, r2
 8016546:	461f      	mov	r7, r3
 8016548:	f04f 0b01 	mov.w	fp, #1
 801654c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801654e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016550:	3401      	adds	r4, #1
 8016552:	f14a 0a00 	adc.w	sl, sl, #0
 8016556:	429c      	cmp	r4, r3
 8016558:	f17a 0100 	sbcs.w	r1, sl, #0
 801655c:	d228      	bcs.n	80165b0 <rcl_wait+0xf0>
 801655e:	6928      	ldr	r0, [r5, #16]
 8016560:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016564:	a908      	add	r1, sp, #32
 8016566:	00a6      	lsls	r6, r4, #2
 8016568:	2800      	cmp	r0, #0
 801656a:	d0f1      	beq.n	8016550 <rcl_wait+0x90>
 801656c:	68eb      	ldr	r3, [r5, #12]
 801656e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016572:	4423      	add	r3, r4
 8016574:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016578:	f1be 0f00 	cmp.w	lr, #0
 801657c:	d006      	beq.n	801658c <rcl_wait+0xcc>
 801657e:	6913      	ldr	r3, [r2, #16]
 8016580:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016584:	3301      	adds	r3, #1
 8016586:	6113      	str	r3, [r2, #16]
 8016588:	692b      	ldr	r3, [r5, #16]
 801658a:	5998      	ldr	r0, [r3, r6]
 801658c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016590:	f7ff fa94 	bl	8015abc <rcl_timer_get_time_until_next_call>
 8016594:	4548      	cmp	r0, r9
 8016596:	d1cd      	bne.n	8016534 <rcl_wait+0x74>
 8016598:	692b      	ldr	r3, [r5, #16]
 801659a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801659c:	2100      	movs	r1, #0
 801659e:	5199      	str	r1, [r3, r6]
 80165a0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80165a2:	3401      	adds	r4, #1
 80165a4:	f14a 0a00 	adc.w	sl, sl, #0
 80165a8:	429c      	cmp	r4, r3
 80165aa:	f17a 0100 	sbcs.w	r1, sl, #0
 80165ae:	d3d6      	bcc.n	801655e <rcl_wait+0x9e>
 80165b0:	4616      	mov	r6, r2
 80165b2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80165b6:	4313      	orrs	r3, r2
 80165b8:	46d9      	mov	r9, fp
 80165ba:	f040 80a9 	bne.w	8016710 <rcl_wait+0x250>
 80165be:	2300      	movs	r3, #0
 80165c0:	2200      	movs	r2, #0
 80165c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80165c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80165ca:	ab08      	add	r3, sp, #32
 80165cc:	9302      	str	r3, [sp, #8]
 80165ce:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80165d0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80165d4:	e9cd 3200 	strd	r3, r2, [sp]
 80165d8:	f106 0110 	add.w	r1, r6, #16
 80165dc:	f106 031c 	add.w	r3, r6, #28
 80165e0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80165e4:	1d30      	adds	r0, r6, #4
 80165e6:	f001 fefd 	bl	80183e4 <rmw_wait>
 80165ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80165ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80165ee:	4680      	mov	r8, r0
 80165f0:	b1ca      	cbz	r2, 8016626 <rcl_wait+0x166>
 80165f2:	2400      	movs	r4, #0
 80165f4:	4627      	mov	r7, r4
 80165f6:	692a      	ldr	r2, [r5, #16]
 80165f8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80165fc:	f10d 011f 	add.w	r1, sp, #31
 8016600:	00a6      	lsls	r6, r4, #2
 8016602:	b160      	cbz	r0, 801661e <rcl_wait+0x15e>
 8016604:	f88d 701f 	strb.w	r7, [sp, #31]
 8016608:	f7ff fa1e 	bl	8015a48 <rcl_timer_is_ready>
 801660c:	2800      	cmp	r0, #0
 801660e:	f47f af74 	bne.w	80164fa <rcl_wait+0x3a>
 8016612:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016616:	b90b      	cbnz	r3, 801661c <rcl_wait+0x15c>
 8016618:	692a      	ldr	r2, [r5, #16]
 801661a:	5193      	str	r3, [r2, r6]
 801661c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801661e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016620:	3401      	adds	r4, #1
 8016622:	42a2      	cmp	r2, r4
 8016624:	d8e7      	bhi.n	80165f6 <rcl_wait+0x136>
 8016626:	f038 0002 	bics.w	r0, r8, #2
 801662a:	f040 8090 	bne.w	801674e <rcl_wait+0x28e>
 801662e:	686e      	ldr	r6, [r5, #4]
 8016630:	4602      	mov	r2, r0
 8016632:	b91e      	cbnz	r6, 801663c <rcl_wait+0x17c>
 8016634:	e00d      	b.n	8016652 <rcl_wait+0x192>
 8016636:	3201      	adds	r2, #1
 8016638:	42b2      	cmp	r2, r6
 801663a:	d00a      	beq.n	8016652 <rcl_wait+0x192>
 801663c:	6899      	ldr	r1, [r3, #8]
 801663e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016642:	2900      	cmp	r1, #0
 8016644:	d1f7      	bne.n	8016636 <rcl_wait+0x176>
 8016646:	682c      	ldr	r4, [r5, #0]
 8016648:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801664c:	3201      	adds	r2, #1
 801664e:	42b2      	cmp	r2, r6
 8016650:	d1f4      	bne.n	801663c <rcl_wait+0x17c>
 8016652:	68ee      	ldr	r6, [r5, #12]
 8016654:	2200      	movs	r2, #0
 8016656:	b91e      	cbnz	r6, 8016660 <rcl_wait+0x1a0>
 8016658:	e00d      	b.n	8016676 <rcl_wait+0x1b6>
 801665a:	3201      	adds	r2, #1
 801665c:	42b2      	cmp	r2, r6
 801665e:	d00a      	beq.n	8016676 <rcl_wait+0x1b6>
 8016660:	6959      	ldr	r1, [r3, #20]
 8016662:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016666:	2900      	cmp	r1, #0
 8016668:	d1f7      	bne.n	801665a <rcl_wait+0x19a>
 801666a:	68ac      	ldr	r4, [r5, #8]
 801666c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016670:	3201      	adds	r2, #1
 8016672:	42b2      	cmp	r2, r6
 8016674:	d1f4      	bne.n	8016660 <rcl_wait+0x1a0>
 8016676:	69ee      	ldr	r6, [r5, #28]
 8016678:	2200      	movs	r2, #0
 801667a:	b91e      	cbnz	r6, 8016684 <rcl_wait+0x1c4>
 801667c:	e00d      	b.n	801669a <rcl_wait+0x1da>
 801667e:	3201      	adds	r2, #1
 8016680:	42b2      	cmp	r2, r6
 8016682:	d00a      	beq.n	801669a <rcl_wait+0x1da>
 8016684:	6a19      	ldr	r1, [r3, #32]
 8016686:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801668a:	2900      	cmp	r1, #0
 801668c:	d1f7      	bne.n	801667e <rcl_wait+0x1be>
 801668e:	69ac      	ldr	r4, [r5, #24]
 8016690:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016694:	3201      	adds	r2, #1
 8016696:	42b2      	cmp	r2, r6
 8016698:	d1f4      	bne.n	8016684 <rcl_wait+0x1c4>
 801669a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801669c:	2200      	movs	r2, #0
 801669e:	b91e      	cbnz	r6, 80166a8 <rcl_wait+0x1e8>
 80166a0:	e00d      	b.n	80166be <rcl_wait+0x1fe>
 80166a2:	3201      	adds	r2, #1
 80166a4:	4296      	cmp	r6, r2
 80166a6:	d00a      	beq.n	80166be <rcl_wait+0x1fe>
 80166a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80166aa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166ae:	2900      	cmp	r1, #0
 80166b0:	d1f7      	bne.n	80166a2 <rcl_wait+0x1e2>
 80166b2:	6a2c      	ldr	r4, [r5, #32]
 80166b4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80166b8:	3201      	adds	r2, #1
 80166ba:	4296      	cmp	r6, r2
 80166bc:	d1f4      	bne.n	80166a8 <rcl_wait+0x1e8>
 80166be:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80166c0:	2200      	movs	r2, #0
 80166c2:	b91e      	cbnz	r6, 80166cc <rcl_wait+0x20c>
 80166c4:	e00d      	b.n	80166e2 <rcl_wait+0x222>
 80166c6:	3201      	adds	r2, #1
 80166c8:	42b2      	cmp	r2, r6
 80166ca:	d00a      	beq.n	80166e2 <rcl_wait+0x222>
 80166cc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80166ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166d2:	2900      	cmp	r1, #0
 80166d4:	d1f7      	bne.n	80166c6 <rcl_wait+0x206>
 80166d6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80166d8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80166dc:	3201      	adds	r2, #1
 80166de:	42b2      	cmp	r2, r6
 80166e0:	d1f4      	bne.n	80166cc <rcl_wait+0x20c>
 80166e2:	f1b8 0f02 	cmp.w	r8, #2
 80166e6:	f47f af08 	bne.w	80164fa <rcl_wait+0x3a>
 80166ea:	464b      	mov	r3, r9
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	bf08      	it	eq
 80166f0:	2002      	moveq	r0, #2
 80166f2:	e702      	b.n	80164fa <rcl_wait+0x3a>
 80166f4:	2a00      	cmp	r2, #0
 80166f6:	d03a      	beq.n	801676e <rcl_wait+0x2ae>
 80166f8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80166fc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016700:	e70e      	b.n	8016520 <rcl_wait+0x60>
 8016702:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016706:	b00d      	add	sp, #52	@ 0x34
 8016708:	ecbd 8b02 	vpop	{d8}
 801670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016710:	9b04      	ldr	r3, [sp, #16]
 8016712:	2b01      	cmp	r3, #1
 8016714:	9b05      	ldr	r3, [sp, #20]
 8016716:	f173 0300 	sbcs.w	r3, r3, #0
 801671a:	db24      	blt.n	8016766 <rcl_wait+0x2a6>
 801671c:	2f00      	cmp	r7, #0
 801671e:	bfbc      	itt	lt
 8016720:	f04f 0800 	movlt.w	r8, #0
 8016724:	4647      	movlt	r7, r8
 8016726:	a31e      	add	r3, pc, #120	@ (adr r3, 80167a0 <rcl_wait+0x2e0>)
 8016728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801672c:	4640      	mov	r0, r8
 801672e:	4639      	mov	r1, r7
 8016730:	f7ea fa9a 	bl	8000c68 <__aeabi_ldivmod>
 8016734:	a31a      	add	r3, pc, #104	@ (adr r3, 80167a0 <rcl_wait+0x2e0>)
 8016736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801673a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801673e:	4640      	mov	r0, r8
 8016740:	4639      	mov	r1, r7
 8016742:	f7ea fa91 	bl	8000c68 <__aeabi_ldivmod>
 8016746:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801674a:	ab08      	add	r3, sp, #32
 801674c:	e73e      	b.n	80165cc <rcl_wait+0x10c>
 801674e:	2001      	movs	r0, #1
 8016750:	b00d      	add	sp, #52	@ 0x34
 8016752:	ecbd 8b02 	vpop	{d8}
 8016756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801675a:	200b      	movs	r0, #11
 801675c:	b00d      	add	sp, #52	@ 0x34
 801675e:	ecbd 8b02 	vpop	{d8}
 8016762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016766:	465b      	mov	r3, fp
 8016768:	2b00      	cmp	r3, #0
 801676a:	d1d7      	bne.n	801671c <rcl_wait+0x25c>
 801676c:	e72e      	b.n	80165cc <rcl_wait+0x10c>
 801676e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016772:	430b      	orrs	r3, r1
 8016774:	bf08      	it	eq
 8016776:	4691      	moveq	r9, r2
 8016778:	f43f af21 	beq.w	80165be <rcl_wait+0xfe>
 801677c:	9b04      	ldr	r3, [sp, #16]
 801677e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016782:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016786:	2b01      	cmp	r3, #1
 8016788:	9b05      	ldr	r3, [sp, #20]
 801678a:	f173 0300 	sbcs.w	r3, r3, #0
 801678e:	f04f 0300 	mov.w	r3, #0
 8016792:	4699      	mov	r9, r3
 8016794:	dac2      	bge.n	801671c <rcl_wait+0x25c>
 8016796:	e719      	b.n	80165cc <rcl_wait+0x10c>
 8016798:	ffffffff 	.word	0xffffffff
 801679c:	7fffffff 	.word	0x7fffffff
 80167a0:	3b9aca00 	.word	0x3b9aca00
 80167a4:	00000000 	.word	0x00000000

080167a8 <rcl_action_take_goal_response>:
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d039      	beq.n	8016820 <rcl_action_take_goal_response+0x78>
 80167ac:	b570      	push	{r4, r5, r6, lr}
 80167ae:	4604      	mov	r4, r0
 80167b0:	6800      	ldr	r0, [r0, #0]
 80167b2:	b380      	cbz	r0, 8016816 <rcl_action_take_goal_response+0x6e>
 80167b4:	460d      	mov	r5, r1
 80167b6:	4616      	mov	r6, r2
 80167b8:	f7fd ff8e 	bl	80146d8 <rcl_client_is_valid>
 80167bc:	b330      	cbz	r0, 801680c <rcl_action_take_goal_response+0x64>
 80167be:	6820      	ldr	r0, [r4, #0]
 80167c0:	3004      	adds	r0, #4
 80167c2:	f7fd ff89 	bl	80146d8 <rcl_client_is_valid>
 80167c6:	b308      	cbz	r0, 801680c <rcl_action_take_goal_response+0x64>
 80167c8:	6820      	ldr	r0, [r4, #0]
 80167ca:	3008      	adds	r0, #8
 80167cc:	f7fd ff84 	bl	80146d8 <rcl_client_is_valid>
 80167d0:	b1e0      	cbz	r0, 801680c <rcl_action_take_goal_response+0x64>
 80167d2:	6820      	ldr	r0, [r4, #0]
 80167d4:	300c      	adds	r0, #12
 80167d6:	f7fe fdf3 	bl	80153c0 <rcl_subscription_is_valid>
 80167da:	b1b8      	cbz	r0, 801680c <rcl_action_take_goal_response+0x64>
 80167dc:	6820      	ldr	r0, [r4, #0]
 80167de:	3010      	adds	r0, #16
 80167e0:	f7fe fdee 	bl	80153c0 <rcl_subscription_is_valid>
 80167e4:	b190      	cbz	r0, 801680c <rcl_action_take_goal_response+0x64>
 80167e6:	b1cd      	cbz	r5, 801681c <rcl_action_take_goal_response+0x74>
 80167e8:	b1c6      	cbz	r6, 801681c <rcl_action_take_goal_response+0x74>
 80167ea:	6820      	ldr	r0, [r4, #0]
 80167ec:	4632      	mov	r2, r6
 80167ee:	4629      	mov	r1, r5
 80167f0:	f7fd ff2a 	bl	8014648 <rcl_take_response>
 80167f4:	b148      	cbz	r0, 801680a <rcl_action_take_goal_response+0x62>
 80167f6:	280a      	cmp	r0, #10
 80167f8:	d007      	beq.n	801680a <rcl_action_take_goal_response+0x62>
 80167fa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80167fe:	f640 0337 	movw	r3, #2103	@ 0x837
 8016802:	4290      	cmp	r0, r2
 8016804:	bf0c      	ite	eq
 8016806:	4618      	moveq	r0, r3
 8016808:	2001      	movne	r0, #1
 801680a:	bd70      	pop	{r4, r5, r6, pc}
 801680c:	f7f7 ff74 	bl	800e6f8 <rcutils_reset_error>
 8016810:	f640 0036 	movw	r0, #2102	@ 0x836
 8016814:	bd70      	pop	{r4, r5, r6, pc}
 8016816:	f640 0036 	movw	r0, #2102	@ 0x836
 801681a:	bd70      	pop	{r4, r5, r6, pc}
 801681c:	200b      	movs	r0, #11
 801681e:	bd70      	pop	{r4, r5, r6, pc}
 8016820:	f640 0036 	movw	r0, #2102	@ 0x836
 8016824:	4770      	bx	lr
 8016826:	bf00      	nop

08016828 <rcl_action_send_result_request>:
 8016828:	b390      	cbz	r0, 8016890 <rcl_action_send_result_request+0x68>
 801682a:	b570      	push	{r4, r5, r6, lr}
 801682c:	4604      	mov	r4, r0
 801682e:	6800      	ldr	r0, [r0, #0]
 8016830:	b348      	cbz	r0, 8016886 <rcl_action_send_result_request+0x5e>
 8016832:	460d      	mov	r5, r1
 8016834:	4616      	mov	r6, r2
 8016836:	f7fd ff4f 	bl	80146d8 <rcl_client_is_valid>
 801683a:	b1f8      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 801683c:	6820      	ldr	r0, [r4, #0]
 801683e:	3004      	adds	r0, #4
 8016840:	f7fd ff4a 	bl	80146d8 <rcl_client_is_valid>
 8016844:	b1d0      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 8016846:	6820      	ldr	r0, [r4, #0]
 8016848:	3008      	adds	r0, #8
 801684a:	f7fd ff45 	bl	80146d8 <rcl_client_is_valid>
 801684e:	b1a8      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 8016850:	6820      	ldr	r0, [r4, #0]
 8016852:	300c      	adds	r0, #12
 8016854:	f7fe fdb4 	bl	80153c0 <rcl_subscription_is_valid>
 8016858:	b180      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 801685a:	6820      	ldr	r0, [r4, #0]
 801685c:	3010      	adds	r0, #16
 801685e:	f7fe fdaf 	bl	80153c0 <rcl_subscription_is_valid>
 8016862:	b158      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 8016864:	b195      	cbz	r5, 801688c <rcl_action_send_result_request+0x64>
 8016866:	b18e      	cbz	r6, 801688c <rcl_action_send_result_request+0x64>
 8016868:	6820      	ldr	r0, [r4, #0]
 801686a:	4632      	mov	r2, r6
 801686c:	4629      	mov	r1, r5
 801686e:	3008      	adds	r0, #8
 8016870:	f7fd feb4 	bl	80145dc <rcl_send_request>
 8016874:	3800      	subs	r0, #0
 8016876:	bf18      	it	ne
 8016878:	2001      	movne	r0, #1
 801687a:	bd70      	pop	{r4, r5, r6, pc}
 801687c:	f7f7 ff3c 	bl	800e6f8 <rcutils_reset_error>
 8016880:	f640 0036 	movw	r0, #2102	@ 0x836
 8016884:	bd70      	pop	{r4, r5, r6, pc}
 8016886:	f640 0036 	movw	r0, #2102	@ 0x836
 801688a:	bd70      	pop	{r4, r5, r6, pc}
 801688c:	200b      	movs	r0, #11
 801688e:	bd70      	pop	{r4, r5, r6, pc}
 8016890:	f640 0036 	movw	r0, #2102	@ 0x836
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop

08016898 <rcl_action_take_result_response>:
 8016898:	2800      	cmp	r0, #0
 801689a:	d03a      	beq.n	8016912 <rcl_action_take_result_response+0x7a>
 801689c:	b570      	push	{r4, r5, r6, lr}
 801689e:	4604      	mov	r4, r0
 80168a0:	6800      	ldr	r0, [r0, #0]
 80168a2:	b388      	cbz	r0, 8016908 <rcl_action_take_result_response+0x70>
 80168a4:	460d      	mov	r5, r1
 80168a6:	4616      	mov	r6, r2
 80168a8:	f7fd ff16 	bl	80146d8 <rcl_client_is_valid>
 80168ac:	b338      	cbz	r0, 80168fe <rcl_action_take_result_response+0x66>
 80168ae:	6820      	ldr	r0, [r4, #0]
 80168b0:	3004      	adds	r0, #4
 80168b2:	f7fd ff11 	bl	80146d8 <rcl_client_is_valid>
 80168b6:	b310      	cbz	r0, 80168fe <rcl_action_take_result_response+0x66>
 80168b8:	6820      	ldr	r0, [r4, #0]
 80168ba:	3008      	adds	r0, #8
 80168bc:	f7fd ff0c 	bl	80146d8 <rcl_client_is_valid>
 80168c0:	b1e8      	cbz	r0, 80168fe <rcl_action_take_result_response+0x66>
 80168c2:	6820      	ldr	r0, [r4, #0]
 80168c4:	300c      	adds	r0, #12
 80168c6:	f7fe fd7b 	bl	80153c0 <rcl_subscription_is_valid>
 80168ca:	b1c0      	cbz	r0, 80168fe <rcl_action_take_result_response+0x66>
 80168cc:	6820      	ldr	r0, [r4, #0]
 80168ce:	3010      	adds	r0, #16
 80168d0:	f7fe fd76 	bl	80153c0 <rcl_subscription_is_valid>
 80168d4:	b198      	cbz	r0, 80168fe <rcl_action_take_result_response+0x66>
 80168d6:	b1d5      	cbz	r5, 801690e <rcl_action_take_result_response+0x76>
 80168d8:	b1ce      	cbz	r6, 801690e <rcl_action_take_result_response+0x76>
 80168da:	6820      	ldr	r0, [r4, #0]
 80168dc:	4632      	mov	r2, r6
 80168de:	4629      	mov	r1, r5
 80168e0:	3008      	adds	r0, #8
 80168e2:	f7fd feb1 	bl	8014648 <rcl_take_response>
 80168e6:	b148      	cbz	r0, 80168fc <rcl_action_take_result_response+0x64>
 80168e8:	280a      	cmp	r0, #10
 80168ea:	d007      	beq.n	80168fc <rcl_action_take_result_response+0x64>
 80168ec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80168f0:	f640 0337 	movw	r3, #2103	@ 0x837
 80168f4:	4290      	cmp	r0, r2
 80168f6:	bf0c      	ite	eq
 80168f8:	4618      	moveq	r0, r3
 80168fa:	2001      	movne	r0, #1
 80168fc:	bd70      	pop	{r4, r5, r6, pc}
 80168fe:	f7f7 fefb 	bl	800e6f8 <rcutils_reset_error>
 8016902:	f640 0036 	movw	r0, #2102	@ 0x836
 8016906:	bd70      	pop	{r4, r5, r6, pc}
 8016908:	f640 0036 	movw	r0, #2102	@ 0x836
 801690c:	bd70      	pop	{r4, r5, r6, pc}
 801690e:	200b      	movs	r0, #11
 8016910:	bd70      	pop	{r4, r5, r6, pc}
 8016912:	f640 0036 	movw	r0, #2102	@ 0x836
 8016916:	4770      	bx	lr

08016918 <rcl_action_take_cancel_response>:
 8016918:	2800      	cmp	r0, #0
 801691a:	d03a      	beq.n	8016992 <rcl_action_take_cancel_response+0x7a>
 801691c:	b570      	push	{r4, r5, r6, lr}
 801691e:	4604      	mov	r4, r0
 8016920:	6800      	ldr	r0, [r0, #0]
 8016922:	b388      	cbz	r0, 8016988 <rcl_action_take_cancel_response+0x70>
 8016924:	460d      	mov	r5, r1
 8016926:	4616      	mov	r6, r2
 8016928:	f7fd fed6 	bl	80146d8 <rcl_client_is_valid>
 801692c:	b338      	cbz	r0, 801697e <rcl_action_take_cancel_response+0x66>
 801692e:	6820      	ldr	r0, [r4, #0]
 8016930:	3004      	adds	r0, #4
 8016932:	f7fd fed1 	bl	80146d8 <rcl_client_is_valid>
 8016936:	b310      	cbz	r0, 801697e <rcl_action_take_cancel_response+0x66>
 8016938:	6820      	ldr	r0, [r4, #0]
 801693a:	3008      	adds	r0, #8
 801693c:	f7fd fecc 	bl	80146d8 <rcl_client_is_valid>
 8016940:	b1e8      	cbz	r0, 801697e <rcl_action_take_cancel_response+0x66>
 8016942:	6820      	ldr	r0, [r4, #0]
 8016944:	300c      	adds	r0, #12
 8016946:	f7fe fd3b 	bl	80153c0 <rcl_subscription_is_valid>
 801694a:	b1c0      	cbz	r0, 801697e <rcl_action_take_cancel_response+0x66>
 801694c:	6820      	ldr	r0, [r4, #0]
 801694e:	3010      	adds	r0, #16
 8016950:	f7fe fd36 	bl	80153c0 <rcl_subscription_is_valid>
 8016954:	b198      	cbz	r0, 801697e <rcl_action_take_cancel_response+0x66>
 8016956:	b1d5      	cbz	r5, 801698e <rcl_action_take_cancel_response+0x76>
 8016958:	b1ce      	cbz	r6, 801698e <rcl_action_take_cancel_response+0x76>
 801695a:	6820      	ldr	r0, [r4, #0]
 801695c:	4632      	mov	r2, r6
 801695e:	4629      	mov	r1, r5
 8016960:	3004      	adds	r0, #4
 8016962:	f7fd fe71 	bl	8014648 <rcl_take_response>
 8016966:	b148      	cbz	r0, 801697c <rcl_action_take_cancel_response+0x64>
 8016968:	280a      	cmp	r0, #10
 801696a:	d007      	beq.n	801697c <rcl_action_take_cancel_response+0x64>
 801696c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016970:	f640 0337 	movw	r3, #2103	@ 0x837
 8016974:	4290      	cmp	r0, r2
 8016976:	bf0c      	ite	eq
 8016978:	4618      	moveq	r0, r3
 801697a:	2001      	movne	r0, #1
 801697c:	bd70      	pop	{r4, r5, r6, pc}
 801697e:	f7f7 febb 	bl	800e6f8 <rcutils_reset_error>
 8016982:	f640 0036 	movw	r0, #2102	@ 0x836
 8016986:	bd70      	pop	{r4, r5, r6, pc}
 8016988:	f640 0036 	movw	r0, #2102	@ 0x836
 801698c:	bd70      	pop	{r4, r5, r6, pc}
 801698e:	200b      	movs	r0, #11
 8016990:	bd70      	pop	{r4, r5, r6, pc}
 8016992:	f640 0036 	movw	r0, #2102	@ 0x836
 8016996:	4770      	bx	lr

08016998 <rcl_action_take_feedback>:
 8016998:	2800      	cmp	r0, #0
 801699a:	d038      	beq.n	8016a0e <rcl_action_take_feedback+0x76>
 801699c:	b530      	push	{r4, r5, lr}
 801699e:	4604      	mov	r4, r0
 80169a0:	6800      	ldr	r0, [r0, #0]
 80169a2:	b091      	sub	sp, #68	@ 0x44
 80169a4:	b378      	cbz	r0, 8016a06 <rcl_action_take_feedback+0x6e>
 80169a6:	460d      	mov	r5, r1
 80169a8:	f7fd fe96 	bl	80146d8 <rcl_client_is_valid>
 80169ac:	b328      	cbz	r0, 80169fa <rcl_action_take_feedback+0x62>
 80169ae:	6820      	ldr	r0, [r4, #0]
 80169b0:	3004      	adds	r0, #4
 80169b2:	f7fd fe91 	bl	80146d8 <rcl_client_is_valid>
 80169b6:	b300      	cbz	r0, 80169fa <rcl_action_take_feedback+0x62>
 80169b8:	6820      	ldr	r0, [r4, #0]
 80169ba:	3008      	adds	r0, #8
 80169bc:	f7fd fe8c 	bl	80146d8 <rcl_client_is_valid>
 80169c0:	b1d8      	cbz	r0, 80169fa <rcl_action_take_feedback+0x62>
 80169c2:	6820      	ldr	r0, [r4, #0]
 80169c4:	300c      	adds	r0, #12
 80169c6:	f7fe fcfb 	bl	80153c0 <rcl_subscription_is_valid>
 80169ca:	b1b0      	cbz	r0, 80169fa <rcl_action_take_feedback+0x62>
 80169cc:	6820      	ldr	r0, [r4, #0]
 80169ce:	3010      	adds	r0, #16
 80169d0:	f7fe fcf6 	bl	80153c0 <rcl_subscription_is_valid>
 80169d4:	b188      	cbz	r0, 80169fa <rcl_action_take_feedback+0x62>
 80169d6:	b1ed      	cbz	r5, 8016a14 <rcl_action_take_feedback+0x7c>
 80169d8:	6820      	ldr	r0, [r4, #0]
 80169da:	2300      	movs	r3, #0
 80169dc:	466a      	mov	r2, sp
 80169de:	4629      	mov	r1, r5
 80169e0:	300c      	adds	r0, #12
 80169e2:	f7fe fc8f 	bl	8015304 <rcl_take>
 80169e6:	b160      	cbz	r0, 8016a02 <rcl_action_take_feedback+0x6a>
 80169e8:	f240 1391 	movw	r3, #401	@ 0x191
 80169ec:	4298      	cmp	r0, r3
 80169ee:	d014      	beq.n	8016a1a <rcl_action_take_feedback+0x82>
 80169f0:	280a      	cmp	r0, #10
 80169f2:	bf18      	it	ne
 80169f4:	2001      	movne	r0, #1
 80169f6:	b011      	add	sp, #68	@ 0x44
 80169f8:	bd30      	pop	{r4, r5, pc}
 80169fa:	f7f7 fe7d 	bl	800e6f8 <rcutils_reset_error>
 80169fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a02:	b011      	add	sp, #68	@ 0x44
 8016a04:	bd30      	pop	{r4, r5, pc}
 8016a06:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a0a:	b011      	add	sp, #68	@ 0x44
 8016a0c:	bd30      	pop	{r4, r5, pc}
 8016a0e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a12:	4770      	bx	lr
 8016a14:	200b      	movs	r0, #11
 8016a16:	b011      	add	sp, #68	@ 0x44
 8016a18:	bd30      	pop	{r4, r5, pc}
 8016a1a:	f640 0037 	movw	r0, #2103	@ 0x837
 8016a1e:	e7f0      	b.n	8016a02 <rcl_action_take_feedback+0x6a>

08016a20 <rcl_action_wait_set_add_action_client>:
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d048      	beq.n	8016ab6 <rcl_action_wait_set_add_action_client+0x96>
 8016a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a26:	460c      	mov	r4, r1
 8016a28:	2900      	cmp	r1, #0
 8016a2a:	d03c      	beq.n	8016aa6 <rcl_action_wait_set_add_action_client+0x86>
 8016a2c:	4605      	mov	r5, r0
 8016a2e:	6808      	ldr	r0, [r1, #0]
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d038      	beq.n	8016aa6 <rcl_action_wait_set_add_action_client+0x86>
 8016a34:	4617      	mov	r7, r2
 8016a36:	461e      	mov	r6, r3
 8016a38:	f7fd fe4e 	bl	80146d8 <rcl_client_is_valid>
 8016a3c:	b3b0      	cbz	r0, 8016aac <rcl_action_wait_set_add_action_client+0x8c>
 8016a3e:	6820      	ldr	r0, [r4, #0]
 8016a40:	3004      	adds	r0, #4
 8016a42:	f7fd fe49 	bl	80146d8 <rcl_client_is_valid>
 8016a46:	b388      	cbz	r0, 8016aac <rcl_action_wait_set_add_action_client+0x8c>
 8016a48:	6820      	ldr	r0, [r4, #0]
 8016a4a:	3008      	adds	r0, #8
 8016a4c:	f7fd fe44 	bl	80146d8 <rcl_client_is_valid>
 8016a50:	b360      	cbz	r0, 8016aac <rcl_action_wait_set_add_action_client+0x8c>
 8016a52:	6820      	ldr	r0, [r4, #0]
 8016a54:	300c      	adds	r0, #12
 8016a56:	f7fe fcb3 	bl	80153c0 <rcl_subscription_is_valid>
 8016a5a:	b338      	cbz	r0, 8016aac <rcl_action_wait_set_add_action_client+0x8c>
 8016a5c:	6820      	ldr	r0, [r4, #0]
 8016a5e:	3010      	adds	r0, #16
 8016a60:	f7fe fcae 	bl	80153c0 <rcl_subscription_is_valid>
 8016a64:	b310      	cbz	r0, 8016aac <rcl_action_wait_set_add_action_client+0x8c>
 8016a66:	6821      	ldr	r1, [r4, #0]
 8016a68:	4628      	mov	r0, r5
 8016a6a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016a6e:	f7ff fccd 	bl	801640c <rcl_wait_set_add_client>
 8016a72:	b9b8      	cbnz	r0, 8016aa4 <rcl_action_wait_set_add_action_client+0x84>
 8016a74:	6821      	ldr	r1, [r4, #0]
 8016a76:	4628      	mov	r0, r5
 8016a78:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016a7c:	3104      	adds	r1, #4
 8016a7e:	f7ff fcc5 	bl	801640c <rcl_wait_set_add_client>
 8016a82:	b978      	cbnz	r0, 8016aa4 <rcl_action_wait_set_add_action_client+0x84>
 8016a84:	6821      	ldr	r1, [r4, #0]
 8016a86:	4628      	mov	r0, r5
 8016a88:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016a8c:	3108      	adds	r1, #8
 8016a8e:	f7ff fcbd 	bl	801640c <rcl_wait_set_add_client>
 8016a92:	b938      	cbnz	r0, 8016aa4 <rcl_action_wait_set_add_action_client+0x84>
 8016a94:	6821      	ldr	r1, [r4, #0]
 8016a96:	4628      	mov	r0, r5
 8016a98:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016a9c:	310c      	adds	r1, #12
 8016a9e:	f7ff f96d 	bl	8015d7c <rcl_wait_set_add_subscription>
 8016aa2:	b158      	cbz	r0, 8016abc <rcl_action_wait_set_add_action_client+0x9c>
 8016aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aa6:	f640 0036 	movw	r0, #2102	@ 0x836
 8016aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aac:	f7f7 fe24 	bl	800e6f8 <rcutils_reset_error>
 8016ab0:	f640 0036 	movw	r0, #2102	@ 0x836
 8016ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ab6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016aba:	4770      	bx	lr
 8016abc:	6821      	ldr	r1, [r4, #0]
 8016abe:	4628      	mov	r0, r5
 8016ac0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016ac4:	3110      	adds	r1, #16
 8016ac6:	f7ff f959 	bl	8015d7c <rcl_wait_set_add_subscription>
 8016aca:	2800      	cmp	r0, #0
 8016acc:	d1ea      	bne.n	8016aa4 <rcl_action_wait_set_add_action_client+0x84>
 8016ace:	b11f      	cbz	r7, 8016ad8 <rcl_action_wait_set_add_action_client+0xb8>
 8016ad0:	6823      	ldr	r3, [r4, #0]
 8016ad2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016ad6:	603b      	str	r3, [r7, #0]
 8016ad8:	2e00      	cmp	r6, #0
 8016ada:	d0e3      	beq.n	8016aa4 <rcl_action_wait_set_add_action_client+0x84>
 8016adc:	6823      	ldr	r3, [r4, #0]
 8016ade:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016ae2:	6033      	str	r3, [r6, #0]
 8016ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ae6:	bf00      	nop

08016ae8 <rcl_action_client_wait_set_get_entities_ready>:
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	f000 808d 	beq.w	8016c08 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8016aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af2:	460c      	mov	r4, r1
 8016af4:	2900      	cmp	r1, #0
 8016af6:	d077      	beq.n	8016be8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016af8:	4605      	mov	r5, r0
 8016afa:	6808      	ldr	r0, [r1, #0]
 8016afc:	2800      	cmp	r0, #0
 8016afe:	d073      	beq.n	8016be8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016b00:	4616      	mov	r6, r2
 8016b02:	461f      	mov	r7, r3
 8016b04:	f7fd fde8 	bl	80146d8 <rcl_client_is_valid>
 8016b08:	2800      	cmp	r0, #0
 8016b0a:	d071      	beq.n	8016bf0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b0c:	6820      	ldr	r0, [r4, #0]
 8016b0e:	3004      	adds	r0, #4
 8016b10:	f7fd fde2 	bl	80146d8 <rcl_client_is_valid>
 8016b14:	2800      	cmp	r0, #0
 8016b16:	d06b      	beq.n	8016bf0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b18:	6820      	ldr	r0, [r4, #0]
 8016b1a:	3008      	adds	r0, #8
 8016b1c:	f7fd fddc 	bl	80146d8 <rcl_client_is_valid>
 8016b20:	2800      	cmp	r0, #0
 8016b22:	d065      	beq.n	8016bf0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b24:	6820      	ldr	r0, [r4, #0]
 8016b26:	300c      	adds	r0, #12
 8016b28:	f7fe fc4a 	bl	80153c0 <rcl_subscription_is_valid>
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	d05f      	beq.n	8016bf0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b30:	6820      	ldr	r0, [r4, #0]
 8016b32:	3010      	adds	r0, #16
 8016b34:	f7fe fc44 	bl	80153c0 <rcl_subscription_is_valid>
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d059      	beq.n	8016bf0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b3c:	2e00      	cmp	r6, #0
 8016b3e:	d060      	beq.n	8016c02 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b40:	2f00      	cmp	r7, #0
 8016b42:	d05e      	beq.n	8016c02 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b44:	9b06      	ldr	r3, [sp, #24]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d05b      	beq.n	8016c02 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b4a:	9b07      	ldr	r3, [sp, #28]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d058      	beq.n	8016c02 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b50:	9b08      	ldr	r3, [sp, #32]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d055      	beq.n	8016c02 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b56:	6823      	ldr	r3, [r4, #0]
 8016b58:	686a      	ldr	r2, [r5, #4]
 8016b5a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016b5e:	428a      	cmp	r2, r1
 8016b60:	d94c      	bls.n	8016bfc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b62:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016b66:	4282      	cmp	r2, r0
 8016b68:	d948      	bls.n	8016bfc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b6a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016b6e:	69ea      	ldr	r2, [r5, #28]
 8016b70:	42a2      	cmp	r2, r4
 8016b72:	d943      	bls.n	8016bfc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b74:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016b78:	4562      	cmp	r2, ip
 8016b7a:	d93f      	bls.n	8016bfc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b7c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016b80:	4572      	cmp	r2, lr
 8016b82:	d93b      	bls.n	8016bfc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b84:	69aa      	ldr	r2, [r5, #24]
 8016b86:	682d      	ldr	r5, [r5, #0]
 8016b88:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016b8c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016b90:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016b94:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016b98:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016b9c:	f103 0c0c 	add.w	ip, r3, #12
 8016ba0:	eba5 050c 	sub.w	r5, r5, ip
 8016ba4:	fab5 f585 	clz	r5, r5
 8016ba8:	096d      	lsrs	r5, r5, #5
 8016baa:	7035      	strb	r5, [r6, #0]
 8016bac:	f103 0510 	add.w	r5, r3, #16
 8016bb0:	1b64      	subs	r4, r4, r5
 8016bb2:	fab4 f484 	clz	r4, r4
 8016bb6:	0964      	lsrs	r4, r4, #5
 8016bb8:	703c      	strb	r4, [r7, #0]
 8016bba:	eba3 0008 	sub.w	r0, r3, r8
 8016bbe:	1d1c      	adds	r4, r3, #4
 8016bc0:	3308      	adds	r3, #8
 8016bc2:	1ad3      	subs	r3, r2, r3
 8016bc4:	fab0 f080 	clz	r0, r0
 8016bc8:	9a06      	ldr	r2, [sp, #24]
 8016bca:	0940      	lsrs	r0, r0, #5
 8016bcc:	1b09      	subs	r1, r1, r4
 8016bce:	7010      	strb	r0, [r2, #0]
 8016bd0:	fab1 f181 	clz	r1, r1
 8016bd4:	9a07      	ldr	r2, [sp, #28]
 8016bd6:	0949      	lsrs	r1, r1, #5
 8016bd8:	7011      	strb	r1, [r2, #0]
 8016bda:	fab3 f383 	clz	r3, r3
 8016bde:	9a08      	ldr	r2, [sp, #32]
 8016be0:	095b      	lsrs	r3, r3, #5
 8016be2:	2000      	movs	r0, #0
 8016be4:	7013      	strb	r3, [r2, #0]
 8016be6:	e001      	b.n	8016bec <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016be8:	f640 0036 	movw	r0, #2102	@ 0x836
 8016bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bf0:	f7f7 fd82 	bl	800e6f8 <rcutils_reset_error>
 8016bf4:	f640 0036 	movw	r0, #2102	@ 0x836
 8016bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bfc:	2001      	movs	r0, #1
 8016bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c02:	200b      	movs	r0, #11
 8016c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c08:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c0c:	4770      	bx	lr
 8016c0e:	bf00      	nop

08016c10 <rcl_action_take_goal_request>:
 8016c10:	2800      	cmp	r0, #0
 8016c12:	d039      	beq.n	8016c88 <rcl_action_take_goal_request+0x78>
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	4604      	mov	r4, r0
 8016c18:	6800      	ldr	r0, [r0, #0]
 8016c1a:	b380      	cbz	r0, 8016c7e <rcl_action_take_goal_request+0x6e>
 8016c1c:	460d      	mov	r5, r1
 8016c1e:	4616      	mov	r6, r2
 8016c20:	f7fe fb66 	bl	80152f0 <rcl_service_is_valid>
 8016c24:	b330      	cbz	r0, 8016c74 <rcl_action_take_goal_request+0x64>
 8016c26:	6820      	ldr	r0, [r4, #0]
 8016c28:	3004      	adds	r0, #4
 8016c2a:	f7fe fb61 	bl	80152f0 <rcl_service_is_valid>
 8016c2e:	b308      	cbz	r0, 8016c74 <rcl_action_take_goal_request+0x64>
 8016c30:	6820      	ldr	r0, [r4, #0]
 8016c32:	3008      	adds	r0, #8
 8016c34:	f7fe fb5c 	bl	80152f0 <rcl_service_is_valid>
 8016c38:	b1e0      	cbz	r0, 8016c74 <rcl_action_take_goal_request+0x64>
 8016c3a:	6820      	ldr	r0, [r4, #0]
 8016c3c:	300c      	adds	r0, #12
 8016c3e:	f7f6 fd77 	bl	800d730 <rcl_publisher_is_valid>
 8016c42:	b1b8      	cbz	r0, 8016c74 <rcl_action_take_goal_request+0x64>
 8016c44:	6820      	ldr	r0, [r4, #0]
 8016c46:	3010      	adds	r0, #16
 8016c48:	f7f6 fd72 	bl	800d730 <rcl_publisher_is_valid>
 8016c4c:	b190      	cbz	r0, 8016c74 <rcl_action_take_goal_request+0x64>
 8016c4e:	b1cd      	cbz	r5, 8016c84 <rcl_action_take_goal_request+0x74>
 8016c50:	b1c6      	cbz	r6, 8016c84 <rcl_action_take_goal_request+0x74>
 8016c52:	6820      	ldr	r0, [r4, #0]
 8016c54:	4632      	mov	r2, r6
 8016c56:	4629      	mov	r1, r5
 8016c58:	f7fe faf2 	bl	8015240 <rcl_take_request>
 8016c5c:	b148      	cbz	r0, 8016c72 <rcl_action_take_goal_request+0x62>
 8016c5e:	280a      	cmp	r0, #10
 8016c60:	d007      	beq.n	8016c72 <rcl_action_take_goal_request+0x62>
 8016c62:	f240 2259 	movw	r2, #601	@ 0x259
 8016c66:	f640 0399 	movw	r3, #2201	@ 0x899
 8016c6a:	4290      	cmp	r0, r2
 8016c6c:	bf0c      	ite	eq
 8016c6e:	4618      	moveq	r0, r3
 8016c70:	2001      	movne	r0, #1
 8016c72:	bd70      	pop	{r4, r5, r6, pc}
 8016c74:	f7f7 fd40 	bl	800e6f8 <rcutils_reset_error>
 8016c78:	f640 0098 	movw	r0, #2200	@ 0x898
 8016c7c:	bd70      	pop	{r4, r5, r6, pc}
 8016c7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016c82:	bd70      	pop	{r4, r5, r6, pc}
 8016c84:	200b      	movs	r0, #11
 8016c86:	bd70      	pop	{r4, r5, r6, pc}
 8016c88:	f640 0098 	movw	r0, #2200	@ 0x898
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop

08016c90 <rcl_action_send_goal_response>:
 8016c90:	b390      	cbz	r0, 8016cf8 <rcl_action_send_goal_response+0x68>
 8016c92:	b570      	push	{r4, r5, r6, lr}
 8016c94:	4604      	mov	r4, r0
 8016c96:	6800      	ldr	r0, [r0, #0]
 8016c98:	b348      	cbz	r0, 8016cee <rcl_action_send_goal_response+0x5e>
 8016c9a:	460d      	mov	r5, r1
 8016c9c:	4616      	mov	r6, r2
 8016c9e:	f7fe fb27 	bl	80152f0 <rcl_service_is_valid>
 8016ca2:	b1f8      	cbz	r0, 8016ce4 <rcl_action_send_goal_response+0x54>
 8016ca4:	6820      	ldr	r0, [r4, #0]
 8016ca6:	3004      	adds	r0, #4
 8016ca8:	f7fe fb22 	bl	80152f0 <rcl_service_is_valid>
 8016cac:	b1d0      	cbz	r0, 8016ce4 <rcl_action_send_goal_response+0x54>
 8016cae:	6820      	ldr	r0, [r4, #0]
 8016cb0:	3008      	adds	r0, #8
 8016cb2:	f7fe fb1d 	bl	80152f0 <rcl_service_is_valid>
 8016cb6:	b1a8      	cbz	r0, 8016ce4 <rcl_action_send_goal_response+0x54>
 8016cb8:	6820      	ldr	r0, [r4, #0]
 8016cba:	300c      	adds	r0, #12
 8016cbc:	f7f6 fd38 	bl	800d730 <rcl_publisher_is_valid>
 8016cc0:	b180      	cbz	r0, 8016ce4 <rcl_action_send_goal_response+0x54>
 8016cc2:	6820      	ldr	r0, [r4, #0]
 8016cc4:	3010      	adds	r0, #16
 8016cc6:	f7f6 fd33 	bl	800d730 <rcl_publisher_is_valid>
 8016cca:	b158      	cbz	r0, 8016ce4 <rcl_action_send_goal_response+0x54>
 8016ccc:	b195      	cbz	r5, 8016cf4 <rcl_action_send_goal_response+0x64>
 8016cce:	b18e      	cbz	r6, 8016cf4 <rcl_action_send_goal_response+0x64>
 8016cd0:	6820      	ldr	r0, [r4, #0]
 8016cd2:	4632      	mov	r2, r6
 8016cd4:	4629      	mov	r1, r5
 8016cd6:	f7fe faf3 	bl	80152c0 <rcl_send_response>
 8016cda:	b110      	cbz	r0, 8016ce2 <rcl_action_send_goal_response+0x52>
 8016cdc:	2802      	cmp	r0, #2
 8016cde:	bf18      	it	ne
 8016ce0:	2001      	movne	r0, #1
 8016ce2:	bd70      	pop	{r4, r5, r6, pc}
 8016ce4:	f7f7 fd08 	bl	800e6f8 <rcutils_reset_error>
 8016ce8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016cec:	bd70      	pop	{r4, r5, r6, pc}
 8016cee:	f640 0098 	movw	r0, #2200	@ 0x898
 8016cf2:	bd70      	pop	{r4, r5, r6, pc}
 8016cf4:	200b      	movs	r0, #11
 8016cf6:	bd70      	pop	{r4, r5, r6, pc}
 8016cf8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop

08016d00 <rcl_action_take_result_request>:
 8016d00:	2800      	cmp	r0, #0
 8016d02:	d03a      	beq.n	8016d7a <rcl_action_take_result_request+0x7a>
 8016d04:	b570      	push	{r4, r5, r6, lr}
 8016d06:	4604      	mov	r4, r0
 8016d08:	6800      	ldr	r0, [r0, #0]
 8016d0a:	b388      	cbz	r0, 8016d70 <rcl_action_take_result_request+0x70>
 8016d0c:	460d      	mov	r5, r1
 8016d0e:	4616      	mov	r6, r2
 8016d10:	f7fe faee 	bl	80152f0 <rcl_service_is_valid>
 8016d14:	b338      	cbz	r0, 8016d66 <rcl_action_take_result_request+0x66>
 8016d16:	6820      	ldr	r0, [r4, #0]
 8016d18:	3004      	adds	r0, #4
 8016d1a:	f7fe fae9 	bl	80152f0 <rcl_service_is_valid>
 8016d1e:	b310      	cbz	r0, 8016d66 <rcl_action_take_result_request+0x66>
 8016d20:	6820      	ldr	r0, [r4, #0]
 8016d22:	3008      	adds	r0, #8
 8016d24:	f7fe fae4 	bl	80152f0 <rcl_service_is_valid>
 8016d28:	b1e8      	cbz	r0, 8016d66 <rcl_action_take_result_request+0x66>
 8016d2a:	6820      	ldr	r0, [r4, #0]
 8016d2c:	300c      	adds	r0, #12
 8016d2e:	f7f6 fcff 	bl	800d730 <rcl_publisher_is_valid>
 8016d32:	b1c0      	cbz	r0, 8016d66 <rcl_action_take_result_request+0x66>
 8016d34:	6820      	ldr	r0, [r4, #0]
 8016d36:	3010      	adds	r0, #16
 8016d38:	f7f6 fcfa 	bl	800d730 <rcl_publisher_is_valid>
 8016d3c:	b198      	cbz	r0, 8016d66 <rcl_action_take_result_request+0x66>
 8016d3e:	b1d5      	cbz	r5, 8016d76 <rcl_action_take_result_request+0x76>
 8016d40:	b1ce      	cbz	r6, 8016d76 <rcl_action_take_result_request+0x76>
 8016d42:	6820      	ldr	r0, [r4, #0]
 8016d44:	4632      	mov	r2, r6
 8016d46:	4629      	mov	r1, r5
 8016d48:	3008      	adds	r0, #8
 8016d4a:	f7fe fa79 	bl	8015240 <rcl_take_request>
 8016d4e:	b148      	cbz	r0, 8016d64 <rcl_action_take_result_request+0x64>
 8016d50:	280a      	cmp	r0, #10
 8016d52:	d007      	beq.n	8016d64 <rcl_action_take_result_request+0x64>
 8016d54:	f240 2259 	movw	r2, #601	@ 0x259
 8016d58:	f640 0399 	movw	r3, #2201	@ 0x899
 8016d5c:	4290      	cmp	r0, r2
 8016d5e:	bf0c      	ite	eq
 8016d60:	4618      	moveq	r0, r3
 8016d62:	2001      	movne	r0, #1
 8016d64:	bd70      	pop	{r4, r5, r6, pc}
 8016d66:	f7f7 fcc7 	bl	800e6f8 <rcutils_reset_error>
 8016d6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d6e:	bd70      	pop	{r4, r5, r6, pc}
 8016d70:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d74:	bd70      	pop	{r4, r5, r6, pc}
 8016d76:	200b      	movs	r0, #11
 8016d78:	bd70      	pop	{r4, r5, r6, pc}
 8016d7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d7e:	4770      	bx	lr

08016d80 <rcl_action_take_cancel_request>:
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d03a      	beq.n	8016dfa <rcl_action_take_cancel_request+0x7a>
 8016d84:	b570      	push	{r4, r5, r6, lr}
 8016d86:	4604      	mov	r4, r0
 8016d88:	6800      	ldr	r0, [r0, #0]
 8016d8a:	b388      	cbz	r0, 8016df0 <rcl_action_take_cancel_request+0x70>
 8016d8c:	460d      	mov	r5, r1
 8016d8e:	4616      	mov	r6, r2
 8016d90:	f7fe faae 	bl	80152f0 <rcl_service_is_valid>
 8016d94:	b338      	cbz	r0, 8016de6 <rcl_action_take_cancel_request+0x66>
 8016d96:	6820      	ldr	r0, [r4, #0]
 8016d98:	3004      	adds	r0, #4
 8016d9a:	f7fe faa9 	bl	80152f0 <rcl_service_is_valid>
 8016d9e:	b310      	cbz	r0, 8016de6 <rcl_action_take_cancel_request+0x66>
 8016da0:	6820      	ldr	r0, [r4, #0]
 8016da2:	3008      	adds	r0, #8
 8016da4:	f7fe faa4 	bl	80152f0 <rcl_service_is_valid>
 8016da8:	b1e8      	cbz	r0, 8016de6 <rcl_action_take_cancel_request+0x66>
 8016daa:	6820      	ldr	r0, [r4, #0]
 8016dac:	300c      	adds	r0, #12
 8016dae:	f7f6 fcbf 	bl	800d730 <rcl_publisher_is_valid>
 8016db2:	b1c0      	cbz	r0, 8016de6 <rcl_action_take_cancel_request+0x66>
 8016db4:	6820      	ldr	r0, [r4, #0]
 8016db6:	3010      	adds	r0, #16
 8016db8:	f7f6 fcba 	bl	800d730 <rcl_publisher_is_valid>
 8016dbc:	b198      	cbz	r0, 8016de6 <rcl_action_take_cancel_request+0x66>
 8016dbe:	b1d5      	cbz	r5, 8016df6 <rcl_action_take_cancel_request+0x76>
 8016dc0:	b1ce      	cbz	r6, 8016df6 <rcl_action_take_cancel_request+0x76>
 8016dc2:	6820      	ldr	r0, [r4, #0]
 8016dc4:	4632      	mov	r2, r6
 8016dc6:	4629      	mov	r1, r5
 8016dc8:	3004      	adds	r0, #4
 8016dca:	f7fe fa39 	bl	8015240 <rcl_take_request>
 8016dce:	b148      	cbz	r0, 8016de4 <rcl_action_take_cancel_request+0x64>
 8016dd0:	280a      	cmp	r0, #10
 8016dd2:	d007      	beq.n	8016de4 <rcl_action_take_cancel_request+0x64>
 8016dd4:	f240 2259 	movw	r2, #601	@ 0x259
 8016dd8:	f640 0399 	movw	r3, #2201	@ 0x899
 8016ddc:	4290      	cmp	r0, r2
 8016dde:	bf0c      	ite	eq
 8016de0:	4618      	moveq	r0, r3
 8016de2:	2001      	movne	r0, #1
 8016de4:	bd70      	pop	{r4, r5, r6, pc}
 8016de6:	f7f7 fc87 	bl	800e6f8 <rcutils_reset_error>
 8016dea:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dee:	bd70      	pop	{r4, r5, r6, pc}
 8016df0:	f640 0098 	movw	r0, #2200	@ 0x898
 8016df4:	bd70      	pop	{r4, r5, r6, pc}
 8016df6:	200b      	movs	r0, #11
 8016df8:	bd70      	pop	{r4, r5, r6, pc}
 8016dfa:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dfe:	4770      	bx	lr

08016e00 <rcl_action_send_cancel_response>:
 8016e00:	b398      	cbz	r0, 8016e6a <rcl_action_send_cancel_response+0x6a>
 8016e02:	b570      	push	{r4, r5, r6, lr}
 8016e04:	4604      	mov	r4, r0
 8016e06:	6800      	ldr	r0, [r0, #0]
 8016e08:	b350      	cbz	r0, 8016e60 <rcl_action_send_cancel_response+0x60>
 8016e0a:	460d      	mov	r5, r1
 8016e0c:	4616      	mov	r6, r2
 8016e0e:	f7fe fa6f 	bl	80152f0 <rcl_service_is_valid>
 8016e12:	b300      	cbz	r0, 8016e56 <rcl_action_send_cancel_response+0x56>
 8016e14:	6820      	ldr	r0, [r4, #0]
 8016e16:	3004      	adds	r0, #4
 8016e18:	f7fe fa6a 	bl	80152f0 <rcl_service_is_valid>
 8016e1c:	b1d8      	cbz	r0, 8016e56 <rcl_action_send_cancel_response+0x56>
 8016e1e:	6820      	ldr	r0, [r4, #0]
 8016e20:	3008      	adds	r0, #8
 8016e22:	f7fe fa65 	bl	80152f0 <rcl_service_is_valid>
 8016e26:	b1b0      	cbz	r0, 8016e56 <rcl_action_send_cancel_response+0x56>
 8016e28:	6820      	ldr	r0, [r4, #0]
 8016e2a:	300c      	adds	r0, #12
 8016e2c:	f7f6 fc80 	bl	800d730 <rcl_publisher_is_valid>
 8016e30:	b188      	cbz	r0, 8016e56 <rcl_action_send_cancel_response+0x56>
 8016e32:	6820      	ldr	r0, [r4, #0]
 8016e34:	3010      	adds	r0, #16
 8016e36:	f7f6 fc7b 	bl	800d730 <rcl_publisher_is_valid>
 8016e3a:	b160      	cbz	r0, 8016e56 <rcl_action_send_cancel_response+0x56>
 8016e3c:	b19d      	cbz	r5, 8016e66 <rcl_action_send_cancel_response+0x66>
 8016e3e:	b196      	cbz	r6, 8016e66 <rcl_action_send_cancel_response+0x66>
 8016e40:	6820      	ldr	r0, [r4, #0]
 8016e42:	4632      	mov	r2, r6
 8016e44:	4629      	mov	r1, r5
 8016e46:	3004      	adds	r0, #4
 8016e48:	f7fe fa3a 	bl	80152c0 <rcl_send_response>
 8016e4c:	b110      	cbz	r0, 8016e54 <rcl_action_send_cancel_response+0x54>
 8016e4e:	2802      	cmp	r0, #2
 8016e50:	bf18      	it	ne
 8016e52:	2001      	movne	r0, #1
 8016e54:	bd70      	pop	{r4, r5, r6, pc}
 8016e56:	f7f7 fc4f 	bl	800e6f8 <rcutils_reset_error>
 8016e5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e5e:	bd70      	pop	{r4, r5, r6, pc}
 8016e60:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e64:	bd70      	pop	{r4, r5, r6, pc}
 8016e66:	200b      	movs	r0, #11
 8016e68:	bd70      	pop	{r4, r5, r6, pc}
 8016e6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e6e:	4770      	bx	lr

08016e70 <rcl_action_wait_set_add_action_server>:
 8016e70:	2800      	cmp	r0, #0
 8016e72:	d04d      	beq.n	8016f10 <rcl_action_wait_set_add_action_server+0xa0>
 8016e74:	b570      	push	{r4, r5, r6, lr}
 8016e76:	460c      	mov	r4, r1
 8016e78:	b159      	cbz	r1, 8016e92 <rcl_action_wait_set_add_action_server+0x22>
 8016e7a:	4605      	mov	r5, r0
 8016e7c:	6808      	ldr	r0, [r1, #0]
 8016e7e:	b140      	cbz	r0, 8016e92 <rcl_action_wait_set_add_action_server+0x22>
 8016e80:	4616      	mov	r6, r2
 8016e82:	f7fe fa35 	bl	80152f0 <rcl_service_is_valid>
 8016e86:	b120      	cbz	r0, 8016e92 <rcl_action_wait_set_add_action_server+0x22>
 8016e88:	6820      	ldr	r0, [r4, #0]
 8016e8a:	3004      	adds	r0, #4
 8016e8c:	f7fe fa30 	bl	80152f0 <rcl_service_is_valid>
 8016e90:	b910      	cbnz	r0, 8016e98 <rcl_action_wait_set_add_action_server+0x28>
 8016e92:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e96:	bd70      	pop	{r4, r5, r6, pc}
 8016e98:	6820      	ldr	r0, [r4, #0]
 8016e9a:	3008      	adds	r0, #8
 8016e9c:	f7fe fa28 	bl	80152f0 <rcl_service_is_valid>
 8016ea0:	2800      	cmp	r0, #0
 8016ea2:	d0f6      	beq.n	8016e92 <rcl_action_wait_set_add_action_server+0x22>
 8016ea4:	6820      	ldr	r0, [r4, #0]
 8016ea6:	300c      	adds	r0, #12
 8016ea8:	f7f6 fc5a 	bl	800d760 <rcl_publisher_is_valid_except_context>
 8016eac:	2800      	cmp	r0, #0
 8016eae:	d0f0      	beq.n	8016e92 <rcl_action_wait_set_add_action_server+0x22>
 8016eb0:	6820      	ldr	r0, [r4, #0]
 8016eb2:	3010      	adds	r0, #16
 8016eb4:	f7f6 fc54 	bl	800d760 <rcl_publisher_is_valid_except_context>
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	d0ea      	beq.n	8016e92 <rcl_action_wait_set_add_action_server+0x22>
 8016ebc:	6821      	ldr	r1, [r4, #0]
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016ec4:	f7ff face 	bl	8016464 <rcl_wait_set_add_service>
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d1e4      	bne.n	8016e96 <rcl_action_wait_set_add_action_server+0x26>
 8016ecc:	6821      	ldr	r1, [r4, #0]
 8016ece:	4628      	mov	r0, r5
 8016ed0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016ed4:	3104      	adds	r1, #4
 8016ed6:	f7ff fac5 	bl	8016464 <rcl_wait_set_add_service>
 8016eda:	2800      	cmp	r0, #0
 8016edc:	d1db      	bne.n	8016e96 <rcl_action_wait_set_add_action_server+0x26>
 8016ede:	6821      	ldr	r1, [r4, #0]
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016ee6:	3108      	adds	r1, #8
 8016ee8:	f7ff fabc 	bl	8016464 <rcl_wait_set_add_service>
 8016eec:	2800      	cmp	r0, #0
 8016eee:	d1d2      	bne.n	8016e96 <rcl_action_wait_set_add_action_server+0x26>
 8016ef0:	6821      	ldr	r1, [r4, #0]
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016ef8:	3114      	adds	r1, #20
 8016efa:	f7ff fa57 	bl	80163ac <rcl_wait_set_add_timer>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d1c9      	bne.n	8016e96 <rcl_action_wait_set_add_action_server+0x26>
 8016f02:	2e00      	cmp	r6, #0
 8016f04:	d0c7      	beq.n	8016e96 <rcl_action_wait_set_add_action_server+0x26>
 8016f06:	6823      	ldr	r3, [r4, #0]
 8016f08:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016f0c:	6033      	str	r3, [r6, #0]
 8016f0e:	bd70      	pop	{r4, r5, r6, pc}
 8016f10:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016f14:	4770      	bx	lr
 8016f16:	bf00      	nop

08016f18 <rcl_action_server_wait_set_get_entities_ready>:
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	d05a      	beq.n	8016fd2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f1e:	460c      	mov	r4, r1
 8016f20:	b161      	cbz	r1, 8016f3c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f22:	4605      	mov	r5, r0
 8016f24:	6808      	ldr	r0, [r1, #0]
 8016f26:	b148      	cbz	r0, 8016f3c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f28:	4616      	mov	r6, r2
 8016f2a:	461f      	mov	r7, r3
 8016f2c:	f7fe f9e0 	bl	80152f0 <rcl_service_is_valid>
 8016f30:	b120      	cbz	r0, 8016f3c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f32:	6820      	ldr	r0, [r4, #0]
 8016f34:	3004      	adds	r0, #4
 8016f36:	f7fe f9db 	bl	80152f0 <rcl_service_is_valid>
 8016f3a:	b910      	cbnz	r0, 8016f42 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016f3c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f42:	6820      	ldr	r0, [r4, #0]
 8016f44:	3008      	adds	r0, #8
 8016f46:	f7fe f9d3 	bl	80152f0 <rcl_service_is_valid>
 8016f4a:	2800      	cmp	r0, #0
 8016f4c:	d0f6      	beq.n	8016f3c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f4e:	6820      	ldr	r0, [r4, #0]
 8016f50:	300c      	adds	r0, #12
 8016f52:	f7f6 fc05 	bl	800d760 <rcl_publisher_is_valid_except_context>
 8016f56:	2800      	cmp	r0, #0
 8016f58:	d0f0      	beq.n	8016f3c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f5a:	6820      	ldr	r0, [r4, #0]
 8016f5c:	3010      	adds	r0, #16
 8016f5e:	f7f6 fbff 	bl	800d760 <rcl_publisher_is_valid_except_context>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d0ea      	beq.n	8016f3c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f66:	b3be      	cbz	r6, 8016fd8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f68:	b3b7      	cbz	r7, 8016fd8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f6a:	9b06      	ldr	r3, [sp, #24]
 8016f6c:	b3a3      	cbz	r3, 8016fd8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f6e:	9b07      	ldr	r3, [sp, #28]
 8016f70:	b393      	cbz	r3, 8016fd8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f72:	6821      	ldr	r1, [r4, #0]
 8016f74:	692a      	ldr	r2, [r5, #16]
 8016f76:	6a2c      	ldr	r4, [r5, #32]
 8016f78:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016f7c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016f80:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016f84:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016f88:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016f8c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016f90:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016f94:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016f98:	1a64      	subs	r4, r4, r1
 8016f9a:	fab4 f484 	clz	r4, r4
 8016f9e:	0964      	lsrs	r4, r4, #5
 8016fa0:	7034      	strb	r4, [r6, #0]
 8016fa2:	1d0c      	adds	r4, r1, #4
 8016fa4:	1b1b      	subs	r3, r3, r4
 8016fa6:	fab3 f383 	clz	r3, r3
 8016faa:	095b      	lsrs	r3, r3, #5
 8016fac:	f101 0408 	add.w	r4, r1, #8
 8016fb0:	703b      	strb	r3, [r7, #0]
 8016fb2:	f101 0314 	add.w	r3, r1, #20
 8016fb6:	1b01      	subs	r1, r0, r4
 8016fb8:	1ad3      	subs	r3, r2, r3
 8016fba:	fab1 f181 	clz	r1, r1
 8016fbe:	9a06      	ldr	r2, [sp, #24]
 8016fc0:	0949      	lsrs	r1, r1, #5
 8016fc2:	7011      	strb	r1, [r2, #0]
 8016fc4:	fab3 f383 	clz	r3, r3
 8016fc8:	9a07      	ldr	r2, [sp, #28]
 8016fca:	095b      	lsrs	r3, r3, #5
 8016fcc:	2000      	movs	r0, #0
 8016fce:	7013      	strb	r3, [r2, #0]
 8016fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fd2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016fd6:	4770      	bx	lr
 8016fd8:	200b      	movs	r0, #11
 8016fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016fdc <_execute_event_handler>:
 8016fdc:	2002      	movs	r0, #2
 8016fde:	4770      	bx	lr

08016fe0 <_cancel_goal_event_handler>:
 8016fe0:	2003      	movs	r0, #3
 8016fe2:	4770      	bx	lr

08016fe4 <_succeed_event_handler>:
 8016fe4:	2004      	movs	r0, #4
 8016fe6:	4770      	bx	lr

08016fe8 <_abort_event_handler>:
 8016fe8:	2006      	movs	r0, #6
 8016fea:	4770      	bx	lr

08016fec <_canceled_event_handler>:
 8016fec:	2005      	movs	r0, #5
 8016fee:	4770      	bx	lr

08016ff0 <rcl_action_transition_goal_state>:
 8016ff0:	b2c2      	uxtb	r2, r0
 8016ff2:	2a06      	cmp	r2, #6
 8016ff4:	d80c      	bhi.n	8017010 <rcl_action_transition_goal_state+0x20>
 8016ff6:	2904      	cmp	r1, #4
 8016ff8:	d80a      	bhi.n	8017010 <rcl_action_transition_goal_state+0x20>
 8016ffa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016ffe:	b410      	push	{r4}
 8017000:	1853      	adds	r3, r2, r1
 8017002:	4c06      	ldr	r4, [pc, #24]	@ (801701c <rcl_action_transition_goal_state+0x2c>)
 8017004:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017008:	b123      	cbz	r3, 8017014 <rcl_action_transition_goal_state+0x24>
 801700a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801700e:	4718      	bx	r3
 8017010:	2000      	movs	r0, #0
 8017012:	4770      	bx	lr
 8017014:	2000      	movs	r0, #0
 8017016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801701a:	4770      	bx	lr
 801701c:	0801da68 	.word	0x0801da68

08017020 <rcl_action_get_zero_initialized_cancel_response>:
 8017020:	b510      	push	{r4, lr}
 8017022:	4c07      	ldr	r4, [pc, #28]	@ (8017040 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017024:	4686      	mov	lr, r0
 8017026:	4684      	mov	ip, r0
 8017028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801702a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801702e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017030:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	f8cc 3000 	str.w	r3, [ip]
 801703a:	4670      	mov	r0, lr
 801703c:	bd10      	pop	{r4, pc}
 801703e:	bf00      	nop
 8017040:	0801daf4 	.word	0x0801daf4

08017044 <rclc_action_send_result_request>:
 8017044:	b1d0      	cbz	r0, 801707c <rclc_action_send_result_request+0x38>
 8017046:	b500      	push	{lr}
 8017048:	4684      	mov	ip, r0
 801704a:	b087      	sub	sp, #28
 801704c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017050:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017054:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017058:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801705c:	f10d 0e08 	add.w	lr, sp, #8
 8017060:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017064:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017068:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801706c:	a902      	add	r1, sp, #8
 801706e:	3010      	adds	r0, #16
 8017070:	f7ff fbda 	bl	8016828 <rcl_action_send_result_request>
 8017074:	b920      	cbnz	r0, 8017080 <rclc_action_send_result_request+0x3c>
 8017076:	b007      	add	sp, #28
 8017078:	f85d fb04 	ldr.w	pc, [sp], #4
 801707c:	200b      	movs	r0, #11
 801707e:	4770      	bx	lr
 8017080:	9001      	str	r0, [sp, #4]
 8017082:	f7f7 fb39 	bl	800e6f8 <rcutils_reset_error>
 8017086:	9801      	ldr	r0, [sp, #4]
 8017088:	b007      	add	sp, #28
 801708a:	f85d fb04 	ldr.w	pc, [sp], #4
 801708e:	bf00      	nop

08017090 <rclc_action_take_goal_handle>:
 8017090:	b160      	cbz	r0, 80170ac <rclc_action_take_goal_handle+0x1c>
 8017092:	6883      	ldr	r3, [r0, #8]
 8017094:	b143      	cbz	r3, 80170a8 <rclc_action_take_goal_handle+0x18>
 8017096:	6819      	ldr	r1, [r3, #0]
 8017098:	6081      	str	r1, [r0, #8]
 801709a:	2200      	movs	r2, #0
 801709c:	721a      	strb	r2, [r3, #8]
 801709e:	68c1      	ldr	r1, [r0, #12]
 80170a0:	6019      	str	r1, [r3, #0]
 80170a2:	621a      	str	r2, [r3, #32]
 80170a4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80170a6:	60c3      	str	r3, [r0, #12]
 80170a8:	4618      	mov	r0, r3
 80170aa:	4770      	bx	lr
 80170ac:	4603      	mov	r3, r0
 80170ae:	e7fb      	b.n	80170a8 <rclc_action_take_goal_handle+0x18>

080170b0 <rclc_action_remove_used_goal_handle>:
 80170b0:	b180      	cbz	r0, 80170d4 <rclc_action_remove_used_goal_handle+0x24>
 80170b2:	b179      	cbz	r1, 80170d4 <rclc_action_remove_used_goal_handle+0x24>
 80170b4:	68c3      	ldr	r3, [r0, #12]
 80170b6:	4299      	cmp	r1, r3
 80170b8:	d00d      	beq.n	80170d6 <rclc_action_remove_used_goal_handle+0x26>
 80170ba:	b12b      	cbz	r3, 80170c8 <rclc_action_remove_used_goal_handle+0x18>
 80170bc:	681a      	ldr	r2, [r3, #0]
 80170be:	4291      	cmp	r1, r2
 80170c0:	d003      	beq.n	80170ca <rclc_action_remove_used_goal_handle+0x1a>
 80170c2:	4613      	mov	r3, r2
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d1f9      	bne.n	80170bc <rclc_action_remove_used_goal_handle+0xc>
 80170c8:	4770      	bx	lr
 80170ca:	680a      	ldr	r2, [r1, #0]
 80170cc:	601a      	str	r2, [r3, #0]
 80170ce:	6883      	ldr	r3, [r0, #8]
 80170d0:	600b      	str	r3, [r1, #0]
 80170d2:	6081      	str	r1, [r0, #8]
 80170d4:	4770      	bx	lr
 80170d6:	680b      	ldr	r3, [r1, #0]
 80170d8:	60c3      	str	r3, [r0, #12]
 80170da:	e7f8      	b.n	80170ce <rclc_action_remove_used_goal_handle+0x1e>

080170dc <rclc_action_find_goal_handle_by_uuid>:
 80170dc:	b538      	push	{r3, r4, r5, lr}
 80170de:	b180      	cbz	r0, 8017102 <rclc_action_find_goal_handle_by_uuid+0x26>
 80170e0:	460d      	mov	r5, r1
 80170e2:	b181      	cbz	r1, 8017106 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80170e4:	68c4      	ldr	r4, [r0, #12]
 80170e6:	b914      	cbnz	r4, 80170ee <rclc_action_find_goal_handle_by_uuid+0x12>
 80170e8:	e009      	b.n	80170fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80170ea:	6824      	ldr	r4, [r4, #0]
 80170ec:	b13c      	cbz	r4, 80170fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80170ee:	f104 0009 	add.w	r0, r4, #9
 80170f2:	2210      	movs	r2, #16
 80170f4:	4629      	mov	r1, r5
 80170f6:	f003 fa2f 	bl	801a558 <memcmp>
 80170fa:	2800      	cmp	r0, #0
 80170fc:	d1f5      	bne.n	80170ea <rclc_action_find_goal_handle_by_uuid+0xe>
 80170fe:	4620      	mov	r0, r4
 8017100:	bd38      	pop	{r3, r4, r5, pc}
 8017102:	4604      	mov	r4, r0
 8017104:	e7fb      	b.n	80170fe <rclc_action_find_goal_handle_by_uuid+0x22>
 8017106:	460c      	mov	r4, r1
 8017108:	e7f9      	b.n	80170fe <rclc_action_find_goal_handle_by_uuid+0x22>
 801710a:	bf00      	nop

0801710c <rclc_action_find_first_handle_by_status>:
 801710c:	b140      	cbz	r0, 8017120 <rclc_action_find_first_handle_by_status+0x14>
 801710e:	68c0      	ldr	r0, [r0, #12]
 8017110:	b910      	cbnz	r0, 8017118 <rclc_action_find_first_handle_by_status+0xc>
 8017112:	e005      	b.n	8017120 <rclc_action_find_first_handle_by_status+0x14>
 8017114:	6800      	ldr	r0, [r0, #0]
 8017116:	b118      	cbz	r0, 8017120 <rclc_action_find_first_handle_by_status+0x14>
 8017118:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801711c:	428b      	cmp	r3, r1
 801711e:	d1f9      	bne.n	8017114 <rclc_action_find_first_handle_by_status+0x8>
 8017120:	4770      	bx	lr
 8017122:	bf00      	nop

08017124 <rclc_action_find_first_terminated_handle>:
 8017124:	b140      	cbz	r0, 8017138 <rclc_action_find_first_terminated_handle+0x14>
 8017126:	68c0      	ldr	r0, [r0, #12]
 8017128:	b910      	cbnz	r0, 8017130 <rclc_action_find_first_terminated_handle+0xc>
 801712a:	e005      	b.n	8017138 <rclc_action_find_first_terminated_handle+0x14>
 801712c:	6800      	ldr	r0, [r0, #0]
 801712e:	b118      	cbz	r0, 8017138 <rclc_action_find_first_terminated_handle+0x14>
 8017130:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017134:	2b03      	cmp	r3, #3
 8017136:	ddf9      	ble.n	801712c <rclc_action_find_first_terminated_handle+0x8>
 8017138:	4770      	bx	lr
 801713a:	bf00      	nop

0801713c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801713c:	b170      	cbz	r0, 801715c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801713e:	68c0      	ldr	r0, [r0, #12]
 8017140:	b160      	cbz	r0, 801715c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017142:	b410      	push	{r4}
 8017144:	e001      	b.n	801714a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017146:	6800      	ldr	r0, [r0, #0]
 8017148:	b128      	cbz	r0, 8017156 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801714a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801714e:	4299      	cmp	r1, r3
 8017150:	bf08      	it	eq
 8017152:	4294      	cmpeq	r4, r2
 8017154:	d1f7      	bne.n	8017146 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801715a:	4770      	bx	lr
 801715c:	4770      	bx	lr
 801715e:	bf00      	nop

08017160 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017160:	b170      	cbz	r0, 8017180 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017162:	68c0      	ldr	r0, [r0, #12]
 8017164:	b160      	cbz	r0, 8017180 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017166:	b410      	push	{r4}
 8017168:	e001      	b.n	801716e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801716a:	6800      	ldr	r0, [r0, #0]
 801716c:	b128      	cbz	r0, 801717a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801716e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017172:	4299      	cmp	r1, r3
 8017174:	bf08      	it	eq
 8017176:	4294      	cmpeq	r4, r2
 8017178:	d1f7      	bne.n	801716a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801717a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801717e:	4770      	bx	lr
 8017180:	4770      	bx	lr
 8017182:	bf00      	nop

08017184 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017184:	b170      	cbz	r0, 80171a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017186:	68c0      	ldr	r0, [r0, #12]
 8017188:	b160      	cbz	r0, 80171a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801718a:	b410      	push	{r4}
 801718c:	e001      	b.n	8017192 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801718e:	6800      	ldr	r0, [r0, #0]
 8017190:	b128      	cbz	r0, 801719e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017192:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017196:	4299      	cmp	r1, r3
 8017198:	bf08      	it	eq
 801719a:	4294      	cmpeq	r4, r2
 801719c:	d1f7      	bne.n	801718e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801719e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171a2:	4770      	bx	lr
 80171a4:	4770      	bx	lr
 80171a6:	bf00      	nop

080171a8 <rclc_action_find_first_handle_with_goal_response>:
 80171a8:	b140      	cbz	r0, 80171bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80171aa:	68c0      	ldr	r0, [r0, #12]
 80171ac:	b910      	cbnz	r0, 80171b4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80171ae:	e005      	b.n	80171bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80171b0:	6800      	ldr	r0, [r0, #0]
 80171b2:	b118      	cbz	r0, 80171bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80171b4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d0f9      	beq.n	80171b0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop

080171c0 <rclc_action_find_first_handle_with_result_response>:
 80171c0:	b140      	cbz	r0, 80171d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80171c2:	68c0      	ldr	r0, [r0, #12]
 80171c4:	b910      	cbnz	r0, 80171cc <rclc_action_find_first_handle_with_result_response+0xc>
 80171c6:	e005      	b.n	80171d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80171c8:	6800      	ldr	r0, [r0, #0]
 80171ca:	b118      	cbz	r0, 80171d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80171cc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d0f9      	beq.n	80171c8 <rclc_action_find_first_handle_with_result_response+0x8>
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop

080171d8 <rclc_action_server_response_goal_request>:
 80171d8:	b198      	cbz	r0, 8017202 <rclc_action_server_response_goal_request+0x2a>
 80171da:	b510      	push	{r4, lr}
 80171dc:	6844      	ldr	r4, [r0, #4]
 80171de:	b086      	sub	sp, #24
 80171e0:	2200      	movs	r2, #0
 80171e2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80171e6:	460b      	mov	r3, r1
 80171e8:	9205      	str	r2, [sp, #20]
 80171ea:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80171ee:	aa03      	add	r2, sp, #12
 80171f0:	f104 0010 	add.w	r0, r4, #16
 80171f4:	f88d 300c 	strb.w	r3, [sp, #12]
 80171f8:	f7ff fd4a 	bl	8016c90 <rcl_action_send_goal_response>
 80171fc:	b918      	cbnz	r0, 8017206 <rclc_action_server_response_goal_request+0x2e>
 80171fe:	b006      	add	sp, #24
 8017200:	bd10      	pop	{r4, pc}
 8017202:	200b      	movs	r0, #11
 8017204:	4770      	bx	lr
 8017206:	9001      	str	r0, [sp, #4]
 8017208:	f7f7 fa76 	bl	800e6f8 <rcutils_reset_error>
 801720c:	9801      	ldr	r0, [sp, #4]
 801720e:	b006      	add	sp, #24
 8017210:	bd10      	pop	{r4, pc}
 8017212:	bf00      	nop
 8017214:	0000      	movs	r0, r0
	...

08017218 <rclc_action_server_goal_cancel_accept>:
 8017218:	b310      	cbz	r0, 8017260 <rclc_action_server_goal_cancel_accept+0x48>
 801721a:	b510      	push	{r4, lr}
 801721c:	b090      	sub	sp, #64	@ 0x40
 801721e:	4604      	mov	r4, r0
 8017220:	a806      	add	r0, sp, #24
 8017222:	f7ff fefd 	bl	8017020 <rcl_action_get_zero_initialized_cancel_response>
 8017226:	2300      	movs	r3, #0
 8017228:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801722c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017230:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8017234:	f88d 3018 	strb.w	r3, [sp, #24]
 8017238:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801723c:	f8cd d01c 	str.w	sp, [sp, #28]
 8017240:	46ec      	mov	ip, sp
 8017242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017246:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017268 <rclc_action_server_goal_cancel_accept+0x50>
 801724a:	6860      	ldr	r0, [r4, #4]
 801724c:	aa06      	add	r2, sp, #24
 801724e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8017252:	3010      	adds	r0, #16
 8017254:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017258:	f7ff fdd2 	bl	8016e00 <rcl_action_send_cancel_response>
 801725c:	b010      	add	sp, #64	@ 0x40
 801725e:	bd10      	pop	{r4, pc}
 8017260:	200b      	movs	r0, #11
 8017262:	4770      	bx	lr
 8017264:	f3af 8000 	nop.w
 8017268:	00000001 	.word	0x00000001
 801726c:	00000001 	.word	0x00000001

08017270 <rclc_action_server_goal_cancel_reject>:
 8017270:	b082      	sub	sp, #8
 8017272:	b530      	push	{r4, r5, lr}
 8017274:	b08b      	sub	sp, #44	@ 0x2c
 8017276:	ac0e      	add	r4, sp, #56	@ 0x38
 8017278:	e884 000c 	stmia.w	r4, {r2, r3}
 801727c:	b188      	cbz	r0, 80172a2 <rclc_action_server_goal_cancel_reject+0x32>
 801727e:	4604      	mov	r4, r0
 8017280:	a801      	add	r0, sp, #4
 8017282:	460d      	mov	r5, r1
 8017284:	f7ff fecc 	bl	8017020 <rcl_action_get_zero_initialized_cancel_response>
 8017288:	aa01      	add	r2, sp, #4
 801728a:	a90e      	add	r1, sp, #56	@ 0x38
 801728c:	f104 0010 	add.w	r0, r4, #16
 8017290:	f88d 5004 	strb.w	r5, [sp, #4]
 8017294:	f7ff fdb4 	bl	8016e00 <rcl_action_send_cancel_response>
 8017298:	b00b      	add	sp, #44	@ 0x2c
 801729a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801729e:	b002      	add	sp, #8
 80172a0:	4770      	bx	lr
 80172a2:	200b      	movs	r0, #11
 80172a4:	b00b      	add	sp, #44	@ 0x2c
 80172a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172aa:	b002      	add	sp, #8
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop

080172b0 <__atomic_load_8>:
 80172b0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80172b4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80172b8:	4a15      	ldr	r2, [pc, #84]	@ (8017310 <__atomic_load_8+0x60>)
 80172ba:	4b16      	ldr	r3, [pc, #88]	@ (8017314 <__atomic_load_8+0x64>)
 80172bc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80172c0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80172c4:	fb02 f101 	mul.w	r1, r2, r1
 80172c8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80172cc:	fba3 2301 	umull	r2, r3, r3, r1
 80172d0:	091b      	lsrs	r3, r3, #4
 80172d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80172d6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80172da:	b4d0      	push	{r4, r6, r7}
 80172dc:	4c0e      	ldr	r4, [pc, #56]	@ (8017318 <__atomic_load_8+0x68>)
 80172de:	1ac9      	subs	r1, r1, r3
 80172e0:	1862      	adds	r2, r4, r1
 80172e2:	f04f 0c01 	mov.w	ip, #1
 80172e6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80172ea:	e8c2 cf46 	strexb	r6, ip, [r2]
 80172ee:	2e00      	cmp	r6, #0
 80172f0:	d1f9      	bne.n	80172e6 <__atomic_load_8+0x36>
 80172f2:	f3bf 8f5b 	dmb	ish
 80172f6:	b2db      	uxtb	r3, r3
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d1f4      	bne.n	80172e6 <__atomic_load_8+0x36>
 80172fc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017300:	f3bf 8f5b 	dmb	ish
 8017304:	5463      	strb	r3, [r4, r1]
 8017306:	4630      	mov	r0, r6
 8017308:	4639      	mov	r1, r7
 801730a:	bcd0      	pop	{r4, r6, r7}
 801730c:	4770      	bx	lr
 801730e:	bf00      	nop
 8017310:	27d4eb2d 	.word	0x27d4eb2d
 8017314:	b21642c9 	.word	0xb21642c9
 8017318:	2000c178 	.word	0x2000c178

0801731c <__atomic_store_8>:
 801731c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017320:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017324:	b570      	push	{r4, r5, r6, lr}
 8017326:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801732a:	4c14      	ldr	r4, [pc, #80]	@ (801737c <__atomic_store_8+0x60>)
 801732c:	4d14      	ldr	r5, [pc, #80]	@ (8017380 <__atomic_store_8+0x64>)
 801732e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017332:	fb04 f101 	mul.w	r1, r4, r1
 8017336:	4c13      	ldr	r4, [pc, #76]	@ (8017384 <__atomic_store_8+0x68>)
 8017338:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801733c:	fba4 4e01 	umull	r4, lr, r4, r1
 8017340:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8017344:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8017348:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801734c:	eba1 0e0e 	sub.w	lr, r1, lr
 8017350:	eb05 0c0e 	add.w	ip, r5, lr
 8017354:	f04f 0401 	mov.w	r4, #1
 8017358:	e8dc 1f4f 	ldrexb	r1, [ip]
 801735c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8017360:	2e00      	cmp	r6, #0
 8017362:	d1f9      	bne.n	8017358 <__atomic_store_8+0x3c>
 8017364:	f3bf 8f5b 	dmb	ish
 8017368:	b2c9      	uxtb	r1, r1
 801736a:	2900      	cmp	r1, #0
 801736c:	d1f4      	bne.n	8017358 <__atomic_store_8+0x3c>
 801736e:	e9c0 2300 	strd	r2, r3, [r0]
 8017372:	f3bf 8f5b 	dmb	ish
 8017376:	f805 100e 	strb.w	r1, [r5, lr]
 801737a:	bd70      	pop	{r4, r5, r6, pc}
 801737c:	27d4eb2d 	.word	0x27d4eb2d
 8017380:	2000c178 	.word	0x2000c178
 8017384:	b21642c9 	.word	0xb21642c9

08017388 <__atomic_exchange_8>:
 8017388:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801738c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8017390:	4916      	ldr	r1, [pc, #88]	@ (80173ec <__atomic_exchange_8+0x64>)
 8017392:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8017396:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801739a:	fb01 fc0c 	mul.w	ip, r1, ip
 801739e:	4914      	ldr	r1, [pc, #80]	@ (80173f0 <__atomic_exchange_8+0x68>)
 80173a0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80173a4:	b570      	push	{r4, r5, r6, lr}
 80173a6:	4605      	mov	r5, r0
 80173a8:	fba1 010c 	umull	r0, r1, r1, ip
 80173ac:	0909      	lsrs	r1, r1, #4
 80173ae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80173b2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80173b6:	4e0f      	ldr	r6, [pc, #60]	@ (80173f4 <__atomic_exchange_8+0x6c>)
 80173b8:	ebac 0c01 	sub.w	ip, ip, r1
 80173bc:	eb06 010c 	add.w	r1, r6, ip
 80173c0:	f04f 0e01 	mov.w	lr, #1
 80173c4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80173c8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80173cc:	2800      	cmp	r0, #0
 80173ce:	d1f9      	bne.n	80173c4 <__atomic_exchange_8+0x3c>
 80173d0:	f3bf 8f5b 	dmb	ish
 80173d4:	b2e4      	uxtb	r4, r4
 80173d6:	2c00      	cmp	r4, #0
 80173d8:	d1f4      	bne.n	80173c4 <__atomic_exchange_8+0x3c>
 80173da:	e9d5 0100 	ldrd	r0, r1, [r5]
 80173de:	e9c5 2300 	strd	r2, r3, [r5]
 80173e2:	f3bf 8f5b 	dmb	ish
 80173e6:	f806 400c 	strb.w	r4, [r6, ip]
 80173ea:	bd70      	pop	{r4, r5, r6, pc}
 80173ec:	27d4eb2d 	.word	0x27d4eb2d
 80173f0:	b21642c9 	.word	0xb21642c9
 80173f4:	2000c178 	.word	0x2000c178

080173f8 <rcutils_get_env>:
 80173f8:	b168      	cbz	r0, 8017416 <rcutils_get_env+0x1e>
 80173fa:	b510      	push	{r4, lr}
 80173fc:	460c      	mov	r4, r1
 80173fe:	b129      	cbz	r1, 801740c <rcutils_get_env+0x14>
 8017400:	f002 fc18 	bl	8019c34 <getenv>
 8017404:	b120      	cbz	r0, 8017410 <rcutils_get_env+0x18>
 8017406:	6020      	str	r0, [r4, #0]
 8017408:	2000      	movs	r0, #0
 801740a:	bd10      	pop	{r4, pc}
 801740c:	4803      	ldr	r0, [pc, #12]	@ (801741c <rcutils_get_env+0x24>)
 801740e:	bd10      	pop	{r4, pc}
 8017410:	4b03      	ldr	r3, [pc, #12]	@ (8017420 <rcutils_get_env+0x28>)
 8017412:	6023      	str	r3, [r4, #0]
 8017414:	bd10      	pop	{r4, pc}
 8017416:	4803      	ldr	r0, [pc, #12]	@ (8017424 <rcutils_get_env+0x2c>)
 8017418:	4770      	bx	lr
 801741a:	bf00      	nop
 801741c:	0801db34 	.word	0x0801db34
 8017420:	0801df0c 	.word	0x0801df0c
 8017424:	0801db18 	.word	0x0801db18

08017428 <rcutils_is_directory>:
 8017428:	2000      	movs	r0, #0
 801742a:	4770      	bx	lr

0801742c <rcutils_join_path>:
 801742c:	b082      	sub	sp, #8
 801742e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8017432:	2000      	movs	r0, #0
 8017434:	b002      	add	sp, #8
 8017436:	4770      	bx	lr

08017438 <rcutils_to_native_path>:
 8017438:	b084      	sub	sp, #16
 801743a:	a801      	add	r0, sp, #4
 801743c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8017440:	b004      	add	sp, #16
 8017442:	2000      	movs	r0, #0
 8017444:	4770      	bx	lr
 8017446:	bf00      	nop

08017448 <rcutils_format_string_limit>:
 8017448:	b40f      	push	{r0, r1, r2, r3}
 801744a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801744c:	b083      	sub	sp, #12
 801744e:	ac08      	add	r4, sp, #32
 8017450:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017456:	b34e      	cbz	r6, 80174ac <rcutils_format_string_limit+0x64>
 8017458:	a808      	add	r0, sp, #32
 801745a:	f7f7 f927 	bl	800e6ac <rcutils_allocator_is_valid>
 801745e:	b328      	cbz	r0, 80174ac <rcutils_format_string_limit+0x64>
 8017460:	2100      	movs	r1, #0
 8017462:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017464:	4632      	mov	r2, r6
 8017466:	4608      	mov	r0, r1
 8017468:	e9cd 3300 	strd	r3, r3, [sp]
 801746c:	f000 f8f4 	bl	8017658 <rcutils_vsnprintf>
 8017470:	1c43      	adds	r3, r0, #1
 8017472:	4605      	mov	r5, r0
 8017474:	d01a      	beq.n	80174ac <rcutils_format_string_limit+0x64>
 8017476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017478:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801747a:	1c47      	adds	r7, r0, #1
 801747c:	429f      	cmp	r7, r3
 801747e:	bf84      	itt	hi
 8017480:	461f      	movhi	r7, r3
 8017482:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8017486:	4638      	mov	r0, r7
 8017488:	9b08      	ldr	r3, [sp, #32]
 801748a:	4798      	blx	r3
 801748c:	4604      	mov	r4, r0
 801748e:	b168      	cbz	r0, 80174ac <rcutils_format_string_limit+0x64>
 8017490:	9b01      	ldr	r3, [sp, #4]
 8017492:	4632      	mov	r2, r6
 8017494:	4639      	mov	r1, r7
 8017496:	f000 f8df 	bl	8017658 <rcutils_vsnprintf>
 801749a:	2800      	cmp	r0, #0
 801749c:	db02      	blt.n	80174a4 <rcutils_format_string_limit+0x5c>
 801749e:	2300      	movs	r3, #0
 80174a0:	5563      	strb	r3, [r4, r5]
 80174a2:	e004      	b.n	80174ae <rcutils_format_string_limit+0x66>
 80174a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80174a8:	4620      	mov	r0, r4
 80174aa:	4798      	blx	r3
 80174ac:	2400      	movs	r4, #0
 80174ae:	4620      	mov	r0, r4
 80174b0:	b003      	add	sp, #12
 80174b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80174b6:	b004      	add	sp, #16
 80174b8:	4770      	bx	lr
 80174ba:	bf00      	nop

080174bc <rcutils_repl_str>:
 80174bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c0:	ed2d 8b02 	vpush	{d8}
 80174c4:	b087      	sub	sp, #28
 80174c6:	4680      	mov	r8, r0
 80174c8:	4608      	mov	r0, r1
 80174ca:	f8cd 8004 	str.w	r8, [sp, #4]
 80174ce:	ee08 2a10 	vmov	s16, r2
 80174d2:	468a      	mov	sl, r1
 80174d4:	4699      	mov	r9, r3
 80174d6:	f7e8 fead 	bl	8000234 <strlen>
 80174da:	2600      	movs	r6, #0
 80174dc:	4647      	mov	r7, r8
 80174de:	9002      	str	r0, [sp, #8]
 80174e0:	46b3      	mov	fp, r6
 80174e2:	2510      	movs	r5, #16
 80174e4:	46b0      	mov	r8, r6
 80174e6:	e01d      	b.n	8017524 <rcutils_repl_str+0x68>
 80174e8:	f10b 0b01 	add.w	fp, fp, #1
 80174ec:	455e      	cmp	r6, fp
 80174ee:	d211      	bcs.n	8017514 <rcutils_repl_str+0x58>
 80174f0:	442e      	add	r6, r5
 80174f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80174f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80174fa:	00b1      	lsls	r1, r6, #2
 80174fc:	4798      	blx	r3
 80174fe:	2800      	cmp	r0, #0
 8017500:	f000 8088 	beq.w	8017614 <rcutils_repl_str+0x158>
 8017504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017508:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801750c:	4680      	mov	r8, r0
 801750e:	bf28      	it	cs
 8017510:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8017514:	9a01      	ldr	r2, [sp, #4]
 8017516:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801751a:	1aa2      	subs	r2, r4, r2
 801751c:	f843 2c04 	str.w	r2, [r3, #-4]
 8017520:	9b02      	ldr	r3, [sp, #8]
 8017522:	18e7      	adds	r7, r4, r3
 8017524:	4651      	mov	r1, sl
 8017526:	4638      	mov	r0, r7
 8017528:	f003 f867 	bl	801a5fa <strstr>
 801752c:	4604      	mov	r4, r0
 801752e:	4640      	mov	r0, r8
 8017530:	2c00      	cmp	r4, #0
 8017532:	d1d9      	bne.n	80174e8 <rcutils_repl_str+0x2c>
 8017534:	46b8      	mov	r8, r7
 8017536:	4607      	mov	r7, r0
 8017538:	4640      	mov	r0, r8
 801753a:	f7e8 fe7b 	bl	8000234 <strlen>
 801753e:	9b01      	ldr	r3, [sp, #4]
 8017540:	eba8 0303 	sub.w	r3, r8, r3
 8017544:	181c      	adds	r4, r3, r0
 8017546:	9404      	str	r4, [sp, #16]
 8017548:	f1bb 0f00 	cmp.w	fp, #0
 801754c:	d04a      	beq.n	80175e4 <rcutils_repl_str+0x128>
 801754e:	ee18 0a10 	vmov	r0, s16
 8017552:	f7e8 fe6f 	bl	8000234 <strlen>
 8017556:	9b02      	ldr	r3, [sp, #8]
 8017558:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801755c:	1ac3      	subs	r3, r0, r3
 801755e:	fb0b 4303 	mla	r3, fp, r3, r4
 8017562:	461a      	mov	r2, r3
 8017564:	9305      	str	r3, [sp, #20]
 8017566:	4606      	mov	r6, r0
 8017568:	f8d9 3000 	ldr.w	r3, [r9]
 801756c:	1c50      	adds	r0, r2, #1
 801756e:	4798      	blx	r3
 8017570:	9003      	str	r0, [sp, #12]
 8017572:	2800      	cmp	r0, #0
 8017574:	d04f      	beq.n	8017616 <rcutils_repl_str+0x15a>
 8017576:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801757a:	683a      	ldr	r2, [r7, #0]
 801757c:	4641      	mov	r1, r8
 801757e:	f003 f8de 	bl	801a73e <memcpy>
 8017582:	683d      	ldr	r5, [r7, #0]
 8017584:	9b03      	ldr	r3, [sp, #12]
 8017586:	9701      	str	r7, [sp, #4]
 8017588:	46ba      	mov	sl, r7
 801758a:	441d      	add	r5, r3
 801758c:	9f02      	ldr	r7, [sp, #8]
 801758e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017592:	2401      	movs	r4, #1
 8017594:	46d1      	mov	r9, sl
 8017596:	ee18 aa10 	vmov	sl, s16
 801759a:	e00a      	b.n	80175b2 <rcutils_repl_str+0xf6>
 801759c:	f8d9 5000 	ldr.w	r5, [r9]
 80175a0:	1aaa      	subs	r2, r5, r2
 80175a2:	1885      	adds	r5, r0, r2
 80175a4:	f003 f8cb 	bl	801a73e <memcpy>
 80175a8:	45a3      	cmp	fp, r4
 80175aa:	f104 0201 	add.w	r2, r4, #1
 80175ae:	d935      	bls.n	801761c <rcutils_repl_str+0x160>
 80175b0:	4614      	mov	r4, r2
 80175b2:	4632      	mov	r2, r6
 80175b4:	4651      	mov	r1, sl
 80175b6:	4628      	mov	r0, r5
 80175b8:	f003 f8c1 	bl	801a73e <memcpy>
 80175bc:	f859 2b04 	ldr.w	r2, [r9], #4
 80175c0:	45a3      	cmp	fp, r4
 80175c2:	443a      	add	r2, r7
 80175c4:	eb05 0006 	add.w	r0, r5, r6
 80175c8:	eb08 0102 	add.w	r1, r8, r2
 80175cc:	d1e6      	bne.n	801759c <rcutils_repl_str+0xe0>
 80175ce:	9b04      	ldr	r3, [sp, #16]
 80175d0:	1a9a      	subs	r2, r3, r2
 80175d2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80175d6:	f003 f8b2 	bl	801a73e <memcpy>
 80175da:	9a03      	ldr	r2, [sp, #12]
 80175dc:	9905      	ldr	r1, [sp, #20]
 80175de:	2300      	movs	r3, #0
 80175e0:	5453      	strb	r3, [r2, r1]
 80175e2:	e00b      	b.n	80175fc <rcutils_repl_str+0x140>
 80175e4:	4620      	mov	r0, r4
 80175e6:	f8d9 3000 	ldr.w	r3, [r9]
 80175ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80175ee:	3001      	adds	r0, #1
 80175f0:	4798      	blx	r3
 80175f2:	9003      	str	r0, [sp, #12]
 80175f4:	b110      	cbz	r0, 80175fc <rcutils_repl_str+0x140>
 80175f6:	9901      	ldr	r1, [sp, #4]
 80175f8:	f003 f899 	bl	801a72e <strcpy>
 80175fc:	4638      	mov	r0, r7
 80175fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017602:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017606:	4798      	blx	r3
 8017608:	9803      	ldr	r0, [sp, #12]
 801760a:	b007      	add	sp, #28
 801760c:	ecbd 8b02 	vpop	{d8}
 8017610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017614:	4647      	mov	r7, r8
 8017616:	2300      	movs	r3, #0
 8017618:	9303      	str	r3, [sp, #12]
 801761a:	e7ef      	b.n	80175fc <rcutils_repl_str+0x140>
 801761c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017620:	e7db      	b.n	80175da <rcutils_repl_str+0x11e>
 8017622:	bf00      	nop

08017624 <rcutils_snprintf>:
 8017624:	b40c      	push	{r2, r3}
 8017626:	b530      	push	{r4, r5, lr}
 8017628:	b083      	sub	sp, #12
 801762a:	ab06      	add	r3, sp, #24
 801762c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017630:	9301      	str	r3, [sp, #4]
 8017632:	b152      	cbz	r2, 801764a <rcutils_snprintf+0x26>
 8017634:	b138      	cbz	r0, 8017646 <rcutils_snprintf+0x22>
 8017636:	b141      	cbz	r1, 801764a <rcutils_snprintf+0x26>
 8017638:	f002 feec 	bl	801a414 <vsniprintf>
 801763c:	b003      	add	sp, #12
 801763e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017642:	b002      	add	sp, #8
 8017644:	4770      	bx	lr
 8017646:	2900      	cmp	r1, #0
 8017648:	d0f6      	beq.n	8017638 <rcutils_snprintf+0x14>
 801764a:	f003 f843 	bl	801a6d4 <__errno>
 801764e:	2316      	movs	r3, #22
 8017650:	6003      	str	r3, [r0, #0]
 8017652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017656:	e7f1      	b.n	801763c <rcutils_snprintf+0x18>

08017658 <rcutils_vsnprintf>:
 8017658:	b570      	push	{r4, r5, r6, lr}
 801765a:	b13a      	cbz	r2, 801766c <rcutils_vsnprintf+0x14>
 801765c:	b120      	cbz	r0, 8017668 <rcutils_vsnprintf+0x10>
 801765e:	b129      	cbz	r1, 801766c <rcutils_vsnprintf+0x14>
 8017660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017664:	f002 bed6 	b.w	801a414 <vsniprintf>
 8017668:	2900      	cmp	r1, #0
 801766a:	d0f9      	beq.n	8017660 <rcutils_vsnprintf+0x8>
 801766c:	f003 f832 	bl	801a6d4 <__errno>
 8017670:	2316      	movs	r3, #22
 8017672:	6003      	str	r3, [r0, #0]
 8017674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017678:	bd70      	pop	{r4, r5, r6, pc}
 801767a:	bf00      	nop

0801767c <rcutils_strdup>:
 801767c:	b084      	sub	sp, #16
 801767e:	b570      	push	{r4, r5, r6, lr}
 8017680:	b082      	sub	sp, #8
 8017682:	ac07      	add	r4, sp, #28
 8017684:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017688:	4605      	mov	r5, r0
 801768a:	b1b0      	cbz	r0, 80176ba <rcutils_strdup+0x3e>
 801768c:	f7e8 fdd2 	bl	8000234 <strlen>
 8017690:	1c42      	adds	r2, r0, #1
 8017692:	9b07      	ldr	r3, [sp, #28]
 8017694:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017696:	9201      	str	r2, [sp, #4]
 8017698:	4606      	mov	r6, r0
 801769a:	4610      	mov	r0, r2
 801769c:	4798      	blx	r3
 801769e:	4604      	mov	r4, r0
 80176a0:	b128      	cbz	r0, 80176ae <rcutils_strdup+0x32>
 80176a2:	9a01      	ldr	r2, [sp, #4]
 80176a4:	4629      	mov	r1, r5
 80176a6:	f003 f84a 	bl	801a73e <memcpy>
 80176aa:	2300      	movs	r3, #0
 80176ac:	55a3      	strb	r3, [r4, r6]
 80176ae:	4620      	mov	r0, r4
 80176b0:	b002      	add	sp, #8
 80176b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176b6:	b004      	add	sp, #16
 80176b8:	4770      	bx	lr
 80176ba:	4604      	mov	r4, r0
 80176bc:	e7f7      	b.n	80176ae <rcutils_strdup+0x32>
 80176be:	bf00      	nop

080176c0 <rcutils_strndup>:
 80176c0:	b082      	sub	sp, #8
 80176c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176c4:	ac06      	add	r4, sp, #24
 80176c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80176ca:	4605      	mov	r5, r0
 80176cc:	b188      	cbz	r0, 80176f2 <rcutils_strndup+0x32>
 80176ce:	1c4f      	adds	r7, r1, #1
 80176d0:	460e      	mov	r6, r1
 80176d2:	4638      	mov	r0, r7
 80176d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176d6:	4790      	blx	r2
 80176d8:	4604      	mov	r4, r0
 80176da:	b128      	cbz	r0, 80176e8 <rcutils_strndup+0x28>
 80176dc:	463a      	mov	r2, r7
 80176de:	4629      	mov	r1, r5
 80176e0:	f003 f82d 	bl	801a73e <memcpy>
 80176e4:	2300      	movs	r3, #0
 80176e6:	55a3      	strb	r3, [r4, r6]
 80176e8:	4620      	mov	r0, r4
 80176ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80176ee:	b002      	add	sp, #8
 80176f0:	4770      	bx	lr
 80176f2:	4604      	mov	r4, r0
 80176f4:	e7f8      	b.n	80176e8 <rcutils_strndup+0x28>
 80176f6:	bf00      	nop

080176f8 <rcutils_get_zero_initialized_string_map>:
 80176f8:	4b01      	ldr	r3, [pc, #4]	@ (8017700 <rcutils_get_zero_initialized_string_map+0x8>)
 80176fa:	2000      	movs	r0, #0
 80176fc:	6018      	str	r0, [r3, #0]
 80176fe:	4770      	bx	lr
 8017700:	2000c190 	.word	0x2000c190

08017704 <rcutils_string_map_reserve>:
 8017704:	2800      	cmp	r0, #0
 8017706:	d05f      	beq.n	80177c8 <rcutils_string_map_reserve+0xc4>
 8017708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801770c:	460c      	mov	r4, r1
 801770e:	6801      	ldr	r1, [r0, #0]
 8017710:	b082      	sub	sp, #8
 8017712:	4605      	mov	r5, r0
 8017714:	b129      	cbz	r1, 8017722 <rcutils_string_map_reserve+0x1e>
 8017716:	68cb      	ldr	r3, [r1, #12]
 8017718:	42a3      	cmp	r3, r4
 801771a:	d906      	bls.n	801772a <rcutils_string_map_reserve+0x26>
 801771c:	461c      	mov	r4, r3
 801771e:	2900      	cmp	r1, #0
 8017720:	d1f9      	bne.n	8017716 <rcutils_string_map_reserve+0x12>
 8017722:	201f      	movs	r0, #31
 8017724:	b002      	add	sp, #8
 8017726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801772a:	688b      	ldr	r3, [r1, #8]
 801772c:	42a3      	cmp	r3, r4
 801772e:	d047      	beq.n	80177c0 <rcutils_string_map_reserve+0xbc>
 8017730:	6a0e      	ldr	r6, [r1, #32]
 8017732:	2c00      	cmp	r4, #0
 8017734:	d034      	beq.n	80177a0 <rcutils_string_map_reserve+0x9c>
 8017736:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801773a:	d243      	bcs.n	80177c4 <rcutils_string_map_reserve+0xc0>
 801773c:	00a7      	lsls	r7, r4, #2
 801773e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017742:	6808      	ldr	r0, [r1, #0]
 8017744:	4632      	mov	r2, r6
 8017746:	4639      	mov	r1, r7
 8017748:	47c0      	blx	r8
 801774a:	2800      	cmp	r0, #0
 801774c:	d03a      	beq.n	80177c4 <rcutils_string_map_reserve+0xc0>
 801774e:	682b      	ldr	r3, [r5, #0]
 8017750:	4632      	mov	r2, r6
 8017752:	6018      	str	r0, [r3, #0]
 8017754:	4639      	mov	r1, r7
 8017756:	6858      	ldr	r0, [r3, #4]
 8017758:	47c0      	blx	r8
 801775a:	2800      	cmp	r0, #0
 801775c:	d032      	beq.n	80177c4 <rcutils_string_map_reserve+0xc0>
 801775e:	682d      	ldr	r5, [r5, #0]
 8017760:	68ab      	ldr	r3, [r5, #8]
 8017762:	6068      	str	r0, [r5, #4]
 8017764:	42a3      	cmp	r3, r4
 8017766:	d226      	bcs.n	80177b6 <rcutils_string_map_reserve+0xb2>
 8017768:	682a      	ldr	r2, [r5, #0]
 801776a:	eb00 0c07 	add.w	ip, r0, r7
 801776e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017772:	45e6      	cmp	lr, ip
 8017774:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017778:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801777c:	d203      	bcs.n	8017786 <rcutils_string_map_reserve+0x82>
 801777e:	eb02 0c07 	add.w	ip, r2, r7
 8017782:	4566      	cmp	r6, ip
 8017784:	d322      	bcc.n	80177cc <rcutils_string_map_reserve+0xc8>
 8017786:	1ae3      	subs	r3, r4, r3
 8017788:	009a      	lsls	r2, r3, #2
 801778a:	4670      	mov	r0, lr
 801778c:	2100      	movs	r1, #0
 801778e:	9201      	str	r2, [sp, #4]
 8017790:	f002 ff0c 	bl	801a5ac <memset>
 8017794:	9a01      	ldr	r2, [sp, #4]
 8017796:	2100      	movs	r1, #0
 8017798:	4630      	mov	r0, r6
 801779a:	f002 ff07 	bl	801a5ac <memset>
 801779e:	e00a      	b.n	80177b6 <rcutils_string_map_reserve+0xb2>
 80177a0:	694f      	ldr	r7, [r1, #20]
 80177a2:	6808      	ldr	r0, [r1, #0]
 80177a4:	4631      	mov	r1, r6
 80177a6:	47b8      	blx	r7
 80177a8:	682b      	ldr	r3, [r5, #0]
 80177aa:	4631      	mov	r1, r6
 80177ac:	6858      	ldr	r0, [r3, #4]
 80177ae:	601c      	str	r4, [r3, #0]
 80177b0:	47b8      	blx	r7
 80177b2:	682d      	ldr	r5, [r5, #0]
 80177b4:	606c      	str	r4, [r5, #4]
 80177b6:	2000      	movs	r0, #0
 80177b8:	60ac      	str	r4, [r5, #8]
 80177ba:	b002      	add	sp, #8
 80177bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c0:	2000      	movs	r0, #0
 80177c2:	e7af      	b.n	8017724 <rcutils_string_map_reserve+0x20>
 80177c4:	200a      	movs	r0, #10
 80177c6:	e7ad      	b.n	8017724 <rcutils_string_map_reserve+0x20>
 80177c8:	200b      	movs	r0, #11
 80177ca:	4770      	bx	lr
 80177cc:	1f0b      	subs	r3, r1, #4
 80177ce:	4418      	add	r0, r3
 80177d0:	4413      	add	r3, r2
 80177d2:	3a04      	subs	r2, #4
 80177d4:	4417      	add	r7, r2
 80177d6:	2200      	movs	r2, #0
 80177d8:	f843 2f04 	str.w	r2, [r3, #4]!
 80177dc:	42bb      	cmp	r3, r7
 80177de:	f840 2f04 	str.w	r2, [r0, #4]!
 80177e2:	d1f9      	bne.n	80177d8 <rcutils_string_map_reserve+0xd4>
 80177e4:	e7e7      	b.n	80177b6 <rcutils_string_map_reserve+0xb2>
 80177e6:	bf00      	nop

080177e8 <rcutils_string_map_init>:
 80177e8:	b082      	sub	sp, #8
 80177ea:	b570      	push	{r4, r5, r6, lr}
 80177ec:	ac04      	add	r4, sp, #16
 80177ee:	e884 000c 	stmia.w	r4, {r2, r3}
 80177f2:	b380      	cbz	r0, 8017856 <rcutils_string_map_init+0x6e>
 80177f4:	6806      	ldr	r6, [r0, #0]
 80177f6:	4604      	mov	r4, r0
 80177f8:	b12e      	cbz	r6, 8017806 <rcutils_string_map_init+0x1e>
 80177fa:	251e      	movs	r5, #30
 80177fc:	4628      	mov	r0, r5
 80177fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017802:	b002      	add	sp, #8
 8017804:	4770      	bx	lr
 8017806:	a804      	add	r0, sp, #16
 8017808:	460d      	mov	r5, r1
 801780a:	f7f6 ff4f 	bl	800e6ac <rcutils_allocator_is_valid>
 801780e:	b310      	cbz	r0, 8017856 <rcutils_string_map_init+0x6e>
 8017810:	9b04      	ldr	r3, [sp, #16]
 8017812:	9908      	ldr	r1, [sp, #32]
 8017814:	2024      	movs	r0, #36	@ 0x24
 8017816:	4798      	blx	r3
 8017818:	6020      	str	r0, [r4, #0]
 801781a:	b310      	cbz	r0, 8017862 <rcutils_string_map_init+0x7a>
 801781c:	f10d 0e10 	add.w	lr, sp, #16
 8017820:	e9c0 6600 	strd	r6, r6, [r0]
 8017824:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017828:	f100 0c10 	add.w	ip, r0, #16
 801782c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017834:	f8de 3000 	ldr.w	r3, [lr]
 8017838:	f8cc 3000 	str.w	r3, [ip]
 801783c:	4629      	mov	r1, r5
 801783e:	4620      	mov	r0, r4
 8017840:	f7ff ff60 	bl	8017704 <rcutils_string_map_reserve>
 8017844:	4605      	mov	r5, r0
 8017846:	2800      	cmp	r0, #0
 8017848:	d0d8      	beq.n	80177fc <rcutils_string_map_init+0x14>
 801784a:	9b05      	ldr	r3, [sp, #20]
 801784c:	9908      	ldr	r1, [sp, #32]
 801784e:	6820      	ldr	r0, [r4, #0]
 8017850:	4798      	blx	r3
 8017852:	6026      	str	r6, [r4, #0]
 8017854:	e7d2      	b.n	80177fc <rcutils_string_map_init+0x14>
 8017856:	250b      	movs	r5, #11
 8017858:	4628      	mov	r0, r5
 801785a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801785e:	b002      	add	sp, #8
 8017860:	4770      	bx	lr
 8017862:	250a      	movs	r5, #10
 8017864:	e7ca      	b.n	80177fc <rcutils_string_map_init+0x14>
 8017866:	bf00      	nop

08017868 <rcutils_string_map_fini>:
 8017868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801786c:	b082      	sub	sp, #8
 801786e:	2800      	cmp	r0, #0
 8017870:	d03a      	beq.n	80178e8 <rcutils_string_map_fini+0x80>
 8017872:	6804      	ldr	r4, [r0, #0]
 8017874:	4606      	mov	r6, r0
 8017876:	2c00      	cmp	r4, #0
 8017878:	d032      	beq.n	80178e0 <rcutils_string_map_fini+0x78>
 801787a:	68a3      	ldr	r3, [r4, #8]
 801787c:	b32b      	cbz	r3, 80178ca <rcutils_string_map_fini+0x62>
 801787e:	2500      	movs	r5, #0
 8017880:	6822      	ldr	r2, [r4, #0]
 8017882:	462f      	mov	r7, r5
 8017884:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017888:	b1e0      	cbz	r0, 80178c4 <rcutils_string_map_fini+0x5c>
 801788a:	6a21      	ldr	r1, [r4, #32]
 801788c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017890:	9101      	str	r1, [sp, #4]
 8017892:	47c0      	blx	r8
 8017894:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017898:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801789c:	9901      	ldr	r1, [sp, #4]
 801789e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80178a2:	47c0      	blx	r8
 80178a4:	68e3      	ldr	r3, [r4, #12]
 80178a6:	6862      	ldr	r2, [r4, #4]
 80178a8:	3b01      	subs	r3, #1
 80178aa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80178ae:	60e3      	str	r3, [r4, #12]
 80178b0:	6834      	ldr	r4, [r6, #0]
 80178b2:	68a3      	ldr	r3, [r4, #8]
 80178b4:	3501      	adds	r5, #1
 80178b6:	429d      	cmp	r5, r3
 80178b8:	d207      	bcs.n	80178ca <rcutils_string_map_fini+0x62>
 80178ba:	6822      	ldr	r2, [r4, #0]
 80178bc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80178c0:	2800      	cmp	r0, #0
 80178c2:	d1e2      	bne.n	801788a <rcutils_string_map_fini+0x22>
 80178c4:	3501      	adds	r5, #1
 80178c6:	429d      	cmp	r5, r3
 80178c8:	d3dc      	bcc.n	8017884 <rcutils_string_map_fini+0x1c>
 80178ca:	2100      	movs	r1, #0
 80178cc:	4630      	mov	r0, r6
 80178ce:	f7ff ff19 	bl	8017704 <rcutils_string_map_reserve>
 80178d2:	4604      	mov	r4, r0
 80178d4:	b920      	cbnz	r0, 80178e0 <rcutils_string_map_fini+0x78>
 80178d6:	6830      	ldr	r0, [r6, #0]
 80178d8:	6943      	ldr	r3, [r0, #20]
 80178da:	6a01      	ldr	r1, [r0, #32]
 80178dc:	4798      	blx	r3
 80178de:	6034      	str	r4, [r6, #0]
 80178e0:	4620      	mov	r0, r4
 80178e2:	b002      	add	sp, #8
 80178e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178e8:	240b      	movs	r4, #11
 80178ea:	4620      	mov	r0, r4
 80178ec:	b002      	add	sp, #8
 80178ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178f2:	bf00      	nop

080178f4 <rcutils_string_map_getn>:
 80178f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f8:	b300      	cbz	r0, 801793c <rcutils_string_map_getn+0x48>
 80178fa:	6807      	ldr	r7, [r0, #0]
 80178fc:	b1ff      	cbz	r7, 801793e <rcutils_string_map_getn+0x4a>
 80178fe:	4688      	mov	r8, r1
 8017900:	b1e1      	cbz	r1, 801793c <rcutils_string_map_getn+0x48>
 8017902:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017906:	683e      	ldr	r6, [r7, #0]
 8017908:	f1ba 0f00 	cmp.w	sl, #0
 801790c:	d016      	beq.n	801793c <rcutils_string_map_getn+0x48>
 801790e:	4691      	mov	r9, r2
 8017910:	3e04      	subs	r6, #4
 8017912:	2400      	movs	r4, #0
 8017914:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801791c:	4628      	mov	r0, r5
 801791e:	3401      	adds	r4, #1
 8017920:	b155      	cbz	r5, 8017938 <rcutils_string_map_getn+0x44>
 8017922:	f7e8 fc87 	bl	8000234 <strlen>
 8017926:	4548      	cmp	r0, r9
 8017928:	4602      	mov	r2, r0
 801792a:	4629      	mov	r1, r5
 801792c:	bf38      	it	cc
 801792e:	464a      	movcc	r2, r9
 8017930:	4640      	mov	r0, r8
 8017932:	f002 fe50 	bl	801a5d6 <strncmp>
 8017936:	b128      	cbz	r0, 8017944 <rcutils_string_map_getn+0x50>
 8017938:	45a2      	cmp	sl, r4
 801793a:	d1eb      	bne.n	8017914 <rcutils_string_map_getn+0x20>
 801793c:	2700      	movs	r7, #0
 801793e:	4638      	mov	r0, r7
 8017940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	f853 700b 	ldr.w	r7, [r3, fp]
 801794a:	4638      	mov	r0, r7
 801794c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017950 <rmw_get_zero_initialized_context>:
 8017950:	b510      	push	{r4, lr}
 8017952:	4604      	mov	r4, r0
 8017954:	3010      	adds	r0, #16
 8017956:	f7f6 ff3b 	bl	800e7d0 <rmw_get_zero_initialized_init_options>
 801795a:	2300      	movs	r3, #0
 801795c:	2000      	movs	r0, #0
 801795e:	2100      	movs	r1, #0
 8017960:	e9c4 0100 	strd	r0, r1, [r4]
 8017964:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017968:	60a3      	str	r3, [r4, #8]
 801796a:	4620      	mov	r0, r4
 801796c:	bd10      	pop	{r4, pc}
 801796e:	bf00      	nop

08017970 <rmw_time_equal>:
 8017970:	b4f0      	push	{r4, r5, r6, r7}
 8017972:	b084      	sub	sp, #16
 8017974:	ac04      	add	r4, sp, #16
 8017976:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801797a:	4603      	mov	r3, r0
 801797c:	4924      	ldr	r1, [pc, #144]	@ (8017a10 <rmw_time_equal+0xa0>)
 801797e:	9e03      	ldr	r6, [sp, #12]
 8017980:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8017984:	2202      	movs	r2, #2
 8017986:	4299      	cmp	r1, r3
 8017988:	41aa      	sbcs	r2, r5
 801798a:	d330      	bcc.n	80179ee <rmw_time_equal+0x7e>
 801798c:	4c21      	ldr	r4, [pc, #132]	@ (8017a14 <rmw_time_equal+0xa4>)
 801798e:	fba3 3204 	umull	r3, r2, r3, r4
 8017992:	fb04 2205 	mla	r2, r4, r5, r2
 8017996:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801799a:	43dd      	mvns	r5, r3
 801799c:	1a8c      	subs	r4, r1, r2
 801799e:	4285      	cmp	r5, r0
 80179a0:	41b4      	sbcs	r4, r6
 80179a2:	d332      	bcc.n	8017a0a <rmw_time_equal+0x9a>
 80179a4:	eb10 0c03 	adds.w	ip, r0, r3
 80179a8:	eb42 0106 	adc.w	r1, r2, r6
 80179ac:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80179b0:	4817      	ldr	r0, [pc, #92]	@ (8017a10 <rmw_time_equal+0xa0>)
 80179b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80179b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80179b6:	2202      	movs	r2, #2
 80179b8:	4298      	cmp	r0, r3
 80179ba:	41b2      	sbcs	r2, r6
 80179bc:	d31c      	bcc.n	80179f8 <rmw_time_equal+0x88>
 80179be:	4c15      	ldr	r4, [pc, #84]	@ (8017a14 <rmw_time_equal+0xa4>)
 80179c0:	fba3 3204 	umull	r3, r2, r3, r4
 80179c4:	fb04 2206 	mla	r2, r4, r6, r2
 80179c8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80179cc:	43de      	mvns	r6, r3
 80179ce:	1a84      	subs	r4, r0, r2
 80179d0:	42ae      	cmp	r6, r5
 80179d2:	41bc      	sbcs	r4, r7
 80179d4:	d315      	bcc.n	8017a02 <rmw_time_equal+0x92>
 80179d6:	195b      	adds	r3, r3, r5
 80179d8:	eb42 0207 	adc.w	r2, r2, r7
 80179dc:	428a      	cmp	r2, r1
 80179de:	bf08      	it	eq
 80179e0:	4563      	cmpeq	r3, ip
 80179e2:	bf0c      	ite	eq
 80179e4:	2001      	moveq	r0, #1
 80179e6:	2000      	movne	r0, #0
 80179e8:	b004      	add	sp, #16
 80179ea:	bcf0      	pop	{r4, r5, r6, r7}
 80179ec:	4770      	bx	lr
 80179ee:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80179f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80179f6:	e7d9      	b.n	80179ac <rmw_time_equal+0x3c>
 80179f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80179fc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017a00:	e7ec      	b.n	80179dc <rmw_time_equal+0x6c>
 8017a02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a06:	4602      	mov	r2, r0
 8017a08:	e7e8      	b.n	80179dc <rmw_time_equal+0x6c>
 8017a0a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017a0e:	e7cd      	b.n	80179ac <rmw_time_equal+0x3c>
 8017a10:	25c17d04 	.word	0x25c17d04
 8017a14:	3b9aca00 	.word	0x3b9aca00

08017a18 <rmw_time_total_nsec>:
 8017a18:	b470      	push	{r4, r5, r6}
 8017a1a:	b085      	sub	sp, #20
 8017a1c:	ac04      	add	r4, sp, #16
 8017a1e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017a22:	4603      	mov	r3, r0
 8017a24:	4912      	ldr	r1, [pc, #72]	@ (8017a70 <rmw_time_total_nsec+0x58>)
 8017a26:	9e03      	ldr	r6, [sp, #12]
 8017a28:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8017a2c:	2202      	movs	r2, #2
 8017a2e:	4299      	cmp	r1, r3
 8017a30:	41aa      	sbcs	r2, r5
 8017a32:	d311      	bcc.n	8017a58 <rmw_time_total_nsec+0x40>
 8017a34:	4c0f      	ldr	r4, [pc, #60]	@ (8017a74 <rmw_time_total_nsec+0x5c>)
 8017a36:	fba3 3204 	umull	r3, r2, r3, r4
 8017a3a:	fb04 2205 	mla	r2, r4, r5, r2
 8017a3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a42:	43dd      	mvns	r5, r3
 8017a44:	1a8c      	subs	r4, r1, r2
 8017a46:	4285      	cmp	r5, r0
 8017a48:	41b4      	sbcs	r4, r6
 8017a4a:	d30c      	bcc.n	8017a66 <rmw_time_total_nsec+0x4e>
 8017a4c:	1818      	adds	r0, r3, r0
 8017a4e:	eb42 0106 	adc.w	r1, r2, r6
 8017a52:	b005      	add	sp, #20
 8017a54:	bc70      	pop	{r4, r5, r6}
 8017a56:	4770      	bx	lr
 8017a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a60:	b005      	add	sp, #20
 8017a62:	bc70      	pop	{r4, r5, r6}
 8017a64:	4770      	bx	lr
 8017a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a6a:	b005      	add	sp, #20
 8017a6c:	bc70      	pop	{r4, r5, r6}
 8017a6e:	4770      	bx	lr
 8017a70:	25c17d04 	.word	0x25c17d04
 8017a74:	3b9aca00 	.word	0x3b9aca00

08017a78 <rmw_get_zero_initialized_message_info>:
 8017a78:	b510      	push	{r4, lr}
 8017a7a:	2240      	movs	r2, #64	@ 0x40
 8017a7c:	4604      	mov	r4, r0
 8017a7e:	2100      	movs	r1, #0
 8017a80:	f002 fd94 	bl	801a5ac <memset>
 8017a84:	4620      	mov	r0, r4
 8017a86:	bd10      	pop	{r4, pc}

08017a88 <rmw_validate_full_topic_name>:
 8017a88:	2800      	cmp	r0, #0
 8017a8a:	d057      	beq.n	8017b3c <rmw_validate_full_topic_name+0xb4>
 8017a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a90:	460d      	mov	r5, r1
 8017a92:	2900      	cmp	r1, #0
 8017a94:	d054      	beq.n	8017b40 <rmw_validate_full_topic_name+0xb8>
 8017a96:	4616      	mov	r6, r2
 8017a98:	4604      	mov	r4, r0
 8017a9a:	f7e8 fbcb 	bl	8000234 <strlen>
 8017a9e:	b148      	cbz	r0, 8017ab4 <rmw_validate_full_topic_name+0x2c>
 8017aa0:	7823      	ldrb	r3, [r4, #0]
 8017aa2:	2b2f      	cmp	r3, #47	@ 0x2f
 8017aa4:	d00d      	beq.n	8017ac2 <rmw_validate_full_topic_name+0x3a>
 8017aa6:	2302      	movs	r3, #2
 8017aa8:	602b      	str	r3, [r5, #0]
 8017aaa:	b13e      	cbz	r6, 8017abc <rmw_validate_full_topic_name+0x34>
 8017aac:	2000      	movs	r0, #0
 8017aae:	6030      	str	r0, [r6, #0]
 8017ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	602b      	str	r3, [r5, #0]
 8017ab8:	2e00      	cmp	r6, #0
 8017aba:	d1f7      	bne.n	8017aac <rmw_validate_full_topic_name+0x24>
 8017abc:	2000      	movs	r0, #0
 8017abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ac2:	1e43      	subs	r3, r0, #1
 8017ac4:	5ce2      	ldrb	r2, [r4, r3]
 8017ac6:	2a2f      	cmp	r2, #47	@ 0x2f
 8017ac8:	d03c      	beq.n	8017b44 <rmw_validate_full_topic_name+0xbc>
 8017aca:	1e63      	subs	r3, r4, #1
 8017acc:	eb03 0800 	add.w	r8, r3, r0
 8017ad0:	f1c4 0e01 	rsb	lr, r4, #1
 8017ad4:	eb0e 0703 	add.w	r7, lr, r3
 8017ad8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017adc:	f021 0220 	bic.w	r2, r1, #32
 8017ae0:	3a41      	subs	r2, #65	@ 0x41
 8017ae2:	2a19      	cmp	r2, #25
 8017ae4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8017ae8:	d90b      	bls.n	8017b02 <rmw_validate_full_topic_name+0x7a>
 8017aea:	295f      	cmp	r1, #95	@ 0x5f
 8017aec:	d009      	beq.n	8017b02 <rmw_validate_full_topic_name+0x7a>
 8017aee:	f1bc 0f0a 	cmp.w	ip, #10
 8017af2:	d906      	bls.n	8017b02 <rmw_validate_full_topic_name+0x7a>
 8017af4:	2304      	movs	r3, #4
 8017af6:	602b      	str	r3, [r5, #0]
 8017af8:	2e00      	cmp	r6, #0
 8017afa:	d0df      	beq.n	8017abc <rmw_validate_full_topic_name+0x34>
 8017afc:	6037      	str	r7, [r6, #0]
 8017afe:	2000      	movs	r0, #0
 8017b00:	e7d6      	b.n	8017ab0 <rmw_validate_full_topic_name+0x28>
 8017b02:	4543      	cmp	r3, r8
 8017b04:	d1e6      	bne.n	8017ad4 <rmw_validate_full_topic_name+0x4c>
 8017b06:	4f1a      	ldr	r7, [pc, #104]	@ (8017b70 <rmw_validate_full_topic_name+0xe8>)
 8017b08:	2301      	movs	r3, #1
 8017b0a:	e004      	b.n	8017b16 <rmw_validate_full_topic_name+0x8e>
 8017b0c:	4298      	cmp	r0, r3
 8017b0e:	f104 0401 	add.w	r4, r4, #1
 8017b12:	d91c      	bls.n	8017b4e <rmw_validate_full_topic_name+0xc6>
 8017b14:	4613      	mov	r3, r2
 8017b16:	4298      	cmp	r0, r3
 8017b18:	f103 0201 	add.w	r2, r3, #1
 8017b1c:	d0f6      	beq.n	8017b0c <rmw_validate_full_topic_name+0x84>
 8017b1e:	7821      	ldrb	r1, [r4, #0]
 8017b20:	292f      	cmp	r1, #47	@ 0x2f
 8017b22:	d1f3      	bne.n	8017b0c <rmw_validate_full_topic_name+0x84>
 8017b24:	7861      	ldrb	r1, [r4, #1]
 8017b26:	292f      	cmp	r1, #47	@ 0x2f
 8017b28:	d01c      	beq.n	8017b64 <rmw_validate_full_topic_name+0xdc>
 8017b2a:	5dc9      	ldrb	r1, [r1, r7]
 8017b2c:	0749      	lsls	r1, r1, #29
 8017b2e:	d5ed      	bpl.n	8017b0c <rmw_validate_full_topic_name+0x84>
 8017b30:	2206      	movs	r2, #6
 8017b32:	602a      	str	r2, [r5, #0]
 8017b34:	2e00      	cmp	r6, #0
 8017b36:	d0c1      	beq.n	8017abc <rmw_validate_full_topic_name+0x34>
 8017b38:	6033      	str	r3, [r6, #0]
 8017b3a:	e7bf      	b.n	8017abc <rmw_validate_full_topic_name+0x34>
 8017b3c:	200b      	movs	r0, #11
 8017b3e:	4770      	bx	lr
 8017b40:	200b      	movs	r0, #11
 8017b42:	e7b5      	b.n	8017ab0 <rmw_validate_full_topic_name+0x28>
 8017b44:	2203      	movs	r2, #3
 8017b46:	602a      	str	r2, [r5, #0]
 8017b48:	2e00      	cmp	r6, #0
 8017b4a:	d1f5      	bne.n	8017b38 <rmw_validate_full_topic_name+0xb0>
 8017b4c:	e7b6      	b.n	8017abc <rmw_validate_full_topic_name+0x34>
 8017b4e:	28f7      	cmp	r0, #247	@ 0xf7
 8017b50:	d802      	bhi.n	8017b58 <rmw_validate_full_topic_name+0xd0>
 8017b52:	2000      	movs	r0, #0
 8017b54:	6028      	str	r0, [r5, #0]
 8017b56:	e7ab      	b.n	8017ab0 <rmw_validate_full_topic_name+0x28>
 8017b58:	2307      	movs	r3, #7
 8017b5a:	602b      	str	r3, [r5, #0]
 8017b5c:	2e00      	cmp	r6, #0
 8017b5e:	d0ad      	beq.n	8017abc <rmw_validate_full_topic_name+0x34>
 8017b60:	23f6      	movs	r3, #246	@ 0xf6
 8017b62:	e7e9      	b.n	8017b38 <rmw_validate_full_topic_name+0xb0>
 8017b64:	2205      	movs	r2, #5
 8017b66:	602a      	str	r2, [r5, #0]
 8017b68:	2e00      	cmp	r6, #0
 8017b6a:	d1e5      	bne.n	8017b38 <rmw_validate_full_topic_name+0xb0>
 8017b6c:	e7a6      	b.n	8017abc <rmw_validate_full_topic_name+0x34>
 8017b6e:	bf00      	nop
 8017b70:	0801e022 	.word	0x0801e022

08017b74 <rmw_validate_namespace_with_size>:
 8017b74:	b340      	cbz	r0, 8017bc8 <rmw_validate_namespace_with_size+0x54>
 8017b76:	b570      	push	{r4, r5, r6, lr}
 8017b78:	4614      	mov	r4, r2
 8017b7a:	b0c2      	sub	sp, #264	@ 0x108
 8017b7c:	b332      	cbz	r2, 8017bcc <rmw_validate_namespace_with_size+0x58>
 8017b7e:	2901      	cmp	r1, #1
 8017b80:	460d      	mov	r5, r1
 8017b82:	461e      	mov	r6, r3
 8017b84:	d102      	bne.n	8017b8c <rmw_validate_namespace_with_size+0x18>
 8017b86:	7803      	ldrb	r3, [r0, #0]
 8017b88:	2b2f      	cmp	r3, #47	@ 0x2f
 8017b8a:	d012      	beq.n	8017bb2 <rmw_validate_namespace_with_size+0x3e>
 8017b8c:	aa01      	add	r2, sp, #4
 8017b8e:	4669      	mov	r1, sp
 8017b90:	f7ff ff7a 	bl	8017a88 <rmw_validate_full_topic_name>
 8017b94:	b978      	cbnz	r0, 8017bb6 <rmw_validate_namespace_with_size+0x42>
 8017b96:	9b00      	ldr	r3, [sp, #0]
 8017b98:	b14b      	cbz	r3, 8017bae <rmw_validate_namespace_with_size+0x3a>
 8017b9a:	2b07      	cmp	r3, #7
 8017b9c:	d007      	beq.n	8017bae <rmw_validate_namespace_with_size+0x3a>
 8017b9e:	1e5a      	subs	r2, r3, #1
 8017ba0:	2a05      	cmp	r2, #5
 8017ba2:	d82b      	bhi.n	8017bfc <rmw_validate_namespace_with_size+0x88>
 8017ba4:	e8df f002 	tbb	[pc, r2]
 8017ba8:	1e212427 	.word	0x1e212427
 8017bac:	141b      	.short	0x141b
 8017bae:	2df5      	cmp	r5, #245	@ 0xf5
 8017bb0:	d803      	bhi.n	8017bba <rmw_validate_namespace_with_size+0x46>
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	6020      	str	r0, [r4, #0]
 8017bb6:	b042      	add	sp, #264	@ 0x108
 8017bb8:	bd70      	pop	{r4, r5, r6, pc}
 8017bba:	2307      	movs	r3, #7
 8017bbc:	6023      	str	r3, [r4, #0]
 8017bbe:	2e00      	cmp	r6, #0
 8017bc0:	d0f9      	beq.n	8017bb6 <rmw_validate_namespace_with_size+0x42>
 8017bc2:	23f4      	movs	r3, #244	@ 0xf4
 8017bc4:	6033      	str	r3, [r6, #0]
 8017bc6:	e7f6      	b.n	8017bb6 <rmw_validate_namespace_with_size+0x42>
 8017bc8:	200b      	movs	r0, #11
 8017bca:	4770      	bx	lr
 8017bcc:	200b      	movs	r0, #11
 8017bce:	e7f2      	b.n	8017bb6 <rmw_validate_namespace_with_size+0x42>
 8017bd0:	2306      	movs	r3, #6
 8017bd2:	6023      	str	r3, [r4, #0]
 8017bd4:	2e00      	cmp	r6, #0
 8017bd6:	d0ee      	beq.n	8017bb6 <rmw_validate_namespace_with_size+0x42>
 8017bd8:	9b01      	ldr	r3, [sp, #4]
 8017bda:	6033      	str	r3, [r6, #0]
 8017bdc:	e7eb      	b.n	8017bb6 <rmw_validate_namespace_with_size+0x42>
 8017bde:	2305      	movs	r3, #5
 8017be0:	6023      	str	r3, [r4, #0]
 8017be2:	e7f7      	b.n	8017bd4 <rmw_validate_namespace_with_size+0x60>
 8017be4:	2304      	movs	r3, #4
 8017be6:	6023      	str	r3, [r4, #0]
 8017be8:	e7f4      	b.n	8017bd4 <rmw_validate_namespace_with_size+0x60>
 8017bea:	2303      	movs	r3, #3
 8017bec:	6023      	str	r3, [r4, #0]
 8017bee:	e7f1      	b.n	8017bd4 <rmw_validate_namespace_with_size+0x60>
 8017bf0:	2302      	movs	r3, #2
 8017bf2:	6023      	str	r3, [r4, #0]
 8017bf4:	e7ee      	b.n	8017bd4 <rmw_validate_namespace_with_size+0x60>
 8017bf6:	2301      	movs	r3, #1
 8017bf8:	6023      	str	r3, [r4, #0]
 8017bfa:	e7eb      	b.n	8017bd4 <rmw_validate_namespace_with_size+0x60>
 8017bfc:	4a03      	ldr	r2, [pc, #12]	@ (8017c0c <rmw_validate_namespace_with_size+0x98>)
 8017bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017c02:	a802      	add	r0, sp, #8
 8017c04:	f7ff fd0e 	bl	8017624 <rcutils_snprintf>
 8017c08:	2001      	movs	r0, #1
 8017c0a:	e7d4      	b.n	8017bb6 <rmw_validate_namespace_with_size+0x42>
 8017c0c:	0801db50 	.word	0x0801db50

08017c10 <rmw_validate_namespace>:
 8017c10:	b168      	cbz	r0, 8017c2e <rmw_validate_namespace+0x1e>
 8017c12:	b570      	push	{r4, r5, r6, lr}
 8017c14:	460d      	mov	r5, r1
 8017c16:	4616      	mov	r6, r2
 8017c18:	4604      	mov	r4, r0
 8017c1a:	f7e8 fb0b 	bl	8000234 <strlen>
 8017c1e:	4633      	mov	r3, r6
 8017c20:	4601      	mov	r1, r0
 8017c22:	462a      	mov	r2, r5
 8017c24:	4620      	mov	r0, r4
 8017c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c2a:	f7ff bfa3 	b.w	8017b74 <rmw_validate_namespace_with_size>
 8017c2e:	200b      	movs	r0, #11
 8017c30:	4770      	bx	lr
 8017c32:	bf00      	nop

08017c34 <rmw_namespace_validation_result_string>:
 8017c34:	2807      	cmp	r0, #7
 8017c36:	bf9a      	itte	ls
 8017c38:	4b02      	ldrls	r3, [pc, #8]	@ (8017c44 <rmw_namespace_validation_result_string+0x10>)
 8017c3a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017c3e:	4802      	ldrhi	r0, [pc, #8]	@ (8017c48 <rmw_namespace_validation_result_string+0x14>)
 8017c40:	4770      	bx	lr
 8017c42:	bf00      	nop
 8017c44:	0801dd48 	.word	0x0801dd48
 8017c48:	0801dba0 	.word	0x0801dba0

08017c4c <rmw_validate_node_name>:
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	d03b      	beq.n	8017cc8 <rmw_validate_node_name+0x7c>
 8017c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c54:	460d      	mov	r5, r1
 8017c56:	2900      	cmp	r1, #0
 8017c58:	d038      	beq.n	8017ccc <rmw_validate_node_name+0x80>
 8017c5a:	4616      	mov	r6, r2
 8017c5c:	4604      	mov	r4, r0
 8017c5e:	f7e8 fae9 	bl	8000234 <strlen>
 8017c62:	b1e0      	cbz	r0, 8017c9e <rmw_validate_node_name+0x52>
 8017c64:	1e63      	subs	r3, r4, #1
 8017c66:	eb03 0800 	add.w	r8, r3, r0
 8017c6a:	f1c4 0101 	rsb	r1, r4, #1
 8017c6e:	18cf      	adds	r7, r1, r3
 8017c70:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017c74:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8017c78:	f02e 0c20 	bic.w	ip, lr, #32
 8017c7c:	2a09      	cmp	r2, #9
 8017c7e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8017c82:	d914      	bls.n	8017cae <rmw_validate_node_name+0x62>
 8017c84:	f1bc 0f19 	cmp.w	ip, #25
 8017c88:	d911      	bls.n	8017cae <rmw_validate_node_name+0x62>
 8017c8a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017c8e:	d00e      	beq.n	8017cae <rmw_validate_node_name+0x62>
 8017c90:	2302      	movs	r3, #2
 8017c92:	602b      	str	r3, [r5, #0]
 8017c94:	b106      	cbz	r6, 8017c98 <rmw_validate_node_name+0x4c>
 8017c96:	6037      	str	r7, [r6, #0]
 8017c98:	2000      	movs	r0, #0
 8017c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c9e:	2301      	movs	r3, #1
 8017ca0:	602b      	str	r3, [r5, #0]
 8017ca2:	2e00      	cmp	r6, #0
 8017ca4:	d0f8      	beq.n	8017c98 <rmw_validate_node_name+0x4c>
 8017ca6:	2000      	movs	r0, #0
 8017ca8:	6030      	str	r0, [r6, #0]
 8017caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cae:	4543      	cmp	r3, r8
 8017cb0:	d1dd      	bne.n	8017c6e <rmw_validate_node_name+0x22>
 8017cb2:	7822      	ldrb	r2, [r4, #0]
 8017cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8017cec <rmw_validate_node_name+0xa0>)
 8017cb6:	5cd3      	ldrb	r3, [r2, r3]
 8017cb8:	f013 0304 	ands.w	r3, r3, #4
 8017cbc:	d110      	bne.n	8017ce0 <rmw_validate_node_name+0x94>
 8017cbe:	28ff      	cmp	r0, #255	@ 0xff
 8017cc0:	d806      	bhi.n	8017cd0 <rmw_validate_node_name+0x84>
 8017cc2:	602b      	str	r3, [r5, #0]
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	e7e8      	b.n	8017c9a <rmw_validate_node_name+0x4e>
 8017cc8:	200b      	movs	r0, #11
 8017cca:	4770      	bx	lr
 8017ccc:	200b      	movs	r0, #11
 8017cce:	e7e4      	b.n	8017c9a <rmw_validate_node_name+0x4e>
 8017cd0:	2204      	movs	r2, #4
 8017cd2:	602a      	str	r2, [r5, #0]
 8017cd4:	2e00      	cmp	r6, #0
 8017cd6:	d0df      	beq.n	8017c98 <rmw_validate_node_name+0x4c>
 8017cd8:	22fe      	movs	r2, #254	@ 0xfe
 8017cda:	6032      	str	r2, [r6, #0]
 8017cdc:	4618      	mov	r0, r3
 8017cde:	e7dc      	b.n	8017c9a <rmw_validate_node_name+0x4e>
 8017ce0:	2303      	movs	r3, #3
 8017ce2:	602b      	str	r3, [r5, #0]
 8017ce4:	2e00      	cmp	r6, #0
 8017ce6:	d1de      	bne.n	8017ca6 <rmw_validate_node_name+0x5a>
 8017ce8:	e7d6      	b.n	8017c98 <rmw_validate_node_name+0x4c>
 8017cea:	bf00      	nop
 8017cec:	0801e022 	.word	0x0801e022

08017cf0 <rmw_node_name_validation_result_string>:
 8017cf0:	2804      	cmp	r0, #4
 8017cf2:	bf9a      	itte	ls
 8017cf4:	4b02      	ldrls	r3, [pc, #8]	@ (8017d00 <rmw_node_name_validation_result_string+0x10>)
 8017cf6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017cfa:	4802      	ldrhi	r0, [pc, #8]	@ (8017d04 <rmw_node_name_validation_result_string+0x14>)
 8017cfc:	4770      	bx	lr
 8017cfe:	bf00      	nop
 8017d00:	0801de54 	.word	0x0801de54
 8017d04:	0801dd68 	.word	0x0801dd68

08017d08 <on_status>:
 8017d08:	b082      	sub	sp, #8
 8017d0a:	b002      	add	sp, #8
 8017d0c:	4770      	bx	lr
 8017d0e:	bf00      	nop

08017d10 <on_topic>:
 8017d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d14:	4a22      	ldr	r2, [pc, #136]	@ (8017da0 <on_topic+0x90>)
 8017d16:	b094      	sub	sp, #80	@ 0x50
 8017d18:	6812      	ldr	r2, [r2, #0]
 8017d1a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017d1c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017d20:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017d24:	b3c2      	cbz	r2, 8017d98 <on_topic+0x88>
 8017d26:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017d2a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017d2e:	e001      	b.n	8017d34 <on_topic+0x24>
 8017d30:	6852      	ldr	r2, [r2, #4]
 8017d32:	b38a      	cbz	r2, 8017d98 <on_topic+0x88>
 8017d34:	6894      	ldr	r4, [r2, #8]
 8017d36:	8aa3      	ldrh	r3, [r4, #20]
 8017d38:	428b      	cmp	r3, r1
 8017d3a:	d1f9      	bne.n	8017d30 <on_topic+0x20>
 8017d3c:	7da3      	ldrb	r3, [r4, #22]
 8017d3e:	4283      	cmp	r3, r0
 8017d40:	d1f6      	bne.n	8017d30 <on_topic+0x20>
 8017d42:	2248      	movs	r2, #72	@ 0x48
 8017d44:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017d48:	4668      	mov	r0, sp
 8017d4a:	f002 fcf8 	bl	801a73e <memcpy>
 8017d4e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8017d52:	cb0c      	ldmia	r3, {r2, r3}
 8017d54:	4620      	mov	r0, r4
 8017d56:	f7f7 fe3f 	bl	800f9d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017d5a:	4607      	mov	r7, r0
 8017d5c:	b1e0      	cbz	r0, 8017d98 <on_topic+0x88>
 8017d5e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017d62:	4632      	mov	r2, r6
 8017d64:	4628      	mov	r0, r5
 8017d66:	f108 0110 	add.w	r1, r8, #16
 8017d6a:	f7f8 fe73 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8017d6e:	b930      	cbnz	r0, 8017d7e <on_topic+0x6e>
 8017d70:	480c      	ldr	r0, [pc, #48]	@ (8017da4 <on_topic+0x94>)
 8017d72:	4639      	mov	r1, r7
 8017d74:	b014      	add	sp, #80	@ 0x50
 8017d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d7a:	f000 b8bd 	b.w	8017ef8 <put_memory>
 8017d7e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8017d82:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8017d86:	f7f7 fc25 	bl	800f5d4 <rmw_uros_epoch_nanos>
 8017d8a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017d8e:	2305      	movs	r3, #5
 8017d90:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017d94:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017d98:	b014      	add	sp, #80	@ 0x50
 8017d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d9e:	bf00      	nop
 8017da0:	2000c0d4 	.word	0x2000c0d4
 8017da4:	2000c0c4 	.word	0x2000c0c4

08017da8 <on_request>:
 8017da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dac:	4823      	ldr	r0, [pc, #140]	@ (8017e3c <on_request+0x94>)
 8017dae:	b094      	sub	sp, #80	@ 0x50
 8017db0:	6800      	ldr	r0, [r0, #0]
 8017db2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017db4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017db8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017dba:	2800      	cmp	r0, #0
 8017dbc:	d03b      	beq.n	8017e36 <on_request+0x8e>
 8017dbe:	461d      	mov	r5, r3
 8017dc0:	e001      	b.n	8017dc6 <on_request+0x1e>
 8017dc2:	6840      	ldr	r0, [r0, #4]
 8017dc4:	b3b8      	cbz	r0, 8017e36 <on_request+0x8e>
 8017dc6:	6884      	ldr	r4, [r0, #8]
 8017dc8:	8b21      	ldrh	r1, [r4, #24]
 8017dca:	4291      	cmp	r1, r2
 8017dcc:	d1f9      	bne.n	8017dc2 <on_request+0x1a>
 8017dce:	2248      	movs	r2, #72	@ 0x48
 8017dd0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017dd4:	4668      	mov	r0, sp
 8017dd6:	f002 fcb2 	bl	801a73e <memcpy>
 8017dda:	f104 0320 	add.w	r3, r4, #32
 8017dde:	cb0c      	ldmia	r3, {r2, r3}
 8017de0:	4620      	mov	r0, r4
 8017de2:	f7f7 fdf9 	bl	800f9d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017de6:	4680      	mov	r8, r0
 8017de8:	b328      	cbz	r0, 8017e36 <on_request+0x8e>
 8017dea:	4638      	mov	r0, r7
 8017dec:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017df0:	4632      	mov	r2, r6
 8017df2:	f107 0110 	add.w	r1, r7, #16
 8017df6:	f7f8 fe2d 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8017dfa:	b930      	cbnz	r0, 8017e0a <on_request+0x62>
 8017dfc:	4810      	ldr	r0, [pc, #64]	@ (8017e40 <on_request+0x98>)
 8017dfe:	4641      	mov	r1, r8
 8017e00:	b014      	add	sp, #80	@ 0x50
 8017e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e06:	f000 b877 	b.w	8017ef8 <put_memory>
 8017e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e0c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017e10:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017e14:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017e18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017e20:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017e24:	f7f7 fbd6 	bl	800f5d4 <rmw_uros_epoch_nanos>
 8017e28:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017e2c:	2303      	movs	r3, #3
 8017e2e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017e32:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017e36:	b014      	add	sp, #80	@ 0x50
 8017e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e3c:	2000c0a4 	.word	0x2000c0a4
 8017e40:	2000c0c4 	.word	0x2000c0c4

08017e44 <on_reply>:
 8017e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e48:	4821      	ldr	r0, [pc, #132]	@ (8017ed0 <on_reply+0x8c>)
 8017e4a:	b094      	sub	sp, #80	@ 0x50
 8017e4c:	6800      	ldr	r0, [r0, #0]
 8017e4e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017e50:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017e54:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017e56:	b3b8      	cbz	r0, 8017ec8 <on_reply+0x84>
 8017e58:	461d      	mov	r5, r3
 8017e5a:	e001      	b.n	8017e60 <on_reply+0x1c>
 8017e5c:	6840      	ldr	r0, [r0, #4]
 8017e5e:	b398      	cbz	r0, 8017ec8 <on_reply+0x84>
 8017e60:	6884      	ldr	r4, [r0, #8]
 8017e62:	8b21      	ldrh	r1, [r4, #24]
 8017e64:	4291      	cmp	r1, r2
 8017e66:	d1f9      	bne.n	8017e5c <on_reply+0x18>
 8017e68:	2248      	movs	r2, #72	@ 0x48
 8017e6a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017e6e:	4668      	mov	r0, sp
 8017e70:	f002 fc65 	bl	801a73e <memcpy>
 8017e74:	f104 0320 	add.w	r3, r4, #32
 8017e78:	cb0c      	ldmia	r3, {r2, r3}
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	f7f7 fdac 	bl	800f9d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017e80:	4680      	mov	r8, r0
 8017e82:	b308      	cbz	r0, 8017ec8 <on_reply+0x84>
 8017e84:	4638      	mov	r0, r7
 8017e86:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017e8a:	4632      	mov	r2, r6
 8017e8c:	f107 0110 	add.w	r1, r7, #16
 8017e90:	f7f8 fde0 	bl	8010a54 <ucdr_deserialize_array_uint8_t>
 8017e94:	b930      	cbnz	r0, 8017ea4 <on_reply+0x60>
 8017e96:	480f      	ldr	r0, [pc, #60]	@ (8017ed4 <on_reply+0x90>)
 8017e98:	4641      	mov	r1, r8
 8017e9a:	b014      	add	sp, #80	@ 0x50
 8017e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea0:	f000 b82a 	b.w	8017ef8 <put_memory>
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017eaa:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017eae:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017eb2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017eb6:	f7f7 fb8d 	bl	800f5d4 <rmw_uros_epoch_nanos>
 8017eba:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017ebe:	2304      	movs	r3, #4
 8017ec0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017ec4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017ec8:	b014      	add	sp, #80	@ 0x50
 8017eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ece:	bf00      	nop
 8017ed0:	200076ec 	.word	0x200076ec
 8017ed4:	2000c0c4 	.word	0x2000c0c4

08017ed8 <get_memory>:
 8017ed8:	4603      	mov	r3, r0
 8017eda:	6840      	ldr	r0, [r0, #4]
 8017edc:	b158      	cbz	r0, 8017ef6 <get_memory+0x1e>
 8017ede:	6842      	ldr	r2, [r0, #4]
 8017ee0:	605a      	str	r2, [r3, #4]
 8017ee2:	b10a      	cbz	r2, 8017ee8 <get_memory+0x10>
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	6011      	str	r1, [r2, #0]
 8017ee8:	681a      	ldr	r2, [r3, #0]
 8017eea:	6042      	str	r2, [r0, #4]
 8017eec:	b102      	cbz	r2, 8017ef0 <get_memory+0x18>
 8017eee:	6010      	str	r0, [r2, #0]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	6002      	str	r2, [r0, #0]
 8017ef4:	6018      	str	r0, [r3, #0]
 8017ef6:	4770      	bx	lr

08017ef8 <put_memory>:
 8017ef8:	680b      	ldr	r3, [r1, #0]
 8017efa:	b10b      	cbz	r3, 8017f00 <put_memory+0x8>
 8017efc:	684a      	ldr	r2, [r1, #4]
 8017efe:	605a      	str	r2, [r3, #4]
 8017f00:	684a      	ldr	r2, [r1, #4]
 8017f02:	b102      	cbz	r2, 8017f06 <put_memory+0xe>
 8017f04:	6013      	str	r3, [r2, #0]
 8017f06:	6803      	ldr	r3, [r0, #0]
 8017f08:	428b      	cmp	r3, r1
 8017f0a:	6843      	ldr	r3, [r0, #4]
 8017f0c:	bf08      	it	eq
 8017f0e:	6002      	streq	r2, [r0, #0]
 8017f10:	604b      	str	r3, [r1, #4]
 8017f12:	b103      	cbz	r3, 8017f16 <put_memory+0x1e>
 8017f14:	6019      	str	r1, [r3, #0]
 8017f16:	2300      	movs	r3, #0
 8017f18:	600b      	str	r3, [r1, #0]
 8017f1a:	6041      	str	r1, [r0, #4]
 8017f1c:	4770      	bx	lr
 8017f1e:	bf00      	nop

08017f20 <rmw_destroy_client>:
 8017f20:	b570      	push	{r4, r5, r6, lr}
 8017f22:	b128      	cbz	r0, 8017f30 <rmw_destroy_client+0x10>
 8017f24:	4604      	mov	r4, r0
 8017f26:	6800      	ldr	r0, [r0, #0]
 8017f28:	460d      	mov	r5, r1
 8017f2a:	f7f7 ff65 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 8017f2e:	b910      	cbnz	r0, 8017f36 <rmw_destroy_client+0x16>
 8017f30:	2401      	movs	r4, #1
 8017f32:	4620      	mov	r0, r4
 8017f34:	bd70      	pop	{r4, r5, r6, pc}
 8017f36:	6863      	ldr	r3, [r4, #4]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d0f9      	beq.n	8017f30 <rmw_destroy_client+0x10>
 8017f3c:	2d00      	cmp	r5, #0
 8017f3e:	d0f7      	beq.n	8017f30 <rmw_destroy_client+0x10>
 8017f40:	6828      	ldr	r0, [r5, #0]
 8017f42:	f7f7 ff59 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d0f2      	beq.n	8017f30 <rmw_destroy_client+0x10>
 8017f4a:	686e      	ldr	r6, [r5, #4]
 8017f4c:	2e00      	cmp	r6, #0
 8017f4e:	d0ef      	beq.n	8017f30 <rmw_destroy_client+0x10>
 8017f50:	6864      	ldr	r4, [r4, #4]
 8017f52:	6932      	ldr	r2, [r6, #16]
 8017f54:	6920      	ldr	r0, [r4, #16]
 8017f56:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f5e:	6819      	ldr	r1, [r3, #0]
 8017f60:	f7f9 f99e 	bl	80112a0 <uxr_buffer_cancel_data>
 8017f64:	4602      	mov	r2, r0
 8017f66:	6920      	ldr	r0, [r4, #16]
 8017f68:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017f6c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017f70:	f7f7 fe28 	bl	800fbc4 <run_xrce_session>
 8017f74:	6920      	ldr	r0, [r4, #16]
 8017f76:	6932      	ldr	r2, [r6, #16]
 8017f78:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f80:	6819      	ldr	r1, [r3, #0]
 8017f82:	f7f8 fecd 	bl	8010d20 <uxr_buffer_delete_entity>
 8017f86:	4602      	mov	r2, r0
 8017f88:	6920      	ldr	r0, [r4, #16]
 8017f8a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017f8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017f92:	f7f7 fe17 	bl	800fbc4 <run_xrce_session>
 8017f96:	2800      	cmp	r0, #0
 8017f98:	4628      	mov	r0, r5
 8017f9a:	bf14      	ite	ne
 8017f9c:	2400      	movne	r4, #0
 8017f9e:	2402      	moveq	r4, #2
 8017fa0:	f7f7 fcf8 	bl	800f994 <rmw_uxrce_fini_client_memory>
 8017fa4:	e7c5      	b.n	8017f32 <rmw_destroy_client+0x12>
 8017fa6:	bf00      	nop

08017fa8 <rmw_get_implementation_identifier>:
 8017fa8:	4b01      	ldr	r3, [pc, #4]	@ (8017fb0 <rmw_get_implementation_identifier+0x8>)
 8017faa:	6818      	ldr	r0, [r3, #0]
 8017fac:	4770      	bx	lr
 8017fae:	bf00      	nop
 8017fb0:	0801de80 	.word	0x0801de80

08017fb4 <create_topic>:
 8017fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb8:	4605      	mov	r5, r0
 8017fba:	b084      	sub	sp, #16
 8017fbc:	4822      	ldr	r0, [pc, #136]	@ (8018048 <create_topic+0x94>)
 8017fbe:	460f      	mov	r7, r1
 8017fc0:	4616      	mov	r6, r2
 8017fc2:	f7ff ff89 	bl	8017ed8 <get_memory>
 8017fc6:	4604      	mov	r4, r0
 8017fc8:	2800      	cmp	r0, #0
 8017fca:	d039      	beq.n	8018040 <create_topic+0x8c>
 8017fcc:	692b      	ldr	r3, [r5, #16]
 8017fce:	6884      	ldr	r4, [r0, #8]
 8017fd0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8018050 <create_topic+0x9c>
 8017fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017fd8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017fdc:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017fe0:	1c42      	adds	r2, r0, #1
 8017fe2:	2102      	movs	r1, #2
 8017fe4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017fe8:	f7f9 f8f0 	bl	80111cc <uxr_object_id>
 8017fec:	223c      	movs	r2, #60	@ 0x3c
 8017fee:	6120      	str	r0, [r4, #16]
 8017ff0:	4641      	mov	r1, r8
 8017ff2:	4638      	mov	r0, r7
 8017ff4:	f7f7 fee6 	bl	800fdc4 <generate_topic_name>
 8017ff8:	b1f0      	cbz	r0, 8018038 <create_topic+0x84>
 8017ffa:	4f14      	ldr	r7, [pc, #80]	@ (801804c <create_topic+0x98>)
 8017ffc:	4630      	mov	r0, r6
 8017ffe:	2264      	movs	r2, #100	@ 0x64
 8018000:	4639      	mov	r1, r7
 8018002:	f7f7 feaf 	bl	800fd64 <generate_type_name>
 8018006:	b1b8      	cbz	r0, 8018038 <create_topic+0x84>
 8018008:	6928      	ldr	r0, [r5, #16]
 801800a:	2306      	movs	r3, #6
 801800c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018010:	f8cd 8000 	str.w	r8, [sp]
 8018014:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018018:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801801c:	6811      	ldr	r1, [r2, #0]
 801801e:	696b      	ldr	r3, [r5, #20]
 8018020:	6922      	ldr	r2, [r4, #16]
 8018022:	f7f8 fefb 	bl	8010e1c <uxr_buffer_create_topic_bin>
 8018026:	4602      	mov	r2, r0
 8018028:	6928      	ldr	r0, [r5, #16]
 801802a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801802e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018032:	f7f7 fdc7 	bl	800fbc4 <run_xrce_session>
 8018036:	b918      	cbnz	r0, 8018040 <create_topic+0x8c>
 8018038:	4620      	mov	r0, r4
 801803a:	f7f7 fcc1 	bl	800f9c0 <rmw_uxrce_fini_topic_memory>
 801803e:	2400      	movs	r4, #0
 8018040:	4620      	mov	r0, r4
 8018042:	b004      	add	sp, #16
 8018044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018048:	2000c0e4 	.word	0x2000c0e4
 801804c:	2000c1d0 	.word	0x2000c1d0
 8018050:	2000c194 	.word	0x2000c194

08018054 <destroy_topic>:
 8018054:	b538      	push	{r3, r4, r5, lr}
 8018056:	6985      	ldr	r5, [r0, #24]
 8018058:	b1d5      	cbz	r5, 8018090 <destroy_topic+0x3c>
 801805a:	4604      	mov	r4, r0
 801805c:	6928      	ldr	r0, [r5, #16]
 801805e:	6922      	ldr	r2, [r4, #16]
 8018060:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018064:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018068:	6819      	ldr	r1, [r3, #0]
 801806a:	f7f8 fe59 	bl	8010d20 <uxr_buffer_delete_entity>
 801806e:	4602      	mov	r2, r0
 8018070:	6928      	ldr	r0, [r5, #16]
 8018072:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018076:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801807a:	f7f7 fda3 	bl	800fbc4 <run_xrce_session>
 801807e:	2800      	cmp	r0, #0
 8018080:	4620      	mov	r0, r4
 8018082:	bf14      	ite	ne
 8018084:	2400      	movne	r4, #0
 8018086:	2402      	moveq	r4, #2
 8018088:	f7f7 fc9a 	bl	800f9c0 <rmw_uxrce_fini_topic_memory>
 801808c:	4620      	mov	r0, r4
 801808e:	bd38      	pop	{r3, r4, r5, pc}
 8018090:	2401      	movs	r4, #1
 8018092:	4620      	mov	r0, r4
 8018094:	bd38      	pop	{r3, r4, r5, pc}
 8018096:	bf00      	nop

08018098 <rmw_send_request>:
 8018098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801809c:	4604      	mov	r4, r0
 801809e:	6800      	ldr	r0, [r0, #0]
 80180a0:	b08b      	sub	sp, #44	@ 0x2c
 80180a2:	460e      	mov	r6, r1
 80180a4:	4615      	mov	r5, r2
 80180a6:	b128      	cbz	r0, 80180b4 <rmw_send_request+0x1c>
 80180a8:	4b21      	ldr	r3, [pc, #132]	@ (8018130 <rmw_send_request+0x98>)
 80180aa:	6819      	ldr	r1, [r3, #0]
 80180ac:	f7e8 f8b8 	bl	8000220 <strcmp>
 80180b0:	2800      	cmp	r0, #0
 80180b2:	d139      	bne.n	8018128 <rmw_send_request+0x90>
 80180b4:	6864      	ldr	r4, [r4, #4]
 80180b6:	6963      	ldr	r3, [r4, #20]
 80180b8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80180bc:	689b      	ldr	r3, [r3, #8]
 80180be:	4798      	blx	r3
 80180c0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80180c4:	4630      	mov	r0, r6
 80180c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80180ca:	4798      	blx	r3
 80180cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80180d0:	9000      	str	r0, [sp, #0]
 80180d2:	6922      	ldr	r2, [r4, #16]
 80180d4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80180d6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80180da:	ab02      	add	r3, sp, #8
 80180dc:	f7fb f99a 	bl	8013414 <uxr_prepare_output_stream>
 80180e0:	2700      	movs	r7, #0
 80180e2:	6028      	str	r0, [r5, #0]
 80180e4:	606f      	str	r7, [r5, #4]
 80180e6:	b198      	cbz	r0, 8018110 <rmw_send_request+0x78>
 80180e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80180ec:	a902      	add	r1, sp, #8
 80180ee:	4630      	mov	r0, r6
 80180f0:	4798      	blx	r3
 80180f2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80180f6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d00c      	beq.n	8018118 <rmw_send_request+0x80>
 80180fe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018100:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018104:	f7f9 feb2 	bl	8011e6c <uxr_run_session_until_confirm_delivery>
 8018108:	4638      	mov	r0, r7
 801810a:	b00b      	add	sp, #44	@ 0x2c
 801810c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018110:	2001      	movs	r0, #1
 8018112:	b00b      	add	sp, #44	@ 0x2c
 8018114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018118:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801811c:	f7f9 fae6 	bl	80116ec <uxr_flash_output_streams>
 8018120:	4638      	mov	r0, r7
 8018122:	b00b      	add	sp, #44	@ 0x2c
 8018124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018128:	200c      	movs	r0, #12
 801812a:	b00b      	add	sp, #44	@ 0x2c
 801812c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018130:	0801de80 	.word	0x0801de80

08018134 <rmw_take_request>:
 8018134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018138:	4605      	mov	r5, r0
 801813a:	6800      	ldr	r0, [r0, #0]
 801813c:	b089      	sub	sp, #36	@ 0x24
 801813e:	460c      	mov	r4, r1
 8018140:	4690      	mov	r8, r2
 8018142:	461e      	mov	r6, r3
 8018144:	b128      	cbz	r0, 8018152 <rmw_take_request+0x1e>
 8018146:	4b28      	ldr	r3, [pc, #160]	@ (80181e8 <rmw_take_request+0xb4>)
 8018148:	6819      	ldr	r1, [r3, #0]
 801814a:	f7e8 f869 	bl	8000220 <strcmp>
 801814e:	2800      	cmp	r0, #0
 8018150:	d146      	bne.n	80181e0 <rmw_take_request+0xac>
 8018152:	b10e      	cbz	r6, 8018158 <rmw_take_request+0x24>
 8018154:	2300      	movs	r3, #0
 8018156:	7033      	strb	r3, [r6, #0]
 8018158:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801815c:	f7f7 fcb4 	bl	800fac8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018160:	4648      	mov	r0, r9
 8018162:	f7f7 fc89 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018166:	4607      	mov	r7, r0
 8018168:	b3b0      	cbz	r0, 80181d8 <rmw_take_request+0xa4>
 801816a:	6885      	ldr	r5, [r0, #8]
 801816c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8018170:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8018174:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018178:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801817c:	7423      	strb	r3, [r4, #16]
 801817e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8018182:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8018186:	74e2      	strb	r2, [r4, #19]
 8018188:	f8a4 3011 	strh.w	r3, [r4, #17]
 801818c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8018190:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8018194:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8018198:	61e1      	str	r1, [r4, #28]
 801819a:	6162      	str	r2, [r4, #20]
 801819c:	61a3      	str	r3, [r4, #24]
 801819e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80181a2:	689b      	ldr	r3, [r3, #8]
 80181a4:	4798      	blx	r3
 80181a6:	6844      	ldr	r4, [r0, #4]
 80181a8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80181ac:	f105 0110 	add.w	r1, r5, #16
 80181b0:	4668      	mov	r0, sp
 80181b2:	f7f5 f859 	bl	800d268 <ucdr_init_buffer>
 80181b6:	68e3      	ldr	r3, [r4, #12]
 80181b8:	4641      	mov	r1, r8
 80181ba:	4668      	mov	r0, sp
 80181bc:	4798      	blx	r3
 80181be:	4639      	mov	r1, r7
 80181c0:	4604      	mov	r4, r0
 80181c2:	480a      	ldr	r0, [pc, #40]	@ (80181ec <rmw_take_request+0xb8>)
 80181c4:	f7ff fe98 	bl	8017ef8 <put_memory>
 80181c8:	b106      	cbz	r6, 80181cc <rmw_take_request+0x98>
 80181ca:	7034      	strb	r4, [r6, #0]
 80181cc:	f084 0001 	eor.w	r0, r4, #1
 80181d0:	b2c0      	uxtb	r0, r0
 80181d2:	b009      	add	sp, #36	@ 0x24
 80181d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181d8:	2001      	movs	r0, #1
 80181da:	b009      	add	sp, #36	@ 0x24
 80181dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181e0:	200c      	movs	r0, #12
 80181e2:	b009      	add	sp, #36	@ 0x24
 80181e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181e8:	0801de80 	.word	0x0801de80
 80181ec:	2000c0c4 	.word	0x2000c0c4

080181f0 <rmw_send_response>:
 80181f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181f2:	4605      	mov	r5, r0
 80181f4:	6800      	ldr	r0, [r0, #0]
 80181f6:	b091      	sub	sp, #68	@ 0x44
 80181f8:	460c      	mov	r4, r1
 80181fa:	4616      	mov	r6, r2
 80181fc:	b128      	cbz	r0, 801820a <rmw_send_response+0x1a>
 80181fe:	4b29      	ldr	r3, [pc, #164]	@ (80182a4 <rmw_send_response+0xb4>)
 8018200:	6819      	ldr	r1, [r3, #0]
 8018202:	f7e8 f80d 	bl	8000220 <strcmp>
 8018206:	2800      	cmp	r0, #0
 8018208:	d141      	bne.n	801828e <rmw_send_response+0x9e>
 801820a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801820e:	9306      	str	r3, [sp, #24]
 8018210:	4623      	mov	r3, r4
 8018212:	9207      	str	r2, [sp, #28]
 8018214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018218:	686d      	ldr	r5, [r5, #4]
 801821a:	789b      	ldrb	r3, [r3, #2]
 801821c:	68a1      	ldr	r1, [r4, #8]
 801821e:	f88d 2017 	strb.w	r2, [sp, #23]
 8018222:	f88d 3016 	strb.w	r3, [sp, #22]
 8018226:	68e2      	ldr	r2, [r4, #12]
 8018228:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801822c:	6860      	ldr	r0, [r4, #4]
 801822e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018232:	ab02      	add	r3, sp, #8
 8018234:	c307      	stmia	r3!, {r0, r1, r2}
 8018236:	696b      	ldr	r3, [r5, #20]
 8018238:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801823a:	68db      	ldr	r3, [r3, #12]
 801823c:	4798      	blx	r3
 801823e:	6844      	ldr	r4, [r0, #4]
 8018240:	4630      	mov	r0, r6
 8018242:	6923      	ldr	r3, [r4, #16]
 8018244:	4798      	blx	r3
 8018246:	f100 0318 	add.w	r3, r0, #24
 801824a:	6938      	ldr	r0, [r7, #16]
 801824c:	9300      	str	r3, [sp, #0]
 801824e:	692a      	ldr	r2, [r5, #16]
 8018250:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018252:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018256:	ab08      	add	r3, sp, #32
 8018258:	f7fb f8dc 	bl	8013414 <uxr_prepare_output_stream>
 801825c:	b910      	cbnz	r0, 8018264 <rmw_send_response+0x74>
 801825e:	2001      	movs	r0, #1
 8018260:	b011      	add	sp, #68	@ 0x44
 8018262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018264:	a902      	add	r1, sp, #8
 8018266:	a808      	add	r0, sp, #32
 8018268:	f7fc f962 	bl	8014530 <uxr_serialize_SampleIdentity>
 801826c:	68a3      	ldr	r3, [r4, #8]
 801826e:	a908      	add	r1, sp, #32
 8018270:	4630      	mov	r0, r6
 8018272:	4798      	blx	r3
 8018274:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018278:	6938      	ldr	r0, [r7, #16]
 801827a:	2b01      	cmp	r3, #1
 801827c:	d00a      	beq.n	8018294 <rmw_send_response+0xa4>
 801827e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018280:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018284:	f7f9 fdf2 	bl	8011e6c <uxr_run_session_until_confirm_delivery>
 8018288:	2000      	movs	r0, #0
 801828a:	b011      	add	sp, #68	@ 0x44
 801828c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801828e:	200c      	movs	r0, #12
 8018290:	b011      	add	sp, #68	@ 0x44
 8018292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018294:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018298:	f7f9 fa28 	bl	80116ec <uxr_flash_output_streams>
 801829c:	2000      	movs	r0, #0
 801829e:	b011      	add	sp, #68	@ 0x44
 80182a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182a2:	bf00      	nop
 80182a4:	0801de80 	.word	0x0801de80

080182a8 <rmw_take_response>:
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ac:	4604      	mov	r4, r0
 80182ae:	6800      	ldr	r0, [r0, #0]
 80182b0:	b088      	sub	sp, #32
 80182b2:	4688      	mov	r8, r1
 80182b4:	4617      	mov	r7, r2
 80182b6:	461d      	mov	r5, r3
 80182b8:	b120      	cbz	r0, 80182c4 <rmw_take_response+0x1c>
 80182ba:	4b1e      	ldr	r3, [pc, #120]	@ (8018334 <rmw_take_response+0x8c>)
 80182bc:	6819      	ldr	r1, [r3, #0]
 80182be:	f7e7 ffaf 	bl	8000220 <strcmp>
 80182c2:	bb78      	cbnz	r0, 8018324 <rmw_take_response+0x7c>
 80182c4:	b10d      	cbz	r5, 80182ca <rmw_take_response+0x22>
 80182c6:	2300      	movs	r3, #0
 80182c8:	702b      	strb	r3, [r5, #0]
 80182ca:	6864      	ldr	r4, [r4, #4]
 80182cc:	f7f7 fbfc 	bl	800fac8 <rmw_uxrce_clean_expired_static_input_buffer>
 80182d0:	4620      	mov	r0, r4
 80182d2:	f7f7 fbd1 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 80182d6:	4606      	mov	r6, r0
 80182d8:	b340      	cbz	r0, 801832c <rmw_take_response+0x84>
 80182da:	6963      	ldr	r3, [r4, #20]
 80182dc:	6884      	ldr	r4, [r0, #8]
 80182de:	68db      	ldr	r3, [r3, #12]
 80182e0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80182e4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80182e8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80182ec:	4798      	blx	r3
 80182ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80182f2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80182f6:	f104 0110 	add.w	r1, r4, #16
 80182fa:	4668      	mov	r0, sp
 80182fc:	f7f4 ffb4 	bl	800d268 <ucdr_init_buffer>
 8018300:	4639      	mov	r1, r7
 8018302:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018306:	4668      	mov	r0, sp
 8018308:	4798      	blx	r3
 801830a:	4631      	mov	r1, r6
 801830c:	4604      	mov	r4, r0
 801830e:	480a      	ldr	r0, [pc, #40]	@ (8018338 <rmw_take_response+0x90>)
 8018310:	f7ff fdf2 	bl	8017ef8 <put_memory>
 8018314:	b105      	cbz	r5, 8018318 <rmw_take_response+0x70>
 8018316:	702c      	strb	r4, [r5, #0]
 8018318:	f084 0001 	eor.w	r0, r4, #1
 801831c:	b2c0      	uxtb	r0, r0
 801831e:	b008      	add	sp, #32
 8018320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018324:	200c      	movs	r0, #12
 8018326:	b008      	add	sp, #32
 8018328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801832c:	2001      	movs	r0, #1
 801832e:	b008      	add	sp, #32
 8018330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018334:	0801de80 	.word	0x0801de80
 8018338:	2000c0c4 	.word	0x2000c0c4

0801833c <rmw_take_with_info>:
 801833c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801833e:	4604      	mov	r4, r0
 8018340:	6800      	ldr	r0, [r0, #0]
 8018342:	b089      	sub	sp, #36	@ 0x24
 8018344:	460f      	mov	r7, r1
 8018346:	4615      	mov	r5, r2
 8018348:	b128      	cbz	r0, 8018356 <rmw_take_with_info+0x1a>
 801834a:	4b24      	ldr	r3, [pc, #144]	@ (80183dc <rmw_take_with_info+0xa0>)
 801834c:	6819      	ldr	r1, [r3, #0]
 801834e:	f7e7 ff67 	bl	8000220 <strcmp>
 8018352:	2800      	cmp	r0, #0
 8018354:	d13e      	bne.n	80183d4 <rmw_take_with_info+0x98>
 8018356:	b305      	cbz	r5, 801839a <rmw_take_with_info+0x5e>
 8018358:	6864      	ldr	r4, [r4, #4]
 801835a:	2300      	movs	r3, #0
 801835c:	702b      	strb	r3, [r5, #0]
 801835e:	f7f7 fbb3 	bl	800fac8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018362:	4620      	mov	r0, r4
 8018364:	f7f7 fb88 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018368:	4606      	mov	r6, r0
 801836a:	b1f0      	cbz	r0, 80183aa <rmw_take_with_info+0x6e>
 801836c:	6881      	ldr	r1, [r0, #8]
 801836e:	4668      	mov	r0, sp
 8018370:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018374:	3110      	adds	r1, #16
 8018376:	f7f4 ff77 	bl	800d268 <ucdr_init_buffer>
 801837a:	69a3      	ldr	r3, [r4, #24]
 801837c:	4639      	mov	r1, r7
 801837e:	68db      	ldr	r3, [r3, #12]
 8018380:	4668      	mov	r0, sp
 8018382:	4798      	blx	r3
 8018384:	4631      	mov	r1, r6
 8018386:	4604      	mov	r4, r0
 8018388:	4815      	ldr	r0, [pc, #84]	@ (80183e0 <rmw_take_with_info+0xa4>)
 801838a:	f7ff fdb5 	bl	8017ef8 <put_memory>
 801838e:	702c      	strb	r4, [r5, #0]
 8018390:	f084 0001 	eor.w	r0, r4, #1
 8018394:	b2c0      	uxtb	r0, r0
 8018396:	b009      	add	sp, #36	@ 0x24
 8018398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801839a:	6864      	ldr	r4, [r4, #4]
 801839c:	f7f7 fb94 	bl	800fac8 <rmw_uxrce_clean_expired_static_input_buffer>
 80183a0:	4620      	mov	r0, r4
 80183a2:	f7f7 fb69 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 80183a6:	4605      	mov	r5, r0
 80183a8:	b910      	cbnz	r0, 80183b0 <rmw_take_with_info+0x74>
 80183aa:	2001      	movs	r0, #1
 80183ac:	b009      	add	sp, #36	@ 0x24
 80183ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183b0:	68a9      	ldr	r1, [r5, #8]
 80183b2:	4668      	mov	r0, sp
 80183b4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80183b8:	3110      	adds	r1, #16
 80183ba:	f7f4 ff55 	bl	800d268 <ucdr_init_buffer>
 80183be:	69a3      	ldr	r3, [r4, #24]
 80183c0:	4639      	mov	r1, r7
 80183c2:	68db      	ldr	r3, [r3, #12]
 80183c4:	4668      	mov	r0, sp
 80183c6:	4798      	blx	r3
 80183c8:	4629      	mov	r1, r5
 80183ca:	4604      	mov	r4, r0
 80183cc:	4804      	ldr	r0, [pc, #16]	@ (80183e0 <rmw_take_with_info+0xa4>)
 80183ce:	f7ff fd93 	bl	8017ef8 <put_memory>
 80183d2:	e7dd      	b.n	8018390 <rmw_take_with_info+0x54>
 80183d4:	200c      	movs	r0, #12
 80183d6:	b009      	add	sp, #36	@ 0x24
 80183d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183da:	bf00      	nop
 80183dc:	0801de80 	.word	0x0801de80
 80183e0:	2000c0c4 	.word	0x2000c0c4

080183e4 <rmw_wait>:
 80183e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183e8:	b089      	sub	sp, #36	@ 0x24
 80183ea:	4605      	mov	r5, r0
 80183ec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80183ee:	460e      	mov	r6, r1
 80183f0:	4698      	mov	r8, r3
 80183f2:	4691      	mov	r9, r2
 80183f4:	2a00      	cmp	r2, #0
 80183f6:	f000 810a 	beq.w	801860e <rmw_wait+0x22a>
 80183fa:	b16c      	cbz	r4, 8018418 <rmw_wait+0x34>
 80183fc:	4bae      	ldr	r3, [pc, #696]	@ (80186b8 <rmw_wait+0x2d4>)
 80183fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018400:	af04      	add	r7, sp, #16
 8018402:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018406:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801840a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801840e:	f7ff faaf 	bl	8017970 <rmw_time_equal>
 8018412:	2800      	cmp	r0, #0
 8018414:	f000 8127 	beq.w	8018666 <rmw_wait+0x282>
 8018418:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801841c:	f7f7 fb54 	bl	800fac8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018420:	4ba6      	ldr	r3, [pc, #664]	@ (80186bc <rmw_wait+0x2d8>)
 8018422:	681c      	ldr	r4, [r3, #0]
 8018424:	b14c      	cbz	r4, 801843a <rmw_wait+0x56>
 8018426:	4623      	mov	r3, r4
 8018428:	2100      	movs	r1, #0
 801842a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801842e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018432:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8018436:	2b00      	cmp	r3, #0
 8018438:	d1f7      	bne.n	801842a <rmw_wait+0x46>
 801843a:	f1b9 0f00 	cmp.w	r9, #0
 801843e:	d011      	beq.n	8018464 <rmw_wait+0x80>
 8018440:	f8d9 1000 	ldr.w	r1, [r9]
 8018444:	b171      	cbz	r1, 8018464 <rmw_wait+0x80>
 8018446:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801844a:	2300      	movs	r3, #0
 801844c:	2001      	movs	r0, #1
 801844e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018452:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018454:	6912      	ldr	r2, [r2, #16]
 8018456:	3301      	adds	r3, #1
 8018458:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801845c:	4299      	cmp	r1, r3
 801845e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018462:	d1f4      	bne.n	801844e <rmw_wait+0x6a>
 8018464:	f1b8 0f00 	cmp.w	r8, #0
 8018468:	d011      	beq.n	801848e <rmw_wait+0xaa>
 801846a:	f8d8 1000 	ldr.w	r1, [r8]
 801846e:	b171      	cbz	r1, 801848e <rmw_wait+0xaa>
 8018470:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018474:	2300      	movs	r3, #0
 8018476:	2001      	movs	r0, #1
 8018478:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801847c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801847e:	6912      	ldr	r2, [r2, #16]
 8018480:	3301      	adds	r3, #1
 8018482:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018486:	4299      	cmp	r1, r3
 8018488:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801848c:	d1f4      	bne.n	8018478 <rmw_wait+0x94>
 801848e:	b185      	cbz	r5, 80184b2 <rmw_wait+0xce>
 8018490:	6829      	ldr	r1, [r5, #0]
 8018492:	b171      	cbz	r1, 80184b2 <rmw_wait+0xce>
 8018494:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8018498:	2300      	movs	r3, #0
 801849a:	2001      	movs	r0, #1
 801849c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80184a0:	6a12      	ldr	r2, [r2, #32]
 80184a2:	6912      	ldr	r2, [r2, #16]
 80184a4:	3301      	adds	r3, #1
 80184a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80184aa:	4299      	cmp	r1, r3
 80184ac:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80184b0:	d1f4      	bne.n	801849c <rmw_wait+0xb8>
 80184b2:	b34c      	cbz	r4, 8018508 <rmw_wait+0x124>
 80184b4:	4622      	mov	r2, r4
 80184b6:	2300      	movs	r3, #0
 80184b8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80184bc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80184c0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80184c4:	440b      	add	r3, r1
 80184c6:	b2db      	uxtb	r3, r3
 80184c8:	2a00      	cmp	r2, #0
 80184ca:	d1f5      	bne.n	80184b8 <rmw_wait+0xd4>
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	f000 8084 	beq.w	80185da <rmw_wait+0x1f6>
 80184d2:	1c7a      	adds	r2, r7, #1
 80184d4:	d00d      	beq.n	80184f2 <rmw_wait+0x10e>
 80184d6:	ee07 7a90 	vmov	s15, r7
 80184da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80184de:	ee07 3a90 	vmov	s15, r3
 80184e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80184e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80184ea:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80184ee:	ee17 7a90 	vmov	r7, s15
 80184f2:	68a0      	ldr	r0, [r4, #8]
 80184f4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80184f8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	f040 8090 	bne.w	8018622 <rmw_wait+0x23e>
 8018502:	6864      	ldr	r4, [r4, #4]
 8018504:	2c00      	cmp	r4, #0
 8018506:	d1f4      	bne.n	80184f2 <rmw_wait+0x10e>
 8018508:	f1b9 0f00 	cmp.w	r9, #0
 801850c:	f000 80bc 	beq.w	8018688 <rmw_wait+0x2a4>
 8018510:	f8d9 7000 	ldr.w	r7, [r9]
 8018514:	2f00      	cmp	r7, #0
 8018516:	f000 808e 	beq.w	8018636 <rmw_wait+0x252>
 801851a:	2400      	movs	r4, #0
 801851c:	4627      	mov	r7, r4
 801851e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018522:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018526:	f7f7 faa7 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 801852a:	2800      	cmp	r0, #0
 801852c:	d05f      	beq.n	80185ee <rmw_wait+0x20a>
 801852e:	f8d9 3000 	ldr.w	r3, [r9]
 8018532:	3401      	adds	r4, #1
 8018534:	42a3      	cmp	r3, r4
 8018536:	f04f 0701 	mov.w	r7, #1
 801853a:	d8f0      	bhi.n	801851e <rmw_wait+0x13a>
 801853c:	f1b8 0f00 	cmp.w	r8, #0
 8018540:	d012      	beq.n	8018568 <rmw_wait+0x184>
 8018542:	f8d8 3000 	ldr.w	r3, [r8]
 8018546:	b17b      	cbz	r3, 8018568 <rmw_wait+0x184>
 8018548:	2400      	movs	r4, #0
 801854a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801854e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018552:	f7f7 fa91 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018556:	2800      	cmp	r0, #0
 8018558:	d051      	beq.n	80185fe <rmw_wait+0x21a>
 801855a:	f8d8 3000 	ldr.w	r3, [r8]
 801855e:	3401      	adds	r4, #1
 8018560:	42a3      	cmp	r3, r4
 8018562:	f04f 0701 	mov.w	r7, #1
 8018566:	d8f0      	bhi.n	801854a <rmw_wait+0x166>
 8018568:	b1dd      	cbz	r5, 80185a2 <rmw_wait+0x1be>
 801856a:	682b      	ldr	r3, [r5, #0]
 801856c:	b1cb      	cbz	r3, 80185a2 <rmw_wait+0x1be>
 801856e:	2400      	movs	r4, #0
 8018570:	686b      	ldr	r3, [r5, #4]
 8018572:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018576:	f7f7 fa7f 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 801857a:	b158      	cbz	r0, 8018594 <rmw_wait+0x1b0>
 801857c:	682b      	ldr	r3, [r5, #0]
 801857e:	3401      	adds	r4, #1
 8018580:	42a3      	cmp	r3, r4
 8018582:	d969      	bls.n	8018658 <rmw_wait+0x274>
 8018584:	686b      	ldr	r3, [r5, #4]
 8018586:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801858a:	2701      	movs	r7, #1
 801858c:	f7f7 fa74 	bl	800fa78 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018590:	2800      	cmp	r0, #0
 8018592:	d1f3      	bne.n	801857c <rmw_wait+0x198>
 8018594:	e9d5 3200 	ldrd	r3, r2, [r5]
 8018598:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801859c:	3401      	adds	r4, #1
 801859e:	42a3      	cmp	r3, r4
 80185a0:	d8e6      	bhi.n	8018570 <rmw_wait+0x18c>
 80185a2:	b1a6      	cbz	r6, 80185ce <rmw_wait+0x1ea>
 80185a4:	6834      	ldr	r4, [r6, #0]
 80185a6:	b194      	cbz	r4, 80185ce <rmw_wait+0x1ea>
 80185a8:	2300      	movs	r3, #0
 80185aa:	461d      	mov	r5, r3
 80185ac:	e004      	b.n	80185b8 <rmw_wait+0x1d4>
 80185ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80185b2:	3301      	adds	r3, #1
 80185b4:	42a3      	cmp	r3, r4
 80185b6:	d00a      	beq.n	80185ce <rmw_wait+0x1ea>
 80185b8:	6870      	ldr	r0, [r6, #4]
 80185ba:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80185be:	7c0a      	ldrb	r2, [r1, #16]
 80185c0:	2a00      	cmp	r2, #0
 80185c2:	d0f4      	beq.n	80185ae <rmw_wait+0x1ca>
 80185c4:	3301      	adds	r3, #1
 80185c6:	42a3      	cmp	r3, r4
 80185c8:	740d      	strb	r5, [r1, #16]
 80185ca:	4617      	mov	r7, r2
 80185cc:	d1f4      	bne.n	80185b8 <rmw_wait+0x1d4>
 80185ce:	2f00      	cmp	r7, #0
 80185d0:	d03e      	beq.n	8018650 <rmw_wait+0x26c>
 80185d2:	2000      	movs	r0, #0
 80185d4:	b009      	add	sp, #36	@ 0x24
 80185d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185da:	68a0      	ldr	r0, [r4, #8]
 80185dc:	2100      	movs	r1, #0
 80185de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80185e2:	f7f9 fc09 	bl	8011df8 <uxr_run_session_timeout>
 80185e6:	6864      	ldr	r4, [r4, #4]
 80185e8:	2c00      	cmp	r4, #0
 80185ea:	d1f6      	bne.n	80185da <rmw_wait+0x1f6>
 80185ec:	e78c      	b.n	8018508 <rmw_wait+0x124>
 80185ee:	e9d9 3200 	ldrd	r3, r2, [r9]
 80185f2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80185f6:	3401      	adds	r4, #1
 80185f8:	42a3      	cmp	r3, r4
 80185fa:	d890      	bhi.n	801851e <rmw_wait+0x13a>
 80185fc:	e79e      	b.n	801853c <rmw_wait+0x158>
 80185fe:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018602:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018606:	3401      	adds	r4, #1
 8018608:	429c      	cmp	r4, r3
 801860a:	d39e      	bcc.n	801854a <rmw_wait+0x166>
 801860c:	e7ac      	b.n	8018568 <rmw_wait+0x184>
 801860e:	2b00      	cmp	r3, #0
 8018610:	f47f aef3 	bne.w	80183fa <rmw_wait+0x16>
 8018614:	2800      	cmp	r0, #0
 8018616:	f47f aef0 	bne.w	80183fa <rmw_wait+0x16>
 801861a:	2900      	cmp	r1, #0
 801861c:	f47f aeed 	bne.w	80183fa <rmw_wait+0x16>
 8018620:	e7d7      	b.n	80185d2 <rmw_wait+0x1ee>
 8018622:	4639      	mov	r1, r7
 8018624:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018628:	f7f9 fc00 	bl	8011e2c <uxr_run_session_until_data>
 801862c:	6864      	ldr	r4, [r4, #4]
 801862e:	2c00      	cmp	r4, #0
 8018630:	f47f af5f 	bne.w	80184f2 <rmw_wait+0x10e>
 8018634:	e768      	b.n	8018508 <rmw_wait+0x124>
 8018636:	f1b8 0f00 	cmp.w	r8, #0
 801863a:	d032      	beq.n	80186a2 <rmw_wait+0x2be>
 801863c:	f8d8 3000 	ldr.w	r3, [r8]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d181      	bne.n	8018548 <rmw_wait+0x164>
 8018644:	461f      	mov	r7, r3
 8018646:	2d00      	cmp	r5, #0
 8018648:	d18f      	bne.n	801856a <rmw_wait+0x186>
 801864a:	462f      	mov	r7, r5
 801864c:	2e00      	cmp	r6, #0
 801864e:	d1a9      	bne.n	80185a4 <rmw_wait+0x1c0>
 8018650:	2002      	movs	r0, #2
 8018652:	b009      	add	sp, #36	@ 0x24
 8018654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018658:	2e00      	cmp	r6, #0
 801865a:	d0ba      	beq.n	80185d2 <rmw_wait+0x1ee>
 801865c:	6834      	ldr	r4, [r6, #0]
 801865e:	2701      	movs	r7, #1
 8018660:	2c00      	cmp	r4, #0
 8018662:	d1a1      	bne.n	80185a8 <rmw_wait+0x1c4>
 8018664:	e7b5      	b.n	80185d2 <rmw_wait+0x1ee>
 8018666:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801866a:	f7ff f9d5 	bl	8017a18 <rmw_time_total_nsec>
 801866e:	2300      	movs	r3, #0
 8018670:	4a13      	ldr	r2, [pc, #76]	@ (80186c0 <rmw_wait+0x2dc>)
 8018672:	f7e8 fb49 	bl	8000d08 <__aeabi_uldivmod>
 8018676:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801867a:	f171 0300 	sbcs.w	r3, r1, #0
 801867e:	4607      	mov	r7, r0
 8018680:	bfa8      	it	ge
 8018682:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8018686:	e6c9      	b.n	801841c <rmw_wait+0x38>
 8018688:	f1b8 0f00 	cmp.w	r8, #0
 801868c:	d009      	beq.n	80186a2 <rmw_wait+0x2be>
 801868e:	f8d8 3000 	ldr.w	r3, [r8]
 8018692:	464f      	mov	r7, r9
 8018694:	2b00      	cmp	r3, #0
 8018696:	f47f af57 	bne.w	8018548 <rmw_wait+0x164>
 801869a:	2d00      	cmp	r5, #0
 801869c:	f47f af65 	bne.w	801856a <rmw_wait+0x186>
 80186a0:	e7d3      	b.n	801864a <rmw_wait+0x266>
 80186a2:	b17d      	cbz	r5, 80186c4 <rmw_wait+0x2e0>
 80186a4:	682b      	ldr	r3, [r5, #0]
 80186a6:	4647      	mov	r7, r8
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	f47f af60 	bne.w	801856e <rmw_wait+0x18a>
 80186ae:	2e00      	cmp	r6, #0
 80186b0:	f47f af78 	bne.w	80185a4 <rmw_wait+0x1c0>
 80186b4:	e7cc      	b.n	8018650 <rmw_wait+0x26c>
 80186b6:	bf00      	nop
 80186b8:	0801c908 	.word	0x0801c908
 80186bc:	2000c0b4 	.word	0x2000c0b4
 80186c0:	000f4240 	.word	0x000f4240
 80186c4:	2e00      	cmp	r6, #0
 80186c6:	d0c3      	beq.n	8018650 <rmw_wait+0x26c>
 80186c8:	6834      	ldr	r4, [r6, #0]
 80186ca:	462f      	mov	r7, r5
 80186cc:	2c00      	cmp	r4, #0
 80186ce:	f47f af6b 	bne.w	80185a8 <rmw_wait+0x1c4>
 80186d2:	e7bd      	b.n	8018650 <rmw_wait+0x26c>

080186d4 <rmw_create_wait_set>:
 80186d4:	b508      	push	{r3, lr}
 80186d6:	4803      	ldr	r0, [pc, #12]	@ (80186e4 <rmw_create_wait_set+0x10>)
 80186d8:	f7ff fbfe 	bl	8017ed8 <get_memory>
 80186dc:	b108      	cbz	r0, 80186e2 <rmw_create_wait_set+0xe>
 80186de:	6880      	ldr	r0, [r0, #8]
 80186e0:	3010      	adds	r0, #16
 80186e2:	bd08      	pop	{r3, pc}
 80186e4:	2000c0f4 	.word	0x2000c0f4

080186e8 <rmw_destroy_wait_set>:
 80186e8:	b508      	push	{r3, lr}
 80186ea:	4b08      	ldr	r3, [pc, #32]	@ (801870c <rmw_destroy_wait_set+0x24>)
 80186ec:	6819      	ldr	r1, [r3, #0]
 80186ee:	b911      	cbnz	r1, 80186f6 <rmw_destroy_wait_set+0xe>
 80186f0:	e00a      	b.n	8018708 <rmw_destroy_wait_set+0x20>
 80186f2:	6849      	ldr	r1, [r1, #4]
 80186f4:	b141      	cbz	r1, 8018708 <rmw_destroy_wait_set+0x20>
 80186f6:	688b      	ldr	r3, [r1, #8]
 80186f8:	3310      	adds	r3, #16
 80186fa:	4298      	cmp	r0, r3
 80186fc:	d1f9      	bne.n	80186f2 <rmw_destroy_wait_set+0xa>
 80186fe:	4803      	ldr	r0, [pc, #12]	@ (801870c <rmw_destroy_wait_set+0x24>)
 8018700:	f7ff fbfa 	bl	8017ef8 <put_memory>
 8018704:	2000      	movs	r0, #0
 8018706:	bd08      	pop	{r3, pc}
 8018708:	2001      	movs	r0, #1
 801870a:	bd08      	pop	{r3, pc}
 801870c:	2000c0f4 	.word	0x2000c0f4

08018710 <sensor_msgs__msg__Imu__init>:
 8018710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018714:	4605      	mov	r5, r0
 8018716:	b3c0      	cbz	r0, 801878a <sensor_msgs__msg__Imu__init+0x7a>
 8018718:	f000 f864 	bl	80187e4 <std_msgs__msg__Header__init>
 801871c:	4604      	mov	r4, r0
 801871e:	b310      	cbz	r0, 8018766 <sensor_msgs__msg__Imu__init+0x56>
 8018720:	f105 0618 	add.w	r6, r5, #24
 8018724:	4630      	mov	r0, r6
 8018726:	f000 f8b3 	bl	8018890 <geometry_msgs__msg__Quaternion__init>
 801872a:	4604      	mov	r4, r0
 801872c:	2800      	cmp	r0, #0
 801872e:	d040      	beq.n	80187b2 <sensor_msgs__msg__Imu__init+0xa2>
 8018730:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8018734:	4638      	mov	r0, r7
 8018736:	f7f7 ffd9 	bl	80106ec <geometry_msgs__msg__Vector3__init>
 801873a:	4604      	mov	r4, r0
 801873c:	b348      	cbz	r0, 8018792 <sensor_msgs__msg__Imu__init+0x82>
 801873e:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8018742:	4640      	mov	r0, r8
 8018744:	f7f7 ffd2 	bl	80106ec <geometry_msgs__msg__Vector3__init>
 8018748:	4604      	mov	r4, r0
 801874a:	b9d8      	cbnz	r0, 8018784 <sensor_msgs__msg__Imu__init+0x74>
 801874c:	4628      	mov	r0, r5
 801874e:	f000 f86d 	bl	801882c <std_msgs__msg__Header__fini>
 8018752:	4630      	mov	r0, r6
 8018754:	f000 f8b0 	bl	80188b8 <geometry_msgs__msg__Quaternion__fini>
 8018758:	4638      	mov	r0, r7
 801875a:	f7f7 ffcb 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 801875e:	4640      	mov	r0, r8
 8018760:	f7f7 ffc8 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 8018764:	e00e      	b.n	8018784 <sensor_msgs__msg__Imu__init+0x74>
 8018766:	4628      	mov	r0, r5
 8018768:	f000 f860 	bl	801882c <std_msgs__msg__Header__fini>
 801876c:	f105 0018 	add.w	r0, r5, #24
 8018770:	f000 f8a2 	bl	80188b8 <geometry_msgs__msg__Quaternion__fini>
 8018774:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8018778:	f7f7 ffbc 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 801877c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8018780:	f7f7 ffb8 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 8018784:	4620      	mov	r0, r4
 8018786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801878a:	4604      	mov	r4, r0
 801878c:	4620      	mov	r0, r4
 801878e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018792:	4628      	mov	r0, r5
 8018794:	f000 f84a 	bl	801882c <std_msgs__msg__Header__fini>
 8018798:	4630      	mov	r0, r6
 801879a:	f000 f88d 	bl	80188b8 <geometry_msgs__msg__Quaternion__fini>
 801879e:	4638      	mov	r0, r7
 80187a0:	f7f7 ffa8 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80187a4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80187a8:	f7f7 ffa4 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80187ac:	4620      	mov	r0, r4
 80187ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187b2:	4628      	mov	r0, r5
 80187b4:	f000 f83a 	bl	801882c <std_msgs__msg__Header__fini>
 80187b8:	4630      	mov	r0, r6
 80187ba:	e7d9      	b.n	8018770 <sensor_msgs__msg__Imu__init+0x60>

080187bc <sensor_msgs__msg__Imu__fini>:
 80187bc:	b188      	cbz	r0, 80187e2 <sensor_msgs__msg__Imu__fini+0x26>
 80187be:	b510      	push	{r4, lr}
 80187c0:	4604      	mov	r4, r0
 80187c2:	f000 f833 	bl	801882c <std_msgs__msg__Header__fini>
 80187c6:	f104 0018 	add.w	r0, r4, #24
 80187ca:	f000 f875 	bl	80188b8 <geometry_msgs__msg__Quaternion__fini>
 80187ce:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80187d2:	f7f7 ff8f 	bl	80106f4 <geometry_msgs__msg__Vector3__fini>
 80187d6:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80187da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187de:	f7f7 bf89 	b.w	80106f4 <geometry_msgs__msg__Vector3__fini>
 80187e2:	4770      	bx	lr

080187e4 <std_msgs__msg__Header__init>:
 80187e4:	b570      	push	{r4, r5, r6, lr}
 80187e6:	4605      	mov	r5, r0
 80187e8:	b1a8      	cbz	r0, 8018816 <std_msgs__msg__Header__init+0x32>
 80187ea:	f000 f849 	bl	8018880 <builtin_interfaces__msg__Time__init>
 80187ee:	4604      	mov	r4, r0
 80187f0:	b140      	cbz	r0, 8018804 <std_msgs__msg__Header__init+0x20>
 80187f2:	f105 0608 	add.w	r6, r5, #8
 80187f6:	4630      	mov	r0, r6
 80187f8:	f001 f990 	bl	8019b1c <rosidl_runtime_c__String__init>
 80187fc:	4604      	mov	r4, r0
 80187fe:	b168      	cbz	r0, 801881c <std_msgs__msg__Header__init+0x38>
 8018800:	4620      	mov	r0, r4
 8018802:	bd70      	pop	{r4, r5, r6, pc}
 8018804:	4628      	mov	r0, r5
 8018806:	f000 f83f 	bl	8018888 <builtin_interfaces__msg__Time__fini>
 801880a:	f105 0008 	add.w	r0, r5, #8
 801880e:	f001 f99b 	bl	8019b48 <rosidl_runtime_c__String__fini>
 8018812:	4620      	mov	r0, r4
 8018814:	bd70      	pop	{r4, r5, r6, pc}
 8018816:	4604      	mov	r4, r0
 8018818:	4620      	mov	r0, r4
 801881a:	bd70      	pop	{r4, r5, r6, pc}
 801881c:	4628      	mov	r0, r5
 801881e:	f000 f833 	bl	8018888 <builtin_interfaces__msg__Time__fini>
 8018822:	4630      	mov	r0, r6
 8018824:	f001 f990 	bl	8019b48 <rosidl_runtime_c__String__fini>
 8018828:	e7ea      	b.n	8018800 <std_msgs__msg__Header__init+0x1c>
 801882a:	bf00      	nop

0801882c <std_msgs__msg__Header__fini>:
 801882c:	b148      	cbz	r0, 8018842 <std_msgs__msg__Header__fini+0x16>
 801882e:	b510      	push	{r4, lr}
 8018830:	4604      	mov	r4, r0
 8018832:	f000 f829 	bl	8018888 <builtin_interfaces__msg__Time__fini>
 8018836:	f104 0008 	add.w	r0, r4, #8
 801883a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801883e:	f001 b983 	b.w	8019b48 <rosidl_runtime_c__String__fini>
 8018842:	4770      	bx	lr

08018844 <std_srvs__srv__SetBool_Request__init>:
 8018844:	3800      	subs	r0, #0
 8018846:	bf18      	it	ne
 8018848:	2001      	movne	r0, #1
 801884a:	4770      	bx	lr

0801884c <std_srvs__srv__SetBool_Request__fini>:
 801884c:	4770      	bx	lr
 801884e:	bf00      	nop

08018850 <std_srvs__srv__SetBool_Response__init>:
 8018850:	b538      	push	{r3, r4, r5, lr}
 8018852:	b138      	cbz	r0, 8018864 <std_srvs__srv__SetBool_Response__init+0x14>
 8018854:	1d05      	adds	r5, r0, #4
 8018856:	4628      	mov	r0, r5
 8018858:	f001 f960 	bl	8019b1c <rosidl_runtime_c__String__init>
 801885c:	4604      	mov	r4, r0
 801885e:	b120      	cbz	r0, 801886a <std_srvs__srv__SetBool_Response__init+0x1a>
 8018860:	4620      	mov	r0, r4
 8018862:	bd38      	pop	{r3, r4, r5, pc}
 8018864:	4604      	mov	r4, r0
 8018866:	4620      	mov	r0, r4
 8018868:	bd38      	pop	{r3, r4, r5, pc}
 801886a:	4628      	mov	r0, r5
 801886c:	f001 f96c 	bl	8019b48 <rosidl_runtime_c__String__fini>
 8018870:	4620      	mov	r0, r4
 8018872:	bd38      	pop	{r3, r4, r5, pc}

08018874 <std_srvs__srv__SetBool_Response__fini>:
 8018874:	b110      	cbz	r0, 801887c <std_srvs__srv__SetBool_Response__fini+0x8>
 8018876:	3004      	adds	r0, #4
 8018878:	f001 b966 	b.w	8019b48 <rosidl_runtime_c__String__fini>
 801887c:	4770      	bx	lr
 801887e:	bf00      	nop

08018880 <builtin_interfaces__msg__Time__init>:
 8018880:	3800      	subs	r0, #0
 8018882:	bf18      	it	ne
 8018884:	2001      	movne	r0, #1
 8018886:	4770      	bx	lr

08018888 <builtin_interfaces__msg__Time__fini>:
 8018888:	4770      	bx	lr
 801888a:	bf00      	nop
 801888c:	0000      	movs	r0, r0
	...

08018890 <geometry_msgs__msg__Quaternion__init>:
 8018890:	b160      	cbz	r0, 80188ac <geometry_msgs__msg__Quaternion__init+0x1c>
 8018892:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80188b0 <geometry_msgs__msg__Quaternion__init+0x20>
 8018896:	2200      	movs	r2, #0
 8018898:	2300      	movs	r3, #0
 801889a:	e9c0 2300 	strd	r2, r3, [r0]
 801889e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80188a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80188a6:	ed80 7b06 	vstr	d7, [r0, #24]
 80188aa:	2001      	movs	r0, #1
 80188ac:	4770      	bx	lr
 80188ae:	bf00      	nop
 80188b0:	00000000 	.word	0x00000000
 80188b4:	3ff00000 	.word	0x3ff00000

080188b8 <geometry_msgs__msg__Quaternion__fini>:
 80188b8:	4770      	bx	lr
 80188ba:	bf00      	nop

080188bc <ucdr_serialize_string>:
 80188bc:	b510      	push	{r4, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	4604      	mov	r4, r0
 80188c2:	4608      	mov	r0, r1
 80188c4:	9101      	str	r1, [sp, #4]
 80188c6:	f7e7 fcb5 	bl	8000234 <strlen>
 80188ca:	9901      	ldr	r1, [sp, #4]
 80188cc:	1c42      	adds	r2, r0, #1
 80188ce:	4620      	mov	r0, r4
 80188d0:	b002      	add	sp, #8
 80188d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188d6:	f7f8 b9cb 	b.w	8010c70 <ucdr_serialize_sequence_char>
 80188da:	bf00      	nop

080188dc <ucdr_deserialize_string>:
 80188dc:	b500      	push	{lr}
 80188de:	b083      	sub	sp, #12
 80188e0:	ab01      	add	r3, sp, #4
 80188e2:	f7f8 f9d7 	bl	8010c94 <ucdr_deserialize_sequence_char>
 80188e6:	b003      	add	sp, #12
 80188e8:	f85d fb04 	ldr.w	pc, [sp], #4

080188ec <uxr_init_input_best_effort_stream>:
 80188ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80188f0:	8003      	strh	r3, [r0, #0]
 80188f2:	4770      	bx	lr

080188f4 <uxr_reset_input_best_effort_stream>:
 80188f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80188f8:	8003      	strh	r3, [r0, #0]
 80188fa:	4770      	bx	lr

080188fc <uxr_receive_best_effort_message>:
 80188fc:	b538      	push	{r3, r4, r5, lr}
 80188fe:	4604      	mov	r4, r0
 8018900:	8800      	ldrh	r0, [r0, #0]
 8018902:	460d      	mov	r5, r1
 8018904:	f000 fd42 	bl	801938c <uxr_seq_num_cmp>
 8018908:	4603      	mov	r3, r0
 801890a:	2b00      	cmp	r3, #0
 801890c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018910:	bfb8      	it	lt
 8018912:	8025      	strhlt	r5, [r4, #0]
 8018914:	bd38      	pop	{r3, r4, r5, pc}
 8018916:	bf00      	nop

08018918 <on_full_input_buffer>:
 8018918:	b570      	push	{r4, r5, r6, lr}
 801891a:	4605      	mov	r5, r0
 801891c:	460c      	mov	r4, r1
 801891e:	682b      	ldr	r3, [r5, #0]
 8018920:	6809      	ldr	r1, [r1, #0]
 8018922:	8920      	ldrh	r0, [r4, #8]
 8018924:	6862      	ldr	r2, [r4, #4]
 8018926:	fbb2 f2f0 	udiv	r2, r2, r0
 801892a:	eba3 0c01 	sub.w	ip, r3, r1
 801892e:	fbbc fcf2 	udiv	ip, ip, r2
 8018932:	f10c 0c01 	add.w	ip, ip, #1
 8018936:	fa1f f38c 	uxth.w	r3, ip
 801893a:	fbb3 f6f0 	udiv	r6, r3, r0
 801893e:	fb00 3316 	mls	r3, r0, r6, r3
 8018942:	b29b      	uxth	r3, r3
 8018944:	fb02 f303 	mul.w	r3, r2, r3
 8018948:	1d18      	adds	r0, r3, #4
 801894a:	4408      	add	r0, r1
 801894c:	7d26      	ldrb	r6, [r4, #20]
 801894e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018952:	b116      	cbz	r6, 801895a <on_full_input_buffer+0x42>
 8018954:	2600      	movs	r6, #0
 8018956:	f840 6c04 	str.w	r6, [r0, #-4]
 801895a:	2a03      	cmp	r2, #3
 801895c:	d801      	bhi.n	8018962 <on_full_input_buffer+0x4a>
 801895e:	2001      	movs	r0, #1
 8018960:	bd70      	pop	{r4, r5, r6, pc}
 8018962:	3308      	adds	r3, #8
 8018964:	4419      	add	r1, r3
 8018966:	4628      	mov	r0, r5
 8018968:	692b      	ldr	r3, [r5, #16]
 801896a:	3a04      	subs	r2, #4
 801896c:	f7f4 fc74 	bl	800d258 <ucdr_init_buffer_origin>
 8018970:	4628      	mov	r0, r5
 8018972:	4903      	ldr	r1, [pc, #12]	@ (8018980 <on_full_input_buffer+0x68>)
 8018974:	4622      	mov	r2, r4
 8018976:	f7f4 fc4b 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 801897a:	2000      	movs	r0, #0
 801897c:	bd70      	pop	{r4, r5, r6, pc}
 801897e:	bf00      	nop
 8018980:	08018919 	.word	0x08018919

08018984 <uxr_init_input_reliable_stream>:
 8018984:	b500      	push	{lr}
 8018986:	e9c0 1200 	strd	r1, r2, [r0]
 801898a:	f04f 0e00 	mov.w	lr, #0
 801898e:	9a01      	ldr	r2, [sp, #4]
 8018990:	8103      	strh	r3, [r0, #8]
 8018992:	6102      	str	r2, [r0, #16]
 8018994:	f880 e014 	strb.w	lr, [r0, #20]
 8018998:	b1d3      	cbz	r3, 80189d0 <uxr_init_input_reliable_stream+0x4c>
 801899a:	f8c1 e000 	str.w	lr, [r1]
 801899e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80189a2:	f1bc 0f01 	cmp.w	ip, #1
 80189a6:	d913      	bls.n	80189d0 <uxr_init_input_reliable_stream+0x4c>
 80189a8:	2301      	movs	r3, #1
 80189aa:	fbb3 f1fc 	udiv	r1, r3, ip
 80189ae:	fb0c 3111 	mls	r1, ip, r1, r3
 80189b2:	b289      	uxth	r1, r1
 80189b4:	6842      	ldr	r2, [r0, #4]
 80189b6:	fbb2 f2fc 	udiv	r2, r2, ip
 80189ba:	fb01 f202 	mul.w	r2, r1, r2
 80189be:	6801      	ldr	r1, [r0, #0]
 80189c0:	f841 e002 	str.w	lr, [r1, r2]
 80189c4:	3301      	adds	r3, #1
 80189c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80189ca:	b29b      	uxth	r3, r3
 80189cc:	459c      	cmp	ip, r3
 80189ce:	d8ec      	bhi.n	80189aa <uxr_init_input_reliable_stream+0x26>
 80189d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189d4:	60c3      	str	r3, [r0, #12]
 80189d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80189da:	bf00      	nop

080189dc <uxr_reset_input_reliable_stream>:
 80189dc:	8901      	ldrh	r1, [r0, #8]
 80189de:	b1e9      	cbz	r1, 8018a1c <uxr_reset_input_reliable_stream+0x40>
 80189e0:	f04f 0c00 	mov.w	ip, #0
 80189e4:	b500      	push	{lr}
 80189e6:	4663      	mov	r3, ip
 80189e8:	46e6      	mov	lr, ip
 80189ea:	fbb3 f2f1 	udiv	r2, r3, r1
 80189ee:	fb01 3312 	mls	r3, r1, r2, r3
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	6842      	ldr	r2, [r0, #4]
 80189f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80189fa:	fb02 f303 	mul.w	r3, r2, r3
 80189fe:	6802      	ldr	r2, [r0, #0]
 8018a00:	f842 e003 	str.w	lr, [r2, r3]
 8018a04:	f10c 0c01 	add.w	ip, ip, #1
 8018a08:	8901      	ldrh	r1, [r0, #8]
 8018a0a:	fa1f f38c 	uxth.w	r3, ip
 8018a0e:	4299      	cmp	r1, r3
 8018a10:	d8eb      	bhi.n	80189ea <uxr_reset_input_reliable_stream+0xe>
 8018a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018a16:	60c3      	str	r3, [r0, #12]
 8018a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018a20:	60c3      	str	r3, [r0, #12]
 8018a22:	4770      	bx	lr

08018a24 <uxr_receive_reliable_message>:
 8018a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a28:	4604      	mov	r4, r0
 8018a2a:	460d      	mov	r5, r1
 8018a2c:	8901      	ldrh	r1, [r0, #8]
 8018a2e:	8980      	ldrh	r0, [r0, #12]
 8018a30:	4690      	mov	r8, r2
 8018a32:	461f      	mov	r7, r3
 8018a34:	f000 fca2 	bl	801937c <uxr_seq_num_add>
 8018a38:	4629      	mov	r1, r5
 8018a3a:	4606      	mov	r6, r0
 8018a3c:	89a0      	ldrh	r0, [r4, #12]
 8018a3e:	f000 fca5 	bl	801938c <uxr_seq_num_cmp>
 8018a42:	2800      	cmp	r0, #0
 8018a44:	db0a      	blt.n	8018a5c <uxr_receive_reliable_message+0x38>
 8018a46:	2600      	movs	r6, #0
 8018a48:	89e0      	ldrh	r0, [r4, #14]
 8018a4a:	4629      	mov	r1, r5
 8018a4c:	f000 fc9e 	bl	801938c <uxr_seq_num_cmp>
 8018a50:	2800      	cmp	r0, #0
 8018a52:	da00      	bge.n	8018a56 <uxr_receive_reliable_message+0x32>
 8018a54:	81e5      	strh	r5, [r4, #14]
 8018a56:	4630      	mov	r0, r6
 8018a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a5c:	4630      	mov	r0, r6
 8018a5e:	4629      	mov	r1, r5
 8018a60:	f000 fc94 	bl	801938c <uxr_seq_num_cmp>
 8018a64:	2800      	cmp	r0, #0
 8018a66:	dbee      	blt.n	8018a46 <uxr_receive_reliable_message+0x22>
 8018a68:	6923      	ldr	r3, [r4, #16]
 8018a6a:	4640      	mov	r0, r8
 8018a6c:	4798      	blx	r3
 8018a6e:	2101      	movs	r1, #1
 8018a70:	4681      	mov	r9, r0
 8018a72:	89a0      	ldrh	r0, [r4, #12]
 8018a74:	f000 fc82 	bl	801937c <uxr_seq_num_add>
 8018a78:	f1b9 0f00 	cmp.w	r9, #0
 8018a7c:	d101      	bne.n	8018a82 <uxr_receive_reliable_message+0x5e>
 8018a7e:	4285      	cmp	r5, r0
 8018a80:	d047      	beq.n	8018b12 <uxr_receive_reliable_message+0xee>
 8018a82:	8922      	ldrh	r2, [r4, #8]
 8018a84:	fbb5 f0f2 	udiv	r0, r5, r2
 8018a88:	fb02 5010 	mls	r0, r2, r0, r5
 8018a8c:	b280      	uxth	r0, r0
 8018a8e:	6863      	ldr	r3, [r4, #4]
 8018a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a94:	fb00 f303 	mul.w	r3, r0, r3
 8018a98:	6820      	ldr	r0, [r4, #0]
 8018a9a:	3304      	adds	r3, #4
 8018a9c:	4418      	add	r0, r3
 8018a9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d1cf      	bne.n	8018a46 <uxr_receive_reliable_message+0x22>
 8018aa6:	4641      	mov	r1, r8
 8018aa8:	463a      	mov	r2, r7
 8018aaa:	f001 fe48 	bl	801a73e <memcpy>
 8018aae:	8921      	ldrh	r1, [r4, #8]
 8018ab0:	fbb5 f2f1 	udiv	r2, r5, r1
 8018ab4:	fb01 5212 	mls	r2, r1, r2, r5
 8018ab8:	b292      	uxth	r2, r2
 8018aba:	6863      	ldr	r3, [r4, #4]
 8018abc:	fbb3 f3f1 	udiv	r3, r3, r1
 8018ac0:	fb02 f303 	mul.w	r3, r2, r3
 8018ac4:	6822      	ldr	r2, [r4, #0]
 8018ac6:	50d7      	str	r7, [r2, r3]
 8018ac8:	9a08      	ldr	r2, [sp, #32]
 8018aca:	2301      	movs	r3, #1
 8018acc:	7013      	strb	r3, [r2, #0]
 8018ace:	f1b9 0f00 	cmp.w	r9, #0
 8018ad2:	d0b8      	beq.n	8018a46 <uxr_receive_reliable_message+0x22>
 8018ad4:	89a6      	ldrh	r6, [r4, #12]
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	2101      	movs	r1, #1
 8018ada:	f000 fc4f 	bl	801937c <uxr_seq_num_add>
 8018ade:	8922      	ldrh	r2, [r4, #8]
 8018ae0:	6863      	ldr	r3, [r4, #4]
 8018ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ae6:	4606      	mov	r6, r0
 8018ae8:	fbb0 f0f2 	udiv	r0, r0, r2
 8018aec:	fb02 6010 	mls	r0, r2, r0, r6
 8018af0:	b280      	uxth	r0, r0
 8018af2:	fb00 f303 	mul.w	r3, r0, r3
 8018af6:	6820      	ldr	r0, [r4, #0]
 8018af8:	3304      	adds	r3, #4
 8018afa:	4418      	add	r0, r3
 8018afc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d0a0      	beq.n	8018a46 <uxr_receive_reliable_message+0x22>
 8018b04:	6923      	ldr	r3, [r4, #16]
 8018b06:	4798      	blx	r3
 8018b08:	2802      	cmp	r0, #2
 8018b0a:	d008      	beq.n	8018b1e <uxr_receive_reliable_message+0xfa>
 8018b0c:	2801      	cmp	r0, #1
 8018b0e:	d0e2      	beq.n	8018ad6 <uxr_receive_reliable_message+0xb2>
 8018b10:	e799      	b.n	8018a46 <uxr_receive_reliable_message+0x22>
 8018b12:	9b08      	ldr	r3, [sp, #32]
 8018b14:	81a5      	strh	r5, [r4, #12]
 8018b16:	2601      	movs	r6, #1
 8018b18:	f883 9000 	strb.w	r9, [r3]
 8018b1c:	e794      	b.n	8018a48 <uxr_receive_reliable_message+0x24>
 8018b1e:	2601      	movs	r6, #1
 8018b20:	e792      	b.n	8018a48 <uxr_receive_reliable_message+0x24>
 8018b22:	bf00      	nop

08018b24 <uxr_next_input_reliable_buffer_available>:
 8018b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b28:	4604      	mov	r4, r0
 8018b2a:	460f      	mov	r7, r1
 8018b2c:	8980      	ldrh	r0, [r0, #12]
 8018b2e:	2101      	movs	r1, #1
 8018b30:	4690      	mov	r8, r2
 8018b32:	f000 fc23 	bl	801937c <uxr_seq_num_add>
 8018b36:	8922      	ldrh	r2, [r4, #8]
 8018b38:	fbb0 f6f2 	udiv	r6, r0, r2
 8018b3c:	fb02 0616 	mls	r6, r2, r6, r0
 8018b40:	b2b6      	uxth	r6, r6
 8018b42:	6863      	ldr	r3, [r4, #4]
 8018b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b48:	fb06 f303 	mul.w	r3, r6, r3
 8018b4c:	6826      	ldr	r6, [r4, #0]
 8018b4e:	3304      	adds	r3, #4
 8018b50:	441e      	add	r6, r3
 8018b52:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8018b56:	f1b9 0f00 	cmp.w	r9, #0
 8018b5a:	d023      	beq.n	8018ba4 <uxr_next_input_reliable_buffer_available+0x80>
 8018b5c:	6923      	ldr	r3, [r4, #16]
 8018b5e:	4605      	mov	r5, r0
 8018b60:	4630      	mov	r0, r6
 8018b62:	4798      	blx	r3
 8018b64:	4682      	mov	sl, r0
 8018b66:	b300      	cbz	r0, 8018baa <uxr_next_input_reliable_buffer_available+0x86>
 8018b68:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018b6c:	2101      	movs	r1, #1
 8018b6e:	4650      	mov	r0, sl
 8018b70:	f000 fc04 	bl	801937c <uxr_seq_num_add>
 8018b74:	8921      	ldrh	r1, [r4, #8]
 8018b76:	fbb0 f2f1 	udiv	r2, r0, r1
 8018b7a:	4682      	mov	sl, r0
 8018b7c:	fb01 0212 	mls	r2, r1, r2, r0
 8018b80:	e9d4 0300 	ldrd	r0, r3, [r4]
 8018b84:	b292      	uxth	r2, r2
 8018b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b8a:	fb02 f303 	mul.w	r3, r2, r3
 8018b8e:	3304      	adds	r3, #4
 8018b90:	4418      	add	r0, r3
 8018b92:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018b96:	b12b      	cbz	r3, 8018ba4 <uxr_next_input_reliable_buffer_available+0x80>
 8018b98:	6923      	ldr	r3, [r4, #16]
 8018b9a:	4798      	blx	r3
 8018b9c:	2802      	cmp	r0, #2
 8018b9e:	d01b      	beq.n	8018bd8 <uxr_next_input_reliable_buffer_available+0xb4>
 8018ba0:	2801      	cmp	r0, #1
 8018ba2:	d0e3      	beq.n	8018b6c <uxr_next_input_reliable_buffer_available+0x48>
 8018ba4:	2000      	movs	r0, #0
 8018ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018baa:	464a      	mov	r2, r9
 8018bac:	4631      	mov	r1, r6
 8018bae:	4638      	mov	r0, r7
 8018bb0:	f7f4 fb5a 	bl	800d268 <ucdr_init_buffer>
 8018bb4:	8921      	ldrh	r1, [r4, #8]
 8018bb6:	fbb5 f2f1 	udiv	r2, r5, r1
 8018bba:	fb01 5212 	mls	r2, r1, r2, r5
 8018bbe:	b292      	uxth	r2, r2
 8018bc0:	6863      	ldr	r3, [r4, #4]
 8018bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8018bc6:	fb02 f303 	mul.w	r3, r2, r3
 8018bca:	6822      	ldr	r2, [r4, #0]
 8018bcc:	f842 a003 	str.w	sl, [r2, r3]
 8018bd0:	2001      	movs	r0, #1
 8018bd2:	81a5      	strh	r5, [r4, #12]
 8018bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bd8:	8920      	ldrh	r0, [r4, #8]
 8018bda:	fbb5 f3f0 	udiv	r3, r5, r0
 8018bde:	fb00 5513 	mls	r5, r0, r3, r5
 8018be2:	b2ad      	uxth	r5, r5
 8018be4:	6863      	ldr	r3, [r4, #4]
 8018be6:	fbb3 f3f0 	udiv	r3, r3, r0
 8018bea:	fb03 f505 	mul.w	r5, r3, r5
 8018bee:	6823      	ldr	r3, [r4, #0]
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	5158      	str	r0, [r3, r5]
 8018bf4:	eb06 0108 	add.w	r1, r6, r8
 8018bf8:	eba9 0208 	sub.w	r2, r9, r8
 8018bfc:	4638      	mov	r0, r7
 8018bfe:	f7f4 fb33 	bl	800d268 <ucdr_init_buffer>
 8018c02:	4638      	mov	r0, r7
 8018c04:	4903      	ldr	r1, [pc, #12]	@ (8018c14 <uxr_next_input_reliable_buffer_available+0xf0>)
 8018c06:	4622      	mov	r2, r4
 8018c08:	f7f4 fb02 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 8018c0c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018c10:	2001      	movs	r0, #1
 8018c12:	e7c8      	b.n	8018ba6 <uxr_next_input_reliable_buffer_available+0x82>
 8018c14:	08018919 	.word	0x08018919

08018c18 <uxr_process_heartbeat>:
 8018c18:	b538      	push	{r3, r4, r5, lr}
 8018c1a:	4611      	mov	r1, r2
 8018c1c:	4604      	mov	r4, r0
 8018c1e:	89c0      	ldrh	r0, [r0, #14]
 8018c20:	4615      	mov	r5, r2
 8018c22:	f000 fbb3 	bl	801938c <uxr_seq_num_cmp>
 8018c26:	2800      	cmp	r0, #0
 8018c28:	bfb8      	it	lt
 8018c2a:	81e5      	strhlt	r5, [r4, #14]
 8018c2c:	bd38      	pop	{r3, r4, r5, pc}
 8018c2e:	bf00      	nop

08018c30 <uxr_compute_acknack>:
 8018c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c34:	8903      	ldrh	r3, [r0, #8]
 8018c36:	8985      	ldrh	r5, [r0, #12]
 8018c38:	4604      	mov	r4, r0
 8018c3a:	460e      	mov	r6, r1
 8018c3c:	b1d3      	cbz	r3, 8018c74 <uxr_compute_acknack+0x44>
 8018c3e:	4628      	mov	r0, r5
 8018c40:	2701      	movs	r7, #1
 8018c42:	e003      	b.n	8018c4c <uxr_compute_acknack+0x1c>
 8018c44:	4567      	cmp	r7, ip
 8018c46:	d215      	bcs.n	8018c74 <uxr_compute_acknack+0x44>
 8018c48:	89a0      	ldrh	r0, [r4, #12]
 8018c4a:	3701      	adds	r7, #1
 8018c4c:	b2b9      	uxth	r1, r7
 8018c4e:	f000 fb95 	bl	801937c <uxr_seq_num_add>
 8018c52:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c56:	fbb0 f3fc 	udiv	r3, r0, ip
 8018c5a:	fb0c 0313 	mls	r3, ip, r3, r0
 8018c5e:	b29a      	uxth	r2, r3
 8018c60:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018c64:	fbb3 f3fc 	udiv	r3, r3, ip
 8018c68:	fb02 f303 	mul.w	r3, r2, r3
 8018c6c:	58cb      	ldr	r3, [r1, r3]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d1e8      	bne.n	8018c44 <uxr_compute_acknack+0x14>
 8018c72:	4605      	mov	r5, r0
 8018c74:	8035      	strh	r5, [r6, #0]
 8018c76:	2101      	movs	r1, #1
 8018c78:	4628      	mov	r0, r5
 8018c7a:	89e7      	ldrh	r7, [r4, #14]
 8018c7c:	f000 fb82 	bl	8019384 <uxr_seq_num_sub>
 8018c80:	4601      	mov	r1, r0
 8018c82:	4638      	mov	r0, r7
 8018c84:	f000 fb7e 	bl	8019384 <uxr_seq_num_sub>
 8018c88:	4605      	mov	r5, r0
 8018c8a:	b318      	cbz	r0, 8018cd4 <uxr_compute_acknack+0xa4>
 8018c8c:	f04f 0900 	mov.w	r9, #0
 8018c90:	464f      	mov	r7, r9
 8018c92:	f04f 0801 	mov.w	r8, #1
 8018c96:	fa1f f189 	uxth.w	r1, r9
 8018c9a:	8830      	ldrh	r0, [r6, #0]
 8018c9c:	f000 fb6e 	bl	801937c <uxr_seq_num_add>
 8018ca0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018ca4:	fbb0 f3fc 	udiv	r3, r0, ip
 8018ca8:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018cac:	fb03 001c 	mls	r0, r3, ip, r0
 8018cb0:	b283      	uxth	r3, r0
 8018cb2:	fbb2 f2fc 	udiv	r2, r2, ip
 8018cb6:	fb02 f303 	mul.w	r3, r2, r3
 8018cba:	fa08 f209 	lsl.w	r2, r8, r9
 8018cbe:	58cb      	ldr	r3, [r1, r3]
 8018cc0:	f109 0901 	add.w	r9, r9, #1
 8018cc4:	b90b      	cbnz	r3, 8018cca <uxr_compute_acknack+0x9a>
 8018cc6:	4317      	orrs	r7, r2
 8018cc8:	b2bf      	uxth	r7, r7
 8018cca:	454d      	cmp	r5, r9
 8018ccc:	d1e3      	bne.n	8018c96 <uxr_compute_acknack+0x66>
 8018cce:	4638      	mov	r0, r7
 8018cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cd4:	4607      	mov	r7, r0
 8018cd6:	4638      	mov	r0, r7
 8018cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018cdc <uxr_init_output_best_effort_stream>:
 8018cdc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018ce0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018ce4:	6001      	str	r1, [r0, #0]
 8018ce6:	7303      	strb	r3, [r0, #12]
 8018ce8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018cec:	4770      	bx	lr
 8018cee:	bf00      	nop

08018cf0 <uxr_reset_output_best_effort_stream>:
 8018cf0:	7b02      	ldrb	r2, [r0, #12]
 8018cf2:	6042      	str	r2, [r0, #4]
 8018cf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018cf8:	81c3      	strh	r3, [r0, #14]
 8018cfa:	4770      	bx	lr

08018cfc <uxr_prepare_best_effort_buffer_to_write>:
 8018cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cfe:	4604      	mov	r4, r0
 8018d00:	b083      	sub	sp, #12
 8018d02:	6840      	ldr	r0, [r0, #4]
 8018d04:	460d      	mov	r5, r1
 8018d06:	4616      	mov	r6, r2
 8018d08:	f7fa fac4 	bl	8013294 <uxr_submessage_padding>
 8018d0c:	6863      	ldr	r3, [r4, #4]
 8018d0e:	4418      	add	r0, r3
 8018d10:	68a3      	ldr	r3, [r4, #8]
 8018d12:	1942      	adds	r2, r0, r5
 8018d14:	4293      	cmp	r3, r2
 8018d16:	bf2c      	ite	cs
 8018d18:	2701      	movcs	r7, #1
 8018d1a:	2700      	movcc	r7, #0
 8018d1c:	d202      	bcs.n	8018d24 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018d1e:	4638      	mov	r0, r7
 8018d20:	b003      	add	sp, #12
 8018d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d24:	9000      	str	r0, [sp, #0]
 8018d26:	6821      	ldr	r1, [r4, #0]
 8018d28:	4630      	mov	r0, r6
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	f7f4 fa8a 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8018d30:	6861      	ldr	r1, [r4, #4]
 8018d32:	4638      	mov	r0, r7
 8018d34:	4429      	add	r1, r5
 8018d36:	6061      	str	r1, [r4, #4]
 8018d38:	b003      	add	sp, #12
 8018d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d3c <uxr_prepare_best_effort_buffer_to_send>:
 8018d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d40:	4604      	mov	r4, r0
 8018d42:	461d      	mov	r5, r3
 8018d44:	6840      	ldr	r0, [r0, #4]
 8018d46:	7b23      	ldrb	r3, [r4, #12]
 8018d48:	4298      	cmp	r0, r3
 8018d4a:	bf8c      	ite	hi
 8018d4c:	2601      	movhi	r6, #1
 8018d4e:	2600      	movls	r6, #0
 8018d50:	d802      	bhi.n	8018d58 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018d52:	4630      	mov	r0, r6
 8018d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d58:	4688      	mov	r8, r1
 8018d5a:	89e0      	ldrh	r0, [r4, #14]
 8018d5c:	2101      	movs	r1, #1
 8018d5e:	4617      	mov	r7, r2
 8018d60:	f000 fb0c 	bl	801937c <uxr_seq_num_add>
 8018d64:	6823      	ldr	r3, [r4, #0]
 8018d66:	81e0      	strh	r0, [r4, #14]
 8018d68:	8028      	strh	r0, [r5, #0]
 8018d6a:	f8c8 3000 	str.w	r3, [r8]
 8018d6e:	6863      	ldr	r3, [r4, #4]
 8018d70:	603b      	str	r3, [r7, #0]
 8018d72:	7b23      	ldrb	r3, [r4, #12]
 8018d74:	6063      	str	r3, [r4, #4]
 8018d76:	4630      	mov	r0, r6
 8018d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d7c <on_full_output_buffer>:
 8018d7c:	b538      	push	{r3, r4, r5, lr}
 8018d7e:	6802      	ldr	r2, [r0, #0]
 8018d80:	460c      	mov	r4, r1
 8018d82:	6809      	ldr	r1, [r1, #0]
 8018d84:	8923      	ldrh	r3, [r4, #8]
 8018d86:	eba2 0c01 	sub.w	ip, r2, r1
 8018d8a:	6862      	ldr	r2, [r4, #4]
 8018d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8018d90:	fbbc fcf2 	udiv	ip, ip, r2
 8018d94:	f10c 0c01 	add.w	ip, ip, #1
 8018d98:	fa1f fc8c 	uxth.w	ip, ip
 8018d9c:	fbbc fef3 	udiv	lr, ip, r3
 8018da0:	fb03 c31e 	mls	r3, r3, lr, ip
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	fb02 f303 	mul.w	r3, r2, r3
 8018daa:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018dae:	58ca      	ldr	r2, [r1, r3]
 8018db0:	4463      	add	r3, ip
 8018db2:	eba2 020c 	sub.w	r2, r2, ip
 8018db6:	3308      	adds	r3, #8
 8018db8:	4605      	mov	r5, r0
 8018dba:	4419      	add	r1, r3
 8018dbc:	3a04      	subs	r2, #4
 8018dbe:	6903      	ldr	r3, [r0, #16]
 8018dc0:	f7f4 fa4a 	bl	800d258 <ucdr_init_buffer_origin>
 8018dc4:	4628      	mov	r0, r5
 8018dc6:	4903      	ldr	r1, [pc, #12]	@ (8018dd4 <on_full_output_buffer+0x58>)
 8018dc8:	4622      	mov	r2, r4
 8018dca:	f7f4 fa21 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 8018dce:	2000      	movs	r0, #0
 8018dd0:	bd38      	pop	{r3, r4, r5, pc}
 8018dd2:	bf00      	nop
 8018dd4:	08018d7d 	.word	0x08018d7d

08018dd8 <uxr_init_output_reliable_stream>:
 8018dd8:	b410      	push	{r4}
 8018dda:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018dde:	8103      	strh	r3, [r0, #8]
 8018de0:	e9c0 1200 	strd	r1, r2, [r0]
 8018de4:	f880 c00c 	strb.w	ip, [r0, #12]
 8018de8:	b1d3      	cbz	r3, 8018e20 <uxr_init_output_reliable_stream+0x48>
 8018dea:	f8c1 c000 	str.w	ip, [r1]
 8018dee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018df2:	f1bc 0f01 	cmp.w	ip, #1
 8018df6:	d913      	bls.n	8018e20 <uxr_init_output_reliable_stream+0x48>
 8018df8:	2301      	movs	r3, #1
 8018dfa:	fbb3 f1fc 	udiv	r1, r3, ip
 8018dfe:	fb0c 3111 	mls	r1, ip, r1, r3
 8018e02:	b289      	uxth	r1, r1
 8018e04:	6842      	ldr	r2, [r0, #4]
 8018e06:	6804      	ldr	r4, [r0, #0]
 8018e08:	fbb2 f2fc 	udiv	r2, r2, ip
 8018e0c:	fb01 f202 	mul.w	r2, r1, r2
 8018e10:	7b01      	ldrb	r1, [r0, #12]
 8018e12:	50a1      	str	r1, [r4, r2]
 8018e14:	3301      	adds	r3, #1
 8018e16:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018e1a:	b29b      	uxth	r3, r3
 8018e1c:	459c      	cmp	ip, r3
 8018e1e:	d8ec      	bhi.n	8018dfa <uxr_init_output_reliable_stream+0x22>
 8018e20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e24:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018e28:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018e2c:	4905      	ldr	r1, [pc, #20]	@ (8018e44 <uxr_init_output_reliable_stream+0x6c>)
 8018e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e32:	f8c0 100e 	str.w	r1, [r0, #14]
 8018e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	8242      	strh	r2, [r0, #18]
 8018e3e:	8403      	strh	r3, [r0, #32]
 8018e40:	4770      	bx	lr
 8018e42:	bf00      	nop
 8018e44:	ffff0000 	.word	0xffff0000

08018e48 <uxr_reset_output_reliable_stream>:
 8018e48:	8901      	ldrh	r1, [r0, #8]
 8018e4a:	b1b1      	cbz	r1, 8018e7a <uxr_reset_output_reliable_stream+0x32>
 8018e4c:	f04f 0c00 	mov.w	ip, #0
 8018e50:	4663      	mov	r3, ip
 8018e52:	fbb3 f2f1 	udiv	r2, r3, r1
 8018e56:	fb01 3312 	mls	r3, r1, r2, r3
 8018e5a:	b29b      	uxth	r3, r3
 8018e5c:	6842      	ldr	r2, [r0, #4]
 8018e5e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018e62:	6801      	ldr	r1, [r0, #0]
 8018e64:	fb02 f303 	mul.w	r3, r2, r3
 8018e68:	7b02      	ldrb	r2, [r0, #12]
 8018e6a:	50ca      	str	r2, [r1, r3]
 8018e6c:	f10c 0c01 	add.w	ip, ip, #1
 8018e70:	8901      	ldrh	r1, [r0, #8]
 8018e72:	fa1f f38c 	uxth.w	r3, ip
 8018e76:	4299      	cmp	r1, r3
 8018e78:	d8eb      	bhi.n	8018e52 <uxr_reset_output_reliable_stream+0xa>
 8018e7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e7e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018e82:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018e86:	4904      	ldr	r1, [pc, #16]	@ (8018e98 <uxr_reset_output_reliable_stream+0x50>)
 8018e88:	f8c0 100e 	str.w	r1, [r0, #14]
 8018e8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e90:	2300      	movs	r3, #0
 8018e92:	8242      	strh	r2, [r0, #18]
 8018e94:	8403      	strh	r3, [r0, #32]
 8018e96:	4770      	bx	lr
 8018e98:	ffff0000 	.word	0xffff0000

08018e9c <uxr_prepare_reliable_buffer_to_write>:
 8018e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea0:	4604      	mov	r4, r0
 8018ea2:	b091      	sub	sp, #68	@ 0x44
 8018ea4:	8900      	ldrh	r0, [r0, #8]
 8018ea6:	89e6      	ldrh	r6, [r4, #14]
 8018ea8:	6823      	ldr	r3, [r4, #0]
 8018eaa:	9204      	str	r2, [sp, #16]
 8018eac:	fbb6 f2f0 	udiv	r2, r6, r0
 8018eb0:	fb00 6212 	mls	r2, r0, r2, r6
 8018eb4:	b292      	uxth	r2, r2
 8018eb6:	6865      	ldr	r5, [r4, #4]
 8018eb8:	fbb5 f5f0 	udiv	r5, r5, r0
 8018ebc:	fb05 3202 	mla	r2, r5, r2, r3
 8018ec0:	3204      	adds	r2, #4
 8018ec2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8018ec6:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018eca:	9203      	str	r2, [sp, #12]
 8018ecc:	468b      	mov	fp, r1
 8018ece:	1f2f      	subs	r7, r5, #4
 8018ed0:	2800      	cmp	r0, #0
 8018ed2:	f000 814c 	beq.w	801916e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8018ed6:	f04f 0c00 	mov.w	ip, #0
 8018eda:	46e2      	mov	sl, ip
 8018edc:	4661      	mov	r1, ip
 8018ede:	fbb1 f2f0 	udiv	r2, r1, r0
 8018ee2:	fb00 1212 	mls	r2, r0, r2, r1
 8018ee6:	b292      	uxth	r2, r2
 8018ee8:	fb05 f202 	mul.w	r2, r5, r2
 8018eec:	f10c 0c01 	add.w	ip, ip, #1
 8018ef0:	589a      	ldr	r2, [r3, r2]
 8018ef2:	454a      	cmp	r2, r9
 8018ef4:	bf08      	it	eq
 8018ef6:	f10a 0a01 	addeq.w	sl, sl, #1
 8018efa:	fa1f f18c 	uxth.w	r1, ip
 8018efe:	bf08      	it	eq
 8018f00:	fa1f fa8a 	uxtheq.w	sl, sl
 8018f04:	4281      	cmp	r1, r0
 8018f06:	d3ea      	bcc.n	8018ede <uxr_prepare_reliable_buffer_to_write+0x42>
 8018f08:	4640      	mov	r0, r8
 8018f0a:	2104      	movs	r1, #4
 8018f0c:	f8cd a014 	str.w	sl, [sp, #20]
 8018f10:	f7f4 f9ae 	bl	800d270 <ucdr_alignment>
 8018f14:	4480      	add	r8, r0
 8018f16:	eb08 020b 	add.w	r2, r8, fp
 8018f1a:	42ba      	cmp	r2, r7
 8018f1c:	f240 80cd 	bls.w	80190ba <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018f20:	7b22      	ldrb	r2, [r4, #12]
 8018f22:	445a      	add	r2, fp
 8018f24:	42ba      	cmp	r2, r7
 8018f26:	f240 80b5 	bls.w	8019094 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018f2a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018f2e:	33fc      	adds	r3, #252	@ 0xfc
 8018f30:	b2ba      	uxth	r2, r7
 8018f32:	4413      	add	r3, r2
 8018f34:	b29b      	uxth	r3, r3
 8018f36:	fb0a f903 	mul.w	r9, sl, r3
 8018f3a:	45d9      	cmp	r9, fp
 8018f3c:	9305      	str	r3, [sp, #20]
 8018f3e:	9306      	str	r3, [sp, #24]
 8018f40:	f0c0 80b7 	bcc.w	80190b2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018f44:	f108 0304 	add.w	r3, r8, #4
 8018f48:	42bb      	cmp	r3, r7
 8018f4a:	f080 80db 	bcs.w	8019104 <uxr_prepare_reliable_buffer_to_write+0x268>
 8018f4e:	f1a2 0904 	sub.w	r9, r2, #4
 8018f52:	eba9 0908 	sub.w	r9, r9, r8
 8018f56:	9b05      	ldr	r3, [sp, #20]
 8018f58:	fa1f f989 	uxth.w	r9, r9
 8018f5c:	ebab 0b09 	sub.w	fp, fp, r9
 8018f60:	fbbb f2f3 	udiv	r2, fp, r3
 8018f64:	fb03 b312 	mls	r3, r3, r2, fp
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	f000 80c8 	beq.w	80190fe <uxr_prepare_reliable_buffer_to_write+0x262>
 8018f6e:	3201      	adds	r2, #1
 8018f70:	b292      	uxth	r2, r2
 8018f72:	9306      	str	r3, [sp, #24]
 8018f74:	4552      	cmp	r2, sl
 8018f76:	f200 809c 	bhi.w	80190b2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8018f7a:	f10d 0b20 	add.w	fp, sp, #32
 8018f7e:	2a00      	cmp	r2, #0
 8018f80:	d042      	beq.n	8019008 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8018f82:	f8cd 801c 	str.w	r8, [sp, #28]
 8018f86:	f04f 0a00 	mov.w	sl, #0
 8018f8a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018f8e:	9505      	str	r5, [sp, #20]
 8018f90:	f10d 0b20 	add.w	fp, sp, #32
 8018f94:	4615      	mov	r5, r2
 8018f96:	e000      	b.n	8018f9a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018f98:	46c1      	mov	r9, r8
 8018f9a:	8920      	ldrh	r0, [r4, #8]
 8018f9c:	fbb6 f2f0 	udiv	r2, r6, r0
 8018fa0:	fb00 6112 	mls	r1, r0, r2, r6
 8018fa4:	b28a      	uxth	r2, r1
 8018fa6:	6863      	ldr	r3, [r4, #4]
 8018fa8:	fbb3 f1f0 	udiv	r1, r3, r0
 8018fac:	6823      	ldr	r3, [r4, #0]
 8018fae:	fb02 f101 	mul.w	r1, r2, r1
 8018fb2:	3104      	adds	r1, #4
 8018fb4:	4419      	add	r1, r3
 8018fb6:	4658      	mov	r0, fp
 8018fb8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018fbc:	9200      	str	r2, [sp, #0]
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	463a      	mov	r2, r7
 8018fc2:	f7f4 f93f 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8018fc6:	464a      	mov	r2, r9
 8018fc8:	2300      	movs	r3, #0
 8018fca:	210d      	movs	r1, #13
 8018fcc:	4658      	mov	r0, fp
 8018fce:	f7fa f921 	bl	8013214 <uxr_buffer_submessage_header>
 8018fd2:	8921      	ldrh	r1, [r4, #8]
 8018fd4:	fbb6 f2f1 	udiv	r2, r6, r1
 8018fd8:	fb01 6212 	mls	r2, r1, r2, r6
 8018fdc:	b292      	uxth	r2, r2
 8018fde:	6863      	ldr	r3, [r4, #4]
 8018fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8018fe4:	fb02 f303 	mul.w	r3, r2, r3
 8018fe8:	6822      	ldr	r2, [r4, #0]
 8018fea:	4630      	mov	r0, r6
 8018fec:	50d7      	str	r7, [r2, r3]
 8018fee:	2101      	movs	r1, #1
 8018ff0:	f000 f9c4 	bl	801937c <uxr_seq_num_add>
 8018ff4:	f10a 0a01 	add.w	sl, sl, #1
 8018ff8:	fa1f f38a 	uxth.w	r3, sl
 8018ffc:	429d      	cmp	r5, r3
 8018ffe:	4606      	mov	r6, r0
 8019000:	d8ca      	bhi.n	8018f98 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8019002:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019006:	9d05      	ldr	r5, [sp, #20]
 8019008:	8920      	ldrh	r0, [r4, #8]
 801900a:	fbb6 f3f0 	udiv	r3, r6, r0
 801900e:	fb00 6313 	mls	r3, r0, r3, r6
 8019012:	b299      	uxth	r1, r3
 8019014:	6863      	ldr	r3, [r4, #4]
 8019016:	fbb3 f3f0 	udiv	r3, r3, r0
 801901a:	fb01 f303 	mul.w	r3, r1, r3
 801901e:	6821      	ldr	r1, [r4, #0]
 8019020:	3304      	adds	r3, #4
 8019022:	4419      	add	r1, r3
 8019024:	463a      	mov	r2, r7
 8019026:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801902a:	9000      	str	r0, [sp, #0]
 801902c:	2300      	movs	r3, #0
 801902e:	4658      	mov	r0, fp
 8019030:	f7f4 f908 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8019034:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8019038:	4658      	mov	r0, fp
 801903a:	fa1f f289 	uxth.w	r2, r9
 801903e:	2302      	movs	r3, #2
 8019040:	210d      	movs	r1, #13
 8019042:	f7fa f8e7 	bl	8013214 <uxr_buffer_submessage_header>
 8019046:	9b03      	ldr	r3, [sp, #12]
 8019048:	8927      	ldrh	r7, [r4, #8]
 801904a:	7b20      	ldrb	r0, [r4, #12]
 801904c:	f108 0104 	add.w	r1, r8, #4
 8019050:	440b      	add	r3, r1
 8019052:	4619      	mov	r1, r3
 8019054:	fbb6 f3f7 	udiv	r3, r6, r7
 8019058:	fb07 6313 	mls	r3, r7, r3, r6
 801905c:	f1a5 0208 	sub.w	r2, r5, #8
 8019060:	b29d      	uxth	r5, r3
 8019062:	3004      	adds	r0, #4
 8019064:	6863      	ldr	r3, [r4, #4]
 8019066:	fbb3 f3f7 	udiv	r3, r3, r7
 801906a:	fb05 f303 	mul.w	r3, r5, r3
 801906e:	6825      	ldr	r5, [r4, #0]
 8019070:	4448      	add	r0, r9
 8019072:	50e8      	str	r0, [r5, r3]
 8019074:	9d04      	ldr	r5, [sp, #16]
 8019076:	eba2 0208 	sub.w	r2, r2, r8
 801907a:	4628      	mov	r0, r5
 801907c:	f7f4 f8f4 	bl	800d268 <ucdr_init_buffer>
 8019080:	4628      	mov	r0, r5
 8019082:	493c      	ldr	r1, [pc, #240]	@ (8019174 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8019084:	4622      	mov	r2, r4
 8019086:	f7f4 f8c3 	bl	800d210 <ucdr_set_on_full_buffer_callback>
 801908a:	2001      	movs	r0, #1
 801908c:	81e6      	strh	r6, [r4, #14]
 801908e:	b011      	add	sp, #68	@ 0x44
 8019090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019094:	2101      	movs	r1, #1
 8019096:	89e0      	ldrh	r0, [r4, #14]
 8019098:	f000 f970 	bl	801937c <uxr_seq_num_add>
 801909c:	8921      	ldrh	r1, [r4, #8]
 801909e:	4605      	mov	r5, r0
 80190a0:	8a60      	ldrh	r0, [r4, #18]
 80190a2:	f000 f96b 	bl	801937c <uxr_seq_num_add>
 80190a6:	4601      	mov	r1, r0
 80190a8:	4628      	mov	r0, r5
 80190aa:	f000 f96f 	bl	801938c <uxr_seq_num_cmp>
 80190ae:	2800      	cmp	r0, #0
 80190b0:	dd42      	ble.n	8019138 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80190b2:	2000      	movs	r0, #0
 80190b4:	b011      	add	sp, #68	@ 0x44
 80190b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ba:	8921      	ldrh	r1, [r4, #8]
 80190bc:	8a60      	ldrh	r0, [r4, #18]
 80190be:	9205      	str	r2, [sp, #20]
 80190c0:	f000 f95c 	bl	801937c <uxr_seq_num_add>
 80190c4:	4601      	mov	r1, r0
 80190c6:	4630      	mov	r0, r6
 80190c8:	f000 f960 	bl	801938c <uxr_seq_num_cmp>
 80190cc:	2800      	cmp	r0, #0
 80190ce:	9a05      	ldr	r2, [sp, #20]
 80190d0:	dcef      	bgt.n	80190b2 <uxr_prepare_reliable_buffer_to_write+0x216>
 80190d2:	8927      	ldrh	r7, [r4, #8]
 80190d4:	fbb6 f3f7 	udiv	r3, r6, r7
 80190d8:	fb07 6313 	mls	r3, r7, r3, r6
 80190dc:	b29d      	uxth	r5, r3
 80190de:	6863      	ldr	r3, [r4, #4]
 80190e0:	6824      	ldr	r4, [r4, #0]
 80190e2:	fbb3 f3f7 	udiv	r3, r3, r7
 80190e6:	fb05 f303 	mul.w	r3, r5, r3
 80190ea:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80190ee:	50e2      	str	r2, [r4, r3]
 80190f0:	2300      	movs	r3, #0
 80190f2:	f8cd 8000 	str.w	r8, [sp]
 80190f6:	f7f4 f8a5 	bl	800d244 <ucdr_init_buffer_origin_offset>
 80190fa:	2001      	movs	r0, #1
 80190fc:	e7da      	b.n	80190b4 <uxr_prepare_reliable_buffer_to_write+0x218>
 80190fe:	b293      	uxth	r3, r2
 8019100:	461a      	mov	r2, r3
 8019102:	e737      	b.n	8018f74 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8019104:	4630      	mov	r0, r6
 8019106:	2101      	movs	r1, #1
 8019108:	9207      	str	r2, [sp, #28]
 801910a:	f000 f937 	bl	801937c <uxr_seq_num_add>
 801910e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019112:	fbb0 f1fc 	udiv	r1, r0, ip
 8019116:	fb0c 0111 	mls	r1, ip, r1, r0
 801911a:	4606      	mov	r6, r0
 801911c:	b288      	uxth	r0, r1
 801911e:	6863      	ldr	r3, [r4, #4]
 8019120:	fbb3 f1fc 	udiv	r1, r3, ip
 8019124:	6823      	ldr	r3, [r4, #0]
 8019126:	9a07      	ldr	r2, [sp, #28]
 8019128:	fb00 f101 	mul.w	r1, r0, r1
 801912c:	3104      	adds	r1, #4
 801912e:	440b      	add	r3, r1
 8019130:	9303      	str	r3, [sp, #12]
 8019132:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8019136:	e70a      	b.n	8018f4e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8019138:	8921      	ldrh	r1, [r4, #8]
 801913a:	fbb5 f3f1 	udiv	r3, r5, r1
 801913e:	fb01 5313 	mls	r3, r1, r3, r5
 8019142:	b29a      	uxth	r2, r3
 8019144:	6863      	ldr	r3, [r4, #4]
 8019146:	fbb3 f3f1 	udiv	r3, r3, r1
 801914a:	6821      	ldr	r1, [r4, #0]
 801914c:	9804      	ldr	r0, [sp, #16]
 801914e:	fb02 f303 	mul.w	r3, r2, r3
 8019152:	3304      	adds	r3, #4
 8019154:	7b22      	ldrb	r2, [r4, #12]
 8019156:	4419      	add	r1, r3
 8019158:	445a      	add	r2, fp
 801915a:	f841 2c04 	str.w	r2, [r1, #-4]
 801915e:	7b23      	ldrb	r3, [r4, #12]
 8019160:	9300      	str	r3, [sp, #0]
 8019162:	2300      	movs	r3, #0
 8019164:	f7f4 f86e 	bl	800d244 <ucdr_init_buffer_origin_offset>
 8019168:	81e5      	strh	r5, [r4, #14]
 801916a:	2001      	movs	r0, #1
 801916c:	e7a2      	b.n	80190b4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801916e:	4682      	mov	sl, r0
 8019170:	e6ca      	b.n	8018f08 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8019172:	bf00      	nop
 8019174:	08018d7d 	.word	0x08018d7d

08019178 <uxr_prepare_next_reliable_buffer_to_send>:
 8019178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801917a:	4604      	mov	r4, r0
 801917c:	460f      	mov	r7, r1
 801917e:	8a00      	ldrh	r0, [r0, #16]
 8019180:	2101      	movs	r1, #1
 8019182:	4616      	mov	r6, r2
 8019184:	461d      	mov	r5, r3
 8019186:	f000 f8f9 	bl	801937c <uxr_seq_num_add>
 801918a:	8028      	strh	r0, [r5, #0]
 801918c:	8922      	ldrh	r2, [r4, #8]
 801918e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019192:	fb02 0c13 	mls	ip, r2, r3, r0
 8019196:	fa1f fc8c 	uxth.w	ip, ip
 801919a:	6863      	ldr	r3, [r4, #4]
 801919c:	fbb3 f3f2 	udiv	r3, r3, r2
 80191a0:	fb0c fc03 	mul.w	ip, ip, r3
 80191a4:	6823      	ldr	r3, [r4, #0]
 80191a6:	89e1      	ldrh	r1, [r4, #14]
 80191a8:	f10c 0c04 	add.w	ip, ip, #4
 80191ac:	4463      	add	r3, ip
 80191ae:	603b      	str	r3, [r7, #0]
 80191b0:	6823      	ldr	r3, [r4, #0]
 80191b2:	449c      	add	ip, r3
 80191b4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80191b8:	6033      	str	r3, [r6, #0]
 80191ba:	f000 f8e7 	bl	801938c <uxr_seq_num_cmp>
 80191be:	2800      	cmp	r0, #0
 80191c0:	dd01      	ble.n	80191c6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80191c2:	2000      	movs	r0, #0
 80191c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191c6:	7b23      	ldrb	r3, [r4, #12]
 80191c8:	6832      	ldr	r2, [r6, #0]
 80191ca:	429a      	cmp	r2, r3
 80191cc:	d9f9      	bls.n	80191c2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80191ce:	8a61      	ldrh	r1, [r4, #18]
 80191d0:	8a20      	ldrh	r0, [r4, #16]
 80191d2:	f000 f8d7 	bl	8019384 <uxr_seq_num_sub>
 80191d6:	8923      	ldrh	r3, [r4, #8]
 80191d8:	4283      	cmp	r3, r0
 80191da:	d0f2      	beq.n	80191c2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80191dc:	8828      	ldrh	r0, [r5, #0]
 80191de:	89e3      	ldrh	r3, [r4, #14]
 80191e0:	8220      	strh	r0, [r4, #16]
 80191e2:	4298      	cmp	r0, r3
 80191e4:	d001      	beq.n	80191ea <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80191e6:	2001      	movs	r0, #1
 80191e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ea:	2101      	movs	r1, #1
 80191ec:	f000 f8c6 	bl	801937c <uxr_seq_num_add>
 80191f0:	81e0      	strh	r0, [r4, #14]
 80191f2:	2001      	movs	r0, #1
 80191f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191f6:	bf00      	nop

080191f8 <uxr_update_output_stream_heartbeat_timestamp>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	8a01      	ldrh	r1, [r0, #16]
 80191fc:	4604      	mov	r4, r0
 80191fe:	8a40      	ldrh	r0, [r0, #18]
 8019200:	4615      	mov	r5, r2
 8019202:	461e      	mov	r6, r3
 8019204:	f000 f8c2 	bl	801938c <uxr_seq_num_cmp>
 8019208:	2800      	cmp	r0, #0
 801920a:	db07      	blt.n	801921c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801920c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019210:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019214:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019218:	2000      	movs	r0, #0
 801921a:	bd70      	pop	{r4, r5, r6, pc}
 801921c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019220:	b940      	cbnz	r0, 8019234 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019222:	2301      	movs	r3, #1
 8019224:	f884 3020 	strb.w	r3, [r4, #32]
 8019228:	3564      	adds	r5, #100	@ 0x64
 801922a:	f146 0600 	adc.w	r6, r6, #0
 801922e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019232:	bd70      	pop	{r4, r5, r6, pc}
 8019234:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019238:	4295      	cmp	r5, r2
 801923a:	eb76 0303 	sbcs.w	r3, r6, r3
 801923e:	bfa5      	ittet	ge
 8019240:	3001      	addge	r0, #1
 8019242:	f884 0020 	strbge.w	r0, [r4, #32]
 8019246:	2000      	movlt	r0, #0
 8019248:	2001      	movge	r0, #1
 801924a:	e7ed      	b.n	8019228 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801924c <uxr_begin_output_nack_buffer_it>:
 801924c:	8a40      	ldrh	r0, [r0, #18]
 801924e:	4770      	bx	lr

08019250 <uxr_next_reliable_nack_buffer_to_send>:
 8019250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019254:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8019258:	b082      	sub	sp, #8
 801925a:	f1b8 0f00 	cmp.w	r8, #0
 801925e:	d011      	beq.n	8019284 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8019260:	4604      	mov	r4, r0
 8019262:	8818      	ldrh	r0, [r3, #0]
 8019264:	460e      	mov	r6, r1
 8019266:	4617      	mov	r7, r2
 8019268:	461d      	mov	r5, r3
 801926a:	2101      	movs	r1, #1
 801926c:	f000 f886 	bl	801937c <uxr_seq_num_add>
 8019270:	8028      	strh	r0, [r5, #0]
 8019272:	8a21      	ldrh	r1, [r4, #16]
 8019274:	f000 f88a 	bl	801938c <uxr_seq_num_cmp>
 8019278:	2800      	cmp	r0, #0
 801927a:	dd07      	ble.n	801928c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801927c:	f04f 0800 	mov.w	r8, #0
 8019280:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8019284:	4640      	mov	r0, r8
 8019286:	b002      	add	sp, #8
 8019288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801928c:	8921      	ldrh	r1, [r4, #8]
 801928e:	8828      	ldrh	r0, [r5, #0]
 8019290:	6823      	ldr	r3, [r4, #0]
 8019292:	fbb0 f2f1 	udiv	r2, r0, r1
 8019296:	fb01 0c12 	mls	ip, r1, r2, r0
 801929a:	fa1f f28c 	uxth.w	r2, ip
 801929e:	9301      	str	r3, [sp, #4]
 80192a0:	6863      	ldr	r3, [r4, #4]
 80192a2:	fbb3 fcf1 	udiv	ip, r3, r1
 80192a6:	9b01      	ldr	r3, [sp, #4]
 80192a8:	fb02 fc0c 	mul.w	ip, r2, ip
 80192ac:	f10c 0c04 	add.w	ip, ip, #4
 80192b0:	4463      	add	r3, ip
 80192b2:	6033      	str	r3, [r6, #0]
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	4463      	add	r3, ip
 80192b8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80192bc:	603b      	str	r3, [r7, #0]
 80192be:	7b22      	ldrb	r2, [r4, #12]
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d0d2      	beq.n	801926a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80192c4:	4640      	mov	r0, r8
 80192c6:	b002      	add	sp, #8
 80192c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192cc <uxr_process_acknack>:
 80192cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ce:	4604      	mov	r4, r0
 80192d0:	460e      	mov	r6, r1
 80192d2:	4610      	mov	r0, r2
 80192d4:	2101      	movs	r1, #1
 80192d6:	f000 f855 	bl	8019384 <uxr_seq_num_sub>
 80192da:	8a61      	ldrh	r1, [r4, #18]
 80192dc:	f000 f852 	bl	8019384 <uxr_seq_num_sub>
 80192e0:	b1c0      	cbz	r0, 8019314 <uxr_process_acknack+0x48>
 80192e2:	4605      	mov	r5, r0
 80192e4:	2700      	movs	r7, #0
 80192e6:	2101      	movs	r1, #1
 80192e8:	8a60      	ldrh	r0, [r4, #18]
 80192ea:	f000 f847 	bl	801937c <uxr_seq_num_add>
 80192ee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80192f2:	fbb0 f1fc 	udiv	r1, r0, ip
 80192f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80192fa:	fb0c 0111 	mls	r1, ip, r1, r0
 80192fe:	b289      	uxth	r1, r1
 8019300:	3701      	adds	r7, #1
 8019302:	fbb3 f3fc 	udiv	r3, r3, ip
 8019306:	fb01 f303 	mul.w	r3, r1, r3
 801930a:	42bd      	cmp	r5, r7
 801930c:	7b21      	ldrb	r1, [r4, #12]
 801930e:	8260      	strh	r0, [r4, #18]
 8019310:	50d1      	str	r1, [r2, r3]
 8019312:	d1e8      	bne.n	80192e6 <uxr_process_acknack+0x1a>
 8019314:	3e00      	subs	r6, #0
 8019316:	f04f 0300 	mov.w	r3, #0
 801931a:	bf18      	it	ne
 801931c:	2601      	movne	r6, #1
 801931e:	f884 3020 	strb.w	r3, [r4, #32]
 8019322:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8019326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019328 <uxr_is_output_up_to_date>:
 8019328:	8a01      	ldrh	r1, [r0, #16]
 801932a:	8a40      	ldrh	r0, [r0, #18]
 801932c:	b508      	push	{r3, lr}
 801932e:	f000 f82d 	bl	801938c <uxr_seq_num_cmp>
 8019332:	fab0 f080 	clz	r0, r0
 8019336:	0940      	lsrs	r0, r0, #5
 8019338:	bd08      	pop	{r3, pc}
 801933a:	bf00      	nop

0801933c <get_available_free_slots>:
 801933c:	8902      	ldrh	r2, [r0, #8]
 801933e:	b1da      	cbz	r2, 8019378 <get_available_free_slots+0x3c>
 8019340:	b530      	push	{r4, r5, lr}
 8019342:	2100      	movs	r1, #0
 8019344:	6843      	ldr	r3, [r0, #4]
 8019346:	6805      	ldr	r5, [r0, #0]
 8019348:	7b04      	ldrb	r4, [r0, #12]
 801934a:	fbb3 fef2 	udiv	lr, r3, r2
 801934e:	4608      	mov	r0, r1
 8019350:	460b      	mov	r3, r1
 8019352:	fbb3 fcf2 	udiv	ip, r3, r2
 8019356:	fb02 331c 	mls	r3, r2, ip, r3
 801935a:	b29b      	uxth	r3, r3
 801935c:	fb0e f303 	mul.w	r3, lr, r3
 8019360:	3101      	adds	r1, #1
 8019362:	f855 c003 	ldr.w	ip, [r5, r3]
 8019366:	4564      	cmp	r4, ip
 8019368:	bf08      	it	eq
 801936a:	3001      	addeq	r0, #1
 801936c:	b28b      	uxth	r3, r1
 801936e:	bf08      	it	eq
 8019370:	b280      	uxtheq	r0, r0
 8019372:	4293      	cmp	r3, r2
 8019374:	d3ed      	bcc.n	8019352 <get_available_free_slots+0x16>
 8019376:	bd30      	pop	{r4, r5, pc}
 8019378:	4610      	mov	r0, r2
 801937a:	4770      	bx	lr

0801937c <uxr_seq_num_add>:
 801937c:	4408      	add	r0, r1
 801937e:	b280      	uxth	r0, r0
 8019380:	4770      	bx	lr
 8019382:	bf00      	nop

08019384 <uxr_seq_num_sub>:
 8019384:	1a40      	subs	r0, r0, r1
 8019386:	b280      	uxth	r0, r0
 8019388:	4770      	bx	lr
 801938a:	bf00      	nop

0801938c <uxr_seq_num_cmp>:
 801938c:	4288      	cmp	r0, r1
 801938e:	d011      	beq.n	80193b4 <uxr_seq_num_cmp+0x28>
 8019390:	d309      	bcc.n	80193a6 <uxr_seq_num_cmp+0x1a>
 8019392:	4288      	cmp	r0, r1
 8019394:	d910      	bls.n	80193b8 <uxr_seq_num_cmp+0x2c>
 8019396:	1a40      	subs	r0, r0, r1
 8019398:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801939c:	bfd4      	ite	le
 801939e:	2001      	movle	r0, #1
 80193a0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80193a4:	4770      	bx	lr
 80193a6:	1a0b      	subs	r3, r1, r0
 80193a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193ac:	daf1      	bge.n	8019392 <uxr_seq_num_cmp+0x6>
 80193ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80193b2:	4770      	bx	lr
 80193b4:	2000      	movs	r0, #0
 80193b6:	4770      	bx	lr
 80193b8:	2001      	movs	r0, #1
 80193ba:	4770      	bx	lr

080193bc <rcl_get_default_domain_id>:
 80193bc:	b530      	push	{r4, r5, lr}
 80193be:	b083      	sub	sp, #12
 80193c0:	2300      	movs	r3, #0
 80193c2:	9300      	str	r3, [sp, #0]
 80193c4:	b1d0      	cbz	r0, 80193fc <rcl_get_default_domain_id+0x40>
 80193c6:	4604      	mov	r4, r0
 80193c8:	4669      	mov	r1, sp
 80193ca:	4815      	ldr	r0, [pc, #84]	@ (8019420 <rcl_get_default_domain_id+0x64>)
 80193cc:	f7fe f814 	bl	80173f8 <rcutils_get_env>
 80193d0:	4602      	mov	r2, r0
 80193d2:	b110      	cbz	r0, 80193da <rcl_get_default_domain_id+0x1e>
 80193d4:	2001      	movs	r0, #1
 80193d6:	b003      	add	sp, #12
 80193d8:	bd30      	pop	{r4, r5, pc}
 80193da:	9b00      	ldr	r3, [sp, #0]
 80193dc:	b18b      	cbz	r3, 8019402 <rcl_get_default_domain_id+0x46>
 80193de:	7818      	ldrb	r0, [r3, #0]
 80193e0:	2800      	cmp	r0, #0
 80193e2:	d0f8      	beq.n	80193d6 <rcl_get_default_domain_id+0x1a>
 80193e4:	a901      	add	r1, sp, #4
 80193e6:	4618      	mov	r0, r3
 80193e8:	9201      	str	r2, [sp, #4]
 80193ea:	f000 fe39 	bl	801a060 <strtoul>
 80193ee:	4605      	mov	r5, r0
 80193f0:	b150      	cbz	r0, 8019408 <rcl_get_default_domain_id+0x4c>
 80193f2:	1c43      	adds	r3, r0, #1
 80193f4:	d00d      	beq.n	8019412 <rcl_get_default_domain_id+0x56>
 80193f6:	6025      	str	r5, [r4, #0]
 80193f8:	2000      	movs	r0, #0
 80193fa:	e7ec      	b.n	80193d6 <rcl_get_default_domain_id+0x1a>
 80193fc:	200b      	movs	r0, #11
 80193fe:	b003      	add	sp, #12
 8019400:	bd30      	pop	{r4, r5, pc}
 8019402:	4618      	mov	r0, r3
 8019404:	b003      	add	sp, #12
 8019406:	bd30      	pop	{r4, r5, pc}
 8019408:	9b01      	ldr	r3, [sp, #4]
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d0f2      	beq.n	80193f6 <rcl_get_default_domain_id+0x3a>
 8019410:	e7e0      	b.n	80193d4 <rcl_get_default_domain_id+0x18>
 8019412:	f001 f95f 	bl	801a6d4 <__errno>
 8019416:	6803      	ldr	r3, [r0, #0]
 8019418:	2b22      	cmp	r3, #34	@ 0x22
 801941a:	d1ec      	bne.n	80193f6 <rcl_get_default_domain_id+0x3a>
 801941c:	e7da      	b.n	80193d4 <rcl_get_default_domain_id+0x18>
 801941e:	bf00      	nop
 8019420:	0801de84 	.word	0x0801de84

08019424 <rcl_expand_topic_name>:
 8019424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019428:	b08b      	sub	sp, #44	@ 0x2c
 801942a:	9306      	str	r3, [sp, #24]
 801942c:	2800      	cmp	r0, #0
 801942e:	f000 80ad 	beq.w	801958c <rcl_expand_topic_name+0x168>
 8019432:	460e      	mov	r6, r1
 8019434:	2900      	cmp	r1, #0
 8019436:	f000 80a9 	beq.w	801958c <rcl_expand_topic_name+0x168>
 801943a:	4617      	mov	r7, r2
 801943c:	2a00      	cmp	r2, #0
 801943e:	f000 80a5 	beq.w	801958c <rcl_expand_topic_name+0x168>
 8019442:	2b00      	cmp	r3, #0
 8019444:	f000 80a2 	beq.w	801958c <rcl_expand_topic_name+0x168>
 8019448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801944a:	2b00      	cmp	r3, #0
 801944c:	f000 809e 	beq.w	801958c <rcl_expand_topic_name+0x168>
 8019450:	2200      	movs	r2, #0
 8019452:	a909      	add	r1, sp, #36	@ 0x24
 8019454:	4680      	mov	r8, r0
 8019456:	f000 fa57 	bl	8019908 <rcl_validate_topic_name>
 801945a:	4604      	mov	r4, r0
 801945c:	2800      	cmp	r0, #0
 801945e:	f040 8096 	bne.w	801958e <rcl_expand_topic_name+0x16a>
 8019462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019464:	2b00      	cmp	r3, #0
 8019466:	f040 809a 	bne.w	801959e <rcl_expand_topic_name+0x17a>
 801946a:	4602      	mov	r2, r0
 801946c:	a909      	add	r1, sp, #36	@ 0x24
 801946e:	4630      	mov	r0, r6
 8019470:	f7fe fbec 	bl	8017c4c <rmw_validate_node_name>
 8019474:	2800      	cmp	r0, #0
 8019476:	f040 808e 	bne.w	8019596 <rcl_expand_topic_name+0x172>
 801947a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801947c:	2a00      	cmp	r2, #0
 801947e:	f040 8093 	bne.w	80195a8 <rcl_expand_topic_name+0x184>
 8019482:	a909      	add	r1, sp, #36	@ 0x24
 8019484:	4638      	mov	r0, r7
 8019486:	f7fe fbc3 	bl	8017c10 <rmw_validate_namespace>
 801948a:	2800      	cmp	r0, #0
 801948c:	f040 8083 	bne.w	8019596 <rcl_expand_topic_name+0x172>
 8019490:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019492:	2c00      	cmp	r4, #0
 8019494:	f040 80ed 	bne.w	8019672 <rcl_expand_topic_name+0x24e>
 8019498:	217b      	movs	r1, #123	@ 0x7b
 801949a:	4640      	mov	r0, r8
 801949c:	f001 f88e 	bl	801a5bc <strchr>
 80194a0:	f898 3000 	ldrb.w	r3, [r8]
 80194a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80194a6:	4605      	mov	r5, r0
 80194a8:	f000 809e 	beq.w	80195e8 <rcl_expand_topic_name+0x1c4>
 80194ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80194ae:	f040 80a2 	bne.w	80195f6 <rcl_expand_topic_name+0x1d2>
 80194b2:	4638      	mov	r0, r7
 80194b4:	f7e6 febe 	bl	8000234 <strlen>
 80194b8:	4a82      	ldr	r2, [pc, #520]	@ (80196c4 <rcl_expand_topic_name+0x2a0>)
 80194ba:	4b83      	ldr	r3, [pc, #524]	@ (80196c8 <rcl_expand_topic_name+0x2a4>)
 80194bc:	2801      	cmp	r0, #1
 80194be:	bf18      	it	ne
 80194c0:	4613      	movne	r3, r2
 80194c2:	9302      	str	r3, [sp, #8]
 80194c4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80194cc:	f108 0301 	add.w	r3, r8, #1
 80194d0:	9305      	str	r3, [sp, #20]
 80194d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80194d6:	9301      	str	r3, [sp, #4]
 80194d8:	ab14      	add	r3, sp, #80	@ 0x50
 80194da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80194dc:	f7fd ffb4 	bl	8017448 <rcutils_format_string_limit>
 80194e0:	4682      	mov	sl, r0
 80194e2:	2800      	cmp	r0, #0
 80194e4:	f000 80c7 	beq.w	8019676 <rcl_expand_topic_name+0x252>
 80194e8:	2d00      	cmp	r5, #0
 80194ea:	f000 80a2 	beq.w	8019632 <rcl_expand_topic_name+0x20e>
 80194ee:	217b      	movs	r1, #123	@ 0x7b
 80194f0:	f001 f864 	bl	801a5bc <strchr>
 80194f4:	46d1      	mov	r9, sl
 80194f6:	4605      	mov	r5, r0
 80194f8:	9407      	str	r4, [sp, #28]
 80194fa:	46d3      	mov	fp, sl
 80194fc:	464c      	mov	r4, r9
 80194fe:	2d00      	cmp	r5, #0
 8019500:	f000 80be 	beq.w	8019680 <rcl_expand_topic_name+0x25c>
 8019504:	217d      	movs	r1, #125	@ 0x7d
 8019506:	4620      	mov	r0, r4
 8019508:	f001 f858 	bl	801a5bc <strchr>
 801950c:	eba0 0905 	sub.w	r9, r0, r5
 8019510:	f109 0a01 	add.w	sl, r9, #1
 8019514:	486d      	ldr	r0, [pc, #436]	@ (80196cc <rcl_expand_topic_name+0x2a8>)
 8019516:	4652      	mov	r2, sl
 8019518:	4629      	mov	r1, r5
 801951a:	f001 f85c 	bl	801a5d6 <strncmp>
 801951e:	2800      	cmp	r0, #0
 8019520:	d067      	beq.n	80195f2 <rcl_expand_topic_name+0x1ce>
 8019522:	486b      	ldr	r0, [pc, #428]	@ (80196d0 <rcl_expand_topic_name+0x2ac>)
 8019524:	4652      	mov	r2, sl
 8019526:	4629      	mov	r1, r5
 8019528:	f001 f855 	bl	801a5d6 <strncmp>
 801952c:	b130      	cbz	r0, 801953c <rcl_expand_topic_name+0x118>
 801952e:	4869      	ldr	r0, [pc, #420]	@ (80196d4 <rcl_expand_topic_name+0x2b0>)
 8019530:	4652      	mov	r2, sl
 8019532:	4629      	mov	r1, r5
 8019534:	f001 f84f 	bl	801a5d6 <strncmp>
 8019538:	2800      	cmp	r0, #0
 801953a:	d137      	bne.n	80195ac <rcl_expand_topic_name+0x188>
 801953c:	46b9      	mov	r9, r7
 801953e:	ab16      	add	r3, sp, #88	@ 0x58
 8019540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019544:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019548:	ab14      	add	r3, sp, #80	@ 0x50
 801954a:	4628      	mov	r0, r5
 801954c:	cb0c      	ldmia	r3, {r2, r3}
 801954e:	4651      	mov	r1, sl
 8019550:	f7fe f8b6 	bl	80176c0 <rcutils_strndup>
 8019554:	4605      	mov	r5, r0
 8019556:	2800      	cmp	r0, #0
 8019558:	f000 809c 	beq.w	8019694 <rcl_expand_topic_name+0x270>
 801955c:	464a      	mov	r2, r9
 801955e:	4620      	mov	r0, r4
 8019560:	ab14      	add	r3, sp, #80	@ 0x50
 8019562:	4629      	mov	r1, r5
 8019564:	f7fd ffaa 	bl	80174bc <rcutils_repl_str>
 8019568:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801956a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801956c:	4604      	mov	r4, r0
 801956e:	4628      	mov	r0, r5
 8019570:	4798      	blx	r3
 8019572:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019574:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019576:	4658      	mov	r0, fp
 8019578:	4798      	blx	r3
 801957a:	2c00      	cmp	r4, #0
 801957c:	d07b      	beq.n	8019676 <rcl_expand_topic_name+0x252>
 801957e:	217b      	movs	r1, #123	@ 0x7b
 8019580:	4620      	mov	r0, r4
 8019582:	f001 f81b 	bl	801a5bc <strchr>
 8019586:	46a3      	mov	fp, r4
 8019588:	4605      	mov	r5, r0
 801958a:	e7b8      	b.n	80194fe <rcl_expand_topic_name+0xda>
 801958c:	240b      	movs	r4, #11
 801958e:	4620      	mov	r0, r4
 8019590:	b00b      	add	sp, #44	@ 0x2c
 8019592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019596:	f7fb f8a9 	bl	80146ec <rcl_convert_rmw_ret_to_rcl_ret>
 801959a:	4604      	mov	r4, r0
 801959c:	e7f7      	b.n	801958e <rcl_expand_topic_name+0x16a>
 801959e:	2467      	movs	r4, #103	@ 0x67
 80195a0:	4620      	mov	r0, r4
 80195a2:	b00b      	add	sp, #44	@ 0x2c
 80195a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195a8:	24c9      	movs	r4, #201	@ 0xc9
 80195aa:	e7f0      	b.n	801958e <rcl_expand_topic_name+0x16a>
 80195ac:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80195b0:	9806      	ldr	r0, [sp, #24]
 80195b2:	1c69      	adds	r1, r5, #1
 80195b4:	f7fe f99e 	bl	80178f4 <rcutils_string_map_getn>
 80195b8:	4681      	mov	r9, r0
 80195ba:	2800      	cmp	r0, #0
 80195bc:	d1bf      	bne.n	801953e <rcl_expand_topic_name+0x11a>
 80195be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80195c0:	aa16      	add	r2, sp, #88	@ 0x58
 80195c2:	6018      	str	r0, [r3, #0]
 80195c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80195c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80195ca:	ab14      	add	r3, sp, #80	@ 0x50
 80195cc:	cb0c      	ldmia	r3, {r2, r3}
 80195ce:	4651      	mov	r1, sl
 80195d0:	4628      	mov	r0, r5
 80195d2:	f7fe f875 	bl	80176c0 <rcutils_strndup>
 80195d6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80195d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80195da:	4798      	blx	r3
 80195dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80195de:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80195e0:	4658      	mov	r0, fp
 80195e2:	2469      	movs	r4, #105	@ 0x69
 80195e4:	4798      	blx	r3
 80195e6:	e7d2      	b.n	801958e <rcl_expand_topic_name+0x16a>
 80195e8:	2800      	cmp	r0, #0
 80195ea:	d05b      	beq.n	80196a4 <rcl_expand_topic_name+0x280>
 80195ec:	46c1      	mov	r9, r8
 80195ee:	46a2      	mov	sl, r4
 80195f0:	e782      	b.n	80194f8 <rcl_expand_topic_name+0xd4>
 80195f2:	46b1      	mov	r9, r6
 80195f4:	e7a3      	b.n	801953e <rcl_expand_topic_name+0x11a>
 80195f6:	2800      	cmp	r0, #0
 80195f8:	d1f8      	bne.n	80195ec <rcl_expand_topic_name+0x1c8>
 80195fa:	4638      	mov	r0, r7
 80195fc:	f7e6 fe1a 	bl	8000234 <strlen>
 8019600:	4a35      	ldr	r2, [pc, #212]	@ (80196d8 <rcl_expand_topic_name+0x2b4>)
 8019602:	4b36      	ldr	r3, [pc, #216]	@ (80196dc <rcl_expand_topic_name+0x2b8>)
 8019604:	f8cd 8010 	str.w	r8, [sp, #16]
 8019608:	2801      	cmp	r0, #1
 801960a:	bf18      	it	ne
 801960c:	4613      	movne	r3, r2
 801960e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019612:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019616:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019618:	9703      	str	r7, [sp, #12]
 801961a:	9200      	str	r2, [sp, #0]
 801961c:	ab14      	add	r3, sp, #80	@ 0x50
 801961e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019620:	f7fd ff12 	bl	8017448 <rcutils_format_string_limit>
 8019624:	4682      	mov	sl, r0
 8019626:	4653      	mov	r3, sl
 8019628:	b32b      	cbz	r3, 8019676 <rcl_expand_topic_name+0x252>
 801962a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801962c:	f8c3 a000 	str.w	sl, [r3]
 8019630:	e7ad      	b.n	801958e <rcl_expand_topic_name+0x16a>
 8019632:	f89a 3000 	ldrb.w	r3, [sl]
 8019636:	2b2f      	cmp	r3, #47	@ 0x2f
 8019638:	d0f7      	beq.n	801962a <rcl_expand_topic_name+0x206>
 801963a:	4638      	mov	r0, r7
 801963c:	f7e6 fdfa 	bl	8000234 <strlen>
 8019640:	4a25      	ldr	r2, [pc, #148]	@ (80196d8 <rcl_expand_topic_name+0x2b4>)
 8019642:	4b26      	ldr	r3, [pc, #152]	@ (80196dc <rcl_expand_topic_name+0x2b8>)
 8019644:	f8cd a010 	str.w	sl, [sp, #16]
 8019648:	2801      	cmp	r0, #1
 801964a:	bf18      	it	ne
 801964c:	4613      	movne	r3, r2
 801964e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019652:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019656:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019658:	9703      	str	r7, [sp, #12]
 801965a:	9200      	str	r2, [sp, #0]
 801965c:	ab14      	add	r3, sp, #80	@ 0x50
 801965e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019660:	f7fd fef2 	bl	8017448 <rcutils_format_string_limit>
 8019664:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019666:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019668:	4605      	mov	r5, r0
 801966a:	4650      	mov	r0, sl
 801966c:	4798      	blx	r3
 801966e:	46aa      	mov	sl, r5
 8019670:	e7d9      	b.n	8019626 <rcl_expand_topic_name+0x202>
 8019672:	24ca      	movs	r4, #202	@ 0xca
 8019674:	e78b      	b.n	801958e <rcl_expand_topic_name+0x16a>
 8019676:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019678:	2300      	movs	r3, #0
 801967a:	6013      	str	r3, [r2, #0]
 801967c:	240a      	movs	r4, #10
 801967e:	e786      	b.n	801958e <rcl_expand_topic_name+0x16a>
 8019680:	465b      	mov	r3, fp
 8019682:	9c07      	ldr	r4, [sp, #28]
 8019684:	46da      	mov	sl, fp
 8019686:	2b00      	cmp	r3, #0
 8019688:	d1d3      	bne.n	8019632 <rcl_expand_topic_name+0x20e>
 801968a:	f898 3000 	ldrb.w	r3, [r8]
 801968e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019690:	d0cb      	beq.n	801962a <rcl_expand_topic_name+0x206>
 8019692:	e7b2      	b.n	80195fa <rcl_expand_topic_name+0x1d6>
 8019694:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019698:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801969a:	6015      	str	r5, [r2, #0]
 801969c:	4658      	mov	r0, fp
 801969e:	4798      	blx	r3
 80196a0:	240a      	movs	r4, #10
 80196a2:	e774      	b.n	801958e <rcl_expand_topic_name+0x16a>
 80196a4:	ab17      	add	r3, sp, #92	@ 0x5c
 80196a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80196aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80196ae:	ab14      	add	r3, sp, #80	@ 0x50
 80196b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80196b2:	4640      	mov	r0, r8
 80196b4:	f7fd ffe2 	bl	801767c <rcutils_strdup>
 80196b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80196ba:	2800      	cmp	r0, #0
 80196bc:	6018      	str	r0, [r3, #0]
 80196be:	bf08      	it	eq
 80196c0:	240a      	moveq	r4, #10
 80196c2:	e764      	b.n	801958e <rcl_expand_topic_name+0x16a>
 80196c4:	0801de94 	.word	0x0801de94
 80196c8:	0801d0b4 	.word	0x0801d0b4
 80196cc:	0801de9c 	.word	0x0801de9c
 80196d0:	0801dea4 	.word	0x0801dea4
 80196d4:	0801deac 	.word	0x0801deac
 80196d8:	0801d0a0 	.word	0x0801d0a0
 80196dc:	0801d0c4 	.word	0x0801d0c4

080196e0 <rcl_get_default_topic_name_substitutions>:
 80196e0:	2800      	cmp	r0, #0
 80196e2:	bf0c      	ite	eq
 80196e4:	200b      	moveq	r0, #11
 80196e6:	2000      	movne	r0, #0
 80196e8:	4770      	bx	lr
 80196ea:	bf00      	nop

080196ec <rcl_get_zero_initialized_guard_condition>:
 80196ec:	4a03      	ldr	r2, [pc, #12]	@ (80196fc <rcl_get_zero_initialized_guard_condition+0x10>)
 80196ee:	4603      	mov	r3, r0
 80196f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80196f8:	4618      	mov	r0, r3
 80196fa:	4770      	bx	lr
 80196fc:	0801deb8 	.word	0x0801deb8

08019700 <rcl_guard_condition_init>:
 8019700:	b082      	sub	sp, #8
 8019702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019704:	b087      	sub	sp, #28
 8019706:	ac0c      	add	r4, sp, #48	@ 0x30
 8019708:	e884 000c 	stmia.w	r4, {r2, r3}
 801970c:	46a6      	mov	lr, r4
 801970e:	460d      	mov	r5, r1
 8019710:	4604      	mov	r4, r0
 8019712:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019716:	f10d 0c04 	add.w	ip, sp, #4
 801971a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801971e:	f8de 3000 	ldr.w	r3, [lr]
 8019722:	f8cc 3000 	str.w	r3, [ip]
 8019726:	a801      	add	r0, sp, #4
 8019728:	f7f4 ffc0 	bl	800e6ac <rcutils_allocator_is_valid>
 801972c:	b338      	cbz	r0, 801977e <rcl_guard_condition_init+0x7e>
 801972e:	b334      	cbz	r4, 801977e <rcl_guard_condition_init+0x7e>
 8019730:	6866      	ldr	r6, [r4, #4]
 8019732:	b9ee      	cbnz	r6, 8019770 <rcl_guard_condition_init+0x70>
 8019734:	b31d      	cbz	r5, 801977e <rcl_guard_condition_init+0x7e>
 8019736:	4628      	mov	r0, r5
 8019738:	f7fa fff6 	bl	8014728 <rcl_context_is_valid>
 801973c:	b308      	cbz	r0, 8019782 <rcl_guard_condition_init+0x82>
 801973e:	9b01      	ldr	r3, [sp, #4]
 8019740:	9905      	ldr	r1, [sp, #20]
 8019742:	201c      	movs	r0, #28
 8019744:	4798      	blx	r3
 8019746:	4607      	mov	r7, r0
 8019748:	6060      	str	r0, [r4, #4]
 801974a:	b310      	cbz	r0, 8019792 <rcl_guard_condition_init+0x92>
 801974c:	6828      	ldr	r0, [r5, #0]
 801974e:	3028      	adds	r0, #40	@ 0x28
 8019750:	f000 f9ac 	bl	8019aac <rmw_create_guard_condition>
 8019754:	6038      	str	r0, [r7, #0]
 8019756:	6860      	ldr	r0, [r4, #4]
 8019758:	6805      	ldr	r5, [r0, #0]
 801975a:	b1a5      	cbz	r5, 8019786 <rcl_guard_condition_init+0x86>
 801975c:	2301      	movs	r3, #1
 801975e:	ac01      	add	r4, sp, #4
 8019760:	7103      	strb	r3, [r0, #4]
 8019762:	f100 0708 	add.w	r7, r0, #8
 8019766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019768:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801976a:	6823      	ldr	r3, [r4, #0]
 801976c:	603b      	str	r3, [r7, #0]
 801976e:	e000      	b.n	8019772 <rcl_guard_condition_init+0x72>
 8019770:	2664      	movs	r6, #100	@ 0x64
 8019772:	4630      	mov	r0, r6
 8019774:	b007      	add	sp, #28
 8019776:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801977a:	b002      	add	sp, #8
 801977c:	4770      	bx	lr
 801977e:	260b      	movs	r6, #11
 8019780:	e7f7      	b.n	8019772 <rcl_guard_condition_init+0x72>
 8019782:	2665      	movs	r6, #101	@ 0x65
 8019784:	e7f5      	b.n	8019772 <rcl_guard_condition_init+0x72>
 8019786:	9b02      	ldr	r3, [sp, #8]
 8019788:	9905      	ldr	r1, [sp, #20]
 801978a:	4798      	blx	r3
 801978c:	2601      	movs	r6, #1
 801978e:	6065      	str	r5, [r4, #4]
 8019790:	e7ef      	b.n	8019772 <rcl_guard_condition_init+0x72>
 8019792:	260a      	movs	r6, #10
 8019794:	e7ed      	b.n	8019772 <rcl_guard_condition_init+0x72>
 8019796:	bf00      	nop

08019798 <rcl_guard_condition_init_from_rmw>:
 8019798:	b082      	sub	sp, #8
 801979a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801979e:	b086      	sub	sp, #24
 80197a0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80197a4:	4604      	mov	r4, r0
 80197a6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80197aa:	460e      	mov	r6, r1
 80197ac:	4617      	mov	r7, r2
 80197ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80197b2:	f10d 0e04 	add.w	lr, sp, #4
 80197b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80197ba:	f8dc 3000 	ldr.w	r3, [ip]
 80197be:	f8ce 3000 	str.w	r3, [lr]
 80197c2:	a801      	add	r0, sp, #4
 80197c4:	f7f4 ff72 	bl	800e6ac <rcutils_allocator_is_valid>
 80197c8:	b350      	cbz	r0, 8019820 <rcl_guard_condition_init_from_rmw+0x88>
 80197ca:	b34c      	cbz	r4, 8019820 <rcl_guard_condition_init_from_rmw+0x88>
 80197cc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80197d0:	f1b8 0f00 	cmp.w	r8, #0
 80197d4:	d11e      	bne.n	8019814 <rcl_guard_condition_init_from_rmw+0x7c>
 80197d6:	b31f      	cbz	r7, 8019820 <rcl_guard_condition_init_from_rmw+0x88>
 80197d8:	4638      	mov	r0, r7
 80197da:	f7fa ffa5 	bl	8014728 <rcl_context_is_valid>
 80197de:	b328      	cbz	r0, 801982c <rcl_guard_condition_init_from_rmw+0x94>
 80197e0:	9b01      	ldr	r3, [sp, #4]
 80197e2:	9905      	ldr	r1, [sp, #20]
 80197e4:	201c      	movs	r0, #28
 80197e6:	4798      	blx	r3
 80197e8:	4605      	mov	r5, r0
 80197ea:	6060      	str	r0, [r4, #4]
 80197ec:	b358      	cbz	r0, 8019846 <rcl_guard_condition_init_from_rmw+0xae>
 80197ee:	b1fe      	cbz	r6, 8019830 <rcl_guard_condition_init_from_rmw+0x98>
 80197f0:	6006      	str	r6, [r0, #0]
 80197f2:	f880 8004 	strb.w	r8, [r0, #4]
 80197f6:	ac01      	add	r4, sp, #4
 80197f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197fa:	f105 0c08 	add.w	ip, r5, #8
 80197fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019802:	6823      	ldr	r3, [r4, #0]
 8019804:	f8cc 3000 	str.w	r3, [ip]
 8019808:	2000      	movs	r0, #0
 801980a:	b006      	add	sp, #24
 801980c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019810:	b002      	add	sp, #8
 8019812:	4770      	bx	lr
 8019814:	2064      	movs	r0, #100	@ 0x64
 8019816:	b006      	add	sp, #24
 8019818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801981c:	b002      	add	sp, #8
 801981e:	4770      	bx	lr
 8019820:	200b      	movs	r0, #11
 8019822:	b006      	add	sp, #24
 8019824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019828:	b002      	add	sp, #8
 801982a:	4770      	bx	lr
 801982c:	2065      	movs	r0, #101	@ 0x65
 801982e:	e7f2      	b.n	8019816 <rcl_guard_condition_init_from_rmw+0x7e>
 8019830:	6838      	ldr	r0, [r7, #0]
 8019832:	3028      	adds	r0, #40	@ 0x28
 8019834:	f000 f93a 	bl	8019aac <rmw_create_guard_condition>
 8019838:	6028      	str	r0, [r5, #0]
 801983a:	6865      	ldr	r5, [r4, #4]
 801983c:	682e      	ldr	r6, [r5, #0]
 801983e:	b126      	cbz	r6, 801984a <rcl_guard_condition_init_from_rmw+0xb2>
 8019840:	2301      	movs	r3, #1
 8019842:	712b      	strb	r3, [r5, #4]
 8019844:	e7d7      	b.n	80197f6 <rcl_guard_condition_init_from_rmw+0x5e>
 8019846:	200a      	movs	r0, #10
 8019848:	e7e5      	b.n	8019816 <rcl_guard_condition_init_from_rmw+0x7e>
 801984a:	4628      	mov	r0, r5
 801984c:	9b02      	ldr	r3, [sp, #8]
 801984e:	9905      	ldr	r1, [sp, #20]
 8019850:	4798      	blx	r3
 8019852:	6066      	str	r6, [r4, #4]
 8019854:	2001      	movs	r0, #1
 8019856:	e7de      	b.n	8019816 <rcl_guard_condition_init_from_rmw+0x7e>

08019858 <rcl_guard_condition_fini>:
 8019858:	b570      	push	{r4, r5, r6, lr}
 801985a:	b082      	sub	sp, #8
 801985c:	b1f0      	cbz	r0, 801989c <rcl_guard_condition_fini+0x44>
 801985e:	6843      	ldr	r3, [r0, #4]
 8019860:	4604      	mov	r4, r0
 8019862:	b163      	cbz	r3, 801987e <rcl_guard_condition_fini+0x26>
 8019864:	6818      	ldr	r0, [r3, #0]
 8019866:	68de      	ldr	r6, [r3, #12]
 8019868:	6999      	ldr	r1, [r3, #24]
 801986a:	b160      	cbz	r0, 8019886 <rcl_guard_condition_fini+0x2e>
 801986c:	791d      	ldrb	r5, [r3, #4]
 801986e:	b965      	cbnz	r5, 801988a <rcl_guard_condition_fini+0x32>
 8019870:	4618      	mov	r0, r3
 8019872:	47b0      	blx	r6
 8019874:	2300      	movs	r3, #0
 8019876:	4628      	mov	r0, r5
 8019878:	6063      	str	r3, [r4, #4]
 801987a:	b002      	add	sp, #8
 801987c:	bd70      	pop	{r4, r5, r6, pc}
 801987e:	461d      	mov	r5, r3
 8019880:	4628      	mov	r0, r5
 8019882:	b002      	add	sp, #8
 8019884:	bd70      	pop	{r4, r5, r6, pc}
 8019886:	4605      	mov	r5, r0
 8019888:	e7f2      	b.n	8019870 <rcl_guard_condition_fini+0x18>
 801988a:	9101      	str	r1, [sp, #4]
 801988c:	f000 f922 	bl	8019ad4 <rmw_destroy_guard_condition>
 8019890:	1e05      	subs	r5, r0, #0
 8019892:	6863      	ldr	r3, [r4, #4]
 8019894:	9901      	ldr	r1, [sp, #4]
 8019896:	bf18      	it	ne
 8019898:	2501      	movne	r5, #1
 801989a:	e7e9      	b.n	8019870 <rcl_guard_condition_fini+0x18>
 801989c:	250b      	movs	r5, #11
 801989e:	4628      	mov	r0, r5
 80198a0:	b002      	add	sp, #8
 80198a2:	bd70      	pop	{r4, r5, r6, pc}

080198a4 <rcl_guard_condition_get_default_options>:
 80198a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198a6:	b087      	sub	sp, #28
 80198a8:	4606      	mov	r6, r0
 80198aa:	4668      	mov	r0, sp
 80198ac:	f7f4 fef0 	bl	800e690 <rcutils_get_default_allocator>
 80198b0:	4b09      	ldr	r3, [pc, #36]	@ (80198d8 <rcl_guard_condition_get_default_options+0x34>)
 80198b2:	46ee      	mov	lr, sp
 80198b4:	469c      	mov	ip, r3
 80198b6:	461d      	mov	r5, r3
 80198b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80198bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80198c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198c2:	4634      	mov	r4, r6
 80198c4:	f8de 7000 	ldr.w	r7, [lr]
 80198c8:	f8cc 7000 	str.w	r7, [ip]
 80198cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198ce:	4630      	mov	r0, r6
 80198d0:	6027      	str	r7, [r4, #0]
 80198d2:	b007      	add	sp, #28
 80198d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198d6:	bf00      	nop
 80198d8:	2000c234 	.word	0x2000c234

080198dc <rcl_trigger_guard_condition>:
 80198dc:	b148      	cbz	r0, 80198f2 <rcl_trigger_guard_condition+0x16>
 80198de:	b508      	push	{r3, lr}
 80198e0:	6843      	ldr	r3, [r0, #4]
 80198e2:	b143      	cbz	r3, 80198f6 <rcl_trigger_guard_condition+0x1a>
 80198e4:	6818      	ldr	r0, [r3, #0]
 80198e6:	f000 f909 	bl	8019afc <rmw_trigger_guard_condition>
 80198ea:	3800      	subs	r0, #0
 80198ec:	bf18      	it	ne
 80198ee:	2001      	movne	r0, #1
 80198f0:	bd08      	pop	{r3, pc}
 80198f2:	200b      	movs	r0, #11
 80198f4:	4770      	bx	lr
 80198f6:	200b      	movs	r0, #11
 80198f8:	bd08      	pop	{r3, pc}
 80198fa:	bf00      	nop

080198fc <rcl_guard_condition_get_rmw_handle>:
 80198fc:	b110      	cbz	r0, 8019904 <rcl_guard_condition_get_rmw_handle+0x8>
 80198fe:	6840      	ldr	r0, [r0, #4]
 8019900:	b100      	cbz	r0, 8019904 <rcl_guard_condition_get_rmw_handle+0x8>
 8019902:	6800      	ldr	r0, [r0, #0]
 8019904:	4770      	bx	lr
 8019906:	bf00      	nop

08019908 <rcl_validate_topic_name>:
 8019908:	2800      	cmp	r0, #0
 801990a:	d07a      	beq.n	8019a02 <rcl_validate_topic_name+0xfa>
 801990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019910:	460e      	mov	r6, r1
 8019912:	2900      	cmp	r1, #0
 8019914:	d07c      	beq.n	8019a10 <rcl_validate_topic_name+0x108>
 8019916:	4617      	mov	r7, r2
 8019918:	4605      	mov	r5, r0
 801991a:	f7e6 fc8b 	bl	8000234 <strlen>
 801991e:	b1b0      	cbz	r0, 801994e <rcl_validate_topic_name+0x46>
 8019920:	f895 9000 	ldrb.w	r9, [r5]
 8019924:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019aa8 <rcl_validate_topic_name+0x1a0>
 8019928:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801992c:	f013 0304 	ands.w	r3, r3, #4
 8019930:	d169      	bne.n	8019a06 <rcl_validate_topic_name+0xfe>
 8019932:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8019936:	f815 2008 	ldrb.w	r2, [r5, r8]
 801993a:	2a2f      	cmp	r2, #47	@ 0x2f
 801993c:	d10e      	bne.n	801995c <rcl_validate_topic_name+0x54>
 801993e:	2202      	movs	r2, #2
 8019940:	6032      	str	r2, [r6, #0]
 8019942:	b36f      	cbz	r7, 80199a0 <rcl_validate_topic_name+0x98>
 8019944:	f8c7 8000 	str.w	r8, [r7]
 8019948:	4618      	mov	r0, r3
 801994a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801994e:	2301      	movs	r3, #1
 8019950:	6033      	str	r3, [r6, #0]
 8019952:	b32f      	cbz	r7, 80199a0 <rcl_validate_topic_name+0x98>
 8019954:	2000      	movs	r0, #0
 8019956:	6038      	str	r0, [r7, #0]
 8019958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801995c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019960:	461c      	mov	r4, r3
 8019962:	4619      	mov	r1, r3
 8019964:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019968:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801996c:	f1be 0f09 	cmp.w	lr, #9
 8019970:	d919      	bls.n	80199a6 <rcl_validate_topic_name+0x9e>
 8019972:	f022 0e20 	bic.w	lr, r2, #32
 8019976:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801997a:	f1be 0f19 	cmp.w	lr, #25
 801997e:	d912      	bls.n	80199a6 <rcl_validate_topic_name+0x9e>
 8019980:	2a5f      	cmp	r2, #95	@ 0x5f
 8019982:	d019      	beq.n	80199b8 <rcl_validate_topic_name+0xb0>
 8019984:	2a2f      	cmp	r2, #47	@ 0x2f
 8019986:	d051      	beq.n	8019a2c <rcl_validate_topic_name+0x124>
 8019988:	2a7e      	cmp	r2, #126	@ 0x7e
 801998a:	d048      	beq.n	8019a1e <rcl_validate_topic_name+0x116>
 801998c:	2a7b      	cmp	r2, #123	@ 0x7b
 801998e:	d054      	beq.n	8019a3a <rcl_validate_topic_name+0x132>
 8019990:	2a7d      	cmp	r2, #125	@ 0x7d
 8019992:	d161      	bne.n	8019a58 <rcl_validate_topic_name+0x150>
 8019994:	2c00      	cmp	r4, #0
 8019996:	d155      	bne.n	8019a44 <rcl_validate_topic_name+0x13c>
 8019998:	2305      	movs	r3, #5
 801999a:	6033      	str	r3, [r6, #0]
 801999c:	b107      	cbz	r7, 80199a0 <rcl_validate_topic_name+0x98>
 801999e:	6039      	str	r1, [r7, #0]
 80199a0:	2000      	movs	r0, #0
 80199a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199a6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80199aa:	0752      	lsls	r2, r2, #29
 80199ac:	d504      	bpl.n	80199b8 <rcl_validate_topic_name+0xb0>
 80199ae:	b11c      	cbz	r4, 80199b8 <rcl_validate_topic_name+0xb0>
 80199b0:	b111      	cbz	r1, 80199b8 <rcl_validate_topic_name+0xb0>
 80199b2:	1e4a      	subs	r2, r1, #1
 80199b4:	429a      	cmp	r2, r3
 80199b6:	d02d      	beq.n	8019a14 <rcl_validate_topic_name+0x10c>
 80199b8:	3101      	adds	r1, #1
 80199ba:	4288      	cmp	r0, r1
 80199bc:	d1d2      	bne.n	8019964 <rcl_validate_topic_name+0x5c>
 80199be:	2c00      	cmp	r4, #0
 80199c0:	d145      	bne.n	8019a4e <rcl_validate_topic_name+0x146>
 80199c2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80199c6:	d04f      	beq.n	8019a68 <rcl_validate_topic_name+0x160>
 80199c8:	4620      	mov	r0, r4
 80199ca:	2301      	movs	r3, #1
 80199cc:	e006      	b.n	80199dc <rcl_validate_topic_name+0xd4>
 80199ce:	428b      	cmp	r3, r1
 80199d0:	f105 0501 	add.w	r5, r5, #1
 80199d4:	f103 0201 	add.w	r2, r3, #1
 80199d8:	d236      	bcs.n	8019a48 <rcl_validate_topic_name+0x140>
 80199da:	4613      	mov	r3, r2
 80199dc:	4580      	cmp	r8, r0
 80199de:	f100 0001 	add.w	r0, r0, #1
 80199e2:	d0f4      	beq.n	80199ce <rcl_validate_topic_name+0xc6>
 80199e4:	782a      	ldrb	r2, [r5, #0]
 80199e6:	2a2f      	cmp	r2, #47	@ 0x2f
 80199e8:	d1f1      	bne.n	80199ce <rcl_validate_topic_name+0xc6>
 80199ea:	786a      	ldrb	r2, [r5, #1]
 80199ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80199f0:	0754      	lsls	r4, r2, #29
 80199f2:	d5ec      	bpl.n	80199ce <rcl_validate_topic_name+0xc6>
 80199f4:	2204      	movs	r2, #4
 80199f6:	6032      	str	r2, [r6, #0]
 80199f8:	2f00      	cmp	r7, #0
 80199fa:	d0d1      	beq.n	80199a0 <rcl_validate_topic_name+0x98>
 80199fc:	603b      	str	r3, [r7, #0]
 80199fe:	2000      	movs	r0, #0
 8019a00:	e7aa      	b.n	8019958 <rcl_validate_topic_name+0x50>
 8019a02:	200b      	movs	r0, #11
 8019a04:	4770      	bx	lr
 8019a06:	2304      	movs	r3, #4
 8019a08:	6033      	str	r3, [r6, #0]
 8019a0a:	2f00      	cmp	r7, #0
 8019a0c:	d1a2      	bne.n	8019954 <rcl_validate_topic_name+0x4c>
 8019a0e:	e7c7      	b.n	80199a0 <rcl_validate_topic_name+0x98>
 8019a10:	200b      	movs	r0, #11
 8019a12:	e7a1      	b.n	8019958 <rcl_validate_topic_name+0x50>
 8019a14:	2309      	movs	r3, #9
 8019a16:	6033      	str	r3, [r6, #0]
 8019a18:	2f00      	cmp	r7, #0
 8019a1a:	d1c0      	bne.n	801999e <rcl_validate_topic_name+0x96>
 8019a1c:	e7c0      	b.n	80199a0 <rcl_validate_topic_name+0x98>
 8019a1e:	2900      	cmp	r1, #0
 8019a20:	d0ca      	beq.n	80199b8 <rcl_validate_topic_name+0xb0>
 8019a22:	2306      	movs	r3, #6
 8019a24:	6033      	str	r3, [r6, #0]
 8019a26:	2f00      	cmp	r7, #0
 8019a28:	d1b9      	bne.n	801999e <rcl_validate_topic_name+0x96>
 8019a2a:	e7b9      	b.n	80199a0 <rcl_validate_topic_name+0x98>
 8019a2c:	2c00      	cmp	r4, #0
 8019a2e:	d0c3      	beq.n	80199b8 <rcl_validate_topic_name+0xb0>
 8019a30:	2308      	movs	r3, #8
 8019a32:	6033      	str	r3, [r6, #0]
 8019a34:	2f00      	cmp	r7, #0
 8019a36:	d1b2      	bne.n	801999e <rcl_validate_topic_name+0x96>
 8019a38:	e7b2      	b.n	80199a0 <rcl_validate_topic_name+0x98>
 8019a3a:	2c00      	cmp	r4, #0
 8019a3c:	d1f8      	bne.n	8019a30 <rcl_validate_topic_name+0x128>
 8019a3e:	460b      	mov	r3, r1
 8019a40:	2401      	movs	r4, #1
 8019a42:	e7b9      	b.n	80199b8 <rcl_validate_topic_name+0xb0>
 8019a44:	2400      	movs	r4, #0
 8019a46:	e7b7      	b.n	80199b8 <rcl_validate_topic_name+0xb0>
 8019a48:	2000      	movs	r0, #0
 8019a4a:	6030      	str	r0, [r6, #0]
 8019a4c:	e784      	b.n	8019958 <rcl_validate_topic_name+0x50>
 8019a4e:	2205      	movs	r2, #5
 8019a50:	6032      	str	r2, [r6, #0]
 8019a52:	2f00      	cmp	r7, #0
 8019a54:	d1d2      	bne.n	80199fc <rcl_validate_topic_name+0xf4>
 8019a56:	e7a3      	b.n	80199a0 <rcl_validate_topic_name+0x98>
 8019a58:	2c00      	cmp	r4, #0
 8019a5a:	bf14      	ite	ne
 8019a5c:	2308      	movne	r3, #8
 8019a5e:	2303      	moveq	r3, #3
 8019a60:	6033      	str	r3, [r6, #0]
 8019a62:	2f00      	cmp	r7, #0
 8019a64:	d19b      	bne.n	801999e <rcl_validate_topic_name+0x96>
 8019a66:	e79b      	b.n	80199a0 <rcl_validate_topic_name+0x98>
 8019a68:	2301      	movs	r3, #1
 8019a6a:	e00a      	b.n	8019a82 <rcl_validate_topic_name+0x17a>
 8019a6c:	2c01      	cmp	r4, #1
 8019a6e:	d013      	beq.n	8019a98 <rcl_validate_topic_name+0x190>
 8019a70:	4299      	cmp	r1, r3
 8019a72:	f104 0401 	add.w	r4, r4, #1
 8019a76:	f105 0501 	add.w	r5, r5, #1
 8019a7a:	f103 0201 	add.w	r2, r3, #1
 8019a7e:	d9e3      	bls.n	8019a48 <rcl_validate_topic_name+0x140>
 8019a80:	4613      	mov	r3, r2
 8019a82:	45a0      	cmp	r8, r4
 8019a84:	d0f4      	beq.n	8019a70 <rcl_validate_topic_name+0x168>
 8019a86:	782a      	ldrb	r2, [r5, #0]
 8019a88:	2a2f      	cmp	r2, #47	@ 0x2f
 8019a8a:	d1ef      	bne.n	8019a6c <rcl_validate_topic_name+0x164>
 8019a8c:	786a      	ldrb	r2, [r5, #1]
 8019a8e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019a92:	0752      	lsls	r2, r2, #29
 8019a94:	d5ec      	bpl.n	8019a70 <rcl_validate_topic_name+0x168>
 8019a96:	e7ad      	b.n	80199f4 <rcl_validate_topic_name+0xec>
 8019a98:	2307      	movs	r3, #7
 8019a9a:	6033      	str	r3, [r6, #0]
 8019a9c:	2f00      	cmp	r7, #0
 8019a9e:	f43f af7f 	beq.w	80199a0 <rcl_validate_topic_name+0x98>
 8019aa2:	603c      	str	r4, [r7, #0]
 8019aa4:	2000      	movs	r0, #0
 8019aa6:	e757      	b.n	8019958 <rcl_validate_topic_name+0x50>
 8019aa8:	0801e022 	.word	0x0801e022

08019aac <rmw_create_guard_condition>:
 8019aac:	b538      	push	{r3, r4, r5, lr}
 8019aae:	4605      	mov	r5, r0
 8019ab0:	4807      	ldr	r0, [pc, #28]	@ (8019ad0 <rmw_create_guard_condition+0x24>)
 8019ab2:	f7fe fa11 	bl	8017ed8 <get_memory>
 8019ab6:	b148      	cbz	r0, 8019acc <rmw_create_guard_condition+0x20>
 8019ab8:	6884      	ldr	r4, [r0, #8]
 8019aba:	2300      	movs	r3, #0
 8019abc:	7423      	strb	r3, [r4, #16]
 8019abe:	61e5      	str	r5, [r4, #28]
 8019ac0:	f7fe fa72 	bl	8017fa8 <rmw_get_implementation_identifier>
 8019ac4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019ac8:	f104 0014 	add.w	r0, r4, #20
 8019acc:	bd38      	pop	{r3, r4, r5, pc}
 8019ace:	bf00      	nop
 8019ad0:	2000c064 	.word	0x2000c064

08019ad4 <rmw_destroy_guard_condition>:
 8019ad4:	b508      	push	{r3, lr}
 8019ad6:	4b08      	ldr	r3, [pc, #32]	@ (8019af8 <rmw_destroy_guard_condition+0x24>)
 8019ad8:	6819      	ldr	r1, [r3, #0]
 8019ada:	b911      	cbnz	r1, 8019ae2 <rmw_destroy_guard_condition+0xe>
 8019adc:	e00a      	b.n	8019af4 <rmw_destroy_guard_condition+0x20>
 8019ade:	6849      	ldr	r1, [r1, #4]
 8019ae0:	b141      	cbz	r1, 8019af4 <rmw_destroy_guard_condition+0x20>
 8019ae2:	688b      	ldr	r3, [r1, #8]
 8019ae4:	3314      	adds	r3, #20
 8019ae6:	4298      	cmp	r0, r3
 8019ae8:	d1f9      	bne.n	8019ade <rmw_destroy_guard_condition+0xa>
 8019aea:	4803      	ldr	r0, [pc, #12]	@ (8019af8 <rmw_destroy_guard_condition+0x24>)
 8019aec:	f7fe fa04 	bl	8017ef8 <put_memory>
 8019af0:	2000      	movs	r0, #0
 8019af2:	bd08      	pop	{r3, pc}
 8019af4:	2001      	movs	r0, #1
 8019af6:	bd08      	pop	{r3, pc}
 8019af8:	2000c064 	.word	0x2000c064

08019afc <rmw_trigger_guard_condition>:
 8019afc:	b160      	cbz	r0, 8019b18 <rmw_trigger_guard_condition+0x1c>
 8019afe:	b510      	push	{r4, lr}
 8019b00:	4604      	mov	r4, r0
 8019b02:	6800      	ldr	r0, [r0, #0]
 8019b04:	f7f6 f978 	bl	800fdf8 <is_uxrce_rmw_identifier_valid>
 8019b08:	b908      	cbnz	r0, 8019b0e <rmw_trigger_guard_condition+0x12>
 8019b0a:	2001      	movs	r0, #1
 8019b0c:	bd10      	pop	{r4, pc}
 8019b0e:	6863      	ldr	r3, [r4, #4]
 8019b10:	2201      	movs	r2, #1
 8019b12:	741a      	strb	r2, [r3, #16]
 8019b14:	2000      	movs	r0, #0
 8019b16:	bd10      	pop	{r4, pc}
 8019b18:	2001      	movs	r0, #1
 8019b1a:	4770      	bx	lr

08019b1c <rosidl_runtime_c__String__init>:
 8019b1c:	b510      	push	{r4, lr}
 8019b1e:	4604      	mov	r4, r0
 8019b20:	b086      	sub	sp, #24
 8019b22:	b170      	cbz	r0, 8019b42 <rosidl_runtime_c__String__init+0x26>
 8019b24:	a801      	add	r0, sp, #4
 8019b26:	f7f4 fdb3 	bl	800e690 <rcutils_get_default_allocator>
 8019b2a:	9b01      	ldr	r3, [sp, #4]
 8019b2c:	9905      	ldr	r1, [sp, #20]
 8019b2e:	2001      	movs	r0, #1
 8019b30:	4798      	blx	r3
 8019b32:	6020      	str	r0, [r4, #0]
 8019b34:	b128      	cbz	r0, 8019b42 <rosidl_runtime_c__String__init+0x26>
 8019b36:	2100      	movs	r1, #0
 8019b38:	2201      	movs	r2, #1
 8019b3a:	7001      	strb	r1, [r0, #0]
 8019b3c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019b40:	4610      	mov	r0, r2
 8019b42:	b006      	add	sp, #24
 8019b44:	bd10      	pop	{r4, pc}
 8019b46:	bf00      	nop

08019b48 <rosidl_runtime_c__String__fini>:
 8019b48:	b320      	cbz	r0, 8019b94 <rosidl_runtime_c__String__fini+0x4c>
 8019b4a:	b510      	push	{r4, lr}
 8019b4c:	6803      	ldr	r3, [r0, #0]
 8019b4e:	b086      	sub	sp, #24
 8019b50:	4604      	mov	r4, r0
 8019b52:	b173      	cbz	r3, 8019b72 <rosidl_runtime_c__String__fini+0x2a>
 8019b54:	6883      	ldr	r3, [r0, #8]
 8019b56:	b1f3      	cbz	r3, 8019b96 <rosidl_runtime_c__String__fini+0x4e>
 8019b58:	a801      	add	r0, sp, #4
 8019b5a:	f7f4 fd99 	bl	800e690 <rcutils_get_default_allocator>
 8019b5e:	9b02      	ldr	r3, [sp, #8]
 8019b60:	9905      	ldr	r1, [sp, #20]
 8019b62:	6820      	ldr	r0, [r4, #0]
 8019b64:	4798      	blx	r3
 8019b66:	2300      	movs	r3, #0
 8019b68:	e9c4 3300 	strd	r3, r3, [r4]
 8019b6c:	60a3      	str	r3, [r4, #8]
 8019b6e:	b006      	add	sp, #24
 8019b70:	bd10      	pop	{r4, pc}
 8019b72:	6843      	ldr	r3, [r0, #4]
 8019b74:	b9db      	cbnz	r3, 8019bae <rosidl_runtime_c__String__fini+0x66>
 8019b76:	6883      	ldr	r3, [r0, #8]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d0f8      	beq.n	8019b6e <rosidl_runtime_c__String__fini+0x26>
 8019b7c:	4b12      	ldr	r3, [pc, #72]	@ (8019bc8 <rosidl_runtime_c__String__fini+0x80>)
 8019b7e:	4813      	ldr	r0, [pc, #76]	@ (8019bcc <rosidl_runtime_c__String__fini+0x84>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2251      	movs	r2, #81	@ 0x51
 8019b84:	68db      	ldr	r3, [r3, #12]
 8019b86:	2101      	movs	r1, #1
 8019b88:	f000 fb82 	bl	801a290 <fwrite>
 8019b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b90:	f000 f83e 	bl	8019c10 <exit>
 8019b94:	4770      	bx	lr
 8019b96:	4b0c      	ldr	r3, [pc, #48]	@ (8019bc8 <rosidl_runtime_c__String__fini+0x80>)
 8019b98:	480d      	ldr	r0, [pc, #52]	@ (8019bd0 <rosidl_runtime_c__String__fini+0x88>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	224c      	movs	r2, #76	@ 0x4c
 8019b9e:	68db      	ldr	r3, [r3, #12]
 8019ba0:	2101      	movs	r1, #1
 8019ba2:	f000 fb75 	bl	801a290 <fwrite>
 8019ba6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019baa:	f000 f831 	bl	8019c10 <exit>
 8019bae:	4b06      	ldr	r3, [pc, #24]	@ (8019bc8 <rosidl_runtime_c__String__fini+0x80>)
 8019bb0:	4808      	ldr	r0, [pc, #32]	@ (8019bd4 <rosidl_runtime_c__String__fini+0x8c>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	224e      	movs	r2, #78	@ 0x4e
 8019bb6:	68db      	ldr	r3, [r3, #12]
 8019bb8:	2101      	movs	r1, #1
 8019bba:	f000 fb69 	bl	801a290 <fwrite>
 8019bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019bc2:	f000 f825 	bl	8019c10 <exit>
 8019bc6:	bf00      	nop
 8019bc8:	200009c8 	.word	0x200009c8
 8019bcc:	0801df60 	.word	0x0801df60
 8019bd0:	0801dec0 	.word	0x0801dec0
 8019bd4:	0801df10 	.word	0x0801df10

08019bd8 <calloc>:
 8019bd8:	4b02      	ldr	r3, [pc, #8]	@ (8019be4 <calloc+0xc>)
 8019bda:	460a      	mov	r2, r1
 8019bdc:	4601      	mov	r1, r0
 8019bde:	6818      	ldr	r0, [r3, #0]
 8019be0:	f000 b802 	b.w	8019be8 <_calloc_r>
 8019be4:	200009c8 	.word	0x200009c8

08019be8 <_calloc_r>:
 8019be8:	b570      	push	{r4, r5, r6, lr}
 8019bea:	fba1 5402 	umull	r5, r4, r1, r2
 8019bee:	b93c      	cbnz	r4, 8019c00 <_calloc_r+0x18>
 8019bf0:	4629      	mov	r1, r5
 8019bf2:	f000 f899 	bl	8019d28 <_malloc_r>
 8019bf6:	4606      	mov	r6, r0
 8019bf8:	b928      	cbnz	r0, 8019c06 <_calloc_r+0x1e>
 8019bfa:	2600      	movs	r6, #0
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	bd70      	pop	{r4, r5, r6, pc}
 8019c00:	220c      	movs	r2, #12
 8019c02:	6002      	str	r2, [r0, #0]
 8019c04:	e7f9      	b.n	8019bfa <_calloc_r+0x12>
 8019c06:	462a      	mov	r2, r5
 8019c08:	4621      	mov	r1, r4
 8019c0a:	f000 fccf 	bl	801a5ac <memset>
 8019c0e:	e7f5      	b.n	8019bfc <_calloc_r+0x14>

08019c10 <exit>:
 8019c10:	b508      	push	{r3, lr}
 8019c12:	4b06      	ldr	r3, [pc, #24]	@ (8019c2c <exit+0x1c>)
 8019c14:	4604      	mov	r4, r0
 8019c16:	b113      	cbz	r3, 8019c1e <exit+0xe>
 8019c18:	2100      	movs	r1, #0
 8019c1a:	f3af 8000 	nop.w
 8019c1e:	4b04      	ldr	r3, [pc, #16]	@ (8019c30 <exit+0x20>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	b103      	cbz	r3, 8019c26 <exit+0x16>
 8019c24:	4798      	blx	r3
 8019c26:	4620      	mov	r0, r4
 8019c28:	f7e8 ff78 	bl	8002b1c <_exit>
 8019c2c:	00000000 	.word	0x00000000
 8019c30:	2000c388 	.word	0x2000c388

08019c34 <getenv>:
 8019c34:	b507      	push	{r0, r1, r2, lr}
 8019c36:	4b04      	ldr	r3, [pc, #16]	@ (8019c48 <getenv+0x14>)
 8019c38:	4601      	mov	r1, r0
 8019c3a:	aa01      	add	r2, sp, #4
 8019c3c:	6818      	ldr	r0, [r3, #0]
 8019c3e:	f000 f805 	bl	8019c4c <_findenv_r>
 8019c42:	b003      	add	sp, #12
 8019c44:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c48:	200009c8 	.word	0x200009c8

08019c4c <_findenv_r>:
 8019c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c50:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019cc0 <_findenv_r+0x74>
 8019c54:	4606      	mov	r6, r0
 8019c56:	4689      	mov	r9, r1
 8019c58:	4617      	mov	r7, r2
 8019c5a:	f000 fd9d 	bl	801a798 <__env_lock>
 8019c5e:	f8da 4000 	ldr.w	r4, [sl]
 8019c62:	b134      	cbz	r4, 8019c72 <_findenv_r+0x26>
 8019c64:	464b      	mov	r3, r9
 8019c66:	4698      	mov	r8, r3
 8019c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c6c:	b13a      	cbz	r2, 8019c7e <_findenv_r+0x32>
 8019c6e:	2a3d      	cmp	r2, #61	@ 0x3d
 8019c70:	d1f9      	bne.n	8019c66 <_findenv_r+0x1a>
 8019c72:	4630      	mov	r0, r6
 8019c74:	f000 fd96 	bl	801a7a4 <__env_unlock>
 8019c78:	2000      	movs	r0, #0
 8019c7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c7e:	eba8 0809 	sub.w	r8, r8, r9
 8019c82:	46a3      	mov	fp, r4
 8019c84:	f854 0b04 	ldr.w	r0, [r4], #4
 8019c88:	2800      	cmp	r0, #0
 8019c8a:	d0f2      	beq.n	8019c72 <_findenv_r+0x26>
 8019c8c:	4642      	mov	r2, r8
 8019c8e:	4649      	mov	r1, r9
 8019c90:	f000 fca1 	bl	801a5d6 <strncmp>
 8019c94:	2800      	cmp	r0, #0
 8019c96:	d1f4      	bne.n	8019c82 <_findenv_r+0x36>
 8019c98:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019c9c:	eb03 0508 	add.w	r5, r3, r8
 8019ca0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019ca4:	2b3d      	cmp	r3, #61	@ 0x3d
 8019ca6:	d1ec      	bne.n	8019c82 <_findenv_r+0x36>
 8019ca8:	f8da 3000 	ldr.w	r3, [sl]
 8019cac:	ebab 0303 	sub.w	r3, fp, r3
 8019cb0:	109b      	asrs	r3, r3, #2
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	603b      	str	r3, [r7, #0]
 8019cb6:	f000 fd75 	bl	801a7a4 <__env_unlock>
 8019cba:	1c68      	adds	r0, r5, #1
 8019cbc:	e7dd      	b.n	8019c7a <_findenv_r+0x2e>
 8019cbe:	bf00      	nop
 8019cc0:	20000004 	.word	0x20000004

08019cc4 <malloc>:
 8019cc4:	4b02      	ldr	r3, [pc, #8]	@ (8019cd0 <malloc+0xc>)
 8019cc6:	4601      	mov	r1, r0
 8019cc8:	6818      	ldr	r0, [r3, #0]
 8019cca:	f000 b82d 	b.w	8019d28 <_malloc_r>
 8019cce:	bf00      	nop
 8019cd0:	200009c8 	.word	0x200009c8

08019cd4 <free>:
 8019cd4:	4b02      	ldr	r3, [pc, #8]	@ (8019ce0 <free+0xc>)
 8019cd6:	4601      	mov	r1, r0
 8019cd8:	6818      	ldr	r0, [r3, #0]
 8019cda:	f000 bd69 	b.w	801a7b0 <_free_r>
 8019cde:	bf00      	nop
 8019ce0:	200009c8 	.word	0x200009c8

08019ce4 <sbrk_aligned>:
 8019ce4:	b570      	push	{r4, r5, r6, lr}
 8019ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8019d24 <sbrk_aligned+0x40>)
 8019ce8:	460c      	mov	r4, r1
 8019cea:	6831      	ldr	r1, [r6, #0]
 8019cec:	4605      	mov	r5, r0
 8019cee:	b911      	cbnz	r1, 8019cf6 <sbrk_aligned+0x12>
 8019cf0:	f000 fcce 	bl	801a690 <_sbrk_r>
 8019cf4:	6030      	str	r0, [r6, #0]
 8019cf6:	4621      	mov	r1, r4
 8019cf8:	4628      	mov	r0, r5
 8019cfa:	f000 fcc9 	bl	801a690 <_sbrk_r>
 8019cfe:	1c43      	adds	r3, r0, #1
 8019d00:	d103      	bne.n	8019d0a <sbrk_aligned+0x26>
 8019d02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019d06:	4620      	mov	r0, r4
 8019d08:	bd70      	pop	{r4, r5, r6, pc}
 8019d0a:	1cc4      	adds	r4, r0, #3
 8019d0c:	f024 0403 	bic.w	r4, r4, #3
 8019d10:	42a0      	cmp	r0, r4
 8019d12:	d0f8      	beq.n	8019d06 <sbrk_aligned+0x22>
 8019d14:	1a21      	subs	r1, r4, r0
 8019d16:	4628      	mov	r0, r5
 8019d18:	f000 fcba 	bl	801a690 <_sbrk_r>
 8019d1c:	3001      	adds	r0, #1
 8019d1e:	d1f2      	bne.n	8019d06 <sbrk_aligned+0x22>
 8019d20:	e7ef      	b.n	8019d02 <sbrk_aligned+0x1e>
 8019d22:	bf00      	nop
 8019d24:	2000c248 	.word	0x2000c248

08019d28 <_malloc_r>:
 8019d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d2c:	1ccd      	adds	r5, r1, #3
 8019d2e:	f025 0503 	bic.w	r5, r5, #3
 8019d32:	3508      	adds	r5, #8
 8019d34:	2d0c      	cmp	r5, #12
 8019d36:	bf38      	it	cc
 8019d38:	250c      	movcc	r5, #12
 8019d3a:	2d00      	cmp	r5, #0
 8019d3c:	4606      	mov	r6, r0
 8019d3e:	db01      	blt.n	8019d44 <_malloc_r+0x1c>
 8019d40:	42a9      	cmp	r1, r5
 8019d42:	d904      	bls.n	8019d4e <_malloc_r+0x26>
 8019d44:	230c      	movs	r3, #12
 8019d46:	6033      	str	r3, [r6, #0]
 8019d48:	2000      	movs	r0, #0
 8019d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019e24 <_malloc_r+0xfc>
 8019d52:	f000 f869 	bl	8019e28 <__malloc_lock>
 8019d56:	f8d8 3000 	ldr.w	r3, [r8]
 8019d5a:	461c      	mov	r4, r3
 8019d5c:	bb44      	cbnz	r4, 8019db0 <_malloc_r+0x88>
 8019d5e:	4629      	mov	r1, r5
 8019d60:	4630      	mov	r0, r6
 8019d62:	f7ff ffbf 	bl	8019ce4 <sbrk_aligned>
 8019d66:	1c43      	adds	r3, r0, #1
 8019d68:	4604      	mov	r4, r0
 8019d6a:	d158      	bne.n	8019e1e <_malloc_r+0xf6>
 8019d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8019d70:	4627      	mov	r7, r4
 8019d72:	2f00      	cmp	r7, #0
 8019d74:	d143      	bne.n	8019dfe <_malloc_r+0xd6>
 8019d76:	2c00      	cmp	r4, #0
 8019d78:	d04b      	beq.n	8019e12 <_malloc_r+0xea>
 8019d7a:	6823      	ldr	r3, [r4, #0]
 8019d7c:	4639      	mov	r1, r7
 8019d7e:	4630      	mov	r0, r6
 8019d80:	eb04 0903 	add.w	r9, r4, r3
 8019d84:	f000 fc84 	bl	801a690 <_sbrk_r>
 8019d88:	4581      	cmp	r9, r0
 8019d8a:	d142      	bne.n	8019e12 <_malloc_r+0xea>
 8019d8c:	6821      	ldr	r1, [r4, #0]
 8019d8e:	1a6d      	subs	r5, r5, r1
 8019d90:	4629      	mov	r1, r5
 8019d92:	4630      	mov	r0, r6
 8019d94:	f7ff ffa6 	bl	8019ce4 <sbrk_aligned>
 8019d98:	3001      	adds	r0, #1
 8019d9a:	d03a      	beq.n	8019e12 <_malloc_r+0xea>
 8019d9c:	6823      	ldr	r3, [r4, #0]
 8019d9e:	442b      	add	r3, r5
 8019da0:	6023      	str	r3, [r4, #0]
 8019da2:	f8d8 3000 	ldr.w	r3, [r8]
 8019da6:	685a      	ldr	r2, [r3, #4]
 8019da8:	bb62      	cbnz	r2, 8019e04 <_malloc_r+0xdc>
 8019daa:	f8c8 7000 	str.w	r7, [r8]
 8019dae:	e00f      	b.n	8019dd0 <_malloc_r+0xa8>
 8019db0:	6822      	ldr	r2, [r4, #0]
 8019db2:	1b52      	subs	r2, r2, r5
 8019db4:	d420      	bmi.n	8019df8 <_malloc_r+0xd0>
 8019db6:	2a0b      	cmp	r2, #11
 8019db8:	d917      	bls.n	8019dea <_malloc_r+0xc2>
 8019dba:	1961      	adds	r1, r4, r5
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	6025      	str	r5, [r4, #0]
 8019dc0:	bf18      	it	ne
 8019dc2:	6059      	strne	r1, [r3, #4]
 8019dc4:	6863      	ldr	r3, [r4, #4]
 8019dc6:	bf08      	it	eq
 8019dc8:	f8c8 1000 	streq.w	r1, [r8]
 8019dcc:	5162      	str	r2, [r4, r5]
 8019dce:	604b      	str	r3, [r1, #4]
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	f000 f82f 	bl	8019e34 <__malloc_unlock>
 8019dd6:	f104 000b 	add.w	r0, r4, #11
 8019dda:	1d23      	adds	r3, r4, #4
 8019ddc:	f020 0007 	bic.w	r0, r0, #7
 8019de0:	1ac2      	subs	r2, r0, r3
 8019de2:	bf1c      	itt	ne
 8019de4:	1a1b      	subne	r3, r3, r0
 8019de6:	50a3      	strne	r3, [r4, r2]
 8019de8:	e7af      	b.n	8019d4a <_malloc_r+0x22>
 8019dea:	6862      	ldr	r2, [r4, #4]
 8019dec:	42a3      	cmp	r3, r4
 8019dee:	bf0c      	ite	eq
 8019df0:	f8c8 2000 	streq.w	r2, [r8]
 8019df4:	605a      	strne	r2, [r3, #4]
 8019df6:	e7eb      	b.n	8019dd0 <_malloc_r+0xa8>
 8019df8:	4623      	mov	r3, r4
 8019dfa:	6864      	ldr	r4, [r4, #4]
 8019dfc:	e7ae      	b.n	8019d5c <_malloc_r+0x34>
 8019dfe:	463c      	mov	r4, r7
 8019e00:	687f      	ldr	r7, [r7, #4]
 8019e02:	e7b6      	b.n	8019d72 <_malloc_r+0x4a>
 8019e04:	461a      	mov	r2, r3
 8019e06:	685b      	ldr	r3, [r3, #4]
 8019e08:	42a3      	cmp	r3, r4
 8019e0a:	d1fb      	bne.n	8019e04 <_malloc_r+0xdc>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	6053      	str	r3, [r2, #4]
 8019e10:	e7de      	b.n	8019dd0 <_malloc_r+0xa8>
 8019e12:	230c      	movs	r3, #12
 8019e14:	6033      	str	r3, [r6, #0]
 8019e16:	4630      	mov	r0, r6
 8019e18:	f000 f80c 	bl	8019e34 <__malloc_unlock>
 8019e1c:	e794      	b.n	8019d48 <_malloc_r+0x20>
 8019e1e:	6005      	str	r5, [r0, #0]
 8019e20:	e7d6      	b.n	8019dd0 <_malloc_r+0xa8>
 8019e22:	bf00      	nop
 8019e24:	2000c24c 	.word	0x2000c24c

08019e28 <__malloc_lock>:
 8019e28:	4801      	ldr	r0, [pc, #4]	@ (8019e30 <__malloc_lock+0x8>)
 8019e2a:	f000 bc7e 	b.w	801a72a <__retarget_lock_acquire_recursive>
 8019e2e:	bf00      	nop
 8019e30:	2000c391 	.word	0x2000c391

08019e34 <__malloc_unlock>:
 8019e34:	4801      	ldr	r0, [pc, #4]	@ (8019e3c <__malloc_unlock+0x8>)
 8019e36:	f000 bc79 	b.w	801a72c <__retarget_lock_release_recursive>
 8019e3a:	bf00      	nop
 8019e3c:	2000c391 	.word	0x2000c391

08019e40 <srand>:
 8019e40:	b538      	push	{r3, r4, r5, lr}
 8019e42:	4b10      	ldr	r3, [pc, #64]	@ (8019e84 <srand+0x44>)
 8019e44:	681d      	ldr	r5, [r3, #0]
 8019e46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019e48:	4604      	mov	r4, r0
 8019e4a:	b9b3      	cbnz	r3, 8019e7a <srand+0x3a>
 8019e4c:	2018      	movs	r0, #24
 8019e4e:	f7ff ff39 	bl	8019cc4 <malloc>
 8019e52:	4602      	mov	r2, r0
 8019e54:	6328      	str	r0, [r5, #48]	@ 0x30
 8019e56:	b920      	cbnz	r0, 8019e62 <srand+0x22>
 8019e58:	4b0b      	ldr	r3, [pc, #44]	@ (8019e88 <srand+0x48>)
 8019e5a:	480c      	ldr	r0, [pc, #48]	@ (8019e8c <srand+0x4c>)
 8019e5c:	2146      	movs	r1, #70	@ 0x46
 8019e5e:	f000 fc7d 	bl	801a75c <__assert_func>
 8019e62:	490b      	ldr	r1, [pc, #44]	@ (8019e90 <srand+0x50>)
 8019e64:	4b0b      	ldr	r3, [pc, #44]	@ (8019e94 <srand+0x54>)
 8019e66:	e9c0 1300 	strd	r1, r3, [r0]
 8019e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8019e98 <srand+0x58>)
 8019e6c:	6083      	str	r3, [r0, #8]
 8019e6e:	230b      	movs	r3, #11
 8019e70:	8183      	strh	r3, [r0, #12]
 8019e72:	2100      	movs	r1, #0
 8019e74:	2001      	movs	r0, #1
 8019e76:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019e7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	611c      	str	r4, [r3, #16]
 8019e80:	615a      	str	r2, [r3, #20]
 8019e82:	bd38      	pop	{r3, r4, r5, pc}
 8019e84:	200009c8 	.word	0x200009c8
 8019e88:	0801dfb2 	.word	0x0801dfb2
 8019e8c:	0801dfc9 	.word	0x0801dfc9
 8019e90:	abcd330e 	.word	0xabcd330e
 8019e94:	e66d1234 	.word	0xe66d1234
 8019e98:	0005deec 	.word	0x0005deec

08019e9c <rand>:
 8019e9c:	4b16      	ldr	r3, [pc, #88]	@ (8019ef8 <rand+0x5c>)
 8019e9e:	b510      	push	{r4, lr}
 8019ea0:	681c      	ldr	r4, [r3, #0]
 8019ea2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ea4:	b9b3      	cbnz	r3, 8019ed4 <rand+0x38>
 8019ea6:	2018      	movs	r0, #24
 8019ea8:	f7ff ff0c 	bl	8019cc4 <malloc>
 8019eac:	4602      	mov	r2, r0
 8019eae:	6320      	str	r0, [r4, #48]	@ 0x30
 8019eb0:	b920      	cbnz	r0, 8019ebc <rand+0x20>
 8019eb2:	4b12      	ldr	r3, [pc, #72]	@ (8019efc <rand+0x60>)
 8019eb4:	4812      	ldr	r0, [pc, #72]	@ (8019f00 <rand+0x64>)
 8019eb6:	2152      	movs	r1, #82	@ 0x52
 8019eb8:	f000 fc50 	bl	801a75c <__assert_func>
 8019ebc:	4911      	ldr	r1, [pc, #68]	@ (8019f04 <rand+0x68>)
 8019ebe:	4b12      	ldr	r3, [pc, #72]	@ (8019f08 <rand+0x6c>)
 8019ec0:	e9c0 1300 	strd	r1, r3, [r0]
 8019ec4:	4b11      	ldr	r3, [pc, #68]	@ (8019f0c <rand+0x70>)
 8019ec6:	6083      	str	r3, [r0, #8]
 8019ec8:	230b      	movs	r3, #11
 8019eca:	8183      	strh	r3, [r0, #12]
 8019ecc:	2100      	movs	r1, #0
 8019ece:	2001      	movs	r0, #1
 8019ed0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019ed4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019ed6:	480e      	ldr	r0, [pc, #56]	@ (8019f10 <rand+0x74>)
 8019ed8:	690b      	ldr	r3, [r1, #16]
 8019eda:	694c      	ldr	r4, [r1, #20]
 8019edc:	4a0d      	ldr	r2, [pc, #52]	@ (8019f14 <rand+0x78>)
 8019ede:	4358      	muls	r0, r3
 8019ee0:	fb02 0004 	mla	r0, r2, r4, r0
 8019ee4:	fba3 3202 	umull	r3, r2, r3, r2
 8019ee8:	3301      	adds	r3, #1
 8019eea:	eb40 0002 	adc.w	r0, r0, r2
 8019eee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019ef2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019ef6:	bd10      	pop	{r4, pc}
 8019ef8:	200009c8 	.word	0x200009c8
 8019efc:	0801dfb2 	.word	0x0801dfb2
 8019f00:	0801dfc9 	.word	0x0801dfc9
 8019f04:	abcd330e 	.word	0xabcd330e
 8019f08:	e66d1234 	.word	0xe66d1234
 8019f0c:	0005deec 	.word	0x0005deec
 8019f10:	5851f42d 	.word	0x5851f42d
 8019f14:	4c957f2d 	.word	0x4c957f2d

08019f18 <realloc>:
 8019f18:	4b02      	ldr	r3, [pc, #8]	@ (8019f24 <realloc+0xc>)
 8019f1a:	460a      	mov	r2, r1
 8019f1c:	4601      	mov	r1, r0
 8019f1e:	6818      	ldr	r0, [r3, #0]
 8019f20:	f000 b802 	b.w	8019f28 <_realloc_r>
 8019f24:	200009c8 	.word	0x200009c8

08019f28 <_realloc_r>:
 8019f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f2c:	4680      	mov	r8, r0
 8019f2e:	4615      	mov	r5, r2
 8019f30:	460c      	mov	r4, r1
 8019f32:	b921      	cbnz	r1, 8019f3e <_realloc_r+0x16>
 8019f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f38:	4611      	mov	r1, r2
 8019f3a:	f7ff bef5 	b.w	8019d28 <_malloc_r>
 8019f3e:	b92a      	cbnz	r2, 8019f4c <_realloc_r+0x24>
 8019f40:	f000 fc36 	bl	801a7b0 <_free_r>
 8019f44:	2400      	movs	r4, #0
 8019f46:	4620      	mov	r0, r4
 8019f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f4c:	f000 fc7a 	bl	801a844 <_malloc_usable_size_r>
 8019f50:	4285      	cmp	r5, r0
 8019f52:	4606      	mov	r6, r0
 8019f54:	d802      	bhi.n	8019f5c <_realloc_r+0x34>
 8019f56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019f5a:	d8f4      	bhi.n	8019f46 <_realloc_r+0x1e>
 8019f5c:	4629      	mov	r1, r5
 8019f5e:	4640      	mov	r0, r8
 8019f60:	f7ff fee2 	bl	8019d28 <_malloc_r>
 8019f64:	4607      	mov	r7, r0
 8019f66:	2800      	cmp	r0, #0
 8019f68:	d0ec      	beq.n	8019f44 <_realloc_r+0x1c>
 8019f6a:	42b5      	cmp	r5, r6
 8019f6c:	462a      	mov	r2, r5
 8019f6e:	4621      	mov	r1, r4
 8019f70:	bf28      	it	cs
 8019f72:	4632      	movcs	r2, r6
 8019f74:	f000 fbe3 	bl	801a73e <memcpy>
 8019f78:	4621      	mov	r1, r4
 8019f7a:	4640      	mov	r0, r8
 8019f7c:	f000 fc18 	bl	801a7b0 <_free_r>
 8019f80:	463c      	mov	r4, r7
 8019f82:	e7e0      	b.n	8019f46 <_realloc_r+0x1e>

08019f84 <_strtoul_l.constprop.0>:
 8019f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f88:	4e34      	ldr	r6, [pc, #208]	@ (801a05c <_strtoul_l.constprop.0+0xd8>)
 8019f8a:	4686      	mov	lr, r0
 8019f8c:	460d      	mov	r5, r1
 8019f8e:	4628      	mov	r0, r5
 8019f90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f94:	5d37      	ldrb	r7, [r6, r4]
 8019f96:	f017 0708 	ands.w	r7, r7, #8
 8019f9a:	d1f8      	bne.n	8019f8e <_strtoul_l.constprop.0+0xa>
 8019f9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8019f9e:	d12f      	bne.n	801a000 <_strtoul_l.constprop.0+0x7c>
 8019fa0:	782c      	ldrb	r4, [r5, #0]
 8019fa2:	2701      	movs	r7, #1
 8019fa4:	1c85      	adds	r5, r0, #2
 8019fa6:	f033 0010 	bics.w	r0, r3, #16
 8019faa:	d109      	bne.n	8019fc0 <_strtoul_l.constprop.0+0x3c>
 8019fac:	2c30      	cmp	r4, #48	@ 0x30
 8019fae:	d12c      	bne.n	801a00a <_strtoul_l.constprop.0+0x86>
 8019fb0:	7828      	ldrb	r0, [r5, #0]
 8019fb2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019fb6:	2858      	cmp	r0, #88	@ 0x58
 8019fb8:	d127      	bne.n	801a00a <_strtoul_l.constprop.0+0x86>
 8019fba:	786c      	ldrb	r4, [r5, #1]
 8019fbc:	2310      	movs	r3, #16
 8019fbe:	3502      	adds	r5, #2
 8019fc0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019fc4:	2600      	movs	r6, #0
 8019fc6:	fbb8 f8f3 	udiv	r8, r8, r3
 8019fca:	fb03 f908 	mul.w	r9, r3, r8
 8019fce:	ea6f 0909 	mvn.w	r9, r9
 8019fd2:	4630      	mov	r0, r6
 8019fd4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019fd8:	f1bc 0f09 	cmp.w	ip, #9
 8019fdc:	d81c      	bhi.n	801a018 <_strtoul_l.constprop.0+0x94>
 8019fde:	4664      	mov	r4, ip
 8019fe0:	42a3      	cmp	r3, r4
 8019fe2:	dd2a      	ble.n	801a03a <_strtoul_l.constprop.0+0xb6>
 8019fe4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019fe8:	d007      	beq.n	8019ffa <_strtoul_l.constprop.0+0x76>
 8019fea:	4580      	cmp	r8, r0
 8019fec:	d322      	bcc.n	801a034 <_strtoul_l.constprop.0+0xb0>
 8019fee:	d101      	bne.n	8019ff4 <_strtoul_l.constprop.0+0x70>
 8019ff0:	45a1      	cmp	r9, r4
 8019ff2:	db1f      	blt.n	801a034 <_strtoul_l.constprop.0+0xb0>
 8019ff4:	fb00 4003 	mla	r0, r0, r3, r4
 8019ff8:	2601      	movs	r6, #1
 8019ffa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ffe:	e7e9      	b.n	8019fd4 <_strtoul_l.constprop.0+0x50>
 801a000:	2c2b      	cmp	r4, #43	@ 0x2b
 801a002:	bf04      	itt	eq
 801a004:	782c      	ldrbeq	r4, [r5, #0]
 801a006:	1c85      	addeq	r5, r0, #2
 801a008:	e7cd      	b.n	8019fa6 <_strtoul_l.constprop.0+0x22>
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d1d8      	bne.n	8019fc0 <_strtoul_l.constprop.0+0x3c>
 801a00e:	2c30      	cmp	r4, #48	@ 0x30
 801a010:	bf0c      	ite	eq
 801a012:	2308      	moveq	r3, #8
 801a014:	230a      	movne	r3, #10
 801a016:	e7d3      	b.n	8019fc0 <_strtoul_l.constprop.0+0x3c>
 801a018:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a01c:	f1bc 0f19 	cmp.w	ip, #25
 801a020:	d801      	bhi.n	801a026 <_strtoul_l.constprop.0+0xa2>
 801a022:	3c37      	subs	r4, #55	@ 0x37
 801a024:	e7dc      	b.n	8019fe0 <_strtoul_l.constprop.0+0x5c>
 801a026:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a02a:	f1bc 0f19 	cmp.w	ip, #25
 801a02e:	d804      	bhi.n	801a03a <_strtoul_l.constprop.0+0xb6>
 801a030:	3c57      	subs	r4, #87	@ 0x57
 801a032:	e7d5      	b.n	8019fe0 <_strtoul_l.constprop.0+0x5c>
 801a034:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a038:	e7df      	b.n	8019ffa <_strtoul_l.constprop.0+0x76>
 801a03a:	1c73      	adds	r3, r6, #1
 801a03c:	d106      	bne.n	801a04c <_strtoul_l.constprop.0+0xc8>
 801a03e:	2322      	movs	r3, #34	@ 0x22
 801a040:	f8ce 3000 	str.w	r3, [lr]
 801a044:	4630      	mov	r0, r6
 801a046:	b932      	cbnz	r2, 801a056 <_strtoul_l.constprop.0+0xd2>
 801a048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a04c:	b107      	cbz	r7, 801a050 <_strtoul_l.constprop.0+0xcc>
 801a04e:	4240      	negs	r0, r0
 801a050:	2a00      	cmp	r2, #0
 801a052:	d0f9      	beq.n	801a048 <_strtoul_l.constprop.0+0xc4>
 801a054:	b106      	cbz	r6, 801a058 <_strtoul_l.constprop.0+0xd4>
 801a056:	1e69      	subs	r1, r5, #1
 801a058:	6011      	str	r1, [r2, #0]
 801a05a:	e7f5      	b.n	801a048 <_strtoul_l.constprop.0+0xc4>
 801a05c:	0801e022 	.word	0x0801e022

0801a060 <strtoul>:
 801a060:	4613      	mov	r3, r2
 801a062:	460a      	mov	r2, r1
 801a064:	4601      	mov	r1, r0
 801a066:	4802      	ldr	r0, [pc, #8]	@ (801a070 <strtoul+0x10>)
 801a068:	6800      	ldr	r0, [r0, #0]
 801a06a:	f7ff bf8b 	b.w	8019f84 <_strtoul_l.constprop.0>
 801a06e:	bf00      	nop
 801a070:	200009c8 	.word	0x200009c8

0801a074 <std>:
 801a074:	2300      	movs	r3, #0
 801a076:	b510      	push	{r4, lr}
 801a078:	4604      	mov	r4, r0
 801a07a:	e9c0 3300 	strd	r3, r3, [r0]
 801a07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a082:	6083      	str	r3, [r0, #8]
 801a084:	8181      	strh	r1, [r0, #12]
 801a086:	6643      	str	r3, [r0, #100]	@ 0x64
 801a088:	81c2      	strh	r2, [r0, #14]
 801a08a:	6183      	str	r3, [r0, #24]
 801a08c:	4619      	mov	r1, r3
 801a08e:	2208      	movs	r2, #8
 801a090:	305c      	adds	r0, #92	@ 0x5c
 801a092:	f000 fa8b 	bl	801a5ac <memset>
 801a096:	4b0d      	ldr	r3, [pc, #52]	@ (801a0cc <std+0x58>)
 801a098:	6263      	str	r3, [r4, #36]	@ 0x24
 801a09a:	4b0d      	ldr	r3, [pc, #52]	@ (801a0d0 <std+0x5c>)
 801a09c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a09e:	4b0d      	ldr	r3, [pc, #52]	@ (801a0d4 <std+0x60>)
 801a0a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a0a2:	4b0d      	ldr	r3, [pc, #52]	@ (801a0d8 <std+0x64>)
 801a0a4:	6323      	str	r3, [r4, #48]	@ 0x30
 801a0a6:	4b0d      	ldr	r3, [pc, #52]	@ (801a0dc <std+0x68>)
 801a0a8:	6224      	str	r4, [r4, #32]
 801a0aa:	429c      	cmp	r4, r3
 801a0ac:	d006      	beq.n	801a0bc <std+0x48>
 801a0ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a0b2:	4294      	cmp	r4, r2
 801a0b4:	d002      	beq.n	801a0bc <std+0x48>
 801a0b6:	33d0      	adds	r3, #208	@ 0xd0
 801a0b8:	429c      	cmp	r4, r3
 801a0ba:	d105      	bne.n	801a0c8 <std+0x54>
 801a0bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0c4:	f000 bb30 	b.w	801a728 <__retarget_lock_init_recursive>
 801a0c8:	bd10      	pop	{r4, pc}
 801a0ca:	bf00      	nop
 801a0cc:	0801a339 	.word	0x0801a339
 801a0d0:	0801a35b 	.word	0x0801a35b
 801a0d4:	0801a393 	.word	0x0801a393
 801a0d8:	0801a3b7 	.word	0x0801a3b7
 801a0dc:	2000c250 	.word	0x2000c250

0801a0e0 <stdio_exit_handler>:
 801a0e0:	4a02      	ldr	r2, [pc, #8]	@ (801a0ec <stdio_exit_handler+0xc>)
 801a0e2:	4903      	ldr	r1, [pc, #12]	@ (801a0f0 <stdio_exit_handler+0x10>)
 801a0e4:	4803      	ldr	r0, [pc, #12]	@ (801a0f4 <stdio_exit_handler+0x14>)
 801a0e6:	f000 b869 	b.w	801a1bc <_fwalk_sglue>
 801a0ea:	bf00      	nop
 801a0ec:	200009bc 	.word	0x200009bc
 801a0f0:	0801b1ad 	.word	0x0801b1ad
 801a0f4:	200009cc 	.word	0x200009cc

0801a0f8 <cleanup_stdio>:
 801a0f8:	6841      	ldr	r1, [r0, #4]
 801a0fa:	4b0c      	ldr	r3, [pc, #48]	@ (801a12c <cleanup_stdio+0x34>)
 801a0fc:	4299      	cmp	r1, r3
 801a0fe:	b510      	push	{r4, lr}
 801a100:	4604      	mov	r4, r0
 801a102:	d001      	beq.n	801a108 <cleanup_stdio+0x10>
 801a104:	f001 f852 	bl	801b1ac <_fflush_r>
 801a108:	68a1      	ldr	r1, [r4, #8]
 801a10a:	4b09      	ldr	r3, [pc, #36]	@ (801a130 <cleanup_stdio+0x38>)
 801a10c:	4299      	cmp	r1, r3
 801a10e:	d002      	beq.n	801a116 <cleanup_stdio+0x1e>
 801a110:	4620      	mov	r0, r4
 801a112:	f001 f84b 	bl	801b1ac <_fflush_r>
 801a116:	68e1      	ldr	r1, [r4, #12]
 801a118:	4b06      	ldr	r3, [pc, #24]	@ (801a134 <cleanup_stdio+0x3c>)
 801a11a:	4299      	cmp	r1, r3
 801a11c:	d004      	beq.n	801a128 <cleanup_stdio+0x30>
 801a11e:	4620      	mov	r0, r4
 801a120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a124:	f001 b842 	b.w	801b1ac <_fflush_r>
 801a128:	bd10      	pop	{r4, pc}
 801a12a:	bf00      	nop
 801a12c:	2000c250 	.word	0x2000c250
 801a130:	2000c2b8 	.word	0x2000c2b8
 801a134:	2000c320 	.word	0x2000c320

0801a138 <global_stdio_init.part.0>:
 801a138:	b510      	push	{r4, lr}
 801a13a:	4b0b      	ldr	r3, [pc, #44]	@ (801a168 <global_stdio_init.part.0+0x30>)
 801a13c:	4c0b      	ldr	r4, [pc, #44]	@ (801a16c <global_stdio_init.part.0+0x34>)
 801a13e:	4a0c      	ldr	r2, [pc, #48]	@ (801a170 <global_stdio_init.part.0+0x38>)
 801a140:	601a      	str	r2, [r3, #0]
 801a142:	4620      	mov	r0, r4
 801a144:	2200      	movs	r2, #0
 801a146:	2104      	movs	r1, #4
 801a148:	f7ff ff94 	bl	801a074 <std>
 801a14c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a150:	2201      	movs	r2, #1
 801a152:	2109      	movs	r1, #9
 801a154:	f7ff ff8e 	bl	801a074 <std>
 801a158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a15c:	2202      	movs	r2, #2
 801a15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a162:	2112      	movs	r1, #18
 801a164:	f7ff bf86 	b.w	801a074 <std>
 801a168:	2000c388 	.word	0x2000c388
 801a16c:	2000c250 	.word	0x2000c250
 801a170:	0801a0e1 	.word	0x0801a0e1

0801a174 <__sfp_lock_acquire>:
 801a174:	4801      	ldr	r0, [pc, #4]	@ (801a17c <__sfp_lock_acquire+0x8>)
 801a176:	f000 bad8 	b.w	801a72a <__retarget_lock_acquire_recursive>
 801a17a:	bf00      	nop
 801a17c:	2000c392 	.word	0x2000c392

0801a180 <__sfp_lock_release>:
 801a180:	4801      	ldr	r0, [pc, #4]	@ (801a188 <__sfp_lock_release+0x8>)
 801a182:	f000 bad3 	b.w	801a72c <__retarget_lock_release_recursive>
 801a186:	bf00      	nop
 801a188:	2000c392 	.word	0x2000c392

0801a18c <__sinit>:
 801a18c:	b510      	push	{r4, lr}
 801a18e:	4604      	mov	r4, r0
 801a190:	f7ff fff0 	bl	801a174 <__sfp_lock_acquire>
 801a194:	6a23      	ldr	r3, [r4, #32]
 801a196:	b11b      	cbz	r3, 801a1a0 <__sinit+0x14>
 801a198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a19c:	f7ff bff0 	b.w	801a180 <__sfp_lock_release>
 801a1a0:	4b04      	ldr	r3, [pc, #16]	@ (801a1b4 <__sinit+0x28>)
 801a1a2:	6223      	str	r3, [r4, #32]
 801a1a4:	4b04      	ldr	r3, [pc, #16]	@ (801a1b8 <__sinit+0x2c>)
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d1f5      	bne.n	801a198 <__sinit+0xc>
 801a1ac:	f7ff ffc4 	bl	801a138 <global_stdio_init.part.0>
 801a1b0:	e7f2      	b.n	801a198 <__sinit+0xc>
 801a1b2:	bf00      	nop
 801a1b4:	0801a0f9 	.word	0x0801a0f9
 801a1b8:	2000c388 	.word	0x2000c388

0801a1bc <_fwalk_sglue>:
 801a1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1c0:	4607      	mov	r7, r0
 801a1c2:	4688      	mov	r8, r1
 801a1c4:	4614      	mov	r4, r2
 801a1c6:	2600      	movs	r6, #0
 801a1c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a1cc:	f1b9 0901 	subs.w	r9, r9, #1
 801a1d0:	d505      	bpl.n	801a1de <_fwalk_sglue+0x22>
 801a1d2:	6824      	ldr	r4, [r4, #0]
 801a1d4:	2c00      	cmp	r4, #0
 801a1d6:	d1f7      	bne.n	801a1c8 <_fwalk_sglue+0xc>
 801a1d8:	4630      	mov	r0, r6
 801a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1de:	89ab      	ldrh	r3, [r5, #12]
 801a1e0:	2b01      	cmp	r3, #1
 801a1e2:	d907      	bls.n	801a1f4 <_fwalk_sglue+0x38>
 801a1e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a1e8:	3301      	adds	r3, #1
 801a1ea:	d003      	beq.n	801a1f4 <_fwalk_sglue+0x38>
 801a1ec:	4629      	mov	r1, r5
 801a1ee:	4638      	mov	r0, r7
 801a1f0:	47c0      	blx	r8
 801a1f2:	4306      	orrs	r6, r0
 801a1f4:	3568      	adds	r5, #104	@ 0x68
 801a1f6:	e7e9      	b.n	801a1cc <_fwalk_sglue+0x10>

0801a1f8 <_fwrite_r>:
 801a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1fc:	9c08      	ldr	r4, [sp, #32]
 801a1fe:	468a      	mov	sl, r1
 801a200:	4690      	mov	r8, r2
 801a202:	fb02 f903 	mul.w	r9, r2, r3
 801a206:	4606      	mov	r6, r0
 801a208:	b118      	cbz	r0, 801a212 <_fwrite_r+0x1a>
 801a20a:	6a03      	ldr	r3, [r0, #32]
 801a20c:	b90b      	cbnz	r3, 801a212 <_fwrite_r+0x1a>
 801a20e:	f7ff ffbd 	bl	801a18c <__sinit>
 801a212:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a214:	07dd      	lsls	r5, r3, #31
 801a216:	d405      	bmi.n	801a224 <_fwrite_r+0x2c>
 801a218:	89a3      	ldrh	r3, [r4, #12]
 801a21a:	0598      	lsls	r0, r3, #22
 801a21c:	d402      	bmi.n	801a224 <_fwrite_r+0x2c>
 801a21e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a220:	f000 fa83 	bl	801a72a <__retarget_lock_acquire_recursive>
 801a224:	89a3      	ldrh	r3, [r4, #12]
 801a226:	0719      	lsls	r1, r3, #28
 801a228:	d516      	bpl.n	801a258 <_fwrite_r+0x60>
 801a22a:	6923      	ldr	r3, [r4, #16]
 801a22c:	b1a3      	cbz	r3, 801a258 <_fwrite_r+0x60>
 801a22e:	2500      	movs	r5, #0
 801a230:	454d      	cmp	r5, r9
 801a232:	d01f      	beq.n	801a274 <_fwrite_r+0x7c>
 801a234:	68a7      	ldr	r7, [r4, #8]
 801a236:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801a23a:	3f01      	subs	r7, #1
 801a23c:	2f00      	cmp	r7, #0
 801a23e:	60a7      	str	r7, [r4, #8]
 801a240:	da04      	bge.n	801a24c <_fwrite_r+0x54>
 801a242:	69a3      	ldr	r3, [r4, #24]
 801a244:	429f      	cmp	r7, r3
 801a246:	db0f      	blt.n	801a268 <_fwrite_r+0x70>
 801a248:	290a      	cmp	r1, #10
 801a24a:	d00d      	beq.n	801a268 <_fwrite_r+0x70>
 801a24c:	6823      	ldr	r3, [r4, #0]
 801a24e:	1c5a      	adds	r2, r3, #1
 801a250:	6022      	str	r2, [r4, #0]
 801a252:	7019      	strb	r1, [r3, #0]
 801a254:	3501      	adds	r5, #1
 801a256:	e7eb      	b.n	801a230 <_fwrite_r+0x38>
 801a258:	4621      	mov	r1, r4
 801a25a:	4630      	mov	r0, r6
 801a25c:	f000 f926 	bl	801a4ac <__swsetup_r>
 801a260:	2800      	cmp	r0, #0
 801a262:	d0e4      	beq.n	801a22e <_fwrite_r+0x36>
 801a264:	2500      	movs	r5, #0
 801a266:	e005      	b.n	801a274 <_fwrite_r+0x7c>
 801a268:	4622      	mov	r2, r4
 801a26a:	4630      	mov	r0, r6
 801a26c:	f000 f8e0 	bl	801a430 <__swbuf_r>
 801a270:	3001      	adds	r0, #1
 801a272:	d1ef      	bne.n	801a254 <_fwrite_r+0x5c>
 801a274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a276:	07da      	lsls	r2, r3, #31
 801a278:	d405      	bmi.n	801a286 <_fwrite_r+0x8e>
 801a27a:	89a3      	ldrh	r3, [r4, #12]
 801a27c:	059b      	lsls	r3, r3, #22
 801a27e:	d402      	bmi.n	801a286 <_fwrite_r+0x8e>
 801a280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a282:	f000 fa53 	bl	801a72c <__retarget_lock_release_recursive>
 801a286:	fbb5 f0f8 	udiv	r0, r5, r8
 801a28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801a290 <fwrite>:
 801a290:	b507      	push	{r0, r1, r2, lr}
 801a292:	9300      	str	r3, [sp, #0]
 801a294:	4613      	mov	r3, r2
 801a296:	460a      	mov	r2, r1
 801a298:	4601      	mov	r1, r0
 801a29a:	4803      	ldr	r0, [pc, #12]	@ (801a2a8 <fwrite+0x18>)
 801a29c:	6800      	ldr	r0, [r0, #0]
 801a29e:	f7ff ffab 	bl	801a1f8 <_fwrite_r>
 801a2a2:	b003      	add	sp, #12
 801a2a4:	f85d fb04 	ldr.w	pc, [sp], #4
 801a2a8:	200009c8 	.word	0x200009c8

0801a2ac <iprintf>:
 801a2ac:	b40f      	push	{r0, r1, r2, r3}
 801a2ae:	b507      	push	{r0, r1, r2, lr}
 801a2b0:	4906      	ldr	r1, [pc, #24]	@ (801a2cc <iprintf+0x20>)
 801a2b2:	ab04      	add	r3, sp, #16
 801a2b4:	6808      	ldr	r0, [r1, #0]
 801a2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2ba:	6881      	ldr	r1, [r0, #8]
 801a2bc:	9301      	str	r3, [sp, #4]
 801a2be:	f000 fc4b 	bl	801ab58 <_vfiprintf_r>
 801a2c2:	b003      	add	sp, #12
 801a2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2c8:	b004      	add	sp, #16
 801a2ca:	4770      	bx	lr
 801a2cc:	200009c8 	.word	0x200009c8

0801a2d0 <sniprintf>:
 801a2d0:	b40c      	push	{r2, r3}
 801a2d2:	b530      	push	{r4, r5, lr}
 801a2d4:	4b17      	ldr	r3, [pc, #92]	@ (801a334 <sniprintf+0x64>)
 801a2d6:	1e0c      	subs	r4, r1, #0
 801a2d8:	681d      	ldr	r5, [r3, #0]
 801a2da:	b09d      	sub	sp, #116	@ 0x74
 801a2dc:	da08      	bge.n	801a2f0 <sniprintf+0x20>
 801a2de:	238b      	movs	r3, #139	@ 0x8b
 801a2e0:	602b      	str	r3, [r5, #0]
 801a2e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2e6:	b01d      	add	sp, #116	@ 0x74
 801a2e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a2ec:	b002      	add	sp, #8
 801a2ee:	4770      	bx	lr
 801a2f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a2f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a2f8:	bf14      	ite	ne
 801a2fa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a2fe:	4623      	moveq	r3, r4
 801a300:	9304      	str	r3, [sp, #16]
 801a302:	9307      	str	r3, [sp, #28]
 801a304:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a308:	9002      	str	r0, [sp, #8]
 801a30a:	9006      	str	r0, [sp, #24]
 801a30c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a310:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a312:	ab21      	add	r3, sp, #132	@ 0x84
 801a314:	a902      	add	r1, sp, #8
 801a316:	4628      	mov	r0, r5
 801a318:	9301      	str	r3, [sp, #4]
 801a31a:	f000 faf7 	bl	801a90c <_svfiprintf_r>
 801a31e:	1c43      	adds	r3, r0, #1
 801a320:	bfbc      	itt	lt
 801a322:	238b      	movlt	r3, #139	@ 0x8b
 801a324:	602b      	strlt	r3, [r5, #0]
 801a326:	2c00      	cmp	r4, #0
 801a328:	d0dd      	beq.n	801a2e6 <sniprintf+0x16>
 801a32a:	9b02      	ldr	r3, [sp, #8]
 801a32c:	2200      	movs	r2, #0
 801a32e:	701a      	strb	r2, [r3, #0]
 801a330:	e7d9      	b.n	801a2e6 <sniprintf+0x16>
 801a332:	bf00      	nop
 801a334:	200009c8 	.word	0x200009c8

0801a338 <__sread>:
 801a338:	b510      	push	{r4, lr}
 801a33a:	460c      	mov	r4, r1
 801a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a340:	f000 f994 	bl	801a66c <_read_r>
 801a344:	2800      	cmp	r0, #0
 801a346:	bfab      	itete	ge
 801a348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a34a:	89a3      	ldrhlt	r3, [r4, #12]
 801a34c:	181b      	addge	r3, r3, r0
 801a34e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a352:	bfac      	ite	ge
 801a354:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a356:	81a3      	strhlt	r3, [r4, #12]
 801a358:	bd10      	pop	{r4, pc}

0801a35a <__swrite>:
 801a35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a35e:	461f      	mov	r7, r3
 801a360:	898b      	ldrh	r3, [r1, #12]
 801a362:	05db      	lsls	r3, r3, #23
 801a364:	4605      	mov	r5, r0
 801a366:	460c      	mov	r4, r1
 801a368:	4616      	mov	r6, r2
 801a36a:	d505      	bpl.n	801a378 <__swrite+0x1e>
 801a36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a370:	2302      	movs	r3, #2
 801a372:	2200      	movs	r2, #0
 801a374:	f000 f968 	bl	801a648 <_lseek_r>
 801a378:	89a3      	ldrh	r3, [r4, #12]
 801a37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a37e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a382:	81a3      	strh	r3, [r4, #12]
 801a384:	4632      	mov	r2, r6
 801a386:	463b      	mov	r3, r7
 801a388:	4628      	mov	r0, r5
 801a38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a38e:	f000 b98f 	b.w	801a6b0 <_write_r>

0801a392 <__sseek>:
 801a392:	b510      	push	{r4, lr}
 801a394:	460c      	mov	r4, r1
 801a396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a39a:	f000 f955 	bl	801a648 <_lseek_r>
 801a39e:	1c43      	adds	r3, r0, #1
 801a3a0:	89a3      	ldrh	r3, [r4, #12]
 801a3a2:	bf15      	itete	ne
 801a3a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a3a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a3aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a3ae:	81a3      	strheq	r3, [r4, #12]
 801a3b0:	bf18      	it	ne
 801a3b2:	81a3      	strhne	r3, [r4, #12]
 801a3b4:	bd10      	pop	{r4, pc}

0801a3b6 <__sclose>:
 801a3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ba:	f000 b935 	b.w	801a628 <_close_r>

0801a3be <_vsniprintf_r>:
 801a3be:	b530      	push	{r4, r5, lr}
 801a3c0:	4614      	mov	r4, r2
 801a3c2:	2c00      	cmp	r4, #0
 801a3c4:	b09b      	sub	sp, #108	@ 0x6c
 801a3c6:	4605      	mov	r5, r0
 801a3c8:	461a      	mov	r2, r3
 801a3ca:	da05      	bge.n	801a3d8 <_vsniprintf_r+0x1a>
 801a3cc:	238b      	movs	r3, #139	@ 0x8b
 801a3ce:	6003      	str	r3, [r0, #0]
 801a3d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a3d4:	b01b      	add	sp, #108	@ 0x6c
 801a3d6:	bd30      	pop	{r4, r5, pc}
 801a3d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a3dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a3e0:	bf14      	ite	ne
 801a3e2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a3e6:	4623      	moveq	r3, r4
 801a3e8:	9302      	str	r3, [sp, #8]
 801a3ea:	9305      	str	r3, [sp, #20]
 801a3ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3f0:	9100      	str	r1, [sp, #0]
 801a3f2:	9104      	str	r1, [sp, #16]
 801a3f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a3f8:	4669      	mov	r1, sp
 801a3fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a3fc:	f000 fa86 	bl	801a90c <_svfiprintf_r>
 801a400:	1c43      	adds	r3, r0, #1
 801a402:	bfbc      	itt	lt
 801a404:	238b      	movlt	r3, #139	@ 0x8b
 801a406:	602b      	strlt	r3, [r5, #0]
 801a408:	2c00      	cmp	r4, #0
 801a40a:	d0e3      	beq.n	801a3d4 <_vsniprintf_r+0x16>
 801a40c:	9b00      	ldr	r3, [sp, #0]
 801a40e:	2200      	movs	r2, #0
 801a410:	701a      	strb	r2, [r3, #0]
 801a412:	e7df      	b.n	801a3d4 <_vsniprintf_r+0x16>

0801a414 <vsniprintf>:
 801a414:	b507      	push	{r0, r1, r2, lr}
 801a416:	9300      	str	r3, [sp, #0]
 801a418:	4613      	mov	r3, r2
 801a41a:	460a      	mov	r2, r1
 801a41c:	4601      	mov	r1, r0
 801a41e:	4803      	ldr	r0, [pc, #12]	@ (801a42c <vsniprintf+0x18>)
 801a420:	6800      	ldr	r0, [r0, #0]
 801a422:	f7ff ffcc 	bl	801a3be <_vsniprintf_r>
 801a426:	b003      	add	sp, #12
 801a428:	f85d fb04 	ldr.w	pc, [sp], #4
 801a42c:	200009c8 	.word	0x200009c8

0801a430 <__swbuf_r>:
 801a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a432:	460e      	mov	r6, r1
 801a434:	4614      	mov	r4, r2
 801a436:	4605      	mov	r5, r0
 801a438:	b118      	cbz	r0, 801a442 <__swbuf_r+0x12>
 801a43a:	6a03      	ldr	r3, [r0, #32]
 801a43c:	b90b      	cbnz	r3, 801a442 <__swbuf_r+0x12>
 801a43e:	f7ff fea5 	bl	801a18c <__sinit>
 801a442:	69a3      	ldr	r3, [r4, #24]
 801a444:	60a3      	str	r3, [r4, #8]
 801a446:	89a3      	ldrh	r3, [r4, #12]
 801a448:	071a      	lsls	r2, r3, #28
 801a44a:	d501      	bpl.n	801a450 <__swbuf_r+0x20>
 801a44c:	6923      	ldr	r3, [r4, #16]
 801a44e:	b943      	cbnz	r3, 801a462 <__swbuf_r+0x32>
 801a450:	4621      	mov	r1, r4
 801a452:	4628      	mov	r0, r5
 801a454:	f000 f82a 	bl	801a4ac <__swsetup_r>
 801a458:	b118      	cbz	r0, 801a462 <__swbuf_r+0x32>
 801a45a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a45e:	4638      	mov	r0, r7
 801a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a462:	6823      	ldr	r3, [r4, #0]
 801a464:	6922      	ldr	r2, [r4, #16]
 801a466:	1a98      	subs	r0, r3, r2
 801a468:	6963      	ldr	r3, [r4, #20]
 801a46a:	b2f6      	uxtb	r6, r6
 801a46c:	4283      	cmp	r3, r0
 801a46e:	4637      	mov	r7, r6
 801a470:	dc05      	bgt.n	801a47e <__swbuf_r+0x4e>
 801a472:	4621      	mov	r1, r4
 801a474:	4628      	mov	r0, r5
 801a476:	f000 fe99 	bl	801b1ac <_fflush_r>
 801a47a:	2800      	cmp	r0, #0
 801a47c:	d1ed      	bne.n	801a45a <__swbuf_r+0x2a>
 801a47e:	68a3      	ldr	r3, [r4, #8]
 801a480:	3b01      	subs	r3, #1
 801a482:	60a3      	str	r3, [r4, #8]
 801a484:	6823      	ldr	r3, [r4, #0]
 801a486:	1c5a      	adds	r2, r3, #1
 801a488:	6022      	str	r2, [r4, #0]
 801a48a:	701e      	strb	r6, [r3, #0]
 801a48c:	6962      	ldr	r2, [r4, #20]
 801a48e:	1c43      	adds	r3, r0, #1
 801a490:	429a      	cmp	r2, r3
 801a492:	d004      	beq.n	801a49e <__swbuf_r+0x6e>
 801a494:	89a3      	ldrh	r3, [r4, #12]
 801a496:	07db      	lsls	r3, r3, #31
 801a498:	d5e1      	bpl.n	801a45e <__swbuf_r+0x2e>
 801a49a:	2e0a      	cmp	r6, #10
 801a49c:	d1df      	bne.n	801a45e <__swbuf_r+0x2e>
 801a49e:	4621      	mov	r1, r4
 801a4a0:	4628      	mov	r0, r5
 801a4a2:	f000 fe83 	bl	801b1ac <_fflush_r>
 801a4a6:	2800      	cmp	r0, #0
 801a4a8:	d0d9      	beq.n	801a45e <__swbuf_r+0x2e>
 801a4aa:	e7d6      	b.n	801a45a <__swbuf_r+0x2a>

0801a4ac <__swsetup_r>:
 801a4ac:	b538      	push	{r3, r4, r5, lr}
 801a4ae:	4b29      	ldr	r3, [pc, #164]	@ (801a554 <__swsetup_r+0xa8>)
 801a4b0:	4605      	mov	r5, r0
 801a4b2:	6818      	ldr	r0, [r3, #0]
 801a4b4:	460c      	mov	r4, r1
 801a4b6:	b118      	cbz	r0, 801a4c0 <__swsetup_r+0x14>
 801a4b8:	6a03      	ldr	r3, [r0, #32]
 801a4ba:	b90b      	cbnz	r3, 801a4c0 <__swsetup_r+0x14>
 801a4bc:	f7ff fe66 	bl	801a18c <__sinit>
 801a4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4c4:	0719      	lsls	r1, r3, #28
 801a4c6:	d422      	bmi.n	801a50e <__swsetup_r+0x62>
 801a4c8:	06da      	lsls	r2, r3, #27
 801a4ca:	d407      	bmi.n	801a4dc <__swsetup_r+0x30>
 801a4cc:	2209      	movs	r2, #9
 801a4ce:	602a      	str	r2, [r5, #0]
 801a4d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a4d4:	81a3      	strh	r3, [r4, #12]
 801a4d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4da:	e033      	b.n	801a544 <__swsetup_r+0x98>
 801a4dc:	0758      	lsls	r0, r3, #29
 801a4de:	d512      	bpl.n	801a506 <__swsetup_r+0x5a>
 801a4e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a4e2:	b141      	cbz	r1, 801a4f6 <__swsetup_r+0x4a>
 801a4e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a4e8:	4299      	cmp	r1, r3
 801a4ea:	d002      	beq.n	801a4f2 <__swsetup_r+0x46>
 801a4ec:	4628      	mov	r0, r5
 801a4ee:	f000 f95f 	bl	801a7b0 <_free_r>
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	6363      	str	r3, [r4, #52]	@ 0x34
 801a4f6:	89a3      	ldrh	r3, [r4, #12]
 801a4f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a4fc:	81a3      	strh	r3, [r4, #12]
 801a4fe:	2300      	movs	r3, #0
 801a500:	6063      	str	r3, [r4, #4]
 801a502:	6923      	ldr	r3, [r4, #16]
 801a504:	6023      	str	r3, [r4, #0]
 801a506:	89a3      	ldrh	r3, [r4, #12]
 801a508:	f043 0308 	orr.w	r3, r3, #8
 801a50c:	81a3      	strh	r3, [r4, #12]
 801a50e:	6923      	ldr	r3, [r4, #16]
 801a510:	b94b      	cbnz	r3, 801a526 <__swsetup_r+0x7a>
 801a512:	89a3      	ldrh	r3, [r4, #12]
 801a514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a51c:	d003      	beq.n	801a526 <__swsetup_r+0x7a>
 801a51e:	4621      	mov	r1, r4
 801a520:	4628      	mov	r0, r5
 801a522:	f000 fea3 	bl	801b26c <__smakebuf_r>
 801a526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a52a:	f013 0201 	ands.w	r2, r3, #1
 801a52e:	d00a      	beq.n	801a546 <__swsetup_r+0x9a>
 801a530:	2200      	movs	r2, #0
 801a532:	60a2      	str	r2, [r4, #8]
 801a534:	6962      	ldr	r2, [r4, #20]
 801a536:	4252      	negs	r2, r2
 801a538:	61a2      	str	r2, [r4, #24]
 801a53a:	6922      	ldr	r2, [r4, #16]
 801a53c:	b942      	cbnz	r2, 801a550 <__swsetup_r+0xa4>
 801a53e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a542:	d1c5      	bne.n	801a4d0 <__swsetup_r+0x24>
 801a544:	bd38      	pop	{r3, r4, r5, pc}
 801a546:	0799      	lsls	r1, r3, #30
 801a548:	bf58      	it	pl
 801a54a:	6962      	ldrpl	r2, [r4, #20]
 801a54c:	60a2      	str	r2, [r4, #8]
 801a54e:	e7f4      	b.n	801a53a <__swsetup_r+0x8e>
 801a550:	2000      	movs	r0, #0
 801a552:	e7f7      	b.n	801a544 <__swsetup_r+0x98>
 801a554:	200009c8 	.word	0x200009c8

0801a558 <memcmp>:
 801a558:	b510      	push	{r4, lr}
 801a55a:	3901      	subs	r1, #1
 801a55c:	4402      	add	r2, r0
 801a55e:	4290      	cmp	r0, r2
 801a560:	d101      	bne.n	801a566 <memcmp+0xe>
 801a562:	2000      	movs	r0, #0
 801a564:	e005      	b.n	801a572 <memcmp+0x1a>
 801a566:	7803      	ldrb	r3, [r0, #0]
 801a568:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a56c:	42a3      	cmp	r3, r4
 801a56e:	d001      	beq.n	801a574 <memcmp+0x1c>
 801a570:	1b18      	subs	r0, r3, r4
 801a572:	bd10      	pop	{r4, pc}
 801a574:	3001      	adds	r0, #1
 801a576:	e7f2      	b.n	801a55e <memcmp+0x6>

0801a578 <memmove>:
 801a578:	4288      	cmp	r0, r1
 801a57a:	b510      	push	{r4, lr}
 801a57c:	eb01 0402 	add.w	r4, r1, r2
 801a580:	d902      	bls.n	801a588 <memmove+0x10>
 801a582:	4284      	cmp	r4, r0
 801a584:	4623      	mov	r3, r4
 801a586:	d807      	bhi.n	801a598 <memmove+0x20>
 801a588:	1e43      	subs	r3, r0, #1
 801a58a:	42a1      	cmp	r1, r4
 801a58c:	d008      	beq.n	801a5a0 <memmove+0x28>
 801a58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a592:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a596:	e7f8      	b.n	801a58a <memmove+0x12>
 801a598:	4402      	add	r2, r0
 801a59a:	4601      	mov	r1, r0
 801a59c:	428a      	cmp	r2, r1
 801a59e:	d100      	bne.n	801a5a2 <memmove+0x2a>
 801a5a0:	bd10      	pop	{r4, pc}
 801a5a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a5aa:	e7f7      	b.n	801a59c <memmove+0x24>

0801a5ac <memset>:
 801a5ac:	4402      	add	r2, r0
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	4293      	cmp	r3, r2
 801a5b2:	d100      	bne.n	801a5b6 <memset+0xa>
 801a5b4:	4770      	bx	lr
 801a5b6:	f803 1b01 	strb.w	r1, [r3], #1
 801a5ba:	e7f9      	b.n	801a5b0 <memset+0x4>

0801a5bc <strchr>:
 801a5bc:	b2c9      	uxtb	r1, r1
 801a5be:	4603      	mov	r3, r0
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5c6:	b112      	cbz	r2, 801a5ce <strchr+0x12>
 801a5c8:	428a      	cmp	r2, r1
 801a5ca:	d1f9      	bne.n	801a5c0 <strchr+0x4>
 801a5cc:	4770      	bx	lr
 801a5ce:	2900      	cmp	r1, #0
 801a5d0:	bf18      	it	ne
 801a5d2:	2000      	movne	r0, #0
 801a5d4:	4770      	bx	lr

0801a5d6 <strncmp>:
 801a5d6:	b510      	push	{r4, lr}
 801a5d8:	b16a      	cbz	r2, 801a5f6 <strncmp+0x20>
 801a5da:	3901      	subs	r1, #1
 801a5dc:	1884      	adds	r4, r0, r2
 801a5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a5e6:	429a      	cmp	r2, r3
 801a5e8:	d103      	bne.n	801a5f2 <strncmp+0x1c>
 801a5ea:	42a0      	cmp	r0, r4
 801a5ec:	d001      	beq.n	801a5f2 <strncmp+0x1c>
 801a5ee:	2a00      	cmp	r2, #0
 801a5f0:	d1f5      	bne.n	801a5de <strncmp+0x8>
 801a5f2:	1ad0      	subs	r0, r2, r3
 801a5f4:	bd10      	pop	{r4, pc}
 801a5f6:	4610      	mov	r0, r2
 801a5f8:	e7fc      	b.n	801a5f4 <strncmp+0x1e>

0801a5fa <strstr>:
 801a5fa:	780a      	ldrb	r2, [r1, #0]
 801a5fc:	b570      	push	{r4, r5, r6, lr}
 801a5fe:	b96a      	cbnz	r2, 801a61c <strstr+0x22>
 801a600:	bd70      	pop	{r4, r5, r6, pc}
 801a602:	429a      	cmp	r2, r3
 801a604:	d109      	bne.n	801a61a <strstr+0x20>
 801a606:	460c      	mov	r4, r1
 801a608:	4605      	mov	r5, r0
 801a60a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d0f6      	beq.n	801a600 <strstr+0x6>
 801a612:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a616:	429e      	cmp	r6, r3
 801a618:	d0f7      	beq.n	801a60a <strstr+0x10>
 801a61a:	3001      	adds	r0, #1
 801a61c:	7803      	ldrb	r3, [r0, #0]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d1ef      	bne.n	801a602 <strstr+0x8>
 801a622:	4618      	mov	r0, r3
 801a624:	e7ec      	b.n	801a600 <strstr+0x6>
	...

0801a628 <_close_r>:
 801a628:	b538      	push	{r3, r4, r5, lr}
 801a62a:	4d06      	ldr	r5, [pc, #24]	@ (801a644 <_close_r+0x1c>)
 801a62c:	2300      	movs	r3, #0
 801a62e:	4604      	mov	r4, r0
 801a630:	4608      	mov	r0, r1
 801a632:	602b      	str	r3, [r5, #0]
 801a634:	f7e8 fab6 	bl	8002ba4 <_close>
 801a638:	1c43      	adds	r3, r0, #1
 801a63a:	d102      	bne.n	801a642 <_close_r+0x1a>
 801a63c:	682b      	ldr	r3, [r5, #0]
 801a63e:	b103      	cbz	r3, 801a642 <_close_r+0x1a>
 801a640:	6023      	str	r3, [r4, #0]
 801a642:	bd38      	pop	{r3, r4, r5, pc}
 801a644:	2000c38c 	.word	0x2000c38c

0801a648 <_lseek_r>:
 801a648:	b538      	push	{r3, r4, r5, lr}
 801a64a:	4d07      	ldr	r5, [pc, #28]	@ (801a668 <_lseek_r+0x20>)
 801a64c:	4604      	mov	r4, r0
 801a64e:	4608      	mov	r0, r1
 801a650:	4611      	mov	r1, r2
 801a652:	2200      	movs	r2, #0
 801a654:	602a      	str	r2, [r5, #0]
 801a656:	461a      	mov	r2, r3
 801a658:	f7e8 facb 	bl	8002bf2 <_lseek>
 801a65c:	1c43      	adds	r3, r0, #1
 801a65e:	d102      	bne.n	801a666 <_lseek_r+0x1e>
 801a660:	682b      	ldr	r3, [r5, #0]
 801a662:	b103      	cbz	r3, 801a666 <_lseek_r+0x1e>
 801a664:	6023      	str	r3, [r4, #0]
 801a666:	bd38      	pop	{r3, r4, r5, pc}
 801a668:	2000c38c 	.word	0x2000c38c

0801a66c <_read_r>:
 801a66c:	b538      	push	{r3, r4, r5, lr}
 801a66e:	4d07      	ldr	r5, [pc, #28]	@ (801a68c <_read_r+0x20>)
 801a670:	4604      	mov	r4, r0
 801a672:	4608      	mov	r0, r1
 801a674:	4611      	mov	r1, r2
 801a676:	2200      	movs	r2, #0
 801a678:	602a      	str	r2, [r5, #0]
 801a67a:	461a      	mov	r2, r3
 801a67c:	f7e8 fa59 	bl	8002b32 <_read>
 801a680:	1c43      	adds	r3, r0, #1
 801a682:	d102      	bne.n	801a68a <_read_r+0x1e>
 801a684:	682b      	ldr	r3, [r5, #0]
 801a686:	b103      	cbz	r3, 801a68a <_read_r+0x1e>
 801a688:	6023      	str	r3, [r4, #0]
 801a68a:	bd38      	pop	{r3, r4, r5, pc}
 801a68c:	2000c38c 	.word	0x2000c38c

0801a690 <_sbrk_r>:
 801a690:	b538      	push	{r3, r4, r5, lr}
 801a692:	4d06      	ldr	r5, [pc, #24]	@ (801a6ac <_sbrk_r+0x1c>)
 801a694:	2300      	movs	r3, #0
 801a696:	4604      	mov	r4, r0
 801a698:	4608      	mov	r0, r1
 801a69a:	602b      	str	r3, [r5, #0]
 801a69c:	f7e8 fab6 	bl	8002c0c <_sbrk>
 801a6a0:	1c43      	adds	r3, r0, #1
 801a6a2:	d102      	bne.n	801a6aa <_sbrk_r+0x1a>
 801a6a4:	682b      	ldr	r3, [r5, #0]
 801a6a6:	b103      	cbz	r3, 801a6aa <_sbrk_r+0x1a>
 801a6a8:	6023      	str	r3, [r4, #0]
 801a6aa:	bd38      	pop	{r3, r4, r5, pc}
 801a6ac:	2000c38c 	.word	0x2000c38c

0801a6b0 <_write_r>:
 801a6b0:	b538      	push	{r3, r4, r5, lr}
 801a6b2:	4d07      	ldr	r5, [pc, #28]	@ (801a6d0 <_write_r+0x20>)
 801a6b4:	4604      	mov	r4, r0
 801a6b6:	4608      	mov	r0, r1
 801a6b8:	4611      	mov	r1, r2
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	602a      	str	r2, [r5, #0]
 801a6be:	461a      	mov	r2, r3
 801a6c0:	f7e8 fa54 	bl	8002b6c <_write>
 801a6c4:	1c43      	adds	r3, r0, #1
 801a6c6:	d102      	bne.n	801a6ce <_write_r+0x1e>
 801a6c8:	682b      	ldr	r3, [r5, #0]
 801a6ca:	b103      	cbz	r3, 801a6ce <_write_r+0x1e>
 801a6cc:	6023      	str	r3, [r4, #0]
 801a6ce:	bd38      	pop	{r3, r4, r5, pc}
 801a6d0:	2000c38c 	.word	0x2000c38c

0801a6d4 <__errno>:
 801a6d4:	4b01      	ldr	r3, [pc, #4]	@ (801a6dc <__errno+0x8>)
 801a6d6:	6818      	ldr	r0, [r3, #0]
 801a6d8:	4770      	bx	lr
 801a6da:	bf00      	nop
 801a6dc:	200009c8 	.word	0x200009c8

0801a6e0 <__libc_init_array>:
 801a6e0:	b570      	push	{r4, r5, r6, lr}
 801a6e2:	4d0d      	ldr	r5, [pc, #52]	@ (801a718 <__libc_init_array+0x38>)
 801a6e4:	4c0d      	ldr	r4, [pc, #52]	@ (801a71c <__libc_init_array+0x3c>)
 801a6e6:	1b64      	subs	r4, r4, r5
 801a6e8:	10a4      	asrs	r4, r4, #2
 801a6ea:	2600      	movs	r6, #0
 801a6ec:	42a6      	cmp	r6, r4
 801a6ee:	d109      	bne.n	801a704 <__libc_init_array+0x24>
 801a6f0:	4d0b      	ldr	r5, [pc, #44]	@ (801a720 <__libc_init_array+0x40>)
 801a6f2:	4c0c      	ldr	r4, [pc, #48]	@ (801a724 <__libc_init_array+0x44>)
 801a6f4:	f002 f854 	bl	801c7a0 <_init>
 801a6f8:	1b64      	subs	r4, r4, r5
 801a6fa:	10a4      	asrs	r4, r4, #2
 801a6fc:	2600      	movs	r6, #0
 801a6fe:	42a6      	cmp	r6, r4
 801a700:	d105      	bne.n	801a70e <__libc_init_array+0x2e>
 801a702:	bd70      	pop	{r4, r5, r6, pc}
 801a704:	f855 3b04 	ldr.w	r3, [r5], #4
 801a708:	4798      	blx	r3
 801a70a:	3601      	adds	r6, #1
 801a70c:	e7ee      	b.n	801a6ec <__libc_init_array+0xc>
 801a70e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a712:	4798      	blx	r3
 801a714:	3601      	adds	r6, #1
 801a716:	e7f2      	b.n	801a6fe <__libc_init_array+0x1e>
 801a718:	0801e240 	.word	0x0801e240
 801a71c:	0801e240 	.word	0x0801e240
 801a720:	0801e240 	.word	0x0801e240
 801a724:	0801e254 	.word	0x0801e254

0801a728 <__retarget_lock_init_recursive>:
 801a728:	4770      	bx	lr

0801a72a <__retarget_lock_acquire_recursive>:
 801a72a:	4770      	bx	lr

0801a72c <__retarget_lock_release_recursive>:
 801a72c:	4770      	bx	lr

0801a72e <strcpy>:
 801a72e:	4603      	mov	r3, r0
 801a730:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a734:	f803 2b01 	strb.w	r2, [r3], #1
 801a738:	2a00      	cmp	r2, #0
 801a73a:	d1f9      	bne.n	801a730 <strcpy+0x2>
 801a73c:	4770      	bx	lr

0801a73e <memcpy>:
 801a73e:	440a      	add	r2, r1
 801a740:	4291      	cmp	r1, r2
 801a742:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801a746:	d100      	bne.n	801a74a <memcpy+0xc>
 801a748:	4770      	bx	lr
 801a74a:	b510      	push	{r4, lr}
 801a74c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a750:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a754:	4291      	cmp	r1, r2
 801a756:	d1f9      	bne.n	801a74c <memcpy+0xe>
 801a758:	bd10      	pop	{r4, pc}
	...

0801a75c <__assert_func>:
 801a75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a75e:	4614      	mov	r4, r2
 801a760:	461a      	mov	r2, r3
 801a762:	4b09      	ldr	r3, [pc, #36]	@ (801a788 <__assert_func+0x2c>)
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	4605      	mov	r5, r0
 801a768:	68d8      	ldr	r0, [r3, #12]
 801a76a:	b954      	cbnz	r4, 801a782 <__assert_func+0x26>
 801a76c:	4b07      	ldr	r3, [pc, #28]	@ (801a78c <__assert_func+0x30>)
 801a76e:	461c      	mov	r4, r3
 801a770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a774:	9100      	str	r1, [sp, #0]
 801a776:	462b      	mov	r3, r5
 801a778:	4905      	ldr	r1, [pc, #20]	@ (801a790 <__assert_func+0x34>)
 801a77a:	f000 fd3f 	bl	801b1fc <fiprintf>
 801a77e:	f000 fdd3 	bl	801b328 <abort>
 801a782:	4b04      	ldr	r3, [pc, #16]	@ (801a794 <__assert_func+0x38>)
 801a784:	e7f4      	b.n	801a770 <__assert_func+0x14>
 801a786:	bf00      	nop
 801a788:	200009c8 	.word	0x200009c8
 801a78c:	0801e15d 	.word	0x0801e15d
 801a790:	0801e12f 	.word	0x0801e12f
 801a794:	0801e122 	.word	0x0801e122

0801a798 <__env_lock>:
 801a798:	4801      	ldr	r0, [pc, #4]	@ (801a7a0 <__env_lock+0x8>)
 801a79a:	f7ff bfc6 	b.w	801a72a <__retarget_lock_acquire_recursive>
 801a79e:	bf00      	nop
 801a7a0:	2000c390 	.word	0x2000c390

0801a7a4 <__env_unlock>:
 801a7a4:	4801      	ldr	r0, [pc, #4]	@ (801a7ac <__env_unlock+0x8>)
 801a7a6:	f7ff bfc1 	b.w	801a72c <__retarget_lock_release_recursive>
 801a7aa:	bf00      	nop
 801a7ac:	2000c390 	.word	0x2000c390

0801a7b0 <_free_r>:
 801a7b0:	b538      	push	{r3, r4, r5, lr}
 801a7b2:	4605      	mov	r5, r0
 801a7b4:	2900      	cmp	r1, #0
 801a7b6:	d041      	beq.n	801a83c <_free_r+0x8c>
 801a7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7bc:	1f0c      	subs	r4, r1, #4
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	bfb8      	it	lt
 801a7c2:	18e4      	addlt	r4, r4, r3
 801a7c4:	f7ff fb30 	bl	8019e28 <__malloc_lock>
 801a7c8:	4a1d      	ldr	r2, [pc, #116]	@ (801a840 <_free_r+0x90>)
 801a7ca:	6813      	ldr	r3, [r2, #0]
 801a7cc:	b933      	cbnz	r3, 801a7dc <_free_r+0x2c>
 801a7ce:	6063      	str	r3, [r4, #4]
 801a7d0:	6014      	str	r4, [r2, #0]
 801a7d2:	4628      	mov	r0, r5
 801a7d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a7d8:	f7ff bb2c 	b.w	8019e34 <__malloc_unlock>
 801a7dc:	42a3      	cmp	r3, r4
 801a7de:	d908      	bls.n	801a7f2 <_free_r+0x42>
 801a7e0:	6820      	ldr	r0, [r4, #0]
 801a7e2:	1821      	adds	r1, r4, r0
 801a7e4:	428b      	cmp	r3, r1
 801a7e6:	bf01      	itttt	eq
 801a7e8:	6819      	ldreq	r1, [r3, #0]
 801a7ea:	685b      	ldreq	r3, [r3, #4]
 801a7ec:	1809      	addeq	r1, r1, r0
 801a7ee:	6021      	streq	r1, [r4, #0]
 801a7f0:	e7ed      	b.n	801a7ce <_free_r+0x1e>
 801a7f2:	461a      	mov	r2, r3
 801a7f4:	685b      	ldr	r3, [r3, #4]
 801a7f6:	b10b      	cbz	r3, 801a7fc <_free_r+0x4c>
 801a7f8:	42a3      	cmp	r3, r4
 801a7fa:	d9fa      	bls.n	801a7f2 <_free_r+0x42>
 801a7fc:	6811      	ldr	r1, [r2, #0]
 801a7fe:	1850      	adds	r0, r2, r1
 801a800:	42a0      	cmp	r0, r4
 801a802:	d10b      	bne.n	801a81c <_free_r+0x6c>
 801a804:	6820      	ldr	r0, [r4, #0]
 801a806:	4401      	add	r1, r0
 801a808:	1850      	adds	r0, r2, r1
 801a80a:	4283      	cmp	r3, r0
 801a80c:	6011      	str	r1, [r2, #0]
 801a80e:	d1e0      	bne.n	801a7d2 <_free_r+0x22>
 801a810:	6818      	ldr	r0, [r3, #0]
 801a812:	685b      	ldr	r3, [r3, #4]
 801a814:	6053      	str	r3, [r2, #4]
 801a816:	4408      	add	r0, r1
 801a818:	6010      	str	r0, [r2, #0]
 801a81a:	e7da      	b.n	801a7d2 <_free_r+0x22>
 801a81c:	d902      	bls.n	801a824 <_free_r+0x74>
 801a81e:	230c      	movs	r3, #12
 801a820:	602b      	str	r3, [r5, #0]
 801a822:	e7d6      	b.n	801a7d2 <_free_r+0x22>
 801a824:	6820      	ldr	r0, [r4, #0]
 801a826:	1821      	adds	r1, r4, r0
 801a828:	428b      	cmp	r3, r1
 801a82a:	bf04      	itt	eq
 801a82c:	6819      	ldreq	r1, [r3, #0]
 801a82e:	685b      	ldreq	r3, [r3, #4]
 801a830:	6063      	str	r3, [r4, #4]
 801a832:	bf04      	itt	eq
 801a834:	1809      	addeq	r1, r1, r0
 801a836:	6021      	streq	r1, [r4, #0]
 801a838:	6054      	str	r4, [r2, #4]
 801a83a:	e7ca      	b.n	801a7d2 <_free_r+0x22>
 801a83c:	bd38      	pop	{r3, r4, r5, pc}
 801a83e:	bf00      	nop
 801a840:	2000c24c 	.word	0x2000c24c

0801a844 <_malloc_usable_size_r>:
 801a844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a848:	1f18      	subs	r0, r3, #4
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	bfbc      	itt	lt
 801a84e:	580b      	ldrlt	r3, [r1, r0]
 801a850:	18c0      	addlt	r0, r0, r3
 801a852:	4770      	bx	lr

0801a854 <__ssputs_r>:
 801a854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a858:	688e      	ldr	r6, [r1, #8]
 801a85a:	461f      	mov	r7, r3
 801a85c:	42be      	cmp	r6, r7
 801a85e:	680b      	ldr	r3, [r1, #0]
 801a860:	4682      	mov	sl, r0
 801a862:	460c      	mov	r4, r1
 801a864:	4690      	mov	r8, r2
 801a866:	d82d      	bhi.n	801a8c4 <__ssputs_r+0x70>
 801a868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a86c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a870:	d026      	beq.n	801a8c0 <__ssputs_r+0x6c>
 801a872:	6965      	ldr	r5, [r4, #20]
 801a874:	6909      	ldr	r1, [r1, #16]
 801a876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a87a:	eba3 0901 	sub.w	r9, r3, r1
 801a87e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a882:	1c7b      	adds	r3, r7, #1
 801a884:	444b      	add	r3, r9
 801a886:	106d      	asrs	r5, r5, #1
 801a888:	429d      	cmp	r5, r3
 801a88a:	bf38      	it	cc
 801a88c:	461d      	movcc	r5, r3
 801a88e:	0553      	lsls	r3, r2, #21
 801a890:	d527      	bpl.n	801a8e2 <__ssputs_r+0x8e>
 801a892:	4629      	mov	r1, r5
 801a894:	f7ff fa48 	bl	8019d28 <_malloc_r>
 801a898:	4606      	mov	r6, r0
 801a89a:	b360      	cbz	r0, 801a8f6 <__ssputs_r+0xa2>
 801a89c:	6921      	ldr	r1, [r4, #16]
 801a89e:	464a      	mov	r2, r9
 801a8a0:	f7ff ff4d 	bl	801a73e <memcpy>
 801a8a4:	89a3      	ldrh	r3, [r4, #12]
 801a8a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a8aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a8ae:	81a3      	strh	r3, [r4, #12]
 801a8b0:	6126      	str	r6, [r4, #16]
 801a8b2:	6165      	str	r5, [r4, #20]
 801a8b4:	444e      	add	r6, r9
 801a8b6:	eba5 0509 	sub.w	r5, r5, r9
 801a8ba:	6026      	str	r6, [r4, #0]
 801a8bc:	60a5      	str	r5, [r4, #8]
 801a8be:	463e      	mov	r6, r7
 801a8c0:	42be      	cmp	r6, r7
 801a8c2:	d900      	bls.n	801a8c6 <__ssputs_r+0x72>
 801a8c4:	463e      	mov	r6, r7
 801a8c6:	6820      	ldr	r0, [r4, #0]
 801a8c8:	4632      	mov	r2, r6
 801a8ca:	4641      	mov	r1, r8
 801a8cc:	f7ff fe54 	bl	801a578 <memmove>
 801a8d0:	68a3      	ldr	r3, [r4, #8]
 801a8d2:	1b9b      	subs	r3, r3, r6
 801a8d4:	60a3      	str	r3, [r4, #8]
 801a8d6:	6823      	ldr	r3, [r4, #0]
 801a8d8:	4433      	add	r3, r6
 801a8da:	6023      	str	r3, [r4, #0]
 801a8dc:	2000      	movs	r0, #0
 801a8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8e2:	462a      	mov	r2, r5
 801a8e4:	f7ff fb20 	bl	8019f28 <_realloc_r>
 801a8e8:	4606      	mov	r6, r0
 801a8ea:	2800      	cmp	r0, #0
 801a8ec:	d1e0      	bne.n	801a8b0 <__ssputs_r+0x5c>
 801a8ee:	6921      	ldr	r1, [r4, #16]
 801a8f0:	4650      	mov	r0, sl
 801a8f2:	f7ff ff5d 	bl	801a7b0 <_free_r>
 801a8f6:	230c      	movs	r3, #12
 801a8f8:	f8ca 3000 	str.w	r3, [sl]
 801a8fc:	89a3      	ldrh	r3, [r4, #12]
 801a8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a902:	81a3      	strh	r3, [r4, #12]
 801a904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a908:	e7e9      	b.n	801a8de <__ssputs_r+0x8a>
	...

0801a90c <_svfiprintf_r>:
 801a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a910:	4698      	mov	r8, r3
 801a912:	898b      	ldrh	r3, [r1, #12]
 801a914:	061b      	lsls	r3, r3, #24
 801a916:	b09d      	sub	sp, #116	@ 0x74
 801a918:	4607      	mov	r7, r0
 801a91a:	460d      	mov	r5, r1
 801a91c:	4614      	mov	r4, r2
 801a91e:	d510      	bpl.n	801a942 <_svfiprintf_r+0x36>
 801a920:	690b      	ldr	r3, [r1, #16]
 801a922:	b973      	cbnz	r3, 801a942 <_svfiprintf_r+0x36>
 801a924:	2140      	movs	r1, #64	@ 0x40
 801a926:	f7ff f9ff 	bl	8019d28 <_malloc_r>
 801a92a:	6028      	str	r0, [r5, #0]
 801a92c:	6128      	str	r0, [r5, #16]
 801a92e:	b930      	cbnz	r0, 801a93e <_svfiprintf_r+0x32>
 801a930:	230c      	movs	r3, #12
 801a932:	603b      	str	r3, [r7, #0]
 801a934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a938:	b01d      	add	sp, #116	@ 0x74
 801a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a93e:	2340      	movs	r3, #64	@ 0x40
 801a940:	616b      	str	r3, [r5, #20]
 801a942:	2300      	movs	r3, #0
 801a944:	9309      	str	r3, [sp, #36]	@ 0x24
 801a946:	2320      	movs	r3, #32
 801a948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a94c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a950:	2330      	movs	r3, #48	@ 0x30
 801a952:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801aaf0 <_svfiprintf_r+0x1e4>
 801a956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a95a:	f04f 0901 	mov.w	r9, #1
 801a95e:	4623      	mov	r3, r4
 801a960:	469a      	mov	sl, r3
 801a962:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a966:	b10a      	cbz	r2, 801a96c <_svfiprintf_r+0x60>
 801a968:	2a25      	cmp	r2, #37	@ 0x25
 801a96a:	d1f9      	bne.n	801a960 <_svfiprintf_r+0x54>
 801a96c:	ebba 0b04 	subs.w	fp, sl, r4
 801a970:	d00b      	beq.n	801a98a <_svfiprintf_r+0x7e>
 801a972:	465b      	mov	r3, fp
 801a974:	4622      	mov	r2, r4
 801a976:	4629      	mov	r1, r5
 801a978:	4638      	mov	r0, r7
 801a97a:	f7ff ff6b 	bl	801a854 <__ssputs_r>
 801a97e:	3001      	adds	r0, #1
 801a980:	f000 80a7 	beq.w	801aad2 <_svfiprintf_r+0x1c6>
 801a984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a986:	445a      	add	r2, fp
 801a988:	9209      	str	r2, [sp, #36]	@ 0x24
 801a98a:	f89a 3000 	ldrb.w	r3, [sl]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	f000 809f 	beq.w	801aad2 <_svfiprintf_r+0x1c6>
 801a994:	2300      	movs	r3, #0
 801a996:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a99e:	f10a 0a01 	add.w	sl, sl, #1
 801a9a2:	9304      	str	r3, [sp, #16]
 801a9a4:	9307      	str	r3, [sp, #28]
 801a9a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a9aa:	931a      	str	r3, [sp, #104]	@ 0x68
 801a9ac:	4654      	mov	r4, sl
 801a9ae:	2205      	movs	r2, #5
 801a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9b4:	484e      	ldr	r0, [pc, #312]	@ (801aaf0 <_svfiprintf_r+0x1e4>)
 801a9b6:	f7e5 fc4b 	bl	8000250 <memchr>
 801a9ba:	9a04      	ldr	r2, [sp, #16]
 801a9bc:	b9d8      	cbnz	r0, 801a9f6 <_svfiprintf_r+0xea>
 801a9be:	06d0      	lsls	r0, r2, #27
 801a9c0:	bf44      	itt	mi
 801a9c2:	2320      	movmi	r3, #32
 801a9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9c8:	0711      	lsls	r1, r2, #28
 801a9ca:	bf44      	itt	mi
 801a9cc:	232b      	movmi	r3, #43	@ 0x2b
 801a9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9d2:	f89a 3000 	ldrb.w	r3, [sl]
 801a9d6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a9d8:	d015      	beq.n	801aa06 <_svfiprintf_r+0xfa>
 801a9da:	9a07      	ldr	r2, [sp, #28]
 801a9dc:	4654      	mov	r4, sl
 801a9de:	2000      	movs	r0, #0
 801a9e0:	f04f 0c0a 	mov.w	ip, #10
 801a9e4:	4621      	mov	r1, r4
 801a9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9ea:	3b30      	subs	r3, #48	@ 0x30
 801a9ec:	2b09      	cmp	r3, #9
 801a9ee:	d94b      	bls.n	801aa88 <_svfiprintf_r+0x17c>
 801a9f0:	b1b0      	cbz	r0, 801aa20 <_svfiprintf_r+0x114>
 801a9f2:	9207      	str	r2, [sp, #28]
 801a9f4:	e014      	b.n	801aa20 <_svfiprintf_r+0x114>
 801a9f6:	eba0 0308 	sub.w	r3, r0, r8
 801a9fa:	fa09 f303 	lsl.w	r3, r9, r3
 801a9fe:	4313      	orrs	r3, r2
 801aa00:	9304      	str	r3, [sp, #16]
 801aa02:	46a2      	mov	sl, r4
 801aa04:	e7d2      	b.n	801a9ac <_svfiprintf_r+0xa0>
 801aa06:	9b03      	ldr	r3, [sp, #12]
 801aa08:	1d19      	adds	r1, r3, #4
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	9103      	str	r1, [sp, #12]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	bfbb      	ittet	lt
 801aa12:	425b      	neglt	r3, r3
 801aa14:	f042 0202 	orrlt.w	r2, r2, #2
 801aa18:	9307      	strge	r3, [sp, #28]
 801aa1a:	9307      	strlt	r3, [sp, #28]
 801aa1c:	bfb8      	it	lt
 801aa1e:	9204      	strlt	r2, [sp, #16]
 801aa20:	7823      	ldrb	r3, [r4, #0]
 801aa22:	2b2e      	cmp	r3, #46	@ 0x2e
 801aa24:	d10a      	bne.n	801aa3c <_svfiprintf_r+0x130>
 801aa26:	7863      	ldrb	r3, [r4, #1]
 801aa28:	2b2a      	cmp	r3, #42	@ 0x2a
 801aa2a:	d132      	bne.n	801aa92 <_svfiprintf_r+0x186>
 801aa2c:	9b03      	ldr	r3, [sp, #12]
 801aa2e:	1d1a      	adds	r2, r3, #4
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	9203      	str	r2, [sp, #12]
 801aa34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aa38:	3402      	adds	r4, #2
 801aa3a:	9305      	str	r3, [sp, #20]
 801aa3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ab00 <_svfiprintf_r+0x1f4>
 801aa40:	7821      	ldrb	r1, [r4, #0]
 801aa42:	2203      	movs	r2, #3
 801aa44:	4650      	mov	r0, sl
 801aa46:	f7e5 fc03 	bl	8000250 <memchr>
 801aa4a:	b138      	cbz	r0, 801aa5c <_svfiprintf_r+0x150>
 801aa4c:	9b04      	ldr	r3, [sp, #16]
 801aa4e:	eba0 000a 	sub.w	r0, r0, sl
 801aa52:	2240      	movs	r2, #64	@ 0x40
 801aa54:	4082      	lsls	r2, r0
 801aa56:	4313      	orrs	r3, r2
 801aa58:	3401      	adds	r4, #1
 801aa5a:	9304      	str	r3, [sp, #16]
 801aa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa60:	4824      	ldr	r0, [pc, #144]	@ (801aaf4 <_svfiprintf_r+0x1e8>)
 801aa62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aa66:	2206      	movs	r2, #6
 801aa68:	f7e5 fbf2 	bl	8000250 <memchr>
 801aa6c:	2800      	cmp	r0, #0
 801aa6e:	d036      	beq.n	801aade <_svfiprintf_r+0x1d2>
 801aa70:	4b21      	ldr	r3, [pc, #132]	@ (801aaf8 <_svfiprintf_r+0x1ec>)
 801aa72:	bb1b      	cbnz	r3, 801aabc <_svfiprintf_r+0x1b0>
 801aa74:	9b03      	ldr	r3, [sp, #12]
 801aa76:	3307      	adds	r3, #7
 801aa78:	f023 0307 	bic.w	r3, r3, #7
 801aa7c:	3308      	adds	r3, #8
 801aa7e:	9303      	str	r3, [sp, #12]
 801aa80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa82:	4433      	add	r3, r6
 801aa84:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa86:	e76a      	b.n	801a95e <_svfiprintf_r+0x52>
 801aa88:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa8c:	460c      	mov	r4, r1
 801aa8e:	2001      	movs	r0, #1
 801aa90:	e7a8      	b.n	801a9e4 <_svfiprintf_r+0xd8>
 801aa92:	2300      	movs	r3, #0
 801aa94:	3401      	adds	r4, #1
 801aa96:	9305      	str	r3, [sp, #20]
 801aa98:	4619      	mov	r1, r3
 801aa9a:	f04f 0c0a 	mov.w	ip, #10
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aaa4:	3a30      	subs	r2, #48	@ 0x30
 801aaa6:	2a09      	cmp	r2, #9
 801aaa8:	d903      	bls.n	801aab2 <_svfiprintf_r+0x1a6>
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d0c6      	beq.n	801aa3c <_svfiprintf_r+0x130>
 801aaae:	9105      	str	r1, [sp, #20]
 801aab0:	e7c4      	b.n	801aa3c <_svfiprintf_r+0x130>
 801aab2:	fb0c 2101 	mla	r1, ip, r1, r2
 801aab6:	4604      	mov	r4, r0
 801aab8:	2301      	movs	r3, #1
 801aaba:	e7f0      	b.n	801aa9e <_svfiprintf_r+0x192>
 801aabc:	ab03      	add	r3, sp, #12
 801aabe:	9300      	str	r3, [sp, #0]
 801aac0:	462a      	mov	r2, r5
 801aac2:	4b0e      	ldr	r3, [pc, #56]	@ (801aafc <_svfiprintf_r+0x1f0>)
 801aac4:	a904      	add	r1, sp, #16
 801aac6:	4638      	mov	r0, r7
 801aac8:	f3af 8000 	nop.w
 801aacc:	1c42      	adds	r2, r0, #1
 801aace:	4606      	mov	r6, r0
 801aad0:	d1d6      	bne.n	801aa80 <_svfiprintf_r+0x174>
 801aad2:	89ab      	ldrh	r3, [r5, #12]
 801aad4:	065b      	lsls	r3, r3, #25
 801aad6:	f53f af2d 	bmi.w	801a934 <_svfiprintf_r+0x28>
 801aada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aadc:	e72c      	b.n	801a938 <_svfiprintf_r+0x2c>
 801aade:	ab03      	add	r3, sp, #12
 801aae0:	9300      	str	r3, [sp, #0]
 801aae2:	462a      	mov	r2, r5
 801aae4:	4b05      	ldr	r3, [pc, #20]	@ (801aafc <_svfiprintf_r+0x1f0>)
 801aae6:	a904      	add	r1, sp, #16
 801aae8:	4638      	mov	r0, r7
 801aaea:	f000 f9bb 	bl	801ae64 <_printf_i>
 801aaee:	e7ed      	b.n	801aacc <_svfiprintf_r+0x1c0>
 801aaf0:	0801e15e 	.word	0x0801e15e
 801aaf4:	0801e168 	.word	0x0801e168
 801aaf8:	00000000 	.word	0x00000000
 801aafc:	0801a855 	.word	0x0801a855
 801ab00:	0801e164 	.word	0x0801e164

0801ab04 <__sfputc_r>:
 801ab04:	6893      	ldr	r3, [r2, #8]
 801ab06:	3b01      	subs	r3, #1
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	b410      	push	{r4}
 801ab0c:	6093      	str	r3, [r2, #8]
 801ab0e:	da08      	bge.n	801ab22 <__sfputc_r+0x1e>
 801ab10:	6994      	ldr	r4, [r2, #24]
 801ab12:	42a3      	cmp	r3, r4
 801ab14:	db01      	blt.n	801ab1a <__sfputc_r+0x16>
 801ab16:	290a      	cmp	r1, #10
 801ab18:	d103      	bne.n	801ab22 <__sfputc_r+0x1e>
 801ab1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab1e:	f7ff bc87 	b.w	801a430 <__swbuf_r>
 801ab22:	6813      	ldr	r3, [r2, #0]
 801ab24:	1c58      	adds	r0, r3, #1
 801ab26:	6010      	str	r0, [r2, #0]
 801ab28:	7019      	strb	r1, [r3, #0]
 801ab2a:	4608      	mov	r0, r1
 801ab2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab30:	4770      	bx	lr

0801ab32 <__sfputs_r>:
 801ab32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab34:	4606      	mov	r6, r0
 801ab36:	460f      	mov	r7, r1
 801ab38:	4614      	mov	r4, r2
 801ab3a:	18d5      	adds	r5, r2, r3
 801ab3c:	42ac      	cmp	r4, r5
 801ab3e:	d101      	bne.n	801ab44 <__sfputs_r+0x12>
 801ab40:	2000      	movs	r0, #0
 801ab42:	e007      	b.n	801ab54 <__sfputs_r+0x22>
 801ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab48:	463a      	mov	r2, r7
 801ab4a:	4630      	mov	r0, r6
 801ab4c:	f7ff ffda 	bl	801ab04 <__sfputc_r>
 801ab50:	1c43      	adds	r3, r0, #1
 801ab52:	d1f3      	bne.n	801ab3c <__sfputs_r+0xa>
 801ab54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab58 <_vfiprintf_r>:
 801ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab5c:	460d      	mov	r5, r1
 801ab5e:	b09d      	sub	sp, #116	@ 0x74
 801ab60:	4614      	mov	r4, r2
 801ab62:	4698      	mov	r8, r3
 801ab64:	4606      	mov	r6, r0
 801ab66:	b118      	cbz	r0, 801ab70 <_vfiprintf_r+0x18>
 801ab68:	6a03      	ldr	r3, [r0, #32]
 801ab6a:	b90b      	cbnz	r3, 801ab70 <_vfiprintf_r+0x18>
 801ab6c:	f7ff fb0e 	bl	801a18c <__sinit>
 801ab70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab72:	07d9      	lsls	r1, r3, #31
 801ab74:	d405      	bmi.n	801ab82 <_vfiprintf_r+0x2a>
 801ab76:	89ab      	ldrh	r3, [r5, #12]
 801ab78:	059a      	lsls	r2, r3, #22
 801ab7a:	d402      	bmi.n	801ab82 <_vfiprintf_r+0x2a>
 801ab7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab7e:	f7ff fdd4 	bl	801a72a <__retarget_lock_acquire_recursive>
 801ab82:	89ab      	ldrh	r3, [r5, #12]
 801ab84:	071b      	lsls	r3, r3, #28
 801ab86:	d501      	bpl.n	801ab8c <_vfiprintf_r+0x34>
 801ab88:	692b      	ldr	r3, [r5, #16]
 801ab8a:	b99b      	cbnz	r3, 801abb4 <_vfiprintf_r+0x5c>
 801ab8c:	4629      	mov	r1, r5
 801ab8e:	4630      	mov	r0, r6
 801ab90:	f7ff fc8c 	bl	801a4ac <__swsetup_r>
 801ab94:	b170      	cbz	r0, 801abb4 <_vfiprintf_r+0x5c>
 801ab96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab98:	07dc      	lsls	r4, r3, #31
 801ab9a:	d504      	bpl.n	801aba6 <_vfiprintf_r+0x4e>
 801ab9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aba0:	b01d      	add	sp, #116	@ 0x74
 801aba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aba6:	89ab      	ldrh	r3, [r5, #12]
 801aba8:	0598      	lsls	r0, r3, #22
 801abaa:	d4f7      	bmi.n	801ab9c <_vfiprintf_r+0x44>
 801abac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801abae:	f7ff fdbd 	bl	801a72c <__retarget_lock_release_recursive>
 801abb2:	e7f3      	b.n	801ab9c <_vfiprintf_r+0x44>
 801abb4:	2300      	movs	r3, #0
 801abb6:	9309      	str	r3, [sp, #36]	@ 0x24
 801abb8:	2320      	movs	r3, #32
 801abba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801abbe:	f8cd 800c 	str.w	r8, [sp, #12]
 801abc2:	2330      	movs	r3, #48	@ 0x30
 801abc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ad74 <_vfiprintf_r+0x21c>
 801abc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801abcc:	f04f 0901 	mov.w	r9, #1
 801abd0:	4623      	mov	r3, r4
 801abd2:	469a      	mov	sl, r3
 801abd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abd8:	b10a      	cbz	r2, 801abde <_vfiprintf_r+0x86>
 801abda:	2a25      	cmp	r2, #37	@ 0x25
 801abdc:	d1f9      	bne.n	801abd2 <_vfiprintf_r+0x7a>
 801abde:	ebba 0b04 	subs.w	fp, sl, r4
 801abe2:	d00b      	beq.n	801abfc <_vfiprintf_r+0xa4>
 801abe4:	465b      	mov	r3, fp
 801abe6:	4622      	mov	r2, r4
 801abe8:	4629      	mov	r1, r5
 801abea:	4630      	mov	r0, r6
 801abec:	f7ff ffa1 	bl	801ab32 <__sfputs_r>
 801abf0:	3001      	adds	r0, #1
 801abf2:	f000 80a7 	beq.w	801ad44 <_vfiprintf_r+0x1ec>
 801abf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abf8:	445a      	add	r2, fp
 801abfa:	9209      	str	r2, [sp, #36]	@ 0x24
 801abfc:	f89a 3000 	ldrb.w	r3, [sl]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	f000 809f 	beq.w	801ad44 <_vfiprintf_r+0x1ec>
 801ac06:	2300      	movs	r3, #0
 801ac08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ac0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac10:	f10a 0a01 	add.w	sl, sl, #1
 801ac14:	9304      	str	r3, [sp, #16]
 801ac16:	9307      	str	r3, [sp, #28]
 801ac18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac1c:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac1e:	4654      	mov	r4, sl
 801ac20:	2205      	movs	r2, #5
 801ac22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac26:	4853      	ldr	r0, [pc, #332]	@ (801ad74 <_vfiprintf_r+0x21c>)
 801ac28:	f7e5 fb12 	bl	8000250 <memchr>
 801ac2c:	9a04      	ldr	r2, [sp, #16]
 801ac2e:	b9d8      	cbnz	r0, 801ac68 <_vfiprintf_r+0x110>
 801ac30:	06d1      	lsls	r1, r2, #27
 801ac32:	bf44      	itt	mi
 801ac34:	2320      	movmi	r3, #32
 801ac36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac3a:	0713      	lsls	r3, r2, #28
 801ac3c:	bf44      	itt	mi
 801ac3e:	232b      	movmi	r3, #43	@ 0x2b
 801ac40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac44:	f89a 3000 	ldrb.w	r3, [sl]
 801ac48:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac4a:	d015      	beq.n	801ac78 <_vfiprintf_r+0x120>
 801ac4c:	9a07      	ldr	r2, [sp, #28]
 801ac4e:	4654      	mov	r4, sl
 801ac50:	2000      	movs	r0, #0
 801ac52:	f04f 0c0a 	mov.w	ip, #10
 801ac56:	4621      	mov	r1, r4
 801ac58:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac5c:	3b30      	subs	r3, #48	@ 0x30
 801ac5e:	2b09      	cmp	r3, #9
 801ac60:	d94b      	bls.n	801acfa <_vfiprintf_r+0x1a2>
 801ac62:	b1b0      	cbz	r0, 801ac92 <_vfiprintf_r+0x13a>
 801ac64:	9207      	str	r2, [sp, #28]
 801ac66:	e014      	b.n	801ac92 <_vfiprintf_r+0x13a>
 801ac68:	eba0 0308 	sub.w	r3, r0, r8
 801ac6c:	fa09 f303 	lsl.w	r3, r9, r3
 801ac70:	4313      	orrs	r3, r2
 801ac72:	9304      	str	r3, [sp, #16]
 801ac74:	46a2      	mov	sl, r4
 801ac76:	e7d2      	b.n	801ac1e <_vfiprintf_r+0xc6>
 801ac78:	9b03      	ldr	r3, [sp, #12]
 801ac7a:	1d19      	adds	r1, r3, #4
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	9103      	str	r1, [sp, #12]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	bfbb      	ittet	lt
 801ac84:	425b      	neglt	r3, r3
 801ac86:	f042 0202 	orrlt.w	r2, r2, #2
 801ac8a:	9307      	strge	r3, [sp, #28]
 801ac8c:	9307      	strlt	r3, [sp, #28]
 801ac8e:	bfb8      	it	lt
 801ac90:	9204      	strlt	r2, [sp, #16]
 801ac92:	7823      	ldrb	r3, [r4, #0]
 801ac94:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac96:	d10a      	bne.n	801acae <_vfiprintf_r+0x156>
 801ac98:	7863      	ldrb	r3, [r4, #1]
 801ac9a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac9c:	d132      	bne.n	801ad04 <_vfiprintf_r+0x1ac>
 801ac9e:	9b03      	ldr	r3, [sp, #12]
 801aca0:	1d1a      	adds	r2, r3, #4
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	9203      	str	r2, [sp, #12]
 801aca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801acaa:	3402      	adds	r4, #2
 801acac:	9305      	str	r3, [sp, #20]
 801acae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ad84 <_vfiprintf_r+0x22c>
 801acb2:	7821      	ldrb	r1, [r4, #0]
 801acb4:	2203      	movs	r2, #3
 801acb6:	4650      	mov	r0, sl
 801acb8:	f7e5 faca 	bl	8000250 <memchr>
 801acbc:	b138      	cbz	r0, 801acce <_vfiprintf_r+0x176>
 801acbe:	9b04      	ldr	r3, [sp, #16]
 801acc0:	eba0 000a 	sub.w	r0, r0, sl
 801acc4:	2240      	movs	r2, #64	@ 0x40
 801acc6:	4082      	lsls	r2, r0
 801acc8:	4313      	orrs	r3, r2
 801acca:	3401      	adds	r4, #1
 801accc:	9304      	str	r3, [sp, #16]
 801acce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acd2:	4829      	ldr	r0, [pc, #164]	@ (801ad78 <_vfiprintf_r+0x220>)
 801acd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801acd8:	2206      	movs	r2, #6
 801acda:	f7e5 fab9 	bl	8000250 <memchr>
 801acde:	2800      	cmp	r0, #0
 801ace0:	d03f      	beq.n	801ad62 <_vfiprintf_r+0x20a>
 801ace2:	4b26      	ldr	r3, [pc, #152]	@ (801ad7c <_vfiprintf_r+0x224>)
 801ace4:	bb1b      	cbnz	r3, 801ad2e <_vfiprintf_r+0x1d6>
 801ace6:	9b03      	ldr	r3, [sp, #12]
 801ace8:	3307      	adds	r3, #7
 801acea:	f023 0307 	bic.w	r3, r3, #7
 801acee:	3308      	adds	r3, #8
 801acf0:	9303      	str	r3, [sp, #12]
 801acf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acf4:	443b      	add	r3, r7
 801acf6:	9309      	str	r3, [sp, #36]	@ 0x24
 801acf8:	e76a      	b.n	801abd0 <_vfiprintf_r+0x78>
 801acfa:	fb0c 3202 	mla	r2, ip, r2, r3
 801acfe:	460c      	mov	r4, r1
 801ad00:	2001      	movs	r0, #1
 801ad02:	e7a8      	b.n	801ac56 <_vfiprintf_r+0xfe>
 801ad04:	2300      	movs	r3, #0
 801ad06:	3401      	adds	r4, #1
 801ad08:	9305      	str	r3, [sp, #20]
 801ad0a:	4619      	mov	r1, r3
 801ad0c:	f04f 0c0a 	mov.w	ip, #10
 801ad10:	4620      	mov	r0, r4
 801ad12:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad16:	3a30      	subs	r2, #48	@ 0x30
 801ad18:	2a09      	cmp	r2, #9
 801ad1a:	d903      	bls.n	801ad24 <_vfiprintf_r+0x1cc>
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d0c6      	beq.n	801acae <_vfiprintf_r+0x156>
 801ad20:	9105      	str	r1, [sp, #20]
 801ad22:	e7c4      	b.n	801acae <_vfiprintf_r+0x156>
 801ad24:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad28:	4604      	mov	r4, r0
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	e7f0      	b.n	801ad10 <_vfiprintf_r+0x1b8>
 801ad2e:	ab03      	add	r3, sp, #12
 801ad30:	9300      	str	r3, [sp, #0]
 801ad32:	462a      	mov	r2, r5
 801ad34:	4b12      	ldr	r3, [pc, #72]	@ (801ad80 <_vfiprintf_r+0x228>)
 801ad36:	a904      	add	r1, sp, #16
 801ad38:	4630      	mov	r0, r6
 801ad3a:	f3af 8000 	nop.w
 801ad3e:	4607      	mov	r7, r0
 801ad40:	1c78      	adds	r0, r7, #1
 801ad42:	d1d6      	bne.n	801acf2 <_vfiprintf_r+0x19a>
 801ad44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad46:	07d9      	lsls	r1, r3, #31
 801ad48:	d405      	bmi.n	801ad56 <_vfiprintf_r+0x1fe>
 801ad4a:	89ab      	ldrh	r3, [r5, #12]
 801ad4c:	059a      	lsls	r2, r3, #22
 801ad4e:	d402      	bmi.n	801ad56 <_vfiprintf_r+0x1fe>
 801ad50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ad52:	f7ff fceb 	bl	801a72c <__retarget_lock_release_recursive>
 801ad56:	89ab      	ldrh	r3, [r5, #12]
 801ad58:	065b      	lsls	r3, r3, #25
 801ad5a:	f53f af1f 	bmi.w	801ab9c <_vfiprintf_r+0x44>
 801ad5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad60:	e71e      	b.n	801aba0 <_vfiprintf_r+0x48>
 801ad62:	ab03      	add	r3, sp, #12
 801ad64:	9300      	str	r3, [sp, #0]
 801ad66:	462a      	mov	r2, r5
 801ad68:	4b05      	ldr	r3, [pc, #20]	@ (801ad80 <_vfiprintf_r+0x228>)
 801ad6a:	a904      	add	r1, sp, #16
 801ad6c:	4630      	mov	r0, r6
 801ad6e:	f000 f879 	bl	801ae64 <_printf_i>
 801ad72:	e7e4      	b.n	801ad3e <_vfiprintf_r+0x1e6>
 801ad74:	0801e15e 	.word	0x0801e15e
 801ad78:	0801e168 	.word	0x0801e168
 801ad7c:	00000000 	.word	0x00000000
 801ad80:	0801ab33 	.word	0x0801ab33
 801ad84:	0801e164 	.word	0x0801e164

0801ad88 <_printf_common>:
 801ad88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad8c:	4616      	mov	r6, r2
 801ad8e:	4698      	mov	r8, r3
 801ad90:	688a      	ldr	r2, [r1, #8]
 801ad92:	690b      	ldr	r3, [r1, #16]
 801ad94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ad98:	4293      	cmp	r3, r2
 801ad9a:	bfb8      	it	lt
 801ad9c:	4613      	movlt	r3, r2
 801ad9e:	6033      	str	r3, [r6, #0]
 801ada0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ada4:	4607      	mov	r7, r0
 801ada6:	460c      	mov	r4, r1
 801ada8:	b10a      	cbz	r2, 801adae <_printf_common+0x26>
 801adaa:	3301      	adds	r3, #1
 801adac:	6033      	str	r3, [r6, #0]
 801adae:	6823      	ldr	r3, [r4, #0]
 801adb0:	0699      	lsls	r1, r3, #26
 801adb2:	bf42      	ittt	mi
 801adb4:	6833      	ldrmi	r3, [r6, #0]
 801adb6:	3302      	addmi	r3, #2
 801adb8:	6033      	strmi	r3, [r6, #0]
 801adba:	6825      	ldr	r5, [r4, #0]
 801adbc:	f015 0506 	ands.w	r5, r5, #6
 801adc0:	d106      	bne.n	801add0 <_printf_common+0x48>
 801adc2:	f104 0a19 	add.w	sl, r4, #25
 801adc6:	68e3      	ldr	r3, [r4, #12]
 801adc8:	6832      	ldr	r2, [r6, #0]
 801adca:	1a9b      	subs	r3, r3, r2
 801adcc:	42ab      	cmp	r3, r5
 801adce:	dc26      	bgt.n	801ae1e <_printf_common+0x96>
 801add0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801add4:	6822      	ldr	r2, [r4, #0]
 801add6:	3b00      	subs	r3, #0
 801add8:	bf18      	it	ne
 801adda:	2301      	movne	r3, #1
 801addc:	0692      	lsls	r2, r2, #26
 801adde:	d42b      	bmi.n	801ae38 <_printf_common+0xb0>
 801ade0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ade4:	4641      	mov	r1, r8
 801ade6:	4638      	mov	r0, r7
 801ade8:	47c8      	blx	r9
 801adea:	3001      	adds	r0, #1
 801adec:	d01e      	beq.n	801ae2c <_printf_common+0xa4>
 801adee:	6823      	ldr	r3, [r4, #0]
 801adf0:	6922      	ldr	r2, [r4, #16]
 801adf2:	f003 0306 	and.w	r3, r3, #6
 801adf6:	2b04      	cmp	r3, #4
 801adf8:	bf02      	ittt	eq
 801adfa:	68e5      	ldreq	r5, [r4, #12]
 801adfc:	6833      	ldreq	r3, [r6, #0]
 801adfe:	1aed      	subeq	r5, r5, r3
 801ae00:	68a3      	ldr	r3, [r4, #8]
 801ae02:	bf0c      	ite	eq
 801ae04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae08:	2500      	movne	r5, #0
 801ae0a:	4293      	cmp	r3, r2
 801ae0c:	bfc4      	itt	gt
 801ae0e:	1a9b      	subgt	r3, r3, r2
 801ae10:	18ed      	addgt	r5, r5, r3
 801ae12:	2600      	movs	r6, #0
 801ae14:	341a      	adds	r4, #26
 801ae16:	42b5      	cmp	r5, r6
 801ae18:	d11a      	bne.n	801ae50 <_printf_common+0xc8>
 801ae1a:	2000      	movs	r0, #0
 801ae1c:	e008      	b.n	801ae30 <_printf_common+0xa8>
 801ae1e:	2301      	movs	r3, #1
 801ae20:	4652      	mov	r2, sl
 801ae22:	4641      	mov	r1, r8
 801ae24:	4638      	mov	r0, r7
 801ae26:	47c8      	blx	r9
 801ae28:	3001      	adds	r0, #1
 801ae2a:	d103      	bne.n	801ae34 <_printf_common+0xac>
 801ae2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ae30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae34:	3501      	adds	r5, #1
 801ae36:	e7c6      	b.n	801adc6 <_printf_common+0x3e>
 801ae38:	18e1      	adds	r1, r4, r3
 801ae3a:	1c5a      	adds	r2, r3, #1
 801ae3c:	2030      	movs	r0, #48	@ 0x30
 801ae3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ae42:	4422      	add	r2, r4
 801ae44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ae4c:	3302      	adds	r3, #2
 801ae4e:	e7c7      	b.n	801ade0 <_printf_common+0x58>
 801ae50:	2301      	movs	r3, #1
 801ae52:	4622      	mov	r2, r4
 801ae54:	4641      	mov	r1, r8
 801ae56:	4638      	mov	r0, r7
 801ae58:	47c8      	blx	r9
 801ae5a:	3001      	adds	r0, #1
 801ae5c:	d0e6      	beq.n	801ae2c <_printf_common+0xa4>
 801ae5e:	3601      	adds	r6, #1
 801ae60:	e7d9      	b.n	801ae16 <_printf_common+0x8e>
	...

0801ae64 <_printf_i>:
 801ae64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae68:	7e0f      	ldrb	r7, [r1, #24]
 801ae6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ae6c:	2f78      	cmp	r7, #120	@ 0x78
 801ae6e:	4691      	mov	r9, r2
 801ae70:	4680      	mov	r8, r0
 801ae72:	460c      	mov	r4, r1
 801ae74:	469a      	mov	sl, r3
 801ae76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ae7a:	d807      	bhi.n	801ae8c <_printf_i+0x28>
 801ae7c:	2f62      	cmp	r7, #98	@ 0x62
 801ae7e:	d80a      	bhi.n	801ae96 <_printf_i+0x32>
 801ae80:	2f00      	cmp	r7, #0
 801ae82:	f000 80d2 	beq.w	801b02a <_printf_i+0x1c6>
 801ae86:	2f58      	cmp	r7, #88	@ 0x58
 801ae88:	f000 80b9 	beq.w	801affe <_printf_i+0x19a>
 801ae8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ae94:	e03a      	b.n	801af0c <_printf_i+0xa8>
 801ae96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ae9a:	2b15      	cmp	r3, #21
 801ae9c:	d8f6      	bhi.n	801ae8c <_printf_i+0x28>
 801ae9e:	a101      	add	r1, pc, #4	@ (adr r1, 801aea4 <_printf_i+0x40>)
 801aea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aea4:	0801aefd 	.word	0x0801aefd
 801aea8:	0801af11 	.word	0x0801af11
 801aeac:	0801ae8d 	.word	0x0801ae8d
 801aeb0:	0801ae8d 	.word	0x0801ae8d
 801aeb4:	0801ae8d 	.word	0x0801ae8d
 801aeb8:	0801ae8d 	.word	0x0801ae8d
 801aebc:	0801af11 	.word	0x0801af11
 801aec0:	0801ae8d 	.word	0x0801ae8d
 801aec4:	0801ae8d 	.word	0x0801ae8d
 801aec8:	0801ae8d 	.word	0x0801ae8d
 801aecc:	0801ae8d 	.word	0x0801ae8d
 801aed0:	0801b011 	.word	0x0801b011
 801aed4:	0801af3b 	.word	0x0801af3b
 801aed8:	0801afcb 	.word	0x0801afcb
 801aedc:	0801ae8d 	.word	0x0801ae8d
 801aee0:	0801ae8d 	.word	0x0801ae8d
 801aee4:	0801b033 	.word	0x0801b033
 801aee8:	0801ae8d 	.word	0x0801ae8d
 801aeec:	0801af3b 	.word	0x0801af3b
 801aef0:	0801ae8d 	.word	0x0801ae8d
 801aef4:	0801ae8d 	.word	0x0801ae8d
 801aef8:	0801afd3 	.word	0x0801afd3
 801aefc:	6833      	ldr	r3, [r6, #0]
 801aefe:	1d1a      	adds	r2, r3, #4
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	6032      	str	r2, [r6, #0]
 801af04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801af08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801af0c:	2301      	movs	r3, #1
 801af0e:	e09d      	b.n	801b04c <_printf_i+0x1e8>
 801af10:	6833      	ldr	r3, [r6, #0]
 801af12:	6820      	ldr	r0, [r4, #0]
 801af14:	1d19      	adds	r1, r3, #4
 801af16:	6031      	str	r1, [r6, #0]
 801af18:	0606      	lsls	r6, r0, #24
 801af1a:	d501      	bpl.n	801af20 <_printf_i+0xbc>
 801af1c:	681d      	ldr	r5, [r3, #0]
 801af1e:	e003      	b.n	801af28 <_printf_i+0xc4>
 801af20:	0645      	lsls	r5, r0, #25
 801af22:	d5fb      	bpl.n	801af1c <_printf_i+0xb8>
 801af24:	f9b3 5000 	ldrsh.w	r5, [r3]
 801af28:	2d00      	cmp	r5, #0
 801af2a:	da03      	bge.n	801af34 <_printf_i+0xd0>
 801af2c:	232d      	movs	r3, #45	@ 0x2d
 801af2e:	426d      	negs	r5, r5
 801af30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af34:	4859      	ldr	r0, [pc, #356]	@ (801b09c <_printf_i+0x238>)
 801af36:	230a      	movs	r3, #10
 801af38:	e011      	b.n	801af5e <_printf_i+0xfa>
 801af3a:	6821      	ldr	r1, [r4, #0]
 801af3c:	6833      	ldr	r3, [r6, #0]
 801af3e:	0608      	lsls	r0, r1, #24
 801af40:	f853 5b04 	ldr.w	r5, [r3], #4
 801af44:	d402      	bmi.n	801af4c <_printf_i+0xe8>
 801af46:	0649      	lsls	r1, r1, #25
 801af48:	bf48      	it	mi
 801af4a:	b2ad      	uxthmi	r5, r5
 801af4c:	2f6f      	cmp	r7, #111	@ 0x6f
 801af4e:	4853      	ldr	r0, [pc, #332]	@ (801b09c <_printf_i+0x238>)
 801af50:	6033      	str	r3, [r6, #0]
 801af52:	bf14      	ite	ne
 801af54:	230a      	movne	r3, #10
 801af56:	2308      	moveq	r3, #8
 801af58:	2100      	movs	r1, #0
 801af5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801af5e:	6866      	ldr	r6, [r4, #4]
 801af60:	60a6      	str	r6, [r4, #8]
 801af62:	2e00      	cmp	r6, #0
 801af64:	bfa2      	ittt	ge
 801af66:	6821      	ldrge	r1, [r4, #0]
 801af68:	f021 0104 	bicge.w	r1, r1, #4
 801af6c:	6021      	strge	r1, [r4, #0]
 801af6e:	b90d      	cbnz	r5, 801af74 <_printf_i+0x110>
 801af70:	2e00      	cmp	r6, #0
 801af72:	d04b      	beq.n	801b00c <_printf_i+0x1a8>
 801af74:	4616      	mov	r6, r2
 801af76:	fbb5 f1f3 	udiv	r1, r5, r3
 801af7a:	fb03 5711 	mls	r7, r3, r1, r5
 801af7e:	5dc7      	ldrb	r7, [r0, r7]
 801af80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801af84:	462f      	mov	r7, r5
 801af86:	42bb      	cmp	r3, r7
 801af88:	460d      	mov	r5, r1
 801af8a:	d9f4      	bls.n	801af76 <_printf_i+0x112>
 801af8c:	2b08      	cmp	r3, #8
 801af8e:	d10b      	bne.n	801afa8 <_printf_i+0x144>
 801af90:	6823      	ldr	r3, [r4, #0]
 801af92:	07df      	lsls	r7, r3, #31
 801af94:	d508      	bpl.n	801afa8 <_printf_i+0x144>
 801af96:	6923      	ldr	r3, [r4, #16]
 801af98:	6861      	ldr	r1, [r4, #4]
 801af9a:	4299      	cmp	r1, r3
 801af9c:	bfde      	ittt	le
 801af9e:	2330      	movle	r3, #48	@ 0x30
 801afa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801afa4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801afa8:	1b92      	subs	r2, r2, r6
 801afaa:	6122      	str	r2, [r4, #16]
 801afac:	f8cd a000 	str.w	sl, [sp]
 801afb0:	464b      	mov	r3, r9
 801afb2:	aa03      	add	r2, sp, #12
 801afb4:	4621      	mov	r1, r4
 801afb6:	4640      	mov	r0, r8
 801afb8:	f7ff fee6 	bl	801ad88 <_printf_common>
 801afbc:	3001      	adds	r0, #1
 801afbe:	d14a      	bne.n	801b056 <_printf_i+0x1f2>
 801afc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801afc4:	b004      	add	sp, #16
 801afc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afca:	6823      	ldr	r3, [r4, #0]
 801afcc:	f043 0320 	orr.w	r3, r3, #32
 801afd0:	6023      	str	r3, [r4, #0]
 801afd2:	4833      	ldr	r0, [pc, #204]	@ (801b0a0 <_printf_i+0x23c>)
 801afd4:	2778      	movs	r7, #120	@ 0x78
 801afd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801afda:	6823      	ldr	r3, [r4, #0]
 801afdc:	6831      	ldr	r1, [r6, #0]
 801afde:	061f      	lsls	r7, r3, #24
 801afe0:	f851 5b04 	ldr.w	r5, [r1], #4
 801afe4:	d402      	bmi.n	801afec <_printf_i+0x188>
 801afe6:	065f      	lsls	r7, r3, #25
 801afe8:	bf48      	it	mi
 801afea:	b2ad      	uxthmi	r5, r5
 801afec:	6031      	str	r1, [r6, #0]
 801afee:	07d9      	lsls	r1, r3, #31
 801aff0:	bf44      	itt	mi
 801aff2:	f043 0320 	orrmi.w	r3, r3, #32
 801aff6:	6023      	strmi	r3, [r4, #0]
 801aff8:	b11d      	cbz	r5, 801b002 <_printf_i+0x19e>
 801affa:	2310      	movs	r3, #16
 801affc:	e7ac      	b.n	801af58 <_printf_i+0xf4>
 801affe:	4827      	ldr	r0, [pc, #156]	@ (801b09c <_printf_i+0x238>)
 801b000:	e7e9      	b.n	801afd6 <_printf_i+0x172>
 801b002:	6823      	ldr	r3, [r4, #0]
 801b004:	f023 0320 	bic.w	r3, r3, #32
 801b008:	6023      	str	r3, [r4, #0]
 801b00a:	e7f6      	b.n	801affa <_printf_i+0x196>
 801b00c:	4616      	mov	r6, r2
 801b00e:	e7bd      	b.n	801af8c <_printf_i+0x128>
 801b010:	6833      	ldr	r3, [r6, #0]
 801b012:	6825      	ldr	r5, [r4, #0]
 801b014:	6961      	ldr	r1, [r4, #20]
 801b016:	1d18      	adds	r0, r3, #4
 801b018:	6030      	str	r0, [r6, #0]
 801b01a:	062e      	lsls	r6, r5, #24
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	d501      	bpl.n	801b024 <_printf_i+0x1c0>
 801b020:	6019      	str	r1, [r3, #0]
 801b022:	e002      	b.n	801b02a <_printf_i+0x1c6>
 801b024:	0668      	lsls	r0, r5, #25
 801b026:	d5fb      	bpl.n	801b020 <_printf_i+0x1bc>
 801b028:	8019      	strh	r1, [r3, #0]
 801b02a:	2300      	movs	r3, #0
 801b02c:	6123      	str	r3, [r4, #16]
 801b02e:	4616      	mov	r6, r2
 801b030:	e7bc      	b.n	801afac <_printf_i+0x148>
 801b032:	6833      	ldr	r3, [r6, #0]
 801b034:	1d1a      	adds	r2, r3, #4
 801b036:	6032      	str	r2, [r6, #0]
 801b038:	681e      	ldr	r6, [r3, #0]
 801b03a:	6862      	ldr	r2, [r4, #4]
 801b03c:	2100      	movs	r1, #0
 801b03e:	4630      	mov	r0, r6
 801b040:	f7e5 f906 	bl	8000250 <memchr>
 801b044:	b108      	cbz	r0, 801b04a <_printf_i+0x1e6>
 801b046:	1b80      	subs	r0, r0, r6
 801b048:	6060      	str	r0, [r4, #4]
 801b04a:	6863      	ldr	r3, [r4, #4]
 801b04c:	6123      	str	r3, [r4, #16]
 801b04e:	2300      	movs	r3, #0
 801b050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b054:	e7aa      	b.n	801afac <_printf_i+0x148>
 801b056:	6923      	ldr	r3, [r4, #16]
 801b058:	4632      	mov	r2, r6
 801b05a:	4649      	mov	r1, r9
 801b05c:	4640      	mov	r0, r8
 801b05e:	47d0      	blx	sl
 801b060:	3001      	adds	r0, #1
 801b062:	d0ad      	beq.n	801afc0 <_printf_i+0x15c>
 801b064:	6823      	ldr	r3, [r4, #0]
 801b066:	079b      	lsls	r3, r3, #30
 801b068:	d413      	bmi.n	801b092 <_printf_i+0x22e>
 801b06a:	68e0      	ldr	r0, [r4, #12]
 801b06c:	9b03      	ldr	r3, [sp, #12]
 801b06e:	4298      	cmp	r0, r3
 801b070:	bfb8      	it	lt
 801b072:	4618      	movlt	r0, r3
 801b074:	e7a6      	b.n	801afc4 <_printf_i+0x160>
 801b076:	2301      	movs	r3, #1
 801b078:	4632      	mov	r2, r6
 801b07a:	4649      	mov	r1, r9
 801b07c:	4640      	mov	r0, r8
 801b07e:	47d0      	blx	sl
 801b080:	3001      	adds	r0, #1
 801b082:	d09d      	beq.n	801afc0 <_printf_i+0x15c>
 801b084:	3501      	adds	r5, #1
 801b086:	68e3      	ldr	r3, [r4, #12]
 801b088:	9903      	ldr	r1, [sp, #12]
 801b08a:	1a5b      	subs	r3, r3, r1
 801b08c:	42ab      	cmp	r3, r5
 801b08e:	dcf2      	bgt.n	801b076 <_printf_i+0x212>
 801b090:	e7eb      	b.n	801b06a <_printf_i+0x206>
 801b092:	2500      	movs	r5, #0
 801b094:	f104 0619 	add.w	r6, r4, #25
 801b098:	e7f5      	b.n	801b086 <_printf_i+0x222>
 801b09a:	bf00      	nop
 801b09c:	0801e16f 	.word	0x0801e16f
 801b0a0:	0801e180 	.word	0x0801e180

0801b0a4 <__sflush_r>:
 801b0a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0ac:	0716      	lsls	r6, r2, #28
 801b0ae:	4605      	mov	r5, r0
 801b0b0:	460c      	mov	r4, r1
 801b0b2:	d454      	bmi.n	801b15e <__sflush_r+0xba>
 801b0b4:	684b      	ldr	r3, [r1, #4]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	dc02      	bgt.n	801b0c0 <__sflush_r+0x1c>
 801b0ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	dd48      	ble.n	801b152 <__sflush_r+0xae>
 801b0c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b0c2:	2e00      	cmp	r6, #0
 801b0c4:	d045      	beq.n	801b152 <__sflush_r+0xae>
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b0cc:	682f      	ldr	r7, [r5, #0]
 801b0ce:	6a21      	ldr	r1, [r4, #32]
 801b0d0:	602b      	str	r3, [r5, #0]
 801b0d2:	d030      	beq.n	801b136 <__sflush_r+0x92>
 801b0d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b0d6:	89a3      	ldrh	r3, [r4, #12]
 801b0d8:	0759      	lsls	r1, r3, #29
 801b0da:	d505      	bpl.n	801b0e8 <__sflush_r+0x44>
 801b0dc:	6863      	ldr	r3, [r4, #4]
 801b0de:	1ad2      	subs	r2, r2, r3
 801b0e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b0e2:	b10b      	cbz	r3, 801b0e8 <__sflush_r+0x44>
 801b0e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b0e6:	1ad2      	subs	r2, r2, r3
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b0ec:	6a21      	ldr	r1, [r4, #32]
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	47b0      	blx	r6
 801b0f2:	1c43      	adds	r3, r0, #1
 801b0f4:	89a3      	ldrh	r3, [r4, #12]
 801b0f6:	d106      	bne.n	801b106 <__sflush_r+0x62>
 801b0f8:	6829      	ldr	r1, [r5, #0]
 801b0fa:	291d      	cmp	r1, #29
 801b0fc:	d82b      	bhi.n	801b156 <__sflush_r+0xb2>
 801b0fe:	4a2a      	ldr	r2, [pc, #168]	@ (801b1a8 <__sflush_r+0x104>)
 801b100:	410a      	asrs	r2, r1
 801b102:	07d6      	lsls	r6, r2, #31
 801b104:	d427      	bmi.n	801b156 <__sflush_r+0xb2>
 801b106:	2200      	movs	r2, #0
 801b108:	6062      	str	r2, [r4, #4]
 801b10a:	04d9      	lsls	r1, r3, #19
 801b10c:	6922      	ldr	r2, [r4, #16]
 801b10e:	6022      	str	r2, [r4, #0]
 801b110:	d504      	bpl.n	801b11c <__sflush_r+0x78>
 801b112:	1c42      	adds	r2, r0, #1
 801b114:	d101      	bne.n	801b11a <__sflush_r+0x76>
 801b116:	682b      	ldr	r3, [r5, #0]
 801b118:	b903      	cbnz	r3, 801b11c <__sflush_r+0x78>
 801b11a:	6560      	str	r0, [r4, #84]	@ 0x54
 801b11c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b11e:	602f      	str	r7, [r5, #0]
 801b120:	b1b9      	cbz	r1, 801b152 <__sflush_r+0xae>
 801b122:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b126:	4299      	cmp	r1, r3
 801b128:	d002      	beq.n	801b130 <__sflush_r+0x8c>
 801b12a:	4628      	mov	r0, r5
 801b12c:	f7ff fb40 	bl	801a7b0 <_free_r>
 801b130:	2300      	movs	r3, #0
 801b132:	6363      	str	r3, [r4, #52]	@ 0x34
 801b134:	e00d      	b.n	801b152 <__sflush_r+0xae>
 801b136:	2301      	movs	r3, #1
 801b138:	4628      	mov	r0, r5
 801b13a:	47b0      	blx	r6
 801b13c:	4602      	mov	r2, r0
 801b13e:	1c50      	adds	r0, r2, #1
 801b140:	d1c9      	bne.n	801b0d6 <__sflush_r+0x32>
 801b142:	682b      	ldr	r3, [r5, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d0c6      	beq.n	801b0d6 <__sflush_r+0x32>
 801b148:	2b1d      	cmp	r3, #29
 801b14a:	d001      	beq.n	801b150 <__sflush_r+0xac>
 801b14c:	2b16      	cmp	r3, #22
 801b14e:	d11e      	bne.n	801b18e <__sflush_r+0xea>
 801b150:	602f      	str	r7, [r5, #0]
 801b152:	2000      	movs	r0, #0
 801b154:	e022      	b.n	801b19c <__sflush_r+0xf8>
 801b156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b15a:	b21b      	sxth	r3, r3
 801b15c:	e01b      	b.n	801b196 <__sflush_r+0xf2>
 801b15e:	690f      	ldr	r7, [r1, #16]
 801b160:	2f00      	cmp	r7, #0
 801b162:	d0f6      	beq.n	801b152 <__sflush_r+0xae>
 801b164:	0793      	lsls	r3, r2, #30
 801b166:	680e      	ldr	r6, [r1, #0]
 801b168:	bf08      	it	eq
 801b16a:	694b      	ldreq	r3, [r1, #20]
 801b16c:	600f      	str	r7, [r1, #0]
 801b16e:	bf18      	it	ne
 801b170:	2300      	movne	r3, #0
 801b172:	eba6 0807 	sub.w	r8, r6, r7
 801b176:	608b      	str	r3, [r1, #8]
 801b178:	f1b8 0f00 	cmp.w	r8, #0
 801b17c:	dde9      	ble.n	801b152 <__sflush_r+0xae>
 801b17e:	6a21      	ldr	r1, [r4, #32]
 801b180:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b182:	4643      	mov	r3, r8
 801b184:	463a      	mov	r2, r7
 801b186:	4628      	mov	r0, r5
 801b188:	47b0      	blx	r6
 801b18a:	2800      	cmp	r0, #0
 801b18c:	dc08      	bgt.n	801b1a0 <__sflush_r+0xfc>
 801b18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b196:	81a3      	strh	r3, [r4, #12]
 801b198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1a0:	4407      	add	r7, r0
 801b1a2:	eba8 0800 	sub.w	r8, r8, r0
 801b1a6:	e7e7      	b.n	801b178 <__sflush_r+0xd4>
 801b1a8:	dfbffffe 	.word	0xdfbffffe

0801b1ac <_fflush_r>:
 801b1ac:	b538      	push	{r3, r4, r5, lr}
 801b1ae:	690b      	ldr	r3, [r1, #16]
 801b1b0:	4605      	mov	r5, r0
 801b1b2:	460c      	mov	r4, r1
 801b1b4:	b913      	cbnz	r3, 801b1bc <_fflush_r+0x10>
 801b1b6:	2500      	movs	r5, #0
 801b1b8:	4628      	mov	r0, r5
 801b1ba:	bd38      	pop	{r3, r4, r5, pc}
 801b1bc:	b118      	cbz	r0, 801b1c6 <_fflush_r+0x1a>
 801b1be:	6a03      	ldr	r3, [r0, #32]
 801b1c0:	b90b      	cbnz	r3, 801b1c6 <_fflush_r+0x1a>
 801b1c2:	f7fe ffe3 	bl	801a18c <__sinit>
 801b1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d0f3      	beq.n	801b1b6 <_fflush_r+0xa>
 801b1ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b1d0:	07d0      	lsls	r0, r2, #31
 801b1d2:	d404      	bmi.n	801b1de <_fflush_r+0x32>
 801b1d4:	0599      	lsls	r1, r3, #22
 801b1d6:	d402      	bmi.n	801b1de <_fflush_r+0x32>
 801b1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1da:	f7ff faa6 	bl	801a72a <__retarget_lock_acquire_recursive>
 801b1de:	4628      	mov	r0, r5
 801b1e0:	4621      	mov	r1, r4
 801b1e2:	f7ff ff5f 	bl	801b0a4 <__sflush_r>
 801b1e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b1e8:	07da      	lsls	r2, r3, #31
 801b1ea:	4605      	mov	r5, r0
 801b1ec:	d4e4      	bmi.n	801b1b8 <_fflush_r+0xc>
 801b1ee:	89a3      	ldrh	r3, [r4, #12]
 801b1f0:	059b      	lsls	r3, r3, #22
 801b1f2:	d4e1      	bmi.n	801b1b8 <_fflush_r+0xc>
 801b1f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1f6:	f7ff fa99 	bl	801a72c <__retarget_lock_release_recursive>
 801b1fa:	e7dd      	b.n	801b1b8 <_fflush_r+0xc>

0801b1fc <fiprintf>:
 801b1fc:	b40e      	push	{r1, r2, r3}
 801b1fe:	b503      	push	{r0, r1, lr}
 801b200:	4601      	mov	r1, r0
 801b202:	ab03      	add	r3, sp, #12
 801b204:	4805      	ldr	r0, [pc, #20]	@ (801b21c <fiprintf+0x20>)
 801b206:	f853 2b04 	ldr.w	r2, [r3], #4
 801b20a:	6800      	ldr	r0, [r0, #0]
 801b20c:	9301      	str	r3, [sp, #4]
 801b20e:	f7ff fca3 	bl	801ab58 <_vfiprintf_r>
 801b212:	b002      	add	sp, #8
 801b214:	f85d eb04 	ldr.w	lr, [sp], #4
 801b218:	b003      	add	sp, #12
 801b21a:	4770      	bx	lr
 801b21c:	200009c8 	.word	0x200009c8

0801b220 <__swhatbuf_r>:
 801b220:	b570      	push	{r4, r5, r6, lr}
 801b222:	460c      	mov	r4, r1
 801b224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b228:	2900      	cmp	r1, #0
 801b22a:	b096      	sub	sp, #88	@ 0x58
 801b22c:	4615      	mov	r5, r2
 801b22e:	461e      	mov	r6, r3
 801b230:	da0d      	bge.n	801b24e <__swhatbuf_r+0x2e>
 801b232:	89a3      	ldrh	r3, [r4, #12]
 801b234:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b238:	f04f 0100 	mov.w	r1, #0
 801b23c:	bf14      	ite	ne
 801b23e:	2340      	movne	r3, #64	@ 0x40
 801b240:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b244:	2000      	movs	r0, #0
 801b246:	6031      	str	r1, [r6, #0]
 801b248:	602b      	str	r3, [r5, #0]
 801b24a:	b016      	add	sp, #88	@ 0x58
 801b24c:	bd70      	pop	{r4, r5, r6, pc}
 801b24e:	466a      	mov	r2, sp
 801b250:	f000 f848 	bl	801b2e4 <_fstat_r>
 801b254:	2800      	cmp	r0, #0
 801b256:	dbec      	blt.n	801b232 <__swhatbuf_r+0x12>
 801b258:	9901      	ldr	r1, [sp, #4]
 801b25a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b25e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b262:	4259      	negs	r1, r3
 801b264:	4159      	adcs	r1, r3
 801b266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b26a:	e7eb      	b.n	801b244 <__swhatbuf_r+0x24>

0801b26c <__smakebuf_r>:
 801b26c:	898b      	ldrh	r3, [r1, #12]
 801b26e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b270:	079d      	lsls	r5, r3, #30
 801b272:	4606      	mov	r6, r0
 801b274:	460c      	mov	r4, r1
 801b276:	d507      	bpl.n	801b288 <__smakebuf_r+0x1c>
 801b278:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b27c:	6023      	str	r3, [r4, #0]
 801b27e:	6123      	str	r3, [r4, #16]
 801b280:	2301      	movs	r3, #1
 801b282:	6163      	str	r3, [r4, #20]
 801b284:	b003      	add	sp, #12
 801b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b288:	ab01      	add	r3, sp, #4
 801b28a:	466a      	mov	r2, sp
 801b28c:	f7ff ffc8 	bl	801b220 <__swhatbuf_r>
 801b290:	9f00      	ldr	r7, [sp, #0]
 801b292:	4605      	mov	r5, r0
 801b294:	4639      	mov	r1, r7
 801b296:	4630      	mov	r0, r6
 801b298:	f7fe fd46 	bl	8019d28 <_malloc_r>
 801b29c:	b948      	cbnz	r0, 801b2b2 <__smakebuf_r+0x46>
 801b29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2a2:	059a      	lsls	r2, r3, #22
 801b2a4:	d4ee      	bmi.n	801b284 <__smakebuf_r+0x18>
 801b2a6:	f023 0303 	bic.w	r3, r3, #3
 801b2aa:	f043 0302 	orr.w	r3, r3, #2
 801b2ae:	81a3      	strh	r3, [r4, #12]
 801b2b0:	e7e2      	b.n	801b278 <__smakebuf_r+0xc>
 801b2b2:	89a3      	ldrh	r3, [r4, #12]
 801b2b4:	6020      	str	r0, [r4, #0]
 801b2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b2ba:	81a3      	strh	r3, [r4, #12]
 801b2bc:	9b01      	ldr	r3, [sp, #4]
 801b2be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b2c2:	b15b      	cbz	r3, 801b2dc <__smakebuf_r+0x70>
 801b2c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2c8:	4630      	mov	r0, r6
 801b2ca:	f000 f81d 	bl	801b308 <_isatty_r>
 801b2ce:	b128      	cbz	r0, 801b2dc <__smakebuf_r+0x70>
 801b2d0:	89a3      	ldrh	r3, [r4, #12]
 801b2d2:	f023 0303 	bic.w	r3, r3, #3
 801b2d6:	f043 0301 	orr.w	r3, r3, #1
 801b2da:	81a3      	strh	r3, [r4, #12]
 801b2dc:	89a3      	ldrh	r3, [r4, #12]
 801b2de:	431d      	orrs	r5, r3
 801b2e0:	81a5      	strh	r5, [r4, #12]
 801b2e2:	e7cf      	b.n	801b284 <__smakebuf_r+0x18>

0801b2e4 <_fstat_r>:
 801b2e4:	b538      	push	{r3, r4, r5, lr}
 801b2e6:	4d07      	ldr	r5, [pc, #28]	@ (801b304 <_fstat_r+0x20>)
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	4604      	mov	r4, r0
 801b2ec:	4608      	mov	r0, r1
 801b2ee:	4611      	mov	r1, r2
 801b2f0:	602b      	str	r3, [r5, #0]
 801b2f2:	f7e7 fc63 	bl	8002bbc <_fstat>
 801b2f6:	1c43      	adds	r3, r0, #1
 801b2f8:	d102      	bne.n	801b300 <_fstat_r+0x1c>
 801b2fa:	682b      	ldr	r3, [r5, #0]
 801b2fc:	b103      	cbz	r3, 801b300 <_fstat_r+0x1c>
 801b2fe:	6023      	str	r3, [r4, #0]
 801b300:	bd38      	pop	{r3, r4, r5, pc}
 801b302:	bf00      	nop
 801b304:	2000c38c 	.word	0x2000c38c

0801b308 <_isatty_r>:
 801b308:	b538      	push	{r3, r4, r5, lr}
 801b30a:	4d06      	ldr	r5, [pc, #24]	@ (801b324 <_isatty_r+0x1c>)
 801b30c:	2300      	movs	r3, #0
 801b30e:	4604      	mov	r4, r0
 801b310:	4608      	mov	r0, r1
 801b312:	602b      	str	r3, [r5, #0]
 801b314:	f7e7 fc62 	bl	8002bdc <_isatty>
 801b318:	1c43      	adds	r3, r0, #1
 801b31a:	d102      	bne.n	801b322 <_isatty_r+0x1a>
 801b31c:	682b      	ldr	r3, [r5, #0]
 801b31e:	b103      	cbz	r3, 801b322 <_isatty_r+0x1a>
 801b320:	6023      	str	r3, [r4, #0]
 801b322:	bd38      	pop	{r3, r4, r5, pc}
 801b324:	2000c38c 	.word	0x2000c38c

0801b328 <abort>:
 801b328:	b508      	push	{r3, lr}
 801b32a:	2006      	movs	r0, #6
 801b32c:	f000 f82c 	bl	801b388 <raise>
 801b330:	2001      	movs	r0, #1
 801b332:	f7e7 fbf3 	bl	8002b1c <_exit>

0801b336 <_raise_r>:
 801b336:	291f      	cmp	r1, #31
 801b338:	b538      	push	{r3, r4, r5, lr}
 801b33a:	4605      	mov	r5, r0
 801b33c:	460c      	mov	r4, r1
 801b33e:	d904      	bls.n	801b34a <_raise_r+0x14>
 801b340:	2316      	movs	r3, #22
 801b342:	6003      	str	r3, [r0, #0]
 801b344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b348:	bd38      	pop	{r3, r4, r5, pc}
 801b34a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b34c:	b112      	cbz	r2, 801b354 <_raise_r+0x1e>
 801b34e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b352:	b94b      	cbnz	r3, 801b368 <_raise_r+0x32>
 801b354:	4628      	mov	r0, r5
 801b356:	f000 f831 	bl	801b3bc <_getpid_r>
 801b35a:	4622      	mov	r2, r4
 801b35c:	4601      	mov	r1, r0
 801b35e:	4628      	mov	r0, r5
 801b360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b364:	f000 b818 	b.w	801b398 <_kill_r>
 801b368:	2b01      	cmp	r3, #1
 801b36a:	d00a      	beq.n	801b382 <_raise_r+0x4c>
 801b36c:	1c59      	adds	r1, r3, #1
 801b36e:	d103      	bne.n	801b378 <_raise_r+0x42>
 801b370:	2316      	movs	r3, #22
 801b372:	6003      	str	r3, [r0, #0]
 801b374:	2001      	movs	r0, #1
 801b376:	e7e7      	b.n	801b348 <_raise_r+0x12>
 801b378:	2100      	movs	r1, #0
 801b37a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b37e:	4620      	mov	r0, r4
 801b380:	4798      	blx	r3
 801b382:	2000      	movs	r0, #0
 801b384:	e7e0      	b.n	801b348 <_raise_r+0x12>
	...

0801b388 <raise>:
 801b388:	4b02      	ldr	r3, [pc, #8]	@ (801b394 <raise+0xc>)
 801b38a:	4601      	mov	r1, r0
 801b38c:	6818      	ldr	r0, [r3, #0]
 801b38e:	f7ff bfd2 	b.w	801b336 <_raise_r>
 801b392:	bf00      	nop
 801b394:	200009c8 	.word	0x200009c8

0801b398 <_kill_r>:
 801b398:	b538      	push	{r3, r4, r5, lr}
 801b39a:	4d07      	ldr	r5, [pc, #28]	@ (801b3b8 <_kill_r+0x20>)
 801b39c:	2300      	movs	r3, #0
 801b39e:	4604      	mov	r4, r0
 801b3a0:	4608      	mov	r0, r1
 801b3a2:	4611      	mov	r1, r2
 801b3a4:	602b      	str	r3, [r5, #0]
 801b3a6:	f7e7 fba9 	bl	8002afc <_kill>
 801b3aa:	1c43      	adds	r3, r0, #1
 801b3ac:	d102      	bne.n	801b3b4 <_kill_r+0x1c>
 801b3ae:	682b      	ldr	r3, [r5, #0]
 801b3b0:	b103      	cbz	r3, 801b3b4 <_kill_r+0x1c>
 801b3b2:	6023      	str	r3, [r4, #0]
 801b3b4:	bd38      	pop	{r3, r4, r5, pc}
 801b3b6:	bf00      	nop
 801b3b8:	2000c38c 	.word	0x2000c38c

0801b3bc <_getpid_r>:
 801b3bc:	f7e7 bb96 	b.w	8002aec <_getpid>

0801b3c0 <atan2>:
 801b3c0:	f000 bb26 	b.w	801ba10 <__ieee754_atan2>

0801b3c4 <pow>:
 801b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3c6:	ed2d 8b02 	vpush	{d8}
 801b3ca:	eeb0 8a40 	vmov.f32	s16, s0
 801b3ce:	eef0 8a60 	vmov.f32	s17, s1
 801b3d2:	ec55 4b11 	vmov	r4, r5, d1
 801b3d6:	f000 fbe3 	bl	801bba0 <__ieee754_pow>
 801b3da:	4622      	mov	r2, r4
 801b3dc:	462b      	mov	r3, r5
 801b3de:	4620      	mov	r0, r4
 801b3e0:	4629      	mov	r1, r5
 801b3e2:	ec57 6b10 	vmov	r6, r7, d0
 801b3e6:	f7e5 fbd9 	bl	8000b9c <__aeabi_dcmpun>
 801b3ea:	2800      	cmp	r0, #0
 801b3ec:	d13b      	bne.n	801b466 <pow+0xa2>
 801b3ee:	ec51 0b18 	vmov	r0, r1, d8
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	f7e5 fb9f 	bl	8000b38 <__aeabi_dcmpeq>
 801b3fa:	b1b8      	cbz	r0, 801b42c <pow+0x68>
 801b3fc:	2200      	movs	r2, #0
 801b3fe:	2300      	movs	r3, #0
 801b400:	4620      	mov	r0, r4
 801b402:	4629      	mov	r1, r5
 801b404:	f7e5 fb98 	bl	8000b38 <__aeabi_dcmpeq>
 801b408:	2800      	cmp	r0, #0
 801b40a:	d146      	bne.n	801b49a <pow+0xd6>
 801b40c:	ec45 4b10 	vmov	d0, r4, r5
 801b410:	f000 fa16 	bl	801b840 <finite>
 801b414:	b338      	cbz	r0, 801b466 <pow+0xa2>
 801b416:	2200      	movs	r2, #0
 801b418:	2300      	movs	r3, #0
 801b41a:	4620      	mov	r0, r4
 801b41c:	4629      	mov	r1, r5
 801b41e:	f7e5 fb95 	bl	8000b4c <__aeabi_dcmplt>
 801b422:	b300      	cbz	r0, 801b466 <pow+0xa2>
 801b424:	f7ff f956 	bl	801a6d4 <__errno>
 801b428:	2322      	movs	r3, #34	@ 0x22
 801b42a:	e01b      	b.n	801b464 <pow+0xa0>
 801b42c:	ec47 6b10 	vmov	d0, r6, r7
 801b430:	f000 fa06 	bl	801b840 <finite>
 801b434:	b9e0      	cbnz	r0, 801b470 <pow+0xac>
 801b436:	eeb0 0a48 	vmov.f32	s0, s16
 801b43a:	eef0 0a68 	vmov.f32	s1, s17
 801b43e:	f000 f9ff 	bl	801b840 <finite>
 801b442:	b1a8      	cbz	r0, 801b470 <pow+0xac>
 801b444:	ec45 4b10 	vmov	d0, r4, r5
 801b448:	f000 f9fa 	bl	801b840 <finite>
 801b44c:	b180      	cbz	r0, 801b470 <pow+0xac>
 801b44e:	4632      	mov	r2, r6
 801b450:	463b      	mov	r3, r7
 801b452:	4630      	mov	r0, r6
 801b454:	4639      	mov	r1, r7
 801b456:	f7e5 fba1 	bl	8000b9c <__aeabi_dcmpun>
 801b45a:	2800      	cmp	r0, #0
 801b45c:	d0e2      	beq.n	801b424 <pow+0x60>
 801b45e:	f7ff f939 	bl	801a6d4 <__errno>
 801b462:	2321      	movs	r3, #33	@ 0x21
 801b464:	6003      	str	r3, [r0, #0]
 801b466:	ecbd 8b02 	vpop	{d8}
 801b46a:	ec47 6b10 	vmov	d0, r6, r7
 801b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b470:	2200      	movs	r2, #0
 801b472:	2300      	movs	r3, #0
 801b474:	4630      	mov	r0, r6
 801b476:	4639      	mov	r1, r7
 801b478:	f7e5 fb5e 	bl	8000b38 <__aeabi_dcmpeq>
 801b47c:	2800      	cmp	r0, #0
 801b47e:	d0f2      	beq.n	801b466 <pow+0xa2>
 801b480:	eeb0 0a48 	vmov.f32	s0, s16
 801b484:	eef0 0a68 	vmov.f32	s1, s17
 801b488:	f000 f9da 	bl	801b840 <finite>
 801b48c:	2800      	cmp	r0, #0
 801b48e:	d0ea      	beq.n	801b466 <pow+0xa2>
 801b490:	ec45 4b10 	vmov	d0, r4, r5
 801b494:	f000 f9d4 	bl	801b840 <finite>
 801b498:	e7c3      	b.n	801b422 <pow+0x5e>
 801b49a:	4f01      	ldr	r7, [pc, #4]	@ (801b4a0 <pow+0xdc>)
 801b49c:	2600      	movs	r6, #0
 801b49e:	e7e2      	b.n	801b466 <pow+0xa2>
 801b4a0:	3ff00000 	.word	0x3ff00000

0801b4a4 <sqrt>:
 801b4a4:	b538      	push	{r3, r4, r5, lr}
 801b4a6:	ed2d 8b02 	vpush	{d8}
 801b4aa:	ec55 4b10 	vmov	r4, r5, d0
 801b4ae:	f000 f9d3 	bl	801b858 <__ieee754_sqrt>
 801b4b2:	4622      	mov	r2, r4
 801b4b4:	462b      	mov	r3, r5
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	4629      	mov	r1, r5
 801b4ba:	eeb0 8a40 	vmov.f32	s16, s0
 801b4be:	eef0 8a60 	vmov.f32	s17, s1
 801b4c2:	f7e5 fb6b 	bl	8000b9c <__aeabi_dcmpun>
 801b4c6:	b990      	cbnz	r0, 801b4ee <sqrt+0x4a>
 801b4c8:	2200      	movs	r2, #0
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	4620      	mov	r0, r4
 801b4ce:	4629      	mov	r1, r5
 801b4d0:	f7e5 fb3c 	bl	8000b4c <__aeabi_dcmplt>
 801b4d4:	b158      	cbz	r0, 801b4ee <sqrt+0x4a>
 801b4d6:	f7ff f8fd 	bl	801a6d4 <__errno>
 801b4da:	2321      	movs	r3, #33	@ 0x21
 801b4dc:	6003      	str	r3, [r0, #0]
 801b4de:	2200      	movs	r2, #0
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	4610      	mov	r0, r2
 801b4e4:	4619      	mov	r1, r3
 801b4e6:	f7e5 f9e9 	bl	80008bc <__aeabi_ddiv>
 801b4ea:	ec41 0b18 	vmov	d8, r0, r1
 801b4ee:	eeb0 0a48 	vmov.f32	s0, s16
 801b4f2:	eef0 0a68 	vmov.f32	s1, s17
 801b4f6:	ecbd 8b02 	vpop	{d8}
 801b4fa:	bd38      	pop	{r3, r4, r5, pc}
 801b4fc:	0000      	movs	r0, r0
	...

0801b500 <atan>:
 801b500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b504:	ec55 4b10 	vmov	r4, r5, d0
 801b508:	4bbf      	ldr	r3, [pc, #764]	@ (801b808 <atan+0x308>)
 801b50a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801b50e:	429e      	cmp	r6, r3
 801b510:	46ab      	mov	fp, r5
 801b512:	d918      	bls.n	801b546 <atan+0x46>
 801b514:	4bbd      	ldr	r3, [pc, #756]	@ (801b80c <atan+0x30c>)
 801b516:	429e      	cmp	r6, r3
 801b518:	d801      	bhi.n	801b51e <atan+0x1e>
 801b51a:	d109      	bne.n	801b530 <atan+0x30>
 801b51c:	b144      	cbz	r4, 801b530 <atan+0x30>
 801b51e:	4622      	mov	r2, r4
 801b520:	462b      	mov	r3, r5
 801b522:	4620      	mov	r0, r4
 801b524:	4629      	mov	r1, r5
 801b526:	f7e4 fee9 	bl	80002fc <__adddf3>
 801b52a:	4604      	mov	r4, r0
 801b52c:	460d      	mov	r5, r1
 801b52e:	e006      	b.n	801b53e <atan+0x3e>
 801b530:	f1bb 0f00 	cmp.w	fp, #0
 801b534:	f340 812b 	ble.w	801b78e <atan+0x28e>
 801b538:	a597      	add	r5, pc, #604	@ (adr r5, 801b798 <atan+0x298>)
 801b53a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b53e:	ec45 4b10 	vmov	d0, r4, r5
 801b542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b546:	4bb2      	ldr	r3, [pc, #712]	@ (801b810 <atan+0x310>)
 801b548:	429e      	cmp	r6, r3
 801b54a:	d813      	bhi.n	801b574 <atan+0x74>
 801b54c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801b550:	429e      	cmp	r6, r3
 801b552:	d80c      	bhi.n	801b56e <atan+0x6e>
 801b554:	a392      	add	r3, pc, #584	@ (adr r3, 801b7a0 <atan+0x2a0>)
 801b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55a:	4620      	mov	r0, r4
 801b55c:	4629      	mov	r1, r5
 801b55e:	f7e4 fecd 	bl	80002fc <__adddf3>
 801b562:	4bac      	ldr	r3, [pc, #688]	@ (801b814 <atan+0x314>)
 801b564:	2200      	movs	r2, #0
 801b566:	f7e5 fb0f 	bl	8000b88 <__aeabi_dcmpgt>
 801b56a:	2800      	cmp	r0, #0
 801b56c:	d1e7      	bne.n	801b53e <atan+0x3e>
 801b56e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801b572:	e029      	b.n	801b5c8 <atan+0xc8>
 801b574:	f000 f95c 	bl	801b830 <fabs>
 801b578:	4ba7      	ldr	r3, [pc, #668]	@ (801b818 <atan+0x318>)
 801b57a:	429e      	cmp	r6, r3
 801b57c:	ec55 4b10 	vmov	r4, r5, d0
 801b580:	f200 80bc 	bhi.w	801b6fc <atan+0x1fc>
 801b584:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801b588:	429e      	cmp	r6, r3
 801b58a:	f200 809e 	bhi.w	801b6ca <atan+0x1ca>
 801b58e:	4622      	mov	r2, r4
 801b590:	462b      	mov	r3, r5
 801b592:	4620      	mov	r0, r4
 801b594:	4629      	mov	r1, r5
 801b596:	f7e4 feb1 	bl	80002fc <__adddf3>
 801b59a:	4b9e      	ldr	r3, [pc, #632]	@ (801b814 <atan+0x314>)
 801b59c:	2200      	movs	r2, #0
 801b59e:	f7e4 feab 	bl	80002f8 <__aeabi_dsub>
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	4606      	mov	r6, r0
 801b5a6:	460f      	mov	r7, r1
 801b5a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	4629      	mov	r1, r5
 801b5b0:	f7e4 fea4 	bl	80002fc <__adddf3>
 801b5b4:	4602      	mov	r2, r0
 801b5b6:	460b      	mov	r3, r1
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	4639      	mov	r1, r7
 801b5bc:	f7e5 f97e 	bl	80008bc <__aeabi_ddiv>
 801b5c0:	f04f 0a00 	mov.w	sl, #0
 801b5c4:	4604      	mov	r4, r0
 801b5c6:	460d      	mov	r5, r1
 801b5c8:	4622      	mov	r2, r4
 801b5ca:	462b      	mov	r3, r5
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	4629      	mov	r1, r5
 801b5d0:	f7e5 f84a 	bl	8000668 <__aeabi_dmul>
 801b5d4:	4602      	mov	r2, r0
 801b5d6:	460b      	mov	r3, r1
 801b5d8:	4680      	mov	r8, r0
 801b5da:	4689      	mov	r9, r1
 801b5dc:	f7e5 f844 	bl	8000668 <__aeabi_dmul>
 801b5e0:	a371      	add	r3, pc, #452	@ (adr r3, 801b7a8 <atan+0x2a8>)
 801b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e6:	4606      	mov	r6, r0
 801b5e8:	460f      	mov	r7, r1
 801b5ea:	f7e5 f83d 	bl	8000668 <__aeabi_dmul>
 801b5ee:	a370      	add	r3, pc, #448	@ (adr r3, 801b7b0 <atan+0x2b0>)
 801b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f4:	f7e4 fe82 	bl	80002fc <__adddf3>
 801b5f8:	4632      	mov	r2, r6
 801b5fa:	463b      	mov	r3, r7
 801b5fc:	f7e5 f834 	bl	8000668 <__aeabi_dmul>
 801b600:	a36d      	add	r3, pc, #436	@ (adr r3, 801b7b8 <atan+0x2b8>)
 801b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b606:	f7e4 fe79 	bl	80002fc <__adddf3>
 801b60a:	4632      	mov	r2, r6
 801b60c:	463b      	mov	r3, r7
 801b60e:	f7e5 f82b 	bl	8000668 <__aeabi_dmul>
 801b612:	a36b      	add	r3, pc, #428	@ (adr r3, 801b7c0 <atan+0x2c0>)
 801b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b618:	f7e4 fe70 	bl	80002fc <__adddf3>
 801b61c:	4632      	mov	r2, r6
 801b61e:	463b      	mov	r3, r7
 801b620:	f7e5 f822 	bl	8000668 <__aeabi_dmul>
 801b624:	a368      	add	r3, pc, #416	@ (adr r3, 801b7c8 <atan+0x2c8>)
 801b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b62a:	f7e4 fe67 	bl	80002fc <__adddf3>
 801b62e:	4632      	mov	r2, r6
 801b630:	463b      	mov	r3, r7
 801b632:	f7e5 f819 	bl	8000668 <__aeabi_dmul>
 801b636:	a366      	add	r3, pc, #408	@ (adr r3, 801b7d0 <atan+0x2d0>)
 801b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b63c:	f7e4 fe5e 	bl	80002fc <__adddf3>
 801b640:	4642      	mov	r2, r8
 801b642:	464b      	mov	r3, r9
 801b644:	f7e5 f810 	bl	8000668 <__aeabi_dmul>
 801b648:	a363      	add	r3, pc, #396	@ (adr r3, 801b7d8 <atan+0x2d8>)
 801b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b64e:	4680      	mov	r8, r0
 801b650:	4689      	mov	r9, r1
 801b652:	4630      	mov	r0, r6
 801b654:	4639      	mov	r1, r7
 801b656:	f7e5 f807 	bl	8000668 <__aeabi_dmul>
 801b65a:	a361      	add	r3, pc, #388	@ (adr r3, 801b7e0 <atan+0x2e0>)
 801b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b660:	f7e4 fe4a 	bl	80002f8 <__aeabi_dsub>
 801b664:	4632      	mov	r2, r6
 801b666:	463b      	mov	r3, r7
 801b668:	f7e4 fffe 	bl	8000668 <__aeabi_dmul>
 801b66c:	a35e      	add	r3, pc, #376	@ (adr r3, 801b7e8 <atan+0x2e8>)
 801b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b672:	f7e4 fe41 	bl	80002f8 <__aeabi_dsub>
 801b676:	4632      	mov	r2, r6
 801b678:	463b      	mov	r3, r7
 801b67a:	f7e4 fff5 	bl	8000668 <__aeabi_dmul>
 801b67e:	a35c      	add	r3, pc, #368	@ (adr r3, 801b7f0 <atan+0x2f0>)
 801b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b684:	f7e4 fe38 	bl	80002f8 <__aeabi_dsub>
 801b688:	4632      	mov	r2, r6
 801b68a:	463b      	mov	r3, r7
 801b68c:	f7e4 ffec 	bl	8000668 <__aeabi_dmul>
 801b690:	a359      	add	r3, pc, #356	@ (adr r3, 801b7f8 <atan+0x2f8>)
 801b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b696:	f7e4 fe2f 	bl	80002f8 <__aeabi_dsub>
 801b69a:	4632      	mov	r2, r6
 801b69c:	463b      	mov	r3, r7
 801b69e:	f7e4 ffe3 	bl	8000668 <__aeabi_dmul>
 801b6a2:	4602      	mov	r2, r0
 801b6a4:	460b      	mov	r3, r1
 801b6a6:	4640      	mov	r0, r8
 801b6a8:	4649      	mov	r1, r9
 801b6aa:	f7e4 fe27 	bl	80002fc <__adddf3>
 801b6ae:	4622      	mov	r2, r4
 801b6b0:	462b      	mov	r3, r5
 801b6b2:	f7e4 ffd9 	bl	8000668 <__aeabi_dmul>
 801b6b6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801b6ba:	4602      	mov	r2, r0
 801b6bc:	460b      	mov	r3, r1
 801b6be:	d148      	bne.n	801b752 <atan+0x252>
 801b6c0:	4620      	mov	r0, r4
 801b6c2:	4629      	mov	r1, r5
 801b6c4:	f7e4 fe18 	bl	80002f8 <__aeabi_dsub>
 801b6c8:	e72f      	b.n	801b52a <atan+0x2a>
 801b6ca:	4b52      	ldr	r3, [pc, #328]	@ (801b814 <atan+0x314>)
 801b6cc:	2200      	movs	r2, #0
 801b6ce:	4620      	mov	r0, r4
 801b6d0:	4629      	mov	r1, r5
 801b6d2:	f7e4 fe11 	bl	80002f8 <__aeabi_dsub>
 801b6d6:	4b4f      	ldr	r3, [pc, #316]	@ (801b814 <atan+0x314>)
 801b6d8:	4606      	mov	r6, r0
 801b6da:	460f      	mov	r7, r1
 801b6dc:	2200      	movs	r2, #0
 801b6de:	4620      	mov	r0, r4
 801b6e0:	4629      	mov	r1, r5
 801b6e2:	f7e4 fe0b 	bl	80002fc <__adddf3>
 801b6e6:	4602      	mov	r2, r0
 801b6e8:	460b      	mov	r3, r1
 801b6ea:	4630      	mov	r0, r6
 801b6ec:	4639      	mov	r1, r7
 801b6ee:	f7e5 f8e5 	bl	80008bc <__aeabi_ddiv>
 801b6f2:	f04f 0a01 	mov.w	sl, #1
 801b6f6:	4604      	mov	r4, r0
 801b6f8:	460d      	mov	r5, r1
 801b6fa:	e765      	b.n	801b5c8 <atan+0xc8>
 801b6fc:	4b47      	ldr	r3, [pc, #284]	@ (801b81c <atan+0x31c>)
 801b6fe:	429e      	cmp	r6, r3
 801b700:	d21c      	bcs.n	801b73c <atan+0x23c>
 801b702:	4b47      	ldr	r3, [pc, #284]	@ (801b820 <atan+0x320>)
 801b704:	2200      	movs	r2, #0
 801b706:	4620      	mov	r0, r4
 801b708:	4629      	mov	r1, r5
 801b70a:	f7e4 fdf5 	bl	80002f8 <__aeabi_dsub>
 801b70e:	4b44      	ldr	r3, [pc, #272]	@ (801b820 <atan+0x320>)
 801b710:	4606      	mov	r6, r0
 801b712:	460f      	mov	r7, r1
 801b714:	2200      	movs	r2, #0
 801b716:	4620      	mov	r0, r4
 801b718:	4629      	mov	r1, r5
 801b71a:	f7e4 ffa5 	bl	8000668 <__aeabi_dmul>
 801b71e:	4b3d      	ldr	r3, [pc, #244]	@ (801b814 <atan+0x314>)
 801b720:	2200      	movs	r2, #0
 801b722:	f7e4 fdeb 	bl	80002fc <__adddf3>
 801b726:	4602      	mov	r2, r0
 801b728:	460b      	mov	r3, r1
 801b72a:	4630      	mov	r0, r6
 801b72c:	4639      	mov	r1, r7
 801b72e:	f7e5 f8c5 	bl	80008bc <__aeabi_ddiv>
 801b732:	f04f 0a02 	mov.w	sl, #2
 801b736:	4604      	mov	r4, r0
 801b738:	460d      	mov	r5, r1
 801b73a:	e745      	b.n	801b5c8 <atan+0xc8>
 801b73c:	4622      	mov	r2, r4
 801b73e:	462b      	mov	r3, r5
 801b740:	4938      	ldr	r1, [pc, #224]	@ (801b824 <atan+0x324>)
 801b742:	2000      	movs	r0, #0
 801b744:	f7e5 f8ba 	bl	80008bc <__aeabi_ddiv>
 801b748:	f04f 0a03 	mov.w	sl, #3
 801b74c:	4604      	mov	r4, r0
 801b74e:	460d      	mov	r5, r1
 801b750:	e73a      	b.n	801b5c8 <atan+0xc8>
 801b752:	4b35      	ldr	r3, [pc, #212]	@ (801b828 <atan+0x328>)
 801b754:	4e35      	ldr	r6, [pc, #212]	@ (801b82c <atan+0x32c>)
 801b756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b75e:	f7e4 fdcb 	bl	80002f8 <__aeabi_dsub>
 801b762:	4622      	mov	r2, r4
 801b764:	462b      	mov	r3, r5
 801b766:	f7e4 fdc7 	bl	80002f8 <__aeabi_dsub>
 801b76a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801b76e:	4602      	mov	r2, r0
 801b770:	460b      	mov	r3, r1
 801b772:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b776:	f7e4 fdbf 	bl	80002f8 <__aeabi_dsub>
 801b77a:	f1bb 0f00 	cmp.w	fp, #0
 801b77e:	4604      	mov	r4, r0
 801b780:	460d      	mov	r5, r1
 801b782:	f6bf aedc 	bge.w	801b53e <atan+0x3e>
 801b786:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b78a:	461d      	mov	r5, r3
 801b78c:	e6d7      	b.n	801b53e <atan+0x3e>
 801b78e:	a51c      	add	r5, pc, #112	@ (adr r5, 801b800 <atan+0x300>)
 801b790:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b794:	e6d3      	b.n	801b53e <atan+0x3e>
 801b796:	bf00      	nop
 801b798:	54442d18 	.word	0x54442d18
 801b79c:	3ff921fb 	.word	0x3ff921fb
 801b7a0:	8800759c 	.word	0x8800759c
 801b7a4:	7e37e43c 	.word	0x7e37e43c
 801b7a8:	e322da11 	.word	0xe322da11
 801b7ac:	3f90ad3a 	.word	0x3f90ad3a
 801b7b0:	24760deb 	.word	0x24760deb
 801b7b4:	3fa97b4b 	.word	0x3fa97b4b
 801b7b8:	a0d03d51 	.word	0xa0d03d51
 801b7bc:	3fb10d66 	.word	0x3fb10d66
 801b7c0:	c54c206e 	.word	0xc54c206e
 801b7c4:	3fb745cd 	.word	0x3fb745cd
 801b7c8:	920083ff 	.word	0x920083ff
 801b7cc:	3fc24924 	.word	0x3fc24924
 801b7d0:	5555550d 	.word	0x5555550d
 801b7d4:	3fd55555 	.word	0x3fd55555
 801b7d8:	2c6a6c2f 	.word	0x2c6a6c2f
 801b7dc:	bfa2b444 	.word	0xbfa2b444
 801b7e0:	52defd9a 	.word	0x52defd9a
 801b7e4:	3fadde2d 	.word	0x3fadde2d
 801b7e8:	af749a6d 	.word	0xaf749a6d
 801b7ec:	3fb3b0f2 	.word	0x3fb3b0f2
 801b7f0:	fe231671 	.word	0xfe231671
 801b7f4:	3fbc71c6 	.word	0x3fbc71c6
 801b7f8:	9998ebc4 	.word	0x9998ebc4
 801b7fc:	3fc99999 	.word	0x3fc99999
 801b800:	54442d18 	.word	0x54442d18
 801b804:	bff921fb 	.word	0xbff921fb
 801b808:	440fffff 	.word	0x440fffff
 801b80c:	7ff00000 	.word	0x7ff00000
 801b810:	3fdbffff 	.word	0x3fdbffff
 801b814:	3ff00000 	.word	0x3ff00000
 801b818:	3ff2ffff 	.word	0x3ff2ffff
 801b81c:	40038000 	.word	0x40038000
 801b820:	3ff80000 	.word	0x3ff80000
 801b824:	bff00000 	.word	0xbff00000
 801b828:	0801e198 	.word	0x0801e198
 801b82c:	0801e1b8 	.word	0x0801e1b8

0801b830 <fabs>:
 801b830:	ec51 0b10 	vmov	r0, r1, d0
 801b834:	4602      	mov	r2, r0
 801b836:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b83a:	ec43 2b10 	vmov	d0, r2, r3
 801b83e:	4770      	bx	lr

0801b840 <finite>:
 801b840:	b082      	sub	sp, #8
 801b842:	ed8d 0b00 	vstr	d0, [sp]
 801b846:	9801      	ldr	r0, [sp, #4]
 801b848:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801b84c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801b850:	0fc0      	lsrs	r0, r0, #31
 801b852:	b002      	add	sp, #8
 801b854:	4770      	bx	lr
	...

0801b858 <__ieee754_sqrt>:
 801b858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b85c:	4a68      	ldr	r2, [pc, #416]	@ (801ba00 <__ieee754_sqrt+0x1a8>)
 801b85e:	ec55 4b10 	vmov	r4, r5, d0
 801b862:	43aa      	bics	r2, r5
 801b864:	462b      	mov	r3, r5
 801b866:	4621      	mov	r1, r4
 801b868:	d110      	bne.n	801b88c <__ieee754_sqrt+0x34>
 801b86a:	4622      	mov	r2, r4
 801b86c:	4620      	mov	r0, r4
 801b86e:	4629      	mov	r1, r5
 801b870:	f7e4 fefa 	bl	8000668 <__aeabi_dmul>
 801b874:	4602      	mov	r2, r0
 801b876:	460b      	mov	r3, r1
 801b878:	4620      	mov	r0, r4
 801b87a:	4629      	mov	r1, r5
 801b87c:	f7e4 fd3e 	bl	80002fc <__adddf3>
 801b880:	4604      	mov	r4, r0
 801b882:	460d      	mov	r5, r1
 801b884:	ec45 4b10 	vmov	d0, r4, r5
 801b888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b88c:	2d00      	cmp	r5, #0
 801b88e:	dc0e      	bgt.n	801b8ae <__ieee754_sqrt+0x56>
 801b890:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801b894:	4322      	orrs	r2, r4
 801b896:	d0f5      	beq.n	801b884 <__ieee754_sqrt+0x2c>
 801b898:	b19d      	cbz	r5, 801b8c2 <__ieee754_sqrt+0x6a>
 801b89a:	4622      	mov	r2, r4
 801b89c:	4620      	mov	r0, r4
 801b89e:	4629      	mov	r1, r5
 801b8a0:	f7e4 fd2a 	bl	80002f8 <__aeabi_dsub>
 801b8a4:	4602      	mov	r2, r0
 801b8a6:	460b      	mov	r3, r1
 801b8a8:	f7e5 f808 	bl	80008bc <__aeabi_ddiv>
 801b8ac:	e7e8      	b.n	801b880 <__ieee754_sqrt+0x28>
 801b8ae:	152a      	asrs	r2, r5, #20
 801b8b0:	d115      	bne.n	801b8de <__ieee754_sqrt+0x86>
 801b8b2:	2000      	movs	r0, #0
 801b8b4:	e009      	b.n	801b8ca <__ieee754_sqrt+0x72>
 801b8b6:	0acb      	lsrs	r3, r1, #11
 801b8b8:	3a15      	subs	r2, #21
 801b8ba:	0549      	lsls	r1, r1, #21
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d0fa      	beq.n	801b8b6 <__ieee754_sqrt+0x5e>
 801b8c0:	e7f7      	b.n	801b8b2 <__ieee754_sqrt+0x5a>
 801b8c2:	462a      	mov	r2, r5
 801b8c4:	e7fa      	b.n	801b8bc <__ieee754_sqrt+0x64>
 801b8c6:	005b      	lsls	r3, r3, #1
 801b8c8:	3001      	adds	r0, #1
 801b8ca:	02dc      	lsls	r4, r3, #11
 801b8cc:	d5fb      	bpl.n	801b8c6 <__ieee754_sqrt+0x6e>
 801b8ce:	1e44      	subs	r4, r0, #1
 801b8d0:	1b12      	subs	r2, r2, r4
 801b8d2:	f1c0 0420 	rsb	r4, r0, #32
 801b8d6:	fa21 f404 	lsr.w	r4, r1, r4
 801b8da:	4323      	orrs	r3, r4
 801b8dc:	4081      	lsls	r1, r0
 801b8de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b8e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801b8e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b8ea:	07d2      	lsls	r2, r2, #31
 801b8ec:	bf5c      	itt	pl
 801b8ee:	005b      	lslpl	r3, r3, #1
 801b8f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801b8f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b8f8:	bf58      	it	pl
 801b8fa:	0049      	lslpl	r1, r1, #1
 801b8fc:	2600      	movs	r6, #0
 801b8fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801b902:	106d      	asrs	r5, r5, #1
 801b904:	0049      	lsls	r1, r1, #1
 801b906:	2016      	movs	r0, #22
 801b908:	4632      	mov	r2, r6
 801b90a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801b90e:	1917      	adds	r7, r2, r4
 801b910:	429f      	cmp	r7, r3
 801b912:	bfde      	ittt	le
 801b914:	193a      	addle	r2, r7, r4
 801b916:	1bdb      	suble	r3, r3, r7
 801b918:	1936      	addle	r6, r6, r4
 801b91a:	0fcf      	lsrs	r7, r1, #31
 801b91c:	3801      	subs	r0, #1
 801b91e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801b922:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b926:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b92a:	d1f0      	bne.n	801b90e <__ieee754_sqrt+0xb6>
 801b92c:	4604      	mov	r4, r0
 801b92e:	2720      	movs	r7, #32
 801b930:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801b934:	429a      	cmp	r2, r3
 801b936:	eb00 0e0c 	add.w	lr, r0, ip
 801b93a:	db02      	blt.n	801b942 <__ieee754_sqrt+0xea>
 801b93c:	d113      	bne.n	801b966 <__ieee754_sqrt+0x10e>
 801b93e:	458e      	cmp	lr, r1
 801b940:	d811      	bhi.n	801b966 <__ieee754_sqrt+0x10e>
 801b942:	f1be 0f00 	cmp.w	lr, #0
 801b946:	eb0e 000c 	add.w	r0, lr, ip
 801b94a:	da42      	bge.n	801b9d2 <__ieee754_sqrt+0x17a>
 801b94c:	2800      	cmp	r0, #0
 801b94e:	db40      	blt.n	801b9d2 <__ieee754_sqrt+0x17a>
 801b950:	f102 0801 	add.w	r8, r2, #1
 801b954:	1a9b      	subs	r3, r3, r2
 801b956:	458e      	cmp	lr, r1
 801b958:	bf88      	it	hi
 801b95a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801b95e:	eba1 010e 	sub.w	r1, r1, lr
 801b962:	4464      	add	r4, ip
 801b964:	4642      	mov	r2, r8
 801b966:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801b96a:	3f01      	subs	r7, #1
 801b96c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801b970:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b974:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801b978:	d1dc      	bne.n	801b934 <__ieee754_sqrt+0xdc>
 801b97a:	4319      	orrs	r1, r3
 801b97c:	d01b      	beq.n	801b9b6 <__ieee754_sqrt+0x15e>
 801b97e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801ba04 <__ieee754_sqrt+0x1ac>
 801b982:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801ba08 <__ieee754_sqrt+0x1b0>
 801b986:	e9da 0100 	ldrd	r0, r1, [sl]
 801b98a:	e9db 2300 	ldrd	r2, r3, [fp]
 801b98e:	f7e4 fcb3 	bl	80002f8 <__aeabi_dsub>
 801b992:	e9da 8900 	ldrd	r8, r9, [sl]
 801b996:	4602      	mov	r2, r0
 801b998:	460b      	mov	r3, r1
 801b99a:	4640      	mov	r0, r8
 801b99c:	4649      	mov	r1, r9
 801b99e:	f7e5 f8df 	bl	8000b60 <__aeabi_dcmple>
 801b9a2:	b140      	cbz	r0, 801b9b6 <__ieee754_sqrt+0x15e>
 801b9a4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801b9a8:	e9da 0100 	ldrd	r0, r1, [sl]
 801b9ac:	e9db 2300 	ldrd	r2, r3, [fp]
 801b9b0:	d111      	bne.n	801b9d6 <__ieee754_sqrt+0x17e>
 801b9b2:	3601      	adds	r6, #1
 801b9b4:	463c      	mov	r4, r7
 801b9b6:	1072      	asrs	r2, r6, #1
 801b9b8:	0863      	lsrs	r3, r4, #1
 801b9ba:	07f1      	lsls	r1, r6, #31
 801b9bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801b9c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801b9c4:	bf48      	it	mi
 801b9c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801b9ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	e756      	b.n	801b880 <__ieee754_sqrt+0x28>
 801b9d2:	4690      	mov	r8, r2
 801b9d4:	e7be      	b.n	801b954 <__ieee754_sqrt+0xfc>
 801b9d6:	f7e4 fc91 	bl	80002fc <__adddf3>
 801b9da:	e9da 8900 	ldrd	r8, r9, [sl]
 801b9de:	4602      	mov	r2, r0
 801b9e0:	460b      	mov	r3, r1
 801b9e2:	4640      	mov	r0, r8
 801b9e4:	4649      	mov	r1, r9
 801b9e6:	f7e5 f8b1 	bl	8000b4c <__aeabi_dcmplt>
 801b9ea:	b120      	cbz	r0, 801b9f6 <__ieee754_sqrt+0x19e>
 801b9ec:	1ca0      	adds	r0, r4, #2
 801b9ee:	bf08      	it	eq
 801b9f0:	3601      	addeq	r6, #1
 801b9f2:	3402      	adds	r4, #2
 801b9f4:	e7df      	b.n	801b9b6 <__ieee754_sqrt+0x15e>
 801b9f6:	1c63      	adds	r3, r4, #1
 801b9f8:	f023 0401 	bic.w	r4, r3, #1
 801b9fc:	e7db      	b.n	801b9b6 <__ieee754_sqrt+0x15e>
 801b9fe:	bf00      	nop
 801ba00:	7ff00000 	.word	0x7ff00000
 801ba04:	20000a20 	.word	0x20000a20
 801ba08:	20000a18 	.word	0x20000a18
 801ba0c:	00000000 	.word	0x00000000

0801ba10 <__ieee754_atan2>:
 801ba10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba14:	ec57 6b11 	vmov	r6, r7, d1
 801ba18:	4273      	negs	r3, r6
 801ba1a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801bb98 <__ieee754_atan2+0x188>
 801ba1e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801ba22:	4333      	orrs	r3, r6
 801ba24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ba28:	4543      	cmp	r3, r8
 801ba2a:	ec51 0b10 	vmov	r0, r1, d0
 801ba2e:	4635      	mov	r5, r6
 801ba30:	d809      	bhi.n	801ba46 <__ieee754_atan2+0x36>
 801ba32:	4244      	negs	r4, r0
 801ba34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ba38:	4304      	orrs	r4, r0
 801ba3a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ba3e:	4544      	cmp	r4, r8
 801ba40:	468e      	mov	lr, r1
 801ba42:	4681      	mov	r9, r0
 801ba44:	d907      	bls.n	801ba56 <__ieee754_atan2+0x46>
 801ba46:	4632      	mov	r2, r6
 801ba48:	463b      	mov	r3, r7
 801ba4a:	f7e4 fc57 	bl	80002fc <__adddf3>
 801ba4e:	ec41 0b10 	vmov	d0, r0, r1
 801ba52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba56:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801ba5a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801ba5e:	4334      	orrs	r4, r6
 801ba60:	d103      	bne.n	801ba6a <__ieee754_atan2+0x5a>
 801ba62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba66:	f7ff bd4b 	b.w	801b500 <atan>
 801ba6a:	17bc      	asrs	r4, r7, #30
 801ba6c:	f004 0402 	and.w	r4, r4, #2
 801ba70:	ea53 0909 	orrs.w	r9, r3, r9
 801ba74:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ba78:	d107      	bne.n	801ba8a <__ieee754_atan2+0x7a>
 801ba7a:	2c02      	cmp	r4, #2
 801ba7c:	d05f      	beq.n	801bb3e <__ieee754_atan2+0x12e>
 801ba7e:	2c03      	cmp	r4, #3
 801ba80:	d1e5      	bne.n	801ba4e <__ieee754_atan2+0x3e>
 801ba82:	a141      	add	r1, pc, #260	@ (adr r1, 801bb88 <__ieee754_atan2+0x178>)
 801ba84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ba88:	e7e1      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801ba8a:	4315      	orrs	r5, r2
 801ba8c:	d106      	bne.n	801ba9c <__ieee754_atan2+0x8c>
 801ba8e:	f1be 0f00 	cmp.w	lr, #0
 801ba92:	da5f      	bge.n	801bb54 <__ieee754_atan2+0x144>
 801ba94:	a13e      	add	r1, pc, #248	@ (adr r1, 801bb90 <__ieee754_atan2+0x180>)
 801ba96:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ba9a:	e7d8      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801ba9c:	4542      	cmp	r2, r8
 801ba9e:	d10f      	bne.n	801bac0 <__ieee754_atan2+0xb0>
 801baa0:	4293      	cmp	r3, r2
 801baa2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801baa6:	d107      	bne.n	801bab8 <__ieee754_atan2+0xa8>
 801baa8:	2c02      	cmp	r4, #2
 801baaa:	d84c      	bhi.n	801bb46 <__ieee754_atan2+0x136>
 801baac:	4b34      	ldr	r3, [pc, #208]	@ (801bb80 <__ieee754_atan2+0x170>)
 801baae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bab6:	e7ca      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801bab8:	2c02      	cmp	r4, #2
 801baba:	d848      	bhi.n	801bb4e <__ieee754_atan2+0x13e>
 801babc:	4b31      	ldr	r3, [pc, #196]	@ (801bb84 <__ieee754_atan2+0x174>)
 801babe:	e7f6      	b.n	801baae <__ieee754_atan2+0x9e>
 801bac0:	4543      	cmp	r3, r8
 801bac2:	d0e4      	beq.n	801ba8e <__ieee754_atan2+0x7e>
 801bac4:	1a9b      	subs	r3, r3, r2
 801bac6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801baca:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bace:	da1e      	bge.n	801bb0e <__ieee754_atan2+0xfe>
 801bad0:	2f00      	cmp	r7, #0
 801bad2:	da01      	bge.n	801bad8 <__ieee754_atan2+0xc8>
 801bad4:	323c      	adds	r2, #60	@ 0x3c
 801bad6:	db1e      	blt.n	801bb16 <__ieee754_atan2+0x106>
 801bad8:	4632      	mov	r2, r6
 801bada:	463b      	mov	r3, r7
 801badc:	f7e4 feee 	bl	80008bc <__aeabi_ddiv>
 801bae0:	ec41 0b10 	vmov	d0, r0, r1
 801bae4:	f7ff fea4 	bl	801b830 <fabs>
 801bae8:	f7ff fd0a 	bl	801b500 <atan>
 801baec:	ec51 0b10 	vmov	r0, r1, d0
 801baf0:	2c01      	cmp	r4, #1
 801baf2:	d013      	beq.n	801bb1c <__ieee754_atan2+0x10c>
 801baf4:	2c02      	cmp	r4, #2
 801baf6:	d015      	beq.n	801bb24 <__ieee754_atan2+0x114>
 801baf8:	2c00      	cmp	r4, #0
 801bafa:	d0a8      	beq.n	801ba4e <__ieee754_atan2+0x3e>
 801bafc:	a318      	add	r3, pc, #96	@ (adr r3, 801bb60 <__ieee754_atan2+0x150>)
 801bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb02:	f7e4 fbf9 	bl	80002f8 <__aeabi_dsub>
 801bb06:	a318      	add	r3, pc, #96	@ (adr r3, 801bb68 <__ieee754_atan2+0x158>)
 801bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb0c:	e014      	b.n	801bb38 <__ieee754_atan2+0x128>
 801bb0e:	a118      	add	r1, pc, #96	@ (adr r1, 801bb70 <__ieee754_atan2+0x160>)
 801bb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb14:	e7ec      	b.n	801baf0 <__ieee754_atan2+0xe0>
 801bb16:	2000      	movs	r0, #0
 801bb18:	2100      	movs	r1, #0
 801bb1a:	e7e9      	b.n	801baf0 <__ieee754_atan2+0xe0>
 801bb1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801bb20:	4619      	mov	r1, r3
 801bb22:	e794      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801bb24:	a30e      	add	r3, pc, #56	@ (adr r3, 801bb60 <__ieee754_atan2+0x150>)
 801bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2a:	f7e4 fbe5 	bl	80002f8 <__aeabi_dsub>
 801bb2e:	4602      	mov	r2, r0
 801bb30:	460b      	mov	r3, r1
 801bb32:	a10d      	add	r1, pc, #52	@ (adr r1, 801bb68 <__ieee754_atan2+0x158>)
 801bb34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb38:	f7e4 fbde 	bl	80002f8 <__aeabi_dsub>
 801bb3c:	e787      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801bb3e:	a10a      	add	r1, pc, #40	@ (adr r1, 801bb68 <__ieee754_atan2+0x158>)
 801bb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb44:	e783      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801bb46:	a10c      	add	r1, pc, #48	@ (adr r1, 801bb78 <__ieee754_atan2+0x168>)
 801bb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb4c:	e77f      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801bb4e:	2000      	movs	r0, #0
 801bb50:	2100      	movs	r1, #0
 801bb52:	e77c      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801bb54:	a106      	add	r1, pc, #24	@ (adr r1, 801bb70 <__ieee754_atan2+0x160>)
 801bb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb5a:	e778      	b.n	801ba4e <__ieee754_atan2+0x3e>
 801bb5c:	f3af 8000 	nop.w
 801bb60:	33145c07 	.word	0x33145c07
 801bb64:	3ca1a626 	.word	0x3ca1a626
 801bb68:	54442d18 	.word	0x54442d18
 801bb6c:	400921fb 	.word	0x400921fb
 801bb70:	54442d18 	.word	0x54442d18
 801bb74:	3ff921fb 	.word	0x3ff921fb
 801bb78:	54442d18 	.word	0x54442d18
 801bb7c:	3fe921fb 	.word	0x3fe921fb
 801bb80:	0801e1f0 	.word	0x0801e1f0
 801bb84:	0801e1d8 	.word	0x0801e1d8
 801bb88:	54442d18 	.word	0x54442d18
 801bb8c:	c00921fb 	.word	0xc00921fb
 801bb90:	54442d18 	.word	0x54442d18
 801bb94:	bff921fb 	.word	0xbff921fb
 801bb98:	7ff00000 	.word	0x7ff00000
 801bb9c:	00000000 	.word	0x00000000

0801bba0 <__ieee754_pow>:
 801bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bba4:	b091      	sub	sp, #68	@ 0x44
 801bba6:	ed8d 1b00 	vstr	d1, [sp]
 801bbaa:	e9dd 1900 	ldrd	r1, r9, [sp]
 801bbae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801bbb2:	ea5a 0001 	orrs.w	r0, sl, r1
 801bbb6:	ec57 6b10 	vmov	r6, r7, d0
 801bbba:	d113      	bne.n	801bbe4 <__ieee754_pow+0x44>
 801bbbc:	19b3      	adds	r3, r6, r6
 801bbbe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801bbc2:	4152      	adcs	r2, r2
 801bbc4:	4298      	cmp	r0, r3
 801bbc6:	4b98      	ldr	r3, [pc, #608]	@ (801be28 <__ieee754_pow+0x288>)
 801bbc8:	4193      	sbcs	r3, r2
 801bbca:	f080 84ea 	bcs.w	801c5a2 <__ieee754_pow+0xa02>
 801bbce:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bbd2:	4630      	mov	r0, r6
 801bbd4:	4639      	mov	r1, r7
 801bbd6:	f7e4 fb91 	bl	80002fc <__adddf3>
 801bbda:	ec41 0b10 	vmov	d0, r0, r1
 801bbde:	b011      	add	sp, #68	@ 0x44
 801bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbe4:	4a91      	ldr	r2, [pc, #580]	@ (801be2c <__ieee754_pow+0x28c>)
 801bbe6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801bbea:	4590      	cmp	r8, r2
 801bbec:	463d      	mov	r5, r7
 801bbee:	4633      	mov	r3, r6
 801bbf0:	d806      	bhi.n	801bc00 <__ieee754_pow+0x60>
 801bbf2:	d101      	bne.n	801bbf8 <__ieee754_pow+0x58>
 801bbf4:	2e00      	cmp	r6, #0
 801bbf6:	d1ea      	bne.n	801bbce <__ieee754_pow+0x2e>
 801bbf8:	4592      	cmp	sl, r2
 801bbfa:	d801      	bhi.n	801bc00 <__ieee754_pow+0x60>
 801bbfc:	d10e      	bne.n	801bc1c <__ieee754_pow+0x7c>
 801bbfe:	b169      	cbz	r1, 801bc1c <__ieee754_pow+0x7c>
 801bc00:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801bc04:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801bc08:	431d      	orrs	r5, r3
 801bc0a:	d1e0      	bne.n	801bbce <__ieee754_pow+0x2e>
 801bc0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bc10:	18db      	adds	r3, r3, r3
 801bc12:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801bc16:	4152      	adcs	r2, r2
 801bc18:	429d      	cmp	r5, r3
 801bc1a:	e7d4      	b.n	801bbc6 <__ieee754_pow+0x26>
 801bc1c:	2d00      	cmp	r5, #0
 801bc1e:	46c3      	mov	fp, r8
 801bc20:	da3a      	bge.n	801bc98 <__ieee754_pow+0xf8>
 801bc22:	4a83      	ldr	r2, [pc, #524]	@ (801be30 <__ieee754_pow+0x290>)
 801bc24:	4592      	cmp	sl, r2
 801bc26:	d84d      	bhi.n	801bcc4 <__ieee754_pow+0x124>
 801bc28:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801bc2c:	4592      	cmp	sl, r2
 801bc2e:	f240 84c7 	bls.w	801c5c0 <__ieee754_pow+0xa20>
 801bc32:	ea4f 522a 	mov.w	r2, sl, asr #20
 801bc36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801bc3a:	2a14      	cmp	r2, #20
 801bc3c:	dd0f      	ble.n	801bc5e <__ieee754_pow+0xbe>
 801bc3e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801bc42:	fa21 f402 	lsr.w	r4, r1, r2
 801bc46:	fa04 f202 	lsl.w	r2, r4, r2
 801bc4a:	428a      	cmp	r2, r1
 801bc4c:	f040 84b8 	bne.w	801c5c0 <__ieee754_pow+0xa20>
 801bc50:	f004 0401 	and.w	r4, r4, #1
 801bc54:	f1c4 0402 	rsb	r4, r4, #2
 801bc58:	2900      	cmp	r1, #0
 801bc5a:	d158      	bne.n	801bd0e <__ieee754_pow+0x16e>
 801bc5c:	e00e      	b.n	801bc7c <__ieee754_pow+0xdc>
 801bc5e:	2900      	cmp	r1, #0
 801bc60:	d154      	bne.n	801bd0c <__ieee754_pow+0x16c>
 801bc62:	f1c2 0214 	rsb	r2, r2, #20
 801bc66:	fa4a f402 	asr.w	r4, sl, r2
 801bc6a:	fa04 f202 	lsl.w	r2, r4, r2
 801bc6e:	4552      	cmp	r2, sl
 801bc70:	f040 84a3 	bne.w	801c5ba <__ieee754_pow+0xa1a>
 801bc74:	f004 0401 	and.w	r4, r4, #1
 801bc78:	f1c4 0402 	rsb	r4, r4, #2
 801bc7c:	4a6d      	ldr	r2, [pc, #436]	@ (801be34 <__ieee754_pow+0x294>)
 801bc7e:	4592      	cmp	sl, r2
 801bc80:	d12e      	bne.n	801bce0 <__ieee754_pow+0x140>
 801bc82:	f1b9 0f00 	cmp.w	r9, #0
 801bc86:	f280 8494 	bge.w	801c5b2 <__ieee754_pow+0xa12>
 801bc8a:	496a      	ldr	r1, [pc, #424]	@ (801be34 <__ieee754_pow+0x294>)
 801bc8c:	4632      	mov	r2, r6
 801bc8e:	463b      	mov	r3, r7
 801bc90:	2000      	movs	r0, #0
 801bc92:	f7e4 fe13 	bl	80008bc <__aeabi_ddiv>
 801bc96:	e7a0      	b.n	801bbda <__ieee754_pow+0x3a>
 801bc98:	2400      	movs	r4, #0
 801bc9a:	bbc1      	cbnz	r1, 801bd0e <__ieee754_pow+0x16e>
 801bc9c:	4a63      	ldr	r2, [pc, #396]	@ (801be2c <__ieee754_pow+0x28c>)
 801bc9e:	4592      	cmp	sl, r2
 801bca0:	d1ec      	bne.n	801bc7c <__ieee754_pow+0xdc>
 801bca2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801bca6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801bcaa:	431a      	orrs	r2, r3
 801bcac:	f000 8479 	beq.w	801c5a2 <__ieee754_pow+0xa02>
 801bcb0:	4b61      	ldr	r3, [pc, #388]	@ (801be38 <__ieee754_pow+0x298>)
 801bcb2:	4598      	cmp	r8, r3
 801bcb4:	d908      	bls.n	801bcc8 <__ieee754_pow+0x128>
 801bcb6:	f1b9 0f00 	cmp.w	r9, #0
 801bcba:	f2c0 8476 	blt.w	801c5aa <__ieee754_pow+0xa0a>
 801bcbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bcc2:	e78a      	b.n	801bbda <__ieee754_pow+0x3a>
 801bcc4:	2402      	movs	r4, #2
 801bcc6:	e7e8      	b.n	801bc9a <__ieee754_pow+0xfa>
 801bcc8:	f1b9 0f00 	cmp.w	r9, #0
 801bccc:	f04f 0000 	mov.w	r0, #0
 801bcd0:	f04f 0100 	mov.w	r1, #0
 801bcd4:	da81      	bge.n	801bbda <__ieee754_pow+0x3a>
 801bcd6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801bcda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801bcde:	e77c      	b.n	801bbda <__ieee754_pow+0x3a>
 801bce0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801bce4:	d106      	bne.n	801bcf4 <__ieee754_pow+0x154>
 801bce6:	4632      	mov	r2, r6
 801bce8:	463b      	mov	r3, r7
 801bcea:	4630      	mov	r0, r6
 801bcec:	4639      	mov	r1, r7
 801bcee:	f7e4 fcbb 	bl	8000668 <__aeabi_dmul>
 801bcf2:	e772      	b.n	801bbda <__ieee754_pow+0x3a>
 801bcf4:	4a51      	ldr	r2, [pc, #324]	@ (801be3c <__ieee754_pow+0x29c>)
 801bcf6:	4591      	cmp	r9, r2
 801bcf8:	d109      	bne.n	801bd0e <__ieee754_pow+0x16e>
 801bcfa:	2d00      	cmp	r5, #0
 801bcfc:	db07      	blt.n	801bd0e <__ieee754_pow+0x16e>
 801bcfe:	ec47 6b10 	vmov	d0, r6, r7
 801bd02:	b011      	add	sp, #68	@ 0x44
 801bd04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd08:	f7ff bda6 	b.w	801b858 <__ieee754_sqrt>
 801bd0c:	2400      	movs	r4, #0
 801bd0e:	ec47 6b10 	vmov	d0, r6, r7
 801bd12:	9302      	str	r3, [sp, #8]
 801bd14:	f7ff fd8c 	bl	801b830 <fabs>
 801bd18:	9b02      	ldr	r3, [sp, #8]
 801bd1a:	ec51 0b10 	vmov	r0, r1, d0
 801bd1e:	bb53      	cbnz	r3, 801bd76 <__ieee754_pow+0x1d6>
 801bd20:	4b44      	ldr	r3, [pc, #272]	@ (801be34 <__ieee754_pow+0x294>)
 801bd22:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801bd26:	429a      	cmp	r2, r3
 801bd28:	d002      	beq.n	801bd30 <__ieee754_pow+0x190>
 801bd2a:	f1b8 0f00 	cmp.w	r8, #0
 801bd2e:	d122      	bne.n	801bd76 <__ieee754_pow+0x1d6>
 801bd30:	f1b9 0f00 	cmp.w	r9, #0
 801bd34:	da05      	bge.n	801bd42 <__ieee754_pow+0x1a2>
 801bd36:	4602      	mov	r2, r0
 801bd38:	460b      	mov	r3, r1
 801bd3a:	2000      	movs	r0, #0
 801bd3c:	493d      	ldr	r1, [pc, #244]	@ (801be34 <__ieee754_pow+0x294>)
 801bd3e:	f7e4 fdbd 	bl	80008bc <__aeabi_ddiv>
 801bd42:	2d00      	cmp	r5, #0
 801bd44:	f6bf af49 	bge.w	801bbda <__ieee754_pow+0x3a>
 801bd48:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801bd4c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801bd50:	ea58 0804 	orrs.w	r8, r8, r4
 801bd54:	d108      	bne.n	801bd68 <__ieee754_pow+0x1c8>
 801bd56:	4602      	mov	r2, r0
 801bd58:	460b      	mov	r3, r1
 801bd5a:	4610      	mov	r0, r2
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	f7e4 facb 	bl	80002f8 <__aeabi_dsub>
 801bd62:	4602      	mov	r2, r0
 801bd64:	460b      	mov	r3, r1
 801bd66:	e794      	b.n	801bc92 <__ieee754_pow+0xf2>
 801bd68:	2c01      	cmp	r4, #1
 801bd6a:	f47f af36 	bne.w	801bbda <__ieee754_pow+0x3a>
 801bd6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801bd72:	4619      	mov	r1, r3
 801bd74:	e731      	b.n	801bbda <__ieee754_pow+0x3a>
 801bd76:	0feb      	lsrs	r3, r5, #31
 801bd78:	3b01      	subs	r3, #1
 801bd7a:	ea53 0204 	orrs.w	r2, r3, r4
 801bd7e:	d102      	bne.n	801bd86 <__ieee754_pow+0x1e6>
 801bd80:	4632      	mov	r2, r6
 801bd82:	463b      	mov	r3, r7
 801bd84:	e7e9      	b.n	801bd5a <__ieee754_pow+0x1ba>
 801bd86:	3c01      	subs	r4, #1
 801bd88:	431c      	orrs	r4, r3
 801bd8a:	d016      	beq.n	801bdba <__ieee754_pow+0x21a>
 801bd8c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801be18 <__ieee754_pow+0x278>
 801bd90:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801bd94:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bd98:	f240 8112 	bls.w	801bfc0 <__ieee754_pow+0x420>
 801bd9c:	4b28      	ldr	r3, [pc, #160]	@ (801be40 <__ieee754_pow+0x2a0>)
 801bd9e:	459a      	cmp	sl, r3
 801bda0:	4b25      	ldr	r3, [pc, #148]	@ (801be38 <__ieee754_pow+0x298>)
 801bda2:	d916      	bls.n	801bdd2 <__ieee754_pow+0x232>
 801bda4:	4598      	cmp	r8, r3
 801bda6:	d80b      	bhi.n	801bdc0 <__ieee754_pow+0x220>
 801bda8:	f1b9 0f00 	cmp.w	r9, #0
 801bdac:	da0b      	bge.n	801bdc6 <__ieee754_pow+0x226>
 801bdae:	2000      	movs	r0, #0
 801bdb0:	b011      	add	sp, #68	@ 0x44
 801bdb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdb6:	f000 bceb 	b.w	801c790 <__math_oflow>
 801bdba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801be20 <__ieee754_pow+0x280>
 801bdbe:	e7e7      	b.n	801bd90 <__ieee754_pow+0x1f0>
 801bdc0:	f1b9 0f00 	cmp.w	r9, #0
 801bdc4:	dcf3      	bgt.n	801bdae <__ieee754_pow+0x20e>
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	b011      	add	sp, #68	@ 0x44
 801bdca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdce:	f000 bcd7 	b.w	801c780 <__math_uflow>
 801bdd2:	4598      	cmp	r8, r3
 801bdd4:	d20c      	bcs.n	801bdf0 <__ieee754_pow+0x250>
 801bdd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdda:	2200      	movs	r2, #0
 801bddc:	2300      	movs	r3, #0
 801bdde:	f7e4 feb5 	bl	8000b4c <__aeabi_dcmplt>
 801bde2:	3800      	subs	r0, #0
 801bde4:	bf18      	it	ne
 801bde6:	2001      	movne	r0, #1
 801bde8:	f1b9 0f00 	cmp.w	r9, #0
 801bdec:	daec      	bge.n	801bdc8 <__ieee754_pow+0x228>
 801bdee:	e7df      	b.n	801bdb0 <__ieee754_pow+0x210>
 801bdf0:	4b10      	ldr	r3, [pc, #64]	@ (801be34 <__ieee754_pow+0x294>)
 801bdf2:	4598      	cmp	r8, r3
 801bdf4:	f04f 0200 	mov.w	r2, #0
 801bdf8:	d924      	bls.n	801be44 <__ieee754_pow+0x2a4>
 801bdfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdfe:	2300      	movs	r3, #0
 801be00:	f7e4 fea4 	bl	8000b4c <__aeabi_dcmplt>
 801be04:	3800      	subs	r0, #0
 801be06:	bf18      	it	ne
 801be08:	2001      	movne	r0, #1
 801be0a:	f1b9 0f00 	cmp.w	r9, #0
 801be0e:	dccf      	bgt.n	801bdb0 <__ieee754_pow+0x210>
 801be10:	e7da      	b.n	801bdc8 <__ieee754_pow+0x228>
 801be12:	bf00      	nop
 801be14:	f3af 8000 	nop.w
 801be18:	00000000 	.word	0x00000000
 801be1c:	3ff00000 	.word	0x3ff00000
 801be20:	00000000 	.word	0x00000000
 801be24:	bff00000 	.word	0xbff00000
 801be28:	fff00000 	.word	0xfff00000
 801be2c:	7ff00000 	.word	0x7ff00000
 801be30:	433fffff 	.word	0x433fffff
 801be34:	3ff00000 	.word	0x3ff00000
 801be38:	3fefffff 	.word	0x3fefffff
 801be3c:	3fe00000 	.word	0x3fe00000
 801be40:	43f00000 	.word	0x43f00000
 801be44:	4b5a      	ldr	r3, [pc, #360]	@ (801bfb0 <__ieee754_pow+0x410>)
 801be46:	f7e4 fa57 	bl	80002f8 <__aeabi_dsub>
 801be4a:	a351      	add	r3, pc, #324	@ (adr r3, 801bf90 <__ieee754_pow+0x3f0>)
 801be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be50:	4604      	mov	r4, r0
 801be52:	460d      	mov	r5, r1
 801be54:	f7e4 fc08 	bl	8000668 <__aeabi_dmul>
 801be58:	a34f      	add	r3, pc, #316	@ (adr r3, 801bf98 <__ieee754_pow+0x3f8>)
 801be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be5e:	4606      	mov	r6, r0
 801be60:	460f      	mov	r7, r1
 801be62:	4620      	mov	r0, r4
 801be64:	4629      	mov	r1, r5
 801be66:	f7e4 fbff 	bl	8000668 <__aeabi_dmul>
 801be6a:	4b52      	ldr	r3, [pc, #328]	@ (801bfb4 <__ieee754_pow+0x414>)
 801be6c:	4682      	mov	sl, r0
 801be6e:	468b      	mov	fp, r1
 801be70:	2200      	movs	r2, #0
 801be72:	4620      	mov	r0, r4
 801be74:	4629      	mov	r1, r5
 801be76:	f7e4 fbf7 	bl	8000668 <__aeabi_dmul>
 801be7a:	4602      	mov	r2, r0
 801be7c:	460b      	mov	r3, r1
 801be7e:	a148      	add	r1, pc, #288	@ (adr r1, 801bfa0 <__ieee754_pow+0x400>)
 801be80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be84:	f7e4 fa38 	bl	80002f8 <__aeabi_dsub>
 801be88:	4622      	mov	r2, r4
 801be8a:	462b      	mov	r3, r5
 801be8c:	f7e4 fbec 	bl	8000668 <__aeabi_dmul>
 801be90:	4602      	mov	r2, r0
 801be92:	460b      	mov	r3, r1
 801be94:	2000      	movs	r0, #0
 801be96:	4948      	ldr	r1, [pc, #288]	@ (801bfb8 <__ieee754_pow+0x418>)
 801be98:	f7e4 fa2e 	bl	80002f8 <__aeabi_dsub>
 801be9c:	4622      	mov	r2, r4
 801be9e:	4680      	mov	r8, r0
 801bea0:	4689      	mov	r9, r1
 801bea2:	462b      	mov	r3, r5
 801bea4:	4620      	mov	r0, r4
 801bea6:	4629      	mov	r1, r5
 801bea8:	f7e4 fbde 	bl	8000668 <__aeabi_dmul>
 801beac:	4602      	mov	r2, r0
 801beae:	460b      	mov	r3, r1
 801beb0:	4640      	mov	r0, r8
 801beb2:	4649      	mov	r1, r9
 801beb4:	f7e4 fbd8 	bl	8000668 <__aeabi_dmul>
 801beb8:	a33b      	add	r3, pc, #236	@ (adr r3, 801bfa8 <__ieee754_pow+0x408>)
 801beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bebe:	f7e4 fbd3 	bl	8000668 <__aeabi_dmul>
 801bec2:	4602      	mov	r2, r0
 801bec4:	460b      	mov	r3, r1
 801bec6:	4650      	mov	r0, sl
 801bec8:	4659      	mov	r1, fp
 801beca:	f7e4 fa15 	bl	80002f8 <__aeabi_dsub>
 801bece:	4602      	mov	r2, r0
 801bed0:	460b      	mov	r3, r1
 801bed2:	4680      	mov	r8, r0
 801bed4:	4689      	mov	r9, r1
 801bed6:	4630      	mov	r0, r6
 801bed8:	4639      	mov	r1, r7
 801beda:	f7e4 fa0f 	bl	80002fc <__adddf3>
 801bede:	2400      	movs	r4, #0
 801bee0:	4632      	mov	r2, r6
 801bee2:	463b      	mov	r3, r7
 801bee4:	4620      	mov	r0, r4
 801bee6:	460d      	mov	r5, r1
 801bee8:	f7e4 fa06 	bl	80002f8 <__aeabi_dsub>
 801beec:	4602      	mov	r2, r0
 801beee:	460b      	mov	r3, r1
 801bef0:	4640      	mov	r0, r8
 801bef2:	4649      	mov	r1, r9
 801bef4:	f7e4 fa00 	bl	80002f8 <__aeabi_dsub>
 801bef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801befc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bf00:	2300      	movs	r3, #0
 801bf02:	9304      	str	r3, [sp, #16]
 801bf04:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bf08:	4606      	mov	r6, r0
 801bf0a:	460f      	mov	r7, r1
 801bf0c:	4652      	mov	r2, sl
 801bf0e:	465b      	mov	r3, fp
 801bf10:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf14:	f7e4 f9f0 	bl	80002f8 <__aeabi_dsub>
 801bf18:	4622      	mov	r2, r4
 801bf1a:	462b      	mov	r3, r5
 801bf1c:	f7e4 fba4 	bl	8000668 <__aeabi_dmul>
 801bf20:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bf24:	4680      	mov	r8, r0
 801bf26:	4689      	mov	r9, r1
 801bf28:	4630      	mov	r0, r6
 801bf2a:	4639      	mov	r1, r7
 801bf2c:	f7e4 fb9c 	bl	8000668 <__aeabi_dmul>
 801bf30:	4602      	mov	r2, r0
 801bf32:	460b      	mov	r3, r1
 801bf34:	4640      	mov	r0, r8
 801bf36:	4649      	mov	r1, r9
 801bf38:	f7e4 f9e0 	bl	80002fc <__adddf3>
 801bf3c:	4652      	mov	r2, sl
 801bf3e:	465b      	mov	r3, fp
 801bf40:	4606      	mov	r6, r0
 801bf42:	460f      	mov	r7, r1
 801bf44:	4620      	mov	r0, r4
 801bf46:	4629      	mov	r1, r5
 801bf48:	f7e4 fb8e 	bl	8000668 <__aeabi_dmul>
 801bf4c:	460b      	mov	r3, r1
 801bf4e:	4602      	mov	r2, r0
 801bf50:	4680      	mov	r8, r0
 801bf52:	4689      	mov	r9, r1
 801bf54:	4630      	mov	r0, r6
 801bf56:	4639      	mov	r1, r7
 801bf58:	f7e4 f9d0 	bl	80002fc <__adddf3>
 801bf5c:	4b17      	ldr	r3, [pc, #92]	@ (801bfbc <__ieee754_pow+0x41c>)
 801bf5e:	4299      	cmp	r1, r3
 801bf60:	4604      	mov	r4, r0
 801bf62:	460d      	mov	r5, r1
 801bf64:	468a      	mov	sl, r1
 801bf66:	468b      	mov	fp, r1
 801bf68:	f340 82ef 	ble.w	801c54a <__ieee754_pow+0x9aa>
 801bf6c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801bf70:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801bf74:	4303      	orrs	r3, r0
 801bf76:	f000 81e8 	beq.w	801c34a <__ieee754_pow+0x7aa>
 801bf7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf7e:	2200      	movs	r2, #0
 801bf80:	2300      	movs	r3, #0
 801bf82:	f7e4 fde3 	bl	8000b4c <__aeabi_dcmplt>
 801bf86:	3800      	subs	r0, #0
 801bf88:	bf18      	it	ne
 801bf8a:	2001      	movne	r0, #1
 801bf8c:	e710      	b.n	801bdb0 <__ieee754_pow+0x210>
 801bf8e:	bf00      	nop
 801bf90:	60000000 	.word	0x60000000
 801bf94:	3ff71547 	.word	0x3ff71547
 801bf98:	f85ddf44 	.word	0xf85ddf44
 801bf9c:	3e54ae0b 	.word	0x3e54ae0b
 801bfa0:	55555555 	.word	0x55555555
 801bfa4:	3fd55555 	.word	0x3fd55555
 801bfa8:	652b82fe 	.word	0x652b82fe
 801bfac:	3ff71547 	.word	0x3ff71547
 801bfb0:	3ff00000 	.word	0x3ff00000
 801bfb4:	3fd00000 	.word	0x3fd00000
 801bfb8:	3fe00000 	.word	0x3fe00000
 801bfbc:	408fffff 	.word	0x408fffff
 801bfc0:	4bd5      	ldr	r3, [pc, #852]	@ (801c318 <__ieee754_pow+0x778>)
 801bfc2:	402b      	ands	r3, r5
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	b92b      	cbnz	r3, 801bfd4 <__ieee754_pow+0x434>
 801bfc8:	4bd4      	ldr	r3, [pc, #848]	@ (801c31c <__ieee754_pow+0x77c>)
 801bfca:	f7e4 fb4d 	bl	8000668 <__aeabi_dmul>
 801bfce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801bfd2:	468b      	mov	fp, r1
 801bfd4:	ea4f 532b 	mov.w	r3, fp, asr #20
 801bfd8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801bfdc:	4413      	add	r3, r2
 801bfde:	930a      	str	r3, [sp, #40]	@ 0x28
 801bfe0:	4bcf      	ldr	r3, [pc, #828]	@ (801c320 <__ieee754_pow+0x780>)
 801bfe2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801bfe6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801bfea:	459b      	cmp	fp, r3
 801bfec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bff0:	dd08      	ble.n	801c004 <__ieee754_pow+0x464>
 801bff2:	4bcc      	ldr	r3, [pc, #816]	@ (801c324 <__ieee754_pow+0x784>)
 801bff4:	459b      	cmp	fp, r3
 801bff6:	f340 81a5 	ble.w	801c344 <__ieee754_pow+0x7a4>
 801bffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bffc:	3301      	adds	r3, #1
 801bffe:	930a      	str	r3, [sp, #40]	@ 0x28
 801c000:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801c004:	f04f 0a00 	mov.w	sl, #0
 801c008:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c00c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c00e:	4bc6      	ldr	r3, [pc, #792]	@ (801c328 <__ieee754_pow+0x788>)
 801c010:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c014:	ed93 7b00 	vldr	d7, [r3]
 801c018:	4629      	mov	r1, r5
 801c01a:	ec53 2b17 	vmov	r2, r3, d7
 801c01e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c022:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c026:	f7e4 f967 	bl	80002f8 <__aeabi_dsub>
 801c02a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c02e:	4606      	mov	r6, r0
 801c030:	460f      	mov	r7, r1
 801c032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c036:	f7e4 f961 	bl	80002fc <__adddf3>
 801c03a:	4602      	mov	r2, r0
 801c03c:	460b      	mov	r3, r1
 801c03e:	2000      	movs	r0, #0
 801c040:	49ba      	ldr	r1, [pc, #744]	@ (801c32c <__ieee754_pow+0x78c>)
 801c042:	f7e4 fc3b 	bl	80008bc <__aeabi_ddiv>
 801c046:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801c04a:	4602      	mov	r2, r0
 801c04c:	460b      	mov	r3, r1
 801c04e:	4630      	mov	r0, r6
 801c050:	4639      	mov	r1, r7
 801c052:	f7e4 fb09 	bl	8000668 <__aeabi_dmul>
 801c056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c05a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801c05e:	106d      	asrs	r5, r5, #1
 801c060:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801c064:	f04f 0b00 	mov.w	fp, #0
 801c068:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801c06c:	4661      	mov	r1, ip
 801c06e:	2200      	movs	r2, #0
 801c070:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801c074:	4658      	mov	r0, fp
 801c076:	46e1      	mov	r9, ip
 801c078:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801c07c:	4614      	mov	r4, r2
 801c07e:	461d      	mov	r5, r3
 801c080:	f7e4 faf2 	bl	8000668 <__aeabi_dmul>
 801c084:	4602      	mov	r2, r0
 801c086:	460b      	mov	r3, r1
 801c088:	4630      	mov	r0, r6
 801c08a:	4639      	mov	r1, r7
 801c08c:	f7e4 f934 	bl	80002f8 <__aeabi_dsub>
 801c090:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c094:	4606      	mov	r6, r0
 801c096:	460f      	mov	r7, r1
 801c098:	4620      	mov	r0, r4
 801c09a:	4629      	mov	r1, r5
 801c09c:	f7e4 f92c 	bl	80002f8 <__aeabi_dsub>
 801c0a0:	4602      	mov	r2, r0
 801c0a2:	460b      	mov	r3, r1
 801c0a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c0a8:	f7e4 f926 	bl	80002f8 <__aeabi_dsub>
 801c0ac:	465a      	mov	r2, fp
 801c0ae:	464b      	mov	r3, r9
 801c0b0:	f7e4 fada 	bl	8000668 <__aeabi_dmul>
 801c0b4:	4602      	mov	r2, r0
 801c0b6:	460b      	mov	r3, r1
 801c0b8:	4630      	mov	r0, r6
 801c0ba:	4639      	mov	r1, r7
 801c0bc:	f7e4 f91c 	bl	80002f8 <__aeabi_dsub>
 801c0c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c0c4:	f7e4 fad0 	bl	8000668 <__aeabi_dmul>
 801c0c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c0cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c0d0:	4610      	mov	r0, r2
 801c0d2:	4619      	mov	r1, r3
 801c0d4:	f7e4 fac8 	bl	8000668 <__aeabi_dmul>
 801c0d8:	a37d      	add	r3, pc, #500	@ (adr r3, 801c2d0 <__ieee754_pow+0x730>)
 801c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0de:	4604      	mov	r4, r0
 801c0e0:	460d      	mov	r5, r1
 801c0e2:	f7e4 fac1 	bl	8000668 <__aeabi_dmul>
 801c0e6:	a37c      	add	r3, pc, #496	@ (adr r3, 801c2d8 <__ieee754_pow+0x738>)
 801c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ec:	f7e4 f906 	bl	80002fc <__adddf3>
 801c0f0:	4622      	mov	r2, r4
 801c0f2:	462b      	mov	r3, r5
 801c0f4:	f7e4 fab8 	bl	8000668 <__aeabi_dmul>
 801c0f8:	a379      	add	r3, pc, #484	@ (adr r3, 801c2e0 <__ieee754_pow+0x740>)
 801c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0fe:	f7e4 f8fd 	bl	80002fc <__adddf3>
 801c102:	4622      	mov	r2, r4
 801c104:	462b      	mov	r3, r5
 801c106:	f7e4 faaf 	bl	8000668 <__aeabi_dmul>
 801c10a:	a377      	add	r3, pc, #476	@ (adr r3, 801c2e8 <__ieee754_pow+0x748>)
 801c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c110:	f7e4 f8f4 	bl	80002fc <__adddf3>
 801c114:	4622      	mov	r2, r4
 801c116:	462b      	mov	r3, r5
 801c118:	f7e4 faa6 	bl	8000668 <__aeabi_dmul>
 801c11c:	a374      	add	r3, pc, #464	@ (adr r3, 801c2f0 <__ieee754_pow+0x750>)
 801c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c122:	f7e4 f8eb 	bl	80002fc <__adddf3>
 801c126:	4622      	mov	r2, r4
 801c128:	462b      	mov	r3, r5
 801c12a:	f7e4 fa9d 	bl	8000668 <__aeabi_dmul>
 801c12e:	a372      	add	r3, pc, #456	@ (adr r3, 801c2f8 <__ieee754_pow+0x758>)
 801c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c134:	f7e4 f8e2 	bl	80002fc <__adddf3>
 801c138:	4622      	mov	r2, r4
 801c13a:	4606      	mov	r6, r0
 801c13c:	460f      	mov	r7, r1
 801c13e:	462b      	mov	r3, r5
 801c140:	4620      	mov	r0, r4
 801c142:	4629      	mov	r1, r5
 801c144:	f7e4 fa90 	bl	8000668 <__aeabi_dmul>
 801c148:	4602      	mov	r2, r0
 801c14a:	460b      	mov	r3, r1
 801c14c:	4630      	mov	r0, r6
 801c14e:	4639      	mov	r1, r7
 801c150:	f7e4 fa8a 	bl	8000668 <__aeabi_dmul>
 801c154:	465a      	mov	r2, fp
 801c156:	4604      	mov	r4, r0
 801c158:	460d      	mov	r5, r1
 801c15a:	464b      	mov	r3, r9
 801c15c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c160:	f7e4 f8cc 	bl	80002fc <__adddf3>
 801c164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c168:	f7e4 fa7e 	bl	8000668 <__aeabi_dmul>
 801c16c:	4622      	mov	r2, r4
 801c16e:	462b      	mov	r3, r5
 801c170:	f7e4 f8c4 	bl	80002fc <__adddf3>
 801c174:	465a      	mov	r2, fp
 801c176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c17a:	464b      	mov	r3, r9
 801c17c:	4658      	mov	r0, fp
 801c17e:	4649      	mov	r1, r9
 801c180:	f7e4 fa72 	bl	8000668 <__aeabi_dmul>
 801c184:	4b6a      	ldr	r3, [pc, #424]	@ (801c330 <__ieee754_pow+0x790>)
 801c186:	2200      	movs	r2, #0
 801c188:	4606      	mov	r6, r0
 801c18a:	460f      	mov	r7, r1
 801c18c:	f7e4 f8b6 	bl	80002fc <__adddf3>
 801c190:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c194:	f7e4 f8b2 	bl	80002fc <__adddf3>
 801c198:	46d8      	mov	r8, fp
 801c19a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801c19e:	460d      	mov	r5, r1
 801c1a0:	465a      	mov	r2, fp
 801c1a2:	460b      	mov	r3, r1
 801c1a4:	4640      	mov	r0, r8
 801c1a6:	4649      	mov	r1, r9
 801c1a8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801c1ac:	f7e4 fa5c 	bl	8000668 <__aeabi_dmul>
 801c1b0:	465c      	mov	r4, fp
 801c1b2:	4680      	mov	r8, r0
 801c1b4:	4689      	mov	r9, r1
 801c1b6:	4b5e      	ldr	r3, [pc, #376]	@ (801c330 <__ieee754_pow+0x790>)
 801c1b8:	2200      	movs	r2, #0
 801c1ba:	4620      	mov	r0, r4
 801c1bc:	4629      	mov	r1, r5
 801c1be:	f7e4 f89b 	bl	80002f8 <__aeabi_dsub>
 801c1c2:	4632      	mov	r2, r6
 801c1c4:	463b      	mov	r3, r7
 801c1c6:	f7e4 f897 	bl	80002f8 <__aeabi_dsub>
 801c1ca:	4602      	mov	r2, r0
 801c1cc:	460b      	mov	r3, r1
 801c1ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c1d2:	f7e4 f891 	bl	80002f8 <__aeabi_dsub>
 801c1d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1da:	f7e4 fa45 	bl	8000668 <__aeabi_dmul>
 801c1de:	4622      	mov	r2, r4
 801c1e0:	4606      	mov	r6, r0
 801c1e2:	460f      	mov	r7, r1
 801c1e4:	462b      	mov	r3, r5
 801c1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c1ea:	f7e4 fa3d 	bl	8000668 <__aeabi_dmul>
 801c1ee:	4602      	mov	r2, r0
 801c1f0:	460b      	mov	r3, r1
 801c1f2:	4630      	mov	r0, r6
 801c1f4:	4639      	mov	r1, r7
 801c1f6:	f7e4 f881 	bl	80002fc <__adddf3>
 801c1fa:	4606      	mov	r6, r0
 801c1fc:	460f      	mov	r7, r1
 801c1fe:	4602      	mov	r2, r0
 801c200:	460b      	mov	r3, r1
 801c202:	4640      	mov	r0, r8
 801c204:	4649      	mov	r1, r9
 801c206:	f7e4 f879 	bl	80002fc <__adddf3>
 801c20a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801c20e:	a33c      	add	r3, pc, #240	@ (adr r3, 801c300 <__ieee754_pow+0x760>)
 801c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c214:	4658      	mov	r0, fp
 801c216:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801c21a:	460d      	mov	r5, r1
 801c21c:	f7e4 fa24 	bl	8000668 <__aeabi_dmul>
 801c220:	465c      	mov	r4, fp
 801c222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c226:	4642      	mov	r2, r8
 801c228:	464b      	mov	r3, r9
 801c22a:	4620      	mov	r0, r4
 801c22c:	4629      	mov	r1, r5
 801c22e:	f7e4 f863 	bl	80002f8 <__aeabi_dsub>
 801c232:	4602      	mov	r2, r0
 801c234:	460b      	mov	r3, r1
 801c236:	4630      	mov	r0, r6
 801c238:	4639      	mov	r1, r7
 801c23a:	f7e4 f85d 	bl	80002f8 <__aeabi_dsub>
 801c23e:	a332      	add	r3, pc, #200	@ (adr r3, 801c308 <__ieee754_pow+0x768>)
 801c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c244:	f7e4 fa10 	bl	8000668 <__aeabi_dmul>
 801c248:	a331      	add	r3, pc, #196	@ (adr r3, 801c310 <__ieee754_pow+0x770>)
 801c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c24e:	4606      	mov	r6, r0
 801c250:	460f      	mov	r7, r1
 801c252:	4620      	mov	r0, r4
 801c254:	4629      	mov	r1, r5
 801c256:	f7e4 fa07 	bl	8000668 <__aeabi_dmul>
 801c25a:	4602      	mov	r2, r0
 801c25c:	460b      	mov	r3, r1
 801c25e:	4630      	mov	r0, r6
 801c260:	4639      	mov	r1, r7
 801c262:	f7e4 f84b 	bl	80002fc <__adddf3>
 801c266:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c268:	4b32      	ldr	r3, [pc, #200]	@ (801c334 <__ieee754_pow+0x794>)
 801c26a:	4413      	add	r3, r2
 801c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c270:	f7e4 f844 	bl	80002fc <__adddf3>
 801c274:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c278:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c27a:	f7e4 f98b 	bl	8000594 <__aeabi_i2d>
 801c27e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c280:	4b2d      	ldr	r3, [pc, #180]	@ (801c338 <__ieee754_pow+0x798>)
 801c282:	4413      	add	r3, r2
 801c284:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c288:	4606      	mov	r6, r0
 801c28a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c28e:	460f      	mov	r7, r1
 801c290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c294:	f7e4 f832 	bl	80002fc <__adddf3>
 801c298:	4642      	mov	r2, r8
 801c29a:	464b      	mov	r3, r9
 801c29c:	f7e4 f82e 	bl	80002fc <__adddf3>
 801c2a0:	4632      	mov	r2, r6
 801c2a2:	463b      	mov	r3, r7
 801c2a4:	f7e4 f82a 	bl	80002fc <__adddf3>
 801c2a8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801c2ac:	4632      	mov	r2, r6
 801c2ae:	463b      	mov	r3, r7
 801c2b0:	4658      	mov	r0, fp
 801c2b2:	460d      	mov	r5, r1
 801c2b4:	f7e4 f820 	bl	80002f8 <__aeabi_dsub>
 801c2b8:	4642      	mov	r2, r8
 801c2ba:	464b      	mov	r3, r9
 801c2bc:	f7e4 f81c 	bl	80002f8 <__aeabi_dsub>
 801c2c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c2c4:	f7e4 f818 	bl	80002f8 <__aeabi_dsub>
 801c2c8:	465c      	mov	r4, fp
 801c2ca:	4602      	mov	r2, r0
 801c2cc:	e036      	b.n	801c33c <__ieee754_pow+0x79c>
 801c2ce:	bf00      	nop
 801c2d0:	4a454eef 	.word	0x4a454eef
 801c2d4:	3fca7e28 	.word	0x3fca7e28
 801c2d8:	93c9db65 	.word	0x93c9db65
 801c2dc:	3fcd864a 	.word	0x3fcd864a
 801c2e0:	a91d4101 	.word	0xa91d4101
 801c2e4:	3fd17460 	.word	0x3fd17460
 801c2e8:	518f264d 	.word	0x518f264d
 801c2ec:	3fd55555 	.word	0x3fd55555
 801c2f0:	db6fabff 	.word	0xdb6fabff
 801c2f4:	3fdb6db6 	.word	0x3fdb6db6
 801c2f8:	33333303 	.word	0x33333303
 801c2fc:	3fe33333 	.word	0x3fe33333
 801c300:	e0000000 	.word	0xe0000000
 801c304:	3feec709 	.word	0x3feec709
 801c308:	dc3a03fd 	.word	0xdc3a03fd
 801c30c:	3feec709 	.word	0x3feec709
 801c310:	145b01f5 	.word	0x145b01f5
 801c314:	be3e2fe0 	.word	0xbe3e2fe0
 801c318:	7ff00000 	.word	0x7ff00000
 801c31c:	43400000 	.word	0x43400000
 801c320:	0003988e 	.word	0x0003988e
 801c324:	000bb679 	.word	0x000bb679
 801c328:	0801e228 	.word	0x0801e228
 801c32c:	3ff00000 	.word	0x3ff00000
 801c330:	40080000 	.word	0x40080000
 801c334:	0801e208 	.word	0x0801e208
 801c338:	0801e218 	.word	0x0801e218
 801c33c:	460b      	mov	r3, r1
 801c33e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c342:	e5d7      	b.n	801bef4 <__ieee754_pow+0x354>
 801c344:	f04f 0a01 	mov.w	sl, #1
 801c348:	e65e      	b.n	801c008 <__ieee754_pow+0x468>
 801c34a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801c61c <__ieee754_pow+0xa7c>)
 801c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c350:	4630      	mov	r0, r6
 801c352:	4639      	mov	r1, r7
 801c354:	f7e3 ffd2 	bl	80002fc <__adddf3>
 801c358:	4642      	mov	r2, r8
 801c35a:	e9cd 0100 	strd	r0, r1, [sp]
 801c35e:	464b      	mov	r3, r9
 801c360:	4620      	mov	r0, r4
 801c362:	4629      	mov	r1, r5
 801c364:	f7e3 ffc8 	bl	80002f8 <__aeabi_dsub>
 801c368:	4602      	mov	r2, r0
 801c36a:	460b      	mov	r3, r1
 801c36c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c370:	f7e4 fc0a 	bl	8000b88 <__aeabi_dcmpgt>
 801c374:	2800      	cmp	r0, #0
 801c376:	f47f ae00 	bne.w	801bf7a <__ieee754_pow+0x3da>
 801c37a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801c37e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801c382:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801c386:	fa43 fa0a 	asr.w	sl, r3, sl
 801c38a:	44da      	add	sl, fp
 801c38c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801c390:	489d      	ldr	r0, [pc, #628]	@ (801c608 <__ieee754_pow+0xa68>)
 801c392:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801c396:	4108      	asrs	r0, r1
 801c398:	ea00 030a 	and.w	r3, r0, sl
 801c39c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801c3a0:	f1c1 0114 	rsb	r1, r1, #20
 801c3a4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801c3a8:	fa4a fa01 	asr.w	sl, sl, r1
 801c3ac:	f1bb 0f00 	cmp.w	fp, #0
 801c3b0:	4640      	mov	r0, r8
 801c3b2:	4649      	mov	r1, r9
 801c3b4:	f04f 0200 	mov.w	r2, #0
 801c3b8:	bfb8      	it	lt
 801c3ba:	f1ca 0a00 	rsblt	sl, sl, #0
 801c3be:	f7e3 ff9b 	bl	80002f8 <__aeabi_dsub>
 801c3c2:	4680      	mov	r8, r0
 801c3c4:	4689      	mov	r9, r1
 801c3c6:	4632      	mov	r2, r6
 801c3c8:	463b      	mov	r3, r7
 801c3ca:	4640      	mov	r0, r8
 801c3cc:	4649      	mov	r1, r9
 801c3ce:	f7e3 ff95 	bl	80002fc <__adddf3>
 801c3d2:	2400      	movs	r4, #0
 801c3d4:	a37c      	add	r3, pc, #496	@ (adr r3, 801c5c8 <__ieee754_pow+0xa28>)
 801c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3da:	4620      	mov	r0, r4
 801c3dc:	460d      	mov	r5, r1
 801c3de:	f7e4 f943 	bl	8000668 <__aeabi_dmul>
 801c3e2:	4642      	mov	r2, r8
 801c3e4:	e9cd 0100 	strd	r0, r1, [sp]
 801c3e8:	464b      	mov	r3, r9
 801c3ea:	4620      	mov	r0, r4
 801c3ec:	4629      	mov	r1, r5
 801c3ee:	f7e3 ff83 	bl	80002f8 <__aeabi_dsub>
 801c3f2:	4602      	mov	r2, r0
 801c3f4:	460b      	mov	r3, r1
 801c3f6:	4630      	mov	r0, r6
 801c3f8:	4639      	mov	r1, r7
 801c3fa:	f7e3 ff7d 	bl	80002f8 <__aeabi_dsub>
 801c3fe:	a374      	add	r3, pc, #464	@ (adr r3, 801c5d0 <__ieee754_pow+0xa30>)
 801c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c404:	f7e4 f930 	bl	8000668 <__aeabi_dmul>
 801c408:	a373      	add	r3, pc, #460	@ (adr r3, 801c5d8 <__ieee754_pow+0xa38>)
 801c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c40e:	4680      	mov	r8, r0
 801c410:	4689      	mov	r9, r1
 801c412:	4620      	mov	r0, r4
 801c414:	4629      	mov	r1, r5
 801c416:	f7e4 f927 	bl	8000668 <__aeabi_dmul>
 801c41a:	4602      	mov	r2, r0
 801c41c:	460b      	mov	r3, r1
 801c41e:	4640      	mov	r0, r8
 801c420:	4649      	mov	r1, r9
 801c422:	f7e3 ff6b 	bl	80002fc <__adddf3>
 801c426:	4604      	mov	r4, r0
 801c428:	460d      	mov	r5, r1
 801c42a:	4602      	mov	r2, r0
 801c42c:	460b      	mov	r3, r1
 801c42e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c432:	f7e3 ff63 	bl	80002fc <__adddf3>
 801c436:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c43a:	4680      	mov	r8, r0
 801c43c:	4689      	mov	r9, r1
 801c43e:	f7e3 ff5b 	bl	80002f8 <__aeabi_dsub>
 801c442:	4602      	mov	r2, r0
 801c444:	460b      	mov	r3, r1
 801c446:	4620      	mov	r0, r4
 801c448:	4629      	mov	r1, r5
 801c44a:	f7e3 ff55 	bl	80002f8 <__aeabi_dsub>
 801c44e:	4642      	mov	r2, r8
 801c450:	4606      	mov	r6, r0
 801c452:	460f      	mov	r7, r1
 801c454:	464b      	mov	r3, r9
 801c456:	4640      	mov	r0, r8
 801c458:	4649      	mov	r1, r9
 801c45a:	f7e4 f905 	bl	8000668 <__aeabi_dmul>
 801c45e:	a360      	add	r3, pc, #384	@ (adr r3, 801c5e0 <__ieee754_pow+0xa40>)
 801c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c464:	4604      	mov	r4, r0
 801c466:	460d      	mov	r5, r1
 801c468:	f7e4 f8fe 	bl	8000668 <__aeabi_dmul>
 801c46c:	a35e      	add	r3, pc, #376	@ (adr r3, 801c5e8 <__ieee754_pow+0xa48>)
 801c46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c472:	f7e3 ff41 	bl	80002f8 <__aeabi_dsub>
 801c476:	4622      	mov	r2, r4
 801c478:	462b      	mov	r3, r5
 801c47a:	f7e4 f8f5 	bl	8000668 <__aeabi_dmul>
 801c47e:	a35c      	add	r3, pc, #368	@ (adr r3, 801c5f0 <__ieee754_pow+0xa50>)
 801c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c484:	f7e3 ff3a 	bl	80002fc <__adddf3>
 801c488:	4622      	mov	r2, r4
 801c48a:	462b      	mov	r3, r5
 801c48c:	f7e4 f8ec 	bl	8000668 <__aeabi_dmul>
 801c490:	a359      	add	r3, pc, #356	@ (adr r3, 801c5f8 <__ieee754_pow+0xa58>)
 801c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c496:	f7e3 ff2f 	bl	80002f8 <__aeabi_dsub>
 801c49a:	4622      	mov	r2, r4
 801c49c:	462b      	mov	r3, r5
 801c49e:	f7e4 f8e3 	bl	8000668 <__aeabi_dmul>
 801c4a2:	a357      	add	r3, pc, #348	@ (adr r3, 801c600 <__ieee754_pow+0xa60>)
 801c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4a8:	f7e3 ff28 	bl	80002fc <__adddf3>
 801c4ac:	4622      	mov	r2, r4
 801c4ae:	462b      	mov	r3, r5
 801c4b0:	f7e4 f8da 	bl	8000668 <__aeabi_dmul>
 801c4b4:	4602      	mov	r2, r0
 801c4b6:	460b      	mov	r3, r1
 801c4b8:	4640      	mov	r0, r8
 801c4ba:	4649      	mov	r1, r9
 801c4bc:	f7e3 ff1c 	bl	80002f8 <__aeabi_dsub>
 801c4c0:	4604      	mov	r4, r0
 801c4c2:	460d      	mov	r5, r1
 801c4c4:	4602      	mov	r2, r0
 801c4c6:	460b      	mov	r3, r1
 801c4c8:	4640      	mov	r0, r8
 801c4ca:	4649      	mov	r1, r9
 801c4cc:	f7e4 f8cc 	bl	8000668 <__aeabi_dmul>
 801c4d0:	2200      	movs	r2, #0
 801c4d2:	e9cd 0100 	strd	r0, r1, [sp]
 801c4d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c4da:	4620      	mov	r0, r4
 801c4dc:	4629      	mov	r1, r5
 801c4de:	f7e3 ff0b 	bl	80002f8 <__aeabi_dsub>
 801c4e2:	4602      	mov	r2, r0
 801c4e4:	460b      	mov	r3, r1
 801c4e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c4ea:	f7e4 f9e7 	bl	80008bc <__aeabi_ddiv>
 801c4ee:	4632      	mov	r2, r6
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	460d      	mov	r5, r1
 801c4f4:	463b      	mov	r3, r7
 801c4f6:	4640      	mov	r0, r8
 801c4f8:	4649      	mov	r1, r9
 801c4fa:	f7e4 f8b5 	bl	8000668 <__aeabi_dmul>
 801c4fe:	4632      	mov	r2, r6
 801c500:	463b      	mov	r3, r7
 801c502:	f7e3 fefb 	bl	80002fc <__adddf3>
 801c506:	4602      	mov	r2, r0
 801c508:	460b      	mov	r3, r1
 801c50a:	4620      	mov	r0, r4
 801c50c:	4629      	mov	r1, r5
 801c50e:	f7e3 fef3 	bl	80002f8 <__aeabi_dsub>
 801c512:	4642      	mov	r2, r8
 801c514:	464b      	mov	r3, r9
 801c516:	f7e3 feef 	bl	80002f8 <__aeabi_dsub>
 801c51a:	460b      	mov	r3, r1
 801c51c:	4602      	mov	r2, r0
 801c51e:	493b      	ldr	r1, [pc, #236]	@ (801c60c <__ieee754_pow+0xa6c>)
 801c520:	2000      	movs	r0, #0
 801c522:	f7e3 fee9 	bl	80002f8 <__aeabi_dsub>
 801c526:	ec41 0b10 	vmov	d0, r0, r1
 801c52a:	ee10 3a90 	vmov	r3, s1
 801c52e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c536:	da30      	bge.n	801c59a <__ieee754_pow+0x9fa>
 801c538:	4650      	mov	r0, sl
 801c53a:	f000 f875 	bl	801c628 <scalbn>
 801c53e:	ec51 0b10 	vmov	r0, r1, d0
 801c542:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c546:	f7ff bbd2 	b.w	801bcee <__ieee754_pow+0x14e>
 801c54a:	4c31      	ldr	r4, [pc, #196]	@ (801c610 <__ieee754_pow+0xa70>)
 801c54c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c550:	42a3      	cmp	r3, r4
 801c552:	d91a      	bls.n	801c58a <__ieee754_pow+0x9ea>
 801c554:	4b2f      	ldr	r3, [pc, #188]	@ (801c614 <__ieee754_pow+0xa74>)
 801c556:	440b      	add	r3, r1
 801c558:	4303      	orrs	r3, r0
 801c55a:	d009      	beq.n	801c570 <__ieee754_pow+0x9d0>
 801c55c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c560:	2200      	movs	r2, #0
 801c562:	2300      	movs	r3, #0
 801c564:	f7e4 faf2 	bl	8000b4c <__aeabi_dcmplt>
 801c568:	3800      	subs	r0, #0
 801c56a:	bf18      	it	ne
 801c56c:	2001      	movne	r0, #1
 801c56e:	e42b      	b.n	801bdc8 <__ieee754_pow+0x228>
 801c570:	4642      	mov	r2, r8
 801c572:	464b      	mov	r3, r9
 801c574:	f7e3 fec0 	bl	80002f8 <__aeabi_dsub>
 801c578:	4632      	mov	r2, r6
 801c57a:	463b      	mov	r3, r7
 801c57c:	f7e4 fafa 	bl	8000b74 <__aeabi_dcmpge>
 801c580:	2800      	cmp	r0, #0
 801c582:	d1eb      	bne.n	801c55c <__ieee754_pow+0x9bc>
 801c584:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801c624 <__ieee754_pow+0xa84>
 801c588:	e6f7      	b.n	801c37a <__ieee754_pow+0x7da>
 801c58a:	469a      	mov	sl, r3
 801c58c:	4b22      	ldr	r3, [pc, #136]	@ (801c618 <__ieee754_pow+0xa78>)
 801c58e:	459a      	cmp	sl, r3
 801c590:	f63f aef3 	bhi.w	801c37a <__ieee754_pow+0x7da>
 801c594:	f8dd a010 	ldr.w	sl, [sp, #16]
 801c598:	e715      	b.n	801c3c6 <__ieee754_pow+0x826>
 801c59a:	ec51 0b10 	vmov	r0, r1, d0
 801c59e:	4619      	mov	r1, r3
 801c5a0:	e7cf      	b.n	801c542 <__ieee754_pow+0x9a2>
 801c5a2:	491a      	ldr	r1, [pc, #104]	@ (801c60c <__ieee754_pow+0xa6c>)
 801c5a4:	2000      	movs	r0, #0
 801c5a6:	f7ff bb18 	b.w	801bbda <__ieee754_pow+0x3a>
 801c5aa:	2000      	movs	r0, #0
 801c5ac:	2100      	movs	r1, #0
 801c5ae:	f7ff bb14 	b.w	801bbda <__ieee754_pow+0x3a>
 801c5b2:	4630      	mov	r0, r6
 801c5b4:	4639      	mov	r1, r7
 801c5b6:	f7ff bb10 	b.w	801bbda <__ieee754_pow+0x3a>
 801c5ba:	460c      	mov	r4, r1
 801c5bc:	f7ff bb5e 	b.w	801bc7c <__ieee754_pow+0xdc>
 801c5c0:	2400      	movs	r4, #0
 801c5c2:	f7ff bb49 	b.w	801bc58 <__ieee754_pow+0xb8>
 801c5c6:	bf00      	nop
 801c5c8:	00000000 	.word	0x00000000
 801c5cc:	3fe62e43 	.word	0x3fe62e43
 801c5d0:	fefa39ef 	.word	0xfefa39ef
 801c5d4:	3fe62e42 	.word	0x3fe62e42
 801c5d8:	0ca86c39 	.word	0x0ca86c39
 801c5dc:	be205c61 	.word	0xbe205c61
 801c5e0:	72bea4d0 	.word	0x72bea4d0
 801c5e4:	3e663769 	.word	0x3e663769
 801c5e8:	c5d26bf1 	.word	0xc5d26bf1
 801c5ec:	3ebbbd41 	.word	0x3ebbbd41
 801c5f0:	af25de2c 	.word	0xaf25de2c
 801c5f4:	3f11566a 	.word	0x3f11566a
 801c5f8:	16bebd93 	.word	0x16bebd93
 801c5fc:	3f66c16c 	.word	0x3f66c16c
 801c600:	5555553e 	.word	0x5555553e
 801c604:	3fc55555 	.word	0x3fc55555
 801c608:	fff00000 	.word	0xfff00000
 801c60c:	3ff00000 	.word	0x3ff00000
 801c610:	4090cbff 	.word	0x4090cbff
 801c614:	3f6f3400 	.word	0x3f6f3400
 801c618:	3fe00000 	.word	0x3fe00000
 801c61c:	652b82fe 	.word	0x652b82fe
 801c620:	3c971547 	.word	0x3c971547
 801c624:	4090cc00 	.word	0x4090cc00

0801c628 <scalbn>:
 801c628:	b570      	push	{r4, r5, r6, lr}
 801c62a:	ec55 4b10 	vmov	r4, r5, d0
 801c62e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801c632:	4606      	mov	r6, r0
 801c634:	462b      	mov	r3, r5
 801c636:	b991      	cbnz	r1, 801c65e <scalbn+0x36>
 801c638:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801c63c:	4323      	orrs	r3, r4
 801c63e:	d03d      	beq.n	801c6bc <scalbn+0x94>
 801c640:	4b35      	ldr	r3, [pc, #212]	@ (801c718 <scalbn+0xf0>)
 801c642:	4620      	mov	r0, r4
 801c644:	4629      	mov	r1, r5
 801c646:	2200      	movs	r2, #0
 801c648:	f7e4 f80e 	bl	8000668 <__aeabi_dmul>
 801c64c:	4b33      	ldr	r3, [pc, #204]	@ (801c71c <scalbn+0xf4>)
 801c64e:	429e      	cmp	r6, r3
 801c650:	4604      	mov	r4, r0
 801c652:	460d      	mov	r5, r1
 801c654:	da0f      	bge.n	801c676 <scalbn+0x4e>
 801c656:	a328      	add	r3, pc, #160	@ (adr r3, 801c6f8 <scalbn+0xd0>)
 801c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c65c:	e01e      	b.n	801c69c <scalbn+0x74>
 801c65e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c662:	4291      	cmp	r1, r2
 801c664:	d10b      	bne.n	801c67e <scalbn+0x56>
 801c666:	4622      	mov	r2, r4
 801c668:	4620      	mov	r0, r4
 801c66a:	4629      	mov	r1, r5
 801c66c:	f7e3 fe46 	bl	80002fc <__adddf3>
 801c670:	4604      	mov	r4, r0
 801c672:	460d      	mov	r5, r1
 801c674:	e022      	b.n	801c6bc <scalbn+0x94>
 801c676:	460b      	mov	r3, r1
 801c678:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c67c:	3936      	subs	r1, #54	@ 0x36
 801c67e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801c682:	4296      	cmp	r6, r2
 801c684:	dd0d      	ble.n	801c6a2 <scalbn+0x7a>
 801c686:	2d00      	cmp	r5, #0
 801c688:	a11d      	add	r1, pc, #116	@ (adr r1, 801c700 <scalbn+0xd8>)
 801c68a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c68e:	da02      	bge.n	801c696 <scalbn+0x6e>
 801c690:	a11d      	add	r1, pc, #116	@ (adr r1, 801c708 <scalbn+0xe0>)
 801c692:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c696:	a31a      	add	r3, pc, #104	@ (adr r3, 801c700 <scalbn+0xd8>)
 801c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c69c:	f7e3 ffe4 	bl	8000668 <__aeabi_dmul>
 801c6a0:	e7e6      	b.n	801c670 <scalbn+0x48>
 801c6a2:	1872      	adds	r2, r6, r1
 801c6a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801c6a8:	428a      	cmp	r2, r1
 801c6aa:	dcec      	bgt.n	801c686 <scalbn+0x5e>
 801c6ac:	2a00      	cmp	r2, #0
 801c6ae:	dd08      	ble.n	801c6c2 <scalbn+0x9a>
 801c6b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c6b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801c6b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c6bc:	ec45 4b10 	vmov	d0, r4, r5
 801c6c0:	bd70      	pop	{r4, r5, r6, pc}
 801c6c2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801c6c6:	da08      	bge.n	801c6da <scalbn+0xb2>
 801c6c8:	2d00      	cmp	r5, #0
 801c6ca:	a10b      	add	r1, pc, #44	@ (adr r1, 801c6f8 <scalbn+0xd0>)
 801c6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6d0:	dac1      	bge.n	801c656 <scalbn+0x2e>
 801c6d2:	a10f      	add	r1, pc, #60	@ (adr r1, 801c710 <scalbn+0xe8>)
 801c6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6d8:	e7bd      	b.n	801c656 <scalbn+0x2e>
 801c6da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c6de:	3236      	adds	r2, #54	@ 0x36
 801c6e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801c6e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c6e8:	4620      	mov	r0, r4
 801c6ea:	4b0d      	ldr	r3, [pc, #52]	@ (801c720 <scalbn+0xf8>)
 801c6ec:	4629      	mov	r1, r5
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	e7d4      	b.n	801c69c <scalbn+0x74>
 801c6f2:	bf00      	nop
 801c6f4:	f3af 8000 	nop.w
 801c6f8:	c2f8f359 	.word	0xc2f8f359
 801c6fc:	01a56e1f 	.word	0x01a56e1f
 801c700:	8800759c 	.word	0x8800759c
 801c704:	7e37e43c 	.word	0x7e37e43c
 801c708:	8800759c 	.word	0x8800759c
 801c70c:	fe37e43c 	.word	0xfe37e43c
 801c710:	c2f8f359 	.word	0xc2f8f359
 801c714:	81a56e1f 	.word	0x81a56e1f
 801c718:	43500000 	.word	0x43500000
 801c71c:	ffff3cb0 	.word	0xffff3cb0
 801c720:	3c900000 	.word	0x3c900000

0801c724 <with_errno>:
 801c724:	b510      	push	{r4, lr}
 801c726:	ed2d 8b02 	vpush	{d8}
 801c72a:	eeb0 8a40 	vmov.f32	s16, s0
 801c72e:	eef0 8a60 	vmov.f32	s17, s1
 801c732:	4604      	mov	r4, r0
 801c734:	f7fd ffce 	bl	801a6d4 <__errno>
 801c738:	eeb0 0a48 	vmov.f32	s0, s16
 801c73c:	eef0 0a68 	vmov.f32	s1, s17
 801c740:	ecbd 8b02 	vpop	{d8}
 801c744:	6004      	str	r4, [r0, #0]
 801c746:	bd10      	pop	{r4, pc}

0801c748 <xflow>:
 801c748:	4603      	mov	r3, r0
 801c74a:	b507      	push	{r0, r1, r2, lr}
 801c74c:	ec51 0b10 	vmov	r0, r1, d0
 801c750:	b183      	cbz	r3, 801c774 <xflow+0x2c>
 801c752:	4602      	mov	r2, r0
 801c754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c758:	e9cd 2300 	strd	r2, r3, [sp]
 801c75c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c760:	f7e3 ff82 	bl	8000668 <__aeabi_dmul>
 801c764:	ec41 0b10 	vmov	d0, r0, r1
 801c768:	2022      	movs	r0, #34	@ 0x22
 801c76a:	b003      	add	sp, #12
 801c76c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c770:	f7ff bfd8 	b.w	801c724 <with_errno>
 801c774:	4602      	mov	r2, r0
 801c776:	460b      	mov	r3, r1
 801c778:	e7ee      	b.n	801c758 <xflow+0x10>
 801c77a:	0000      	movs	r0, r0
 801c77c:	0000      	movs	r0, r0
	...

0801c780 <__math_uflow>:
 801c780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c788 <__math_uflow+0x8>
 801c784:	f7ff bfe0 	b.w	801c748 <xflow>
 801c788:	00000000 	.word	0x00000000
 801c78c:	10000000 	.word	0x10000000

0801c790 <__math_oflow>:
 801c790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c798 <__math_oflow+0x8>
 801c794:	f7ff bfd8 	b.w	801c748 <xflow>
 801c798:	00000000 	.word	0x00000000
 801c79c:	70000000 	.word	0x70000000

0801c7a0 <_init>:
 801c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7a2:	bf00      	nop
 801c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7a6:	bc08      	pop	{r3}
 801c7a8:	469e      	mov	lr, r3
 801c7aa:	4770      	bx	lr

0801c7ac <_fini>:
 801c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ae:	bf00      	nop
 801c7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7b2:	bc08      	pop	{r3}
 801c7b4:	469e      	mov	lr, r3
 801c7b6:	4770      	bx	lr
